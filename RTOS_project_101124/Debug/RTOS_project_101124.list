
RTOS_project_101124.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e23c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800e410  0800e410  0001e410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8e4  0800e8e4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8e4  0800e8e4  0001e8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8ec  0800e8ec  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8ec  0800e8ec  0001e8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8f0  0800e8f0  0001e8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800e8f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000056dc  200001f0  0800eae4  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200058cc  0800eae4  000258cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024a8e  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ef7  00000000  00000000  00044cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f58  00000000  00000000  00049be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001872  00000000  00000000  0004bb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000297a8  00000000  00000000  0004d3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026e57  00000000  00000000  00076b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f533b  00000000  00000000  0009d9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009618  00000000  00000000  00192cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0019c304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e3f4 	.word	0x0800e3f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800e3f4 	.word	0x0800e3f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
extern TIM_HandleTypeDef htim11;
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <configureTimerForRunTimeStats+0x10>)
 8000eea:	f005 fe15 	bl	8006b18 <HAL_TIM_Base_Start_IT>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000053c 	.word	0x2000053c

08000ef8 <getRunTimeCounterValue>:
extern volatile unsigned long ulHighFrequencyTimerTicks;

__weak unsigned long getRunTimeCounterValue(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <getRunTimeCounterValue+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000954 	.word	0x20000954

08000f10 <vPortSuppressTicksAndSleep>:
/* USER CODE END 1 */

/* USER CODE BEGIN VPORT_SUPPORT_TICKS_AND_SLEEP */
__weak void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  // Generated when configUSE_TICKLESS_IDLE == 2.
  // Function called in tasks.c (in portTASK_FUNCTION).
  // TO BE COMPLETED or TO BE REPLACED by a user one, overriding that weak one.
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_write>:
#define ADC_RESOLUTION 4095
#define ADC_SAMPLES 100

extern UART_HandleTypeDef huart2;

int _write(int fd, char *ptr, int len){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d002      	beq.n	8000f3c <_write+0x18>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d111      	bne.n	8000f60 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <_write+0x48>)
 8000f48:	f006 fa65 	bl	8007416 <HAL_UART_Transmit>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <_write+0x36>
            return len;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	e004      	b.n	8000f64 <_write+0x40>
        else
            return -1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e001      	b.n	8000f64 <_write+0x40>
    }
    return -1;
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000584 	.word	0x20000584

08000f70 <process_adc_buffer>:

// Process half a buffer full of data
static inline void process_adc_buffer(uint16_t *buffer){
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    uint32_t sum1 = 0, sum2 = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < ADC_SAMPLES; ++i) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e016      	b.n	8000fb4 <process_adc_buffer+0x44>
        sum1 += buffer[i * 2];
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	4413      	add	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]
        sum2 += buffer[1 + i * 2];
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4413      	add	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < ADC_SAMPLES; ++i) {
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b63      	cmp	r3, #99	; 0x63
 8000fb8:	dde5      	ble.n	8000f86 <process_adc_buffer+0x16>
    }

    vref_avg = sum2 / ADC_SAMPLES;
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4a30      	ldr	r2, [pc, #192]	; (8001080 <process_adc_buffer+0x110>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <process_adc_buffer+0x114>)
 8000fc8:	801a      	strh	r2, [r3, #0]
    temp_avg = sum1 / ADC_SAMPLES;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	4a2c      	ldr	r2, [pc, #176]	; (8001080 <process_adc_buffer+0x110>)
 8000fce:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <process_adc_buffer+0x118>)
 8000fd8:	801a      	strh	r2, [r3, #0]

    // VDDA can be calculated based on the measured vref and the calibration data
    vdda = (float) VREFINT_CAL_VREF * (float) *VREFINT_CAL_ADDR / vref_avg / 1000;
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <process_adc_buffer+0x11c>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001090 <process_adc_buffer+0x120>
 8000fea:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <process_adc_buffer+0x114>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ffe:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001094 <process_adc_buffer+0x124>
 8001002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <process_adc_buffer+0x128>)
 8001008:	edc3 7a00 	vstr	s15, [r3]

    // Knowing vdda and the resolution of adc - the actual voltage can be calculated
    vref = (float) vdda / ADC_RESOLUTION * vref_avg;
 800100c:	4b22      	ldr	r3, [pc, #136]	; (8001098 <process_adc_buffer+0x128>)
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	eddf 6a22 	vldr	s13, [pc, #136]	; 800109c <process_adc_buffer+0x12c>
 8001016:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <process_adc_buffer+0x114>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <process_adc_buffer+0x130>)
 800102c:	edc3 7a00 	vstr	s15, [r3]
    //vref = __LL_ADC_CALC_VREFANALOG_VOLTAGE(vref_avg, ADC_RESOLUTION_12B);

    temp = (float) ( (float)( (float)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP) / (float)(*TEMPSENSOR_CAL2_ADDR - *TEMPSENSOR_CAL1_ADDR)) * (temp_avg - *TEMPSENSOR_CAL1_ADDR) + TEMPSENSOR_CAL1_TEMP);
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <process_adc_buffer+0x134>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <process_adc_buffer+0x138>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001044:	eddf 6a19 	vldr	s13, [pc, #100]	; 80010ac <process_adc_buffer+0x13c>
 8001048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <process_adc_buffer+0x118>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <process_adc_buffer+0x138>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001064:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001068:	ee77 7a87 	vadd.f32	s15, s15, s14
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <process_adc_buffer+0x140>)
 800106e:	edc3 7a00 	vstr	s15, [r3]
    //temp = __LL_ADC_CALC_TEMPERATURE(vref, temp_avg, ADC_RESOLUTION_12B);
}
 8001072:	bf00      	nop
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	51eb851f 	.word	0x51eb851f
 8001084:	20000210 	.word	0x20000210
 8001088:	20000212 	.word	0x20000212
 800108c:	1fff7a2a 	.word	0x1fff7a2a
 8001090:	454e4000 	.word	0x454e4000
 8001094:	447a0000 	.word	0x447a0000
 8001098:	20000214 	.word	0x20000214
 800109c:	457ff000 	.word	0x457ff000
 80010a0:	20000218 	.word	0x20000218
 80010a4:	1fff7a2e 	.word	0x1fff7a2e
 80010a8:	1fff7a2c 	.word	0x1fff7a2c
 80010ac:	42a00000 	.word	0x42a00000
 80010b0:	2000021c 	.word	0x2000021c

080010b4 <buffclear>:
	int i=0;
	while(*buf++!='\0'){
	i++;}
	return i;
}
void buffclear(void){
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
	for(int i=0;i<256;i++){
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	e007      	b.n	80010d0 <buffclear+0x1c>
		buffer[i]='\0';
 80010c0:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <buffclear+0x30>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<256;i++){
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3301      	adds	r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2bff      	cmp	r3, #255	; 0xff
 80010d4:	ddf4      	ble.n	80010c0 <buffclear+0xc>
	}
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	20000220 	.word	0x20000220

080010e8 <send_uart>:

void send_uart(char*string){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff f8dd 	bl	80002b0 <strlen>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, len, 2000);
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <send_uart+0x30>)
 8001106:	f006 f986 	bl	8007416 <HAL_UART_Transmit>
	buffclear();
 800110a:	f7ff ffd3 	bl	80010b4 <buffclear>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000584 	.word	0x20000584

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001122:	f001 f94d 	bl	80023c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001126:	f000 f8a7 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112a:	f000 fb75 	bl	8001818 <MX_GPIO_Init>
  MX_DMA_Init();
 800112e:	f000 fb53 	bl	80017d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001132:	f000 fb27 	bl	8001784 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001136:	f000 f9f1 	bl	800151c <MX_RTC_Init>
  MX_SPI2_Init();
 800113a:	f000 fa7b 	bl	8001634 <MX_SPI2_Init>
  MX_FATFS_Init();
 800113e:	f006 fcdf 	bl	8007b00 <MX_FATFS_Init>
  MX_ADC1_Init();
 8001142:	f000 f909 	bl	8001358 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001146:	f000 f969 	bl	800141c <MX_ADC2_Init>
  MX_I2C1_Init();
 800114a:	f000 f9b9 	bl	80014c0 <MX_I2C1_Init>
  MX_TIM3_Init();
 800114e:	f000 faa7 	bl	80016a0 <MX_TIM3_Init>
  MX_TIM11_Init();
 8001152:	f000 faf3 	bl	800173c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001156:	f006 fddf 	bl	8007d18 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  MainQueue = xQueueCreate(MAX_QUEUE_SIZE, MAX_CHARS *sizeof(char));
 800115a:	2200      	movs	r2, #0
 800115c:	2128      	movs	r1, #40	; 0x28
 800115e:	200a      	movs	r0, #10
 8001160:	f007 f89a 	bl	8008298 <xQueueGenericCreate>
 8001164:	4603      	mov	r3, r0
 8001166:	4a2b      	ldr	r2, [pc, #172]	; (8001214 <main+0xf8>)
 8001168:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idleTask */
  idleTaskHandle = osThreadNew(StartDefaultTask, NULL, &idleTask_attributes);
 800116a:	4a2b      	ldr	r2, [pc, #172]	; (8001218 <main+0xfc>)
 800116c:	2100      	movs	r1, #0
 800116e:	482b      	ldr	r0, [pc, #172]	; (800121c <main+0x100>)
 8001170:	f006 fe1c 	bl	8007dac <osThreadNew>
 8001174:	4603      	mov	r3, r0
 8001176:	4a2a      	ldr	r2, [pc, #168]	; (8001220 <main+0x104>)
 8001178:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(vUARTtask,"UART_Task", 128, NULL, 1, &UART_Handle);
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <main+0x108>)
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	2301      	movs	r3, #1
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	4928      	ldr	r1, [pc, #160]	; (8001228 <main+0x10c>)
 8001188:	4828      	ldr	r0, [pc, #160]	; (800122c <main+0x110>)
 800118a:	f007 fd28 	bl	8008bde <xTaskCreate>
  xTaskCreate(vRCWLtask,"RCWL_Tsk", 128, NULL, 1, &RCWL_Handle);
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <main+0x114>)
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	2301      	movs	r3, #1
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2300      	movs	r3, #0
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	4926      	ldr	r1, [pc, #152]	; (8001234 <main+0x118>)
 800119c:	4826      	ldr	r0, [pc, #152]	; (8001238 <main+0x11c>)
 800119e:	f007 fd1e 	bl	8008bde <xTaskCreate>
  xTaskCreate(vMQ135task,"MQ135_Task", 128, NULL, 1, &MQ135_Handle);
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <main+0x120>)
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	2301      	movs	r3, #1
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2300      	movs	r3, #0
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	4924      	ldr	r1, [pc, #144]	; (8001240 <main+0x124>)
 80011b0:	4824      	ldr	r0, [pc, #144]	; (8001244 <main+0x128>)
 80011b2:	f007 fd14 	bl	8008bde <xTaskCreate>
  xTaskCreate(vInternalTemptask,"Temp_Task", 256, NULL, 1, &InternalTemp_Handle);
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <main+0x12c>)
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2300      	movs	r3, #0
 80011c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c4:	4921      	ldr	r1, [pc, #132]	; (800124c <main+0x130>)
 80011c6:	4822      	ldr	r0, [pc, #136]	; (8001250 <main+0x134>)
 80011c8:	f007 fd09 	bl	8008bde <xTaskCreate>
  xTaskCreate(vRTCtask,"RTC_Task", 512, NULL, 1, &RTC_Handle);
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <main+0x138>)
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2300      	movs	r3, #0
 80011d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011da:	491f      	ldr	r1, [pc, #124]	; (8001258 <main+0x13c>)
 80011dc:	481f      	ldr	r0, [pc, #124]	; (800125c <main+0x140>)
 80011de:	f007 fcfe 	bl	8008bde <xTaskCreate>
  xTaskCreate(vSDCardtask,"SDCard_Task", 512, NULL, 1, &SDCard_Handle);
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <main+0x144>)
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	2301      	movs	r3, #1
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2300      	movs	r3, #0
 80011ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f0:	491c      	ldr	r1, [pc, #112]	; (8001264 <main+0x148>)
 80011f2:	481d      	ldr	r0, [pc, #116]	; (8001268 <main+0x14c>)
 80011f4:	f007 fcf3 	bl	8008bde <xTaskCreate>
  xTaskCreate(vOLEDtask,"OLED_Task", 512, NULL, 1, &OLED_Handle);
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <main+0x150>)
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	2301      	movs	r3, #1
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2300      	movs	r3, #0
 8001202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001206:	491a      	ldr	r1, [pc, #104]	; (8001270 <main+0x154>)
 8001208:	481a      	ldr	r0, [pc, #104]	; (8001274 <main+0x158>)
 800120a:	f007 fce8 	bl	8008bde <xTaskCreate>
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, ADC_SAMPLES * 2 * 2); // Now fire up the ADC DMA
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800120e:	f006 fda7 	bl	8007d60 <osKernelStart>

//	HAL_TIM_Base_Start_IT(&htim3); // First get the timer running
//
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, ADC_SAMPLES * 2 * 2); // Now fire up the ADC DMA
//	uint32_t now = 0, then = 0;
  while (1)
 8001212:	e7fe      	b.n	8001212 <main+0xf6>
 8001214:	200005e8 	.word	0x200005e8
 8001218:	0800e530 	.word	0x0800e530
 800121c:	08001b45 	.word	0x08001b45
 8001220:	200005c8 	.word	0x200005c8
 8001224:	200005d4 	.word	0x200005d4
 8001228:	0800e41c 	.word	0x0800e41c
 800122c:	08001931 	.word	0x08001931
 8001230:	200005cc 	.word	0x200005cc
 8001234:	0800e428 	.word	0x0800e428
 8001238:	080019c9 	.word	0x080019c9
 800123c:	200005d8 	.word	0x200005d8
 8001240:	0800e434 	.word	0x0800e434
 8001244:	08001ab1 	.word	0x08001ab1
 8001248:	200005dc 	.word	0x200005dc
 800124c:	0800e440 	.word	0x0800e440
 8001250:	08001959 	.word	0x08001959
 8001254:	200005d0 	.word	0x200005d0
 8001258:	0800e44c 	.word	0x0800e44c
 800125c:	08001a2d 	.word	0x08001a2d
 8001260:	200005e0 	.word	0x200005e0
 8001264:	0800e458 	.word	0x0800e458
 8001268:	08001927 	.word	0x08001927
 800126c:	200005e4 	.word	0x200005e4
 8001270:	0800e464 	.word	0x0800e464
 8001274:	08001919 	.word	0x08001919

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	2234      	movs	r2, #52	; 0x34
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f00a ff67 	bl	800c15a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <SystemClock_Config+0xd8>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a2a      	ldr	r2, [pc, #168]	; (8001350 <SystemClock_Config+0xd8>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <SystemClock_Config+0xd8>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012b8:	2300      	movs	r3, #0
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	4b25      	ldr	r3, [pc, #148]	; (8001354 <SystemClock_Config+0xdc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c4:	4a23      	ldr	r2, [pc, #140]	; (8001354 <SystemClock_Config+0xdc>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <SystemClock_Config+0xdc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80012d8:	230a      	movs	r3, #10
 80012da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e0:	2301      	movs	r3, #1
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e4:	2310      	movs	r3, #16
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012e8:	2301      	movs	r3, #1
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ec:	2302      	movs	r3, #2
 80012ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f0:	2300      	movs	r3, #0
 80012f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012f4:	2308      	movs	r3, #8
 80012f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80012f8:	2354      	movs	r3, #84	; 0x54
 80012fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001300:	2302      	movs	r3, #2
 8001302:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001304:	2302      	movs	r3, #2
 8001306:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4618      	mov	r0, r3
 800130e:	f004 f8bb 	bl	8005488 <HAL_RCC_OscConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001318:	f000 fc50 	bl	8001bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131c:	230f      	movs	r3, #15
 800131e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001320:	2302      	movs	r3, #2
 8001322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	2102      	movs	r1, #2
 8001338:	4618      	mov	r0, r3
 800133a:	f003 f9ff 	bl	800473c <HAL_RCC_ClockConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001344:	f000 fc3a 	bl	8001bbc <Error_Handler>
  }
}
 8001348:	bf00      	nop
 800134a:	3750      	adds	r7, #80	; 0x50
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000

08001358 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <MX_ADC1_Init+0xb8>)
 800136c:	4a29      	ldr	r2, [pc, #164]	; (8001414 <MX_ADC1_Init+0xbc>)
 800136e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <MX_ADC1_Init+0xb8>)
 8001372:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001376:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001378:	4b25      	ldr	r3, [pc, #148]	; (8001410 <MX_ADC1_Init+0xb8>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <MX_ADC1_Init+0xb8>)
 8001380:	2201      	movs	r2, #1
 8001382:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <MX_ADC1_Init+0xb8>)
 8001386:	2200      	movs	r2, #0
 8001388:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <MX_ADC1_Init+0xb8>)
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <MX_ADC1_Init+0xb8>)
 8001394:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001398:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <MX_ADC1_Init+0xb8>)
 800139c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <MX_ADC1_Init+0xb8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <MX_ADC1_Init+0xb8>)
 80013aa:	2202      	movs	r2, #2
 80013ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <MX_ADC1_Init+0xb8>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_ADC1_Init+0xb8>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013bc:	4814      	ldr	r0, [pc, #80]	; (8001410 <MX_ADC1_Init+0xb8>)
 80013be:	f001 f865 	bl	800248c <HAL_ADC_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80013c8:	f000 fbf8 	bl	8001bbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_ADC1_Init+0xc0>)
 80013ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80013d4:	2307      	movs	r3, #7
 80013d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d8:	463b      	mov	r3, r7
 80013da:	4619      	mov	r1, r3
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <MX_ADC1_Init+0xb8>)
 80013de:	f001 fb51 	bl	8002a84 <HAL_ADC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013e8:	f000 fbe8 	bl	8001bbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80013ec:	2311      	movs	r3, #17
 80013ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_ADC1_Init+0xb8>)
 80013fa:	f001 fb43 	bl	8002a84 <HAL_ADC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001404:	f000 fbda 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000338 	.word	0x20000338
 8001414:	40012000 	.word	0x40012000
 8001418:	10000012 	.word	0x10000012

0800141c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001422:	463b      	mov	r3, r7
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <MX_ADC2_Init+0x98>)
 8001430:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <MX_ADC2_Init+0x9c>)
 8001432:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001434:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <MX_ADC2_Init+0x98>)
 8001436:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800143a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_ADC2_Init+0x98>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_ADC2_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_ADC2_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_ADC2_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_ADC2_Init+0x98>)
 8001458:	2200      	movs	r2, #0
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_ADC2_Init+0x98>)
 800145e:	4a17      	ldr	r2, [pc, #92]	; (80014bc <MX_ADC2_Init+0xa0>)
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_ADC2_Init+0x98>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_ADC2_Init+0x98>)
 800146a:	2201      	movs	r2, #1
 800146c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_ADC2_Init+0x98>)
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_ADC2_Init+0x98>)
 8001478:	2201      	movs	r2, #1
 800147a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_ADC2_Init+0x98>)
 800147e:	f001 f805 	bl	800248c <HAL_ADC_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001488:	f000 fb98 	bl	8001bbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800148c:	2301      	movs	r3, #1
 800148e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001494:	2307      	movs	r3, #7
 8001496:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_ADC2_Init+0x98>)
 800149e:	f001 faf1 	bl	8002a84 <HAL_ADC_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80014a8:	f000 fb88 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000380 	.word	0x20000380
 80014b8:	40012100 	.word	0x40012100
 80014bc:	0f000001 	.word	0x0f000001

080014c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_I2C1_Init+0x50>)
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <MX_I2C1_Init+0x54>)
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_I2C1_Init+0x50>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_I2C1_Init+0x58>)
 80014ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_I2C1_Init+0x50>)
 80014de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_I2C1_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_I2C1_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MX_I2C1_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_I2C1_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_I2C1_Init+0x50>)
 80014fe:	f002 fba3 	bl	8003c48 <HAL_I2C_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001508:	f000 fb58 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000428 	.word	0x20000428
 8001514:	40005400 	.word	0x40005400
 8001518:	00061a80 	.word	0x00061a80

0800151c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b090      	sub	sp, #64	; 0x40
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001532:	2300      	movs	r3, #0
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001536:	463b      	mov	r3, r7
 8001538:	2228      	movs	r2, #40	; 0x28
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f00a fe0c 	bl	800c15a <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001542:	4b3a      	ldr	r3, [pc, #232]	; (800162c <MX_RTC_Init+0x110>)
 8001544:	4a3a      	ldr	r2, [pc, #232]	; (8001630 <MX_RTC_Init+0x114>)
 8001546:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001548:	4b38      	ldr	r3, [pc, #224]	; (800162c <MX_RTC_Init+0x110>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800154e:	4b37      	ldr	r3, [pc, #220]	; (800162c <MX_RTC_Init+0x110>)
 8001550:	227f      	movs	r2, #127	; 0x7f
 8001552:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001554:	4b35      	ldr	r3, [pc, #212]	; (800162c <MX_RTC_Init+0x110>)
 8001556:	22ff      	movs	r2, #255	; 0xff
 8001558:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800155a:	4b34      	ldr	r3, [pc, #208]	; (800162c <MX_RTC_Init+0x110>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001560:	4b32      	ldr	r3, [pc, #200]	; (800162c <MX_RTC_Init+0x110>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <MX_RTC_Init+0x110>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800156c:	482f      	ldr	r0, [pc, #188]	; (800162c <MX_RTC_Init+0x110>)
 800156e:	f004 fa29 	bl	80059c4 <HAL_RTC_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001578:	f000 fb20 	bl	8001bbc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 800157c:	2311      	movs	r3, #17
 800157e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 42;
 8001582:	232a      	movs	r3, #42	; 0x2a
 8001584:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 30;
 8001588:	231e      	movs	r3, #30
 800158a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800158e:	2300      	movs	r3, #0
 8001590:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159a:	2200      	movs	r2, #0
 800159c:	4619      	mov	r1, r3
 800159e:	4823      	ldr	r0, [pc, #140]	; (800162c <MX_RTC_Init+0x110>)
 80015a0:	f004 fa86 	bl	8005ab0 <HAL_RTC_SetTime>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80015aa:	f000 fb07 	bl	8001bbc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80015ae:	2307      	movs	r3, #7
 80015b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 80015b4:	2311      	movs	r3, #17
 80015b6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 10;
 80015ba:	230a      	movs	r3, #10
 80015bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 24;
 80015c0:	2318      	movs	r3, #24
 80015c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80015c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	4817      	ldr	r0, [pc, #92]	; (800162c <MX_RTC_Init+0x110>)
 80015d0:	f004 fb66 	bl	8005ca0 <HAL_RTC_SetDate>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80015da:	f000 faef 	bl	8001bbc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001602:	2301      	movs	r3, #1
 8001604:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800160e:	463b      	mov	r3, r7
 8001610:	2200      	movs	r2, #0
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_RTC_Init+0x110>)
 8001616:	f004 fc16 	bl	8005e46 <HAL_RTC_SetAlarm>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001620:	f000 facc 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3740      	adds	r7, #64	; 0x40
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000047c 	.word	0x2000047c
 8001630:	40002800 	.word	0x40002800

08001634 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <MX_SPI2_Init+0x64>)
 800163a:	4a18      	ldr	r2, [pc, #96]	; (800169c <MX_SPI2_Init+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_SPI2_Init+0x64>)
 8001640:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001644:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <MX_SPI2_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <MX_SPI2_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_SPI2_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <MX_SPI2_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_SPI2_Init+0x64>)
 8001660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001664:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_SPI2_Init+0x64>)
 8001668:	2208      	movs	r2, #8
 800166a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <MX_SPI2_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_SPI2_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <MX_SPI2_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_SPI2_Init+0x64>)
 8001680:	220a      	movs	r2, #10
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001684:	4804      	ldr	r0, [pc, #16]	; (8001698 <MX_SPI2_Init+0x64>)
 8001686:	f004 fdc5 	bl	8006214 <HAL_SPI_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001690:	f000 fa94 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000049c 	.word	0x2000049c
 800169c:	40003800 	.word	0x40003800

080016a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	463b      	mov	r3, r7
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <MX_TIM3_Init+0x94>)
 80016be:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <MX_TIM3_Init+0x98>)
 80016c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <MX_TIM3_Init+0x94>)
 80016c4:	f240 3247 	movw	r2, #839	; 0x347
 80016c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <MX_TIM3_Init+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_TIM3_Init+0x94>)
 80016d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <MX_TIM3_Init+0x94>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_TIM3_Init+0x94>)
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e4:	4813      	ldr	r0, [pc, #76]	; (8001734 <MX_TIM3_Init+0x94>)
 80016e6:	f005 f9c7 	bl	8006a78 <HAL_TIM_Base_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016f0:	f000 fa64 	bl	8001bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	4619      	mov	r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <MX_TIM3_Init+0x94>)
 8001702:	f005 fb81 	bl	8006e08 <HAL_TIM_ConfigClockSource>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800170c:	f000 fa56 	bl	8001bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001710:	2320      	movs	r3, #32
 8001712:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_TIM3_Init+0x94>)
 800171e:	f005 fd9d 	bl	800725c <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001728:	f000 fa48 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200004f4 	.word	0x200004f4
 8001738:	40000400 	.word	0x40000400

0800173c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_TIM11_Init+0x40>)
 8001742:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <MX_TIM11_Init+0x44>)
 8001744:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <MX_TIM11_Init+0x40>)
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <MX_TIM11_Init+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <MX_TIM11_Init+0x40>)
 8001754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001758:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_TIM11_Init+0x40>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_TIM11_Init+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_TIM11_Init+0x40>)
 8001768:	f005 f986 	bl	8006a78 <HAL_TIM_Base_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001772:	f000 fa23 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000053c 	.word	0x2000053c
 8001780:	40014800 	.word	0x40014800

08001784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_USART2_UART_Init+0x4c>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <MX_USART2_UART_Init+0x50>)
 800178c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <MX_USART2_UART_Init+0x4c>)
 8001790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_USART2_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_USART2_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017bc:	f005 fdde 	bl	800737c <HAL_UART_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017c6:	f000 f9f9 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000584 	.word	0x20000584
 80017d4:	40004400 	.word	0x40004400

080017d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_DMA_Init+0x3c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <MX_DMA_Init+0x3c>)
 80017e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_DMA_Init+0x3c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2101      	movs	r1, #1
 80017fe:	2038      	movs	r0, #56	; 0x38
 8001800:	f001 fca8 	bl	8003154 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001804:	2038      	movs	r0, #56	; 0x38
 8001806:	f001 fcc1 	bl	800318c <HAL_NVIC_EnableIRQ>

}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800

08001818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <MX_GPIO_Init+0xf4>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a35      	ldr	r2, [pc, #212]	; (800190c <MX_GPIO_Init+0xf4>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b33      	ldr	r3, [pc, #204]	; (800190c <MX_GPIO_Init+0xf4>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b2f      	ldr	r3, [pc, #188]	; (800190c <MX_GPIO_Init+0xf4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a2e      	ldr	r2, [pc, #184]	; (800190c <MX_GPIO_Init+0xf4>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b2c      	ldr	r3, [pc, #176]	; (800190c <MX_GPIO_Init+0xf4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b28      	ldr	r3, [pc, #160]	; (800190c <MX_GPIO_Init+0xf4>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a27      	ldr	r2, [pc, #156]	; (800190c <MX_GPIO_Init+0xf4>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <MX_GPIO_Init+0xf4>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	4b21      	ldr	r3, [pc, #132]	; (800190c <MX_GPIO_Init+0xf4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a20      	ldr	r2, [pc, #128]	; (800190c <MX_GPIO_Init+0xf4>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <MX_GPIO_Init+0xf4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2108      	movs	r1, #8
 80018a2:	481b      	ldr	r0, [pc, #108]	; (8001910 <MX_GPIO_Init+0xf8>)
 80018a4:	f002 f99c 	bl	8003be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2120      	movs	r1, #32
 80018ac:	4819      	ldr	r0, [pc, #100]	; (8001914 <MX_GPIO_Init+0xfc>)
 80018ae:	f002 f997 	bl	8003be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80018b2:	2308      	movs	r3, #8
 80018b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4811      	ldr	r0, [pc, #68]	; (8001910 <MX_GPIO_Init+0xf8>)
 80018ca:	f001 ffdd 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018ce:	2320      	movs	r3, #32
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	480b      	ldr	r0, [pc, #44]	; (8001914 <MX_GPIO_Init+0xfc>)
 80018e6:	f001 ffcf 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pin : RCWL_Pin */
  GPIO_InitStruct.Pin = RCWL_Pin;
 80018ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RCWL_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_GPIO_Init+0xfc>)
 8001900:	f001 ffc2 	bl	8003888 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	; 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	40020800 	.word	0x40020800
 8001914:	40020000 	.word	0x40020000

08001918 <vOLEDtask>:

/* USER CODE BEGIN 4 */

void vOLEDtask(void *pvParameters){
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	SSD1306_Init();
 8001920:	f009 f834 	bl	800a98c <SSD1306_Init>
	while(1){
 8001924:	e7fe      	b.n	8001924 <vOLEDtask+0xc>

08001926 <vSDCardtask>:
	}
}



void vSDCardtask(void *pvParameters){
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
//  }
//  f_getfree("", &fre_clust, &pfs);
//	total=(uint32_t)((pfs->n_fatent - 2)*pfs->csize*0.5);
//	fresult=f_open(&fil, "data.txt", FA_OPEN_ALWAYS| FA_READ | FA_WRITE | FA_OPEN_APPEND);
//	buffclear();
	while(1){
 800192e:	e7fe      	b.n	800192e <vSDCardtask+0x8>

08001930 <vUARTtask>:
//		buffclear();
//		count1++;
//		vTaskDelay(500);
	}
}
void vUARTtask(void *pvParameters){
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	while(1){
		xQueueReceive(MainQueue, &buffer, 0);
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <vUARTtask+0x20>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2200      	movs	r2, #0
 800193e:	4905      	ldr	r1, [pc, #20]	; (8001954 <vUARTtask+0x24>)
 8001940:	4618      	mov	r0, r3
 8001942:	f006 fea1 	bl	8008688 <xQueueReceive>
		send_uart(buffer);
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <vUARTtask+0x24>)
 8001948:	f7ff fbce 	bl	80010e8 <send_uart>
		xQueueReceive(MainQueue, &buffer, 0);
 800194c:	e7f4      	b.n	8001938 <vUARTtask+0x8>
 800194e:	bf00      	nop
 8001950:	200005e8 	.word	0x200005e8
 8001954:	20000220 	.word	0x20000220

08001958 <vInternalTemptask>:
	}
}

void vInternalTemptask(void *pvParameters){
 8001958:	b580      	push	{r7, lr}
 800195a:	b092      	sub	sp, #72	; 0x48
 800195c:	af02      	add	r7, sp, #8
 800195e:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim3); // First get the timer running
 8001960:	4812      	ldr	r0, [pc, #72]	; (80019ac <vInternalTemptask+0x54>)
 8001962:	f005 f8d9 	bl	8006b18 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, ADC_SAMPLES * 2 * 2); // Now fire up the ADC DMA
 8001966:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800196a:	4911      	ldr	r1, [pc, #68]	; (80019b0 <vInternalTemptask+0x58>)
 800196c:	4811      	ldr	r0, [pc, #68]	; (80019b4 <vInternalTemptask+0x5c>)
 800196e:	f000 ff61 	bl	8002834 <HAL_ADC_Start_DMA>
	while(1){
		char Temp[50];
		sprintf(Temp,"Temp = %4.2f °C (raw = %d)\r\n",temp, temp_avg);
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <vInternalTemptask+0x60>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fe06 	bl	8000588 <__aeabi_f2d>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	490e      	ldr	r1, [pc, #56]	; (80019bc <vInternalTemptask+0x64>)
 8001982:	8809      	ldrh	r1, [r1, #0]
 8001984:	f107 000c 	add.w	r0, r7, #12
 8001988:	9100      	str	r1, [sp, #0]
 800198a:	490d      	ldr	r1, [pc, #52]	; (80019c0 <vInternalTemptask+0x68>)
 800198c:	f00a fb82 	bl	800c094 <siprintf>
//		HAL_UART_Transmit(&huart2, (uint8_t *)Temp, strlen(Temp), HAL_MAX_DELAY);
		xQueueSend(MainQueue, Temp, 0);
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <vInternalTemptask+0x6c>)
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	f107 010c 	add.w	r1, r7, #12
 8001998:	2300      	movs	r3, #0
 800199a:	2200      	movs	r2, #0
 800199c:	f006 fcda 	bl	8008354 <xQueueGenericSend>
//		send_uart(Temp);
		vTaskDelay(500);
 80019a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019a4:	f007 fa7c 	bl	8008ea0 <vTaskDelay>
	while(1){
 80019a8:	e7e3      	b.n	8001972 <vInternalTemptask+0x1a>
 80019aa:	bf00      	nop
 80019ac:	200004f4 	.word	0x200004f4
 80019b0:	200005ec 	.word	0x200005ec
 80019b4:	20000338 	.word	0x20000338
 80019b8:	2000021c 	.word	0x2000021c
 80019bc:	20000212 	.word	0x20000212
 80019c0:	0800e470 	.word	0x0800e470
 80019c4:	200005e8 	.word	0x200005e8

080019c8 <vRCWLtask>:
	}
}


void vRCWLtask(void *pvParameters){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b092      	sub	sp, #72	; 0x48
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	while(1){
		char motionState[50];
		uint8_t rcwl = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80019d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d4:	4810      	ldr	r0, [pc, #64]	; (8001a18 <vRCWLtask+0x50>)
 80019d6:	f002 f8eb 	bl	8003bb0 <HAL_GPIO_ReadPin>
 80019da:	4603      	mov	r3, r0
 80019dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		char *rcwl_state = (rcwl == 1) ? "HIGH" : "LOW";
 80019e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <vRCWLtask+0x24>
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <vRCWLtask+0x54>)
 80019ea:	e000      	b.n	80019ee <vRCWLtask+0x26>
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <vRCWLtask+0x58>)
 80019ee:	643b      	str	r3, [r7, #64]	; 0x40
		sprintf(motionState,"Motion is %s\r\n", rcwl_state);
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019f6:	490b      	ldr	r1, [pc, #44]	; (8001a24 <vRCWLtask+0x5c>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f00a fb4b 	bl	800c094 <siprintf>
		xQueueSend(MainQueue, motionState, 0);
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <vRCWLtask+0x60>)
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	f107 010c 	add.w	r1, r7, #12
 8001a06:	2300      	movs	r3, #0
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f006 fca3 	bl	8008354 <xQueueGenericSend>
//		send_uart(motionState);
//		HAL_UART_Transmit(&huart2, (uint8_t *)motionState, strlen(motionState), HAL_MAX_DELAY);
		vTaskDelay(500);
 8001a0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a12:	f007 fa45 	bl	8008ea0 <vTaskDelay>
	while(1){
 8001a16:	e7db      	b.n	80019d0 <vRCWLtask+0x8>
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	0800e490 	.word	0x0800e490
 8001a20:	0800e498 	.word	0x0800e498
 8001a24:	0800e49c 	.word	0x0800e49c
 8001a28:	200005e8 	.word	0x200005e8

08001a2c <vRTCtask>:
	}
}

void vRTCtask(void *pvParameters){
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	b0a1      	sub	sp, #132	; 0x84
 8001a30:	af04      	add	r7, sp, #16
 8001a32:	6078      	str	r0, [r7, #4]
	while(1){
		char timeDate[100];
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001a34:	2200      	movs	r2, #0
 8001a36:	4919      	ldr	r1, [pc, #100]	; (8001a9c <vRTCtask+0x70>)
 8001a38:	4819      	ldr	r0, [pc, #100]	; (8001aa0 <vRTCtask+0x74>)
 8001a3a:	f004 f8d3 	bl	8005be4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	4918      	ldr	r1, [pc, #96]	; (8001aa4 <vRTCtask+0x78>)
 8001a42:	4817      	ldr	r0, [pc, #92]	; (8001aa0 <vRTCtask+0x74>)
 8001a44:	f004 f9b0 	bl	8005da8 <HAL_RTC_GetDate>
		sprintf(timeDate,"Date :%02d.%02d.%02d - Time :%02d.%02d.%02d\r\n",sDate.Date, sDate.Month, sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds);
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <vRTCtask+0x78>)
 8001a4a:	789b      	ldrb	r3, [r3, #2]
 8001a4c:	461d      	mov	r5, r3
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <vRTCtask+0x78>)
 8001a50:	785b      	ldrb	r3, [r3, #1]
 8001a52:	461e      	mov	r6, r3
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <vRTCtask+0x78>)
 8001a56:	78db      	ldrb	r3, [r3, #3]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <vRTCtask+0x70>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <vRTCtask+0x70>)
 8001a62:	785b      	ldrb	r3, [r3, #1]
 8001a64:	461c      	mov	r4, r3
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <vRTCtask+0x70>)
 8001a68:	789b      	ldrb	r3, [r3, #2]
 8001a6a:	f107 000c 	add.w	r0, r7, #12
 8001a6e:	9303      	str	r3, [sp, #12]
 8001a70:	9402      	str	r4, [sp, #8]
 8001a72:	9101      	str	r1, [sp, #4]
 8001a74:	9200      	str	r2, [sp, #0]
 8001a76:	4633      	mov	r3, r6
 8001a78:	462a      	mov	r2, r5
 8001a7a:	490b      	ldr	r1, [pc, #44]	; (8001aa8 <vRTCtask+0x7c>)
 8001a7c:	f00a fb0a 	bl	800c094 <siprintf>
		xQueueSend(MainQueue, timeDate, 10);
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <vRTCtask+0x80>)
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	f107 010c 	add.w	r1, r7, #12
 8001a88:	2300      	movs	r3, #0
 8001a8a:	220a      	movs	r2, #10
 8001a8c:	f006 fc62 	bl	8008354 <xQueueGenericSend>
//		send_uart(timeDate);
//		HAL_UART_Transmit(&huart2, (uint8_t *)timeDate, strlen(timeDate), HAL_MAX_DELAY);
		vTaskDelay(500);
 8001a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a94:	f007 fa04 	bl	8008ea0 <vTaskDelay>
	while(1){
 8001a98:	e7cc      	b.n	8001a34 <vRTCtask+0x8>
 8001a9a:	bf00      	nop
 8001a9c:	20000320 	.word	0x20000320
 8001aa0:	2000047c 	.word	0x2000047c
 8001aa4:	20000334 	.word	0x20000334
 8001aa8:	0800e4ac 	.word	0x0800e4ac
 8001aac:	200005e8 	.word	0x200005e8

08001ab0 <vMQ135task>:
	}
}

void vMQ135task(void *pvParameters){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b090      	sub	sp, #64	; 0x40
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	while(1){
		char adcVal[50];
		HAL_ADC_Start(&hadc2);
 8001ab8:	4811      	ldr	r0, [pc, #68]	; (8001b00 <vMQ135task+0x50>)
 8001aba:	f000 fd2b 	bl	8002514 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001abe:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac2:	480f      	ldr	r0, [pc, #60]	; (8001b00 <vMQ135task+0x50>)
 8001ac4:	f000 fe2b 	bl	800271e <HAL_ADC_PollForConversion>
		long unsigned int adc_value= HAL_ADC_GetValue(&hadc2);
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <vMQ135task+0x50>)
 8001aca:	f000 ffc3 	bl	8002a54 <HAL_ADC_GetValue>
 8001ace:	63f8      	str	r0, [r7, #60]	; 0x3c
		HAL_ADC_Stop(&hadc2);
 8001ad0:	480b      	ldr	r0, [pc, #44]	; (8001b00 <vMQ135task+0x50>)
 8001ad2:	f000 fdf1 	bl	80026b8 <HAL_ADC_Stop>
		sprintf(adcVal,"ADC Value is %lu\r\n",adc_value);
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001adc:	4909      	ldr	r1, [pc, #36]	; (8001b04 <vMQ135task+0x54>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f00a fad8 	bl	800c094 <siprintf>
		xQueueSend(MainQueue, adcVal, 0);
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <vMQ135task+0x58>)
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	f107 0108 	add.w	r1, r7, #8
 8001aec:	2300      	movs	r3, #0
 8001aee:	2200      	movs	r2, #0
 8001af0:	f006 fc30 	bl	8008354 <xQueueGenericSend>
//		send_uart(adcVal);
//		HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, strlen(buffer1), HAL_MAX_DELAY);
		vTaskDelay(500);
 8001af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001af8:	f007 f9d2 	bl	8008ea0 <vTaskDelay>
	while(1){
 8001afc:	e7dc      	b.n	8001ab8 <vMQ135task+0x8>
 8001afe:	bf00      	nop
 8001b00:	20000380 	.word	0x20000380
 8001b04:	0800e4dc 	.word	0x0800e4dc
 8001b08:	200005e8 	.word	0x200005e8

08001b0c <HAL_ADC_ConvHalfCpltCallback>:
	}
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
    process_adc_buffer(&adc_buffer[0]); // We're half way through the buffer, so can safely deal with first half
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001b16:	f7ff fa2b 	bl	8000f70 <process_adc_buffer>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200005ec 	.word	0x200005ec

08001b28 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    process_adc_buffer(&adc_buffer[ADC_SAMPLES * 2]); // We're all the way through the buffer, so deal with second half
 8001b30:	4803      	ldr	r0, [pc, #12]	; (8001b40 <HAL_ADC_ConvCpltCallback+0x18>)
 8001b32:	f7ff fa1d 	bl	8000f70 <process_adc_buffer>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000077c 	.word	0x2000077c

08001b44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f006 f9bf 	bl	8007ed0 <osDelay>
 8001b52:	e7fb      	b.n	8001b4c <StartDefaultTask+0x8>

08001b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM3) {
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d115      	bne.n	8001b92 <HAL_TIM_PeriodElapsedCallback+0x3e>
		if (tim_cnt % 500 == 0)
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b70:	095b      	lsrs	r3, r3, #5
 8001b72:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d103      	bne.n	8001b88 <HAL_TIM_PeriodElapsedCallback+0x34>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001b80:	2120      	movs	r1, #32
 8001b82:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001b84:	f002 f845 	bl	8003c12 <HAL_GPIO_TogglePin>
		tim_cnt++;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b90:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_TIM_PeriodElapsedCallback+0x4c>
    HAL_IncTick();
 8001b9c:	f000 fc32 	bl	8002404 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40000400 	.word	0x40000400
 8001bac:	2000020c 	.word	0x2000020c
 8001bb0:	10624dd3 	.word	0x10624dd3
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40001000 	.word	0x40001000

08001bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc0:	b672      	cpsid	i
}
 8001bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <Error_Handler+0x8>
	...

08001bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_MspInit+0x54>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_MspInit+0x54>)
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_MspInit+0x54>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_MspInit+0x54>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_MspInit+0x54>)
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_MspInit+0x54>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	210f      	movs	r1, #15
 8001c0a:	f06f 0001 	mvn.w	r0, #1
 8001c0e:	f001 faa1 	bl	8003154 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a39      	ldr	r2, [pc, #228]	; (8001d24 <HAL_ADC_MspInit+0x104>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d13f      	bne.n	8001cc2 <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <HAL_ADC_MspInit+0x108>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4a37      	ldr	r2, [pc, #220]	; (8001d28 <HAL_ADC_MspInit+0x108>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6453      	str	r3, [r2, #68]	; 0x44
 8001c52:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <HAL_ADC_MspInit+0x108>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c5e:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <HAL_ADC_MspInit+0x10c>)
 8001c60:	4a33      	ldr	r2, [pc, #204]	; (8001d30 <HAL_ADC_MspInit+0x110>)
 8001c62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c64:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <HAL_ADC_MspInit+0x10c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c6a:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <HAL_ADC_MspInit+0x10c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c70:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <HAL_ADC_MspInit+0x10c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c76:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <HAL_ADC_MspInit+0x10c>)
 8001c78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_ADC_MspInit+0x10c>)
 8001c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c86:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <HAL_ADC_MspInit+0x10c>)
 8001c88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c8e:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <HAL_ADC_MspInit+0x10c>)
 8001c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001c96:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_ADC_MspInit+0x10c>)
 8001c98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c9c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c9e:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <HAL_ADC_MspInit+0x10c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ca4:	4821      	ldr	r0, [pc, #132]	; (8001d2c <HAL_ADC_MspInit+0x10c>)
 8001ca6:	f001 fa7f 	bl	80031a8 <HAL_DMA_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001cb0:	f7ff ff84 	bl	8001bbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a1d      	ldr	r2, [pc, #116]	; (8001d2c <HAL_ADC_MspInit+0x10c>)
 8001cb8:	639a      	str	r2, [r3, #56]	; 0x38
 8001cba:	4a1c      	ldr	r2, [pc, #112]	; (8001d2c <HAL_ADC_MspInit+0x10c>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001cc0:	e02c      	b.n	8001d1c <HAL_ADC_MspInit+0xfc>
  else if(hadc->Instance==ADC2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1b      	ldr	r2, [pc, #108]	; (8001d34 <HAL_ADC_MspInit+0x114>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d127      	bne.n	8001d1c <HAL_ADC_MspInit+0xfc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_ADC_MspInit+0x108>)
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd4:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <HAL_ADC_MspInit+0x108>)
 8001cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cda:	6453      	str	r3, [r2, #68]	; 0x44
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_ADC_MspInit+0x108>)
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_ADC_MspInit+0x108>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_ADC_MspInit+0x108>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_ADC_MspInit+0x108>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MQ135_Pin;
 8001d04:	2302      	movs	r3, #2
 8001d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MQ135_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	4808      	ldr	r0, [pc, #32]	; (8001d38 <HAL_ADC_MspInit+0x118>)
 8001d18:	f001 fdb6 	bl	8003888 <HAL_GPIO_Init>
}
 8001d1c:	bf00      	nop
 8001d1e:	3728      	adds	r7, #40	; 0x28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40012000 	.word	0x40012000
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	200003c8 	.word	0x200003c8
 8001d30:	40026410 	.word	0x40026410
 8001d34:	40012100 	.word	0x40012100
 8001d38:	40020000 	.word	0x40020000

08001d3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_I2C_MspInit+0x84>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d12c      	bne.n	8001db8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001d7a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d80:	2312      	movs	r3, #18
 8001d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <HAL_I2C_MspInit+0x8c>)
 8001d98:	f001 fd76 	bl	8003888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001da6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001daa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_I2C_MspInit+0x88>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40005400 	.word	0x40005400
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020400 	.word	0x40020400

08001dcc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b09a      	sub	sp, #104	; 0x68
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	225c      	movs	r2, #92	; 0x5c
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f00a f9bc 	bl	800c15a <memset>
  if(hrtc->Instance==RTC)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <HAL_RTC_MspInit+0x4c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d111      	bne.n	8001e10 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001dec:	2320      	movs	r3, #32
 8001dee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 fdea 	bl	80049d4 <HAL_RCCEx_PeriphCLKConfig>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001e06:	f7ff fed9 	bl	8001bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <HAL_RTC_MspInit+0x50>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e10:	bf00      	nop
 8001e12:	3768      	adds	r7, #104	; 0x68
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40002800 	.word	0x40002800
 8001e1c:	42470e3c 	.word	0x42470e3c

08001e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a30      	ldr	r2, [pc, #192]	; (8001f00 <HAL_SPI_MspInit+0xe0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d15a      	bne.n	8001ef8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <HAL_SPI_MspInit+0xe4>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a2e      	ldr	r2, [pc, #184]	; (8001f04 <HAL_SPI_MspInit+0xe4>)
 8001e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_SPI_MspInit+0xe4>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <HAL_SPI_MspInit+0xe4>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a27      	ldr	r2, [pc, #156]	; (8001f04 <HAL_SPI_MspInit+0xe4>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <HAL_SPI_MspInit+0xe4>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_SPI_MspInit+0xe4>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <HAL_SPI_MspInit+0xe4>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_SPI_MspInit+0xe4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e96:	2302      	movs	r3, #2
 8001e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4815      	ldr	r0, [pc, #84]	; (8001f08 <HAL_SPI_MspInit+0xe8>)
 8001eb2:	f001 fce9 	bl	8003888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ec6:	2305      	movs	r3, #5
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <HAL_SPI_MspInit+0xe8>)
 8001ed2:	f001 fcd9 	bl	8003888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ee8:	2305      	movs	r3, #5
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4806      	ldr	r0, [pc, #24]	; (8001f0c <HAL_SPI_MspInit+0xec>)
 8001ef4:	f001 fcc8 	bl	8003888 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ef8:	bf00      	nop
 8001efa:	3728      	adds	r7, #40	; 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40003800 	.word	0x40003800
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020800 	.word	0x40020800
 8001f0c:	40020400 	.word	0x40020400

08001f10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a18      	ldr	r2, [pc, #96]	; (8001f80 <HAL_TIM_Base_MspInit+0x70>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10e      	bne.n	8001f40 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_TIM_Base_MspInit+0x74>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a16      	ldr	r2, [pc, #88]	; (8001f84 <HAL_TIM_Base_MspInit+0x74>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_TIM_Base_MspInit+0x74>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001f3e:	e01a      	b.n	8001f76 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <HAL_TIM_Base_MspInit+0x78>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d115      	bne.n	8001f76 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_TIM_Base_MspInit+0x74>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <HAL_TIM_Base_MspInit+0x74>)
 8001f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f58:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_TIM_Base_MspInit+0x74>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2105      	movs	r1, #5
 8001f6a:	201a      	movs	r0, #26
 8001f6c:	f001 f8f2 	bl	8003154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f70:	201a      	movs	r0, #26
 8001f72:	f001 f90b 	bl	800318c <HAL_NVIC_EnableIRQ>
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40014800 	.word	0x40014800

08001f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a19      	ldr	r2, [pc, #100]	; (8002010 <HAL_UART_MspInit+0x84>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d12b      	bne.n	8002006 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_UART_MspInit+0x88>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a17      	ldr	r2, [pc, #92]	; (8002014 <HAL_UART_MspInit+0x88>)
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_UART_MspInit+0x88>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_UART_MspInit+0x88>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a10      	ldr	r2, [pc, #64]	; (8002014 <HAL_UART_MspInit+0x88>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_UART_MspInit+0x88>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8001fe6:	230c      	movs	r3, #12
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ff6:	2307      	movs	r3, #7
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	4805      	ldr	r0, [pc, #20]	; (8002018 <HAL_UART_MspInit+0x8c>)
 8002002:	f001 fc41 	bl	8003888 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	; 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40004400 	.word	0x40004400
 8002014:	40023800 	.word	0x40023800
 8002018:	40020000 	.word	0x40020000

0800201c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08e      	sub	sp, #56	; 0x38
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	4b33      	ldr	r3, [pc, #204]	; (8002100 <HAL_InitTick+0xe4>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	4a32      	ldr	r2, [pc, #200]	; (8002100 <HAL_InitTick+0xe4>)
 8002036:	f043 0310 	orr.w	r3, r3, #16
 800203a:	6413      	str	r3, [r2, #64]	; 0x40
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_InitTick+0xe4>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002048:	f107 0210 	add.w	r2, r7, #16
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f002 fc8c 	bl	8004970 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002062:	f002 fc5d 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8002066:	6378      	str	r0, [r7, #52]	; 0x34
 8002068:	e004      	b.n	8002074 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800206a:	f002 fc59 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 800206e:	4603      	mov	r3, r0
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002076:	4a23      	ldr	r2, [pc, #140]	; (8002104 <HAL_InitTick+0xe8>)
 8002078:	fba2 2303 	umull	r2, r3, r2, r3
 800207c:	0c9b      	lsrs	r3, r3, #18
 800207e:	3b01      	subs	r3, #1
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <HAL_InitTick+0xec>)
 8002084:	4a21      	ldr	r2, [pc, #132]	; (800210c <HAL_InitTick+0xf0>)
 8002086:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <HAL_InitTick+0xec>)
 800208a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800208e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002090:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <HAL_InitTick+0xec>)
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_InitTick+0xec>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209c:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <HAL_InitTick+0xec>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_InitTick+0xec>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80020a8:	4817      	ldr	r0, [pc, #92]	; (8002108 <HAL_InitTick+0xec>)
 80020aa:	f004 fce5 	bl	8006a78 <HAL_TIM_Base_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80020b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11b      	bne.n	80020f4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80020bc:	4812      	ldr	r0, [pc, #72]	; (8002108 <HAL_InitTick+0xec>)
 80020be:	f004 fd2b 	bl	8006b18 <HAL_TIM_Base_Start_IT>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80020c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020d0:	2036      	movs	r0, #54	; 0x36
 80020d2:	f001 f85b 	bl	800318c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b0f      	cmp	r3, #15
 80020da:	d808      	bhi.n	80020ee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80020dc:	2200      	movs	r2, #0
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	2036      	movs	r0, #54	; 0x36
 80020e2:	f001 f837 	bl	8003154 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <HAL_InitTick+0xf4>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	e002      	b.n	80020f4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3738      	adds	r7, #56	; 0x38
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800
 8002104:	431bde83 	.word	0x431bde83
 8002108:	2000090c 	.word	0x2000090c
 800210c:	40001000 	.word	0x40001000
 8002110:	20000004 	.word	0x20000004

08002114 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <SDTimer_Handler+0x40>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d006      	beq.n	8002130 <SDTimer_Handler+0x1c>
    Timer1--;
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <SDTimer_Handler+0x40>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <SDTimer_Handler+0x40>)
 800212e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <SDTimer_Handler+0x44>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <SDTimer_Handler+0x34>
    Timer2--;
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <SDTimer_Handler+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b2da      	uxtb	r2, r3
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <SDTimer_Handler+0x44>)
 8002146:	701a      	strb	r2, [r3, #0]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000959 	.word	0x20000959
 8002158:	2000095a 	.word	0x2000095a

0800215c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <NMI_Handler+0x4>

08002162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <HardFault_Handler+0x4>

08002168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <MemManage_Handler+0x4>

0800216e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <BusFault_Handler+0x4>

08002174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <UsageFault_Handler+0x4>

0800217a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800218c:	4804      	ldr	r0, [pc, #16]	; (80021a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800218e:	f004 fd33 	bl	8006bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	4a02      	ldr	r2, [pc, #8]	; (80021a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 800219a:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	2000053c 	.word	0x2000053c
 80021a4:	20000954 	.word	0x20000954

080021a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	 FatFsCnt++;
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <TIM6_DAC_IRQHandler+0x30>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	3301      	adds	r3, #1
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <TIM6_DAC_IRQHandler+0x30>)
 80021b8:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <TIM6_DAC_IRQHandler+0x30>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b09      	cmp	r3, #9
 80021c2:	d904      	bls.n	80021ce <TIM6_DAC_IRQHandler+0x26>
	  {
	    FatFsCnt = 0;
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <TIM6_DAC_IRQHandler+0x30>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80021ca:	f7ff ffa3 	bl	8002114 <SDTimer_Handler>
	  }

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021ce:	4803      	ldr	r0, [pc, #12]	; (80021dc <TIM6_DAC_IRQHandler+0x34>)
 80021d0:	f004 fd12 	bl	8006bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000958 	.word	0x20000958
 80021dc:	2000090c 	.word	0x2000090c

080021e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <DMA2_Stream0_IRQHandler+0x10>)
 80021e6:	f001 f8e5 	bl	80033b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200003c8 	.word	0x200003c8

080021f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return 1;
 80021f8:	2301      	movs	r3, #1
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_kill>:

int _kill(int pid, int sig)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800220e:	f00a f84d 	bl	800c2ac <__errno>
 8002212:	4603      	mov	r3, r0
 8002214:	2216      	movs	r2, #22
 8002216:	601a      	str	r2, [r3, #0]
  return -1;
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <_exit>:

void _exit (int status)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ffe7 	bl	8002204 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002236:	e7fe      	b.n	8002236 <_exit+0x12>

08002238 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	e00a      	b.n	8002260 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800224a:	f3af 8000 	nop.w
 800224e:	4601      	mov	r1, r0
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	60ba      	str	r2, [r7, #8]
 8002256:	b2ca      	uxtb	r2, r1
 8002258:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3301      	adds	r3, #1
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	dbf0      	blt.n	800224a <_read+0x12>
  }

  return len;
 8002268:	687b      	ldr	r3, [r7, #4]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800229a:	605a      	str	r2, [r3, #4]
  return 0;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <_isatty>:

int _isatty(int file)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022b2:	2301      	movs	r3, #1
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <_sbrk+0x5c>)
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <_sbrk+0x60>)
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <_sbrk+0x64>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <_sbrk+0x64>)
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <_sbrk+0x68>)
 80022fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	429a      	cmp	r2, r3
 800230a:	d207      	bcs.n	800231c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800230c:	f009 ffce 	bl	800c2ac <__errno>
 8002310:	4603      	mov	r3, r0
 8002312:	220c      	movs	r2, #12
 8002314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
 800231a:	e009      	b.n	8002330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <_sbrk+0x64>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	4a05      	ldr	r2, [pc, #20]	; (8002340 <_sbrk+0x64>)
 800232c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20020000 	.word	0x20020000
 800233c:	00000400 	.word	0x00000400
 8002340:	2000095c 	.word	0x2000095c
 8002344:	200058d0 	.word	0x200058d0

08002348 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <SystemInit+0x20>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <SystemInit+0x20>)
 8002354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800236c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002370:	480d      	ldr	r0, [pc, #52]	; (80023a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002372:	490e      	ldr	r1, [pc, #56]	; (80023ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002374:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002378:	e002      	b.n	8002380 <LoopCopyDataInit>

0800237a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800237c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237e:	3304      	adds	r3, #4

08002380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002384:	d3f9      	bcc.n	800237a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002386:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002388:	4c0b      	ldr	r4, [pc, #44]	; (80023b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800238c:	e001      	b.n	8002392 <LoopFillZerobss>

0800238e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002390:	3204      	adds	r2, #4

08002392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002394:	d3fb      	bcc.n	800238e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002396:	f7ff ffd7 	bl	8002348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800239a:	f009 ff8d 	bl	800c2b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800239e:	f7fe febd 	bl	800111c <main>
  bx  lr    
 80023a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ac:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80023b0:	0800e8f4 	.word	0x0800e8f4
  ldr r2, =_sbss
 80023b4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80023b8:	200058cc 	.word	0x200058cc

080023bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC_IRQHandler>
	...

080023c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_Init+0x40>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <HAL_Init+0x40>)
 80023ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_Init+0x40>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <HAL_Init+0x40>)
 80023d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_Init+0x40>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_Init+0x40>)
 80023e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e8:	2003      	movs	r0, #3
 80023ea:	f000 fea8 	bl	800313e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ee:	200f      	movs	r0, #15
 80023f0:	f7ff fe14 	bl	800201c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f4:	f7ff fbe8 	bl	8001bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00

08002404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_IncTick+0x20>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_IncTick+0x24>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4413      	add	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_IncTick+0x24>)
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000008 	.word	0x20000008
 8002428:	20000960 	.word	0x20000960

0800242c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return uwTick;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_GetTick+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000960 	.word	0x20000960

08002444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800244c:	f7ff ffee 	bl	800242c <HAL_GetTick>
 8002450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245c:	d005      	beq.n	800246a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_Delay+0x44>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4413      	add	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800246a:	bf00      	nop
 800246c:	f7ff ffde 	bl	800242c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	429a      	cmp	r2, r3
 800247a:	d8f7      	bhi.n	800246c <HAL_Delay+0x28>
  {
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000008 	.word	0x20000008

0800248c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e033      	b.n	800250a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff fbb8 	bl	8001c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d118      	bne.n	80024fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024d2:	f023 0302 	bic.w	r3, r3, #2
 80024d6:	f043 0202 	orr.w	r2, r3, #2
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fc02 	bl	8002ce8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
 80024fa:	e001      	b.n	8002500 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002508:	7bfb      	ldrb	r3, [r7, #15]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_ADC_Start+0x1a>
 800252a:	2302      	movs	r3, #2
 800252c:	e0b2      	b.n	8002694 <HAL_ADC_Start+0x180>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d018      	beq.n	8002576 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002554:	4b52      	ldr	r3, [pc, #328]	; (80026a0 <HAL_ADC_Start+0x18c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a52      	ldr	r2, [pc, #328]	; (80026a4 <HAL_ADC_Start+0x190>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0c9a      	lsrs	r2, r3, #18
 8002560:	4613      	mov	r3, r2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4413      	add	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002568:	e002      	b.n	8002570 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	3b01      	subs	r3, #1
 800256e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f9      	bne.n	800256a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d17a      	bne.n	800267a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c2:	d106      	bne.n	80025d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	f023 0206 	bic.w	r2, r3, #6
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	645a      	str	r2, [r3, #68]	; 0x44
 80025d0:	e002      	b.n	80025d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025e0:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <HAL_ADC_Start+0x194>)
 80025e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025ec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d12a      	bne.n	8002650 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a2b      	ldr	r2, [pc, #172]	; (80026ac <HAL_ADC_Start+0x198>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d015      	beq.n	8002630 <HAL_ADC_Start+0x11c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a29      	ldr	r2, [pc, #164]	; (80026b0 <HAL_ADC_Start+0x19c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d105      	bne.n	800261a <HAL_ADC_Start+0x106>
 800260e:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <HAL_ADC_Start+0x194>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a25      	ldr	r2, [pc, #148]	; (80026b4 <HAL_ADC_Start+0x1a0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d136      	bne.n	8002692 <HAL_ADC_Start+0x17e>
 8002624:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_ADC_Start+0x194>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b00      	cmp	r3, #0
 800262e:	d130      	bne.n	8002692 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d129      	bne.n	8002692 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	e020      	b.n	8002692 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a15      	ldr	r2, [pc, #84]	; (80026ac <HAL_ADC_Start+0x198>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d11b      	bne.n	8002692 <HAL_ADC_Start+0x17e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d114      	bne.n	8002692 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	e00b      	b.n	8002692 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f043 0210 	orr.w	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f043 0201 	orr.w	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	20000000 	.word	0x20000000
 80026a4:	431bde83 	.word	0x431bde83
 80026a8:	40012300 	.word	0x40012300
 80026ac:	40012000 	.word	0x40012000
 80026b0:	40012100 	.word	0x40012100
 80026b4:	40012200 	.word	0x40012200

080026b8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_Stop+0x16>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e021      	b.n	8002712 <HAL_ADC_Stop+0x5a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0201 	bic.w	r2, r2, #1
 80026e4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273a:	d113      	bne.n	8002764 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800274a:	d10b      	bne.n	8002764 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f043 0220 	orr.w	r2, r3, #32
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e063      	b.n	800282c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002764:	f7ff fe62 	bl	800242c <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800276a:	e021      	b.n	80027b0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002772:	d01d      	beq.n	80027b0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_ADC_PollForConversion+0x6c>
 800277a:	f7ff fe57 	bl	800242c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d212      	bcs.n	80027b0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b02      	cmp	r3, #2
 8002796:	d00b      	beq.n	80027b0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f043 0204 	orr.w	r2, r3, #4
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e03d      	b.n	800282c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d1d6      	bne.n	800276c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f06f 0212 	mvn.w	r2, #18
 80027c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d123      	bne.n	800282a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d11f      	bne.n	800282a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d006      	beq.n	8002806 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002802:	2b00      	cmp	r3, #0
 8002804:	d111      	bne.n	800282a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f043 0201 	orr.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_ADC_Start_DMA+0x1e>
 800284e:	2302      	movs	r3, #2
 8002850:	e0e9      	b.n	8002a26 <HAL_ADC_Start_DMA+0x1f2>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d018      	beq.n	800289a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002878:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <HAL_ADC_Start_DMA+0x1fc>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a6d      	ldr	r2, [pc, #436]	; (8002a34 <HAL_ADC_Start_DMA+0x200>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	0c9a      	lsrs	r2, r3, #18
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800288c:	e002      	b.n	8002894 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	3b01      	subs	r3, #1
 8002892:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f9      	bne.n	800288e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a8:	d107      	bne.n	80028ba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	f040 80a1 	bne.w	8002a0c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002908:	d106      	bne.n	8002918 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	f023 0206 	bic.w	r2, r3, #6
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	645a      	str	r2, [r3, #68]	; 0x44
 8002916:	e002      	b.n	800291e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002926:	4b44      	ldr	r3, [pc, #272]	; (8002a38 <HAL_ADC_Start_DMA+0x204>)
 8002928:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	4a43      	ldr	r2, [pc, #268]	; (8002a3c <HAL_ADC_Start_DMA+0x208>)
 8002930:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	4a42      	ldr	r2, [pc, #264]	; (8002a40 <HAL_ADC_Start_DMA+0x20c>)
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	4a41      	ldr	r2, [pc, #260]	; (8002a44 <HAL_ADC_Start_DMA+0x210>)
 8002940:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800294a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800295a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800296a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	334c      	adds	r3, #76	; 0x4c
 8002976:	4619      	mov	r1, r3
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f000 fcc2 	bl	8003304 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2b00      	cmp	r3, #0
 800298a:	d12a      	bne.n	80029e2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2d      	ldr	r2, [pc, #180]	; (8002a48 <HAL_ADC_Start_DMA+0x214>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d015      	beq.n	80029c2 <HAL_ADC_Start_DMA+0x18e>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a2c      	ldr	r2, [pc, #176]	; (8002a4c <HAL_ADC_Start_DMA+0x218>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d105      	bne.n	80029ac <HAL_ADC_Start_DMA+0x178>
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <HAL_ADC_Start_DMA+0x204>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <HAL_ADC_Start_DMA+0x21c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d136      	bne.n	8002a24 <HAL_ADC_Start_DMA+0x1f0>
 80029b6:	4b20      	ldr	r3, [pc, #128]	; (8002a38 <HAL_ADC_Start_DMA+0x204>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d130      	bne.n	8002a24 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d129      	bne.n	8002a24 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	e020      	b.n	8002a24 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a18      	ldr	r2, [pc, #96]	; (8002a48 <HAL_ADC_Start_DMA+0x214>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d11b      	bne.n	8002a24 <HAL_ADC_Start_DMA+0x1f0>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d114      	bne.n	8002a24 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	e00b      	b.n	8002a24 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f043 0210 	orr.w	r2, r3, #16
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	f043 0201 	orr.w	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000000 	.word	0x20000000
 8002a34:	431bde83 	.word	0x431bde83
 8002a38:	40012300 	.word	0x40012300
 8002a3c:	08002ee1 	.word	0x08002ee1
 8002a40:	08002f9b 	.word	0x08002f9b
 8002a44:	08002fb7 	.word	0x08002fb7
 8002a48:	40012000 	.word	0x40012000
 8002a4c:	40012100 	.word	0x40012100
 8002a50:	40012200 	.word	0x40012200

08002a54 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x1c>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e113      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x244>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b09      	cmp	r3, #9
 8002aae:	d925      	bls.n	8002afc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68d9      	ldr	r1, [r3, #12]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b1e      	subs	r3, #30
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43da      	mvns	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68d9      	ldr	r1, [r3, #12]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	4603      	mov	r3, r0
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4403      	add	r3, r0
 8002aee:	3b1e      	subs	r3, #30
 8002af0:	409a      	lsls	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	e022      	b.n	8002b42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6919      	ldr	r1, [r3, #16]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	2207      	movs	r2, #7
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6919      	ldr	r1, [r3, #16]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4618      	mov	r0, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4403      	add	r3, r0
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d824      	bhi.n	8002b94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	3b05      	subs	r3, #5
 8002b5c:	221f      	movs	r2, #31
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	400a      	ands	r2, r1
 8002b6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	3b05      	subs	r3, #5
 8002b86:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	635a      	str	r2, [r3, #52]	; 0x34
 8002b92:	e04c      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	d824      	bhi.n	8002be6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	3b23      	subs	r3, #35	; 0x23
 8002bae:	221f      	movs	r2, #31
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	400a      	ands	r2, r1
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	4618      	mov	r0, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3b23      	subs	r3, #35	; 0x23
 8002bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
 8002be4:	e023      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3b41      	subs	r3, #65	; 0x41
 8002bf8:	221f      	movs	r2, #31
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	400a      	ands	r2, r1
 8002c06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	4618      	mov	r0, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	3b41      	subs	r3, #65	; 0x41
 8002c22:	fa00 f203 	lsl.w	r2, r0, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2e:	4b29      	ldr	r3, [pc, #164]	; (8002cd4 <HAL_ADC_ConfigChannel+0x250>)
 8002c30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a28      	ldr	r2, [pc, #160]	; (8002cd8 <HAL_ADC_ConfigChannel+0x254>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d10f      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x1d8>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b12      	cmp	r3, #18
 8002c42:	d10b      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a1d      	ldr	r2, [pc, #116]	; (8002cd8 <HAL_ADC_ConfigChannel+0x254>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d12b      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x23a>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1c      	ldr	r2, [pc, #112]	; (8002cdc <HAL_ADC_ConfigChannel+0x258>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x1f4>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b11      	cmp	r3, #17
 8002c76:	d122      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <HAL_ADC_ConfigChannel+0x258>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d111      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c9a:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <HAL_ADC_ConfigChannel+0x25c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a11      	ldr	r2, [pc, #68]	; (8002ce4 <HAL_ADC_ConfigChannel+0x260>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	0c9a      	lsrs	r2, r3, #18
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cb0:	e002      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f9      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	40012300 	.word	0x40012300
 8002cd8:	40012000 	.word	0x40012000
 8002cdc:	10000012 	.word	0x10000012
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	431bde83 	.word	0x431bde83

08002ce8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cf0:	4b79      	ldr	r3, [pc, #484]	; (8002ed8 <ADC_Init+0x1f0>)
 8002cf2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	021a      	lsls	r2, r3, #8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6899      	ldr	r1, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	4a58      	ldr	r2, [pc, #352]	; (8002edc <ADC_Init+0x1f4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6899      	ldr	r1, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6899      	ldr	r1, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	e00f      	b.n	8002de6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002de4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0202 	bic.w	r2, r2, #2
 8002df4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7e1b      	ldrb	r3, [r3, #24]
 8002e00:	005a      	lsls	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01b      	beq.n	8002e4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	035a      	lsls	r2, r3, #13
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	e007      	b.n	8002e5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	051a      	lsls	r2, r3, #20
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6899      	ldr	r1, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e9e:	025a      	lsls	r2, r3, #9
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6899      	ldr	r1, [r3, #8]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	029a      	lsls	r2, r3, #10
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40012300 	.word	0x40012300
 8002edc:	0f000001 	.word	0x0f000001

08002ee0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d13c      	bne.n	8002f74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d12b      	bne.n	8002f6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d127      	bne.n	8002f6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d119      	bne.n	8002f6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0220 	bic.w	r2, r2, #32
 8002f46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d105      	bne.n	8002f6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f043 0201 	orr.w	r2, r3, #1
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f7fe fddb 	bl	8001b28 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f72:	e00e      	b.n	8002f92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f7ff fd74 	bl	8002a6e <HAL_ADC_ErrorCallback>
}
 8002f86:	e004      	b.n	8002f92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	4798      	blx	r3
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f7fe fdaf 	bl	8001b0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2240      	movs	r2, #64	; 0x40
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f043 0204 	orr.w	r2, r3, #4
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff fd49 	bl	8002a6e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800300c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003016:	4a04      	ldr	r2, [pc, #16]	; (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	60d3      	str	r3, [r2, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <__NVIC_GetPriorityGrouping+0x18>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f003 0307 	and.w	r3, r3, #7
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	2b00      	cmp	r3, #0
 8003058:	db0b      	blt.n	8003072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	4907      	ldr	r1, [pc, #28]	; (8003080 <__NVIC_EnableIRQ+0x38>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2001      	movs	r0, #1
 800306a:	fa00 f202 	lsl.w	r2, r0, r2
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000e100 	.word	0xe000e100

08003084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	6039      	str	r1, [r7, #0]
 800308e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003094:	2b00      	cmp	r3, #0
 8003096:	db0a      	blt.n	80030ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	490c      	ldr	r1, [pc, #48]	; (80030d0 <__NVIC_SetPriority+0x4c>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	440b      	add	r3, r1
 80030a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ac:	e00a      	b.n	80030c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	4908      	ldr	r1, [pc, #32]	; (80030d4 <__NVIC_SetPriority+0x50>)
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	3b04      	subs	r3, #4
 80030bc:	0112      	lsls	r2, r2, #4
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	440b      	add	r3, r1
 80030c2:	761a      	strb	r2, [r3, #24]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000e100 	.word	0xe000e100
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b089      	sub	sp, #36	; 0x24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f1c3 0307 	rsb	r3, r3, #7
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	bf28      	it	cs
 80030f6:	2304      	movcs	r3, #4
 80030f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3304      	adds	r3, #4
 80030fe:	2b06      	cmp	r3, #6
 8003100:	d902      	bls.n	8003108 <NVIC_EncodePriority+0x30>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3b03      	subs	r3, #3
 8003106:	e000      	b.n	800310a <NVIC_EncodePriority+0x32>
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310c:	f04f 32ff 	mov.w	r2, #4294967295
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	401a      	ands	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003120:	f04f 31ff 	mov.w	r1, #4294967295
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	43d9      	mvns	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003130:	4313      	orrs	r3, r2
         );
}
 8003132:	4618      	mov	r0, r3
 8003134:	3724      	adds	r7, #36	; 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff ff4c 	bl	8002fe4 <__NVIC_SetPriorityGrouping>
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003166:	f7ff ff61 	bl	800302c <__NVIC_GetPriorityGrouping>
 800316a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	6978      	ldr	r0, [r7, #20]
 8003172:	f7ff ffb1 	bl	80030d8 <NVIC_EncodePriority>
 8003176:	4602      	mov	r2, r0
 8003178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800317c:	4611      	mov	r1, r2
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ff80 	bl	8003084 <__NVIC_SetPriority>
}
 8003184:	bf00      	nop
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff ff54 	bl	8003048 <__NVIC_EnableIRQ>
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031b4:	f7ff f93a 	bl	800242c <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e099      	b.n	80032f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e4:	e00f      	b.n	8003206 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031e6:	f7ff f921 	bl	800242c <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b05      	cmp	r3, #5
 80031f2:	d908      	bls.n	8003206 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2203      	movs	r2, #3
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e078      	b.n	80032f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e8      	bne.n	80031e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4b38      	ldr	r3, [pc, #224]	; (8003300 <HAL_DMA_Init+0x158>)
 8003220:	4013      	ands	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003232:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	2b04      	cmp	r3, #4
 800325e:	d107      	bne.n	8003270 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	4313      	orrs	r3, r2
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f023 0307 	bic.w	r3, r3, #7
 8003286:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	2b04      	cmp	r3, #4
 8003298:	d117      	bne.n	80032ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00e      	beq.n	80032ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fa6f 	bl	8003790 <DMA_CheckFifoParam>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2240      	movs	r2, #64	; 0x40
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032c6:	2301      	movs	r3, #1
 80032c8:	e016      	b.n	80032f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fa26 	bl	8003724 <DMA_CalcBaseAndBitshift>
 80032d8:	4603      	mov	r3, r0
 80032da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e0:	223f      	movs	r2, #63	; 0x3f
 80032e2:	409a      	lsls	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	f010803f 	.word	0xf010803f

08003304 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_DMA_Start_IT+0x26>
 8003326:	2302      	movs	r3, #2
 8003328:	e040      	b.n	80033ac <HAL_DMA_Start_IT+0xa8>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b01      	cmp	r3, #1
 800333c:	d12f      	bne.n	800339e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2202      	movs	r2, #2
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f9b8 	bl	80036c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	223f      	movs	r2, #63	; 0x3f
 800335e:	409a      	lsls	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0216 	orr.w	r2, r2, #22
 8003372:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d007      	beq.n	800338c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0208 	orr.w	r2, r2, #8
 800338a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e005      	b.n	80033aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
 80033a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033c0:	4b8e      	ldr	r3, [pc, #568]	; (80035fc <HAL_DMA_IRQHandler+0x248>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a8e      	ldr	r2, [pc, #568]	; (8003600 <HAL_DMA_IRQHandler+0x24c>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	0a9b      	lsrs	r3, r3, #10
 80033cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	2208      	movs	r2, #8
 80033e0:	409a      	lsls	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d01a      	beq.n	8003420 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0204 	bic.w	r2, r2, #4
 8003406:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340c:	2208      	movs	r2, #8
 800340e:	409a      	lsls	r2, r3
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003418:	f043 0201 	orr.w	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003424:	2201      	movs	r2, #1
 8003426:	409a      	lsls	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d012      	beq.n	8003456 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003442:	2201      	movs	r2, #1
 8003444:	409a      	lsls	r2, r3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344e:	f043 0202 	orr.w	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	2204      	movs	r2, #4
 800345c:	409a      	lsls	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d012      	beq.n	800348c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00b      	beq.n	800348c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003478:	2204      	movs	r2, #4
 800347a:	409a      	lsls	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003484:	f043 0204 	orr.w	r2, r3, #4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	2210      	movs	r2, #16
 8003492:	409a      	lsls	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d043      	beq.n	8003524 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d03c      	beq.n	8003524 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ae:	2210      	movs	r2, #16
 80034b0:	409a      	lsls	r2, r3
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d018      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d108      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d024      	beq.n	8003524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
 80034e2:	e01f      	b.n	8003524 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01b      	beq.n	8003524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
 80034f4:	e016      	b.n	8003524 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d107      	bne.n	8003514 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0208 	bic.w	r2, r2, #8
 8003512:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003528:	2220      	movs	r2, #32
 800352a:	409a      	lsls	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 808f 	beq.w	8003654 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8087 	beq.w	8003654 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354a:	2220      	movs	r2, #32
 800354c:	409a      	lsls	r2, r3
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b05      	cmp	r3, #5
 800355c:	d136      	bne.n	80035cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0216 	bic.w	r2, r2, #22
 800356c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800357c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <HAL_DMA_IRQHandler+0x1da>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358a:	2b00      	cmp	r3, #0
 800358c:	d007      	beq.n	800359e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0208 	bic.w	r2, r2, #8
 800359c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a2:	223f      	movs	r2, #63	; 0x3f
 80035a4:	409a      	lsls	r2, r3
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d07e      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	4798      	blx	r3
        }
        return;
 80035ca:	e079      	b.n	80036c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d01d      	beq.n	8003616 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10d      	bne.n	8003604 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d031      	beq.n	8003654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
 80035f8:	e02c      	b.n	8003654 <HAL_DMA_IRQHandler+0x2a0>
 80035fa:	bf00      	nop
 80035fc:	20000000 	.word	0x20000000
 8003600:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d023      	beq.n	8003654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	4798      	blx	r3
 8003614:	e01e      	b.n	8003654 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10f      	bne.n	8003644 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0210 	bic.w	r2, r2, #16
 8003632:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	2b00      	cmp	r3, #0
 800365a:	d032      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d022      	beq.n	80036ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2205      	movs	r2, #5
 800366c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	3301      	adds	r3, #1
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	429a      	cmp	r2, r3
 800368a:	d307      	bcc.n	800369c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f2      	bne.n	8003680 <HAL_DMA_IRQHandler+0x2cc>
 800369a:	e000      	b.n	800369e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800369c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
 80036be:	e000      	b.n	80036c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036c0:	bf00      	nop
    }
  }
}
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b40      	cmp	r3, #64	; 0x40
 80036f4:	d108      	bne.n	8003708 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003706:	e007      	b.n	8003718 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	60da      	str	r2, [r3, #12]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	3b10      	subs	r3, #16
 8003734:	4a14      	ldr	r2, [pc, #80]	; (8003788 <DMA_CalcBaseAndBitshift+0x64>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800373e:	4a13      	ldr	r2, [pc, #76]	; (800378c <DMA_CalcBaseAndBitshift+0x68>)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4413      	add	r3, r2
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b03      	cmp	r3, #3
 8003750:	d909      	bls.n	8003766 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800375a:	f023 0303 	bic.w	r3, r3, #3
 800375e:	1d1a      	adds	r2, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	659a      	str	r2, [r3, #88]	; 0x58
 8003764:	e007      	b.n	8003776 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800376e:	f023 0303 	bic.w	r3, r3, #3
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	aaaaaaab 	.word	0xaaaaaaab
 800378c:	0800e56c 	.word	0x0800e56c

08003790 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d11f      	bne.n	80037ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d856      	bhi.n	800385e <DMA_CheckFifoParam+0xce>
 80037b0:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <DMA_CheckFifoParam+0x28>)
 80037b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b6:	bf00      	nop
 80037b8:	080037c9 	.word	0x080037c9
 80037bc:	080037db 	.word	0x080037db
 80037c0:	080037c9 	.word	0x080037c9
 80037c4:	0800385f 	.word	0x0800385f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d046      	beq.n	8003862 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d8:	e043      	b.n	8003862 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037e2:	d140      	bne.n	8003866 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e8:	e03d      	b.n	8003866 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f2:	d121      	bne.n	8003838 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d837      	bhi.n	800386a <DMA_CheckFifoParam+0xda>
 80037fa:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <DMA_CheckFifoParam+0x70>)
 80037fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003800:	08003811 	.word	0x08003811
 8003804:	08003817 	.word	0x08003817
 8003808:	08003811 	.word	0x08003811
 800380c:	08003829 	.word	0x08003829
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      break;
 8003814:	e030      	b.n	8003878 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d025      	beq.n	800386e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003826:	e022      	b.n	800386e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003830:	d11f      	bne.n	8003872 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003836:	e01c      	b.n	8003872 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d903      	bls.n	8003846 <DMA_CheckFifoParam+0xb6>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d003      	beq.n	800384c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003844:	e018      	b.n	8003878 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
      break;
 800384a:	e015      	b.n	8003878 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00e      	beq.n	8003876 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
      break;
 800385c:	e00b      	b.n	8003876 <DMA_CheckFifoParam+0xe6>
      break;
 800385e:	bf00      	nop
 8003860:	e00a      	b.n	8003878 <DMA_CheckFifoParam+0xe8>
      break;
 8003862:	bf00      	nop
 8003864:	e008      	b.n	8003878 <DMA_CheckFifoParam+0xe8>
      break;
 8003866:	bf00      	nop
 8003868:	e006      	b.n	8003878 <DMA_CheckFifoParam+0xe8>
      break;
 800386a:	bf00      	nop
 800386c:	e004      	b.n	8003878 <DMA_CheckFifoParam+0xe8>
      break;
 800386e:	bf00      	nop
 8003870:	e002      	b.n	8003878 <DMA_CheckFifoParam+0xe8>
      break;   
 8003872:	bf00      	nop
 8003874:	e000      	b.n	8003878 <DMA_CheckFifoParam+0xe8>
      break;
 8003876:	bf00      	nop
    }
  } 
  
  return status; 
 8003878:	7bfb      	ldrb	r3, [r7, #15]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop

08003888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003888:	b480      	push	{r7}
 800388a:	b089      	sub	sp, #36	; 0x24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800389a:	2300      	movs	r3, #0
 800389c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
 80038a2:	e165      	b.n	8003b70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038a4:	2201      	movs	r2, #1
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	429a      	cmp	r2, r3
 80038be:	f040 8154 	bne.w	8003b6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d005      	beq.n	80038da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d130      	bne.n	800393c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	2203      	movs	r2, #3
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4313      	orrs	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003910:	2201      	movs	r2, #1
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 0201 	and.w	r2, r3, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b03      	cmp	r3, #3
 8003946:	d017      	beq.n	8003978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	2203      	movs	r2, #3
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d123      	bne.n	80039cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	08da      	lsrs	r2, r3, #3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3208      	adds	r2, #8
 800398c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	220f      	movs	r2, #15
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	08da      	lsrs	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3208      	adds	r2, #8
 80039c6:	69b9      	ldr	r1, [r7, #24]
 80039c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2203      	movs	r2, #3
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 0203 	and.w	r2, r3, #3
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80ae 	beq.w	8003b6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	4b5d      	ldr	r3, [pc, #372]	; (8003b88 <HAL_GPIO_Init+0x300>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	4a5c      	ldr	r2, [pc, #368]	; (8003b88 <HAL_GPIO_Init+0x300>)
 8003a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a1e:	4b5a      	ldr	r3, [pc, #360]	; (8003b88 <HAL_GPIO_Init+0x300>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a2a:	4a58      	ldr	r2, [pc, #352]	; (8003b8c <HAL_GPIO_Init+0x304>)
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	089b      	lsrs	r3, r3, #2
 8003a30:	3302      	adds	r3, #2
 8003a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	220f      	movs	r2, #15
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a4f      	ldr	r2, [pc, #316]	; (8003b90 <HAL_GPIO_Init+0x308>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d025      	beq.n	8003aa2 <HAL_GPIO_Init+0x21a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a4e      	ldr	r2, [pc, #312]	; (8003b94 <HAL_GPIO_Init+0x30c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01f      	beq.n	8003a9e <HAL_GPIO_Init+0x216>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a4d      	ldr	r2, [pc, #308]	; (8003b98 <HAL_GPIO_Init+0x310>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d019      	beq.n	8003a9a <HAL_GPIO_Init+0x212>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a4c      	ldr	r2, [pc, #304]	; (8003b9c <HAL_GPIO_Init+0x314>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <HAL_GPIO_Init+0x20e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a4b      	ldr	r2, [pc, #300]	; (8003ba0 <HAL_GPIO_Init+0x318>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00d      	beq.n	8003a92 <HAL_GPIO_Init+0x20a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a4a      	ldr	r2, [pc, #296]	; (8003ba4 <HAL_GPIO_Init+0x31c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <HAL_GPIO_Init+0x206>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a49      	ldr	r2, [pc, #292]	; (8003ba8 <HAL_GPIO_Init+0x320>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_GPIO_Init+0x202>
 8003a86:	2306      	movs	r3, #6
 8003a88:	e00c      	b.n	8003aa4 <HAL_GPIO_Init+0x21c>
 8003a8a:	2307      	movs	r3, #7
 8003a8c:	e00a      	b.n	8003aa4 <HAL_GPIO_Init+0x21c>
 8003a8e:	2305      	movs	r3, #5
 8003a90:	e008      	b.n	8003aa4 <HAL_GPIO_Init+0x21c>
 8003a92:	2304      	movs	r3, #4
 8003a94:	e006      	b.n	8003aa4 <HAL_GPIO_Init+0x21c>
 8003a96:	2303      	movs	r3, #3
 8003a98:	e004      	b.n	8003aa4 <HAL_GPIO_Init+0x21c>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e002      	b.n	8003aa4 <HAL_GPIO_Init+0x21c>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_GPIO_Init+0x21c>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	69fa      	ldr	r2, [r7, #28]
 8003aa6:	f002 0203 	and.w	r2, r2, #3
 8003aaa:	0092      	lsls	r2, r2, #2
 8003aac:	4093      	lsls	r3, r2
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ab4:	4935      	ldr	r1, [pc, #212]	; (8003b8c <HAL_GPIO_Init+0x304>)
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	3302      	adds	r3, #2
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ac2:	4b3a      	ldr	r3, [pc, #232]	; (8003bac <HAL_GPIO_Init+0x324>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ae6:	4a31      	ldr	r2, [pc, #196]	; (8003bac <HAL_GPIO_Init+0x324>)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aec:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <HAL_GPIO_Init+0x324>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b10:	4a26      	ldr	r2, [pc, #152]	; (8003bac <HAL_GPIO_Init+0x324>)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b16:	4b25      	ldr	r3, [pc, #148]	; (8003bac <HAL_GPIO_Init+0x324>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4013      	ands	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b3a:	4a1c      	ldr	r2, [pc, #112]	; (8003bac <HAL_GPIO_Init+0x324>)
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b40:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <HAL_GPIO_Init+0x324>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b64:	4a11      	ldr	r2, [pc, #68]	; (8003bac <HAL_GPIO_Init+0x324>)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	2b0f      	cmp	r3, #15
 8003b74:	f67f ae96 	bls.w	80038a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	3724      	adds	r7, #36	; 0x24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40013800 	.word	0x40013800
 8003b90:	40020000 	.word	0x40020000
 8003b94:	40020400 	.word	0x40020400
 8003b98:	40020800 	.word	0x40020800
 8003b9c:	40020c00 	.word	0x40020c00
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40021400 	.word	0x40021400
 8003ba8:	40021800 	.word	0x40021800
 8003bac:	40013c00 	.word	0x40013c00

08003bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	887b      	ldrh	r3, [r7, #2]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
 8003bcc:	e001      	b.n	8003bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	807b      	strh	r3, [r7, #2]
 8003bec:	4613      	mov	r3, r2
 8003bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bf0:	787b      	ldrb	r3, [r7, #1]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bf6:	887a      	ldrh	r2, [r7, #2]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bfc:	e003      	b.n	8003c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bfe:	887b      	ldrh	r3, [r7, #2]
 8003c00:	041a      	lsls	r2, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	619a      	str	r2, [r3, #24]
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c24:	887a      	ldrh	r2, [r7, #2]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	041a      	lsls	r2, r3, #16
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	43d9      	mvns	r1, r3
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	400b      	ands	r3, r1
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	619a      	str	r2, [r3, #24]
}
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e12b      	b.n	8003eb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fe f864 	bl	8001d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	; 0x24
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0201 	bic.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003caa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cac:	f000 fe38 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8003cb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4a81      	ldr	r2, [pc, #516]	; (8003ebc <HAL_I2C_Init+0x274>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d807      	bhi.n	8003ccc <HAL_I2C_Init+0x84>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a80      	ldr	r2, [pc, #512]	; (8003ec0 <HAL_I2C_Init+0x278>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	bf94      	ite	ls
 8003cc4:	2301      	movls	r3, #1
 8003cc6:	2300      	movhi	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e006      	b.n	8003cda <HAL_I2C_Init+0x92>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4a7d      	ldr	r2, [pc, #500]	; (8003ec4 <HAL_I2C_Init+0x27c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	bf94      	ite	ls
 8003cd4:	2301      	movls	r3, #1
 8003cd6:	2300      	movhi	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0e7      	b.n	8003eb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4a78      	ldr	r2, [pc, #480]	; (8003ec8 <HAL_I2C_Init+0x280>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	0c9b      	lsrs	r3, r3, #18
 8003cec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4a6a      	ldr	r2, [pc, #424]	; (8003ebc <HAL_I2C_Init+0x274>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d802      	bhi.n	8003d1c <HAL_I2C_Init+0xd4>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	e009      	b.n	8003d30 <HAL_I2C_Init+0xe8>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	4a69      	ldr	r2, [pc, #420]	; (8003ecc <HAL_I2C_Init+0x284>)
 8003d28:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	3301      	adds	r3, #1
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	430b      	orrs	r3, r1
 8003d36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	495c      	ldr	r1, [pc, #368]	; (8003ebc <HAL_I2C_Init+0x274>)
 8003d4c:	428b      	cmp	r3, r1
 8003d4e:	d819      	bhi.n	8003d84 <HAL_I2C_Init+0x13c>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1e59      	subs	r1, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d5e:	1c59      	adds	r1, r3, #1
 8003d60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d64:	400b      	ands	r3, r1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_I2C_Init+0x138>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1e59      	subs	r1, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d78:	3301      	adds	r3, #1
 8003d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7e:	e051      	b.n	8003e24 <HAL_I2C_Init+0x1dc>
 8003d80:	2304      	movs	r3, #4
 8003d82:	e04f      	b.n	8003e24 <HAL_I2C_Init+0x1dc>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d111      	bne.n	8003db0 <HAL_I2C_Init+0x168>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1e58      	subs	r0, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	440b      	add	r3, r1
 8003d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	e012      	b.n	8003dd6 <HAL_I2C_Init+0x18e>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1e58      	subs	r0, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	0099      	lsls	r1, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Init+0x196>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e022      	b.n	8003e24 <HAL_I2C_Init+0x1dc>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10e      	bne.n	8003e04 <HAL_I2C_Init+0x1bc>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1e58      	subs	r0, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6859      	ldr	r1, [r3, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	440b      	add	r3, r1
 8003df4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e02:	e00f      	b.n	8003e24 <HAL_I2C_Init+0x1dc>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1e58      	subs	r0, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	0099      	lsls	r1, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	6809      	ldr	r1, [r1, #0]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6911      	ldr	r1, [r2, #16]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68d2      	ldr	r2, [r2, #12]
 8003e5e:	4311      	orrs	r1, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	000186a0 	.word	0x000186a0
 8003ec0:	001e847f 	.word	0x001e847f
 8003ec4:	003d08ff 	.word	0x003d08ff
 8003ec8:	431bde83 	.word	0x431bde83
 8003ecc:	10624dd3 	.word	0x10624dd3

08003ed0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	461a      	mov	r2, r3
 8003edc:	460b      	mov	r3, r1
 8003ede:	817b      	strh	r3, [r7, #10]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ee4:	f7fe faa2 	bl	800242c <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	f040 80e0 	bne.w	80040b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	2319      	movs	r3, #25
 8003efe:	2201      	movs	r2, #1
 8003f00:	4970      	ldr	r1, [pc, #448]	; (80040c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fa92 	bl	800442c <I2C_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e0d3      	b.n	80040ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_I2C_Master_Transmit+0x50>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e0cc      	b.n	80040ba <HAL_I2C_Master_Transmit+0x1ea>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d007      	beq.n	8003f46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2221      	movs	r2, #33	; 0x21
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2210      	movs	r2, #16
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	893a      	ldrh	r2, [r7, #8]
 8003f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4a50      	ldr	r2, [pc, #320]	; (80040c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f88:	8979      	ldrh	r1, [r7, #10]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	6a3a      	ldr	r2, [r7, #32]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f9ca 	bl	8004328 <I2C_MasterRequestWrite>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e08d      	b.n	80040ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003fb4:	e066      	b.n	8004084 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	6a39      	ldr	r1, [r7, #32]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 fb0c 	bl	80045d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00d      	beq.n	8003fe2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d107      	bne.n	8003fde <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e06b      	b.n	80040ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	781a      	ldrb	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b04      	cmp	r3, #4
 800401e:	d11b      	bne.n	8004058 <HAL_I2C_Master_Transmit+0x188>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004024:	2b00      	cmp	r3, #0
 8004026:	d017      	beq.n	8004058 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	6a39      	ldr	r1, [r7, #32]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 fafc 	bl	800465a <I2C_WaitOnBTFFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00d      	beq.n	8004084 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	2b04      	cmp	r3, #4
 800406e:	d107      	bne.n	8004080 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e01a      	b.n	80040ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004088:	2b00      	cmp	r3, #0
 800408a:	d194      	bne.n	8003fb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e000      	b.n	80040ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80040b8:	2302      	movs	r3, #2
  }
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	00100002 	.word	0x00100002
 80040c8:	ffff0000 	.word	0xffff0000

080040cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	460b      	mov	r3, r1
 80040da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80040dc:	f7fe f9a6 	bl	800242c <HAL_GetTick>
 80040e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	f040 8111 	bne.w	8004316 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2319      	movs	r3, #25
 80040fa:	2201      	movs	r2, #1
 80040fc:	4988      	ldr	r1, [pc, #544]	; (8004320 <HAL_I2C_IsDeviceReady+0x254>)
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f994 	bl	800442c <I2C_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
 800410c:	e104      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_I2C_IsDeviceReady+0x50>
 8004118:	2302      	movs	r3, #2
 800411a:	e0fd      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x24c>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d007      	beq.n	8004142 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0201 	orr.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004150:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2224      	movs	r2, #36	; 0x24
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a70      	ldr	r2, [pc, #448]	; (8004324 <HAL_I2C_IsDeviceReady+0x258>)
 8004164:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004174:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2200      	movs	r2, #0
 800417e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f952 	bl	800442c <I2C_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419c:	d103      	bne.n	80041a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e0b6      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041aa:	897b      	ldrh	r3, [r7, #10]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80041ba:	f7fe f937 	bl	800242c <HAL_GetTick>
 80041be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	bf0c      	ite	eq
 80041ce:	2301      	moveq	r3, #1
 80041d0:	2300      	movne	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e4:	bf0c      	ite	eq
 80041e6:	2301      	moveq	r3, #1
 80041e8:	2300      	movne	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041ee:	e025      	b.n	800423c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041f0:	f7fe f91c 	bl	800242c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <HAL_I2C_IsDeviceReady+0x13a>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	22a0      	movs	r2, #160	; 0xa0
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2ba0      	cmp	r3, #160	; 0xa0
 8004246:	d005      	beq.n	8004254 <HAL_I2C_IsDeviceReady+0x188>
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <HAL_I2C_IsDeviceReady+0x188>
 800424e:	7dbb      	ldrb	r3, [r7, #22]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0cd      	beq.n	80041f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b02      	cmp	r3, #2
 8004268:	d129      	bne.n	80042be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004278:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	2319      	movs	r3, #25
 8004296:	2201      	movs	r2, #1
 8004298:	4921      	ldr	r1, [pc, #132]	; (8004320 <HAL_I2C_IsDeviceReady+0x254>)
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f8c6 	bl	800442c <I2C_WaitOnFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e036      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e02c      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	2319      	movs	r3, #25
 80042de:	2201      	movs	r2, #1
 80042e0:	490f      	ldr	r1, [pc, #60]	; (8004320 <HAL_I2C_IsDeviceReady+0x254>)
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f8a2 	bl	800442c <I2C_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e012      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	3301      	adds	r3, #1
 80042f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	f4ff af32 	bcc.w	8004166 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004316:	2302      	movs	r3, #2
  }
}
 8004318:	4618      	mov	r0, r3
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	00100002 	.word	0x00100002
 8004324:	ffff0000 	.word	0xffff0000

08004328 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	607a      	str	r2, [r7, #4]
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	460b      	mov	r3, r1
 8004336:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d006      	beq.n	8004352 <I2C_MasterRequestWrite+0x2a>
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d003      	beq.n	8004352 <I2C_MasterRequestWrite+0x2a>
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004350:	d108      	bne.n	8004364 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e00b      	b.n	800437c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	2b12      	cmp	r3, #18
 800436a:	d107      	bne.n	800437c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f84f 	bl	800442c <I2C_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00d      	beq.n	80043b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a2:	d103      	bne.n	80043ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e035      	b.n	800441c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b8:	d108      	bne.n	80043cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ba:	897b      	ldrh	r3, [r7, #10]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043c8:	611a      	str	r2, [r3, #16]
 80043ca:	e01b      	b.n	8004404 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043cc:	897b      	ldrh	r3, [r7, #10]
 80043ce:	11db      	asrs	r3, r3, #7
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 0306 	and.w	r3, r3, #6
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f063 030f 	orn	r3, r3, #15
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	490e      	ldr	r1, [pc, #56]	; (8004424 <I2C_MasterRequestWrite+0xfc>)
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f875 	bl	80044da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e010      	b.n	800441c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043fa:	897b      	ldrh	r3, [r7, #10]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4907      	ldr	r1, [pc, #28]	; (8004428 <I2C_MasterRequestWrite+0x100>)
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f865 	bl	80044da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	00010008 	.word	0x00010008
 8004428:	00010002 	.word	0x00010002

0800442c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800443c:	e025      	b.n	800448a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d021      	beq.n	800448a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004446:	f7fd fff1 	bl	800242c <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d302      	bcc.n	800445c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d116      	bne.n	800448a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f043 0220 	orr.w	r2, r3, #32
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e023      	b.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d10d      	bne.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	43da      	mvns	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4013      	ands	r3, r2
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	bf0c      	ite	eq
 80044a6:	2301      	moveq	r3, #1
 80044a8:	2300      	movne	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	e00c      	b.n	80044ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	43da      	mvns	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4013      	ands	r3, r2
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bf0c      	ite	eq
 80044c2:	2301      	moveq	r3, #1
 80044c4:	2300      	movne	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d0b6      	beq.n	800443e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b084      	sub	sp, #16
 80044de:	af00      	add	r7, sp, #0
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044e8:	e051      	b.n	800458e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f8:	d123      	bne.n	8004542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004508:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004512:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f043 0204 	orr.w	r2, r3, #4
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e046      	b.n	80045d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d021      	beq.n	800458e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454a:	f7fd ff6f 	bl	800242c <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	429a      	cmp	r2, r3
 8004558:	d302      	bcc.n	8004560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d116      	bne.n	800458e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f043 0220 	orr.w	r2, r3, #32
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e020      	b.n	80045d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	0c1b      	lsrs	r3, r3, #16
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d10c      	bne.n	80045b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	43da      	mvns	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4013      	ands	r3, r2
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bf14      	ite	ne
 80045aa:	2301      	movne	r3, #1
 80045ac:	2300      	moveq	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	e00b      	b.n	80045ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	43da      	mvns	r2, r3
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4013      	ands	r3, r2
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bf14      	ite	ne
 80045c4:	2301      	movne	r3, #1
 80045c6:	2300      	moveq	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d18d      	bne.n	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045e4:	e02d      	b.n	8004642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f878 	bl	80046dc <I2C_IsAcknowledgeFailed>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e02d      	b.n	8004652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d021      	beq.n	8004642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fe:	f7fd ff15 	bl	800242c <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d116      	bne.n	8004642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f043 0220 	orr.w	r2, r3, #32
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e007      	b.n	8004652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464c:	2b80      	cmp	r3, #128	; 0x80
 800464e:	d1ca      	bne.n	80045e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b084      	sub	sp, #16
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004666:	e02d      	b.n	80046c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f837 	bl	80046dc <I2C_IsAcknowledgeFailed>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e02d      	b.n	80046d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467e:	d021      	beq.n	80046c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004680:	f7fd fed4 	bl	800242c <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	429a      	cmp	r2, r3
 800468e:	d302      	bcc.n	8004696 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d116      	bne.n	80046c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	f043 0220 	orr.w	r2, r3, #32
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e007      	b.n	80046d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d1ca      	bne.n	8004668 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f2:	d11b      	bne.n	800472c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	f043 0204 	orr.w	r2, r3, #4
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0cc      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004750:	4b68      	ldr	r3, [pc, #416]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d90c      	bls.n	8004778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475e:	4b65      	ldr	r3, [pc, #404]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004766:	4b63      	ldr	r3, [pc, #396]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d001      	beq.n	8004778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0b8      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d020      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004790:	4b59      	ldr	r3, [pc, #356]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	4a58      	ldr	r2, [pc, #352]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800479a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a8:	4b53      	ldr	r3, [pc, #332]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	4a52      	ldr	r2, [pc, #328]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b4:	4b50      	ldr	r3, [pc, #320]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	494d      	ldr	r1, [pc, #308]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d044      	beq.n	800485c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	4b47      	ldr	r3, [pc, #284]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d119      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e07f      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d003      	beq.n	80047fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d107      	bne.n	800480a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fa:	4b3f      	ldr	r3, [pc, #252]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e06f      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480a:	4b3b      	ldr	r3, [pc, #236]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e067      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800481a:	4b37      	ldr	r3, [pc, #220]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f023 0203 	bic.w	r2, r3, #3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	4934      	ldr	r1, [pc, #208]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	4313      	orrs	r3, r2
 800482a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800482c:	f7fd fdfe 	bl	800242c <HAL_GetTick>
 8004830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004832:	e00a      	b.n	800484a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004834:	f7fd fdfa 	bl	800242c <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e04f      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484a:	4b2b      	ldr	r3, [pc, #172]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 020c 	and.w	r2, r3, #12
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	429a      	cmp	r2, r3
 800485a:	d1eb      	bne.n	8004834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800485c:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d20c      	bcs.n	8004884 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b22      	ldr	r3, [pc, #136]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e032      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004890:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4916      	ldr	r1, [pc, #88]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ae:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	490e      	ldr	r1, [pc, #56]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048c2:	f000 fbb1 	bl	8005028 <HAL_RCC_GetSysClockFreq>
 80048c6:	4602      	mov	r2, r0
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	490a      	ldr	r1, [pc, #40]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 80048d4:	5ccb      	ldrb	r3, [r1, r3]
 80048d6:	fa22 f303 	lsr.w	r3, r2, r3
 80048da:	4a09      	ldr	r2, [pc, #36]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80048dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048de:	4b09      	ldr	r3, [pc, #36]	; (8004904 <HAL_RCC_ClockConfig+0x1c8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fd fb9a 	bl	800201c <HAL_InitTick>

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40023c00 	.word	0x40023c00
 80048f8:	40023800 	.word	0x40023800
 80048fc:	0800e554 	.word	0x0800e554
 8004900:	20000000 	.word	0x20000000
 8004904:	20000004 	.word	0x20000004

08004908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800490c:	4b03      	ldr	r3, [pc, #12]	; (800491c <HAL_RCC_GetHCLKFreq+0x14>)
 800490e:	681b      	ldr	r3, [r3, #0]
}
 8004910:	4618      	mov	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20000000 	.word	0x20000000

08004920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004924:	f7ff fff0 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8004928:	4602      	mov	r2, r0
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	0a9b      	lsrs	r3, r3, #10
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	4903      	ldr	r1, [pc, #12]	; (8004944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004936:	5ccb      	ldrb	r3, [r1, r3]
 8004938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40023800 	.word	0x40023800
 8004944:	0800e564 	.word	0x0800e564

08004948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800494c:	f7ff ffdc 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8004950:	4602      	mov	r2, r0
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	0b5b      	lsrs	r3, r3, #13
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	4903      	ldr	r1, [pc, #12]	; (800496c <HAL_RCC_GetPCLK2Freq+0x24>)
 800495e:	5ccb      	ldrb	r3, [r1, r3]
 8004960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004964:	4618      	mov	r0, r3
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40023800 	.word	0x40023800
 800496c:	0800e564 	.word	0x0800e564

08004970 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	220f      	movs	r2, #15
 800497e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004980:	4b12      	ldr	r3, [pc, #72]	; (80049cc <HAL_RCC_GetClockConfig+0x5c>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 0203 	and.w	r2, r3, #3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800498c:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <HAL_RCC_GetClockConfig+0x5c>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <HAL_RCC_GetClockConfig+0x5c>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049a4:	4b09      	ldr	r3, [pc, #36]	; (80049cc <HAL_RCC_GetClockConfig+0x5c>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	08db      	lsrs	r3, r3, #3
 80049aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049b2:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <HAL_RCC_GetClockConfig+0x60>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 020f 	and.w	r2, r3, #15
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	601a      	str	r2, [r3, #0]
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40023c00 	.word	0x40023c00

080049d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08c      	sub	sp, #48	; 0x30
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d010      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004a0c:	4b6f      	ldr	r3, [pc, #444]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a12:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	496c      	ldr	r1, [pc, #432]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d010      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004a3a:	4b64      	ldr	r3, [pc, #400]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a40:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a48:	4960      	ldr	r1, [pc, #384]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d017      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a68:	4b58      	ldr	r3, [pc, #352]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	4955      	ldr	r1, [pc, #340]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a86:	d101      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004a94:	2301      	movs	r3, #1
 8004a96:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d017      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004aa4:	4b49      	ldr	r3, [pc, #292]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab2:	4946      	ldr	r1, [pc, #280]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac2:	d101      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 808a 	beq.w	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	4a38      	ldr	r2, [pc, #224]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af0:	6413      	str	r3, [r2, #64]	; 0x40
 8004af2:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afa:	60bb      	str	r3, [r7, #8]
 8004afc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004afe:	4b34      	ldr	r3, [pc, #208]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a33      	ldr	r2, [pc, #204]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b0a:	f7fd fc8f 	bl	800242c <HAL_GetTick>
 8004b0e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b10:	e008      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b12:	f7fd fc8b 	bl	800242c <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e278      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b24:	4b2a      	ldr	r3, [pc, #168]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b30:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b38:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d02f      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b48:	6a3a      	ldr	r2, [r7, #32]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d028      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b4e:	4b1f      	ldr	r3, [pc, #124]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b56:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b58:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b64:	4a19      	ldr	r2, [pc, #100]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b6a:	4b18      	ldr	r3, [pc, #96]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d114      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b76:	f7fd fc59 	bl	800242c <HAL_GetTick>
 8004b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b7e:	f7fd fc55 	bl	800242c <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e240      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b94:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0ee      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bac:	d114      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004bae:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc2:	4902      	ldr	r1, [pc, #8]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	608b      	str	r3, [r1, #8]
 8004bc8:	e00c      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004bca:	bf00      	nop
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	40007000 	.word	0x40007000
 8004bd4:	42470e40 	.word	0x42470e40
 8004bd8:	4b4a      	ldr	r3, [pc, #296]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	4a49      	ldr	r2, [pc, #292]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004be2:	6093      	str	r3, [r2, #8]
 8004be4:	4b47      	ldr	r3, [pc, #284]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004be6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf0:	4944      	ldr	r1, [pc, #272]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d004      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004c08:	4b3f      	ldr	r3, [pc, #252]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004c0a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004c18:	4b3a      	ldr	r3, [pc, #232]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c26:	4937      	ldr	r1, [pc, #220]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c3a:	4b32      	ldr	r3, [pc, #200]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c40:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c48:	492e      	ldr	r1, [pc, #184]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d011      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c5c:	4b29      	ldr	r3, [pc, #164]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c62:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6a:	4926      	ldr	r1, [pc, #152]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	491a      	ldr	r1, [pc, #104]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d011      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004cae:	4b15      	ldr	r3, [pc, #84]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cb4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	4911      	ldr	r1, [pc, #68]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d005      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce0:	f040 80ff 	bne.w	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ce4:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cea:	f7fd fb9f 	bl	800242c <HAL_GetTick>
 8004cee:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cf0:	e00e      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cf2:	f7fd fb9b 	bl	800242c <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d907      	bls.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e188      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004d04:	40023800 	.word	0x40023800
 8004d08:	424711e0 	.word	0x424711e0
 8004d0c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d10:	4b7e      	ldr	r3, [pc, #504]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1ea      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d009      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d028      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d124      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004d44:	4b71      	ldr	r3, [pc, #452]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d4a:	0c1b      	lsrs	r3, r3, #16
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	3301      	adds	r3, #1
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d56:	4b6d      	ldr	r3, [pc, #436]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d5c:	0e1b      	lsrs	r3, r3, #24
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	019b      	lsls	r3, r3, #6
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	3b01      	subs	r3, #1
 8004d76:	041b      	lsls	r3, r3, #16
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	061b      	lsls	r3, r3, #24
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	071b      	lsls	r3, r3, #28
 8004d86:	4961      	ldr	r1, [pc, #388]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d004      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004da2:	d00a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d035      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db8:	d130      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004dba:	4b54      	ldr	r3, [pc, #336]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc0:	0c1b      	lsrs	r3, r3, #16
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dcc:	4b4f      	ldr	r3, [pc, #316]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd2:	0f1b      	lsrs	r3, r3, #28
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	019b      	lsls	r3, r3, #6
 8004de4:	431a      	orrs	r2, r3
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	3b01      	subs	r3, #1
 8004dec:	041b      	lsls	r3, r3, #16
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	061b      	lsls	r3, r3, #24
 8004df6:	431a      	orrs	r2, r3
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	071b      	lsls	r3, r3, #28
 8004dfc:	4943      	ldr	r1, [pc, #268]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e04:	4b41      	ldr	r3, [pc, #260]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e0a:	f023 021f 	bic.w	r2, r3, #31
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	3b01      	subs	r3, #1
 8004e14:	493d      	ldr	r1, [pc, #244]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d029      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e30:	d124      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004e32:	4b36      	ldr	r3, [pc, #216]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e38:	0c1b      	lsrs	r3, r3, #16
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	3301      	adds	r3, #1
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e44:	4b31      	ldr	r3, [pc, #196]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e4a:	0f1b      	lsrs	r3, r3, #28
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	019b      	lsls	r3, r3, #6
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	3b01      	subs	r3, #1
 8004e66:	041b      	lsls	r3, r3, #16
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	061b      	lsls	r3, r3, #24
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	071b      	lsls	r3, r3, #28
 8004e74:	4925      	ldr	r1, [pc, #148]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d016      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	019b      	lsls	r3, r3, #6
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	041b      	lsls	r3, r3, #16
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	061b      	lsls	r3, r3, #24
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	071b      	lsls	r3, r3, #28
 8004eae:	4917      	ldr	r1, [pc, #92]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004eb6:	4b16      	ldr	r3, [pc, #88]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ebc:	f7fd fab6 	bl	800242c <HAL_GetTick>
 8004ec0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ec4:	f7fd fab2 	bl	800242c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e09f      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	f040 8095 	bne.w	8005014 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ef0:	f7fd fa9c 	bl	800242c <HAL_GetTick>
 8004ef4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ef6:	e00f      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ef8:	f7fd fa98 	bl	800242c <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d908      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e085      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004f0a:	bf00      	nop
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	42470068 	.word	0x42470068
 8004f14:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f18:	4b41      	ldr	r3, [pc, #260]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f24:	d0e8      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d009      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d02b      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d127      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004f4e:	4b34      	ldr	r3, [pc, #208]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f54:	0c1b      	lsrs	r3, r3, #16
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699a      	ldr	r2, [r3, #24]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	019b      	lsls	r3, r3, #6
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	3b01      	subs	r3, #1
 8004f72:	041b      	lsls	r3, r3, #16
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	061b      	lsls	r3, r3, #24
 8004f7c:	4928      	ldr	r1, [pc, #160]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f84:	4b26      	ldr	r3, [pc, #152]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f8a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	3b01      	subs	r3, #1
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	4922      	ldr	r1, [pc, #136]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01d      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fb2:	d118      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fba:	0e1b      	lsrs	r3, r3, #24
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	019b      	lsls	r3, r3, #6
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	085b      	lsrs	r3, r3, #1
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	061b      	lsls	r3, r3, #24
 8004fde:	4910      	ldr	r1, [pc, #64]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004fe6:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fec:	f7fd fa1e 	bl	800242c <HAL_GetTick>
 8004ff0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ff4:	f7fd fa1a 	bl	800242c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e007      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800500e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005012:	d1ef      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3730      	adds	r7, #48	; 0x30
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40023800 	.word	0x40023800
 8005024:	42470070 	.word	0x42470070

08005028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800502c:	b0ae      	sub	sp, #184	; 0xb8
 800502e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800504e:	4bcb      	ldr	r3, [pc, #812]	; (800537c <HAL_RCC_GetSysClockFreq+0x354>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	2b0c      	cmp	r3, #12
 8005058:	f200 8206 	bhi.w	8005468 <HAL_RCC_GetSysClockFreq+0x440>
 800505c:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <HAL_RCC_GetSysClockFreq+0x3c>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005099 	.word	0x08005099
 8005068:	08005469 	.word	0x08005469
 800506c:	08005469 	.word	0x08005469
 8005070:	08005469 	.word	0x08005469
 8005074:	080050a1 	.word	0x080050a1
 8005078:	08005469 	.word	0x08005469
 800507c:	08005469 	.word	0x08005469
 8005080:	08005469 	.word	0x08005469
 8005084:	080050a9 	.word	0x080050a9
 8005088:	08005469 	.word	0x08005469
 800508c:	08005469 	.word	0x08005469
 8005090:	08005469 	.word	0x08005469
 8005094:	08005299 	.word	0x08005299
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005098:	4bb9      	ldr	r3, [pc, #740]	; (8005380 <HAL_RCC_GetSysClockFreq+0x358>)
 800509a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800509e:	e1e7      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050a0:	4bb8      	ldr	r3, [pc, #736]	; (8005384 <HAL_RCC_GetSysClockFreq+0x35c>)
 80050a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80050a6:	e1e3      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050a8:	4bb4      	ldr	r3, [pc, #720]	; (800537c <HAL_RCC_GetSysClockFreq+0x354>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050b4:	4bb1      	ldr	r3, [pc, #708]	; (800537c <HAL_RCC_GetSysClockFreq+0x354>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d071      	beq.n	80051a4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c0:	4bae      	ldr	r3, [pc, #696]	; (800537c <HAL_RCC_GetSysClockFreq+0x354>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	099b      	lsrs	r3, r3, #6
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050cc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80050d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050dc:	2300      	movs	r3, #0
 80050de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050e6:	4622      	mov	r2, r4
 80050e8:	462b      	mov	r3, r5
 80050ea:	f04f 0000 	mov.w	r0, #0
 80050ee:	f04f 0100 	mov.w	r1, #0
 80050f2:	0159      	lsls	r1, r3, #5
 80050f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050f8:	0150      	lsls	r0, r2, #5
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4621      	mov	r1, r4
 8005100:	1a51      	subs	r1, r2, r1
 8005102:	6439      	str	r1, [r7, #64]	; 0x40
 8005104:	4629      	mov	r1, r5
 8005106:	eb63 0301 	sbc.w	r3, r3, r1
 800510a:	647b      	str	r3, [r7, #68]	; 0x44
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005118:	4649      	mov	r1, r9
 800511a:	018b      	lsls	r3, r1, #6
 800511c:	4641      	mov	r1, r8
 800511e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005122:	4641      	mov	r1, r8
 8005124:	018a      	lsls	r2, r1, #6
 8005126:	4641      	mov	r1, r8
 8005128:	1a51      	subs	r1, r2, r1
 800512a:	63b9      	str	r1, [r7, #56]	; 0x38
 800512c:	4649      	mov	r1, r9
 800512e:	eb63 0301 	sbc.w	r3, r3, r1
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005140:	4649      	mov	r1, r9
 8005142:	00cb      	lsls	r3, r1, #3
 8005144:	4641      	mov	r1, r8
 8005146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800514a:	4641      	mov	r1, r8
 800514c:	00ca      	lsls	r2, r1, #3
 800514e:	4610      	mov	r0, r2
 8005150:	4619      	mov	r1, r3
 8005152:	4603      	mov	r3, r0
 8005154:	4622      	mov	r2, r4
 8005156:	189b      	adds	r3, r3, r2
 8005158:	633b      	str	r3, [r7, #48]	; 0x30
 800515a:	462b      	mov	r3, r5
 800515c:	460a      	mov	r2, r1
 800515e:	eb42 0303 	adc.w	r3, r2, r3
 8005162:	637b      	str	r3, [r7, #52]	; 0x34
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005170:	4629      	mov	r1, r5
 8005172:	024b      	lsls	r3, r1, #9
 8005174:	4621      	mov	r1, r4
 8005176:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800517a:	4621      	mov	r1, r4
 800517c:	024a      	lsls	r2, r1, #9
 800517e:	4610      	mov	r0, r2
 8005180:	4619      	mov	r1, r3
 8005182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005186:	2200      	movs	r2, #0
 8005188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800518c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005190:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005194:	f7fb fd28 	bl	8000be8 <__aeabi_uldivmod>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4613      	mov	r3, r2
 800519e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051a2:	e067      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051a4:	4b75      	ldr	r3, [pc, #468]	; (800537c <HAL_RCC_GetSysClockFreq+0x354>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	099b      	lsrs	r3, r3, #6
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051b0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80051b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80051be:	2300      	movs	r3, #0
 80051c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051c2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80051c6:	4622      	mov	r2, r4
 80051c8:	462b      	mov	r3, r5
 80051ca:	f04f 0000 	mov.w	r0, #0
 80051ce:	f04f 0100 	mov.w	r1, #0
 80051d2:	0159      	lsls	r1, r3, #5
 80051d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051d8:	0150      	lsls	r0, r2, #5
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4621      	mov	r1, r4
 80051e0:	1a51      	subs	r1, r2, r1
 80051e2:	62b9      	str	r1, [r7, #40]	; 0x28
 80051e4:	4629      	mov	r1, r5
 80051e6:	eb63 0301 	sbc.w	r3, r3, r1
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80051f8:	4649      	mov	r1, r9
 80051fa:	018b      	lsls	r3, r1, #6
 80051fc:	4641      	mov	r1, r8
 80051fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005202:	4641      	mov	r1, r8
 8005204:	018a      	lsls	r2, r1, #6
 8005206:	4641      	mov	r1, r8
 8005208:	ebb2 0a01 	subs.w	sl, r2, r1
 800520c:	4649      	mov	r1, r9
 800520e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800521e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005222:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005226:	4692      	mov	sl, r2
 8005228:	469b      	mov	fp, r3
 800522a:	4623      	mov	r3, r4
 800522c:	eb1a 0303 	adds.w	r3, sl, r3
 8005230:	623b      	str	r3, [r7, #32]
 8005232:	462b      	mov	r3, r5
 8005234:	eb4b 0303 	adc.w	r3, fp, r3
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005246:	4629      	mov	r1, r5
 8005248:	028b      	lsls	r3, r1, #10
 800524a:	4621      	mov	r1, r4
 800524c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005250:	4621      	mov	r1, r4
 8005252:	028a      	lsls	r2, r1, #10
 8005254:	4610      	mov	r0, r2
 8005256:	4619      	mov	r1, r3
 8005258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800525c:	2200      	movs	r2, #0
 800525e:	673b      	str	r3, [r7, #112]	; 0x70
 8005260:	677a      	str	r2, [r7, #116]	; 0x74
 8005262:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005266:	f7fb fcbf 	bl	8000be8 <__aeabi_uldivmod>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4613      	mov	r3, r2
 8005270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005274:	4b41      	ldr	r3, [pc, #260]	; (800537c <HAL_RCC_GetSysClockFreq+0x354>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	3301      	adds	r3, #1
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005286:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800528a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800528e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005296:	e0eb      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005298:	4b38      	ldr	r3, [pc, #224]	; (800537c <HAL_RCC_GetSysClockFreq+0x354>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052a4:	4b35      	ldr	r3, [pc, #212]	; (800537c <HAL_RCC_GetSysClockFreq+0x354>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d06b      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b0:	4b32      	ldr	r3, [pc, #200]	; (800537c <HAL_RCC_GetSysClockFreq+0x354>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	099b      	lsrs	r3, r3, #6
 80052b6:	2200      	movs	r2, #0
 80052b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c2:	663b      	str	r3, [r7, #96]	; 0x60
 80052c4:	2300      	movs	r3, #0
 80052c6:	667b      	str	r3, [r7, #100]	; 0x64
 80052c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80052cc:	4622      	mov	r2, r4
 80052ce:	462b      	mov	r3, r5
 80052d0:	f04f 0000 	mov.w	r0, #0
 80052d4:	f04f 0100 	mov.w	r1, #0
 80052d8:	0159      	lsls	r1, r3, #5
 80052da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052de:	0150      	lsls	r0, r2, #5
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4621      	mov	r1, r4
 80052e6:	1a51      	subs	r1, r2, r1
 80052e8:	61b9      	str	r1, [r7, #24]
 80052ea:	4629      	mov	r1, r5
 80052ec:	eb63 0301 	sbc.w	r3, r3, r1
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80052fe:	4659      	mov	r1, fp
 8005300:	018b      	lsls	r3, r1, #6
 8005302:	4651      	mov	r1, sl
 8005304:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005308:	4651      	mov	r1, sl
 800530a:	018a      	lsls	r2, r1, #6
 800530c:	4651      	mov	r1, sl
 800530e:	ebb2 0801 	subs.w	r8, r2, r1
 8005312:	4659      	mov	r1, fp
 8005314:	eb63 0901 	sbc.w	r9, r3, r1
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005324:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005328:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800532c:	4690      	mov	r8, r2
 800532e:	4699      	mov	r9, r3
 8005330:	4623      	mov	r3, r4
 8005332:	eb18 0303 	adds.w	r3, r8, r3
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	462b      	mov	r3, r5
 800533a:	eb49 0303 	adc.w	r3, r9, r3
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800534c:	4629      	mov	r1, r5
 800534e:	024b      	lsls	r3, r1, #9
 8005350:	4621      	mov	r1, r4
 8005352:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005356:	4621      	mov	r1, r4
 8005358:	024a      	lsls	r2, r1, #9
 800535a:	4610      	mov	r0, r2
 800535c:	4619      	mov	r1, r3
 800535e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005362:	2200      	movs	r2, #0
 8005364:	65bb      	str	r3, [r7, #88]	; 0x58
 8005366:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005368:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800536c:	f7fb fc3c 	bl	8000be8 <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4613      	mov	r3, r2
 8005376:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800537a:	e065      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x420>
 800537c:	40023800 	.word	0x40023800
 8005380:	00f42400 	.word	0x00f42400
 8005384:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005388:	4b3d      	ldr	r3, [pc, #244]	; (8005480 <HAL_RCC_GetSysClockFreq+0x458>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	099b      	lsrs	r3, r3, #6
 800538e:	2200      	movs	r2, #0
 8005390:	4618      	mov	r0, r3
 8005392:	4611      	mov	r1, r2
 8005394:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005398:	653b      	str	r3, [r7, #80]	; 0x50
 800539a:	2300      	movs	r3, #0
 800539c:	657b      	str	r3, [r7, #84]	; 0x54
 800539e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80053a2:	4642      	mov	r2, r8
 80053a4:	464b      	mov	r3, r9
 80053a6:	f04f 0000 	mov.w	r0, #0
 80053aa:	f04f 0100 	mov.w	r1, #0
 80053ae:	0159      	lsls	r1, r3, #5
 80053b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053b4:	0150      	lsls	r0, r2, #5
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4641      	mov	r1, r8
 80053bc:	1a51      	subs	r1, r2, r1
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	4649      	mov	r1, r9
 80053c2:	eb63 0301 	sbc.w	r3, r3, r1
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80053d4:	4659      	mov	r1, fp
 80053d6:	018b      	lsls	r3, r1, #6
 80053d8:	4651      	mov	r1, sl
 80053da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053de:	4651      	mov	r1, sl
 80053e0:	018a      	lsls	r2, r1, #6
 80053e2:	4651      	mov	r1, sl
 80053e4:	1a54      	subs	r4, r2, r1
 80053e6:	4659      	mov	r1, fp
 80053e8:	eb63 0501 	sbc.w	r5, r3, r1
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	00eb      	lsls	r3, r5, #3
 80053f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053fa:	00e2      	lsls	r2, r4, #3
 80053fc:	4614      	mov	r4, r2
 80053fe:	461d      	mov	r5, r3
 8005400:	4643      	mov	r3, r8
 8005402:	18e3      	adds	r3, r4, r3
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	464b      	mov	r3, r9
 8005408:	eb45 0303 	adc.w	r3, r5, r3
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	e9d7 4500 	ldrd	r4, r5, [r7]
 800541a:	4629      	mov	r1, r5
 800541c:	028b      	lsls	r3, r1, #10
 800541e:	4621      	mov	r1, r4
 8005420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005424:	4621      	mov	r1, r4
 8005426:	028a      	lsls	r2, r1, #10
 8005428:	4610      	mov	r0, r2
 800542a:	4619      	mov	r1, r3
 800542c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005430:	2200      	movs	r2, #0
 8005432:	64bb      	str	r3, [r7, #72]	; 0x48
 8005434:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005436:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800543a:	f7fb fbd5 	bl	8000be8 <__aeabi_uldivmod>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4613      	mov	r3, r2
 8005444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005448:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <HAL_RCC_GetSysClockFreq+0x458>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	0f1b      	lsrs	r3, r3, #28
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800545a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800545e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005466:	e003      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005468:	4b06      	ldr	r3, [pc, #24]	; (8005484 <HAL_RCC_GetSysClockFreq+0x45c>)
 800546a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800546e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005470:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005474:	4618      	mov	r0, r3
 8005476:	37b8      	adds	r7, #184	; 0xb8
 8005478:	46bd      	mov	sp, r7
 800547a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800547e:	bf00      	nop
 8005480:	40023800 	.word	0x40023800
 8005484:	00f42400 	.word	0x00f42400

08005488 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e28d      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 8083 	beq.w	80055ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054a8:	4b94      	ldr	r3, [pc, #592]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 030c 	and.w	r3, r3, #12
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d019      	beq.n	80054e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054b4:	4b91      	ldr	r3, [pc, #580]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d106      	bne.n	80054ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054c0:	4b8e      	ldr	r3, [pc, #568]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054cc:	d00c      	beq.n	80054e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ce:	4b8b      	ldr	r3, [pc, #556]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d112      	bne.n	8005500 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054da:	4b88      	ldr	r3, [pc, #544]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e6:	d10b      	bne.n	8005500 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e8:	4b84      	ldr	r3, [pc, #528]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d05b      	beq.n	80055ac <HAL_RCC_OscConfig+0x124>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d157      	bne.n	80055ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e25a      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005508:	d106      	bne.n	8005518 <HAL_RCC_OscConfig+0x90>
 800550a:	4b7c      	ldr	r3, [pc, #496]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a7b      	ldr	r2, [pc, #492]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 8005510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	e01d      	b.n	8005554 <HAL_RCC_OscConfig+0xcc>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005520:	d10c      	bne.n	800553c <HAL_RCC_OscConfig+0xb4>
 8005522:	4b76      	ldr	r3, [pc, #472]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a75      	ldr	r2, [pc, #468]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 8005528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	4b73      	ldr	r3, [pc, #460]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a72      	ldr	r2, [pc, #456]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 8005534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e00b      	b.n	8005554 <HAL_RCC_OscConfig+0xcc>
 800553c:	4b6f      	ldr	r3, [pc, #444]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a6e      	ldr	r2, [pc, #440]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 8005542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	4b6c      	ldr	r3, [pc, #432]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a6b      	ldr	r2, [pc, #428]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 800554e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d013      	beq.n	8005584 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fc ff66 	bl	800242c <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005564:	f7fc ff62 	bl	800242c <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b64      	cmp	r3, #100	; 0x64
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e21f      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005576:	4b61      	ldr	r3, [pc, #388]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0f0      	beq.n	8005564 <HAL_RCC_OscConfig+0xdc>
 8005582:	e014      	b.n	80055ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fc ff52 	bl	800242c <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800558c:	f7fc ff4e 	bl	800242c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b64      	cmp	r3, #100	; 0x64
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e20b      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800559e:	4b57      	ldr	r3, [pc, #348]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0x104>
 80055aa:	e000      	b.n	80055ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d06f      	beq.n	800569a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055ba:	4b50      	ldr	r3, [pc, #320]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 030c 	and.w	r3, r3, #12
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d017      	beq.n	80055f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055c6:	4b4d      	ldr	r3, [pc, #308]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d105      	bne.n	80055de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055d2:	4b4a      	ldr	r3, [pc, #296]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00b      	beq.n	80055f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055de:	4b47      	ldr	r3, [pc, #284]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055e6:	2b0c      	cmp	r3, #12
 80055e8:	d11c      	bne.n	8005624 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ea:	4b44      	ldr	r3, [pc, #272]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d116      	bne.n	8005624 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055f6:	4b41      	ldr	r3, [pc, #260]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d005      	beq.n	800560e <HAL_RCC_OscConfig+0x186>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d001      	beq.n	800560e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e1d3      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800560e:	4b3b      	ldr	r3, [pc, #236]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4937      	ldr	r1, [pc, #220]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 800561e:	4313      	orrs	r3, r2
 8005620:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005622:	e03a      	b.n	800569a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d020      	beq.n	800566e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800562c:	4b34      	ldr	r3, [pc, #208]	; (8005700 <HAL_RCC_OscConfig+0x278>)
 800562e:	2201      	movs	r2, #1
 8005630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005632:	f7fc fefb 	bl	800242c <HAL_GetTick>
 8005636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800563a:	f7fc fef7 	bl	800242c <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e1b4      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800564c:	4b2b      	ldr	r3, [pc, #172]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0f0      	beq.n	800563a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005658:	4b28      	ldr	r3, [pc, #160]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	4925      	ldr	r1, [pc, #148]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 8005668:	4313      	orrs	r3, r2
 800566a:	600b      	str	r3, [r1, #0]
 800566c:	e015      	b.n	800569a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800566e:	4b24      	ldr	r3, [pc, #144]	; (8005700 <HAL_RCC_OscConfig+0x278>)
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fc feda 	bl	800242c <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800567c:	f7fc fed6 	bl	800242c <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e193      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800568e:	4b1b      	ldr	r3, [pc, #108]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d036      	beq.n	8005714 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d016      	beq.n	80056dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ae:	4b15      	ldr	r3, [pc, #84]	; (8005704 <HAL_RCC_OscConfig+0x27c>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b4:	f7fc feba 	bl	800242c <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056bc:	f7fc feb6 	bl	800242c <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e173      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ce:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <HAL_RCC_OscConfig+0x274>)
 80056d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0f0      	beq.n	80056bc <HAL_RCC_OscConfig+0x234>
 80056da:	e01b      	b.n	8005714 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <HAL_RCC_OscConfig+0x27c>)
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e2:	f7fc fea3 	bl	800242c <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056e8:	e00e      	b.n	8005708 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ea:	f7fc fe9f 	bl	800242c <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d907      	bls.n	8005708 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e15c      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
 80056fc:	40023800 	.word	0x40023800
 8005700:	42470000 	.word	0x42470000
 8005704:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005708:	4b8a      	ldr	r3, [pc, #552]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 800570a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1ea      	bne.n	80056ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8097 	beq.w	8005850 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005722:	2300      	movs	r3, #0
 8005724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005726:	4b83      	ldr	r3, [pc, #524]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10f      	bne.n	8005752 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005732:	2300      	movs	r3, #0
 8005734:	60bb      	str	r3, [r7, #8]
 8005736:	4b7f      	ldr	r3, [pc, #508]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	4a7e      	ldr	r2, [pc, #504]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 800573c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005740:	6413      	str	r3, [r2, #64]	; 0x40
 8005742:	4b7c      	ldr	r3, [pc, #496]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574a:	60bb      	str	r3, [r7, #8]
 800574c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800574e:	2301      	movs	r3, #1
 8005750:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005752:	4b79      	ldr	r3, [pc, #484]	; (8005938 <HAL_RCC_OscConfig+0x4b0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575a:	2b00      	cmp	r3, #0
 800575c:	d118      	bne.n	8005790 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800575e:	4b76      	ldr	r3, [pc, #472]	; (8005938 <HAL_RCC_OscConfig+0x4b0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a75      	ldr	r2, [pc, #468]	; (8005938 <HAL_RCC_OscConfig+0x4b0>)
 8005764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800576a:	f7fc fe5f 	bl	800242c <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005772:	f7fc fe5b 	bl	800242c <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e118      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005784:	4b6c      	ldr	r3, [pc, #432]	; (8005938 <HAL_RCC_OscConfig+0x4b0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0f0      	beq.n	8005772 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d106      	bne.n	80057a6 <HAL_RCC_OscConfig+0x31e>
 8005798:	4b66      	ldr	r3, [pc, #408]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	4a65      	ldr	r2, [pc, #404]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	6713      	str	r3, [r2, #112]	; 0x70
 80057a4:	e01c      	b.n	80057e0 <HAL_RCC_OscConfig+0x358>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b05      	cmp	r3, #5
 80057ac:	d10c      	bne.n	80057c8 <HAL_RCC_OscConfig+0x340>
 80057ae:	4b61      	ldr	r3, [pc, #388]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b2:	4a60      	ldr	r2, [pc, #384]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 80057b4:	f043 0304 	orr.w	r3, r3, #4
 80057b8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ba:	4b5e      	ldr	r3, [pc, #376]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	4a5d      	ldr	r2, [pc, #372]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	6713      	str	r3, [r2, #112]	; 0x70
 80057c6:	e00b      	b.n	80057e0 <HAL_RCC_OscConfig+0x358>
 80057c8:	4b5a      	ldr	r3, [pc, #360]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 80057ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057cc:	4a59      	ldr	r2, [pc, #356]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	6713      	str	r3, [r2, #112]	; 0x70
 80057d4:	4b57      	ldr	r3, [pc, #348]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	4a56      	ldr	r2, [pc, #344]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 80057da:	f023 0304 	bic.w	r3, r3, #4
 80057de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d015      	beq.n	8005814 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e8:	f7fc fe20 	bl	800242c <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ee:	e00a      	b.n	8005806 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057f0:	f7fc fe1c 	bl	800242c <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e0d7      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005806:	4b4b      	ldr	r3, [pc, #300]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0ee      	beq.n	80057f0 <HAL_RCC_OscConfig+0x368>
 8005812:	e014      	b.n	800583e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005814:	f7fc fe0a 	bl	800242c <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800581a:	e00a      	b.n	8005832 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800581c:	f7fc fe06 	bl	800242c <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f241 3288 	movw	r2, #5000	; 0x1388
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e0c1      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005832:	4b40      	ldr	r3, [pc, #256]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1ee      	bne.n	800581c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800583e:	7dfb      	ldrb	r3, [r7, #23]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d105      	bne.n	8005850 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005844:	4b3b      	ldr	r3, [pc, #236]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	4a3a      	ldr	r2, [pc, #232]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 800584a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800584e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80ad 	beq.w	80059b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800585a:	4b36      	ldr	r3, [pc, #216]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 030c 	and.w	r3, r3, #12
 8005862:	2b08      	cmp	r3, #8
 8005864:	d060      	beq.n	8005928 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d145      	bne.n	80058fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800586e:	4b33      	ldr	r3, [pc, #204]	; (800593c <HAL_RCC_OscConfig+0x4b4>)
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005874:	f7fc fdda 	bl	800242c <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800587c:	f7fc fdd6 	bl	800242c <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e093      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588e:	4b29      	ldr	r3, [pc, #164]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f0      	bne.n	800587c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69da      	ldr	r2, [r3, #28]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	019b      	lsls	r3, r3, #6
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	085b      	lsrs	r3, r3, #1
 80058b2:	3b01      	subs	r3, #1
 80058b4:	041b      	lsls	r3, r3, #16
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	061b      	lsls	r3, r3, #24
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	071b      	lsls	r3, r3, #28
 80058c6:	491b      	ldr	r1, [pc, #108]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058cc:	4b1b      	ldr	r3, [pc, #108]	; (800593c <HAL_RCC_OscConfig+0x4b4>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d2:	f7fc fdab 	bl	800242c <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058da:	f7fc fda7 	bl	800242c <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e064      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ec:	4b11      	ldr	r3, [pc, #68]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0f0      	beq.n	80058da <HAL_RCC_OscConfig+0x452>
 80058f8:	e05c      	b.n	80059b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058fa:	4b10      	ldr	r3, [pc, #64]	; (800593c <HAL_RCC_OscConfig+0x4b4>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005900:	f7fc fd94 	bl	800242c <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005908:	f7fc fd90 	bl	800242c <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e04d      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800591a:	4b06      	ldr	r3, [pc, #24]	; (8005934 <HAL_RCC_OscConfig+0x4ac>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f0      	bne.n	8005908 <HAL_RCC_OscConfig+0x480>
 8005926:	e045      	b.n	80059b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d107      	bne.n	8005940 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e040      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
 8005934:	40023800 	.word	0x40023800
 8005938:	40007000 	.word	0x40007000
 800593c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005940:	4b1f      	ldr	r3, [pc, #124]	; (80059c0 <HAL_RCC_OscConfig+0x538>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d030      	beq.n	80059b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005958:	429a      	cmp	r2, r3
 800595a:	d129      	bne.n	80059b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005966:	429a      	cmp	r2, r3
 8005968:	d122      	bne.n	80059b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005970:	4013      	ands	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005976:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005978:	4293      	cmp	r3, r2
 800597a:	d119      	bne.n	80059b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	085b      	lsrs	r3, r3, #1
 8005988:	3b01      	subs	r3, #1
 800598a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800598c:	429a      	cmp	r2, r3
 800598e:	d10f      	bne.n	80059b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800599c:	429a      	cmp	r2, r3
 800599e:	d107      	bne.n	80059b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d001      	beq.n	80059b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40023800 	.word	0x40023800

080059c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e066      	b.n	8005aa8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	7f5b      	ldrb	r3, [r3, #29]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d105      	bne.n	80059f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fc f9ee 	bl	8001dcc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	22ca      	movs	r2, #202	; 0xca
 80059fc:	625a      	str	r2, [r3, #36]	; 0x24
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2253      	movs	r2, #83	; 0x53
 8005a04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fb6f 	bl	80060ea <RTC_EnterInitMode>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d12c      	bne.n	8005a70 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a28:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6899      	ldr	r1, [r3, #8]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	68d2      	ldr	r2, [r2, #12]
 8005a50:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6919      	ldr	r1, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	041a      	lsls	r2, r3, #16
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fb76 	bl	8006158 <RTC_ExitInitMode>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d113      	bne.n	8005a9e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a84:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	22ff      	movs	r2, #255	; 0xff
 8005aa4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ab0:	b590      	push	{r4, r7, lr}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	7f1b      	ldrb	r3, [r3, #28]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_RTC_SetTime+0x1c>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e087      	b.n	8005bdc <HAL_RTC_SetTime+0x12c>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d126      	bne.n	8005b2c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2200      	movs	r2, #0
 8005af0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fb53 	bl	80061a2 <RTC_ByteToBcd2>
 8005afc:	4603      	mov	r3, r0
 8005afe:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fb4c 	bl	80061a2 <RTC_ByteToBcd2>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b0e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	789b      	ldrb	r3, [r3, #2]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fb44 	bl	80061a2 <RTC_ByteToBcd2>
 8005b1a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b1c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	78db      	ldrb	r3, [r3, #3]
 8005b24:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	e018      	b.n	8005b5e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d102      	bne.n	8005b40 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	785b      	ldrb	r3, [r3, #1]
 8005b4a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b4c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005b52:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	78db      	ldrb	r3, [r3, #3]
 8005b58:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	22ca      	movs	r2, #202	; 0xca
 8005b64:	625a      	str	r2, [r3, #36]	; 0x24
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2253      	movs	r2, #83	; 0x53
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fabb 	bl	80060ea <RTC_EnterInitMode>
 8005b74:	4603      	mov	r3, r0
 8005b76:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005b78:	7cfb      	ldrb	r3, [r7, #19]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d120      	bne.n	8005bc0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b88:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b8c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b9c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6899      	ldr	r1, [r3, #8]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 face 	bl	8006158 <RTC_ExitInitMode>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005bc0:	7cfb      	ldrb	r3, [r7, #19]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d102      	bne.n	8005bcc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	22ff      	movs	r2, #255	; 0xff
 8005bd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	771a      	strb	r2, [r3, #28]

  return status;
 8005bda:	7cfb      	ldrb	r3, [r7, #19]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd90      	pop	{r4, r7, pc}

08005be4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	0c1b      	lsrs	r3, r3, #16
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	0a1b      	lsrs	r3, r3, #8
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	0d9b      	lsrs	r3, r3, #22
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d11a      	bne.n	8005c96 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fab9 	bl	80061dc <RTC_Bcd2ToByte>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fab0 	bl	80061dc <RTC_Bcd2ToByte>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	789b      	ldrb	r3, [r3, #2]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 faa7 	bl	80061dc <RTC_Bcd2ToByte>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	461a      	mov	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ca0:	b590      	push	{r4, r7, lr}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	7f1b      	ldrb	r3, [r3, #28]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_RTC_SetDate+0x1c>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e071      	b.n	8005da0 <HAL_RTC_SetDate+0x100>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10e      	bne.n	8005cec <HAL_RTC_SetDate+0x4c>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	f003 0310 	and.w	r3, r3, #16
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	785b      	ldrb	r3, [r3, #1]
 8005cde:	f023 0310 	bic.w	r3, r3, #16
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	330a      	adds	r3, #10
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d11c      	bne.n	8005d2c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	78db      	ldrb	r3, [r3, #3]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fa53 	bl	80061a2 <RTC_ByteToBcd2>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fa4c 	bl	80061a2 <RTC_ByteToBcd2>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d0e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	789b      	ldrb	r3, [r3, #2]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fa44 	bl	80061a2 <RTC_ByteToBcd2>
 8005d1a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d1c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	e00e      	b.n	8005d4a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	78db      	ldrb	r3, [r3, #3]
 8005d30:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d38:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005d3e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	22ca      	movs	r2, #202	; 0xca
 8005d50:	625a      	str	r2, [r3, #36]	; 0x24
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2253      	movs	r2, #83	; 0x53
 8005d58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 f9c5 	bl	80060ea <RTC_EnterInitMode>
 8005d60:	4603      	mov	r3, r0
 8005d62:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10c      	bne.n	8005d84 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d78:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 f9ec 	bl	8006158 <RTC_ExitInitMode>
 8005d80:	4603      	mov	r3, r0
 8005d82:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005d84:	7cfb      	ldrb	r3, [r7, #19]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d102      	bne.n	8005d90 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	22ff      	movs	r2, #255	; 0xff
 8005d96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	771a      	strb	r2, [r3, #28]

  return status;
 8005d9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd90      	pop	{r4, r7, pc}

08005da8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005dc2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005dc6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	0c1b      	lsrs	r3, r3, #16
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	0a1b      	lsrs	r3, r3, #8
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	f003 031f 	and.w	r3, r3, #31
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	0b5b      	lsrs	r3, r3, #13
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d11a      	bne.n	8005e3c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	78db      	ldrb	r3, [r3, #3]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 f9e6 	bl	80061dc <RTC_Bcd2ToByte>
 8005e10:	4603      	mov	r3, r0
 8005e12:	461a      	mov	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 f9dd 	bl	80061dc <RTC_Bcd2ToByte>
 8005e22:	4603      	mov	r3, r0
 8005e24:	461a      	mov	r2, r3
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	789b      	ldrb	r3, [r3, #2]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f9d4 	bl	80061dc <RTC_Bcd2ToByte>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005e46:	b590      	push	{r4, r7, lr}
 8005e48:	b089      	sub	sp, #36	; 0x24
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	7f1b      	ldrb	r3, [r3, #28]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_RTC_SetAlarm+0x24>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e113      	b.n	8006092 <HAL_RTC_SetAlarm+0x24c>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2202      	movs	r2, #2
 8005e74:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d137      	bne.n	8005eec <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d102      	bne.n	8005e90 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f984 	bl	80061a2 <RTC_ByteToBcd2>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	785b      	ldrb	r3, [r3, #1]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 f97d 	bl	80061a2 <RTC_ByteToBcd2>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005eac:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	789b      	ldrb	r3, [r3, #2]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 f975 	bl	80061a2 <RTC_ByteToBcd2>
 8005eb8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005eba:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	78db      	ldrb	r3, [r3, #3]
 8005ec2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005ec4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 f967 	bl	80061a2 <RTC_ByteToBcd2>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005ed8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005ee0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	61fb      	str	r3, [r7, #28]
 8005eea:	e023      	b.n	8005f34 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2200      	movs	r2, #0
 8005efe:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	785b      	ldrb	r3, [r3, #1]
 8005f0a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005f0c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005f12:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	78db      	ldrb	r3, [r3, #3]
 8005f18:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005f1a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f22:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005f24:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005f2a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005f30:	4313      	orrs	r3, r2
 8005f32:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	22ca      	movs	r2, #202	; 0xca
 8005f46:	625a      	str	r2, [r3, #36]	; 0x24
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2253      	movs	r2, #83	; 0x53
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f58:	d148      	bne.n	8005fec <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f68:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f78:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005f8a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f8c:	f7fc fa4e 	bl	800242c <HAL_GetTick>
 8005f90:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005f92:	e013      	b.n	8005fbc <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f94:	f7fc fa4a 	bl	800242c <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fa2:	d90b      	bls.n	8005fbc <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	22ff      	movs	r2, #255	; 0xff
 8005faa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2203      	movs	r2, #3
 8005fb0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e06a      	b.n	8006092 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0e4      	beq.n	8005f94 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fe8:	609a      	str	r2, [r3, #8]
 8005fea:	e047      	b.n	800607c <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ffa:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800600a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	b2da      	uxtb	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f462 7220 	orn	r2, r2, #640	; 0x280
 800601c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800601e:	f7fc fa05 	bl	800242c <HAL_GetTick>
 8006022:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006024:	e013      	b.n	800604e <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006026:	f7fc fa01 	bl	800242c <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006034:	d90b      	bls.n	800604e <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	22ff      	movs	r2, #255	; 0xff
 800603c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2203      	movs	r2, #3
 8006042:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e021      	b.n	8006092 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d0e4      	beq.n	8006026 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800607a:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	22ff      	movs	r2, #255	; 0xff
 8006082:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3724      	adds	r7, #36	; 0x24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd90      	pop	{r4, r7, pc}

0800609a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060b4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060b6:	f7fc f9b9 	bl	800242c <HAL_GetTick>
 80060ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060bc:	e009      	b.n	80060d2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060be:	f7fc f9b5 	bl	800242c <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060cc:	d901      	bls.n	80060d2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e007      	b.n	80060e2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f003 0320 	and.w	r3, r3, #32
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0ee      	beq.n	80060be <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006104:	2b00      	cmp	r3, #0
 8006106:	d122      	bne.n	800614e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006116:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006118:	f7fc f988 	bl	800242c <HAL_GetTick>
 800611c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800611e:	e00c      	b.n	800613a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006120:	f7fc f984 	bl	800242c <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800612e:	d904      	bls.n	800613a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2204      	movs	r2, #4
 8006134:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006144:	2b00      	cmp	r3, #0
 8006146:	d102      	bne.n	800614e <RTC_EnterInitMode+0x64>
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d1e8      	bne.n	8006120 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800614e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006172:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10a      	bne.n	8006198 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff ff89 	bl	800609a <HAL_RTC_WaitForSynchro>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d004      	beq.n	8006198 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2204      	movs	r2, #4
 8006192:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	4603      	mov	r3, r0
 80061aa:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80061b0:	e005      	b.n	80061be <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	3301      	adds	r3, #1
 80061b6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	3b0a      	subs	r3, #10
 80061bc:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	2b09      	cmp	r3, #9
 80061c2:	d8f6      	bhi.n	80061b2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	b2db      	uxtb	r3, r3
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	091b      	lsrs	r3, r3, #4
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	0092      	lsls	r2, r2, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	b2da      	uxtb	r2, r3
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	4413      	add	r3, r2
 8006206:	b2db      	uxtb	r3, r3
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e07b      	b.n	800631e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	2b00      	cmp	r3, #0
 800622c:	d108      	bne.n	8006240 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006236:	d009      	beq.n	800624c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	61da      	str	r2, [r3, #28]
 800623e:	e005      	b.n	800624c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fb fdda 	bl	8001e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006282:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062bc:	431a      	orrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d0:	ea42 0103 	orr.w	r1, r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	0c1b      	lsrs	r3, r3, #16
 80062ea:	f003 0104 	and.w	r1, r3, #4
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	f003 0210 	and.w	r2, r3, #16
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800630c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b088      	sub	sp, #32
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	603b      	str	r3, [r7, #0]
 8006332:	4613      	mov	r3, r2
 8006334:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006340:	2b01      	cmp	r3, #1
 8006342:	d101      	bne.n	8006348 <HAL_SPI_Transmit+0x22>
 8006344:	2302      	movs	r3, #2
 8006346:	e126      	b.n	8006596 <HAL_SPI_Transmit+0x270>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006350:	f7fc f86c 	bl	800242c <HAL_GetTick>
 8006354:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006356:	88fb      	ldrh	r3, [r7, #6]
 8006358:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b01      	cmp	r3, #1
 8006364:	d002      	beq.n	800636c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006366:	2302      	movs	r3, #2
 8006368:	77fb      	strb	r3, [r7, #31]
    goto error;
 800636a:	e10b      	b.n	8006584 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_SPI_Transmit+0x52>
 8006372:	88fb      	ldrh	r3, [r7, #6]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d102      	bne.n	800637e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800637c:	e102      	b.n	8006584 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2203      	movs	r2, #3
 8006382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	88fa      	ldrh	r2, [r7, #6]
 8006396:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	88fa      	ldrh	r2, [r7, #6]
 800639c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c4:	d10f      	bne.n	80063e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	d007      	beq.n	8006404 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006402:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800640c:	d14b      	bne.n	80064a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_SPI_Transmit+0xf6>
 8006416:	8afb      	ldrh	r3, [r7, #22]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d13e      	bne.n	800649a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006420:	881a      	ldrh	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	1c9a      	adds	r2, r3, #2
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006436:	b29b      	uxth	r3, r3
 8006438:	3b01      	subs	r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006440:	e02b      	b.n	800649a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b02      	cmp	r3, #2
 800644e:	d112      	bne.n	8006476 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006454:	881a      	ldrh	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	1c9a      	adds	r2, r3, #2
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	86da      	strh	r2, [r3, #54]	; 0x36
 8006474:	e011      	b.n	800649a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006476:	f7fb ffd9 	bl	800242c <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d803      	bhi.n	800648e <HAL_SPI_Transmit+0x168>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648c:	d102      	bne.n	8006494 <HAL_SPI_Transmit+0x16e>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006498:	e074      	b.n	8006584 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800649e:	b29b      	uxth	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1ce      	bne.n	8006442 <HAL_SPI_Transmit+0x11c>
 80064a4:	e04c      	b.n	8006540 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <HAL_SPI_Transmit+0x18e>
 80064ae:	8afb      	ldrh	r3, [r7, #22]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d140      	bne.n	8006536 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	7812      	ldrb	r2, [r2, #0]
 80064c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b01      	subs	r3, #1
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80064da:	e02c      	b.n	8006536 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d113      	bne.n	8006512 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	330c      	adds	r3, #12
 80064f4:	7812      	ldrb	r2, [r2, #0]
 80064f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006510:	e011      	b.n	8006536 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006512:	f7fb ff8b 	bl	800242c <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d803      	bhi.n	800652a <HAL_SPI_Transmit+0x204>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d102      	bne.n	8006530 <HAL_SPI_Transmit+0x20a>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006534:	e026      	b.n	8006584 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1cd      	bne.n	80064dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fa55 	bl	80069f4 <SPI_EndRxTxTransaction>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800655e:	2300      	movs	r3, #0
 8006560:	613b      	str	r3, [r7, #16]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	613b      	str	r3, [r7, #16]
 8006572:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e000      	b.n	8006584 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006582:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006594:	7ffb      	ldrb	r3, [r7, #31]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3720      	adds	r7, #32
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b08c      	sub	sp, #48	; 0x30
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	607a      	str	r2, [r7, #4]
 80065aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065ac:	2301      	movs	r3, #1
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_SPI_TransmitReceive+0x26>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e18a      	b.n	80068da <HAL_SPI_TransmitReceive+0x33c>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065cc:	f7fb ff2e 	bl	800242c <HAL_GetTick>
 80065d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065e2:	887b      	ldrh	r3, [r7, #2]
 80065e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d00f      	beq.n	800660e <HAL_SPI_TransmitReceive+0x70>
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065f4:	d107      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d103      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x68>
 80065fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006602:	2b04      	cmp	r3, #4
 8006604:	d003      	beq.n	800660e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006606:	2302      	movs	r3, #2
 8006608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800660c:	e15b      	b.n	80068c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <HAL_SPI_TransmitReceive+0x82>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <HAL_SPI_TransmitReceive+0x82>
 800661a:	887b      	ldrh	r3, [r7, #2]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d103      	bne.n	8006628 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006626:	e14e      	b.n	80068c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b04      	cmp	r3, #4
 8006632:	d003      	beq.n	800663c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2205      	movs	r2, #5
 8006638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	887a      	ldrh	r2, [r7, #2]
 800664c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	887a      	ldrh	r2, [r7, #2]
 8006652:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	887a      	ldrh	r2, [r7, #2]
 800665e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	887a      	ldrh	r2, [r7, #2]
 8006664:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667c:	2b40      	cmp	r3, #64	; 0x40
 800667e:	d007      	beq.n	8006690 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800668e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006698:	d178      	bne.n	800678c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <HAL_SPI_TransmitReceive+0x10a>
 80066a2:	8b7b      	ldrh	r3, [r7, #26]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d166      	bne.n	8006776 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ac:	881a      	ldrh	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	1c9a      	adds	r2, r3, #2
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066cc:	e053      	b.n	8006776 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d11b      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x176>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d016      	beq.n	8006714 <HAL_SPI_TransmitReceive+0x176>
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d113      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	881a      	ldrh	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fc:	1c9a      	adds	r2, r3, #2
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006706:	b29b      	uxth	r3, r3
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b01      	cmp	r3, #1
 8006720:	d119      	bne.n	8006756 <HAL_SPI_TransmitReceive+0x1b8>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d014      	beq.n	8006756 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006736:	b292      	uxth	r2, r2
 8006738:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	1c9a      	adds	r2, r3, #2
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006748:	b29b      	uxth	r3, r3
 800674a:	3b01      	subs	r3, #1
 800674c:	b29a      	uxth	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006752:	2301      	movs	r3, #1
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006756:	f7fb fe69 	bl	800242c <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006762:	429a      	cmp	r2, r3
 8006764:	d807      	bhi.n	8006776 <HAL_SPI_TransmitReceive+0x1d8>
 8006766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676c:	d003      	beq.n	8006776 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006774:	e0a7      	b.n	80068c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800677a:	b29b      	uxth	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1a6      	bne.n	80066ce <HAL_SPI_TransmitReceive+0x130>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1a1      	bne.n	80066ce <HAL_SPI_TransmitReceive+0x130>
 800678a:	e07c      	b.n	8006886 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <HAL_SPI_TransmitReceive+0x1fc>
 8006794:	8b7b      	ldrh	r3, [r7, #26]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d16b      	bne.n	8006872 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	7812      	ldrb	r2, [r2, #0]
 80067a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067c0:	e057      	b.n	8006872 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d11c      	bne.n	800680a <HAL_SPI_TransmitReceive+0x26c>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d017      	beq.n	800680a <HAL_SPI_TransmitReceive+0x26c>
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d114      	bne.n	800680a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	330c      	adds	r3, #12
 80067ea:	7812      	ldrb	r2, [r2, #0]
 80067ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b01      	cmp	r3, #1
 8006816:	d119      	bne.n	800684c <HAL_SPI_TransmitReceive+0x2ae>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d014      	beq.n	800684c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800683e:	b29b      	uxth	r3, r3
 8006840:	3b01      	subs	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006848:	2301      	movs	r3, #1
 800684a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800684c:	f7fb fdee 	bl	800242c <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006858:	429a      	cmp	r2, r3
 800685a:	d803      	bhi.n	8006864 <HAL_SPI_TransmitReceive+0x2c6>
 800685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006862:	d102      	bne.n	800686a <HAL_SPI_TransmitReceive+0x2cc>
 8006864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006866:	2b00      	cmp	r3, #0
 8006868:	d103      	bne.n	8006872 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006870:	e029      	b.n	80068c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1a2      	bne.n	80067c2 <HAL_SPI_TransmitReceive+0x224>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d19d      	bne.n	80067c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006888:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 f8b2 	bl	80069f4 <SPI_EndRxTxTransaction>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d006      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80068a2:	e010      	b.n	80068c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10b      	bne.n	80068c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068ac:	2300      	movs	r3, #0
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	e000      	b.n	80068c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80068c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3730      	adds	r7, #48	; 0x30
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	603b      	str	r3, [r7, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068f4:	f7fb fd9a 	bl	800242c <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	1a9b      	subs	r3, r3, r2
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	4413      	add	r3, r2
 8006902:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006904:	f7fb fd92 	bl	800242c <HAL_GetTick>
 8006908:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800690a:	4b39      	ldr	r3, [pc, #228]	; (80069f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	015b      	lsls	r3, r3, #5
 8006910:	0d1b      	lsrs	r3, r3, #20
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	fb02 f303 	mul.w	r3, r2, r3
 8006918:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800691a:	e054      	b.n	80069c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006922:	d050      	beq.n	80069c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006924:	f7fb fd82 	bl	800242c <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	429a      	cmp	r2, r3
 8006932:	d902      	bls.n	800693a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d13d      	bne.n	80069b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006948:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006952:	d111      	bne.n	8006978 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800695c:	d004      	beq.n	8006968 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006966:	d107      	bne.n	8006978 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006976:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006980:	d10f      	bne.n	80069a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e017      	b.n	80069e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4013      	ands	r3, r2
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	bf0c      	ite	eq
 80069d6:	2301      	moveq	r3, #1
 80069d8:	2300      	movne	r3, #0
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	461a      	mov	r2, r3
 80069de:	79fb      	ldrb	r3, [r7, #7]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d19b      	bne.n	800691c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3720      	adds	r7, #32
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000000 	.word	0x20000000

080069f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a00:	4b1b      	ldr	r3, [pc, #108]	; (8006a70 <SPI_EndRxTxTransaction+0x7c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1b      	ldr	r2, [pc, #108]	; (8006a74 <SPI_EndRxTxTransaction+0x80>)
 8006a06:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0a:	0d5b      	lsrs	r3, r3, #21
 8006a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a10:	fb02 f303 	mul.w	r3, r2, r3
 8006a14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a1e:	d112      	bne.n	8006a46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2200      	movs	r2, #0
 8006a28:	2180      	movs	r1, #128	; 0x80
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f7ff ff5a 	bl	80068e4 <SPI_WaitFlagStateUntilTimeout>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d016      	beq.n	8006a64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3a:	f043 0220 	orr.w	r2, r3, #32
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e00f      	b.n	8006a66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5c:	2b80      	cmp	r3, #128	; 0x80
 8006a5e:	d0f2      	beq.n	8006a46 <SPI_EndRxTxTransaction+0x52>
 8006a60:	e000      	b.n	8006a64 <SPI_EndRxTxTransaction+0x70>
        break;
 8006a62:	bf00      	nop
  }

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20000000 	.word	0x20000000
 8006a74:	165e9f81 	.word	0x165e9f81

08006a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e041      	b.n	8006b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fb fa36 	bl	8001f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	f000 fa96 	bl	8006fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d001      	beq.n	8006b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e04e      	b.n	8006bce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0201 	orr.w	r2, r2, #1
 8006b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a23      	ldr	r2, [pc, #140]	; (8006bdc <HAL_TIM_Base_Start_IT+0xc4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d022      	beq.n	8006b98 <HAL_TIM_Base_Start_IT+0x80>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5a:	d01d      	beq.n	8006b98 <HAL_TIM_Base_Start_IT+0x80>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1f      	ldr	r2, [pc, #124]	; (8006be0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d018      	beq.n	8006b98 <HAL_TIM_Base_Start_IT+0x80>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1e      	ldr	r2, [pc, #120]	; (8006be4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d013      	beq.n	8006b98 <HAL_TIM_Base_Start_IT+0x80>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a1c      	ldr	r2, [pc, #112]	; (8006be8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00e      	beq.n	8006b98 <HAL_TIM_Base_Start_IT+0x80>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a1b      	ldr	r2, [pc, #108]	; (8006bec <HAL_TIM_Base_Start_IT+0xd4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d009      	beq.n	8006b98 <HAL_TIM_Base_Start_IT+0x80>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a19      	ldr	r2, [pc, #100]	; (8006bf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <HAL_TIM_Base_Start_IT+0x80>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a18      	ldr	r2, [pc, #96]	; (8006bf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d111      	bne.n	8006bbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b06      	cmp	r3, #6
 8006ba8:	d010      	beq.n	8006bcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0201 	orr.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bba:	e007      	b.n	8006bcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0201 	orr.w	r2, r2, #1
 8006bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40010000 	.word	0x40010000
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40000800 	.word	0x40000800
 8006be8:	40000c00 	.word	0x40000c00
 8006bec:	40010400 	.word	0x40010400
 8006bf0:	40014000 	.word	0x40014000
 8006bf4:	40001800 	.word	0x40001800

08006bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d122      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d11b      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f06f 0202 	mvn.w	r2, #2
 8006c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f9b5 	bl	8006faa <HAL_TIM_IC_CaptureCallback>
 8006c40:	e005      	b.n	8006c4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f9a7 	bl	8006f96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f9b8 	bl	8006fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d122      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d11b      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0204 	mvn.w	r2, #4
 8006c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f98b 	bl	8006faa <HAL_TIM_IC_CaptureCallback>
 8006c94:	e005      	b.n	8006ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f97d 	bl	8006f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f98e 	bl	8006fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d122      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d11b      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f06f 0208 	mvn.w	r2, #8
 8006ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f961 	bl	8006faa <HAL_TIM_IC_CaptureCallback>
 8006ce8:	e005      	b.n	8006cf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f953 	bl	8006f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f964 	bl	8006fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0310 	and.w	r3, r3, #16
 8006d06:	2b10      	cmp	r3, #16
 8006d08:	d122      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	2b10      	cmp	r3, #16
 8006d16:	d11b      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f06f 0210 	mvn.w	r2, #16
 8006d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2208      	movs	r2, #8
 8006d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f937 	bl	8006faa <HAL_TIM_IC_CaptureCallback>
 8006d3c:	e005      	b.n	8006d4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f929 	bl	8006f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f93a 	bl	8006fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d10e      	bne.n	8006d7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d107      	bne.n	8006d7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f06f 0201 	mvn.w	r2, #1
 8006d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fa feec 	bl	8001b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d86:	2b80      	cmp	r3, #128	; 0x80
 8006d88:	d10e      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d94:	2b80      	cmp	r3, #128	; 0x80
 8006d96:	d107      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fae0 	bl	8007368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db2:	2b40      	cmp	r3, #64	; 0x40
 8006db4:	d10e      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b40      	cmp	r3, #64	; 0x40
 8006dc2:	d107      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f8ff 	bl	8006fd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d10e      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d107      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0220 	mvn.w	r2, #32
 8006df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 faaa 	bl	8007354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_TIM_ConfigClockSource+0x1c>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e0b4      	b.n	8006f8e <HAL_TIM_ConfigClockSource+0x186>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e5c:	d03e      	beq.n	8006edc <HAL_TIM_ConfigClockSource+0xd4>
 8006e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e62:	f200 8087 	bhi.w	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6a:	f000 8086 	beq.w	8006f7a <HAL_TIM_ConfigClockSource+0x172>
 8006e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e72:	d87f      	bhi.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e74:	2b70      	cmp	r3, #112	; 0x70
 8006e76:	d01a      	beq.n	8006eae <HAL_TIM_ConfigClockSource+0xa6>
 8006e78:	2b70      	cmp	r3, #112	; 0x70
 8006e7a:	d87b      	bhi.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e7c:	2b60      	cmp	r3, #96	; 0x60
 8006e7e:	d050      	beq.n	8006f22 <HAL_TIM_ConfigClockSource+0x11a>
 8006e80:	2b60      	cmp	r3, #96	; 0x60
 8006e82:	d877      	bhi.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e84:	2b50      	cmp	r3, #80	; 0x50
 8006e86:	d03c      	beq.n	8006f02 <HAL_TIM_ConfigClockSource+0xfa>
 8006e88:	2b50      	cmp	r3, #80	; 0x50
 8006e8a:	d873      	bhi.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e8c:	2b40      	cmp	r3, #64	; 0x40
 8006e8e:	d058      	beq.n	8006f42 <HAL_TIM_ConfigClockSource+0x13a>
 8006e90:	2b40      	cmp	r3, #64	; 0x40
 8006e92:	d86f      	bhi.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e94:	2b30      	cmp	r3, #48	; 0x30
 8006e96:	d064      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x15a>
 8006e98:	2b30      	cmp	r3, #48	; 0x30
 8006e9a:	d86b      	bhi.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d060      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x15a>
 8006ea0:	2b20      	cmp	r3, #32
 8006ea2:	d867      	bhi.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d05c      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x15a>
 8006ea8:	2b10      	cmp	r3, #16
 8006eaa:	d05a      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x15a>
 8006eac:	e062      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6899      	ldr	r1, [r3, #8]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f000 f9ad 	bl	800721c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	609a      	str	r2, [r3, #8]
      break;
 8006eda:	e04f      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6818      	ldr	r0, [r3, #0]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	6899      	ldr	r1, [r3, #8]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f000 f996 	bl	800721c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006efe:	609a      	str	r2, [r3, #8]
      break;
 8006f00:	e03c      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6818      	ldr	r0, [r3, #0]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	6859      	ldr	r1, [r3, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f000 f90a 	bl	8007128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2150      	movs	r1, #80	; 0x50
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f963 	bl	80071e6 <TIM_ITRx_SetConfig>
      break;
 8006f20:	e02c      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6859      	ldr	r1, [r3, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f000 f929 	bl	8007186 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2160      	movs	r1, #96	; 0x60
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 f953 	bl	80071e6 <TIM_ITRx_SetConfig>
      break;
 8006f40:	e01c      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6859      	ldr	r1, [r3, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f000 f8ea 	bl	8007128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2140      	movs	r1, #64	; 0x40
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 f943 	bl	80071e6 <TIM_ITRx_SetConfig>
      break;
 8006f60:	e00c      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f000 f93a 	bl	80071e6 <TIM_ITRx_SetConfig>
      break;
 8006f72:	e003      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	73fb      	strb	r3, [r7, #15]
      break;
 8006f78:	e000      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b083      	sub	sp, #12
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fc6:	bf00      	nop
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b083      	sub	sp, #12
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a40      	ldr	r2, [pc, #256]	; (80070fc <TIM_Base_SetConfig+0x114>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d013      	beq.n	8007028 <TIM_Base_SetConfig+0x40>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007006:	d00f      	beq.n	8007028 <TIM_Base_SetConfig+0x40>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a3d      	ldr	r2, [pc, #244]	; (8007100 <TIM_Base_SetConfig+0x118>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00b      	beq.n	8007028 <TIM_Base_SetConfig+0x40>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a3c      	ldr	r2, [pc, #240]	; (8007104 <TIM_Base_SetConfig+0x11c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d007      	beq.n	8007028 <TIM_Base_SetConfig+0x40>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a3b      	ldr	r2, [pc, #236]	; (8007108 <TIM_Base_SetConfig+0x120>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d003      	beq.n	8007028 <TIM_Base_SetConfig+0x40>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a3a      	ldr	r2, [pc, #232]	; (800710c <TIM_Base_SetConfig+0x124>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d108      	bne.n	800703a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a2f      	ldr	r2, [pc, #188]	; (80070fc <TIM_Base_SetConfig+0x114>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d02b      	beq.n	800709a <TIM_Base_SetConfig+0xb2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007048:	d027      	beq.n	800709a <TIM_Base_SetConfig+0xb2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a2c      	ldr	r2, [pc, #176]	; (8007100 <TIM_Base_SetConfig+0x118>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d023      	beq.n	800709a <TIM_Base_SetConfig+0xb2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a2b      	ldr	r2, [pc, #172]	; (8007104 <TIM_Base_SetConfig+0x11c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d01f      	beq.n	800709a <TIM_Base_SetConfig+0xb2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a2a      	ldr	r2, [pc, #168]	; (8007108 <TIM_Base_SetConfig+0x120>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d01b      	beq.n	800709a <TIM_Base_SetConfig+0xb2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a29      	ldr	r2, [pc, #164]	; (800710c <TIM_Base_SetConfig+0x124>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d017      	beq.n	800709a <TIM_Base_SetConfig+0xb2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a28      	ldr	r2, [pc, #160]	; (8007110 <TIM_Base_SetConfig+0x128>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d013      	beq.n	800709a <TIM_Base_SetConfig+0xb2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a27      	ldr	r2, [pc, #156]	; (8007114 <TIM_Base_SetConfig+0x12c>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d00f      	beq.n	800709a <TIM_Base_SetConfig+0xb2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a26      	ldr	r2, [pc, #152]	; (8007118 <TIM_Base_SetConfig+0x130>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00b      	beq.n	800709a <TIM_Base_SetConfig+0xb2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a25      	ldr	r2, [pc, #148]	; (800711c <TIM_Base_SetConfig+0x134>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d007      	beq.n	800709a <TIM_Base_SetConfig+0xb2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a24      	ldr	r2, [pc, #144]	; (8007120 <TIM_Base_SetConfig+0x138>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d003      	beq.n	800709a <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a23      	ldr	r2, [pc, #140]	; (8007124 <TIM_Base_SetConfig+0x13c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d108      	bne.n	80070ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a0a      	ldr	r2, [pc, #40]	; (80070fc <TIM_Base_SetConfig+0x114>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d003      	beq.n	80070e0 <TIM_Base_SetConfig+0xf8>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a0c      	ldr	r2, [pc, #48]	; (800710c <TIM_Base_SetConfig+0x124>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d103      	bne.n	80070e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	691a      	ldr	r2, [r3, #16]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	615a      	str	r2, [r3, #20]
}
 80070ee:	bf00      	nop
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	40010000 	.word	0x40010000
 8007100:	40000400 	.word	0x40000400
 8007104:	40000800 	.word	0x40000800
 8007108:	40000c00 	.word	0x40000c00
 800710c:	40010400 	.word	0x40010400
 8007110:	40014000 	.word	0x40014000
 8007114:	40014400 	.word	0x40014400
 8007118:	40014800 	.word	0x40014800
 800711c:	40001800 	.word	0x40001800
 8007120:	40001c00 	.word	0x40001c00
 8007124:	40002000 	.word	0x40002000

08007128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f023 0201 	bic.w	r2, r3, #1
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f023 030a 	bic.w	r3, r3, #10
 8007164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007186:	b480      	push	{r7}
 8007188:	b087      	sub	sp, #28
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f023 0210 	bic.w	r2, r3, #16
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	031b      	lsls	r3, r3, #12
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4313      	orrs	r3, r2
 8007204:	f043 0307 	orr.w	r3, r3, #7
 8007208:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	609a      	str	r2, [r3, #8]
}
 8007210:	bf00      	nop
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007236:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	021a      	lsls	r2, r3, #8
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	431a      	orrs	r2, r3
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4313      	orrs	r3, r2
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	4313      	orrs	r3, r2
 8007248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	609a      	str	r2, [r3, #8]
}
 8007250:	bf00      	nop
 8007252:	371c      	adds	r7, #28
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007270:	2302      	movs	r3, #2
 8007272:	e05a      	b.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a21      	ldr	r2, [pc, #132]	; (8007338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d022      	beq.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c0:	d01d      	beq.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a1d      	ldr	r2, [pc, #116]	; (800733c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d018      	beq.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a1b      	ldr	r2, [pc, #108]	; (8007340 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d013      	beq.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a1a      	ldr	r2, [pc, #104]	; (8007344 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d00e      	beq.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a18      	ldr	r2, [pc, #96]	; (8007348 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d009      	beq.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a17      	ldr	r2, [pc, #92]	; (800734c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d004      	beq.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a15      	ldr	r2, [pc, #84]	; (8007350 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d10c      	bne.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	4313      	orrs	r3, r2
 800730e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	40010000 	.word	0x40010000
 800733c:	40000400 	.word	0x40000400
 8007340:	40000800 	.word	0x40000800
 8007344:	40000c00 	.word	0x40000c00
 8007348:	40010400 	.word	0x40010400
 800734c:	40014000 	.word	0x40014000
 8007350:	40001800 	.word	0x40001800

08007354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e03f      	b.n	800740e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fa fdf2 	bl	8001f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2224      	movs	r2, #36	; 0x24
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f929 	bl	8007618 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	691a      	ldr	r2, [r3, #16]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	695a      	ldr	r2, [r3, #20]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2220      	movs	r2, #32
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b08a      	sub	sp, #40	; 0x28
 800741a:	af02      	add	r7, sp, #8
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	603b      	str	r3, [r7, #0]
 8007422:	4613      	mov	r3, r2
 8007424:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b20      	cmp	r3, #32
 8007434:	d17c      	bne.n	8007530 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <HAL_UART_Transmit+0x2c>
 800743c:	88fb      	ldrh	r3, [r7, #6]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e075      	b.n	8007532 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800744c:	2b01      	cmp	r3, #1
 800744e:	d101      	bne.n	8007454 <HAL_UART_Transmit+0x3e>
 8007450:	2302      	movs	r3, #2
 8007452:	e06e      	b.n	8007532 <HAL_UART_Transmit+0x11c>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2221      	movs	r2, #33	; 0x21
 8007466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800746a:	f7fa ffdf 	bl	800242c <HAL_GetTick>
 800746e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	88fa      	ldrh	r2, [r7, #6]
 8007474:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	88fa      	ldrh	r2, [r7, #6]
 800747a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007484:	d108      	bne.n	8007498 <HAL_UART_Transmit+0x82>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d104      	bne.n	8007498 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	e003      	b.n	80074a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800749c:	2300      	movs	r3, #0
 800749e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80074a8:	e02a      	b.n	8007500 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2200      	movs	r2, #0
 80074b2:	2180      	movs	r1, #128	; 0x80
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f840 	bl	800753a <UART_WaitOnFlagUntilTimeout>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e036      	b.n	8007532 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10b      	bne.n	80074e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	3302      	adds	r3, #2
 80074de:	61bb      	str	r3, [r7, #24]
 80074e0:	e007      	b.n	80074f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	781a      	ldrb	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	3301      	adds	r3, #1
 80074f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	3b01      	subs	r3, #1
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1cf      	bne.n	80074aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2200      	movs	r2, #0
 8007512:	2140      	movs	r1, #64	; 0x40
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 f810 	bl	800753a <UART_WaitOnFlagUntilTimeout>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e006      	b.n	8007532 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2220      	movs	r2, #32
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	e000      	b.n	8007532 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007530:	2302      	movs	r3, #2
  }
}
 8007532:	4618      	mov	r0, r3
 8007534:	3720      	adds	r7, #32
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b090      	sub	sp, #64	; 0x40
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	603b      	str	r3, [r7, #0]
 8007546:	4613      	mov	r3, r2
 8007548:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800754a:	e050      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800754c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007552:	d04c      	beq.n	80075ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007556:	2b00      	cmp	r3, #0
 8007558:	d007      	beq.n	800756a <UART_WaitOnFlagUntilTimeout+0x30>
 800755a:	f7fa ff67 	bl	800242c <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007566:	429a      	cmp	r2, r3
 8007568:	d241      	bcs.n	80075ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	330c      	adds	r3, #12
 8007570:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	330c      	adds	r3, #12
 8007588:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800758a:	637a      	str	r2, [r7, #52]	; 0x34
 800758c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e5      	bne.n	800756a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3314      	adds	r3, #20
 80075a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	613b      	str	r3, [r7, #16]
   return(result);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f023 0301 	bic.w	r3, r3, #1
 80075b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3314      	adds	r3, #20
 80075bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075be:	623a      	str	r2, [r7, #32]
 80075c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	69f9      	ldr	r1, [r7, #28]
 80075c4:	6a3a      	ldr	r2, [r7, #32]
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e5      	bne.n	800759e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2220      	movs	r2, #32
 80075de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e00f      	b.n	800760e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4013      	ands	r3, r2
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	bf0c      	ite	eq
 80075fe:	2301      	moveq	r3, #1
 8007600:	2300      	movne	r3, #0
 8007602:	b2db      	uxtb	r3, r3
 8007604:	461a      	mov	r2, r3
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	429a      	cmp	r2, r3
 800760a:	d09f      	beq.n	800754c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3740      	adds	r7, #64	; 0x40
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800761c:	b0c0      	sub	sp, #256	; 0x100
 800761e:	af00      	add	r7, sp, #0
 8007620:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007634:	68d9      	ldr	r1, [r3, #12]
 8007636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	ea40 0301 	orr.w	r3, r0, r1
 8007640:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	431a      	orrs	r2, r3
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	431a      	orrs	r2, r3
 8007658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	4313      	orrs	r3, r2
 8007660:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007670:	f021 010c 	bic.w	r1, r1, #12
 8007674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800767e:	430b      	orrs	r3, r1
 8007680:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800768e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007692:	6999      	ldr	r1, [r3, #24]
 8007694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	ea40 0301 	orr.w	r3, r0, r1
 800769e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b8f      	ldr	r3, [pc, #572]	; (80078e4 <UART_SetConfig+0x2cc>)
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d005      	beq.n	80076b8 <UART_SetConfig+0xa0>
 80076ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	4b8d      	ldr	r3, [pc, #564]	; (80078e8 <UART_SetConfig+0x2d0>)
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d104      	bne.n	80076c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076b8:	f7fd f946 	bl	8004948 <HAL_RCC_GetPCLK2Freq>
 80076bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80076c0:	e003      	b.n	80076ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076c2:	f7fd f92d 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 80076c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d4:	f040 810c 	bne.w	80078f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076dc:	2200      	movs	r2, #0
 80076de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80076e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80076ea:	4622      	mov	r2, r4
 80076ec:	462b      	mov	r3, r5
 80076ee:	1891      	adds	r1, r2, r2
 80076f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80076f2:	415b      	adcs	r3, r3
 80076f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076fa:	4621      	mov	r1, r4
 80076fc:	eb12 0801 	adds.w	r8, r2, r1
 8007700:	4629      	mov	r1, r5
 8007702:	eb43 0901 	adc.w	r9, r3, r1
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	f04f 0300 	mov.w	r3, #0
 800770e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007712:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007716:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800771a:	4690      	mov	r8, r2
 800771c:	4699      	mov	r9, r3
 800771e:	4623      	mov	r3, r4
 8007720:	eb18 0303 	adds.w	r3, r8, r3
 8007724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007728:	462b      	mov	r3, r5
 800772a:	eb49 0303 	adc.w	r3, r9, r3
 800772e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800773e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007742:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007746:	460b      	mov	r3, r1
 8007748:	18db      	adds	r3, r3, r3
 800774a:	653b      	str	r3, [r7, #80]	; 0x50
 800774c:	4613      	mov	r3, r2
 800774e:	eb42 0303 	adc.w	r3, r2, r3
 8007752:	657b      	str	r3, [r7, #84]	; 0x54
 8007754:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007758:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800775c:	f7f9 fa44 	bl	8000be8 <__aeabi_uldivmod>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4b61      	ldr	r3, [pc, #388]	; (80078ec <UART_SetConfig+0x2d4>)
 8007766:	fba3 2302 	umull	r2, r3, r3, r2
 800776a:	095b      	lsrs	r3, r3, #5
 800776c:	011c      	lsls	r4, r3, #4
 800776e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007772:	2200      	movs	r2, #0
 8007774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007778:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800777c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007780:	4642      	mov	r2, r8
 8007782:	464b      	mov	r3, r9
 8007784:	1891      	adds	r1, r2, r2
 8007786:	64b9      	str	r1, [r7, #72]	; 0x48
 8007788:	415b      	adcs	r3, r3
 800778a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800778c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007790:	4641      	mov	r1, r8
 8007792:	eb12 0a01 	adds.w	sl, r2, r1
 8007796:	4649      	mov	r1, r9
 8007798:	eb43 0b01 	adc.w	fp, r3, r1
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80077ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077b0:	4692      	mov	sl, r2
 80077b2:	469b      	mov	fp, r3
 80077b4:	4643      	mov	r3, r8
 80077b6:	eb1a 0303 	adds.w	r3, sl, r3
 80077ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077be:	464b      	mov	r3, r9
 80077c0:	eb4b 0303 	adc.w	r3, fp, r3
 80077c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80077d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80077dc:	460b      	mov	r3, r1
 80077de:	18db      	adds	r3, r3, r3
 80077e0:	643b      	str	r3, [r7, #64]	; 0x40
 80077e2:	4613      	mov	r3, r2
 80077e4:	eb42 0303 	adc.w	r3, r2, r3
 80077e8:	647b      	str	r3, [r7, #68]	; 0x44
 80077ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80077ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80077f2:	f7f9 f9f9 	bl	8000be8 <__aeabi_uldivmod>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	4611      	mov	r1, r2
 80077fc:	4b3b      	ldr	r3, [pc, #236]	; (80078ec <UART_SetConfig+0x2d4>)
 80077fe:	fba3 2301 	umull	r2, r3, r3, r1
 8007802:	095b      	lsrs	r3, r3, #5
 8007804:	2264      	movs	r2, #100	; 0x64
 8007806:	fb02 f303 	mul.w	r3, r2, r3
 800780a:	1acb      	subs	r3, r1, r3
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007812:	4b36      	ldr	r3, [pc, #216]	; (80078ec <UART_SetConfig+0x2d4>)
 8007814:	fba3 2302 	umull	r2, r3, r3, r2
 8007818:	095b      	lsrs	r3, r3, #5
 800781a:	005b      	lsls	r3, r3, #1
 800781c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007820:	441c      	add	r4, r3
 8007822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007826:	2200      	movs	r2, #0
 8007828:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800782c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007830:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007834:	4642      	mov	r2, r8
 8007836:	464b      	mov	r3, r9
 8007838:	1891      	adds	r1, r2, r2
 800783a:	63b9      	str	r1, [r7, #56]	; 0x38
 800783c:	415b      	adcs	r3, r3
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007840:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007844:	4641      	mov	r1, r8
 8007846:	1851      	adds	r1, r2, r1
 8007848:	6339      	str	r1, [r7, #48]	; 0x30
 800784a:	4649      	mov	r1, r9
 800784c:	414b      	adcs	r3, r1
 800784e:	637b      	str	r3, [r7, #52]	; 0x34
 8007850:	f04f 0200 	mov.w	r2, #0
 8007854:	f04f 0300 	mov.w	r3, #0
 8007858:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800785c:	4659      	mov	r1, fp
 800785e:	00cb      	lsls	r3, r1, #3
 8007860:	4651      	mov	r1, sl
 8007862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007866:	4651      	mov	r1, sl
 8007868:	00ca      	lsls	r2, r1, #3
 800786a:	4610      	mov	r0, r2
 800786c:	4619      	mov	r1, r3
 800786e:	4603      	mov	r3, r0
 8007870:	4642      	mov	r2, r8
 8007872:	189b      	adds	r3, r3, r2
 8007874:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007878:	464b      	mov	r3, r9
 800787a:	460a      	mov	r2, r1
 800787c:	eb42 0303 	adc.w	r3, r2, r3
 8007880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007890:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007894:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007898:	460b      	mov	r3, r1
 800789a:	18db      	adds	r3, r3, r3
 800789c:	62bb      	str	r3, [r7, #40]	; 0x28
 800789e:	4613      	mov	r3, r2
 80078a0:	eb42 0303 	adc.w	r3, r2, r3
 80078a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80078ae:	f7f9 f99b 	bl	8000be8 <__aeabi_uldivmod>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4b0d      	ldr	r3, [pc, #52]	; (80078ec <UART_SetConfig+0x2d4>)
 80078b8:	fba3 1302 	umull	r1, r3, r3, r2
 80078bc:	095b      	lsrs	r3, r3, #5
 80078be:	2164      	movs	r1, #100	; 0x64
 80078c0:	fb01 f303 	mul.w	r3, r1, r3
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	3332      	adds	r3, #50	; 0x32
 80078ca:	4a08      	ldr	r2, [pc, #32]	; (80078ec <UART_SetConfig+0x2d4>)
 80078cc:	fba2 2303 	umull	r2, r3, r2, r3
 80078d0:	095b      	lsrs	r3, r3, #5
 80078d2:	f003 0207 	and.w	r2, r3, #7
 80078d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4422      	add	r2, r4
 80078de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078e0:	e106      	b.n	8007af0 <UART_SetConfig+0x4d8>
 80078e2:	bf00      	nop
 80078e4:	40011000 	.word	0x40011000
 80078e8:	40011400 	.word	0x40011400
 80078ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078f4:	2200      	movs	r2, #0
 80078f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80078fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007902:	4642      	mov	r2, r8
 8007904:	464b      	mov	r3, r9
 8007906:	1891      	adds	r1, r2, r2
 8007908:	6239      	str	r1, [r7, #32]
 800790a:	415b      	adcs	r3, r3
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
 800790e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007912:	4641      	mov	r1, r8
 8007914:	1854      	adds	r4, r2, r1
 8007916:	4649      	mov	r1, r9
 8007918:	eb43 0501 	adc.w	r5, r3, r1
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	00eb      	lsls	r3, r5, #3
 8007926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800792a:	00e2      	lsls	r2, r4, #3
 800792c:	4614      	mov	r4, r2
 800792e:	461d      	mov	r5, r3
 8007930:	4643      	mov	r3, r8
 8007932:	18e3      	adds	r3, r4, r3
 8007934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007938:	464b      	mov	r3, r9
 800793a:	eb45 0303 	adc.w	r3, r5, r3
 800793e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800794e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	f04f 0300 	mov.w	r3, #0
 800795a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800795e:	4629      	mov	r1, r5
 8007960:	008b      	lsls	r3, r1, #2
 8007962:	4621      	mov	r1, r4
 8007964:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007968:	4621      	mov	r1, r4
 800796a:	008a      	lsls	r2, r1, #2
 800796c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007970:	f7f9 f93a 	bl	8000be8 <__aeabi_uldivmod>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4b60      	ldr	r3, [pc, #384]	; (8007afc <UART_SetConfig+0x4e4>)
 800797a:	fba3 2302 	umull	r2, r3, r3, r2
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	011c      	lsls	r4, r3, #4
 8007982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007986:	2200      	movs	r2, #0
 8007988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800798c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007990:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007994:	4642      	mov	r2, r8
 8007996:	464b      	mov	r3, r9
 8007998:	1891      	adds	r1, r2, r2
 800799a:	61b9      	str	r1, [r7, #24]
 800799c:	415b      	adcs	r3, r3
 800799e:	61fb      	str	r3, [r7, #28]
 80079a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079a4:	4641      	mov	r1, r8
 80079a6:	1851      	adds	r1, r2, r1
 80079a8:	6139      	str	r1, [r7, #16]
 80079aa:	4649      	mov	r1, r9
 80079ac:	414b      	adcs	r3, r1
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	f04f 0200 	mov.w	r2, #0
 80079b4:	f04f 0300 	mov.w	r3, #0
 80079b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079bc:	4659      	mov	r1, fp
 80079be:	00cb      	lsls	r3, r1, #3
 80079c0:	4651      	mov	r1, sl
 80079c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079c6:	4651      	mov	r1, sl
 80079c8:	00ca      	lsls	r2, r1, #3
 80079ca:	4610      	mov	r0, r2
 80079cc:	4619      	mov	r1, r3
 80079ce:	4603      	mov	r3, r0
 80079d0:	4642      	mov	r2, r8
 80079d2:	189b      	adds	r3, r3, r2
 80079d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079d8:	464b      	mov	r3, r9
 80079da:	460a      	mov	r2, r1
 80079dc:	eb42 0303 	adc.w	r3, r2, r3
 80079e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80079ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	f04f 0300 	mov.w	r3, #0
 80079f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80079fc:	4649      	mov	r1, r9
 80079fe:	008b      	lsls	r3, r1, #2
 8007a00:	4641      	mov	r1, r8
 8007a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a06:	4641      	mov	r1, r8
 8007a08:	008a      	lsls	r2, r1, #2
 8007a0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a0e:	f7f9 f8eb 	bl	8000be8 <__aeabi_uldivmod>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4611      	mov	r1, r2
 8007a18:	4b38      	ldr	r3, [pc, #224]	; (8007afc <UART_SetConfig+0x4e4>)
 8007a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a1e:	095b      	lsrs	r3, r3, #5
 8007a20:	2264      	movs	r2, #100	; 0x64
 8007a22:	fb02 f303 	mul.w	r3, r2, r3
 8007a26:	1acb      	subs	r3, r1, r3
 8007a28:	011b      	lsls	r3, r3, #4
 8007a2a:	3332      	adds	r3, #50	; 0x32
 8007a2c:	4a33      	ldr	r2, [pc, #204]	; (8007afc <UART_SetConfig+0x4e4>)
 8007a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a32:	095b      	lsrs	r3, r3, #5
 8007a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a38:	441c      	add	r4, r3
 8007a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a3e:	2200      	movs	r2, #0
 8007a40:	673b      	str	r3, [r7, #112]	; 0x70
 8007a42:	677a      	str	r2, [r7, #116]	; 0x74
 8007a44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a48:	4642      	mov	r2, r8
 8007a4a:	464b      	mov	r3, r9
 8007a4c:	1891      	adds	r1, r2, r2
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	415b      	adcs	r3, r3
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a58:	4641      	mov	r1, r8
 8007a5a:	1851      	adds	r1, r2, r1
 8007a5c:	6039      	str	r1, [r7, #0]
 8007a5e:	4649      	mov	r1, r9
 8007a60:	414b      	adcs	r3, r1
 8007a62:	607b      	str	r3, [r7, #4]
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a70:	4659      	mov	r1, fp
 8007a72:	00cb      	lsls	r3, r1, #3
 8007a74:	4651      	mov	r1, sl
 8007a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a7a:	4651      	mov	r1, sl
 8007a7c:	00ca      	lsls	r2, r1, #3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	4619      	mov	r1, r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	4642      	mov	r2, r8
 8007a86:	189b      	adds	r3, r3, r2
 8007a88:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a8a:	464b      	mov	r3, r9
 8007a8c:	460a      	mov	r2, r1
 8007a8e:	eb42 0303 	adc.w	r3, r2, r3
 8007a92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a9e:	667a      	str	r2, [r7, #100]	; 0x64
 8007aa0:	f04f 0200 	mov.w	r2, #0
 8007aa4:	f04f 0300 	mov.w	r3, #0
 8007aa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007aac:	4649      	mov	r1, r9
 8007aae:	008b      	lsls	r3, r1, #2
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ab6:	4641      	mov	r1, r8
 8007ab8:	008a      	lsls	r2, r1, #2
 8007aba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007abe:	f7f9 f893 	bl	8000be8 <__aeabi_uldivmod>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4b0d      	ldr	r3, [pc, #52]	; (8007afc <UART_SetConfig+0x4e4>)
 8007ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	2164      	movs	r1, #100	; 0x64
 8007ad0:	fb01 f303 	mul.w	r3, r1, r3
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	3332      	adds	r3, #50	; 0x32
 8007ada:	4a08      	ldr	r2, [pc, #32]	; (8007afc <UART_SetConfig+0x4e4>)
 8007adc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae0:	095b      	lsrs	r3, r3, #5
 8007ae2:	f003 020f 	and.w	r2, r3, #15
 8007ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4422      	add	r2, r4
 8007aee:	609a      	str	r2, [r3, #8]
}
 8007af0:	bf00      	nop
 8007af2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007af6:	46bd      	mov	sp, r7
 8007af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007afc:	51eb851f 	.word	0x51eb851f

08007b00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007b04:	4904      	ldr	r1, [pc, #16]	; (8007b18 <MX_FATFS_Init+0x18>)
 8007b06:	4805      	ldr	r0, [pc, #20]	; (8007b1c <MX_FATFS_Init+0x1c>)
 8007b08:	f000 f8b2 	bl	8007c70 <FATFS_LinkDriver>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	461a      	mov	r2, r3
 8007b10:	4b03      	ldr	r3, [pc, #12]	; (8007b20 <MX_FATFS_Init+0x20>)
 8007b12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007b14:	bf00      	nop
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	20000968 	.word	0x20000968
 8007b1c:	2000000c 	.word	0x2000000c
 8007b20:	20000964 	.word	0x20000964

08007b24 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8007b2e:	79fb      	ldrb	r3, [r7, #7]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f003 fa83 	bl	800b03c <SD_disk_initialize>
 8007b36:	4603      	mov	r3, r0
 8007b38:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	4603      	mov	r3, r0
 8007b4a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f003 fb5a 	bl	800b208 <SD_disk_status>
 8007b54:	4603      	mov	r3, r0
 8007b56:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	607a      	str	r2, [r7, #4]
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007b70:	7bf8      	ldrb	r0, [r7, #15]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	f003 fb5c 	bl	800b234 <SD_disk_read>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60b9      	str	r1, [r7, #8]
 8007b90:	607a      	str	r2, [r7, #4]
 8007b92:	603b      	str	r3, [r7, #0]
 8007b94:	4603      	mov	r3, r0
 8007b96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007b98:	7bf8      	ldrb	r0, [r7, #15]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	68b9      	ldr	r1, [r7, #8]
 8007ba0:	f003 fbb2 	bl	800b308 <SD_disk_write>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	603a      	str	r2, [r7, #0]
 8007bba:	71fb      	strb	r3, [r7, #7]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	79b9      	ldrb	r1, [r7, #6]
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f003 fc22 	bl	800b410 <SD_disk_ioctl>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	4613      	mov	r3, r2
 8007be4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007be6:	2301      	movs	r3, #1
 8007be8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007bee:	4b1f      	ldr	r3, [pc, #124]	; (8007c6c <FATFS_LinkDriverEx+0x94>)
 8007bf0:	7a5b      	ldrb	r3, [r3, #9]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d131      	bne.n	8007c5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007bf8:	4b1c      	ldr	r3, [pc, #112]	; (8007c6c <FATFS_LinkDriverEx+0x94>)
 8007bfa:	7a5b      	ldrb	r3, [r3, #9]
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	461a      	mov	r2, r3
 8007c00:	4b1a      	ldr	r3, [pc, #104]	; (8007c6c <FATFS_LinkDriverEx+0x94>)
 8007c02:	2100      	movs	r1, #0
 8007c04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007c06:	4b19      	ldr	r3, [pc, #100]	; (8007c6c <FATFS_LinkDriverEx+0x94>)
 8007c08:	7a5b      	ldrb	r3, [r3, #9]
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	4a17      	ldr	r2, [pc, #92]	; (8007c6c <FATFS_LinkDriverEx+0x94>)
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007c16:	4b15      	ldr	r3, [pc, #84]	; (8007c6c <FATFS_LinkDriverEx+0x94>)
 8007c18:	7a5b      	ldrb	r3, [r3, #9]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	4b13      	ldr	r3, [pc, #76]	; (8007c6c <FATFS_LinkDriverEx+0x94>)
 8007c20:	4413      	add	r3, r2
 8007c22:	79fa      	ldrb	r2, [r7, #7]
 8007c24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007c26:	4b11      	ldr	r3, [pc, #68]	; (8007c6c <FATFS_LinkDriverEx+0x94>)
 8007c28:	7a5b      	ldrb	r3, [r3, #9]
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	b2d1      	uxtb	r1, r2
 8007c30:	4a0e      	ldr	r2, [pc, #56]	; (8007c6c <FATFS_LinkDriverEx+0x94>)
 8007c32:	7251      	strb	r1, [r2, #9]
 8007c34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007c36:	7dbb      	ldrb	r3, [r7, #22]
 8007c38:	3330      	adds	r3, #48	; 0x30
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	3301      	adds	r3, #1
 8007c44:	223a      	movs	r2, #58	; 0x3a
 8007c46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	3302      	adds	r3, #2
 8007c4c:	222f      	movs	r2, #47	; 0x2f
 8007c4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	3303      	adds	r3, #3
 8007c54:	2200      	movs	r2, #0
 8007c56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	2000096c 	.word	0x2000096c

08007c70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7ff ffaa 	bl	8007bd8 <FATFS_LinkDriverEx>
 8007c84:	4603      	mov	r3, r0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
	...

08007c90 <__NVIC_SetPriority>:
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	4603      	mov	r3, r0
 8007c98:	6039      	str	r1, [r7, #0]
 8007c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	db0a      	blt.n	8007cba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	490c      	ldr	r1, [pc, #48]	; (8007cdc <__NVIC_SetPriority+0x4c>)
 8007caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cae:	0112      	lsls	r2, r2, #4
 8007cb0:	b2d2      	uxtb	r2, r2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007cb8:	e00a      	b.n	8007cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	4908      	ldr	r1, [pc, #32]	; (8007ce0 <__NVIC_SetPriority+0x50>)
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	f003 030f 	and.w	r3, r3, #15
 8007cc6:	3b04      	subs	r3, #4
 8007cc8:	0112      	lsls	r2, r2, #4
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	440b      	add	r3, r1
 8007cce:	761a      	strb	r2, [r3, #24]
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	e000e100 	.word	0xe000e100
 8007ce0:	e000ed00 	.word	0xe000ed00

08007ce4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007ce8:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <SysTick_Handler+0x1c>)
 8007cea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007cec:	f001 fde8 	bl	80098c0 <xTaskGetSchedulerState>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d001      	beq.n	8007cfa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007cf6:	f002 fbcf 	bl	800a498 <xPortSysTickHandler>
  }
}
 8007cfa:	bf00      	nop
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	e000e010 	.word	0xe000e010

08007d04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007d08:	2100      	movs	r1, #0
 8007d0a:	f06f 0004 	mvn.w	r0, #4
 8007d0e:	f7ff ffbf 	bl	8007c90 <__NVIC_SetPriority>
#endif
}
 8007d12:	bf00      	nop
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d1e:	f3ef 8305 	mrs	r3, IPSR
 8007d22:	603b      	str	r3, [r7, #0]
  return(result);
 8007d24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007d2a:	f06f 0305 	mvn.w	r3, #5
 8007d2e:	607b      	str	r3, [r7, #4]
 8007d30:	e00c      	b.n	8007d4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d32:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <osKernelInitialize+0x44>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d105      	bne.n	8007d46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007d3a:	4b08      	ldr	r3, [pc, #32]	; (8007d5c <osKernelInitialize+0x44>)
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	607b      	str	r3, [r7, #4]
 8007d44:	e002      	b.n	8007d4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007d46:	f04f 33ff 	mov.w	r3, #4294967295
 8007d4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d4c:	687b      	ldr	r3, [r7, #4]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	20000978 	.word	0x20000978

08007d60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d66:	f3ef 8305 	mrs	r3, IPSR
 8007d6a:	603b      	str	r3, [r7, #0]
  return(result);
 8007d6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007d72:	f06f 0305 	mvn.w	r3, #5
 8007d76:	607b      	str	r3, [r7, #4]
 8007d78:	e010      	b.n	8007d9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d7a:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <osKernelStart+0x48>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d109      	bne.n	8007d96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d82:	f7ff ffbf 	bl	8007d04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d86:	4b08      	ldr	r3, [pc, #32]	; (8007da8 <osKernelStart+0x48>)
 8007d88:	2202      	movs	r2, #2
 8007d8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d8c:	f001 f8bc 	bl	8008f08 <vTaskStartScheduler>
      stat = osOK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	607b      	str	r3, [r7, #4]
 8007d94:	e002      	b.n	8007d9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007d96:	f04f 33ff 	mov.w	r3, #4294967295
 8007d9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d9c:	687b      	ldr	r3, [r7, #4]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20000978 	.word	0x20000978

08007dac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08e      	sub	sp, #56	; 0x38
 8007db0:	af04      	add	r7, sp, #16
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007db8:	2300      	movs	r3, #0
 8007dba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dbc:	f3ef 8305 	mrs	r3, IPSR
 8007dc0:	617b      	str	r3, [r7, #20]
  return(result);
 8007dc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d17e      	bne.n	8007ec6 <osThreadNew+0x11a>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d07b      	beq.n	8007ec6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007dce:	2380      	movs	r3, #128	; 0x80
 8007dd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007dd2:	2318      	movs	r3, #24
 8007dd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007dda:	f04f 33ff 	mov.w	r3, #4294967295
 8007dde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d045      	beq.n	8007e72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <osThreadNew+0x48>
        name = attr->name;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d008      	beq.n	8007e1a <osThreadNew+0x6e>
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	2b38      	cmp	r3, #56	; 0x38
 8007e0c:	d805      	bhi.n	8007e1a <osThreadNew+0x6e>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <osThreadNew+0x72>
        return (NULL);
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e054      	b.n	8007ec8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	089b      	lsrs	r3, r3, #2
 8007e2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00e      	beq.n	8007e54 <osThreadNew+0xa8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	2baf      	cmp	r3, #175	; 0xaf
 8007e3c:	d90a      	bls.n	8007e54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d006      	beq.n	8007e54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <osThreadNew+0xa8>
        mem = 1;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	61bb      	str	r3, [r7, #24]
 8007e52:	e010      	b.n	8007e76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10c      	bne.n	8007e76 <osThreadNew+0xca>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d108      	bne.n	8007e76 <osThreadNew+0xca>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d104      	bne.n	8007e76 <osThreadNew+0xca>
          mem = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	61bb      	str	r3, [r7, #24]
 8007e70:	e001      	b.n	8007e76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d110      	bne.n	8007e9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e84:	9202      	str	r2, [sp, #8]
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	6a3a      	ldr	r2, [r7, #32]
 8007e90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 fe46 	bl	8008b24 <xTaskCreateStatic>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	613b      	str	r3, [r7, #16]
 8007e9c:	e013      	b.n	8007ec6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d110      	bne.n	8007ec6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	f107 0310 	add.w	r3, r7, #16
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 fe91 	bl	8008bde <xTaskCreate>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d001      	beq.n	8007ec6 <osThreadNew+0x11a>
            hTask = NULL;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007ec6:	693b      	ldr	r3, [r7, #16]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3728      	adds	r7, #40	; 0x28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ed8:	f3ef 8305 	mrs	r3, IPSR
 8007edc:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ede:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d003      	beq.n	8007eec <osDelay+0x1c>
    stat = osErrorISR;
 8007ee4:	f06f 0305 	mvn.w	r3, #5
 8007ee8:	60fb      	str	r3, [r7, #12]
 8007eea:	e007      	b.n	8007efc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <osDelay+0x2c>
      vTaskDelay(ticks);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 ffd2 	bl	8008ea0 <vTaskDelay>
    }
  }

  return (stat);
 8007efc:	68fb      	ldr	r3, [r7, #12]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4a07      	ldr	r2, [pc, #28]	; (8007f34 <vApplicationGetIdleTaskMemory+0x2c>)
 8007f18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	4a06      	ldr	r2, [pc, #24]	; (8007f38 <vApplicationGetIdleTaskMemory+0x30>)
 8007f1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2280      	movs	r2, #128	; 0x80
 8007f24:	601a      	str	r2, [r3, #0]
}
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	2000097c 	.word	0x2000097c
 8007f38:	20000a2c 	.word	0x20000a2c

08007f3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4a07      	ldr	r2, [pc, #28]	; (8007f68 <vApplicationGetTimerTaskMemory+0x2c>)
 8007f4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	4a06      	ldr	r2, [pc, #24]	; (8007f6c <vApplicationGetTimerTaskMemory+0x30>)
 8007f52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f5a:	601a      	str	r2, [r3, #0]
}
 8007f5c:	bf00      	nop
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	20000c2c 	.word	0x20000c2c
 8007f6c:	20000cdc 	.word	0x20000cdc

08007f70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f103 0208 	add.w	r2, r3, #8
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f04f 32ff 	mov.w	r2, #4294967295
 8007f88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f103 0208 	add.w	r2, r3, #8
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f103 0208 	add.w	r2, r3, #8
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	1c5a      	adds	r2, r3, #1
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	601a      	str	r2, [r3, #0]
}
 8008006:	bf00      	nop
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008012:	b480      	push	{r7}
 8008014:	b085      	sub	sp, #20
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008028:	d103      	bne.n	8008032 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	e00c      	b.n	800804c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3308      	adds	r3, #8
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	e002      	b.n	8008040 <vListInsert+0x2e>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	429a      	cmp	r2, r3
 800804a:	d2f6      	bcs.n	800803a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	601a      	str	r2, [r3, #0]
}
 8008078:	bf00      	nop
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	6892      	ldr	r2, [r2, #8]
 800809a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	6852      	ldr	r2, [r2, #4]
 80080a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d103      	bne.n	80080b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	1e5a      	subs	r2, r3, #1
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008102:	f002 f937 	bl	800a374 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810e:	68f9      	ldr	r1, [r7, #12]
 8008110:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008112:	fb01 f303 	mul.w	r3, r1, r3
 8008116:	441a      	add	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008132:	3b01      	subs	r3, #1
 8008134:	68f9      	ldr	r1, [r7, #12]
 8008136:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008138:	fb01 f303 	mul.w	r3, r1, r3
 800813c:	441a      	add	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	22ff      	movs	r2, #255	; 0xff
 8008146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	22ff      	movs	r2, #255	; 0xff
 800814e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d114      	bne.n	8008182 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01a      	beq.n	8008196 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3310      	adds	r3, #16
 8008164:	4618      	mov	r0, r3
 8008166:	f001 f9bf 	bl	80094e8 <xTaskRemoveFromEventList>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d012      	beq.n	8008196 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008170:	4b0c      	ldr	r3, [pc, #48]	; (80081a4 <xQueueGenericReset+0xcc>)
 8008172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	e009      	b.n	8008196 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3310      	adds	r3, #16
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff fef2 	bl	8007f70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3324      	adds	r3, #36	; 0x24
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff feed 	bl	8007f70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008196:	f002 f91d 	bl	800a3d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800819a:	2301      	movs	r3, #1
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	e000ed04 	.word	0xe000ed04

080081a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08e      	sub	sp, #56	; 0x38
 80081ac:	af02      	add	r7, sp, #8
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081ea:	bf00      	nop
 80081ec:	e7fe      	b.n	80081ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <xQueueGenericCreateStatic+0x52>
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <xQueueGenericCreateStatic+0x56>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e000      	b.n	8008200 <xQueueGenericCreateStatic+0x58>
 80081fe:	2300      	movs	r3, #0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	623b      	str	r3, [r7, #32]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d102      	bne.n	8008226 <xQueueGenericCreateStatic+0x7e>
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <xQueueGenericCreateStatic+0x82>
 8008226:	2301      	movs	r3, #1
 8008228:	e000      	b.n	800822c <xQueueGenericCreateStatic+0x84>
 800822a:	2300      	movs	r3, #0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10a      	bne.n	8008246 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	61fb      	str	r3, [r7, #28]
}
 8008242:	bf00      	nop
 8008244:	e7fe      	b.n	8008244 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008246:	2350      	movs	r3, #80	; 0x50
 8008248:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b50      	cmp	r3, #80	; 0x50
 800824e:	d00a      	beq.n	8008266 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	61bb      	str	r3, [r7, #24]
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008266:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800826c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00d      	beq.n	800828e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008274:	2201      	movs	r2, #1
 8008276:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800827a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800827e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	4613      	mov	r3, r2
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	68b9      	ldr	r1, [r7, #8]
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 f83f 	bl	800830c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800828e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008290:	4618      	mov	r0, r3
 8008292:	3730      	adds	r7, #48	; 0x30
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08a      	sub	sp, #40	; 0x28
 800829c:	af02      	add	r7, sp, #8
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	4613      	mov	r3, r2
 80082a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10a      	bne.n	80082c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80082ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	613b      	str	r3, [r7, #16]
}
 80082be:	bf00      	nop
 80082c0:	e7fe      	b.n	80082c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	fb02 f303 	mul.w	r3, r2, r3
 80082ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	3350      	adds	r3, #80	; 0x50
 80082d0:	4618      	mov	r0, r3
 80082d2:	f002 f971 	bl	800a5b8 <pvPortMalloc>
 80082d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d011      	beq.n	8008302 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	3350      	adds	r3, #80	; 0x50
 80082e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082f0:	79fa      	ldrb	r2, [r7, #7]
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	4613      	mov	r3, r2
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	68b9      	ldr	r1, [r7, #8]
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f000 f805 	bl	800830c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008302:	69bb      	ldr	r3, [r7, #24]
	}
 8008304:	4618      	mov	r0, r3
 8008306:	3720      	adds	r7, #32
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
 8008318:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d103      	bne.n	8008328 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	e002      	b.n	800832e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800833a:	2101      	movs	r1, #1
 800833c:	69b8      	ldr	r0, [r7, #24]
 800833e:	f7ff fecb 	bl	80080d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	78fa      	ldrb	r2, [r7, #3]
 8008346:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800834a:	bf00      	nop
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
	...

08008354 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08e      	sub	sp, #56	; 0x38
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008362:	2300      	movs	r3, #0
 8008364:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <xQueueGenericSend+0x32>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d103      	bne.n	8008394 <xQueueGenericSend+0x40>
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <xQueueGenericSend+0x44>
 8008394:	2301      	movs	r3, #1
 8008396:	e000      	b.n	800839a <xQueueGenericSend+0x46>
 8008398:	2300      	movs	r3, #0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10a      	bne.n	80083b4 <xQueueGenericSend+0x60>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083b0:	bf00      	nop
 80083b2:	e7fe      	b.n	80083b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d103      	bne.n	80083c2 <xQueueGenericSend+0x6e>
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d101      	bne.n	80083c6 <xQueueGenericSend+0x72>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e000      	b.n	80083c8 <xQueueGenericSend+0x74>
 80083c6:	2300      	movs	r3, #0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	623b      	str	r3, [r7, #32]
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083e2:	f001 fa6d 	bl	80098c0 <xTaskGetSchedulerState>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d102      	bne.n	80083f2 <xQueueGenericSend+0x9e>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <xQueueGenericSend+0xa2>
 80083f2:	2301      	movs	r3, #1
 80083f4:	e000      	b.n	80083f8 <xQueueGenericSend+0xa4>
 80083f6:	2300      	movs	r3, #0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <xQueueGenericSend+0xbe>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	61fb      	str	r3, [r7, #28]
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008412:	f001 ffaf 	bl	800a374 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841e:	429a      	cmp	r2, r3
 8008420:	d302      	bcc.n	8008428 <xQueueGenericSend+0xd4>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b02      	cmp	r3, #2
 8008426:	d129      	bne.n	800847c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	68b9      	ldr	r1, [r7, #8]
 800842c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800842e:	f000 fa0b 	bl	8008848 <prvCopyDataToQueue>
 8008432:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	2b00      	cmp	r3, #0
 800843a:	d010      	beq.n	800845e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	3324      	adds	r3, #36	; 0x24
 8008440:	4618      	mov	r0, r3
 8008442:	f001 f851 	bl	80094e8 <xTaskRemoveFromEventList>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d013      	beq.n	8008474 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800844c:	4b3f      	ldr	r3, [pc, #252]	; (800854c <xQueueGenericSend+0x1f8>)
 800844e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	e00a      	b.n	8008474 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008460:	2b00      	cmp	r3, #0
 8008462:	d007      	beq.n	8008474 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008464:	4b39      	ldr	r3, [pc, #228]	; (800854c <xQueueGenericSend+0x1f8>)
 8008466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008474:	f001 ffae 	bl	800a3d4 <vPortExitCritical>
				return pdPASS;
 8008478:	2301      	movs	r3, #1
 800847a:	e063      	b.n	8008544 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d103      	bne.n	800848a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008482:	f001 ffa7 	bl	800a3d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008486:	2300      	movs	r3, #0
 8008488:	e05c      	b.n	8008544 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800848a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848c:	2b00      	cmp	r3, #0
 800848e:	d106      	bne.n	800849e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008490:	f107 0314 	add.w	r3, r7, #20
 8008494:	4618      	mov	r0, r3
 8008496:	f001 f88d 	bl	80095b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800849a:	2301      	movs	r3, #1
 800849c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800849e:	f001 ff99 	bl	800a3d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084a2:	f000 fda3 	bl	8008fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084a6:	f001 ff65 	bl	800a374 <vPortEnterCritical>
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084b0:	b25b      	sxtb	r3, r3
 80084b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b6:	d103      	bne.n	80084c0 <xQueueGenericSend+0x16c>
 80084b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084c6:	b25b      	sxtb	r3, r3
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084cc:	d103      	bne.n	80084d6 <xQueueGenericSend+0x182>
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084d6:	f001 ff7d 	bl	800a3d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084da:	1d3a      	adds	r2, r7, #4
 80084dc:	f107 0314 	add.w	r3, r7, #20
 80084e0:	4611      	mov	r1, r2
 80084e2:	4618      	mov	r0, r3
 80084e4:	f001 f87c 	bl	80095e0 <xTaskCheckForTimeOut>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d124      	bne.n	8008538 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084f0:	f000 faa2 	bl	8008a38 <prvIsQueueFull>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d018      	beq.n	800852c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fc:	3310      	adds	r3, #16
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	4611      	mov	r1, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f000 ffa0 	bl	8009448 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800850a:	f000 fa2d 	bl	8008968 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800850e:	f000 fdb3 	bl	8009078 <xTaskResumeAll>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	f47f af7c 	bne.w	8008412 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800851a:	4b0c      	ldr	r3, [pc, #48]	; (800854c <xQueueGenericSend+0x1f8>)
 800851c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	e772      	b.n	8008412 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800852c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800852e:	f000 fa1b 	bl	8008968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008532:	f000 fda1 	bl	8009078 <xTaskResumeAll>
 8008536:	e76c      	b.n	8008412 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800853a:	f000 fa15 	bl	8008968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800853e:	f000 fd9b 	bl	8009078 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008542:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008544:	4618      	mov	r0, r3
 8008546:	3738      	adds	r7, #56	; 0x38
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	e000ed04 	.word	0xe000ed04

08008550 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b090      	sub	sp, #64	; 0x40
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10a      	bne.n	800857e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800857a:	bf00      	nop
 800857c:	e7fe      	b.n	800857c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d103      	bne.n	800858c <xQueueGenericSendFromISR+0x3c>
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <xQueueGenericSendFromISR+0x40>
 800858c:	2301      	movs	r3, #1
 800858e:	e000      	b.n	8008592 <xQueueGenericSendFromISR+0x42>
 8008590:	2300      	movs	r3, #0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10a      	bne.n	80085ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085a8:	bf00      	nop
 80085aa:	e7fe      	b.n	80085aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d103      	bne.n	80085ba <xQueueGenericSendFromISR+0x6a>
 80085b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d101      	bne.n	80085be <xQueueGenericSendFromISR+0x6e>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e000      	b.n	80085c0 <xQueueGenericSendFromISR+0x70>
 80085be:	2300      	movs	r3, #0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10a      	bne.n	80085da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	623b      	str	r3, [r7, #32]
}
 80085d6:	bf00      	nop
 80085d8:	e7fe      	b.n	80085d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085da:	f001 ffad 	bl	800a538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085de:	f3ef 8211 	mrs	r2, BASEPRI
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	61fa      	str	r2, [r7, #28]
 80085f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008602:	429a      	cmp	r2, r3
 8008604:	d302      	bcc.n	800860c <xQueueGenericSendFromISR+0xbc>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2b02      	cmp	r3, #2
 800860a:	d12f      	bne.n	800866c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	68b9      	ldr	r1, [r7, #8]
 8008620:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008622:	f000 f911 	bl	8008848 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008626:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800862a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862e:	d112      	bne.n	8008656 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	2b00      	cmp	r3, #0
 8008636:	d016      	beq.n	8008666 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863a:	3324      	adds	r3, #36	; 0x24
 800863c:	4618      	mov	r0, r3
 800863e:	f000 ff53 	bl	80094e8 <xTaskRemoveFromEventList>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00e      	beq.n	8008666 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00b      	beq.n	8008666 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	e007      	b.n	8008666 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008656:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800865a:	3301      	adds	r3, #1
 800865c:	b2db      	uxtb	r3, r3
 800865e:	b25a      	sxtb	r2, r3
 8008660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008666:	2301      	movs	r3, #1
 8008668:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800866a:	e001      	b.n	8008670 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800866c:	2300      	movs	r3, #0
 800866e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008672:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800867a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800867c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800867e:	4618      	mov	r0, r3
 8008680:	3740      	adds	r7, #64	; 0x40
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
	...

08008688 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08c      	sub	sp, #48	; 0x30
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008694:	2300      	movs	r3, #0
 8008696:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800869c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10a      	bne.n	80086b8 <xQueueReceive+0x30>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	623b      	str	r3, [r7, #32]
}
 80086b4:	bf00      	nop
 80086b6:	e7fe      	b.n	80086b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d103      	bne.n	80086c6 <xQueueReceive+0x3e>
 80086be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <xQueueReceive+0x42>
 80086c6:	2301      	movs	r3, #1
 80086c8:	e000      	b.n	80086cc <xQueueReceive+0x44>
 80086ca:	2300      	movs	r3, #0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10a      	bne.n	80086e6 <xQueueReceive+0x5e>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	61fb      	str	r3, [r7, #28]
}
 80086e2:	bf00      	nop
 80086e4:	e7fe      	b.n	80086e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086e6:	f001 f8eb 	bl	80098c0 <xTaskGetSchedulerState>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <xQueueReceive+0x6e>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <xQueueReceive+0x72>
 80086f6:	2301      	movs	r3, #1
 80086f8:	e000      	b.n	80086fc <xQueueReceive+0x74>
 80086fa:	2300      	movs	r3, #0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10a      	bne.n	8008716 <xQueueReceive+0x8e>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	61bb      	str	r3, [r7, #24]
}
 8008712:	bf00      	nop
 8008714:	e7fe      	b.n	8008714 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008716:	f001 fe2d 	bl	800a374 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	2b00      	cmp	r3, #0
 8008724:	d01f      	beq.n	8008766 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008726:	68b9      	ldr	r1, [r7, #8]
 8008728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800872a:	f000 f8f7 	bl	800891c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	1e5a      	subs	r2, r3, #1
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00f      	beq.n	800875e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	3310      	adds	r3, #16
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fed0 	bl	80094e8 <xTaskRemoveFromEventList>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d007      	beq.n	800875e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800874e:	4b3d      	ldr	r3, [pc, #244]	; (8008844 <xQueueReceive+0x1bc>)
 8008750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800875e:	f001 fe39 	bl	800a3d4 <vPortExitCritical>
				return pdPASS;
 8008762:	2301      	movs	r3, #1
 8008764:	e069      	b.n	800883a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d103      	bne.n	8008774 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800876c:	f001 fe32 	bl	800a3d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008770:	2300      	movs	r3, #0
 8008772:	e062      	b.n	800883a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008776:	2b00      	cmp	r3, #0
 8008778:	d106      	bne.n	8008788 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800877a:	f107 0310 	add.w	r3, r7, #16
 800877e:	4618      	mov	r0, r3
 8008780:	f000 ff18 	bl	80095b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008784:	2301      	movs	r3, #1
 8008786:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008788:	f001 fe24 	bl	800a3d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800878c:	f000 fc2e 	bl	8008fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008790:	f001 fdf0 	bl	800a374 <vPortEnterCritical>
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800879a:	b25b      	sxtb	r3, r3
 800879c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a0:	d103      	bne.n	80087aa <xQueueReceive+0x122>
 80087a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087b0:	b25b      	sxtb	r3, r3
 80087b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b6:	d103      	bne.n	80087c0 <xQueueReceive+0x138>
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087c0:	f001 fe08 	bl	800a3d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087c4:	1d3a      	adds	r2, r7, #4
 80087c6:	f107 0310 	add.w	r3, r7, #16
 80087ca:	4611      	mov	r1, r2
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 ff07 	bl	80095e0 <xTaskCheckForTimeOut>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d123      	bne.n	8008820 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087da:	f000 f917 	bl	8008a0c <prvIsQueueEmpty>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d017      	beq.n	8008814 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	3324      	adds	r3, #36	; 0x24
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	4611      	mov	r1, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 fe2b 	bl	8009448 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087f4:	f000 f8b8 	bl	8008968 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087f8:	f000 fc3e 	bl	8009078 <xTaskResumeAll>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d189      	bne.n	8008716 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008802:	4b10      	ldr	r3, [pc, #64]	; (8008844 <xQueueReceive+0x1bc>)
 8008804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	e780      	b.n	8008716 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008816:	f000 f8a7 	bl	8008968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800881a:	f000 fc2d 	bl	8009078 <xTaskResumeAll>
 800881e:	e77a      	b.n	8008716 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008822:	f000 f8a1 	bl	8008968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008826:	f000 fc27 	bl	8009078 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800882a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800882c:	f000 f8ee 	bl	8008a0c <prvIsQueueEmpty>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	f43f af6f 	beq.w	8008716 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008838:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800883a:	4618      	mov	r0, r3
 800883c:	3730      	adds	r7, #48	; 0x30
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	e000ed04 	.word	0xe000ed04

08008848 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008854:	2300      	movs	r3, #0
 8008856:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10d      	bne.n	8008882 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d14d      	bne.n	800890a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	4618      	mov	r0, r3
 8008874:	f001 f842 	bl	80098fc <xTaskPriorityDisinherit>
 8008878:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	609a      	str	r2, [r3, #8]
 8008880:	e043      	b.n	800890a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d119      	bne.n	80088bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6858      	ldr	r0, [r3, #4]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008890:	461a      	mov	r2, r3
 8008892:	68b9      	ldr	r1, [r7, #8]
 8008894:	f003 fd36 	bl	800c304 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a0:	441a      	add	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d32b      	bcc.n	800890a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	605a      	str	r2, [r3, #4]
 80088ba:	e026      	b.n	800890a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	68d8      	ldr	r0, [r3, #12]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c4:	461a      	mov	r2, r3
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	f003 fd1c 	bl	800c304 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	68da      	ldr	r2, [r3, #12]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d4:	425b      	negs	r3, r3
 80088d6:	441a      	add	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	68da      	ldr	r2, [r3, #12]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d207      	bcs.n	80088f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	689a      	ldr	r2, [r3, #8]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f0:	425b      	negs	r3, r3
 80088f2:	441a      	add	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d105      	bne.n	800890a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	3b01      	subs	r3, #1
 8008908:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008912:	697b      	ldr	r3, [r7, #20]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	2b00      	cmp	r3, #0
 800892c:	d018      	beq.n	8008960 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68da      	ldr	r2, [r3, #12]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008936:	441a      	add	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68da      	ldr	r2, [r3, #12]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	429a      	cmp	r2, r3
 8008946:	d303      	bcc.n	8008950 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	68d9      	ldr	r1, [r3, #12]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008958:	461a      	mov	r2, r3
 800895a:	6838      	ldr	r0, [r7, #0]
 800895c:	f003 fcd2 	bl	800c304 <memcpy>
	}
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008970:	f001 fd00 	bl	800a374 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800897a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800897c:	e011      	b.n	80089a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	2b00      	cmp	r3, #0
 8008984:	d012      	beq.n	80089ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3324      	adds	r3, #36	; 0x24
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fdac 	bl	80094e8 <xTaskRemoveFromEventList>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008996:	f000 fe85 	bl	80096a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800899a:	7bfb      	ldrb	r3, [r7, #15]
 800899c:	3b01      	subs	r3, #1
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	dce9      	bgt.n	800897e <prvUnlockQueue+0x16>
 80089aa:	e000      	b.n	80089ae <prvUnlockQueue+0x46>
					break;
 80089ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	22ff      	movs	r2, #255	; 0xff
 80089b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80089b6:	f001 fd0d 	bl	800a3d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089ba:	f001 fcdb 	bl	800a374 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089c6:	e011      	b.n	80089ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d012      	beq.n	80089f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3310      	adds	r3, #16
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 fd87 	bl	80094e8 <xTaskRemoveFromEventList>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80089e0:	f000 fe60 	bl	80096a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	3b01      	subs	r3, #1
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	dce9      	bgt.n	80089c8 <prvUnlockQueue+0x60>
 80089f4:	e000      	b.n	80089f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	22ff      	movs	r2, #255	; 0xff
 80089fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a00:	f001 fce8 	bl	800a3d4 <vPortExitCritical>
}
 8008a04:	bf00      	nop
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a14:	f001 fcae 	bl	800a374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a20:	2301      	movs	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	e001      	b.n	8008a2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a2a:	f001 fcd3 	bl	800a3d4 <vPortExitCritical>

	return xReturn;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a40:	f001 fc98 	bl	800a374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d102      	bne.n	8008a56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a50:	2301      	movs	r3, #1
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	e001      	b.n	8008a5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a56:	2300      	movs	r3, #0
 8008a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a5a:	f001 fcbb 	bl	800a3d4 <vPortExitCritical>

	return xReturn;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	e014      	b.n	8008aa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a78:	4a0f      	ldr	r2, [pc, #60]	; (8008ab8 <vQueueAddToRegistry+0x50>)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10b      	bne.n	8008a9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a84:	490c      	ldr	r1, [pc, #48]	; (8008ab8 <vQueueAddToRegistry+0x50>)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a8e:	4a0a      	ldr	r2, [pc, #40]	; (8008ab8 <vQueueAddToRegistry+0x50>)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	4413      	add	r3, r2
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a9a:	e006      	b.n	8008aaa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b07      	cmp	r3, #7
 8008aa6:	d9e7      	bls.n	8008a78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	200010dc 	.word	0x200010dc

08008abc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008acc:	f001 fc52 	bl	800a374 <vPortEnterCritical>
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ad6:	b25b      	sxtb	r3, r3
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008adc:	d103      	bne.n	8008ae6 <vQueueWaitForMessageRestricted+0x2a>
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aec:	b25b      	sxtb	r3, r3
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af2:	d103      	bne.n	8008afc <vQueueWaitForMessageRestricted+0x40>
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008afc:	f001 fc6a 	bl	800a3d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d106      	bne.n	8008b16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	3324      	adds	r3, #36	; 0x24
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	68b9      	ldr	r1, [r7, #8]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fcbd 	bl	8009490 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b16:	6978      	ldr	r0, [r7, #20]
 8008b18:	f7ff ff26 	bl	8008968 <prvUnlockQueue>
	}
 8008b1c:	bf00      	nop
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b08e      	sub	sp, #56	; 0x38
 8008b28:	af04      	add	r7, sp, #16
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10a      	bne.n	8008b4e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	623b      	str	r3, [r7, #32]
}
 8008b4a:	bf00      	nop
 8008b4c:	e7fe      	b.n	8008b4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10a      	bne.n	8008b6a <xTaskCreateStatic+0x46>
	__asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	61fb      	str	r3, [r7, #28]
}
 8008b66:	bf00      	nop
 8008b68:	e7fe      	b.n	8008b68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b6a:	23b0      	movs	r3, #176	; 0xb0
 8008b6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2bb0      	cmp	r3, #176	; 0xb0
 8008b72:	d00a      	beq.n	8008b8a <xTaskCreateStatic+0x66>
	__asm volatile
 8008b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	61bb      	str	r3, [r7, #24]
}
 8008b86:	bf00      	nop
 8008b88:	e7fe      	b.n	8008b88 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d01e      	beq.n	8008bd0 <xTaskCreateStatic+0xac>
 8008b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d01b      	beq.n	8008bd0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ba0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008baa:	2300      	movs	r3, #0
 8008bac:	9303      	str	r3, [sp, #12]
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	9302      	str	r3, [sp, #8]
 8008bb2:	f107 0314 	add.w	r3, r7, #20
 8008bb6:	9301      	str	r3, [sp, #4]
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	68b9      	ldr	r1, [r7, #8]
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 f850 	bl	8008c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bca:	f000 f8f9 	bl	8008dc0 <prvAddNewTaskToReadyList>
 8008bce:	e001      	b.n	8008bd4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008bd4:	697b      	ldr	r3, [r7, #20]
	}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3728      	adds	r7, #40	; 0x28
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b08c      	sub	sp, #48	; 0x30
 8008be2:	af04      	add	r7, sp, #16
 8008be4:	60f8      	str	r0, [r7, #12]
 8008be6:	60b9      	str	r1, [r7, #8]
 8008be8:	603b      	str	r3, [r7, #0]
 8008bea:	4613      	mov	r3, r2
 8008bec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 fce0 	bl	800a5b8 <pvPortMalloc>
 8008bf8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00e      	beq.n	8008c1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c00:	20b0      	movs	r0, #176	; 0xb0
 8008c02:	f001 fcd9 	bl	800a5b8 <pvPortMalloc>
 8008c06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	631a      	str	r2, [r3, #48]	; 0x30
 8008c14:	e005      	b.n	8008c22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c16:	6978      	ldr	r0, [r7, #20]
 8008c18:	f001 fd9a 	bl	800a750 <vPortFree>
 8008c1c:	e001      	b.n	8008c22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d017      	beq.n	8008c58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c30:	88fa      	ldrh	r2, [r7, #6]
 8008c32:	2300      	movs	r3, #0
 8008c34:	9303      	str	r3, [sp, #12]
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	9302      	str	r3, [sp, #8]
 8008c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	68b9      	ldr	r1, [r7, #8]
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f000 f80e 	bl	8008c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c4c:	69f8      	ldr	r0, [r7, #28]
 8008c4e:	f000 f8b7 	bl	8008dc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c52:	2301      	movs	r3, #1
 8008c54:	61bb      	str	r3, [r7, #24]
 8008c56:	e002      	b.n	8008c5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c58:	f04f 33ff 	mov.w	r3, #4294967295
 8008c5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c5e:	69bb      	ldr	r3, [r7, #24]
	}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3720      	adds	r7, #32
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	461a      	mov	r2, r3
 8008c80:	21a5      	movs	r1, #165	; 0xa5
 8008c82:	f003 fa6a 	bl	800c15a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c90:	3b01      	subs	r3, #1
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	f023 0307 	bic.w	r3, r3, #7
 8008c9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	617b      	str	r3, [r7, #20]
}
 8008cbc:	bf00      	nop
 8008cbe:	e7fe      	b.n	8008cbe <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d01f      	beq.n	8008d0c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ccc:	2300      	movs	r3, #0
 8008cce:	61fb      	str	r3, [r7, #28]
 8008cd0:	e012      	b.n	8008cf8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	7819      	ldrb	r1, [r3, #0]
 8008cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	4413      	add	r3, r2
 8008ce0:	3334      	adds	r3, #52	; 0x34
 8008ce2:	460a      	mov	r2, r1
 8008ce4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	4413      	add	r3, r2
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d006      	beq.n	8008d00 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	61fb      	str	r3, [r7, #28]
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	2b0f      	cmp	r3, #15
 8008cfc:	d9e9      	bls.n	8008cd2 <prvInitialiseNewTask+0x6a>
 8008cfe:	e000      	b.n	8008d02 <prvInitialiseNewTask+0x9a>
			{
				break;
 8008d00:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d0a:	e003      	b.n	8008d14 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	2b37      	cmp	r3, #55	; 0x37
 8008d18:	d901      	bls.n	8008d1e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d1a:	2337      	movs	r3, #55	; 0x37
 8008d1c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d22:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d28:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d32:	3304      	adds	r3, #4
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7ff f93b 	bl	8007fb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	3318      	adds	r3, #24
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff f936 	bl	8007fb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d58:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d62:	2200      	movs	r2, #0
 8008d64:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d72:	335c      	adds	r3, #92	; 0x5c
 8008d74:	224c      	movs	r2, #76	; 0x4c
 8008d76:	2100      	movs	r1, #0
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f003 f9ee 	bl	800c15a <memset>
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	4a0c      	ldr	r2, [pc, #48]	; (8008db4 <prvInitialiseNewTask+0x14c>)
 8008d82:	661a      	str	r2, [r3, #96]	; 0x60
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	4a0c      	ldr	r2, [pc, #48]	; (8008db8 <prvInitialiseNewTask+0x150>)
 8008d88:	665a      	str	r2, [r3, #100]	; 0x64
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	4a0b      	ldr	r2, [pc, #44]	; (8008dbc <prvInitialiseNewTask+0x154>)
 8008d8e:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	68f9      	ldr	r1, [r7, #12]
 8008d94:	69b8      	ldr	r0, [r7, #24]
 8008d96:	f001 f9c1 	bl	800a11c <pxPortInitialiseStack>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008daa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dac:	bf00      	nop
 8008dae:	3720      	adds	r7, #32
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	20005780 	.word	0x20005780
 8008db8:	200057e8 	.word	0x200057e8
 8008dbc:	20005850 	.word	0x20005850

08008dc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008dc8:	f001 fad4 	bl	800a374 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008dcc:	4b2d      	ldr	r3, [pc, #180]	; (8008e84 <prvAddNewTaskToReadyList+0xc4>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	4a2c      	ldr	r2, [pc, #176]	; (8008e84 <prvAddNewTaskToReadyList+0xc4>)
 8008dd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008dd6:	4b2c      	ldr	r3, [pc, #176]	; (8008e88 <prvAddNewTaskToReadyList+0xc8>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d109      	bne.n	8008df2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008dde:	4a2a      	ldr	r2, [pc, #168]	; (8008e88 <prvAddNewTaskToReadyList+0xc8>)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008de4:	4b27      	ldr	r3, [pc, #156]	; (8008e84 <prvAddNewTaskToReadyList+0xc4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d110      	bne.n	8008e0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008dec:	f000 fca6 	bl	800973c <prvInitialiseTaskLists>
 8008df0:	e00d      	b.n	8008e0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008df2:	4b26      	ldr	r3, [pc, #152]	; (8008e8c <prvAddNewTaskToReadyList+0xcc>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d109      	bne.n	8008e0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008dfa:	4b23      	ldr	r3, [pc, #140]	; (8008e88 <prvAddNewTaskToReadyList+0xc8>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d802      	bhi.n	8008e0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e08:	4a1f      	ldr	r2, [pc, #124]	; (8008e88 <prvAddNewTaskToReadyList+0xc8>)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e0e:	4b20      	ldr	r3, [pc, #128]	; (8008e90 <prvAddNewTaskToReadyList+0xd0>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3301      	adds	r3, #1
 8008e14:	4a1e      	ldr	r2, [pc, #120]	; (8008e90 <prvAddNewTaskToReadyList+0xd0>)
 8008e16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e18:	4b1d      	ldr	r3, [pc, #116]	; (8008e90 <prvAddNewTaskToReadyList+0xd0>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e24:	4b1b      	ldr	r3, [pc, #108]	; (8008e94 <prvAddNewTaskToReadyList+0xd4>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d903      	bls.n	8008e34 <prvAddNewTaskToReadyList+0x74>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e30:	4a18      	ldr	r2, [pc, #96]	; (8008e94 <prvAddNewTaskToReadyList+0xd4>)
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e38:	4613      	mov	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4a15      	ldr	r2, [pc, #84]	; (8008e98 <prvAddNewTaskToReadyList+0xd8>)
 8008e42:	441a      	add	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3304      	adds	r3, #4
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	f7ff f8bd 	bl	8007fca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e50:	f001 fac0 	bl	800a3d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e54:	4b0d      	ldr	r3, [pc, #52]	; (8008e8c <prvAddNewTaskToReadyList+0xcc>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00e      	beq.n	8008e7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e5c:	4b0a      	ldr	r3, [pc, #40]	; (8008e88 <prvAddNewTaskToReadyList+0xc8>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d207      	bcs.n	8008e7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e6a:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <prvAddNewTaskToReadyList+0xdc>)
 8008e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	200015f0 	.word	0x200015f0
 8008e88:	2000111c 	.word	0x2000111c
 8008e8c:	200015fc 	.word	0x200015fc
 8008e90:	2000160c 	.word	0x2000160c
 8008e94:	200015f8 	.word	0x200015f8
 8008e98:	20001120 	.word	0x20001120
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d017      	beq.n	8008ee2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008eb2:	4b13      	ldr	r3, [pc, #76]	; (8008f00 <vTaskDelay+0x60>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00a      	beq.n	8008ed0 <vTaskDelay+0x30>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	60bb      	str	r3, [r7, #8]
}
 8008ecc:	bf00      	nop
 8008ece:	e7fe      	b.n	8008ece <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008ed0:	f000 f88c 	bl	8008fec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fd7e 	bl	80099d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008edc:	f000 f8cc 	bl	8009078 <xTaskResumeAll>
 8008ee0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d107      	bne.n	8008ef8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ee8:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <vTaskDelay+0x64>)
 8008eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ef8:	bf00      	nop
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	20001618 	.word	0x20001618
 8008f04:	e000ed04 	.word	0xe000ed04

08008f08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08a      	sub	sp, #40	; 0x28
 8008f0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f12:	2300      	movs	r3, #0
 8008f14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f16:	463a      	mov	r2, r7
 8008f18:	1d39      	adds	r1, r7, #4
 8008f1a:	f107 0308 	add.w	r3, r7, #8
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe fff2 	bl	8007f08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	9202      	str	r2, [sp, #8]
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	2300      	movs	r3, #0
 8008f34:	460a      	mov	r2, r1
 8008f36:	4925      	ldr	r1, [pc, #148]	; (8008fcc <vTaskStartScheduler+0xc4>)
 8008f38:	4825      	ldr	r0, [pc, #148]	; (8008fd0 <vTaskStartScheduler+0xc8>)
 8008f3a:	f7ff fdf3 	bl	8008b24 <xTaskCreateStatic>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	4a24      	ldr	r2, [pc, #144]	; (8008fd4 <vTaskStartScheduler+0xcc>)
 8008f42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f44:	4b23      	ldr	r3, [pc, #140]	; (8008fd4 <vTaskStartScheduler+0xcc>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d002      	beq.n	8008f52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	e001      	b.n	8008f56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d102      	bne.n	8008f62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f5c:	f000 fd90 	bl	8009a80 <xTimerCreateTimerTask>
 8008f60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d11d      	bne.n	8008fa4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	613b      	str	r3, [r7, #16]
}
 8008f7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f7c:	4b16      	ldr	r3, [pc, #88]	; (8008fd8 <vTaskStartScheduler+0xd0>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	335c      	adds	r3, #92	; 0x5c
 8008f82:	4a16      	ldr	r2, [pc, #88]	; (8008fdc <vTaskStartScheduler+0xd4>)
 8008f84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f86:	4b16      	ldr	r3, [pc, #88]	; (8008fe0 <vTaskStartScheduler+0xd8>)
 8008f88:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f8e:	4b15      	ldr	r3, [pc, #84]	; (8008fe4 <vTaskStartScheduler+0xdc>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f94:	4b14      	ldr	r3, [pc, #80]	; (8008fe8 <vTaskStartScheduler+0xe0>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008f9a:	f7f7 ffa3 	bl	8000ee4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f9e:	f001 f947 	bl	800a230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fa2:	e00e      	b.n	8008fc2 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008faa:	d10a      	bne.n	8008fc2 <vTaskStartScheduler+0xba>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	60fb      	str	r3, [r7, #12]
}
 8008fbe:	bf00      	nop
 8008fc0:	e7fe      	b.n	8008fc0 <vTaskStartScheduler+0xb8>
}
 8008fc2:	bf00      	nop
 8008fc4:	3718      	adds	r7, #24
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	0800e4f0 	.word	0x0800e4f0
 8008fd0:	080096bd 	.word	0x080096bd
 8008fd4:	20001614 	.word	0x20001614
 8008fd8:	2000111c 	.word	0x2000111c
 8008fdc:	20000080 	.word	0x20000080
 8008fe0:	20001610 	.word	0x20001610
 8008fe4:	200015fc 	.word	0x200015fc
 8008fe8:	200015f4 	.word	0x200015f4

08008fec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008fec:	b480      	push	{r7}
 8008fee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ff0:	4b04      	ldr	r3, [pc, #16]	; (8009004 <vTaskSuspendAll+0x18>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	4a03      	ldr	r2, [pc, #12]	; (8009004 <vTaskSuspendAll+0x18>)
 8008ff8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ffa:	bf00      	nop
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	20001618 	.word	0x20001618

08009008 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800900e:	2300      	movs	r3, #0
 8009010:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8009012:	4b14      	ldr	r3, [pc, #80]	; (8009064 <prvGetExpectedIdleTime+0x5c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800901a:	2301      	movs	r3, #1
 800901c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800901e:	4b12      	ldr	r3, [pc, #72]	; (8009068 <prvGetExpectedIdleTime+0x60>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	607b      	str	r3, [r7, #4]
 800902c:	e012      	b.n	8009054 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800902e:	4b0f      	ldr	r3, [pc, #60]	; (800906c <prvGetExpectedIdleTime+0x64>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d902      	bls.n	800903c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	607b      	str	r3, [r7, #4]
 800903a:	e00b      	b.n	8009054 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d002      	beq.n	8009048 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	607b      	str	r3, [r7, #4]
 8009046:	e005      	b.n	8009054 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8009048:	4b09      	ldr	r3, [pc, #36]	; (8009070 <prvGetExpectedIdleTime+0x68>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	4b09      	ldr	r3, [pc, #36]	; (8009074 <prvGetExpectedIdleTime+0x6c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8009054:	687b      	ldr	r3, [r7, #4]
	}
 8009056:	4618      	mov	r0, r3
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	200015f8 	.word	0x200015f8
 8009068:	2000111c 	.word	0x2000111c
 800906c:	20001120 	.word	0x20001120
 8009070:	20001610 	.word	0x20001610
 8009074:	200015f4 	.word	0x200015f4

08009078 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009082:	2300      	movs	r3, #0
 8009084:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009086:	4b42      	ldr	r3, [pc, #264]	; (8009190 <xTaskResumeAll+0x118>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10a      	bne.n	80090a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800908e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	603b      	str	r3, [r7, #0]
}
 80090a0:	bf00      	nop
 80090a2:	e7fe      	b.n	80090a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80090a4:	f001 f966 	bl	800a374 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090a8:	4b39      	ldr	r3, [pc, #228]	; (8009190 <xTaskResumeAll+0x118>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3b01      	subs	r3, #1
 80090ae:	4a38      	ldr	r2, [pc, #224]	; (8009190 <xTaskResumeAll+0x118>)
 80090b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090b2:	4b37      	ldr	r3, [pc, #220]	; (8009190 <xTaskResumeAll+0x118>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d162      	bne.n	8009180 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090ba:	4b36      	ldr	r3, [pc, #216]	; (8009194 <xTaskResumeAll+0x11c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d05e      	beq.n	8009180 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090c2:	e02f      	b.n	8009124 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090c4:	4b34      	ldr	r3, [pc, #208]	; (8009198 <xTaskResumeAll+0x120>)
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3318      	adds	r3, #24
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe ffd7 	bl	8008084 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3304      	adds	r3, #4
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fe ffd2 	bl	8008084 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e4:	4b2d      	ldr	r3, [pc, #180]	; (800919c <xTaskResumeAll+0x124>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d903      	bls.n	80090f4 <xTaskResumeAll+0x7c>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f0:	4a2a      	ldr	r2, [pc, #168]	; (800919c <xTaskResumeAll+0x124>)
 80090f2:	6013      	str	r3, [r2, #0]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f8:	4613      	mov	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4a27      	ldr	r2, [pc, #156]	; (80091a0 <xTaskResumeAll+0x128>)
 8009102:	441a      	add	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3304      	adds	r3, #4
 8009108:	4619      	mov	r1, r3
 800910a:	4610      	mov	r0, r2
 800910c:	f7fe ff5d 	bl	8007fca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009114:	4b23      	ldr	r3, [pc, #140]	; (80091a4 <xTaskResumeAll+0x12c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911a:	429a      	cmp	r2, r3
 800911c:	d302      	bcc.n	8009124 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800911e:	4b22      	ldr	r3, [pc, #136]	; (80091a8 <xTaskResumeAll+0x130>)
 8009120:	2201      	movs	r2, #1
 8009122:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009124:	4b1c      	ldr	r3, [pc, #112]	; (8009198 <xTaskResumeAll+0x120>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1cb      	bne.n	80090c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009132:	f000 fba5 	bl	8009880 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009136:	4b1d      	ldr	r3, [pc, #116]	; (80091ac <xTaskResumeAll+0x134>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d010      	beq.n	8009164 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009142:	f000 f847 	bl	80091d4 <xTaskIncrementTick>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800914c:	4b16      	ldr	r3, [pc, #88]	; (80091a8 <xTaskResumeAll+0x130>)
 800914e:	2201      	movs	r2, #1
 8009150:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3b01      	subs	r3, #1
 8009156:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1f1      	bne.n	8009142 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800915e:	4b13      	ldr	r3, [pc, #76]	; (80091ac <xTaskResumeAll+0x134>)
 8009160:	2200      	movs	r2, #0
 8009162:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009164:	4b10      	ldr	r3, [pc, #64]	; (80091a8 <xTaskResumeAll+0x130>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d009      	beq.n	8009180 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800916c:	2301      	movs	r3, #1
 800916e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009170:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <xTaskResumeAll+0x138>)
 8009172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009180:	f001 f928 	bl	800a3d4 <vPortExitCritical>

	return xAlreadyYielded;
 8009184:	68bb      	ldr	r3, [r7, #8]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20001618 	.word	0x20001618
 8009194:	200015f0 	.word	0x200015f0
 8009198:	200015b0 	.word	0x200015b0
 800919c:	200015f8 	.word	0x200015f8
 80091a0:	20001120 	.word	0x20001120
 80091a4:	2000111c 	.word	0x2000111c
 80091a8:	20001604 	.word	0x20001604
 80091ac:	20001600 	.word	0x20001600
 80091b0:	e000ed04 	.word	0xe000ed04

080091b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80091ba:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <xTaskGetTickCount+0x1c>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80091c0:	687b      	ldr	r3, [r7, #4]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	200015f4 	.word	0x200015f4

080091d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091da:	2300      	movs	r3, #0
 80091dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091de:	4b4f      	ldr	r3, [pc, #316]	; (800931c <xTaskIncrementTick+0x148>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f040 808f 	bne.w	8009306 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091e8:	4b4d      	ldr	r3, [pc, #308]	; (8009320 <xTaskIncrementTick+0x14c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	3301      	adds	r3, #1
 80091ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091f0:	4a4b      	ldr	r2, [pc, #300]	; (8009320 <xTaskIncrementTick+0x14c>)
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d120      	bne.n	800923e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80091fc:	4b49      	ldr	r3, [pc, #292]	; (8009324 <xTaskIncrementTick+0x150>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00a      	beq.n	800921c <xTaskIncrementTick+0x48>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	603b      	str	r3, [r7, #0]
}
 8009218:	bf00      	nop
 800921a:	e7fe      	b.n	800921a <xTaskIncrementTick+0x46>
 800921c:	4b41      	ldr	r3, [pc, #260]	; (8009324 <xTaskIncrementTick+0x150>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	4b41      	ldr	r3, [pc, #260]	; (8009328 <xTaskIncrementTick+0x154>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a3f      	ldr	r2, [pc, #252]	; (8009324 <xTaskIncrementTick+0x150>)
 8009228:	6013      	str	r3, [r2, #0]
 800922a:	4a3f      	ldr	r2, [pc, #252]	; (8009328 <xTaskIncrementTick+0x154>)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	4b3e      	ldr	r3, [pc, #248]	; (800932c <xTaskIncrementTick+0x158>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3301      	adds	r3, #1
 8009236:	4a3d      	ldr	r2, [pc, #244]	; (800932c <xTaskIncrementTick+0x158>)
 8009238:	6013      	str	r3, [r2, #0]
 800923a:	f000 fb21 	bl	8009880 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800923e:	4b3c      	ldr	r3, [pc, #240]	; (8009330 <xTaskIncrementTick+0x15c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	429a      	cmp	r2, r3
 8009246:	d349      	bcc.n	80092dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009248:	4b36      	ldr	r3, [pc, #216]	; (8009324 <xTaskIncrementTick+0x150>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d104      	bne.n	800925c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009252:	4b37      	ldr	r3, [pc, #220]	; (8009330 <xTaskIncrementTick+0x15c>)
 8009254:	f04f 32ff 	mov.w	r2, #4294967295
 8009258:	601a      	str	r2, [r3, #0]
					break;
 800925a:	e03f      	b.n	80092dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800925c:	4b31      	ldr	r3, [pc, #196]	; (8009324 <xTaskIncrementTick+0x150>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	429a      	cmp	r2, r3
 8009272:	d203      	bcs.n	800927c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009274:	4a2e      	ldr	r2, [pc, #184]	; (8009330 <xTaskIncrementTick+0x15c>)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800927a:	e02f      	b.n	80092dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	3304      	adds	r3, #4
 8009280:	4618      	mov	r0, r3
 8009282:	f7fe feff 	bl	8008084 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928a:	2b00      	cmp	r3, #0
 800928c:	d004      	beq.n	8009298 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	3318      	adds	r3, #24
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe fef6 	bl	8008084 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929c:	4b25      	ldr	r3, [pc, #148]	; (8009334 <xTaskIncrementTick+0x160>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d903      	bls.n	80092ac <xTaskIncrementTick+0xd8>
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a8:	4a22      	ldr	r2, [pc, #136]	; (8009334 <xTaskIncrementTick+0x160>)
 80092aa:	6013      	str	r3, [r2, #0]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b0:	4613      	mov	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4a1f      	ldr	r2, [pc, #124]	; (8009338 <xTaskIncrementTick+0x164>)
 80092ba:	441a      	add	r2, r3
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	3304      	adds	r3, #4
 80092c0:	4619      	mov	r1, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	f7fe fe81 	bl	8007fca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092cc:	4b1b      	ldr	r3, [pc, #108]	; (800933c <xTaskIncrementTick+0x168>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d3b8      	bcc.n	8009248 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80092d6:	2301      	movs	r3, #1
 80092d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092da:	e7b5      	b.n	8009248 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092dc:	4b17      	ldr	r3, [pc, #92]	; (800933c <xTaskIncrementTick+0x168>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e2:	4915      	ldr	r1, [pc, #84]	; (8009338 <xTaskIncrementTick+0x164>)
 80092e4:	4613      	mov	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	440b      	add	r3, r1
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d901      	bls.n	80092f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80092f4:	2301      	movs	r3, #1
 80092f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80092f8:	4b11      	ldr	r3, [pc, #68]	; (8009340 <xTaskIncrementTick+0x16c>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d007      	beq.n	8009310 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009300:	2301      	movs	r3, #1
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	e004      	b.n	8009310 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009306:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <xTaskIncrementTick+0x170>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3301      	adds	r3, #1
 800930c:	4a0d      	ldr	r2, [pc, #52]	; (8009344 <xTaskIncrementTick+0x170>)
 800930e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009310:	697b      	ldr	r3, [r7, #20]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	20001618 	.word	0x20001618
 8009320:	200015f4 	.word	0x200015f4
 8009324:	200015a8 	.word	0x200015a8
 8009328:	200015ac 	.word	0x200015ac
 800932c:	20001608 	.word	0x20001608
 8009330:	20001610 	.word	0x20001610
 8009334:	200015f8 	.word	0x200015f8
 8009338:	20001120 	.word	0x20001120
 800933c:	2000111c 	.word	0x2000111c
 8009340:	20001604 	.word	0x20001604
 8009344:	20001600 	.word	0x20001600

08009348 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800934e:	4b36      	ldr	r3, [pc, #216]	; (8009428 <vTaskSwitchContext+0xe0>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009356:	4b35      	ldr	r3, [pc, #212]	; (800942c <vTaskSwitchContext+0xe4>)
 8009358:	2201      	movs	r2, #1
 800935a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800935c:	e05f      	b.n	800941e <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800935e:	4b33      	ldr	r3, [pc, #204]	; (800942c <vTaskSwitchContext+0xe4>)
 8009360:	2200      	movs	r2, #0
 8009362:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009364:	f7f7 fdc8 	bl	8000ef8 <getRunTimeCounterValue>
 8009368:	4603      	mov	r3, r0
 800936a:	4a31      	ldr	r2, [pc, #196]	; (8009430 <vTaskSwitchContext+0xe8>)
 800936c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800936e:	4b30      	ldr	r3, [pc, #192]	; (8009430 <vTaskSwitchContext+0xe8>)
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	4b30      	ldr	r3, [pc, #192]	; (8009434 <vTaskSwitchContext+0xec>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	429a      	cmp	r2, r3
 8009378:	d909      	bls.n	800938e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800937a:	4b2f      	ldr	r3, [pc, #188]	; (8009438 <vTaskSwitchContext+0xf0>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8009380:	4a2b      	ldr	r2, [pc, #172]	; (8009430 <vTaskSwitchContext+0xe8>)
 8009382:	6810      	ldr	r0, [r2, #0]
 8009384:	4a2b      	ldr	r2, [pc, #172]	; (8009434 <vTaskSwitchContext+0xec>)
 8009386:	6812      	ldr	r2, [r2, #0]
 8009388:	1a82      	subs	r2, r0, r2
 800938a:	440a      	add	r2, r1
 800938c:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800938e:	4b28      	ldr	r3, [pc, #160]	; (8009430 <vTaskSwitchContext+0xe8>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a28      	ldr	r2, [pc, #160]	; (8009434 <vTaskSwitchContext+0xec>)
 8009394:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009396:	4b29      	ldr	r3, [pc, #164]	; (800943c <vTaskSwitchContext+0xf4>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	e010      	b.n	80093c0 <vTaskSwitchContext+0x78>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <vTaskSwitchContext+0x72>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	607b      	str	r3, [r7, #4]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <vTaskSwitchContext+0x70>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	3b01      	subs	r3, #1
 80093be:	60fb      	str	r3, [r7, #12]
 80093c0:	491f      	ldr	r1, [pc, #124]	; (8009440 <vTaskSwitchContext+0xf8>)
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	4613      	mov	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	440b      	add	r3, r1
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0e4      	beq.n	800939e <vTaskSwitchContext+0x56>
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4613      	mov	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4a18      	ldr	r2, [pc, #96]	; (8009440 <vTaskSwitchContext+0xf8>)
 80093e0:	4413      	add	r3, r2
 80093e2:	60bb      	str	r3, [r7, #8]
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	605a      	str	r2, [r3, #4]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	3308      	adds	r3, #8
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d104      	bne.n	8009404 <vTaskSwitchContext+0xbc>
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	605a      	str	r2, [r3, #4]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	4a0b      	ldr	r2, [pc, #44]	; (8009438 <vTaskSwitchContext+0xf0>)
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	4a0b      	ldr	r2, [pc, #44]	; (800943c <vTaskSwitchContext+0xf4>)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009414:	4b08      	ldr	r3, [pc, #32]	; (8009438 <vTaskSwitchContext+0xf0>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	335c      	adds	r3, #92	; 0x5c
 800941a:	4a0a      	ldr	r2, [pc, #40]	; (8009444 <vTaskSwitchContext+0xfc>)
 800941c:	6013      	str	r3, [r2, #0]
}
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20001618 	.word	0x20001618
 800942c:	20001604 	.word	0x20001604
 8009430:	20001620 	.word	0x20001620
 8009434:	2000161c 	.word	0x2000161c
 8009438:	2000111c 	.word	0x2000111c
 800943c:	200015f8 	.word	0x200015f8
 8009440:	20001120 	.word	0x20001120
 8009444:	20000080 	.word	0x20000080

08009448 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10a      	bne.n	800946e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	60fb      	str	r3, [r7, #12]
}
 800946a:	bf00      	nop
 800946c:	e7fe      	b.n	800946c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800946e:	4b07      	ldr	r3, [pc, #28]	; (800948c <vTaskPlaceOnEventList+0x44>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3318      	adds	r3, #24
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7fe fdcb 	bl	8008012 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800947c:	2101      	movs	r1, #1
 800947e:	6838      	ldr	r0, [r7, #0]
 8009480:	f000 faaa 	bl	80099d8 <prvAddCurrentTaskToDelayedList>
}
 8009484:	bf00      	nop
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	2000111c 	.word	0x2000111c

08009490 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10a      	bne.n	80094b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	617b      	str	r3, [r7, #20]
}
 80094b4:	bf00      	nop
 80094b6:	e7fe      	b.n	80094b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094b8:	4b0a      	ldr	r3, [pc, #40]	; (80094e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	3318      	adds	r3, #24
 80094be:	4619      	mov	r1, r3
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f7fe fd82 	bl	8007fca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80094cc:	f04f 33ff 	mov.w	r3, #4294967295
 80094d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	68b8      	ldr	r0, [r7, #8]
 80094d6:	f000 fa7f 	bl	80099d8 <prvAddCurrentTaskToDelayedList>
	}
 80094da:	bf00      	nop
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	2000111c 	.word	0x2000111c

080094e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10a      	bne.n	8009514 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	60fb      	str	r3, [r7, #12]
}
 8009510:	bf00      	nop
 8009512:	e7fe      	b.n	8009512 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	3318      	adds	r3, #24
 8009518:	4618      	mov	r0, r3
 800951a:	f7fe fdb3 	bl	8008084 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800951e:	4b1f      	ldr	r3, [pc, #124]	; (800959c <xTaskRemoveFromEventList+0xb4>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d11f      	bne.n	8009566 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	3304      	adds	r3, #4
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe fdaa 	bl	8008084 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009534:	4b1a      	ldr	r3, [pc, #104]	; (80095a0 <xTaskRemoveFromEventList+0xb8>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	429a      	cmp	r2, r3
 800953a:	d903      	bls.n	8009544 <xTaskRemoveFromEventList+0x5c>
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	4a17      	ldr	r2, [pc, #92]	; (80095a0 <xTaskRemoveFromEventList+0xb8>)
 8009542:	6013      	str	r3, [r2, #0]
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4a14      	ldr	r2, [pc, #80]	; (80095a4 <xTaskRemoveFromEventList+0xbc>)
 8009552:	441a      	add	r2, r3
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	3304      	adds	r3, #4
 8009558:	4619      	mov	r1, r3
 800955a:	4610      	mov	r0, r2
 800955c:	f7fe fd35 	bl	8007fca <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8009560:	f000 f98e 	bl	8009880 <prvResetNextTaskUnblockTime>
 8009564:	e005      	b.n	8009572 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	3318      	adds	r3, #24
 800956a:	4619      	mov	r1, r3
 800956c:	480e      	ldr	r0, [pc, #56]	; (80095a8 <xTaskRemoveFromEventList+0xc0>)
 800956e:	f7fe fd2c 	bl	8007fca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009576:	4b0d      	ldr	r3, [pc, #52]	; (80095ac <xTaskRemoveFromEventList+0xc4>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957c:	429a      	cmp	r2, r3
 800957e:	d905      	bls.n	800958c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009580:	2301      	movs	r3, #1
 8009582:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009584:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <xTaskRemoveFromEventList+0xc8>)
 8009586:	2201      	movs	r2, #1
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	e001      	b.n	8009590 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800958c:	2300      	movs	r3, #0
 800958e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009590:	697b      	ldr	r3, [r7, #20]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20001618 	.word	0x20001618
 80095a0:	200015f8 	.word	0x200015f8
 80095a4:	20001120 	.word	0x20001120
 80095a8:	200015b0 	.word	0x200015b0
 80095ac:	2000111c 	.word	0x2000111c
 80095b0:	20001604 	.word	0x20001604

080095b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095bc:	4b06      	ldr	r3, [pc, #24]	; (80095d8 <vTaskInternalSetTimeOutState+0x24>)
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095c4:	4b05      	ldr	r3, [pc, #20]	; (80095dc <vTaskInternalSetTimeOutState+0x28>)
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	605a      	str	r2, [r3, #4]
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	20001608 	.word	0x20001608
 80095dc:	200015f4 	.word	0x200015f4

080095e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b088      	sub	sp, #32
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d10a      	bne.n	8009606 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80095f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	613b      	str	r3, [r7, #16]
}
 8009602:	bf00      	nop
 8009604:	e7fe      	b.n	8009604 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10a      	bne.n	8009622 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800960c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	60fb      	str	r3, [r7, #12]
}
 800961e:	bf00      	nop
 8009620:	e7fe      	b.n	8009620 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009622:	f000 fea7 	bl	800a374 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009626:	4b1d      	ldr	r3, [pc, #116]	; (800969c <xTaskCheckForTimeOut+0xbc>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	69ba      	ldr	r2, [r7, #24]
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963e:	d102      	bne.n	8009646 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009640:	2300      	movs	r3, #0
 8009642:	61fb      	str	r3, [r7, #28]
 8009644:	e023      	b.n	800968e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	4b15      	ldr	r3, [pc, #84]	; (80096a0 <xTaskCheckForTimeOut+0xc0>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	429a      	cmp	r2, r3
 8009650:	d007      	beq.n	8009662 <xTaskCheckForTimeOut+0x82>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	69ba      	ldr	r2, [r7, #24]
 8009658:	429a      	cmp	r2, r3
 800965a:	d302      	bcc.n	8009662 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800965c:	2301      	movs	r3, #1
 800965e:	61fb      	str	r3, [r7, #28]
 8009660:	e015      	b.n	800968e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	429a      	cmp	r2, r3
 800966a:	d20b      	bcs.n	8009684 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	1ad2      	subs	r2, r2, r3
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7ff ff9b 	bl	80095b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800967e:	2300      	movs	r3, #0
 8009680:	61fb      	str	r3, [r7, #28]
 8009682:	e004      	b.n	800968e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	2200      	movs	r2, #0
 8009688:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800968a:	2301      	movs	r3, #1
 800968c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800968e:	f000 fea1 	bl	800a3d4 <vPortExitCritical>

	return xReturn;
 8009692:	69fb      	ldr	r3, [r7, #28]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3720      	adds	r7, #32
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	200015f4 	.word	0x200015f4
 80096a0:	20001608 	.word	0x20001608

080096a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096a4:	b480      	push	{r7}
 80096a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096a8:	4b03      	ldr	r3, [pc, #12]	; (80096b8 <vTaskMissedYield+0x14>)
 80096aa:	2201      	movs	r2, #1
 80096ac:	601a      	str	r2, [r3, #0]
}
 80096ae:	bf00      	nop
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	20001604 	.word	0x20001604

080096bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80096c4:	f000 f87a 	bl	80097bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096c8:	4b18      	ldr	r3, [pc, #96]	; (800972c <prvIdleTask+0x70>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d907      	bls.n	80096e0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80096d0:	4b17      	ldr	r3, [pc, #92]	; (8009730 <prvIdleTask+0x74>)
 80096d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d6:	601a      	str	r2, [r3, #0]
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80096e0:	f7ff fc92 	bl	8009008 <prvGetExpectedIdleTime>
 80096e4:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d9eb      	bls.n	80096c4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 80096ec:	f7ff fc7e 	bl	8008fec <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80096f0:	4b10      	ldr	r3, [pc, #64]	; (8009734 <prvIdleTask+0x78>)
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	4b10      	ldr	r3, [pc, #64]	; (8009738 <prvIdleTask+0x7c>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d20a      	bcs.n	8009712 <prvIdleTask+0x56>
	__asm volatile
 80096fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	60bb      	str	r3, [r7, #8]
}
 800970e:	bf00      	nop
 8009710:	e7fe      	b.n	8009710 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8009712:	f7ff fc79 	bl	8009008 <prvGetExpectedIdleTime>
 8009716:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d902      	bls.n	8009724 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f7f7 fbf6 	bl	8000f10 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8009724:	f7ff fca8 	bl	8009078 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8009728:	e7cc      	b.n	80096c4 <prvIdleTask+0x8>
 800972a:	bf00      	nop
 800972c:	20001120 	.word	0x20001120
 8009730:	e000ed04 	.word	0xe000ed04
 8009734:	20001610 	.word	0x20001610
 8009738:	200015f4 	.word	0x200015f4

0800973c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009742:	2300      	movs	r3, #0
 8009744:	607b      	str	r3, [r7, #4]
 8009746:	e00c      	b.n	8009762 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	4613      	mov	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4a12      	ldr	r2, [pc, #72]	; (800979c <prvInitialiseTaskLists+0x60>)
 8009754:	4413      	add	r3, r2
 8009756:	4618      	mov	r0, r3
 8009758:	f7fe fc0a 	bl	8007f70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	3301      	adds	r3, #1
 8009760:	607b      	str	r3, [r7, #4]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b37      	cmp	r3, #55	; 0x37
 8009766:	d9ef      	bls.n	8009748 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009768:	480d      	ldr	r0, [pc, #52]	; (80097a0 <prvInitialiseTaskLists+0x64>)
 800976a:	f7fe fc01 	bl	8007f70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800976e:	480d      	ldr	r0, [pc, #52]	; (80097a4 <prvInitialiseTaskLists+0x68>)
 8009770:	f7fe fbfe 	bl	8007f70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009774:	480c      	ldr	r0, [pc, #48]	; (80097a8 <prvInitialiseTaskLists+0x6c>)
 8009776:	f7fe fbfb 	bl	8007f70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800977a:	480c      	ldr	r0, [pc, #48]	; (80097ac <prvInitialiseTaskLists+0x70>)
 800977c:	f7fe fbf8 	bl	8007f70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009780:	480b      	ldr	r0, [pc, #44]	; (80097b0 <prvInitialiseTaskLists+0x74>)
 8009782:	f7fe fbf5 	bl	8007f70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009786:	4b0b      	ldr	r3, [pc, #44]	; (80097b4 <prvInitialiseTaskLists+0x78>)
 8009788:	4a05      	ldr	r2, [pc, #20]	; (80097a0 <prvInitialiseTaskLists+0x64>)
 800978a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800978c:	4b0a      	ldr	r3, [pc, #40]	; (80097b8 <prvInitialiseTaskLists+0x7c>)
 800978e:	4a05      	ldr	r2, [pc, #20]	; (80097a4 <prvInitialiseTaskLists+0x68>)
 8009790:	601a      	str	r2, [r3, #0]
}
 8009792:	bf00      	nop
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20001120 	.word	0x20001120
 80097a0:	20001580 	.word	0x20001580
 80097a4:	20001594 	.word	0x20001594
 80097a8:	200015b0 	.word	0x200015b0
 80097ac:	200015c4 	.word	0x200015c4
 80097b0:	200015dc 	.word	0x200015dc
 80097b4:	200015a8 	.word	0x200015a8
 80097b8:	200015ac 	.word	0x200015ac

080097bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097c2:	e019      	b.n	80097f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80097c4:	f000 fdd6 	bl	800a374 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c8:	4b10      	ldr	r3, [pc, #64]	; (800980c <prvCheckTasksWaitingTermination+0x50>)
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fe fc55 	bl	8008084 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80097da:	4b0d      	ldr	r3, [pc, #52]	; (8009810 <prvCheckTasksWaitingTermination+0x54>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	3b01      	subs	r3, #1
 80097e0:	4a0b      	ldr	r2, [pc, #44]	; (8009810 <prvCheckTasksWaitingTermination+0x54>)
 80097e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097e4:	4b0b      	ldr	r3, [pc, #44]	; (8009814 <prvCheckTasksWaitingTermination+0x58>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	4a0a      	ldr	r2, [pc, #40]	; (8009814 <prvCheckTasksWaitingTermination+0x58>)
 80097ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80097ee:	f000 fdf1 	bl	800a3d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f810 	bl	8009818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097f8:	4b06      	ldr	r3, [pc, #24]	; (8009814 <prvCheckTasksWaitingTermination+0x58>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1e1      	bne.n	80097c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009800:	bf00      	nop
 8009802:	bf00      	nop
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	200015c4 	.word	0x200015c4
 8009810:	200015f0 	.word	0x200015f0
 8009814:	200015d8 	.word	0x200015d8

08009818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	335c      	adds	r3, #92	; 0x5c
 8009824:	4618      	mov	r0, r3
 8009826:	f002 fcb5 	bl	800c194 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8009830:	2b00      	cmp	r3, #0
 8009832:	d108      	bne.n	8009846 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009838:	4618      	mov	r0, r3
 800983a:	f000 ff89 	bl	800a750 <vPortFree>
				vPortFree( pxTCB );
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 ff86 	bl	800a750 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009844:	e018      	b.n	8009878 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800984c:	2b01      	cmp	r3, #1
 800984e:	d103      	bne.n	8009858 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 ff7d 	bl	800a750 <vPortFree>
	}
 8009856:	e00f      	b.n	8009878 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800985e:	2b02      	cmp	r3, #2
 8009860:	d00a      	beq.n	8009878 <prvDeleteTCB+0x60>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	60fb      	str	r3, [r7, #12]
}
 8009874:	bf00      	nop
 8009876:	e7fe      	b.n	8009876 <prvDeleteTCB+0x5e>
	}
 8009878:	bf00      	nop
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009886:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <prvResetNextTaskUnblockTime+0x38>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d104      	bne.n	800989a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009890:	4b0a      	ldr	r3, [pc, #40]	; (80098bc <prvResetNextTaskUnblockTime+0x3c>)
 8009892:	f04f 32ff 	mov.w	r2, #4294967295
 8009896:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009898:	e008      	b.n	80098ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800989a:	4b07      	ldr	r3, [pc, #28]	; (80098b8 <prvResetNextTaskUnblockTime+0x38>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	4a04      	ldr	r2, [pc, #16]	; (80098bc <prvResetNextTaskUnblockTime+0x3c>)
 80098aa:	6013      	str	r3, [r2, #0]
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	200015a8 	.word	0x200015a8
 80098bc:	20001610 	.word	0x20001610

080098c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098c6:	4b0b      	ldr	r3, [pc, #44]	; (80098f4 <xTaskGetSchedulerState+0x34>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d102      	bne.n	80098d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098ce:	2301      	movs	r3, #1
 80098d0:	607b      	str	r3, [r7, #4]
 80098d2:	e008      	b.n	80098e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098d4:	4b08      	ldr	r3, [pc, #32]	; (80098f8 <xTaskGetSchedulerState+0x38>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d102      	bne.n	80098e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098dc:	2302      	movs	r3, #2
 80098de:	607b      	str	r3, [r7, #4]
 80098e0:	e001      	b.n	80098e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098e2:	2300      	movs	r3, #0
 80098e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098e6:	687b      	ldr	r3, [r7, #4]
	}
 80098e8:	4618      	mov	r0, r3
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	200015fc 	.word	0x200015fc
 80098f8:	20001618 	.word	0x20001618

080098fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009908:	2300      	movs	r3, #0
 800990a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d056      	beq.n	80099c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009912:	4b2e      	ldr	r3, [pc, #184]	; (80099cc <xTaskPriorityDisinherit+0xd0>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	429a      	cmp	r2, r3
 800991a:	d00a      	beq.n	8009932 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	60fb      	str	r3, [r7, #12]
}
 800992e:	bf00      	nop
 8009930:	e7fe      	b.n	8009930 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10a      	bne.n	8009950 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	60bb      	str	r3, [r7, #8]
}
 800994c:	bf00      	nop
 800994e:	e7fe      	b.n	800994e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009954:	1e5a      	subs	r2, r3, #1
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009962:	429a      	cmp	r2, r3
 8009964:	d02c      	beq.n	80099c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800996a:	2b00      	cmp	r3, #0
 800996c:	d128      	bne.n	80099c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	3304      	adds	r3, #4
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe fb86 	bl	8008084 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009984:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009990:	4b0f      	ldr	r3, [pc, #60]	; (80099d0 <xTaskPriorityDisinherit+0xd4>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	429a      	cmp	r2, r3
 8009996:	d903      	bls.n	80099a0 <xTaskPriorityDisinherit+0xa4>
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999c:	4a0c      	ldr	r2, [pc, #48]	; (80099d0 <xTaskPriorityDisinherit+0xd4>)
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a4:	4613      	mov	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4a09      	ldr	r2, [pc, #36]	; (80099d4 <xTaskPriorityDisinherit+0xd8>)
 80099ae:	441a      	add	r2, r3
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	3304      	adds	r3, #4
 80099b4:	4619      	mov	r1, r3
 80099b6:	4610      	mov	r0, r2
 80099b8:	f7fe fb07 	bl	8007fca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099bc:	2301      	movs	r3, #1
 80099be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099c0:	697b      	ldr	r3, [r7, #20]
	}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3718      	adds	r7, #24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	2000111c 	.word	0x2000111c
 80099d0:	200015f8 	.word	0x200015f8
 80099d4:	20001120 	.word	0x20001120

080099d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099e2:	4b21      	ldr	r3, [pc, #132]	; (8009a68 <prvAddCurrentTaskToDelayedList+0x90>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099e8:	4b20      	ldr	r3, [pc, #128]	; (8009a6c <prvAddCurrentTaskToDelayedList+0x94>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3304      	adds	r3, #4
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe fb48 	bl	8008084 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fa:	d10a      	bne.n	8009a12 <prvAddCurrentTaskToDelayedList+0x3a>
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d007      	beq.n	8009a12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a02:	4b1a      	ldr	r3, [pc, #104]	; (8009a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3304      	adds	r3, #4
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4819      	ldr	r0, [pc, #100]	; (8009a70 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a0c:	f7fe fadd 	bl	8007fca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a10:	e026      	b.n	8009a60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4413      	add	r3, r2
 8009a18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a1a:	4b14      	ldr	r3, [pc, #80]	; (8009a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d209      	bcs.n	8009a3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a2a:	4b12      	ldr	r3, [pc, #72]	; (8009a74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	4b0f      	ldr	r3, [pc, #60]	; (8009a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3304      	adds	r3, #4
 8009a34:	4619      	mov	r1, r3
 8009a36:	4610      	mov	r0, r2
 8009a38:	f7fe faeb 	bl	8008012 <vListInsert>
}
 8009a3c:	e010      	b.n	8009a60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a3e:	4b0e      	ldr	r3, [pc, #56]	; (8009a78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	3304      	adds	r3, #4
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	f7fe fae1 	bl	8008012 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a50:	4b0a      	ldr	r3, [pc, #40]	; (8009a7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d202      	bcs.n	8009a60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a5a:	4a08      	ldr	r2, [pc, #32]	; (8009a7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	6013      	str	r3, [r2, #0]
}
 8009a60:	bf00      	nop
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	200015f4 	.word	0x200015f4
 8009a6c:	2000111c 	.word	0x2000111c
 8009a70:	200015dc 	.word	0x200015dc
 8009a74:	200015ac 	.word	0x200015ac
 8009a78:	200015a8 	.word	0x200015a8
 8009a7c:	20001610 	.word	0x20001610

08009a80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b08a      	sub	sp, #40	; 0x28
 8009a84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a86:	2300      	movs	r3, #0
 8009a88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a8a:	f000 fb07 	bl	800a09c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a8e:	4b1c      	ldr	r3, [pc, #112]	; (8009b00 <xTimerCreateTimerTask+0x80>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d021      	beq.n	8009ada <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a9e:	1d3a      	adds	r2, r7, #4
 8009aa0:	f107 0108 	add.w	r1, r7, #8
 8009aa4:	f107 030c 	add.w	r3, r7, #12
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fe fa47 	bl	8007f3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009aae:	6879      	ldr	r1, [r7, #4]
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	9202      	str	r2, [sp, #8]
 8009ab6:	9301      	str	r3, [sp, #4]
 8009ab8:	2302      	movs	r3, #2
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	2300      	movs	r3, #0
 8009abe:	460a      	mov	r2, r1
 8009ac0:	4910      	ldr	r1, [pc, #64]	; (8009b04 <xTimerCreateTimerTask+0x84>)
 8009ac2:	4811      	ldr	r0, [pc, #68]	; (8009b08 <xTimerCreateTimerTask+0x88>)
 8009ac4:	f7ff f82e 	bl	8008b24 <xTaskCreateStatic>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	4a10      	ldr	r2, [pc, #64]	; (8009b0c <xTimerCreateTimerTask+0x8c>)
 8009acc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ace:	4b0f      	ldr	r3, [pc, #60]	; (8009b0c <xTimerCreateTimerTask+0x8c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10a      	bne.n	8009af6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae4:	f383 8811 	msr	BASEPRI, r3
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	613b      	str	r3, [r7, #16]
}
 8009af2:	bf00      	nop
 8009af4:	e7fe      	b.n	8009af4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009af6:	697b      	ldr	r3, [r7, #20]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20001654 	.word	0x20001654
 8009b04:	0800e520 	.word	0x0800e520
 8009b08:	08009c45 	.word	0x08009c45
 8009b0c:	20001658 	.word	0x20001658

08009b10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08a      	sub	sp, #40	; 0x28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10a      	bne.n	8009b3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	623b      	str	r3, [r7, #32]
}
 8009b3a:	bf00      	nop
 8009b3c:	e7fe      	b.n	8009b3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b3e:	4b1a      	ldr	r3, [pc, #104]	; (8009ba8 <xTimerGenericCommand+0x98>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d02a      	beq.n	8009b9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	2b05      	cmp	r3, #5
 8009b56:	dc18      	bgt.n	8009b8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b58:	f7ff feb2 	bl	80098c0 <xTaskGetSchedulerState>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d109      	bne.n	8009b76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b62:	4b11      	ldr	r3, [pc, #68]	; (8009ba8 <xTimerGenericCommand+0x98>)
 8009b64:	6818      	ldr	r0, [r3, #0]
 8009b66:	f107 0110 	add.w	r1, r7, #16
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b6e:	f7fe fbf1 	bl	8008354 <xQueueGenericSend>
 8009b72:	6278      	str	r0, [r7, #36]	; 0x24
 8009b74:	e012      	b.n	8009b9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b76:	4b0c      	ldr	r3, [pc, #48]	; (8009ba8 <xTimerGenericCommand+0x98>)
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	f107 0110 	add.w	r1, r7, #16
 8009b7e:	2300      	movs	r3, #0
 8009b80:	2200      	movs	r2, #0
 8009b82:	f7fe fbe7 	bl	8008354 <xQueueGenericSend>
 8009b86:	6278      	str	r0, [r7, #36]	; 0x24
 8009b88:	e008      	b.n	8009b9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b8a:	4b07      	ldr	r3, [pc, #28]	; (8009ba8 <xTimerGenericCommand+0x98>)
 8009b8c:	6818      	ldr	r0, [r3, #0]
 8009b8e:	f107 0110 	add.w	r1, r7, #16
 8009b92:	2300      	movs	r3, #0
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	f7fe fcdb 	bl	8008550 <xQueueGenericSendFromISR>
 8009b9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3728      	adds	r7, #40	; 0x28
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20001654 	.word	0x20001654

08009bac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b088      	sub	sp, #32
 8009bb0:	af02      	add	r7, sp, #8
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bb6:	4b22      	ldr	r3, [pc, #136]	; (8009c40 <prvProcessExpiredTimer+0x94>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	3304      	adds	r3, #4
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fe fa5d 	bl	8008084 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bd0:	f003 0304 	and.w	r3, r3, #4
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d022      	beq.n	8009c1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	699a      	ldr	r2, [r3, #24]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	18d1      	adds	r1, r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	6978      	ldr	r0, [r7, #20]
 8009be6:	f000 f8d1 	bl	8009d8c <prvInsertTimerInActiveList>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d01f      	beq.n	8009c30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	6978      	ldr	r0, [r7, #20]
 8009bfc:	f7ff ff88 	bl	8009b10 <xTimerGenericCommand>
 8009c00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d113      	bne.n	8009c30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0c:	f383 8811 	msr	BASEPRI, r3
 8009c10:	f3bf 8f6f 	isb	sy
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	60fb      	str	r3, [r7, #12]
}
 8009c1a:	bf00      	nop
 8009c1c:	e7fe      	b.n	8009c1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c24:	f023 0301 	bic.w	r3, r3, #1
 8009c28:	b2da      	uxtb	r2, r3
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	6a1b      	ldr	r3, [r3, #32]
 8009c34:	6978      	ldr	r0, [r7, #20]
 8009c36:	4798      	blx	r3
}
 8009c38:	bf00      	nop
 8009c3a:	3718      	adds	r7, #24
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	2000164c 	.word	0x2000164c

08009c44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c4c:	f107 0308 	add.w	r3, r7, #8
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 f857 	bl	8009d04 <prvGetNextExpireTime>
 8009c56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f000 f803 	bl	8009c68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c62:	f000 f8d5 	bl	8009e10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c66:	e7f1      	b.n	8009c4c <prvTimerTask+0x8>

08009c68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c72:	f7ff f9bb 	bl	8008fec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c76:	f107 0308 	add.w	r3, r7, #8
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f866 	bl	8009d4c <prvSampleTimeNow>
 8009c80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d130      	bne.n	8009cea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10a      	bne.n	8009ca4 <prvProcessTimerOrBlockTask+0x3c>
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d806      	bhi.n	8009ca4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c96:	f7ff f9ef 	bl	8009078 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c9a:	68f9      	ldr	r1, [r7, #12]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff ff85 	bl	8009bac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ca2:	e024      	b.n	8009cee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d008      	beq.n	8009cbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009caa:	4b13      	ldr	r3, [pc, #76]	; (8009cf8 <prvProcessTimerOrBlockTask+0x90>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <prvProcessTimerOrBlockTask+0x50>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e000      	b.n	8009cba <prvProcessTimerOrBlockTask+0x52>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009cbc:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <prvProcessTimerOrBlockTask+0x94>)
 8009cbe:	6818      	ldr	r0, [r3, #0]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	f7fe fef7 	bl	8008abc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009cce:	f7ff f9d3 	bl	8009078 <xTaskResumeAll>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10a      	bne.n	8009cee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009cd8:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <prvProcessTimerOrBlockTask+0x98>)
 8009cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cde:	601a      	str	r2, [r3, #0]
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	f3bf 8f6f 	isb	sy
}
 8009ce8:	e001      	b.n	8009cee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009cea:	f7ff f9c5 	bl	8009078 <xTaskResumeAll>
}
 8009cee:	bf00      	nop
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20001650 	.word	0x20001650
 8009cfc:	20001654 	.word	0x20001654
 8009d00:	e000ed04 	.word	0xe000ed04

08009d04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d0c:	4b0e      	ldr	r3, [pc, #56]	; (8009d48 <prvGetNextExpireTime+0x44>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d101      	bne.n	8009d1a <prvGetNextExpireTime+0x16>
 8009d16:	2201      	movs	r2, #1
 8009d18:	e000      	b.n	8009d1c <prvGetNextExpireTime+0x18>
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d105      	bne.n	8009d34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d28:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <prvGetNextExpireTime+0x44>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	60fb      	str	r3, [r7, #12]
 8009d32:	e001      	b.n	8009d38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d38:	68fb      	ldr	r3, [r7, #12]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	2000164c 	.word	0x2000164c

08009d4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d54:	f7ff fa2e 	bl	80091b4 <xTaskGetTickCount>
 8009d58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d5a:	4b0b      	ldr	r3, [pc, #44]	; (8009d88 <prvSampleTimeNow+0x3c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d205      	bcs.n	8009d70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d64:	f000 f936 	bl	8009fd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	e002      	b.n	8009d76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d76:	4a04      	ldr	r2, [pc, #16]	; (8009d88 <prvSampleTimeNow+0x3c>)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	2000165c 	.word	0x2000165c

08009d8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
 8009d98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d812      	bhi.n	8009dd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	1ad2      	subs	r2, r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d302      	bcc.n	8009dc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	617b      	str	r3, [r7, #20]
 8009dc4:	e01b      	b.n	8009dfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009dc6:	4b10      	ldr	r3, [pc, #64]	; (8009e08 <prvInsertTimerInActiveList+0x7c>)
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	3304      	adds	r3, #4
 8009dce:	4619      	mov	r1, r3
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	f7fe f91e 	bl	8008012 <vListInsert>
 8009dd6:	e012      	b.n	8009dfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d206      	bcs.n	8009dee <prvInsertTimerInActiveList+0x62>
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d302      	bcc.n	8009dee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009de8:	2301      	movs	r3, #1
 8009dea:	617b      	str	r3, [r7, #20]
 8009dec:	e007      	b.n	8009dfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dee:	4b07      	ldr	r3, [pc, #28]	; (8009e0c <prvInsertTimerInActiveList+0x80>)
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	3304      	adds	r3, #4
 8009df6:	4619      	mov	r1, r3
 8009df8:	4610      	mov	r0, r2
 8009dfa:	f7fe f90a 	bl	8008012 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009dfe:	697b      	ldr	r3, [r7, #20]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	20001650 	.word	0x20001650
 8009e0c:	2000164c 	.word	0x2000164c

08009e10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b08e      	sub	sp, #56	; 0x38
 8009e14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e16:	e0ca      	b.n	8009fae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	da18      	bge.n	8009e50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e1e:	1d3b      	adds	r3, r7, #4
 8009e20:	3304      	adds	r3, #4
 8009e22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10a      	bne.n	8009e40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	61fb      	str	r3, [r7, #28]
}
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e46:	6850      	ldr	r0, [r2, #4]
 8009e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e4a:	6892      	ldr	r2, [r2, #8]
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f2c0 80ab 	blt.w	8009fae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d004      	beq.n	8009e6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e66:	3304      	adds	r3, #4
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe f90b 	bl	8008084 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e6e:	463b      	mov	r3, r7
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7ff ff6b 	bl	8009d4c <prvSampleTimeNow>
 8009e76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b09      	cmp	r3, #9
 8009e7c:	f200 8096 	bhi.w	8009fac <prvProcessReceivedCommands+0x19c>
 8009e80:	a201      	add	r2, pc, #4	; (adr r2, 8009e88 <prvProcessReceivedCommands+0x78>)
 8009e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e86:	bf00      	nop
 8009e88:	08009eb1 	.word	0x08009eb1
 8009e8c:	08009eb1 	.word	0x08009eb1
 8009e90:	08009eb1 	.word	0x08009eb1
 8009e94:	08009f25 	.word	0x08009f25
 8009e98:	08009f39 	.word	0x08009f39
 8009e9c:	08009f83 	.word	0x08009f83
 8009ea0:	08009eb1 	.word	0x08009eb1
 8009ea4:	08009eb1 	.word	0x08009eb1
 8009ea8:	08009f25 	.word	0x08009f25
 8009eac:	08009f39 	.word	0x08009f39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eb6:	f043 0301 	orr.w	r3, r3, #1
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec6:	699b      	ldr	r3, [r3, #24]
 8009ec8:	18d1      	adds	r1, r2, r3
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ed0:	f7ff ff5c 	bl	8009d8c <prvInsertTimerInActiveList>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d069      	beq.n	8009fae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ee0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ee8:	f003 0304 	and.w	r3, r3, #4
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d05e      	beq.n	8009fae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	441a      	add	r2, r3
 8009ef8:	2300      	movs	r3, #0
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	2300      	movs	r3, #0
 8009efe:	2100      	movs	r1, #0
 8009f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f02:	f7ff fe05 	bl	8009b10 <xTimerGenericCommand>
 8009f06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d14f      	bne.n	8009fae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	61bb      	str	r3, [r7, #24]
}
 8009f20:	bf00      	nop
 8009f22:	e7fe      	b.n	8009f22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f2a:	f023 0301 	bic.w	r3, r3, #1
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009f36:	e03a      	b.n	8009fae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f3e:	f043 0301 	orr.w	r3, r3, #1
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10a      	bne.n	8009f6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	617b      	str	r3, [r7, #20]
}
 8009f6a:	bf00      	nop
 8009f6c:	e7fe      	b.n	8009f6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f70:	699a      	ldr	r2, [r3, #24]
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	18d1      	adds	r1, r2, r3
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f7c:	f7ff ff06 	bl	8009d8c <prvInsertTimerInActiveList>
					break;
 8009f80:	e015      	b.n	8009fae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f88:	f003 0302 	and.w	r3, r3, #2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d103      	bne.n	8009f98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f92:	f000 fbdd 	bl	800a750 <vPortFree>
 8009f96:	e00a      	b.n	8009fae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f9e:	f023 0301 	bic.w	r3, r3, #1
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009faa:	e000      	b.n	8009fae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009fac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fae:	4b08      	ldr	r3, [pc, #32]	; (8009fd0 <prvProcessReceivedCommands+0x1c0>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	1d39      	adds	r1, r7, #4
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fe fb66 	bl	8008688 <xQueueReceive>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f47f af2a 	bne.w	8009e18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009fc4:	bf00      	nop
 8009fc6:	bf00      	nop
 8009fc8:	3730      	adds	r7, #48	; 0x30
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	20001654 	.word	0x20001654

08009fd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b088      	sub	sp, #32
 8009fd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fda:	e048      	b.n	800a06e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fdc:	4b2d      	ldr	r3, [pc, #180]	; (800a094 <prvSwitchTimerLists+0xc0>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fe6:	4b2b      	ldr	r3, [pc, #172]	; (800a094 <prvSwitchTimerLists+0xc0>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fe f845 	bl	8008084 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a008:	f003 0304 	and.w	r3, r3, #4
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d02e      	beq.n	800a06e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	4413      	add	r3, r2
 800a018:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d90e      	bls.n	800a040 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a02e:	4b19      	ldr	r3, [pc, #100]	; (800a094 <prvSwitchTimerLists+0xc0>)
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3304      	adds	r3, #4
 800a036:	4619      	mov	r1, r3
 800a038:	4610      	mov	r0, r2
 800a03a:	f7fd ffea 	bl	8008012 <vListInsert>
 800a03e:	e016      	b.n	800a06e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a040:	2300      	movs	r3, #0
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	2300      	movs	r3, #0
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	2100      	movs	r1, #0
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f7ff fd60 	bl	8009b10 <xTimerGenericCommand>
 800a050:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10a      	bne.n	800a06e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	603b      	str	r3, [r7, #0]
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a06e:	4b09      	ldr	r3, [pc, #36]	; (800a094 <prvSwitchTimerLists+0xc0>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d1b1      	bne.n	8009fdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a078:	4b06      	ldr	r3, [pc, #24]	; (800a094 <prvSwitchTimerLists+0xc0>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a07e:	4b06      	ldr	r3, [pc, #24]	; (800a098 <prvSwitchTimerLists+0xc4>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a04      	ldr	r2, [pc, #16]	; (800a094 <prvSwitchTimerLists+0xc0>)
 800a084:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a086:	4a04      	ldr	r2, [pc, #16]	; (800a098 <prvSwitchTimerLists+0xc4>)
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	6013      	str	r3, [r2, #0]
}
 800a08c:	bf00      	nop
 800a08e:	3718      	adds	r7, #24
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	2000164c 	.word	0x2000164c
 800a098:	20001650 	.word	0x20001650

0800a09c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a0a2:	f000 f967 	bl	800a374 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a0a6:	4b15      	ldr	r3, [pc, #84]	; (800a0fc <prvCheckForValidListAndQueue+0x60>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d120      	bne.n	800a0f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a0ae:	4814      	ldr	r0, [pc, #80]	; (800a100 <prvCheckForValidListAndQueue+0x64>)
 800a0b0:	f7fd ff5e 	bl	8007f70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a0b4:	4813      	ldr	r0, [pc, #76]	; (800a104 <prvCheckForValidListAndQueue+0x68>)
 800a0b6:	f7fd ff5b 	bl	8007f70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a0ba:	4b13      	ldr	r3, [pc, #76]	; (800a108 <prvCheckForValidListAndQueue+0x6c>)
 800a0bc:	4a10      	ldr	r2, [pc, #64]	; (800a100 <prvCheckForValidListAndQueue+0x64>)
 800a0be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a0c0:	4b12      	ldr	r3, [pc, #72]	; (800a10c <prvCheckForValidListAndQueue+0x70>)
 800a0c2:	4a10      	ldr	r2, [pc, #64]	; (800a104 <prvCheckForValidListAndQueue+0x68>)
 800a0c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	4b11      	ldr	r3, [pc, #68]	; (800a110 <prvCheckForValidListAndQueue+0x74>)
 800a0cc:	4a11      	ldr	r2, [pc, #68]	; (800a114 <prvCheckForValidListAndQueue+0x78>)
 800a0ce:	2110      	movs	r1, #16
 800a0d0:	200a      	movs	r0, #10
 800a0d2:	f7fe f869 	bl	80081a8 <xQueueGenericCreateStatic>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	4a08      	ldr	r2, [pc, #32]	; (800a0fc <prvCheckForValidListAndQueue+0x60>)
 800a0da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a0dc:	4b07      	ldr	r3, [pc, #28]	; (800a0fc <prvCheckForValidListAndQueue+0x60>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d005      	beq.n	800a0f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0e4:	4b05      	ldr	r3, [pc, #20]	; (800a0fc <prvCheckForValidListAndQueue+0x60>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	490b      	ldr	r1, [pc, #44]	; (800a118 <prvCheckForValidListAndQueue+0x7c>)
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fe fcbc 	bl	8008a68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0f0:	f000 f970 	bl	800a3d4 <vPortExitCritical>
}
 800a0f4:	bf00      	nop
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	20001654 	.word	0x20001654
 800a100:	20001624 	.word	0x20001624
 800a104:	20001638 	.word	0x20001638
 800a108:	2000164c 	.word	0x2000164c
 800a10c:	20001650 	.word	0x20001650
 800a110:	20001700 	.word	0x20001700
 800a114:	20001660 	.word	0x20001660
 800a118:	0800e528 	.word	0x0800e528

0800a11c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3b04      	subs	r3, #4
 800a12c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	3b04      	subs	r3, #4
 800a13a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f023 0201 	bic.w	r2, r3, #1
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	3b04      	subs	r3, #4
 800a14a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a14c:	4a0c      	ldr	r2, [pc, #48]	; (800a180 <pxPortInitialiseStack+0x64>)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	3b14      	subs	r3, #20
 800a156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	3b04      	subs	r3, #4
 800a162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f06f 0202 	mvn.w	r2, #2
 800a16a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	3b20      	subs	r3, #32
 800a170:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a172:	68fb      	ldr	r3, [r7, #12]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3714      	adds	r7, #20
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	0800a185 	.word	0x0800a185

0800a184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a18a:	2300      	movs	r3, #0
 800a18c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a18e:	4b12      	ldr	r3, [pc, #72]	; (800a1d8 <prvTaskExitError+0x54>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a196:	d00a      	beq.n	800a1ae <prvTaskExitError+0x2a>
	__asm volatile
 800a198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	60fb      	str	r3, [r7, #12]
}
 800a1aa:	bf00      	nop
 800a1ac:	e7fe      	b.n	800a1ac <prvTaskExitError+0x28>
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	60bb      	str	r3, [r7, #8]
}
 800a1c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a1c2:	bf00      	nop
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d0fc      	beq.n	800a1c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a1ca:	bf00      	nop
 800a1cc:	bf00      	nop
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr
 800a1d8:	20000020 	.word	0x20000020
 800a1dc:	00000000 	.word	0x00000000

0800a1e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a1e0:	4b07      	ldr	r3, [pc, #28]	; (800a200 <pxCurrentTCBConst2>)
 800a1e2:	6819      	ldr	r1, [r3, #0]
 800a1e4:	6808      	ldr	r0, [r1, #0]
 800a1e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ea:	f380 8809 	msr	PSP, r0
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f04f 0000 	mov.w	r0, #0
 800a1f6:	f380 8811 	msr	BASEPRI, r0
 800a1fa:	4770      	bx	lr
 800a1fc:	f3af 8000 	nop.w

0800a200 <pxCurrentTCBConst2>:
 800a200:	2000111c 	.word	0x2000111c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a204:	bf00      	nop
 800a206:	bf00      	nop

0800a208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a208:	4808      	ldr	r0, [pc, #32]	; (800a22c <prvPortStartFirstTask+0x24>)
 800a20a:	6800      	ldr	r0, [r0, #0]
 800a20c:	6800      	ldr	r0, [r0, #0]
 800a20e:	f380 8808 	msr	MSP, r0
 800a212:	f04f 0000 	mov.w	r0, #0
 800a216:	f380 8814 	msr	CONTROL, r0
 800a21a:	b662      	cpsie	i
 800a21c:	b661      	cpsie	f
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	df00      	svc	0
 800a228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a22a:	bf00      	nop
 800a22c:	e000ed08 	.word	0xe000ed08

0800a230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a236:	4b46      	ldr	r3, [pc, #280]	; (800a350 <xPortStartScheduler+0x120>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a46      	ldr	r2, [pc, #280]	; (800a354 <xPortStartScheduler+0x124>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d10a      	bne.n	800a256 <xPortStartScheduler+0x26>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	613b      	str	r3, [r7, #16]
}
 800a252:	bf00      	nop
 800a254:	e7fe      	b.n	800a254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a256:	4b3e      	ldr	r3, [pc, #248]	; (800a350 <xPortStartScheduler+0x120>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a3f      	ldr	r2, [pc, #252]	; (800a358 <xPortStartScheduler+0x128>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d10a      	bne.n	800a276 <xPortStartScheduler+0x46>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	60fb      	str	r3, [r7, #12]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a276:	4b39      	ldr	r3, [pc, #228]	; (800a35c <xPortStartScheduler+0x12c>)
 800a278:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	22ff      	movs	r2, #255	; 0xff
 800a286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a290:	78fb      	ldrb	r3, [r7, #3]
 800a292:	b2db      	uxtb	r3, r3
 800a294:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a298:	b2da      	uxtb	r2, r3
 800a29a:	4b31      	ldr	r3, [pc, #196]	; (800a360 <xPortStartScheduler+0x130>)
 800a29c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a29e:	4b31      	ldr	r3, [pc, #196]	; (800a364 <xPortStartScheduler+0x134>)
 800a2a0:	2207      	movs	r2, #7
 800a2a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2a4:	e009      	b.n	800a2ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a2a6:	4b2f      	ldr	r3, [pc, #188]	; (800a364 <xPortStartScheduler+0x134>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	4a2d      	ldr	r2, [pc, #180]	; (800a364 <xPortStartScheduler+0x134>)
 800a2ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a2b0:	78fb      	ldrb	r3, [r7, #3]
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2ba:	78fb      	ldrb	r3, [r7, #3]
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c2:	2b80      	cmp	r3, #128	; 0x80
 800a2c4:	d0ef      	beq.n	800a2a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a2c6:	4b27      	ldr	r3, [pc, #156]	; (800a364 <xPortStartScheduler+0x134>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f1c3 0307 	rsb	r3, r3, #7
 800a2ce:	2b04      	cmp	r3, #4
 800a2d0:	d00a      	beq.n	800a2e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	60bb      	str	r3, [r7, #8]
}
 800a2e4:	bf00      	nop
 800a2e6:	e7fe      	b.n	800a2e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a2e8:	4b1e      	ldr	r3, [pc, #120]	; (800a364 <xPortStartScheduler+0x134>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	021b      	lsls	r3, r3, #8
 800a2ee:	4a1d      	ldr	r2, [pc, #116]	; (800a364 <xPortStartScheduler+0x134>)
 800a2f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a2f2:	4b1c      	ldr	r3, [pc, #112]	; (800a364 <xPortStartScheduler+0x134>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2fa:	4a1a      	ldr	r2, [pc, #104]	; (800a364 <xPortStartScheduler+0x134>)
 800a2fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	b2da      	uxtb	r2, r3
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a306:	4b18      	ldr	r3, [pc, #96]	; (800a368 <xPortStartScheduler+0x138>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a17      	ldr	r2, [pc, #92]	; (800a368 <xPortStartScheduler+0x138>)
 800a30c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a312:	4b15      	ldr	r3, [pc, #84]	; (800a368 <xPortStartScheduler+0x138>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a14      	ldr	r2, [pc, #80]	; (800a368 <xPortStartScheduler+0x138>)
 800a318:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a31c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a31e:	f000 f8dd 	bl	800a4dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a322:	4b12      	ldr	r3, [pc, #72]	; (800a36c <xPortStartScheduler+0x13c>)
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a328:	f000 f8fc 	bl	800a524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a32c:	4b10      	ldr	r3, [pc, #64]	; (800a370 <xPortStartScheduler+0x140>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a0f      	ldr	r2, [pc, #60]	; (800a370 <xPortStartScheduler+0x140>)
 800a332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a336:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a338:	f7ff ff66 	bl	800a208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a33c:	f7ff f804 	bl	8009348 <vTaskSwitchContext>
	prvTaskExitError();
 800a340:	f7ff ff20 	bl	800a184 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	e000ed00 	.word	0xe000ed00
 800a354:	410fc271 	.word	0x410fc271
 800a358:	410fc270 	.word	0x410fc270
 800a35c:	e000e400 	.word	0xe000e400
 800a360:	20001750 	.word	0x20001750
 800a364:	20001754 	.word	0x20001754
 800a368:	e000ed20 	.word	0xe000ed20
 800a36c:	20000020 	.word	0x20000020
 800a370:	e000ef34 	.word	0xe000ef34

0800a374 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	607b      	str	r3, [r7, #4]
}
 800a38c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a38e:	4b0f      	ldr	r3, [pc, #60]	; (800a3cc <vPortEnterCritical+0x58>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3301      	adds	r3, #1
 800a394:	4a0d      	ldr	r2, [pc, #52]	; (800a3cc <vPortEnterCritical+0x58>)
 800a396:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a398:	4b0c      	ldr	r3, [pc, #48]	; (800a3cc <vPortEnterCritical+0x58>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d10f      	bne.n	800a3c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a3a0:	4b0b      	ldr	r3, [pc, #44]	; (800a3d0 <vPortEnterCritical+0x5c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00a      	beq.n	800a3c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ae:	f383 8811 	msr	BASEPRI, r3
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	603b      	str	r3, [r7, #0]
}
 800a3bc:	bf00      	nop
 800a3be:	e7fe      	b.n	800a3be <vPortEnterCritical+0x4a>
	}
}
 800a3c0:	bf00      	nop
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	20000020 	.word	0x20000020
 800a3d0:	e000ed04 	.word	0xe000ed04

0800a3d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a3da:	4b12      	ldr	r3, [pc, #72]	; (800a424 <vPortExitCritical+0x50>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d10a      	bne.n	800a3f8 <vPortExitCritical+0x24>
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	607b      	str	r3, [r7, #4]
}
 800a3f4:	bf00      	nop
 800a3f6:	e7fe      	b.n	800a3f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a3f8:	4b0a      	ldr	r3, [pc, #40]	; (800a424 <vPortExitCritical+0x50>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	4a09      	ldr	r2, [pc, #36]	; (800a424 <vPortExitCritical+0x50>)
 800a400:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a402:	4b08      	ldr	r3, [pc, #32]	; (800a424 <vPortExitCritical+0x50>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d105      	bne.n	800a416 <vPortExitCritical+0x42>
 800a40a:	2300      	movs	r3, #0
 800a40c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	f383 8811 	msr	BASEPRI, r3
}
 800a414:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a416:	bf00      	nop
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	20000020 	.word	0x20000020
	...

0800a430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a430:	f3ef 8009 	mrs	r0, PSP
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	4b15      	ldr	r3, [pc, #84]	; (800a490 <pxCurrentTCBConst>)
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	f01e 0f10 	tst.w	lr, #16
 800a440:	bf08      	it	eq
 800a442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44a:	6010      	str	r0, [r2, #0]
 800a44c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a450:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a454:	f380 8811 	msr	BASEPRI, r0
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f7fe ff72 	bl	8009348 <vTaskSwitchContext>
 800a464:	f04f 0000 	mov.w	r0, #0
 800a468:	f380 8811 	msr	BASEPRI, r0
 800a46c:	bc09      	pop	{r0, r3}
 800a46e:	6819      	ldr	r1, [r3, #0]
 800a470:	6808      	ldr	r0, [r1, #0]
 800a472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a476:	f01e 0f10 	tst.w	lr, #16
 800a47a:	bf08      	it	eq
 800a47c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a480:	f380 8809 	msr	PSP, r0
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	f3af 8000 	nop.w

0800a490 <pxCurrentTCBConst>:
 800a490:	2000111c 	.word	0x2000111c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a494:	bf00      	nop
 800a496:	bf00      	nop

0800a498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	607b      	str	r3, [r7, #4]
}
 800a4b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4b2:	f7fe fe8f 	bl	80091d4 <xTaskIncrementTick>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d003      	beq.n	800a4c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4bc:	4b06      	ldr	r3, [pc, #24]	; (800a4d8 <xPortSysTickHandler+0x40>)
 800a4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	f383 8811 	msr	BASEPRI, r3
}
 800a4ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a4d0:	bf00      	nop
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	e000ed04 	.word	0xe000ed04

0800a4dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a4dc:	b480      	push	{r7}
 800a4de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a4e0:	4b0b      	ldr	r3, [pc, #44]	; (800a510 <vPortSetupTimerInterrupt+0x34>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a4e6:	4b0b      	ldr	r3, [pc, #44]	; (800a514 <vPortSetupTimerInterrupt+0x38>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4ec:	4b0a      	ldr	r3, [pc, #40]	; (800a518 <vPortSetupTimerInterrupt+0x3c>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a0a      	ldr	r2, [pc, #40]	; (800a51c <vPortSetupTimerInterrupt+0x40>)
 800a4f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f6:	099b      	lsrs	r3, r3, #6
 800a4f8:	4a09      	ldr	r2, [pc, #36]	; (800a520 <vPortSetupTimerInterrupt+0x44>)
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4fe:	4b04      	ldr	r3, [pc, #16]	; (800a510 <vPortSetupTimerInterrupt+0x34>)
 800a500:	2207      	movs	r2, #7
 800a502:	601a      	str	r2, [r3, #0]
}
 800a504:	bf00      	nop
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	e000e010 	.word	0xe000e010
 800a514:	e000e018 	.word	0xe000e018
 800a518:	20000000 	.word	0x20000000
 800a51c:	10624dd3 	.word	0x10624dd3
 800a520:	e000e014 	.word	0xe000e014

0800a524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a534 <vPortEnableVFP+0x10>
 800a528:	6801      	ldr	r1, [r0, #0]
 800a52a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a52e:	6001      	str	r1, [r0, #0]
 800a530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a532:	bf00      	nop
 800a534:	e000ed88 	.word	0xe000ed88

0800a538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a53e:	f3ef 8305 	mrs	r3, IPSR
 800a542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2b0f      	cmp	r3, #15
 800a548:	d914      	bls.n	800a574 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a54a:	4a17      	ldr	r2, [pc, #92]	; (800a5a8 <vPortValidateInterruptPriority+0x70>)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	4413      	add	r3, r2
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a554:	4b15      	ldr	r3, [pc, #84]	; (800a5ac <vPortValidateInterruptPriority+0x74>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	7afa      	ldrb	r2, [r7, #11]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d20a      	bcs.n	800a574 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	607b      	str	r3, [r7, #4]
}
 800a570:	bf00      	nop
 800a572:	e7fe      	b.n	800a572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a574:	4b0e      	ldr	r3, [pc, #56]	; (800a5b0 <vPortValidateInterruptPriority+0x78>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a57c:	4b0d      	ldr	r3, [pc, #52]	; (800a5b4 <vPortValidateInterruptPriority+0x7c>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	429a      	cmp	r2, r3
 800a582:	d90a      	bls.n	800a59a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	603b      	str	r3, [r7, #0]
}
 800a596:	bf00      	nop
 800a598:	e7fe      	b.n	800a598 <vPortValidateInterruptPriority+0x60>
	}
 800a59a:	bf00      	nop
 800a59c:	3714      	adds	r7, #20
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	e000e3f0 	.word	0xe000e3f0
 800a5ac:	20001750 	.word	0x20001750
 800a5b0:	e000ed0c 	.word	0xe000ed0c
 800a5b4:	20001754 	.word	0x20001754

0800a5b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08a      	sub	sp, #40	; 0x28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a5c4:	f7fe fd12 	bl	8008fec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5c8:	4b5b      	ldr	r3, [pc, #364]	; (800a738 <pvPortMalloc+0x180>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5d0:	f000 f920 	bl	800a814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5d4:	4b59      	ldr	r3, [pc, #356]	; (800a73c <pvPortMalloc+0x184>)
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4013      	ands	r3, r2
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f040 8093 	bne.w	800a708 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d01d      	beq.n	800a624 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a5e8:	2208      	movs	r2, #8
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f003 0307 	and.w	r3, r3, #7
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d014      	beq.n	800a624 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f023 0307 	bic.w	r3, r3, #7
 800a600:	3308      	adds	r3, #8
 800a602:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f003 0307 	and.w	r3, r3, #7
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00a      	beq.n	800a624 <pvPortMalloc+0x6c>
	__asm volatile
 800a60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a612:	f383 8811 	msr	BASEPRI, r3
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	617b      	str	r3, [r7, #20]
}
 800a620:	bf00      	nop
 800a622:	e7fe      	b.n	800a622 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d06e      	beq.n	800a708 <pvPortMalloc+0x150>
 800a62a:	4b45      	ldr	r3, [pc, #276]	; (800a740 <pvPortMalloc+0x188>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	429a      	cmp	r2, r3
 800a632:	d869      	bhi.n	800a708 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a634:	4b43      	ldr	r3, [pc, #268]	; (800a744 <pvPortMalloc+0x18c>)
 800a636:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a638:	4b42      	ldr	r3, [pc, #264]	; (800a744 <pvPortMalloc+0x18c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a63e:	e004      	b.n	800a64a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	429a      	cmp	r2, r3
 800a652:	d903      	bls.n	800a65c <pvPortMalloc+0xa4>
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1f1      	bne.n	800a640 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a65c:	4b36      	ldr	r3, [pc, #216]	; (800a738 <pvPortMalloc+0x180>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a662:	429a      	cmp	r2, r3
 800a664:	d050      	beq.n	800a708 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2208      	movs	r2, #8
 800a66c:	4413      	add	r3, r2
 800a66e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	6a3b      	ldr	r3, [r7, #32]
 800a676:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	1ad2      	subs	r2, r2, r3
 800a680:	2308      	movs	r3, #8
 800a682:	005b      	lsls	r3, r3, #1
 800a684:	429a      	cmp	r2, r3
 800a686:	d91f      	bls.n	800a6c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4413      	add	r3, r2
 800a68e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	f003 0307 	and.w	r3, r3, #7
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00a      	beq.n	800a6b0 <pvPortMalloc+0xf8>
	__asm volatile
 800a69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	613b      	str	r3, [r7, #16]
}
 800a6ac:	bf00      	nop
 800a6ae:	e7fe      	b.n	800a6ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b2:	685a      	ldr	r2, [r3, #4]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	1ad2      	subs	r2, r2, r3
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6c2:	69b8      	ldr	r0, [r7, #24]
 800a6c4:	f000 f908 	bl	800a8d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6c8:	4b1d      	ldr	r3, [pc, #116]	; (800a740 <pvPortMalloc+0x188>)
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	4a1b      	ldr	r2, [pc, #108]	; (800a740 <pvPortMalloc+0x188>)
 800a6d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6d6:	4b1a      	ldr	r3, [pc, #104]	; (800a740 <pvPortMalloc+0x188>)
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	4b1b      	ldr	r3, [pc, #108]	; (800a748 <pvPortMalloc+0x190>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d203      	bcs.n	800a6ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6e2:	4b17      	ldr	r3, [pc, #92]	; (800a740 <pvPortMalloc+0x188>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a18      	ldr	r2, [pc, #96]	; (800a748 <pvPortMalloc+0x190>)
 800a6e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	685a      	ldr	r2, [r3, #4]
 800a6ee:	4b13      	ldr	r3, [pc, #76]	; (800a73c <pvPortMalloc+0x184>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	431a      	orrs	r2, r3
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6fe:	4b13      	ldr	r3, [pc, #76]	; (800a74c <pvPortMalloc+0x194>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3301      	adds	r3, #1
 800a704:	4a11      	ldr	r2, [pc, #68]	; (800a74c <pvPortMalloc+0x194>)
 800a706:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a708:	f7fe fcb6 	bl	8009078 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	f003 0307 	and.w	r3, r3, #7
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00a      	beq.n	800a72c <pvPortMalloc+0x174>
	__asm volatile
 800a716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	60fb      	str	r3, [r7, #12]
}
 800a728:	bf00      	nop
 800a72a:	e7fe      	b.n	800a72a <pvPortMalloc+0x172>
	return pvReturn;
 800a72c:	69fb      	ldr	r3, [r7, #28]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3728      	adds	r7, #40	; 0x28
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	20005360 	.word	0x20005360
 800a73c:	20005374 	.word	0x20005374
 800a740:	20005364 	.word	0x20005364
 800a744:	20005358 	.word	0x20005358
 800a748:	20005368 	.word	0x20005368
 800a74c:	2000536c 	.word	0x2000536c

0800a750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d04d      	beq.n	800a7fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a762:	2308      	movs	r3, #8
 800a764:	425b      	negs	r3, r3
 800a766:	697a      	ldr	r2, [r7, #20]
 800a768:	4413      	add	r3, r2
 800a76a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	4b24      	ldr	r3, [pc, #144]	; (800a808 <vPortFree+0xb8>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4013      	ands	r3, r2
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10a      	bne.n	800a794 <vPortFree+0x44>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	60fb      	str	r3, [r7, #12]
}
 800a790:	bf00      	nop
 800a792:	e7fe      	b.n	800a792 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00a      	beq.n	800a7b2 <vPortFree+0x62>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	60bb      	str	r3, [r7, #8]
}
 800a7ae:	bf00      	nop
 800a7b0:	e7fe      	b.n	800a7b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	685a      	ldr	r2, [r3, #4]
 800a7b6:	4b14      	ldr	r3, [pc, #80]	; (800a808 <vPortFree+0xb8>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d01e      	beq.n	800a7fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d11a      	bne.n	800a7fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	4b0e      	ldr	r3, [pc, #56]	; (800a808 <vPortFree+0xb8>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	43db      	mvns	r3, r3
 800a7d2:	401a      	ands	r2, r3
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7d8:	f7fe fc08 	bl	8008fec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	4b0a      	ldr	r3, [pc, #40]	; (800a80c <vPortFree+0xbc>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	4a09      	ldr	r2, [pc, #36]	; (800a80c <vPortFree+0xbc>)
 800a7e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7ea:	6938      	ldr	r0, [r7, #16]
 800a7ec:	f000 f874 	bl	800a8d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7f0:	4b07      	ldr	r3, [pc, #28]	; (800a810 <vPortFree+0xc0>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	4a06      	ldr	r2, [pc, #24]	; (800a810 <vPortFree+0xc0>)
 800a7f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7fa:	f7fe fc3d 	bl	8009078 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7fe:	bf00      	nop
 800a800:	3718      	adds	r7, #24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	20005374 	.word	0x20005374
 800a80c:	20005364 	.word	0x20005364
 800a810:	20005370 	.word	0x20005370

0800a814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a81a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a81e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a820:	4b27      	ldr	r3, [pc, #156]	; (800a8c0 <prvHeapInit+0xac>)
 800a822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00c      	beq.n	800a848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3307      	adds	r3, #7
 800a832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f023 0307 	bic.w	r3, r3, #7
 800a83a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	4a1f      	ldr	r2, [pc, #124]	; (800a8c0 <prvHeapInit+0xac>)
 800a844:	4413      	add	r3, r2
 800a846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a84c:	4a1d      	ldr	r2, [pc, #116]	; (800a8c4 <prvHeapInit+0xb0>)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a852:	4b1c      	ldr	r3, [pc, #112]	; (800a8c4 <prvHeapInit+0xb0>)
 800a854:	2200      	movs	r2, #0
 800a856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	4413      	add	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a860:	2208      	movs	r2, #8
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	1a9b      	subs	r3, r3, r2
 800a866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f023 0307 	bic.w	r3, r3, #7
 800a86e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4a15      	ldr	r2, [pc, #84]	; (800a8c8 <prvHeapInit+0xb4>)
 800a874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a876:	4b14      	ldr	r3, [pc, #80]	; (800a8c8 <prvHeapInit+0xb4>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2200      	movs	r2, #0
 800a87c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a87e:	4b12      	ldr	r3, [pc, #72]	; (800a8c8 <prvHeapInit+0xb4>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	1ad2      	subs	r2, r2, r3
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a894:	4b0c      	ldr	r3, [pc, #48]	; (800a8c8 <prvHeapInit+0xb4>)
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	4a0a      	ldr	r2, [pc, #40]	; (800a8cc <prvHeapInit+0xb8>)
 800a8a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	4a09      	ldr	r2, [pc, #36]	; (800a8d0 <prvHeapInit+0xbc>)
 800a8aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8ac:	4b09      	ldr	r3, [pc, #36]	; (800a8d4 <prvHeapInit+0xc0>)
 800a8ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a8b2:	601a      	str	r2, [r3, #0]
}
 800a8b4:	bf00      	nop
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	20001758 	.word	0x20001758
 800a8c4:	20005358 	.word	0x20005358
 800a8c8:	20005360 	.word	0x20005360
 800a8cc:	20005368 	.word	0x20005368
 800a8d0:	20005364 	.word	0x20005364
 800a8d4:	20005374 	.word	0x20005374

0800a8d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8e0:	4b28      	ldr	r3, [pc, #160]	; (800a984 <prvInsertBlockIntoFreeList+0xac>)
 800a8e2:	60fb      	str	r3, [r7, #12]
 800a8e4:	e002      	b.n	800a8ec <prvInsertBlockIntoFreeList+0x14>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	60fb      	str	r3, [r7, #12]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d8f7      	bhi.n	800a8e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	4413      	add	r3, r2
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	429a      	cmp	r2, r3
 800a906:	d108      	bne.n	800a91a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	441a      	add	r2, r3
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	441a      	add	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d118      	bne.n	800a960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	4b15      	ldr	r3, [pc, #84]	; (800a988 <prvInsertBlockIntoFreeList+0xb0>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	429a      	cmp	r2, r3
 800a938:	d00d      	beq.n	800a956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	441a      	add	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	e008      	b.n	800a968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a956:	4b0c      	ldr	r3, [pc, #48]	; (800a988 <prvInsertBlockIntoFreeList+0xb0>)
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	601a      	str	r2, [r3, #0]
 800a95e:	e003      	b.n	800a968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d002      	beq.n	800a976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a976:	bf00      	nop
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	20005358 	.word	0x20005358
 800a988:	20005360 	.word	0x20005360

0800a98c <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800a992:	f000 f905 	bl	800aba0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800a996:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a99a:	2201      	movs	r2, #1
 800a99c:	2178      	movs	r1, #120	; 0x78
 800a99e:	485b      	ldr	r0, [pc, #364]	; (800ab0c <SSD1306_Init+0x180>)
 800a9a0:	f7f9 fb94 	bl	80040cc <HAL_I2C_IsDeviceReady>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	e0a9      	b.n	800ab02 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800a9ae:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800a9b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 800a9b4:	e002      	b.n	800a9bc <SSD1306_Init+0x30>
		p--;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	607b      	str	r3, [r7, #4]
	while(p>0)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d1f9      	bne.n	800a9b6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800a9c2:	22ae      	movs	r2, #174	; 0xae
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	2078      	movs	r0, #120	; 0x78
 800a9c8:	f000 f966 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800a9cc:	2220      	movs	r2, #32
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	2078      	movs	r0, #120	; 0x78
 800a9d2:	f000 f961 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800a9d6:	2210      	movs	r2, #16
 800a9d8:	2100      	movs	r1, #0
 800a9da:	2078      	movs	r0, #120	; 0x78
 800a9dc:	f000 f95c 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800a9e0:	22b0      	movs	r2, #176	; 0xb0
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	2078      	movs	r0, #120	; 0x78
 800a9e6:	f000 f957 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800a9ea:	22c8      	movs	r2, #200	; 0xc8
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	2078      	movs	r0, #120	; 0x78
 800a9f0:	f000 f952 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	2078      	movs	r0, #120	; 0x78
 800a9fa:	f000 f94d 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800a9fe:	2210      	movs	r2, #16
 800aa00:	2100      	movs	r1, #0
 800aa02:	2078      	movs	r0, #120	; 0x78
 800aa04:	f000 f948 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800aa08:	2240      	movs	r2, #64	; 0x40
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	2078      	movs	r0, #120	; 0x78
 800aa0e:	f000 f943 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800aa12:	2281      	movs	r2, #129	; 0x81
 800aa14:	2100      	movs	r1, #0
 800aa16:	2078      	movs	r0, #120	; 0x78
 800aa18:	f000 f93e 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800aa1c:	22ff      	movs	r2, #255	; 0xff
 800aa1e:	2100      	movs	r1, #0
 800aa20:	2078      	movs	r0, #120	; 0x78
 800aa22:	f000 f939 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800aa26:	22a1      	movs	r2, #161	; 0xa1
 800aa28:	2100      	movs	r1, #0
 800aa2a:	2078      	movs	r0, #120	; 0x78
 800aa2c:	f000 f934 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800aa30:	22a6      	movs	r2, #166	; 0xa6
 800aa32:	2100      	movs	r1, #0
 800aa34:	2078      	movs	r0, #120	; 0x78
 800aa36:	f000 f92f 	bl	800ac98 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800aa3a:	22a8      	movs	r2, #168	; 0xa8
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	2078      	movs	r0, #120	; 0x78
 800aa40:	f000 f92a 	bl	800ac98 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 800aa44:	223f      	movs	r2, #63	; 0x3f
 800aa46:	2100      	movs	r1, #0
 800aa48:	2078      	movs	r0, #120	; 0x78
 800aa4a:	f000 f925 	bl	800ac98 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800aa4e:	22a4      	movs	r2, #164	; 0xa4
 800aa50:	2100      	movs	r1, #0
 800aa52:	2078      	movs	r0, #120	; 0x78
 800aa54:	f000 f920 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800aa58:	22d3      	movs	r2, #211	; 0xd3
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	2078      	movs	r0, #120	; 0x78
 800aa5e:	f000 f91b 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800aa62:	2200      	movs	r2, #0
 800aa64:	2100      	movs	r1, #0
 800aa66:	2078      	movs	r0, #120	; 0x78
 800aa68:	f000 f916 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800aa6c:	22d5      	movs	r2, #213	; 0xd5
 800aa6e:	2100      	movs	r1, #0
 800aa70:	2078      	movs	r0, #120	; 0x78
 800aa72:	f000 f911 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800aa76:	22f0      	movs	r2, #240	; 0xf0
 800aa78:	2100      	movs	r1, #0
 800aa7a:	2078      	movs	r0, #120	; 0x78
 800aa7c:	f000 f90c 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800aa80:	22d9      	movs	r2, #217	; 0xd9
 800aa82:	2100      	movs	r1, #0
 800aa84:	2078      	movs	r0, #120	; 0x78
 800aa86:	f000 f907 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800aa8a:	2222      	movs	r2, #34	; 0x22
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	2078      	movs	r0, #120	; 0x78
 800aa90:	f000 f902 	bl	800ac98 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800aa94:	22da      	movs	r2, #218	; 0xda
 800aa96:	2100      	movs	r1, #0
 800aa98:	2078      	movs	r0, #120	; 0x78
 800aa9a:	f000 f8fd 	bl	800ac98 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 800aa9e:	2212      	movs	r2, #18
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	2078      	movs	r0, #120	; 0x78
 800aaa4:	f000 f8f8 	bl	800ac98 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800aaa8:	22db      	movs	r2, #219	; 0xdb
 800aaaa:	2100      	movs	r1, #0
 800aaac:	2078      	movs	r0, #120	; 0x78
 800aaae:	f000 f8f3 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800aab2:	2220      	movs	r2, #32
 800aab4:	2100      	movs	r1, #0
 800aab6:	2078      	movs	r0, #120	; 0x78
 800aab8:	f000 f8ee 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800aabc:	228d      	movs	r2, #141	; 0x8d
 800aabe:	2100      	movs	r1, #0
 800aac0:	2078      	movs	r0, #120	; 0x78
 800aac2:	f000 f8e9 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800aac6:	2214      	movs	r2, #20
 800aac8:	2100      	movs	r1, #0
 800aaca:	2078      	movs	r0, #120	; 0x78
 800aacc:	f000 f8e4 	bl	800ac98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800aad0:	22af      	movs	r2, #175	; 0xaf
 800aad2:	2100      	movs	r1, #0
 800aad4:	2078      	movs	r0, #120	; 0x78
 800aad6:	f000 f8df 	bl	800ac98 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800aada:	222e      	movs	r2, #46	; 0x2e
 800aadc:	2100      	movs	r1, #0
 800aade:	2078      	movs	r0, #120	; 0x78
 800aae0:	f000 f8da 	bl	800ac98 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800aae4:	2000      	movs	r0, #0
 800aae6:	f000 f843 	bl	800ab70 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800aaea:	f000 f813 	bl	800ab14 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800aaee:	4b08      	ldr	r3, [pc, #32]	; (800ab10 <SSD1306_Init+0x184>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800aaf4:	4b06      	ldr	r3, [pc, #24]	; (800ab10 <SSD1306_Init+0x184>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800aafa:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <SSD1306_Init+0x184>)
 800aafc:	2201      	movs	r2, #1
 800aafe:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800ab00:	2301      	movs	r3, #1
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20000428 	.word	0x20000428
 800ab10:	20005778 	.word	0x20005778

0800ab14 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	71fb      	strb	r3, [r7, #7]
 800ab1e:	e01d      	b.n	800ab5c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800ab20:	79fb      	ldrb	r3, [r7, #7]
 800ab22:	3b50      	subs	r3, #80	; 0x50
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	461a      	mov	r2, r3
 800ab28:	2100      	movs	r1, #0
 800ab2a:	2078      	movs	r0, #120	; 0x78
 800ab2c:	f000 f8b4 	bl	800ac98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800ab30:	2200      	movs	r2, #0
 800ab32:	2100      	movs	r1, #0
 800ab34:	2078      	movs	r0, #120	; 0x78
 800ab36:	f000 f8af 	bl	800ac98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800ab3a:	2210      	movs	r2, #16
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	2078      	movs	r0, #120	; 0x78
 800ab40:	f000 f8aa 	bl	800ac98 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800ab44:	79fb      	ldrb	r3, [r7, #7]
 800ab46:	01db      	lsls	r3, r3, #7
 800ab48:	4a08      	ldr	r2, [pc, #32]	; (800ab6c <SSD1306_UpdateScreen+0x58>)
 800ab4a:	441a      	add	r2, r3
 800ab4c:	2380      	movs	r3, #128	; 0x80
 800ab4e:	2140      	movs	r1, #64	; 0x40
 800ab50:	2078      	movs	r0, #120	; 0x78
 800ab52:	f000 f83b 	bl	800abcc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800ab56:	79fb      	ldrb	r3, [r7, #7]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	71fb      	strb	r3, [r7, #7]
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b07      	cmp	r3, #7
 800ab60:	d9de      	bls.n	800ab20 <SSD1306_UpdateScreen+0xc>
	}
}
 800ab62:	bf00      	nop
 800ab64:	bf00      	nop
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	20005378 	.word	0x20005378

0800ab70 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	4603      	mov	r3, r0
 800ab78:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800ab7a:	79fb      	ldrb	r3, [r7, #7]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <SSD1306_Fill+0x14>
 800ab80:	2300      	movs	r3, #0
 800ab82:	e000      	b.n	800ab86 <SSD1306_Fill+0x16>
 800ab84:	23ff      	movs	r3, #255	; 0xff
 800ab86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4803      	ldr	r0, [pc, #12]	; (800ab9c <SSD1306_Fill+0x2c>)
 800ab8e:	f001 fae4 	bl	800c15a <memset>
}
 800ab92:	bf00      	nop
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	20005378 	.word	0x20005378

0800aba0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800aba6:	4b08      	ldr	r3, [pc, #32]	; (800abc8 <ssd1306_I2C_Init+0x28>)
 800aba8:	607b      	str	r3, [r7, #4]
	while(p>0)
 800abaa:	e002      	b.n	800abb2 <ssd1306_I2C_Init+0x12>
		p--;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3b01      	subs	r3, #1
 800abb0:	607b      	str	r3, [r7, #4]
	while(p>0)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1f9      	bne.n	800abac <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800abb8:	bf00      	nop
 800abba:	bf00      	nop
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	0003d090 	.word	0x0003d090

0800abcc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800abcc:	b590      	push	{r4, r7, lr}
 800abce:	b0c7      	sub	sp, #284	; 0x11c
 800abd0:	af02      	add	r7, sp, #8
 800abd2:	4604      	mov	r4, r0
 800abd4:	4608      	mov	r0, r1
 800abd6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800abda:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800abde:	600a      	str	r2, [r1, #0]
 800abe0:	4619      	mov	r1, r3
 800abe2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800abe6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800abea:	4622      	mov	r2, r4
 800abec:	701a      	strb	r2, [r3, #0]
 800abee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800abf2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800abf6:	4602      	mov	r2, r0
 800abf8:	701a      	strb	r2, [r3, #0]
 800abfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800abfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ac02:	460a      	mov	r2, r1
 800ac04:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800ac06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac0e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800ac12:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800ac16:	7812      	ldrb	r2, [r2, #0]
 800ac18:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800ac20:	e015      	b.n	800ac4e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800ac22:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ac26:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800ac2a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800ac2e:	6812      	ldr	r2, [r2, #0]
 800ac30:	441a      	add	r2, r3
 800ac32:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ac36:	3301      	adds	r3, #1
 800ac38:	7811      	ldrb	r1, [r2, #0]
 800ac3a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800ac3e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800ac42:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800ac44:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ac48:	3301      	adds	r3, #1
 800ac4a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800ac4e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800ac58:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800ac5c:	8812      	ldrh	r2, [r2, #0]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d8df      	bhi.n	800ac22 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 800ac62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac66:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	b299      	uxth	r1, r3
 800ac6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ac76:	881b      	ldrh	r3, [r3, #0]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	f107 020c 	add.w	r2, r7, #12
 800ac80:	200a      	movs	r0, #10
 800ac82:	9000      	str	r0, [sp, #0]
 800ac84:	4803      	ldr	r0, [pc, #12]	; (800ac94 <ssd1306_I2C_WriteMulti+0xc8>)
 800ac86:	f7f9 f923 	bl	8003ed0 <HAL_I2C_Master_Transmit>
}
 800ac8a:	bf00      	nop
 800ac8c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd90      	pop	{r4, r7, pc}
 800ac94:	20000428 	.word	0x20000428

0800ac98 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	4603      	mov	r3, r0
 800aca0:	71fb      	strb	r3, [r7, #7]
 800aca2:	460b      	mov	r3, r1
 800aca4:	71bb      	strb	r3, [r7, #6]
 800aca6:	4613      	mov	r3, r2
 800aca8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800acaa:	79bb      	ldrb	r3, [r7, #6]
 800acac:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800acae:	797b      	ldrb	r3, [r7, #5]
 800acb0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 800acb2:	79fb      	ldrb	r3, [r7, #7]
 800acb4:	b299      	uxth	r1, r3
 800acb6:	f107 020c 	add.w	r2, r7, #12
 800acba:	230a      	movs	r3, #10
 800acbc:	9300      	str	r3, [sp, #0]
 800acbe:	2302      	movs	r3, #2
 800acc0:	4803      	ldr	r0, [pc, #12]	; (800acd0 <ssd1306_I2C_Write+0x38>)
 800acc2:	f7f9 f905 	bl	8003ed0 <HAL_I2C_Master_Transmit>
}
 800acc6:	bf00      	nop
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	20000428 	.word	0x20000428

0800acd4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800acd8:	2200      	movs	r2, #0
 800acda:	2108      	movs	r1, #8
 800acdc:	4803      	ldr	r0, [pc, #12]	; (800acec <SELECT+0x18>)
 800acde:	f7f8 ff7f 	bl	8003be0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800ace2:	2001      	movs	r0, #1
 800ace4:	f7f7 fbae 	bl	8002444 <HAL_Delay>
}
 800ace8:	bf00      	nop
 800acea:	bd80      	pop	{r7, pc}
 800acec:	40020800 	.word	0x40020800

0800acf0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800acf4:	2201      	movs	r2, #1
 800acf6:	2108      	movs	r1, #8
 800acf8:	4803      	ldr	r0, [pc, #12]	; (800ad08 <DESELECT+0x18>)
 800acfa:	f7f8 ff71 	bl	8003be0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800acfe:	2001      	movs	r0, #1
 800ad00:	f7f7 fba0 	bl	8002444 <HAL_Delay>
}
 800ad04:	bf00      	nop
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	40020800 	.word	0x40020800

0800ad0c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	4603      	mov	r3, r0
 800ad14:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ad16:	bf00      	nop
 800ad18:	4b08      	ldr	r3, [pc, #32]	; (800ad3c <SPI_TxByte+0x30>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	f003 0302 	and.w	r3, r3, #2
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d1f8      	bne.n	800ad18 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800ad26:	1df9      	adds	r1, r7, #7
 800ad28:	2364      	movs	r3, #100	; 0x64
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	4803      	ldr	r0, [pc, #12]	; (800ad3c <SPI_TxByte+0x30>)
 800ad2e:	f7fb fafa 	bl	8006326 <HAL_SPI_Transmit>
}
 800ad32:	bf00      	nop
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	2000049c 	.word	0x2000049c

0800ad40 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	460b      	mov	r3, r1
 800ad4a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ad4c:	bf00      	nop
 800ad4e:	4b08      	ldr	r3, [pc, #32]	; (800ad70 <SPI_TxBuffer+0x30>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	f003 0302 	and.w	r3, r3, #2
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	d1f8      	bne.n	800ad4e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800ad5c:	887a      	ldrh	r2, [r7, #2]
 800ad5e:	2364      	movs	r3, #100	; 0x64
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	4803      	ldr	r0, [pc, #12]	; (800ad70 <SPI_TxBuffer+0x30>)
 800ad64:	f7fb fadf 	bl	8006326 <HAL_SPI_Transmit>
}
 800ad68:	bf00      	nop
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	2000049c 	.word	0x2000049c

0800ad74 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800ad7a:	23ff      	movs	r3, #255	; 0xff
 800ad7c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ad7e:	bf00      	nop
 800ad80:	4b09      	ldr	r3, [pc, #36]	; (800ada8 <SPI_RxByte+0x34>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f003 0302 	and.w	r3, r3, #2
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d1f8      	bne.n	800ad80 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800ad8e:	1dba      	adds	r2, r7, #6
 800ad90:	1df9      	adds	r1, r7, #7
 800ad92:	2364      	movs	r3, #100	; 0x64
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	2301      	movs	r3, #1
 800ad98:	4803      	ldr	r0, [pc, #12]	; (800ada8 <SPI_RxByte+0x34>)
 800ad9a:	f7fb fc00 	bl	800659e <HAL_SPI_TransmitReceive>

	return data;
 800ad9e:	79bb      	ldrb	r3, [r7, #6]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	2000049c 	.word	0x2000049c

0800adac <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800adb4:	f7ff ffde 	bl	800ad74 <SPI_RxByte>
 800adb8:	4603      	mov	r3, r0
 800adba:	461a      	mov	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	701a      	strb	r2, [r3, #0]
}
 800adc0:	bf00      	nop
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800adce:	4b0a      	ldr	r3, [pc, #40]	; (800adf8 <SD_ReadyWait+0x30>)
 800add0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800add4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800add6:	f7ff ffcd 	bl	800ad74 <SPI_RxByte>
 800adda:	4603      	mov	r3, r0
 800addc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800adde:	79fb      	ldrb	r3, [r7, #7]
 800ade0:	2bff      	cmp	r3, #255	; 0xff
 800ade2:	d003      	beq.n	800adec <SD_ReadyWait+0x24>
 800ade4:	4b04      	ldr	r3, [pc, #16]	; (800adf8 <SD_ReadyWait+0x30>)
 800ade6:	881b      	ldrh	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1f4      	bne.n	800add6 <SD_ReadyWait+0xe>

	return res;
 800adec:	79fb      	ldrb	r3, [r7, #7]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	2000095a 	.word	0x2000095a

0800adfc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800ae02:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800ae06:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800ae08:	f7ff ff72 	bl	800acf0 <DESELECT>
	for(int i = 0; i < 10; i++)
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60bb      	str	r3, [r7, #8]
 800ae10:	e005      	b.n	800ae1e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800ae12:	20ff      	movs	r0, #255	; 0xff
 800ae14:	f7ff ff7a 	bl	800ad0c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	60bb      	str	r3, [r7, #8]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	2b09      	cmp	r3, #9
 800ae22:	ddf6      	ble.n	800ae12 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800ae24:	f7ff ff56 	bl	800acd4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800ae28:	2340      	movs	r3, #64	; 0x40
 800ae2a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800ae30:	2300      	movs	r3, #0
 800ae32:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800ae3c:	2395      	movs	r3, #149	; 0x95
 800ae3e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800ae40:	463b      	mov	r3, r7
 800ae42:	2106      	movs	r1, #6
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7ff ff7b 	bl	800ad40 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800ae4a:	e002      	b.n	800ae52 <SD_PowerOn+0x56>
	{
		cnt--;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800ae52:	f7ff ff8f 	bl	800ad74 <SPI_RxByte>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d002      	beq.n	800ae62 <SD_PowerOn+0x66>
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1f4      	bne.n	800ae4c <SD_PowerOn+0x50>
	}

	DESELECT();
 800ae62:	f7ff ff45 	bl	800acf0 <DESELECT>
	SPI_TxByte(0XFF);
 800ae66:	20ff      	movs	r0, #255	; 0xff
 800ae68:	f7ff ff50 	bl	800ad0c <SPI_TxByte>

	PowerFlag = 1;
 800ae6c:	4b03      	ldr	r3, [pc, #12]	; (800ae7c <SD_PowerOn+0x80>)
 800ae6e:	2201      	movs	r2, #1
 800ae70:	701a      	strb	r2, [r3, #0]
}
 800ae72:	bf00      	nop
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	2000577f 	.word	0x2000577f

0800ae80 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800ae80:	b480      	push	{r7}
 800ae82:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800ae84:	4b03      	ldr	r3, [pc, #12]	; (800ae94 <SD_PowerOff+0x14>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	701a      	strb	r2, [r3, #0]
}
 800ae8a:	bf00      	nop
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	2000577f 	.word	0x2000577f

0800ae98 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800ae98:	b480      	push	{r7}
 800ae9a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800ae9c:	4b03      	ldr	r3, [pc, #12]	; (800aeac <SD_CheckPower+0x14>)
 800ae9e:	781b      	ldrb	r3, [r3, #0]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	2000577f 	.word	0x2000577f

0800aeb0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800aeba:	4b13      	ldr	r3, [pc, #76]	; (800af08 <SD_RxDataBlock+0x58>)
 800aebc:	22c8      	movs	r2, #200	; 0xc8
 800aebe:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800aec0:	f7ff ff58 	bl	800ad74 <SPI_RxByte>
 800aec4:	4603      	mov	r3, r0
 800aec6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
 800aeca:	2bff      	cmp	r3, #255	; 0xff
 800aecc:	d103      	bne.n	800aed6 <SD_RxDataBlock+0x26>
 800aece:	4b0e      	ldr	r3, [pc, #56]	; (800af08 <SD_RxDataBlock+0x58>)
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1f4      	bne.n	800aec0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800aed6:	7bfb      	ldrb	r3, [r7, #15]
 800aed8:	2bfe      	cmp	r3, #254	; 0xfe
 800aeda:	d001      	beq.n	800aee0 <SD_RxDataBlock+0x30>
 800aedc:	2300      	movs	r3, #0
 800aede:	e00f      	b.n	800af00 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	1c5a      	adds	r2, r3, #1
 800aee4:	607a      	str	r2, [r7, #4]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7ff ff60 	bl	800adac <SPI_RxBytePtr>
	} while(len--);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	1e5a      	subs	r2, r3, #1
 800aef0:	603a      	str	r2, [r7, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1f4      	bne.n	800aee0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800aef6:	f7ff ff3d 	bl	800ad74 <SPI_RxByte>
	SPI_RxByte();
 800aefa:	f7ff ff3b 	bl	800ad74 <SPI_RxByte>

	return TRUE;
 800aefe:	2301      	movs	r3, #1
}
 800af00:	4618      	mov	r0, r3
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	20000959 	.word	0x20000959

0800af0c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	460b      	mov	r3, r1
 800af16:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800af1c:	f7ff ff54 	bl	800adc8 <SD_ReadyWait>
 800af20:	4603      	mov	r3, r0
 800af22:	2bff      	cmp	r3, #255	; 0xff
 800af24:	d001      	beq.n	800af2a <SD_TxDataBlock+0x1e>
 800af26:	2300      	movs	r3, #0
 800af28:	e02f      	b.n	800af8a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800af2a:	78fb      	ldrb	r3, [r7, #3]
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7ff feed 	bl	800ad0c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800af32:	78fb      	ldrb	r3, [r7, #3]
 800af34:	2bfd      	cmp	r3, #253	; 0xfd
 800af36:	d020      	beq.n	800af7a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800af38:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff feff 	bl	800ad40 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800af42:	f7ff ff17 	bl	800ad74 <SPI_RxByte>
		SPI_RxByte();
 800af46:	f7ff ff15 	bl	800ad74 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800af4a:	e00b      	b.n	800af64 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800af4c:	f7ff ff12 	bl	800ad74 <SPI_RxByte>
 800af50:	4603      	mov	r3, r0
 800af52:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800af54:	7bfb      	ldrb	r3, [r7, #15]
 800af56:	f003 031f 	and.w	r3, r3, #31
 800af5a:	2b05      	cmp	r3, #5
 800af5c:	d006      	beq.n	800af6c <SD_TxDataBlock+0x60>
			i++;
 800af5e:	7bbb      	ldrb	r3, [r7, #14]
 800af60:	3301      	adds	r3, #1
 800af62:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800af64:	7bbb      	ldrb	r3, [r7, #14]
 800af66:	2b40      	cmp	r3, #64	; 0x40
 800af68:	d9f0      	bls.n	800af4c <SD_TxDataBlock+0x40>
 800af6a:	e000      	b.n	800af6e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800af6c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800af6e:	bf00      	nop
 800af70:	f7ff ff00 	bl	800ad74 <SPI_RxByte>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0fa      	beq.n	800af70 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800af7a:	7bfb      	ldrb	r3, [r7, #15]
 800af7c:	f003 031f 	and.w	r3, r3, #31
 800af80:	2b05      	cmp	r3, #5
 800af82:	d101      	bne.n	800af88 <SD_TxDataBlock+0x7c>
 800af84:	2301      	movs	r3, #1
 800af86:	e000      	b.n	800af8a <SD_TxDataBlock+0x7e>

	return FALSE;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b084      	sub	sp, #16
 800af96:	af00      	add	r7, sp, #0
 800af98:	4603      	mov	r3, r0
 800af9a:	6039      	str	r1, [r7, #0]
 800af9c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800af9e:	f7ff ff13 	bl	800adc8 <SD_ReadyWait>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2bff      	cmp	r3, #255	; 0xff
 800afa6:	d001      	beq.n	800afac <SD_SendCmd+0x1a>
 800afa8:	23ff      	movs	r3, #255	; 0xff
 800afaa:	e042      	b.n	800b032 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	4618      	mov	r0, r3
 800afb0:	f7ff feac 	bl	800ad0c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	0e1b      	lsrs	r3, r3, #24
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	4618      	mov	r0, r3
 800afbc:	f7ff fea6 	bl	800ad0c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	0c1b      	lsrs	r3, r3, #16
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7ff fea0 	bl	800ad0c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	0a1b      	lsrs	r3, r3, #8
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff fe9a 	bl	800ad0c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	4618      	mov	r0, r3
 800afde:	f7ff fe95 	bl	800ad0c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800afe2:	79fb      	ldrb	r3, [r7, #7]
 800afe4:	2b40      	cmp	r3, #64	; 0x40
 800afe6:	d102      	bne.n	800afee <SD_SendCmd+0x5c>
 800afe8:	2395      	movs	r3, #149	; 0x95
 800afea:	73fb      	strb	r3, [r7, #15]
 800afec:	e007      	b.n	800affe <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800afee:	79fb      	ldrb	r3, [r7, #7]
 800aff0:	2b48      	cmp	r3, #72	; 0x48
 800aff2:	d102      	bne.n	800affa <SD_SendCmd+0x68>
 800aff4:	2387      	movs	r3, #135	; 0x87
 800aff6:	73fb      	strb	r3, [r7, #15]
 800aff8:	e001      	b.n	800affe <SD_SendCmd+0x6c>
	else crc = 1;
 800affa:	2301      	movs	r3, #1
 800affc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800affe:	7bfb      	ldrb	r3, [r7, #15]
 800b000:	4618      	mov	r0, r3
 800b002:	f7ff fe83 	bl	800ad0c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800b006:	79fb      	ldrb	r3, [r7, #7]
 800b008:	2b4c      	cmp	r3, #76	; 0x4c
 800b00a:	d101      	bne.n	800b010 <SD_SendCmd+0x7e>
 800b00c:	f7ff feb2 	bl	800ad74 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800b010:	230a      	movs	r3, #10
 800b012:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800b014:	f7ff feae 	bl	800ad74 <SPI_RxByte>
 800b018:	4603      	mov	r3, r0
 800b01a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800b01c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b020:	2b00      	cmp	r3, #0
 800b022:	da05      	bge.n	800b030 <SD_SendCmd+0x9e>
 800b024:	7bbb      	ldrb	r3, [r7, #14]
 800b026:	3b01      	subs	r3, #1
 800b028:	73bb      	strb	r3, [r7, #14]
 800b02a:	7bbb      	ldrb	r3, [r7, #14]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1f1      	bne.n	800b014 <SD_SendCmd+0x82>

	return res;
 800b030:	7b7b      	ldrb	r3, [r7, #13]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800b03c:	b590      	push	{r4, r7, lr}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	4603      	mov	r3, r0
 800b044:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800b046:	79fb      	ldrb	r3, [r7, #7]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <SD_disk_initialize+0x14>
 800b04c:	2301      	movs	r3, #1
 800b04e:	e0d1      	b.n	800b1f4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800b050:	4b6a      	ldr	r3, [pc, #424]	; (800b1fc <SD_disk_initialize+0x1c0>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	b2db      	uxtb	r3, r3
 800b056:	f003 0302 	and.w	r3, r3, #2
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d003      	beq.n	800b066 <SD_disk_initialize+0x2a>
 800b05e:	4b67      	ldr	r3, [pc, #412]	; (800b1fc <SD_disk_initialize+0x1c0>)
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	b2db      	uxtb	r3, r3
 800b064:	e0c6      	b.n	800b1f4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800b066:	f7ff fec9 	bl	800adfc <SD_PowerOn>

	/* slave select */
	SELECT();
 800b06a:	f7ff fe33 	bl	800acd4 <SELECT>

	/* check disk type */
	type = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800b072:	2100      	movs	r1, #0
 800b074:	2040      	movs	r0, #64	; 0x40
 800b076:	f7ff ff8c 	bl	800af92 <SD_SendCmd>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	f040 80a1 	bne.w	800b1c4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800b082:	4b5f      	ldr	r3, [pc, #380]	; (800b200 <SD_disk_initialize+0x1c4>)
 800b084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b088:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800b08a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b08e:	2048      	movs	r0, #72	; 0x48
 800b090:	f7ff ff7f 	bl	800af92 <SD_SendCmd>
 800b094:	4603      	mov	r3, r0
 800b096:	2b01      	cmp	r3, #1
 800b098:	d155      	bne.n	800b146 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800b09a:	2300      	movs	r3, #0
 800b09c:	73fb      	strb	r3, [r7, #15]
 800b09e:	e00c      	b.n	800b0ba <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800b0a0:	7bfc      	ldrb	r4, [r7, #15]
 800b0a2:	f7ff fe67 	bl	800ad74 <SPI_RxByte>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	f104 0310 	add.w	r3, r4, #16
 800b0ae:	443b      	add	r3, r7
 800b0b0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	73fb      	strb	r3, [r7, #15]
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	2b03      	cmp	r3, #3
 800b0be:	d9ef      	bls.n	800b0a0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800b0c0:	7abb      	ldrb	r3, [r7, #10]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d17e      	bne.n	800b1c4 <SD_disk_initialize+0x188>
 800b0c6:	7afb      	ldrb	r3, [r7, #11]
 800b0c8:	2baa      	cmp	r3, #170	; 0xaa
 800b0ca:	d17b      	bne.n	800b1c4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	2077      	movs	r0, #119	; 0x77
 800b0d0:	f7ff ff5f 	bl	800af92 <SD_SendCmd>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d807      	bhi.n	800b0ea <SD_disk_initialize+0xae>
 800b0da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b0de:	2069      	movs	r0, #105	; 0x69
 800b0e0:	f7ff ff57 	bl	800af92 <SD_SendCmd>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d004      	beq.n	800b0f4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800b0ea:	4b45      	ldr	r3, [pc, #276]	; (800b200 <SD_disk_initialize+0x1c4>)
 800b0ec:	881b      	ldrh	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1ec      	bne.n	800b0cc <SD_disk_initialize+0x90>
 800b0f2:	e000      	b.n	800b0f6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800b0f4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800b0f6:	4b42      	ldr	r3, [pc, #264]	; (800b200 <SD_disk_initialize+0x1c4>)
 800b0f8:	881b      	ldrh	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d062      	beq.n	800b1c4 <SD_disk_initialize+0x188>
 800b0fe:	2100      	movs	r1, #0
 800b100:	207a      	movs	r0, #122	; 0x7a
 800b102:	f7ff ff46 	bl	800af92 <SD_SendCmd>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d15b      	bne.n	800b1c4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800b10c:	2300      	movs	r3, #0
 800b10e:	73fb      	strb	r3, [r7, #15]
 800b110:	e00c      	b.n	800b12c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800b112:	7bfc      	ldrb	r4, [r7, #15]
 800b114:	f7ff fe2e 	bl	800ad74 <SPI_RxByte>
 800b118:	4603      	mov	r3, r0
 800b11a:	461a      	mov	r2, r3
 800b11c:	f104 0310 	add.w	r3, r4, #16
 800b120:	443b      	add	r3, r7
 800b122:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800b126:	7bfb      	ldrb	r3, [r7, #15]
 800b128:	3301      	adds	r3, #1
 800b12a:	73fb      	strb	r3, [r7, #15]
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
 800b12e:	2b03      	cmp	r3, #3
 800b130:	d9ef      	bls.n	800b112 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800b132:	7a3b      	ldrb	r3, [r7, #8]
 800b134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <SD_disk_initialize+0x104>
 800b13c:	230c      	movs	r3, #12
 800b13e:	e000      	b.n	800b142 <SD_disk_initialize+0x106>
 800b140:	2304      	movs	r3, #4
 800b142:	73bb      	strb	r3, [r7, #14]
 800b144:	e03e      	b.n	800b1c4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800b146:	2100      	movs	r1, #0
 800b148:	2077      	movs	r0, #119	; 0x77
 800b14a:	f7ff ff22 	bl	800af92 <SD_SendCmd>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b01      	cmp	r3, #1
 800b152:	d808      	bhi.n	800b166 <SD_disk_initialize+0x12a>
 800b154:	2100      	movs	r1, #0
 800b156:	2069      	movs	r0, #105	; 0x69
 800b158:	f7ff ff1b 	bl	800af92 <SD_SendCmd>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d801      	bhi.n	800b166 <SD_disk_initialize+0x12a>
 800b162:	2302      	movs	r3, #2
 800b164:	e000      	b.n	800b168 <SD_disk_initialize+0x12c>
 800b166:	2301      	movs	r3, #1
 800b168:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800b16a:	7bbb      	ldrb	r3, [r7, #14]
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d10e      	bne.n	800b18e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800b170:	2100      	movs	r1, #0
 800b172:	2077      	movs	r0, #119	; 0x77
 800b174:	f7ff ff0d 	bl	800af92 <SD_SendCmd>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d80e      	bhi.n	800b19c <SD_disk_initialize+0x160>
 800b17e:	2100      	movs	r1, #0
 800b180:	2069      	movs	r0, #105	; 0x69
 800b182:	f7ff ff06 	bl	800af92 <SD_SendCmd>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d107      	bne.n	800b19c <SD_disk_initialize+0x160>
 800b18c:	e00c      	b.n	800b1a8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800b18e:	2100      	movs	r1, #0
 800b190:	2041      	movs	r0, #65	; 0x41
 800b192:	f7ff fefe 	bl	800af92 <SD_SendCmd>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d004      	beq.n	800b1a6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800b19c:	4b18      	ldr	r3, [pc, #96]	; (800b200 <SD_disk_initialize+0x1c4>)
 800b19e:	881b      	ldrh	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1e2      	bne.n	800b16a <SD_disk_initialize+0x12e>
 800b1a4:	e000      	b.n	800b1a8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800b1a6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800b1a8:	4b15      	ldr	r3, [pc, #84]	; (800b200 <SD_disk_initialize+0x1c4>)
 800b1aa:	881b      	ldrh	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d007      	beq.n	800b1c0 <SD_disk_initialize+0x184>
 800b1b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1b4:	2050      	movs	r0, #80	; 0x50
 800b1b6:	f7ff feec 	bl	800af92 <SD_SendCmd>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <SD_disk_initialize+0x188>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800b1c4:	4a0f      	ldr	r2, [pc, #60]	; (800b204 <SD_disk_initialize+0x1c8>)
 800b1c6:	7bbb      	ldrb	r3, [r7, #14]
 800b1c8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800b1ca:	f7ff fd91 	bl	800acf0 <DESELECT>
	SPI_RxByte();
 800b1ce:	f7ff fdd1 	bl	800ad74 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800b1d2:	7bbb      	ldrb	r3, [r7, #14]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d008      	beq.n	800b1ea <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800b1d8:	4b08      	ldr	r3, [pc, #32]	; (800b1fc <SD_disk_initialize+0x1c0>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	f023 0301 	bic.w	r3, r3, #1
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	4b05      	ldr	r3, [pc, #20]	; (800b1fc <SD_disk_initialize+0x1c0>)
 800b1e6:	701a      	strb	r2, [r3, #0]
 800b1e8:	e001      	b.n	800b1ee <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800b1ea:	f7ff fe49 	bl	800ae80 <SD_PowerOff>
	}

	return Stat;
 800b1ee:	4b03      	ldr	r3, [pc, #12]	; (800b1fc <SD_disk_initialize+0x1c0>)
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	b2db      	uxtb	r3, r3
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3714      	adds	r7, #20
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd90      	pop	{r4, r7, pc}
 800b1fc:	20000024 	.word	0x20000024
 800b200:	20000959 	.word	0x20000959
 800b204:	2000577e 	.word	0x2000577e

0800b208 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	4603      	mov	r3, r0
 800b210:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800b212:	79fb      	ldrb	r3, [r7, #7]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d001      	beq.n	800b21c <SD_disk_status+0x14>
 800b218:	2301      	movs	r3, #1
 800b21a:	e002      	b.n	800b222 <SD_disk_status+0x1a>
	return Stat;
 800b21c:	4b04      	ldr	r3, [pc, #16]	; (800b230 <SD_disk_status+0x28>)
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	b2db      	uxtb	r3, r3
}
 800b222:	4618      	mov	r0, r3
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	20000024 	.word	0x20000024

0800b234 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60b9      	str	r1, [r7, #8]
 800b23c:	607a      	str	r2, [r7, #4]
 800b23e:	603b      	str	r3, [r7, #0]
 800b240:	4603      	mov	r3, r0
 800b242:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d102      	bne.n	800b250 <SD_disk_read+0x1c>
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d101      	bne.n	800b254 <SD_disk_read+0x20>
 800b250:	2304      	movs	r3, #4
 800b252:	e051      	b.n	800b2f8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b254:	4b2a      	ldr	r3, [pc, #168]	; (800b300 <SD_disk_read+0xcc>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <SD_disk_read+0x32>
 800b262:	2303      	movs	r3, #3
 800b264:	e048      	b.n	800b2f8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800b266:	4b27      	ldr	r3, [pc, #156]	; (800b304 <SD_disk_read+0xd0>)
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	f003 0304 	and.w	r3, r3, #4
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d102      	bne.n	800b278 <SD_disk_read+0x44>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	025b      	lsls	r3, r3, #9
 800b276:	607b      	str	r3, [r7, #4]

	SELECT();
 800b278:	f7ff fd2c 	bl	800acd4 <SELECT>

	if (count == 1)
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d111      	bne.n	800b2a6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800b282:	6879      	ldr	r1, [r7, #4]
 800b284:	2051      	movs	r0, #81	; 0x51
 800b286:	f7ff fe84 	bl	800af92 <SD_SendCmd>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d129      	bne.n	800b2e4 <SD_disk_read+0xb0>
 800b290:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b294:	68b8      	ldr	r0, [r7, #8]
 800b296:	f7ff fe0b 	bl	800aeb0 <SD_RxDataBlock>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d021      	beq.n	800b2e4 <SD_disk_read+0xb0>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	603b      	str	r3, [r7, #0]
 800b2a4:	e01e      	b.n	800b2e4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800b2a6:	6879      	ldr	r1, [r7, #4]
 800b2a8:	2052      	movs	r0, #82	; 0x52
 800b2aa:	f7ff fe72 	bl	800af92 <SD_SendCmd>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d117      	bne.n	800b2e4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800b2b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2b8:	68b8      	ldr	r0, [r7, #8]
 800b2ba:	f7ff fdf9 	bl	800aeb0 <SD_RxDataBlock>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00a      	beq.n	800b2da <SD_disk_read+0xa6>
				buff += 512;
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b2ca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	603b      	str	r3, [r7, #0]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1ed      	bne.n	800b2b4 <SD_disk_read+0x80>
 800b2d8:	e000      	b.n	800b2dc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800b2da:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800b2dc:	2100      	movs	r1, #0
 800b2de:	204c      	movs	r0, #76	; 0x4c
 800b2e0:	f7ff fe57 	bl	800af92 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800b2e4:	f7ff fd04 	bl	800acf0 <DESELECT>
	SPI_RxByte();
 800b2e8:	f7ff fd44 	bl	800ad74 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	bf14      	ite	ne
 800b2f2:	2301      	movne	r3, #1
 800b2f4:	2300      	moveq	r3, #0
 800b2f6:	b2db      	uxtb	r3, r3
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	20000024 	.word	0x20000024
 800b304:	2000577e 	.word	0x2000577e

0800b308 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60b9      	str	r1, [r7, #8]
 800b310:	607a      	str	r2, [r7, #4]
 800b312:	603b      	str	r3, [r7, #0]
 800b314:	4603      	mov	r3, r0
 800b316:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800b318:	7bfb      	ldrb	r3, [r7, #15]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d102      	bne.n	800b324 <SD_disk_write+0x1c>
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <SD_disk_write+0x20>
 800b324:	2304      	movs	r3, #4
 800b326:	e06b      	b.n	800b400 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b328:	4b37      	ldr	r3, [pc, #220]	; (800b408 <SD_disk_write+0x100>)
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	2b00      	cmp	r3, #0
 800b334:	d001      	beq.n	800b33a <SD_disk_write+0x32>
 800b336:	2303      	movs	r3, #3
 800b338:	e062      	b.n	800b400 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800b33a:	4b33      	ldr	r3, [pc, #204]	; (800b408 <SD_disk_write+0x100>)
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	f003 0304 	and.w	r3, r3, #4
 800b344:	2b00      	cmp	r3, #0
 800b346:	d001      	beq.n	800b34c <SD_disk_write+0x44>
 800b348:	2302      	movs	r3, #2
 800b34a:	e059      	b.n	800b400 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800b34c:	4b2f      	ldr	r3, [pc, #188]	; (800b40c <SD_disk_write+0x104>)
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	f003 0304 	and.w	r3, r3, #4
 800b354:	2b00      	cmp	r3, #0
 800b356:	d102      	bne.n	800b35e <SD_disk_write+0x56>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	025b      	lsls	r3, r3, #9
 800b35c:	607b      	str	r3, [r7, #4]

	SELECT();
 800b35e:	f7ff fcb9 	bl	800acd4 <SELECT>

	if (count == 1)
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d110      	bne.n	800b38a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800b368:	6879      	ldr	r1, [r7, #4]
 800b36a:	2058      	movs	r0, #88	; 0x58
 800b36c:	f7ff fe11 	bl	800af92 <SD_SendCmd>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d13a      	bne.n	800b3ec <SD_disk_write+0xe4>
 800b376:	21fe      	movs	r1, #254	; 0xfe
 800b378:	68b8      	ldr	r0, [r7, #8]
 800b37a:	f7ff fdc7 	bl	800af0c <SD_TxDataBlock>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d033      	beq.n	800b3ec <SD_disk_write+0xe4>
			count = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	603b      	str	r3, [r7, #0]
 800b388:	e030      	b.n	800b3ec <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800b38a:	4b20      	ldr	r3, [pc, #128]	; (800b40c <SD_disk_write+0x104>)
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	f003 0302 	and.w	r3, r3, #2
 800b392:	2b00      	cmp	r3, #0
 800b394:	d007      	beq.n	800b3a6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800b396:	2100      	movs	r1, #0
 800b398:	2077      	movs	r0, #119	; 0x77
 800b39a:	f7ff fdfa 	bl	800af92 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800b39e:	6839      	ldr	r1, [r7, #0]
 800b3a0:	2057      	movs	r0, #87	; 0x57
 800b3a2:	f7ff fdf6 	bl	800af92 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	2059      	movs	r0, #89	; 0x59
 800b3aa:	f7ff fdf2 	bl	800af92 <SD_SendCmd>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d11b      	bne.n	800b3ec <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800b3b4:	21fc      	movs	r1, #252	; 0xfc
 800b3b6:	68b8      	ldr	r0, [r7, #8]
 800b3b8:	f7ff fda8 	bl	800af0c <SD_TxDataBlock>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00a      	beq.n	800b3d8 <SD_disk_write+0xd0>
				buff += 512;
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b3c8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	603b      	str	r3, [r7, #0]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1ee      	bne.n	800b3b4 <SD_disk_write+0xac>
 800b3d6:	e000      	b.n	800b3da <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800b3d8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800b3da:	21fd      	movs	r1, #253	; 0xfd
 800b3dc:	2000      	movs	r0, #0
 800b3de:	f7ff fd95 	bl	800af0c <SD_TxDataBlock>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d101      	bne.n	800b3ec <SD_disk_write+0xe4>
			{
				count = 1;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800b3ec:	f7ff fc80 	bl	800acf0 <DESELECT>
	SPI_RxByte();
 800b3f0:	f7ff fcc0 	bl	800ad74 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	bf14      	ite	ne
 800b3fa:	2301      	movne	r3, #1
 800b3fc:	2300      	moveq	r3, #0
 800b3fe:	b2db      	uxtb	r3, r3
}
 800b400:	4618      	mov	r0, r3
 800b402:	3710      	adds	r7, #16
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	20000024 	.word	0x20000024
 800b40c:	2000577e 	.word	0x2000577e

0800b410 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800b410:	b590      	push	{r4, r7, lr}
 800b412:	b08b      	sub	sp, #44	; 0x2c
 800b414:	af00      	add	r7, sp, #0
 800b416:	4603      	mov	r3, r0
 800b418:	603a      	str	r2, [r7, #0]
 800b41a:	71fb      	strb	r3, [r7, #7]
 800b41c:	460b      	mov	r3, r1
 800b41e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800b424:	79fb      	ldrb	r3, [r7, #7]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <SD_disk_ioctl+0x1e>
 800b42a:	2304      	movs	r3, #4
 800b42c:	e115      	b.n	800b65a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800b434:	79bb      	ldrb	r3, [r7, #6]
 800b436:	2b05      	cmp	r3, #5
 800b438:	d124      	bne.n	800b484 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800b43a:	6a3b      	ldr	r3, [r7, #32]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d012      	beq.n	800b468 <SD_disk_ioctl+0x58>
 800b442:	2b02      	cmp	r3, #2
 800b444:	dc1a      	bgt.n	800b47c <SD_disk_ioctl+0x6c>
 800b446:	2b00      	cmp	r3, #0
 800b448:	d002      	beq.n	800b450 <SD_disk_ioctl+0x40>
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d006      	beq.n	800b45c <SD_disk_ioctl+0x4c>
 800b44e:	e015      	b.n	800b47c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800b450:	f7ff fd16 	bl	800ae80 <SD_PowerOff>
			res = RES_OK;
 800b454:	2300      	movs	r3, #0
 800b456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b45a:	e0fc      	b.n	800b656 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800b45c:	f7ff fcce 	bl	800adfc <SD_PowerOn>
			res = RES_OK;
 800b460:	2300      	movs	r3, #0
 800b462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b466:	e0f6      	b.n	800b656 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800b468:	6a3b      	ldr	r3, [r7, #32]
 800b46a:	1c5c      	adds	r4, r3, #1
 800b46c:	f7ff fd14 	bl	800ae98 <SD_CheckPower>
 800b470:	4603      	mov	r3, r0
 800b472:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800b474:	2300      	movs	r3, #0
 800b476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b47a:	e0ec      	b.n	800b656 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800b47c:	2304      	movs	r3, #4
 800b47e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b482:	e0e8      	b.n	800b656 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b484:	4b77      	ldr	r3, [pc, #476]	; (800b664 <SD_disk_ioctl+0x254>)
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	f003 0301 	and.w	r3, r3, #1
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d001      	beq.n	800b496 <SD_disk_ioctl+0x86>
 800b492:	2303      	movs	r3, #3
 800b494:	e0e1      	b.n	800b65a <SD_disk_ioctl+0x24a>

		SELECT();
 800b496:	f7ff fc1d 	bl	800acd4 <SELECT>

		switch (ctrl)
 800b49a:	79bb      	ldrb	r3, [r7, #6]
 800b49c:	2b0d      	cmp	r3, #13
 800b49e:	f200 80cb 	bhi.w	800b638 <SD_disk_ioctl+0x228>
 800b4a2:	a201      	add	r2, pc, #4	; (adr r2, 800b4a8 <SD_disk_ioctl+0x98>)
 800b4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a8:	0800b5a3 	.word	0x0800b5a3
 800b4ac:	0800b4e1 	.word	0x0800b4e1
 800b4b0:	0800b593 	.word	0x0800b593
 800b4b4:	0800b639 	.word	0x0800b639
 800b4b8:	0800b639 	.word	0x0800b639
 800b4bc:	0800b639 	.word	0x0800b639
 800b4c0:	0800b639 	.word	0x0800b639
 800b4c4:	0800b639 	.word	0x0800b639
 800b4c8:	0800b639 	.word	0x0800b639
 800b4cc:	0800b639 	.word	0x0800b639
 800b4d0:	0800b639 	.word	0x0800b639
 800b4d4:	0800b5b5 	.word	0x0800b5b5
 800b4d8:	0800b5d9 	.word	0x0800b5d9
 800b4dc:	0800b5fd 	.word	0x0800b5fd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	2049      	movs	r0, #73	; 0x49
 800b4e4:	f7ff fd55 	bl	800af92 <SD_SendCmd>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f040 80a8 	bne.w	800b640 <SD_disk_ioctl+0x230>
 800b4f0:	f107 030c 	add.w	r3, r7, #12
 800b4f4:	2110      	movs	r1, #16
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7ff fcda 	bl	800aeb0 <SD_RxDataBlock>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f000 809e 	beq.w	800b640 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800b504:	7b3b      	ldrb	r3, [r7, #12]
 800b506:	099b      	lsrs	r3, r3, #6
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d10e      	bne.n	800b52c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800b50e:	7d7b      	ldrb	r3, [r7, #21]
 800b510:	b29a      	uxth	r2, r3
 800b512:	7d3b      	ldrb	r3, [r7, #20]
 800b514:	b29b      	uxth	r3, r3
 800b516:	021b      	lsls	r3, r3, #8
 800b518:	b29b      	uxth	r3, r3
 800b51a:	4413      	add	r3, r2
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	3301      	adds	r3, #1
 800b520:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800b522:	8bfb      	ldrh	r3, [r7, #30]
 800b524:	029a      	lsls	r2, r3, #10
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	e02e      	b.n	800b58a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b52c:	7c7b      	ldrb	r3, [r7, #17]
 800b52e:	f003 030f 	and.w	r3, r3, #15
 800b532:	b2da      	uxtb	r2, r3
 800b534:	7dbb      	ldrb	r3, [r7, #22]
 800b536:	09db      	lsrs	r3, r3, #7
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	4413      	add	r3, r2
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	7d7b      	ldrb	r3, [r7, #21]
 800b540:	005b      	lsls	r3, r3, #1
 800b542:	b2db      	uxtb	r3, r3
 800b544:	f003 0306 	and.w	r3, r3, #6
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	4413      	add	r3, r2
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	3302      	adds	r3, #2
 800b550:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800b554:	7d3b      	ldrb	r3, [r7, #20]
 800b556:	099b      	lsrs	r3, r3, #6
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	7cfb      	ldrb	r3, [r7, #19]
 800b55e:	b29b      	uxth	r3, r3
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	b29b      	uxth	r3, r3
 800b564:	4413      	add	r3, r2
 800b566:	b29a      	uxth	r2, r3
 800b568:	7cbb      	ldrb	r3, [r7, #18]
 800b56a:	029b      	lsls	r3, r3, #10
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b572:	b29b      	uxth	r3, r3
 800b574:	4413      	add	r3, r2
 800b576:	b29b      	uxth	r3, r3
 800b578:	3301      	adds	r3, #1
 800b57a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800b57c:	8bfa      	ldrh	r2, [r7, #30]
 800b57e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b582:	3b09      	subs	r3, #9
 800b584:	409a      	lsls	r2, r3
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800b590:	e056      	b.n	800b640 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b598:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800b59a:	2300      	movs	r3, #0
 800b59c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b5a0:	e055      	b.n	800b64e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800b5a2:	f7ff fc11 	bl	800adc8 <SD_ReadyWait>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2bff      	cmp	r3, #255	; 0xff
 800b5aa:	d14b      	bne.n	800b644 <SD_disk_ioctl+0x234>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b5b2:	e047      	b.n	800b644 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	2049      	movs	r0, #73	; 0x49
 800b5b8:	f7ff fceb 	bl	800af92 <SD_SendCmd>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d142      	bne.n	800b648 <SD_disk_ioctl+0x238>
 800b5c2:	2110      	movs	r1, #16
 800b5c4:	6a38      	ldr	r0, [r7, #32]
 800b5c6:	f7ff fc73 	bl	800aeb0 <SD_RxDataBlock>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d03b      	beq.n	800b648 <SD_disk_ioctl+0x238>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b5d6:	e037      	b.n	800b648 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800b5d8:	2100      	movs	r1, #0
 800b5da:	204a      	movs	r0, #74	; 0x4a
 800b5dc:	f7ff fcd9 	bl	800af92 <SD_SendCmd>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d132      	bne.n	800b64c <SD_disk_ioctl+0x23c>
 800b5e6:	2110      	movs	r1, #16
 800b5e8:	6a38      	ldr	r0, [r7, #32]
 800b5ea:	f7ff fc61 	bl	800aeb0 <SD_RxDataBlock>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d02b      	beq.n	800b64c <SD_disk_ioctl+0x23c>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800b5fa:	e027      	b.n	800b64c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	207a      	movs	r0, #122	; 0x7a
 800b600:	f7ff fcc7 	bl	800af92 <SD_SendCmd>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d116      	bne.n	800b638 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800b60a:	2300      	movs	r3, #0
 800b60c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b610:	e00b      	b.n	800b62a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800b612:	6a3c      	ldr	r4, [r7, #32]
 800b614:	1c63      	adds	r3, r4, #1
 800b616:	623b      	str	r3, [r7, #32]
 800b618:	f7ff fbac 	bl	800ad74 <SPI_RxByte>
 800b61c:	4603      	mov	r3, r0
 800b61e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800b620:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b624:	3301      	adds	r3, #1
 800b626:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b62a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b62e:	2b03      	cmp	r3, #3
 800b630:	d9ef      	bls.n	800b612 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800b632:	2300      	movs	r3, #0
 800b634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800b638:	2304      	movs	r3, #4
 800b63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b63e:	e006      	b.n	800b64e <SD_disk_ioctl+0x23e>
			break;
 800b640:	bf00      	nop
 800b642:	e004      	b.n	800b64e <SD_disk_ioctl+0x23e>
			break;
 800b644:	bf00      	nop
 800b646:	e002      	b.n	800b64e <SD_disk_ioctl+0x23e>
			break;
 800b648:	bf00      	nop
 800b64a:	e000      	b.n	800b64e <SD_disk_ioctl+0x23e>
			break;
 800b64c:	bf00      	nop
		}

		DESELECT();
 800b64e:	f7ff fb4f 	bl	800acf0 <DESELECT>
		SPI_RxByte();
 800b652:	f7ff fb8f 	bl	800ad74 <SPI_RxByte>
	}

	return res;
 800b656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	372c      	adds	r7, #44	; 0x2c
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd90      	pop	{r4, r7, pc}
 800b662:	bf00      	nop
 800b664:	20000024 	.word	0x20000024

0800b668 <__cvt>:
 800b668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b66c:	ec55 4b10 	vmov	r4, r5, d0
 800b670:	2d00      	cmp	r5, #0
 800b672:	460e      	mov	r6, r1
 800b674:	4619      	mov	r1, r3
 800b676:	462b      	mov	r3, r5
 800b678:	bfbb      	ittet	lt
 800b67a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b67e:	461d      	movlt	r5, r3
 800b680:	2300      	movge	r3, #0
 800b682:	232d      	movlt	r3, #45	; 0x2d
 800b684:	700b      	strb	r3, [r1, #0]
 800b686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b688:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b68c:	4691      	mov	r9, r2
 800b68e:	f023 0820 	bic.w	r8, r3, #32
 800b692:	bfbc      	itt	lt
 800b694:	4622      	movlt	r2, r4
 800b696:	4614      	movlt	r4, r2
 800b698:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b69c:	d005      	beq.n	800b6aa <__cvt+0x42>
 800b69e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b6a2:	d100      	bne.n	800b6a6 <__cvt+0x3e>
 800b6a4:	3601      	adds	r6, #1
 800b6a6:	2102      	movs	r1, #2
 800b6a8:	e000      	b.n	800b6ac <__cvt+0x44>
 800b6aa:	2103      	movs	r1, #3
 800b6ac:	ab03      	add	r3, sp, #12
 800b6ae:	9301      	str	r3, [sp, #4]
 800b6b0:	ab02      	add	r3, sp, #8
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	ec45 4b10 	vmov	d0, r4, r5
 800b6b8:	4653      	mov	r3, sl
 800b6ba:	4632      	mov	r2, r6
 800b6bc:	f000 feb8 	bl	800c430 <_dtoa_r>
 800b6c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b6c4:	4607      	mov	r7, r0
 800b6c6:	d102      	bne.n	800b6ce <__cvt+0x66>
 800b6c8:	f019 0f01 	tst.w	r9, #1
 800b6cc:	d022      	beq.n	800b714 <__cvt+0xac>
 800b6ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6d2:	eb07 0906 	add.w	r9, r7, r6
 800b6d6:	d110      	bne.n	800b6fa <__cvt+0x92>
 800b6d8:	783b      	ldrb	r3, [r7, #0]
 800b6da:	2b30      	cmp	r3, #48	; 0x30
 800b6dc:	d10a      	bne.n	800b6f4 <__cvt+0x8c>
 800b6de:	2200      	movs	r2, #0
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	f7f5 fa0f 	bl	8000b08 <__aeabi_dcmpeq>
 800b6ea:	b918      	cbnz	r0, 800b6f4 <__cvt+0x8c>
 800b6ec:	f1c6 0601 	rsb	r6, r6, #1
 800b6f0:	f8ca 6000 	str.w	r6, [sl]
 800b6f4:	f8da 3000 	ldr.w	r3, [sl]
 800b6f8:	4499      	add	r9, r3
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	4620      	mov	r0, r4
 800b700:	4629      	mov	r1, r5
 800b702:	f7f5 fa01 	bl	8000b08 <__aeabi_dcmpeq>
 800b706:	b108      	cbz	r0, 800b70c <__cvt+0xa4>
 800b708:	f8cd 900c 	str.w	r9, [sp, #12]
 800b70c:	2230      	movs	r2, #48	; 0x30
 800b70e:	9b03      	ldr	r3, [sp, #12]
 800b710:	454b      	cmp	r3, r9
 800b712:	d307      	bcc.n	800b724 <__cvt+0xbc>
 800b714:	9b03      	ldr	r3, [sp, #12]
 800b716:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b718:	1bdb      	subs	r3, r3, r7
 800b71a:	4638      	mov	r0, r7
 800b71c:	6013      	str	r3, [r2, #0]
 800b71e:	b004      	add	sp, #16
 800b720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b724:	1c59      	adds	r1, r3, #1
 800b726:	9103      	str	r1, [sp, #12]
 800b728:	701a      	strb	r2, [r3, #0]
 800b72a:	e7f0      	b.n	800b70e <__cvt+0xa6>

0800b72c <__exponent>:
 800b72c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b72e:	4603      	mov	r3, r0
 800b730:	2900      	cmp	r1, #0
 800b732:	bfb8      	it	lt
 800b734:	4249      	neglt	r1, r1
 800b736:	f803 2b02 	strb.w	r2, [r3], #2
 800b73a:	bfb4      	ite	lt
 800b73c:	222d      	movlt	r2, #45	; 0x2d
 800b73e:	222b      	movge	r2, #43	; 0x2b
 800b740:	2909      	cmp	r1, #9
 800b742:	7042      	strb	r2, [r0, #1]
 800b744:	dd2a      	ble.n	800b79c <__exponent+0x70>
 800b746:	f10d 0207 	add.w	r2, sp, #7
 800b74a:	4617      	mov	r7, r2
 800b74c:	260a      	movs	r6, #10
 800b74e:	4694      	mov	ip, r2
 800b750:	fb91 f5f6 	sdiv	r5, r1, r6
 800b754:	fb06 1415 	mls	r4, r6, r5, r1
 800b758:	3430      	adds	r4, #48	; 0x30
 800b75a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b75e:	460c      	mov	r4, r1
 800b760:	2c63      	cmp	r4, #99	; 0x63
 800b762:	f102 32ff 	add.w	r2, r2, #4294967295
 800b766:	4629      	mov	r1, r5
 800b768:	dcf1      	bgt.n	800b74e <__exponent+0x22>
 800b76a:	3130      	adds	r1, #48	; 0x30
 800b76c:	f1ac 0402 	sub.w	r4, ip, #2
 800b770:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b774:	1c41      	adds	r1, r0, #1
 800b776:	4622      	mov	r2, r4
 800b778:	42ba      	cmp	r2, r7
 800b77a:	d30a      	bcc.n	800b792 <__exponent+0x66>
 800b77c:	f10d 0209 	add.w	r2, sp, #9
 800b780:	eba2 020c 	sub.w	r2, r2, ip
 800b784:	42bc      	cmp	r4, r7
 800b786:	bf88      	it	hi
 800b788:	2200      	movhi	r2, #0
 800b78a:	4413      	add	r3, r2
 800b78c:	1a18      	subs	r0, r3, r0
 800b78e:	b003      	add	sp, #12
 800b790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b792:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b796:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b79a:	e7ed      	b.n	800b778 <__exponent+0x4c>
 800b79c:	2330      	movs	r3, #48	; 0x30
 800b79e:	3130      	adds	r1, #48	; 0x30
 800b7a0:	7083      	strb	r3, [r0, #2]
 800b7a2:	70c1      	strb	r1, [r0, #3]
 800b7a4:	1d03      	adds	r3, r0, #4
 800b7a6:	e7f1      	b.n	800b78c <__exponent+0x60>

0800b7a8 <_printf_float>:
 800b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	ed2d 8b02 	vpush	{d8}
 800b7b0:	b08d      	sub	sp, #52	; 0x34
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b7b8:	4616      	mov	r6, r2
 800b7ba:	461f      	mov	r7, r3
 800b7bc:	4605      	mov	r5, r0
 800b7be:	f000 fcd5 	bl	800c16c <_localeconv_r>
 800b7c2:	f8d0 a000 	ldr.w	sl, [r0]
 800b7c6:	4650      	mov	r0, sl
 800b7c8:	f7f4 fd72 	bl	80002b0 <strlen>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	9305      	str	r3, [sp, #20]
 800b7d4:	f8d8 3000 	ldr.w	r3, [r8]
 800b7d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b7dc:	3307      	adds	r3, #7
 800b7de:	f023 0307 	bic.w	r3, r3, #7
 800b7e2:	f103 0208 	add.w	r2, r3, #8
 800b7e6:	f8c8 2000 	str.w	r2, [r8]
 800b7ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7f2:	9307      	str	r3, [sp, #28]
 800b7f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b7f8:	ee08 0a10 	vmov	s16, r0
 800b7fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b804:	4b9e      	ldr	r3, [pc, #632]	; (800ba80 <_printf_float+0x2d8>)
 800b806:	f04f 32ff 	mov.w	r2, #4294967295
 800b80a:	f7f5 f9af 	bl	8000b6c <__aeabi_dcmpun>
 800b80e:	bb88      	cbnz	r0, 800b874 <_printf_float+0xcc>
 800b810:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b814:	4b9a      	ldr	r3, [pc, #616]	; (800ba80 <_printf_float+0x2d8>)
 800b816:	f04f 32ff 	mov.w	r2, #4294967295
 800b81a:	f7f5 f989 	bl	8000b30 <__aeabi_dcmple>
 800b81e:	bb48      	cbnz	r0, 800b874 <_printf_float+0xcc>
 800b820:	2200      	movs	r2, #0
 800b822:	2300      	movs	r3, #0
 800b824:	4640      	mov	r0, r8
 800b826:	4649      	mov	r1, r9
 800b828:	f7f5 f978 	bl	8000b1c <__aeabi_dcmplt>
 800b82c:	b110      	cbz	r0, 800b834 <_printf_float+0x8c>
 800b82e:	232d      	movs	r3, #45	; 0x2d
 800b830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b834:	4a93      	ldr	r2, [pc, #588]	; (800ba84 <_printf_float+0x2dc>)
 800b836:	4b94      	ldr	r3, [pc, #592]	; (800ba88 <_printf_float+0x2e0>)
 800b838:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b83c:	bf94      	ite	ls
 800b83e:	4690      	movls	r8, r2
 800b840:	4698      	movhi	r8, r3
 800b842:	2303      	movs	r3, #3
 800b844:	6123      	str	r3, [r4, #16]
 800b846:	9b05      	ldr	r3, [sp, #20]
 800b848:	f023 0304 	bic.w	r3, r3, #4
 800b84c:	6023      	str	r3, [r4, #0]
 800b84e:	f04f 0900 	mov.w	r9, #0
 800b852:	9700      	str	r7, [sp, #0]
 800b854:	4633      	mov	r3, r6
 800b856:	aa0b      	add	r2, sp, #44	; 0x2c
 800b858:	4621      	mov	r1, r4
 800b85a:	4628      	mov	r0, r5
 800b85c:	f000 f9da 	bl	800bc14 <_printf_common>
 800b860:	3001      	adds	r0, #1
 800b862:	f040 8090 	bne.w	800b986 <_printf_float+0x1de>
 800b866:	f04f 30ff 	mov.w	r0, #4294967295
 800b86a:	b00d      	add	sp, #52	; 0x34
 800b86c:	ecbd 8b02 	vpop	{d8}
 800b870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b874:	4642      	mov	r2, r8
 800b876:	464b      	mov	r3, r9
 800b878:	4640      	mov	r0, r8
 800b87a:	4649      	mov	r1, r9
 800b87c:	f7f5 f976 	bl	8000b6c <__aeabi_dcmpun>
 800b880:	b140      	cbz	r0, 800b894 <_printf_float+0xec>
 800b882:	464b      	mov	r3, r9
 800b884:	2b00      	cmp	r3, #0
 800b886:	bfbc      	itt	lt
 800b888:	232d      	movlt	r3, #45	; 0x2d
 800b88a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b88e:	4a7f      	ldr	r2, [pc, #508]	; (800ba8c <_printf_float+0x2e4>)
 800b890:	4b7f      	ldr	r3, [pc, #508]	; (800ba90 <_printf_float+0x2e8>)
 800b892:	e7d1      	b.n	800b838 <_printf_float+0x90>
 800b894:	6863      	ldr	r3, [r4, #4]
 800b896:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b89a:	9206      	str	r2, [sp, #24]
 800b89c:	1c5a      	adds	r2, r3, #1
 800b89e:	d13f      	bne.n	800b920 <_printf_float+0x178>
 800b8a0:	2306      	movs	r3, #6
 800b8a2:	6063      	str	r3, [r4, #4]
 800b8a4:	9b05      	ldr	r3, [sp, #20]
 800b8a6:	6861      	ldr	r1, [r4, #4]
 800b8a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	9303      	str	r3, [sp, #12]
 800b8b0:	ab0a      	add	r3, sp, #40	; 0x28
 800b8b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b8b6:	ab09      	add	r3, sp, #36	; 0x24
 800b8b8:	ec49 8b10 	vmov	d0, r8, r9
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	6022      	str	r2, [r4, #0]
 800b8c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	f7ff fecf 	bl	800b668 <__cvt>
 800b8ca:	9b06      	ldr	r3, [sp, #24]
 800b8cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8ce:	2b47      	cmp	r3, #71	; 0x47
 800b8d0:	4680      	mov	r8, r0
 800b8d2:	d108      	bne.n	800b8e6 <_printf_float+0x13e>
 800b8d4:	1cc8      	adds	r0, r1, #3
 800b8d6:	db02      	blt.n	800b8de <_printf_float+0x136>
 800b8d8:	6863      	ldr	r3, [r4, #4]
 800b8da:	4299      	cmp	r1, r3
 800b8dc:	dd41      	ble.n	800b962 <_printf_float+0x1ba>
 800b8de:	f1ab 0302 	sub.w	r3, fp, #2
 800b8e2:	fa5f fb83 	uxtb.w	fp, r3
 800b8e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b8ea:	d820      	bhi.n	800b92e <_printf_float+0x186>
 800b8ec:	3901      	subs	r1, #1
 800b8ee:	465a      	mov	r2, fp
 800b8f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b8f4:	9109      	str	r1, [sp, #36]	; 0x24
 800b8f6:	f7ff ff19 	bl	800b72c <__exponent>
 800b8fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8fc:	1813      	adds	r3, r2, r0
 800b8fe:	2a01      	cmp	r2, #1
 800b900:	4681      	mov	r9, r0
 800b902:	6123      	str	r3, [r4, #16]
 800b904:	dc02      	bgt.n	800b90c <_printf_float+0x164>
 800b906:	6822      	ldr	r2, [r4, #0]
 800b908:	07d2      	lsls	r2, r2, #31
 800b90a:	d501      	bpl.n	800b910 <_printf_float+0x168>
 800b90c:	3301      	adds	r3, #1
 800b90e:	6123      	str	r3, [r4, #16]
 800b910:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b914:	2b00      	cmp	r3, #0
 800b916:	d09c      	beq.n	800b852 <_printf_float+0xaa>
 800b918:	232d      	movs	r3, #45	; 0x2d
 800b91a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b91e:	e798      	b.n	800b852 <_printf_float+0xaa>
 800b920:	9a06      	ldr	r2, [sp, #24]
 800b922:	2a47      	cmp	r2, #71	; 0x47
 800b924:	d1be      	bne.n	800b8a4 <_printf_float+0xfc>
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1bc      	bne.n	800b8a4 <_printf_float+0xfc>
 800b92a:	2301      	movs	r3, #1
 800b92c:	e7b9      	b.n	800b8a2 <_printf_float+0xfa>
 800b92e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b932:	d118      	bne.n	800b966 <_printf_float+0x1be>
 800b934:	2900      	cmp	r1, #0
 800b936:	6863      	ldr	r3, [r4, #4]
 800b938:	dd0b      	ble.n	800b952 <_printf_float+0x1aa>
 800b93a:	6121      	str	r1, [r4, #16]
 800b93c:	b913      	cbnz	r3, 800b944 <_printf_float+0x19c>
 800b93e:	6822      	ldr	r2, [r4, #0]
 800b940:	07d0      	lsls	r0, r2, #31
 800b942:	d502      	bpl.n	800b94a <_printf_float+0x1a2>
 800b944:	3301      	adds	r3, #1
 800b946:	440b      	add	r3, r1
 800b948:	6123      	str	r3, [r4, #16]
 800b94a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b94c:	f04f 0900 	mov.w	r9, #0
 800b950:	e7de      	b.n	800b910 <_printf_float+0x168>
 800b952:	b913      	cbnz	r3, 800b95a <_printf_float+0x1b2>
 800b954:	6822      	ldr	r2, [r4, #0]
 800b956:	07d2      	lsls	r2, r2, #31
 800b958:	d501      	bpl.n	800b95e <_printf_float+0x1b6>
 800b95a:	3302      	adds	r3, #2
 800b95c:	e7f4      	b.n	800b948 <_printf_float+0x1a0>
 800b95e:	2301      	movs	r3, #1
 800b960:	e7f2      	b.n	800b948 <_printf_float+0x1a0>
 800b962:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b968:	4299      	cmp	r1, r3
 800b96a:	db05      	blt.n	800b978 <_printf_float+0x1d0>
 800b96c:	6823      	ldr	r3, [r4, #0]
 800b96e:	6121      	str	r1, [r4, #16]
 800b970:	07d8      	lsls	r0, r3, #31
 800b972:	d5ea      	bpl.n	800b94a <_printf_float+0x1a2>
 800b974:	1c4b      	adds	r3, r1, #1
 800b976:	e7e7      	b.n	800b948 <_printf_float+0x1a0>
 800b978:	2900      	cmp	r1, #0
 800b97a:	bfd4      	ite	le
 800b97c:	f1c1 0202 	rsble	r2, r1, #2
 800b980:	2201      	movgt	r2, #1
 800b982:	4413      	add	r3, r2
 800b984:	e7e0      	b.n	800b948 <_printf_float+0x1a0>
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	055a      	lsls	r2, r3, #21
 800b98a:	d407      	bmi.n	800b99c <_printf_float+0x1f4>
 800b98c:	6923      	ldr	r3, [r4, #16]
 800b98e:	4642      	mov	r2, r8
 800b990:	4631      	mov	r1, r6
 800b992:	4628      	mov	r0, r5
 800b994:	47b8      	blx	r7
 800b996:	3001      	adds	r0, #1
 800b998:	d12c      	bne.n	800b9f4 <_printf_float+0x24c>
 800b99a:	e764      	b.n	800b866 <_printf_float+0xbe>
 800b99c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b9a0:	f240 80e0 	bls.w	800bb64 <_printf_float+0x3bc>
 800b9a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	f7f5 f8ac 	bl	8000b08 <__aeabi_dcmpeq>
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d034      	beq.n	800ba1e <_printf_float+0x276>
 800b9b4:	4a37      	ldr	r2, [pc, #220]	; (800ba94 <_printf_float+0x2ec>)
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	47b8      	blx	r7
 800b9be:	3001      	adds	r0, #1
 800b9c0:	f43f af51 	beq.w	800b866 <_printf_float+0xbe>
 800b9c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	db02      	blt.n	800b9d2 <_printf_float+0x22a>
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	07d8      	lsls	r0, r3, #31
 800b9d0:	d510      	bpl.n	800b9f4 <_printf_float+0x24c>
 800b9d2:	ee18 3a10 	vmov	r3, s16
 800b9d6:	4652      	mov	r2, sl
 800b9d8:	4631      	mov	r1, r6
 800b9da:	4628      	mov	r0, r5
 800b9dc:	47b8      	blx	r7
 800b9de:	3001      	adds	r0, #1
 800b9e0:	f43f af41 	beq.w	800b866 <_printf_float+0xbe>
 800b9e4:	f04f 0800 	mov.w	r8, #0
 800b9e8:	f104 091a 	add.w	r9, r4, #26
 800b9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	4543      	cmp	r3, r8
 800b9f2:	dc09      	bgt.n	800ba08 <_printf_float+0x260>
 800b9f4:	6823      	ldr	r3, [r4, #0]
 800b9f6:	079b      	lsls	r3, r3, #30
 800b9f8:	f100 8107 	bmi.w	800bc0a <_printf_float+0x462>
 800b9fc:	68e0      	ldr	r0, [r4, #12]
 800b9fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba00:	4298      	cmp	r0, r3
 800ba02:	bfb8      	it	lt
 800ba04:	4618      	movlt	r0, r3
 800ba06:	e730      	b.n	800b86a <_printf_float+0xc2>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	464a      	mov	r2, r9
 800ba0c:	4631      	mov	r1, r6
 800ba0e:	4628      	mov	r0, r5
 800ba10:	47b8      	blx	r7
 800ba12:	3001      	adds	r0, #1
 800ba14:	f43f af27 	beq.w	800b866 <_printf_float+0xbe>
 800ba18:	f108 0801 	add.w	r8, r8, #1
 800ba1c:	e7e6      	b.n	800b9ec <_printf_float+0x244>
 800ba1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	dc39      	bgt.n	800ba98 <_printf_float+0x2f0>
 800ba24:	4a1b      	ldr	r2, [pc, #108]	; (800ba94 <_printf_float+0x2ec>)
 800ba26:	2301      	movs	r3, #1
 800ba28:	4631      	mov	r1, r6
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	47b8      	blx	r7
 800ba2e:	3001      	adds	r0, #1
 800ba30:	f43f af19 	beq.w	800b866 <_printf_float+0xbe>
 800ba34:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	d102      	bne.n	800ba42 <_printf_float+0x29a>
 800ba3c:	6823      	ldr	r3, [r4, #0]
 800ba3e:	07d9      	lsls	r1, r3, #31
 800ba40:	d5d8      	bpl.n	800b9f4 <_printf_float+0x24c>
 800ba42:	ee18 3a10 	vmov	r3, s16
 800ba46:	4652      	mov	r2, sl
 800ba48:	4631      	mov	r1, r6
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	47b8      	blx	r7
 800ba4e:	3001      	adds	r0, #1
 800ba50:	f43f af09 	beq.w	800b866 <_printf_float+0xbe>
 800ba54:	f04f 0900 	mov.w	r9, #0
 800ba58:	f104 0a1a 	add.w	sl, r4, #26
 800ba5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba5e:	425b      	negs	r3, r3
 800ba60:	454b      	cmp	r3, r9
 800ba62:	dc01      	bgt.n	800ba68 <_printf_float+0x2c0>
 800ba64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba66:	e792      	b.n	800b98e <_printf_float+0x1e6>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	4652      	mov	r2, sl
 800ba6c:	4631      	mov	r1, r6
 800ba6e:	4628      	mov	r0, r5
 800ba70:	47b8      	blx	r7
 800ba72:	3001      	adds	r0, #1
 800ba74:	f43f aef7 	beq.w	800b866 <_printf_float+0xbe>
 800ba78:	f109 0901 	add.w	r9, r9, #1
 800ba7c:	e7ee      	b.n	800ba5c <_printf_float+0x2b4>
 800ba7e:	bf00      	nop
 800ba80:	7fefffff 	.word	0x7fefffff
 800ba84:	0800e574 	.word	0x0800e574
 800ba88:	0800e578 	.word	0x0800e578
 800ba8c:	0800e57c 	.word	0x0800e57c
 800ba90:	0800e580 	.word	0x0800e580
 800ba94:	0800e584 	.word	0x0800e584
 800ba98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	bfa8      	it	ge
 800baa0:	461a      	movge	r2, r3
 800baa2:	2a00      	cmp	r2, #0
 800baa4:	4691      	mov	r9, r2
 800baa6:	dc37      	bgt.n	800bb18 <_printf_float+0x370>
 800baa8:	f04f 0b00 	mov.w	fp, #0
 800baac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bab0:	f104 021a 	add.w	r2, r4, #26
 800bab4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bab6:	9305      	str	r3, [sp, #20]
 800bab8:	eba3 0309 	sub.w	r3, r3, r9
 800babc:	455b      	cmp	r3, fp
 800babe:	dc33      	bgt.n	800bb28 <_printf_float+0x380>
 800bac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bac4:	429a      	cmp	r2, r3
 800bac6:	db3b      	blt.n	800bb40 <_printf_float+0x398>
 800bac8:	6823      	ldr	r3, [r4, #0]
 800baca:	07da      	lsls	r2, r3, #31
 800bacc:	d438      	bmi.n	800bb40 <_printf_float+0x398>
 800bace:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bad2:	eba2 0903 	sub.w	r9, r2, r3
 800bad6:	9b05      	ldr	r3, [sp, #20]
 800bad8:	1ad2      	subs	r2, r2, r3
 800bada:	4591      	cmp	r9, r2
 800badc:	bfa8      	it	ge
 800bade:	4691      	movge	r9, r2
 800bae0:	f1b9 0f00 	cmp.w	r9, #0
 800bae4:	dc35      	bgt.n	800bb52 <_printf_float+0x3aa>
 800bae6:	f04f 0800 	mov.w	r8, #0
 800baea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800baee:	f104 0a1a 	add.w	sl, r4, #26
 800baf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800baf6:	1a9b      	subs	r3, r3, r2
 800baf8:	eba3 0309 	sub.w	r3, r3, r9
 800bafc:	4543      	cmp	r3, r8
 800bafe:	f77f af79 	ble.w	800b9f4 <_printf_float+0x24c>
 800bb02:	2301      	movs	r3, #1
 800bb04:	4652      	mov	r2, sl
 800bb06:	4631      	mov	r1, r6
 800bb08:	4628      	mov	r0, r5
 800bb0a:	47b8      	blx	r7
 800bb0c:	3001      	adds	r0, #1
 800bb0e:	f43f aeaa 	beq.w	800b866 <_printf_float+0xbe>
 800bb12:	f108 0801 	add.w	r8, r8, #1
 800bb16:	e7ec      	b.n	800baf2 <_printf_float+0x34a>
 800bb18:	4613      	mov	r3, r2
 800bb1a:	4631      	mov	r1, r6
 800bb1c:	4642      	mov	r2, r8
 800bb1e:	4628      	mov	r0, r5
 800bb20:	47b8      	blx	r7
 800bb22:	3001      	adds	r0, #1
 800bb24:	d1c0      	bne.n	800baa8 <_printf_float+0x300>
 800bb26:	e69e      	b.n	800b866 <_printf_float+0xbe>
 800bb28:	2301      	movs	r3, #1
 800bb2a:	4631      	mov	r1, r6
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	9205      	str	r2, [sp, #20]
 800bb30:	47b8      	blx	r7
 800bb32:	3001      	adds	r0, #1
 800bb34:	f43f ae97 	beq.w	800b866 <_printf_float+0xbe>
 800bb38:	9a05      	ldr	r2, [sp, #20]
 800bb3a:	f10b 0b01 	add.w	fp, fp, #1
 800bb3e:	e7b9      	b.n	800bab4 <_printf_float+0x30c>
 800bb40:	ee18 3a10 	vmov	r3, s16
 800bb44:	4652      	mov	r2, sl
 800bb46:	4631      	mov	r1, r6
 800bb48:	4628      	mov	r0, r5
 800bb4a:	47b8      	blx	r7
 800bb4c:	3001      	adds	r0, #1
 800bb4e:	d1be      	bne.n	800bace <_printf_float+0x326>
 800bb50:	e689      	b.n	800b866 <_printf_float+0xbe>
 800bb52:	9a05      	ldr	r2, [sp, #20]
 800bb54:	464b      	mov	r3, r9
 800bb56:	4442      	add	r2, r8
 800bb58:	4631      	mov	r1, r6
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	47b8      	blx	r7
 800bb5e:	3001      	adds	r0, #1
 800bb60:	d1c1      	bne.n	800bae6 <_printf_float+0x33e>
 800bb62:	e680      	b.n	800b866 <_printf_float+0xbe>
 800bb64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb66:	2a01      	cmp	r2, #1
 800bb68:	dc01      	bgt.n	800bb6e <_printf_float+0x3c6>
 800bb6a:	07db      	lsls	r3, r3, #31
 800bb6c:	d53a      	bpl.n	800bbe4 <_printf_float+0x43c>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	4642      	mov	r2, r8
 800bb72:	4631      	mov	r1, r6
 800bb74:	4628      	mov	r0, r5
 800bb76:	47b8      	blx	r7
 800bb78:	3001      	adds	r0, #1
 800bb7a:	f43f ae74 	beq.w	800b866 <_printf_float+0xbe>
 800bb7e:	ee18 3a10 	vmov	r3, s16
 800bb82:	4652      	mov	r2, sl
 800bb84:	4631      	mov	r1, r6
 800bb86:	4628      	mov	r0, r5
 800bb88:	47b8      	blx	r7
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	f43f ae6b 	beq.w	800b866 <_printf_float+0xbe>
 800bb90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb94:	2200      	movs	r2, #0
 800bb96:	2300      	movs	r3, #0
 800bb98:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bb9c:	f7f4 ffb4 	bl	8000b08 <__aeabi_dcmpeq>
 800bba0:	b9d8      	cbnz	r0, 800bbda <_printf_float+0x432>
 800bba2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bba6:	f108 0201 	add.w	r2, r8, #1
 800bbaa:	4631      	mov	r1, r6
 800bbac:	4628      	mov	r0, r5
 800bbae:	47b8      	blx	r7
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	d10e      	bne.n	800bbd2 <_printf_float+0x42a>
 800bbb4:	e657      	b.n	800b866 <_printf_float+0xbe>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	4652      	mov	r2, sl
 800bbba:	4631      	mov	r1, r6
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	47b8      	blx	r7
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	f43f ae50 	beq.w	800b866 <_printf_float+0xbe>
 800bbc6:	f108 0801 	add.w	r8, r8, #1
 800bbca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	4543      	cmp	r3, r8
 800bbd0:	dcf1      	bgt.n	800bbb6 <_printf_float+0x40e>
 800bbd2:	464b      	mov	r3, r9
 800bbd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bbd8:	e6da      	b.n	800b990 <_printf_float+0x1e8>
 800bbda:	f04f 0800 	mov.w	r8, #0
 800bbde:	f104 0a1a 	add.w	sl, r4, #26
 800bbe2:	e7f2      	b.n	800bbca <_printf_float+0x422>
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	4642      	mov	r2, r8
 800bbe8:	e7df      	b.n	800bbaa <_printf_float+0x402>
 800bbea:	2301      	movs	r3, #1
 800bbec:	464a      	mov	r2, r9
 800bbee:	4631      	mov	r1, r6
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	47b8      	blx	r7
 800bbf4:	3001      	adds	r0, #1
 800bbf6:	f43f ae36 	beq.w	800b866 <_printf_float+0xbe>
 800bbfa:	f108 0801 	add.w	r8, r8, #1
 800bbfe:	68e3      	ldr	r3, [r4, #12]
 800bc00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc02:	1a5b      	subs	r3, r3, r1
 800bc04:	4543      	cmp	r3, r8
 800bc06:	dcf0      	bgt.n	800bbea <_printf_float+0x442>
 800bc08:	e6f8      	b.n	800b9fc <_printf_float+0x254>
 800bc0a:	f04f 0800 	mov.w	r8, #0
 800bc0e:	f104 0919 	add.w	r9, r4, #25
 800bc12:	e7f4      	b.n	800bbfe <_printf_float+0x456>

0800bc14 <_printf_common>:
 800bc14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc18:	4616      	mov	r6, r2
 800bc1a:	4699      	mov	r9, r3
 800bc1c:	688a      	ldr	r2, [r1, #8]
 800bc1e:	690b      	ldr	r3, [r1, #16]
 800bc20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc24:	4293      	cmp	r3, r2
 800bc26:	bfb8      	it	lt
 800bc28:	4613      	movlt	r3, r2
 800bc2a:	6033      	str	r3, [r6, #0]
 800bc2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc30:	4607      	mov	r7, r0
 800bc32:	460c      	mov	r4, r1
 800bc34:	b10a      	cbz	r2, 800bc3a <_printf_common+0x26>
 800bc36:	3301      	adds	r3, #1
 800bc38:	6033      	str	r3, [r6, #0]
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	0699      	lsls	r1, r3, #26
 800bc3e:	bf42      	ittt	mi
 800bc40:	6833      	ldrmi	r3, [r6, #0]
 800bc42:	3302      	addmi	r3, #2
 800bc44:	6033      	strmi	r3, [r6, #0]
 800bc46:	6825      	ldr	r5, [r4, #0]
 800bc48:	f015 0506 	ands.w	r5, r5, #6
 800bc4c:	d106      	bne.n	800bc5c <_printf_common+0x48>
 800bc4e:	f104 0a19 	add.w	sl, r4, #25
 800bc52:	68e3      	ldr	r3, [r4, #12]
 800bc54:	6832      	ldr	r2, [r6, #0]
 800bc56:	1a9b      	subs	r3, r3, r2
 800bc58:	42ab      	cmp	r3, r5
 800bc5a:	dc26      	bgt.n	800bcaa <_printf_common+0x96>
 800bc5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc60:	1e13      	subs	r3, r2, #0
 800bc62:	6822      	ldr	r2, [r4, #0]
 800bc64:	bf18      	it	ne
 800bc66:	2301      	movne	r3, #1
 800bc68:	0692      	lsls	r2, r2, #26
 800bc6a:	d42b      	bmi.n	800bcc4 <_printf_common+0xb0>
 800bc6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc70:	4649      	mov	r1, r9
 800bc72:	4638      	mov	r0, r7
 800bc74:	47c0      	blx	r8
 800bc76:	3001      	adds	r0, #1
 800bc78:	d01e      	beq.n	800bcb8 <_printf_common+0xa4>
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	6922      	ldr	r2, [r4, #16]
 800bc7e:	f003 0306 	and.w	r3, r3, #6
 800bc82:	2b04      	cmp	r3, #4
 800bc84:	bf02      	ittt	eq
 800bc86:	68e5      	ldreq	r5, [r4, #12]
 800bc88:	6833      	ldreq	r3, [r6, #0]
 800bc8a:	1aed      	subeq	r5, r5, r3
 800bc8c:	68a3      	ldr	r3, [r4, #8]
 800bc8e:	bf0c      	ite	eq
 800bc90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc94:	2500      	movne	r5, #0
 800bc96:	4293      	cmp	r3, r2
 800bc98:	bfc4      	itt	gt
 800bc9a:	1a9b      	subgt	r3, r3, r2
 800bc9c:	18ed      	addgt	r5, r5, r3
 800bc9e:	2600      	movs	r6, #0
 800bca0:	341a      	adds	r4, #26
 800bca2:	42b5      	cmp	r5, r6
 800bca4:	d11a      	bne.n	800bcdc <_printf_common+0xc8>
 800bca6:	2000      	movs	r0, #0
 800bca8:	e008      	b.n	800bcbc <_printf_common+0xa8>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	4652      	mov	r2, sl
 800bcae:	4649      	mov	r1, r9
 800bcb0:	4638      	mov	r0, r7
 800bcb2:	47c0      	blx	r8
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	d103      	bne.n	800bcc0 <_printf_common+0xac>
 800bcb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc0:	3501      	adds	r5, #1
 800bcc2:	e7c6      	b.n	800bc52 <_printf_common+0x3e>
 800bcc4:	18e1      	adds	r1, r4, r3
 800bcc6:	1c5a      	adds	r2, r3, #1
 800bcc8:	2030      	movs	r0, #48	; 0x30
 800bcca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcce:	4422      	add	r2, r4
 800bcd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcd8:	3302      	adds	r3, #2
 800bcda:	e7c7      	b.n	800bc6c <_printf_common+0x58>
 800bcdc:	2301      	movs	r3, #1
 800bcde:	4622      	mov	r2, r4
 800bce0:	4649      	mov	r1, r9
 800bce2:	4638      	mov	r0, r7
 800bce4:	47c0      	blx	r8
 800bce6:	3001      	adds	r0, #1
 800bce8:	d0e6      	beq.n	800bcb8 <_printf_common+0xa4>
 800bcea:	3601      	adds	r6, #1
 800bcec:	e7d9      	b.n	800bca2 <_printf_common+0x8e>
	...

0800bcf0 <_printf_i>:
 800bcf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcf4:	7e0f      	ldrb	r7, [r1, #24]
 800bcf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bcf8:	2f78      	cmp	r7, #120	; 0x78
 800bcfa:	4691      	mov	r9, r2
 800bcfc:	4680      	mov	r8, r0
 800bcfe:	460c      	mov	r4, r1
 800bd00:	469a      	mov	sl, r3
 800bd02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd06:	d807      	bhi.n	800bd18 <_printf_i+0x28>
 800bd08:	2f62      	cmp	r7, #98	; 0x62
 800bd0a:	d80a      	bhi.n	800bd22 <_printf_i+0x32>
 800bd0c:	2f00      	cmp	r7, #0
 800bd0e:	f000 80d4 	beq.w	800beba <_printf_i+0x1ca>
 800bd12:	2f58      	cmp	r7, #88	; 0x58
 800bd14:	f000 80c0 	beq.w	800be98 <_printf_i+0x1a8>
 800bd18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd20:	e03a      	b.n	800bd98 <_printf_i+0xa8>
 800bd22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd26:	2b15      	cmp	r3, #21
 800bd28:	d8f6      	bhi.n	800bd18 <_printf_i+0x28>
 800bd2a:	a101      	add	r1, pc, #4	; (adr r1, 800bd30 <_printf_i+0x40>)
 800bd2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd30:	0800bd89 	.word	0x0800bd89
 800bd34:	0800bd9d 	.word	0x0800bd9d
 800bd38:	0800bd19 	.word	0x0800bd19
 800bd3c:	0800bd19 	.word	0x0800bd19
 800bd40:	0800bd19 	.word	0x0800bd19
 800bd44:	0800bd19 	.word	0x0800bd19
 800bd48:	0800bd9d 	.word	0x0800bd9d
 800bd4c:	0800bd19 	.word	0x0800bd19
 800bd50:	0800bd19 	.word	0x0800bd19
 800bd54:	0800bd19 	.word	0x0800bd19
 800bd58:	0800bd19 	.word	0x0800bd19
 800bd5c:	0800bea1 	.word	0x0800bea1
 800bd60:	0800bdc9 	.word	0x0800bdc9
 800bd64:	0800be5b 	.word	0x0800be5b
 800bd68:	0800bd19 	.word	0x0800bd19
 800bd6c:	0800bd19 	.word	0x0800bd19
 800bd70:	0800bec3 	.word	0x0800bec3
 800bd74:	0800bd19 	.word	0x0800bd19
 800bd78:	0800bdc9 	.word	0x0800bdc9
 800bd7c:	0800bd19 	.word	0x0800bd19
 800bd80:	0800bd19 	.word	0x0800bd19
 800bd84:	0800be63 	.word	0x0800be63
 800bd88:	682b      	ldr	r3, [r5, #0]
 800bd8a:	1d1a      	adds	r2, r3, #4
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	602a      	str	r2, [r5, #0]
 800bd90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e09f      	b.n	800bedc <_printf_i+0x1ec>
 800bd9c:	6820      	ldr	r0, [r4, #0]
 800bd9e:	682b      	ldr	r3, [r5, #0]
 800bda0:	0607      	lsls	r7, r0, #24
 800bda2:	f103 0104 	add.w	r1, r3, #4
 800bda6:	6029      	str	r1, [r5, #0]
 800bda8:	d501      	bpl.n	800bdae <_printf_i+0xbe>
 800bdaa:	681e      	ldr	r6, [r3, #0]
 800bdac:	e003      	b.n	800bdb6 <_printf_i+0xc6>
 800bdae:	0646      	lsls	r6, r0, #25
 800bdb0:	d5fb      	bpl.n	800bdaa <_printf_i+0xba>
 800bdb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bdb6:	2e00      	cmp	r6, #0
 800bdb8:	da03      	bge.n	800bdc2 <_printf_i+0xd2>
 800bdba:	232d      	movs	r3, #45	; 0x2d
 800bdbc:	4276      	negs	r6, r6
 800bdbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdc2:	485a      	ldr	r0, [pc, #360]	; (800bf2c <_printf_i+0x23c>)
 800bdc4:	230a      	movs	r3, #10
 800bdc6:	e012      	b.n	800bdee <_printf_i+0xfe>
 800bdc8:	682b      	ldr	r3, [r5, #0]
 800bdca:	6820      	ldr	r0, [r4, #0]
 800bdcc:	1d19      	adds	r1, r3, #4
 800bdce:	6029      	str	r1, [r5, #0]
 800bdd0:	0605      	lsls	r5, r0, #24
 800bdd2:	d501      	bpl.n	800bdd8 <_printf_i+0xe8>
 800bdd4:	681e      	ldr	r6, [r3, #0]
 800bdd6:	e002      	b.n	800bdde <_printf_i+0xee>
 800bdd8:	0641      	lsls	r1, r0, #25
 800bdda:	d5fb      	bpl.n	800bdd4 <_printf_i+0xe4>
 800bddc:	881e      	ldrh	r6, [r3, #0]
 800bdde:	4853      	ldr	r0, [pc, #332]	; (800bf2c <_printf_i+0x23c>)
 800bde0:	2f6f      	cmp	r7, #111	; 0x6f
 800bde2:	bf0c      	ite	eq
 800bde4:	2308      	moveq	r3, #8
 800bde6:	230a      	movne	r3, #10
 800bde8:	2100      	movs	r1, #0
 800bdea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdee:	6865      	ldr	r5, [r4, #4]
 800bdf0:	60a5      	str	r5, [r4, #8]
 800bdf2:	2d00      	cmp	r5, #0
 800bdf4:	bfa2      	ittt	ge
 800bdf6:	6821      	ldrge	r1, [r4, #0]
 800bdf8:	f021 0104 	bicge.w	r1, r1, #4
 800bdfc:	6021      	strge	r1, [r4, #0]
 800bdfe:	b90e      	cbnz	r6, 800be04 <_printf_i+0x114>
 800be00:	2d00      	cmp	r5, #0
 800be02:	d04b      	beq.n	800be9c <_printf_i+0x1ac>
 800be04:	4615      	mov	r5, r2
 800be06:	fbb6 f1f3 	udiv	r1, r6, r3
 800be0a:	fb03 6711 	mls	r7, r3, r1, r6
 800be0e:	5dc7      	ldrb	r7, [r0, r7]
 800be10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be14:	4637      	mov	r7, r6
 800be16:	42bb      	cmp	r3, r7
 800be18:	460e      	mov	r6, r1
 800be1a:	d9f4      	bls.n	800be06 <_printf_i+0x116>
 800be1c:	2b08      	cmp	r3, #8
 800be1e:	d10b      	bne.n	800be38 <_printf_i+0x148>
 800be20:	6823      	ldr	r3, [r4, #0]
 800be22:	07de      	lsls	r6, r3, #31
 800be24:	d508      	bpl.n	800be38 <_printf_i+0x148>
 800be26:	6923      	ldr	r3, [r4, #16]
 800be28:	6861      	ldr	r1, [r4, #4]
 800be2a:	4299      	cmp	r1, r3
 800be2c:	bfde      	ittt	le
 800be2e:	2330      	movle	r3, #48	; 0x30
 800be30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be34:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be38:	1b52      	subs	r2, r2, r5
 800be3a:	6122      	str	r2, [r4, #16]
 800be3c:	f8cd a000 	str.w	sl, [sp]
 800be40:	464b      	mov	r3, r9
 800be42:	aa03      	add	r2, sp, #12
 800be44:	4621      	mov	r1, r4
 800be46:	4640      	mov	r0, r8
 800be48:	f7ff fee4 	bl	800bc14 <_printf_common>
 800be4c:	3001      	adds	r0, #1
 800be4e:	d14a      	bne.n	800bee6 <_printf_i+0x1f6>
 800be50:	f04f 30ff 	mov.w	r0, #4294967295
 800be54:	b004      	add	sp, #16
 800be56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	f043 0320 	orr.w	r3, r3, #32
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	4833      	ldr	r0, [pc, #204]	; (800bf30 <_printf_i+0x240>)
 800be64:	2778      	movs	r7, #120	; 0x78
 800be66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800be6a:	6823      	ldr	r3, [r4, #0]
 800be6c:	6829      	ldr	r1, [r5, #0]
 800be6e:	061f      	lsls	r7, r3, #24
 800be70:	f851 6b04 	ldr.w	r6, [r1], #4
 800be74:	d402      	bmi.n	800be7c <_printf_i+0x18c>
 800be76:	065f      	lsls	r7, r3, #25
 800be78:	bf48      	it	mi
 800be7a:	b2b6      	uxthmi	r6, r6
 800be7c:	07df      	lsls	r7, r3, #31
 800be7e:	bf48      	it	mi
 800be80:	f043 0320 	orrmi.w	r3, r3, #32
 800be84:	6029      	str	r1, [r5, #0]
 800be86:	bf48      	it	mi
 800be88:	6023      	strmi	r3, [r4, #0]
 800be8a:	b91e      	cbnz	r6, 800be94 <_printf_i+0x1a4>
 800be8c:	6823      	ldr	r3, [r4, #0]
 800be8e:	f023 0320 	bic.w	r3, r3, #32
 800be92:	6023      	str	r3, [r4, #0]
 800be94:	2310      	movs	r3, #16
 800be96:	e7a7      	b.n	800bde8 <_printf_i+0xf8>
 800be98:	4824      	ldr	r0, [pc, #144]	; (800bf2c <_printf_i+0x23c>)
 800be9a:	e7e4      	b.n	800be66 <_printf_i+0x176>
 800be9c:	4615      	mov	r5, r2
 800be9e:	e7bd      	b.n	800be1c <_printf_i+0x12c>
 800bea0:	682b      	ldr	r3, [r5, #0]
 800bea2:	6826      	ldr	r6, [r4, #0]
 800bea4:	6961      	ldr	r1, [r4, #20]
 800bea6:	1d18      	adds	r0, r3, #4
 800bea8:	6028      	str	r0, [r5, #0]
 800beaa:	0635      	lsls	r5, r6, #24
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	d501      	bpl.n	800beb4 <_printf_i+0x1c4>
 800beb0:	6019      	str	r1, [r3, #0]
 800beb2:	e002      	b.n	800beba <_printf_i+0x1ca>
 800beb4:	0670      	lsls	r0, r6, #25
 800beb6:	d5fb      	bpl.n	800beb0 <_printf_i+0x1c0>
 800beb8:	8019      	strh	r1, [r3, #0]
 800beba:	2300      	movs	r3, #0
 800bebc:	6123      	str	r3, [r4, #16]
 800bebe:	4615      	mov	r5, r2
 800bec0:	e7bc      	b.n	800be3c <_printf_i+0x14c>
 800bec2:	682b      	ldr	r3, [r5, #0]
 800bec4:	1d1a      	adds	r2, r3, #4
 800bec6:	602a      	str	r2, [r5, #0]
 800bec8:	681d      	ldr	r5, [r3, #0]
 800beca:	6862      	ldr	r2, [r4, #4]
 800becc:	2100      	movs	r1, #0
 800bece:	4628      	mov	r0, r5
 800bed0:	f7f4 f99e 	bl	8000210 <memchr>
 800bed4:	b108      	cbz	r0, 800beda <_printf_i+0x1ea>
 800bed6:	1b40      	subs	r0, r0, r5
 800bed8:	6060      	str	r0, [r4, #4]
 800beda:	6863      	ldr	r3, [r4, #4]
 800bedc:	6123      	str	r3, [r4, #16]
 800bede:	2300      	movs	r3, #0
 800bee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bee4:	e7aa      	b.n	800be3c <_printf_i+0x14c>
 800bee6:	6923      	ldr	r3, [r4, #16]
 800bee8:	462a      	mov	r2, r5
 800beea:	4649      	mov	r1, r9
 800beec:	4640      	mov	r0, r8
 800beee:	47d0      	blx	sl
 800bef0:	3001      	adds	r0, #1
 800bef2:	d0ad      	beq.n	800be50 <_printf_i+0x160>
 800bef4:	6823      	ldr	r3, [r4, #0]
 800bef6:	079b      	lsls	r3, r3, #30
 800bef8:	d413      	bmi.n	800bf22 <_printf_i+0x232>
 800befa:	68e0      	ldr	r0, [r4, #12]
 800befc:	9b03      	ldr	r3, [sp, #12]
 800befe:	4298      	cmp	r0, r3
 800bf00:	bfb8      	it	lt
 800bf02:	4618      	movlt	r0, r3
 800bf04:	e7a6      	b.n	800be54 <_printf_i+0x164>
 800bf06:	2301      	movs	r3, #1
 800bf08:	4632      	mov	r2, r6
 800bf0a:	4649      	mov	r1, r9
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	47d0      	blx	sl
 800bf10:	3001      	adds	r0, #1
 800bf12:	d09d      	beq.n	800be50 <_printf_i+0x160>
 800bf14:	3501      	adds	r5, #1
 800bf16:	68e3      	ldr	r3, [r4, #12]
 800bf18:	9903      	ldr	r1, [sp, #12]
 800bf1a:	1a5b      	subs	r3, r3, r1
 800bf1c:	42ab      	cmp	r3, r5
 800bf1e:	dcf2      	bgt.n	800bf06 <_printf_i+0x216>
 800bf20:	e7eb      	b.n	800befa <_printf_i+0x20a>
 800bf22:	2500      	movs	r5, #0
 800bf24:	f104 0619 	add.w	r6, r4, #25
 800bf28:	e7f5      	b.n	800bf16 <_printf_i+0x226>
 800bf2a:	bf00      	nop
 800bf2c:	0800e586 	.word	0x0800e586
 800bf30:	0800e597 	.word	0x0800e597

0800bf34 <std>:
 800bf34:	2300      	movs	r3, #0
 800bf36:	b510      	push	{r4, lr}
 800bf38:	4604      	mov	r4, r0
 800bf3a:	e9c0 3300 	strd	r3, r3, [r0]
 800bf3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf42:	6083      	str	r3, [r0, #8]
 800bf44:	8181      	strh	r1, [r0, #12]
 800bf46:	6643      	str	r3, [r0, #100]	; 0x64
 800bf48:	81c2      	strh	r2, [r0, #14]
 800bf4a:	6183      	str	r3, [r0, #24]
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	2208      	movs	r2, #8
 800bf50:	305c      	adds	r0, #92	; 0x5c
 800bf52:	f000 f902 	bl	800c15a <memset>
 800bf56:	4b05      	ldr	r3, [pc, #20]	; (800bf6c <std+0x38>)
 800bf58:	6263      	str	r3, [r4, #36]	; 0x24
 800bf5a:	4b05      	ldr	r3, [pc, #20]	; (800bf70 <std+0x3c>)
 800bf5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf5e:	4b05      	ldr	r3, [pc, #20]	; (800bf74 <std+0x40>)
 800bf60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf62:	4b05      	ldr	r3, [pc, #20]	; (800bf78 <std+0x44>)
 800bf64:	6224      	str	r4, [r4, #32]
 800bf66:	6323      	str	r3, [r4, #48]	; 0x30
 800bf68:	bd10      	pop	{r4, pc}
 800bf6a:	bf00      	nop
 800bf6c:	0800c0d5 	.word	0x0800c0d5
 800bf70:	0800c0f7 	.word	0x0800c0f7
 800bf74:	0800c12f 	.word	0x0800c12f
 800bf78:	0800c153 	.word	0x0800c153

0800bf7c <stdio_exit_handler>:
 800bf7c:	4a02      	ldr	r2, [pc, #8]	; (800bf88 <stdio_exit_handler+0xc>)
 800bf7e:	4903      	ldr	r1, [pc, #12]	; (800bf8c <stdio_exit_handler+0x10>)
 800bf80:	4803      	ldr	r0, [pc, #12]	; (800bf90 <stdio_exit_handler+0x14>)
 800bf82:	f000 b869 	b.w	800c058 <_fwalk_sglue>
 800bf86:	bf00      	nop
 800bf88:	20000028 	.word	0x20000028
 800bf8c:	0800dcc9 	.word	0x0800dcc9
 800bf90:	20000034 	.word	0x20000034

0800bf94 <cleanup_stdio>:
 800bf94:	6841      	ldr	r1, [r0, #4]
 800bf96:	4b0c      	ldr	r3, [pc, #48]	; (800bfc8 <cleanup_stdio+0x34>)
 800bf98:	4299      	cmp	r1, r3
 800bf9a:	b510      	push	{r4, lr}
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	d001      	beq.n	800bfa4 <cleanup_stdio+0x10>
 800bfa0:	f001 fe92 	bl	800dcc8 <_fflush_r>
 800bfa4:	68a1      	ldr	r1, [r4, #8]
 800bfa6:	4b09      	ldr	r3, [pc, #36]	; (800bfcc <cleanup_stdio+0x38>)
 800bfa8:	4299      	cmp	r1, r3
 800bfaa:	d002      	beq.n	800bfb2 <cleanup_stdio+0x1e>
 800bfac:	4620      	mov	r0, r4
 800bfae:	f001 fe8b 	bl	800dcc8 <_fflush_r>
 800bfb2:	68e1      	ldr	r1, [r4, #12]
 800bfb4:	4b06      	ldr	r3, [pc, #24]	; (800bfd0 <cleanup_stdio+0x3c>)
 800bfb6:	4299      	cmp	r1, r3
 800bfb8:	d004      	beq.n	800bfc4 <cleanup_stdio+0x30>
 800bfba:	4620      	mov	r0, r4
 800bfbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfc0:	f001 be82 	b.w	800dcc8 <_fflush_r>
 800bfc4:	bd10      	pop	{r4, pc}
 800bfc6:	bf00      	nop
 800bfc8:	20005780 	.word	0x20005780
 800bfcc:	200057e8 	.word	0x200057e8
 800bfd0:	20005850 	.word	0x20005850

0800bfd4 <global_stdio_init.part.0>:
 800bfd4:	b510      	push	{r4, lr}
 800bfd6:	4b0b      	ldr	r3, [pc, #44]	; (800c004 <global_stdio_init.part.0+0x30>)
 800bfd8:	4c0b      	ldr	r4, [pc, #44]	; (800c008 <global_stdio_init.part.0+0x34>)
 800bfda:	4a0c      	ldr	r2, [pc, #48]	; (800c00c <global_stdio_init.part.0+0x38>)
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	4620      	mov	r0, r4
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	2104      	movs	r1, #4
 800bfe4:	f7ff ffa6 	bl	800bf34 <std>
 800bfe8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bfec:	2201      	movs	r2, #1
 800bfee:	2109      	movs	r1, #9
 800bff0:	f7ff ffa0 	bl	800bf34 <std>
 800bff4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bff8:	2202      	movs	r2, #2
 800bffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bffe:	2112      	movs	r1, #18
 800c000:	f7ff bf98 	b.w	800bf34 <std>
 800c004:	200058b8 	.word	0x200058b8
 800c008:	20005780 	.word	0x20005780
 800c00c:	0800bf7d 	.word	0x0800bf7d

0800c010 <__sfp_lock_acquire>:
 800c010:	4801      	ldr	r0, [pc, #4]	; (800c018 <__sfp_lock_acquire+0x8>)
 800c012:	f000 b975 	b.w	800c300 <__retarget_lock_acquire_recursive>
 800c016:	bf00      	nop
 800c018:	200058c1 	.word	0x200058c1

0800c01c <__sfp_lock_release>:
 800c01c:	4801      	ldr	r0, [pc, #4]	; (800c024 <__sfp_lock_release+0x8>)
 800c01e:	f000 b970 	b.w	800c302 <__retarget_lock_release_recursive>
 800c022:	bf00      	nop
 800c024:	200058c1 	.word	0x200058c1

0800c028 <__sinit>:
 800c028:	b510      	push	{r4, lr}
 800c02a:	4604      	mov	r4, r0
 800c02c:	f7ff fff0 	bl	800c010 <__sfp_lock_acquire>
 800c030:	6a23      	ldr	r3, [r4, #32]
 800c032:	b11b      	cbz	r3, 800c03c <__sinit+0x14>
 800c034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c038:	f7ff bff0 	b.w	800c01c <__sfp_lock_release>
 800c03c:	4b04      	ldr	r3, [pc, #16]	; (800c050 <__sinit+0x28>)
 800c03e:	6223      	str	r3, [r4, #32]
 800c040:	4b04      	ldr	r3, [pc, #16]	; (800c054 <__sinit+0x2c>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1f5      	bne.n	800c034 <__sinit+0xc>
 800c048:	f7ff ffc4 	bl	800bfd4 <global_stdio_init.part.0>
 800c04c:	e7f2      	b.n	800c034 <__sinit+0xc>
 800c04e:	bf00      	nop
 800c050:	0800bf95 	.word	0x0800bf95
 800c054:	200058b8 	.word	0x200058b8

0800c058 <_fwalk_sglue>:
 800c058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c05c:	4607      	mov	r7, r0
 800c05e:	4688      	mov	r8, r1
 800c060:	4614      	mov	r4, r2
 800c062:	2600      	movs	r6, #0
 800c064:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c068:	f1b9 0901 	subs.w	r9, r9, #1
 800c06c:	d505      	bpl.n	800c07a <_fwalk_sglue+0x22>
 800c06e:	6824      	ldr	r4, [r4, #0]
 800c070:	2c00      	cmp	r4, #0
 800c072:	d1f7      	bne.n	800c064 <_fwalk_sglue+0xc>
 800c074:	4630      	mov	r0, r6
 800c076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c07a:	89ab      	ldrh	r3, [r5, #12]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d907      	bls.n	800c090 <_fwalk_sglue+0x38>
 800c080:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c084:	3301      	adds	r3, #1
 800c086:	d003      	beq.n	800c090 <_fwalk_sglue+0x38>
 800c088:	4629      	mov	r1, r5
 800c08a:	4638      	mov	r0, r7
 800c08c:	47c0      	blx	r8
 800c08e:	4306      	orrs	r6, r0
 800c090:	3568      	adds	r5, #104	; 0x68
 800c092:	e7e9      	b.n	800c068 <_fwalk_sglue+0x10>

0800c094 <siprintf>:
 800c094:	b40e      	push	{r1, r2, r3}
 800c096:	b500      	push	{lr}
 800c098:	b09c      	sub	sp, #112	; 0x70
 800c09a:	ab1d      	add	r3, sp, #116	; 0x74
 800c09c:	9002      	str	r0, [sp, #8]
 800c09e:	9006      	str	r0, [sp, #24]
 800c0a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0a4:	4809      	ldr	r0, [pc, #36]	; (800c0cc <siprintf+0x38>)
 800c0a6:	9107      	str	r1, [sp, #28]
 800c0a8:	9104      	str	r1, [sp, #16]
 800c0aa:	4909      	ldr	r1, [pc, #36]	; (800c0d0 <siprintf+0x3c>)
 800c0ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0b0:	9105      	str	r1, [sp, #20]
 800c0b2:	6800      	ldr	r0, [r0, #0]
 800c0b4:	9301      	str	r3, [sp, #4]
 800c0b6:	a902      	add	r1, sp, #8
 800c0b8:	f001 fc82 	bl	800d9c0 <_svfiprintf_r>
 800c0bc:	9b02      	ldr	r3, [sp, #8]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	701a      	strb	r2, [r3, #0]
 800c0c2:	b01c      	add	sp, #112	; 0x70
 800c0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0c8:	b003      	add	sp, #12
 800c0ca:	4770      	bx	lr
 800c0cc:	20000080 	.word	0x20000080
 800c0d0:	ffff0208 	.word	0xffff0208

0800c0d4 <__sread>:
 800c0d4:	b510      	push	{r4, lr}
 800c0d6:	460c      	mov	r4, r1
 800c0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0dc:	f000 f8c2 	bl	800c264 <_read_r>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	bfab      	itete	ge
 800c0e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0e6:	89a3      	ldrhlt	r3, [r4, #12]
 800c0e8:	181b      	addge	r3, r3, r0
 800c0ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0ee:	bfac      	ite	ge
 800c0f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0f2:	81a3      	strhlt	r3, [r4, #12]
 800c0f4:	bd10      	pop	{r4, pc}

0800c0f6 <__swrite>:
 800c0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0fa:	461f      	mov	r7, r3
 800c0fc:	898b      	ldrh	r3, [r1, #12]
 800c0fe:	05db      	lsls	r3, r3, #23
 800c100:	4605      	mov	r5, r0
 800c102:	460c      	mov	r4, r1
 800c104:	4616      	mov	r6, r2
 800c106:	d505      	bpl.n	800c114 <__swrite+0x1e>
 800c108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c10c:	2302      	movs	r3, #2
 800c10e:	2200      	movs	r2, #0
 800c110:	f000 f896 	bl	800c240 <_lseek_r>
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c11a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c11e:	81a3      	strh	r3, [r4, #12]
 800c120:	4632      	mov	r2, r6
 800c122:	463b      	mov	r3, r7
 800c124:	4628      	mov	r0, r5
 800c126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c12a:	f000 b8ad 	b.w	800c288 <_write_r>

0800c12e <__sseek>:
 800c12e:	b510      	push	{r4, lr}
 800c130:	460c      	mov	r4, r1
 800c132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c136:	f000 f883 	bl	800c240 <_lseek_r>
 800c13a:	1c43      	adds	r3, r0, #1
 800c13c:	89a3      	ldrh	r3, [r4, #12]
 800c13e:	bf15      	itete	ne
 800c140:	6560      	strne	r0, [r4, #84]	; 0x54
 800c142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c14a:	81a3      	strheq	r3, [r4, #12]
 800c14c:	bf18      	it	ne
 800c14e:	81a3      	strhne	r3, [r4, #12]
 800c150:	bd10      	pop	{r4, pc}

0800c152 <__sclose>:
 800c152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c156:	f000 b80d 	b.w	800c174 <_close_r>

0800c15a <memset>:
 800c15a:	4402      	add	r2, r0
 800c15c:	4603      	mov	r3, r0
 800c15e:	4293      	cmp	r3, r2
 800c160:	d100      	bne.n	800c164 <memset+0xa>
 800c162:	4770      	bx	lr
 800c164:	f803 1b01 	strb.w	r1, [r3], #1
 800c168:	e7f9      	b.n	800c15e <memset+0x4>
	...

0800c16c <_localeconv_r>:
 800c16c:	4800      	ldr	r0, [pc, #0]	; (800c170 <_localeconv_r+0x4>)
 800c16e:	4770      	bx	lr
 800c170:	20000174 	.word	0x20000174

0800c174 <_close_r>:
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	4d06      	ldr	r5, [pc, #24]	; (800c190 <_close_r+0x1c>)
 800c178:	2300      	movs	r3, #0
 800c17a:	4604      	mov	r4, r0
 800c17c:	4608      	mov	r0, r1
 800c17e:	602b      	str	r3, [r5, #0]
 800c180:	f7f6 f877 	bl	8002272 <_close>
 800c184:	1c43      	adds	r3, r0, #1
 800c186:	d102      	bne.n	800c18e <_close_r+0x1a>
 800c188:	682b      	ldr	r3, [r5, #0]
 800c18a:	b103      	cbz	r3, 800c18e <_close_r+0x1a>
 800c18c:	6023      	str	r3, [r4, #0]
 800c18e:	bd38      	pop	{r3, r4, r5, pc}
 800c190:	200058bc 	.word	0x200058bc

0800c194 <_reclaim_reent>:
 800c194:	4b29      	ldr	r3, [pc, #164]	; (800c23c <_reclaim_reent+0xa8>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4283      	cmp	r3, r0
 800c19a:	b570      	push	{r4, r5, r6, lr}
 800c19c:	4604      	mov	r4, r0
 800c19e:	d04b      	beq.n	800c238 <_reclaim_reent+0xa4>
 800c1a0:	69c3      	ldr	r3, [r0, #28]
 800c1a2:	b143      	cbz	r3, 800c1b6 <_reclaim_reent+0x22>
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d144      	bne.n	800c234 <_reclaim_reent+0xa0>
 800c1aa:	69e3      	ldr	r3, [r4, #28]
 800c1ac:	6819      	ldr	r1, [r3, #0]
 800c1ae:	b111      	cbz	r1, 800c1b6 <_reclaim_reent+0x22>
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f000 ff2f 	bl	800d014 <_free_r>
 800c1b6:	6961      	ldr	r1, [r4, #20]
 800c1b8:	b111      	cbz	r1, 800c1c0 <_reclaim_reent+0x2c>
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f000 ff2a 	bl	800d014 <_free_r>
 800c1c0:	69e1      	ldr	r1, [r4, #28]
 800c1c2:	b111      	cbz	r1, 800c1ca <_reclaim_reent+0x36>
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f000 ff25 	bl	800d014 <_free_r>
 800c1ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c1cc:	b111      	cbz	r1, 800c1d4 <_reclaim_reent+0x40>
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f000 ff20 	bl	800d014 <_free_r>
 800c1d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1d6:	b111      	cbz	r1, 800c1de <_reclaim_reent+0x4a>
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f000 ff1b 	bl	800d014 <_free_r>
 800c1de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c1e0:	b111      	cbz	r1, 800c1e8 <_reclaim_reent+0x54>
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f000 ff16 	bl	800d014 <_free_r>
 800c1e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c1ea:	b111      	cbz	r1, 800c1f2 <_reclaim_reent+0x5e>
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f000 ff11 	bl	800d014 <_free_r>
 800c1f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c1f4:	b111      	cbz	r1, 800c1fc <_reclaim_reent+0x68>
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f000 ff0c 	bl	800d014 <_free_r>
 800c1fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c1fe:	b111      	cbz	r1, 800c206 <_reclaim_reent+0x72>
 800c200:	4620      	mov	r0, r4
 800c202:	f000 ff07 	bl	800d014 <_free_r>
 800c206:	6a23      	ldr	r3, [r4, #32]
 800c208:	b1b3      	cbz	r3, 800c238 <_reclaim_reent+0xa4>
 800c20a:	4620      	mov	r0, r4
 800c20c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c210:	4718      	bx	r3
 800c212:	5949      	ldr	r1, [r1, r5]
 800c214:	b941      	cbnz	r1, 800c228 <_reclaim_reent+0x94>
 800c216:	3504      	adds	r5, #4
 800c218:	69e3      	ldr	r3, [r4, #28]
 800c21a:	2d80      	cmp	r5, #128	; 0x80
 800c21c:	68d9      	ldr	r1, [r3, #12]
 800c21e:	d1f8      	bne.n	800c212 <_reclaim_reent+0x7e>
 800c220:	4620      	mov	r0, r4
 800c222:	f000 fef7 	bl	800d014 <_free_r>
 800c226:	e7c0      	b.n	800c1aa <_reclaim_reent+0x16>
 800c228:	680e      	ldr	r6, [r1, #0]
 800c22a:	4620      	mov	r0, r4
 800c22c:	f000 fef2 	bl	800d014 <_free_r>
 800c230:	4631      	mov	r1, r6
 800c232:	e7ef      	b.n	800c214 <_reclaim_reent+0x80>
 800c234:	2500      	movs	r5, #0
 800c236:	e7ef      	b.n	800c218 <_reclaim_reent+0x84>
 800c238:	bd70      	pop	{r4, r5, r6, pc}
 800c23a:	bf00      	nop
 800c23c:	20000080 	.word	0x20000080

0800c240 <_lseek_r>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	4d07      	ldr	r5, [pc, #28]	; (800c260 <_lseek_r+0x20>)
 800c244:	4604      	mov	r4, r0
 800c246:	4608      	mov	r0, r1
 800c248:	4611      	mov	r1, r2
 800c24a:	2200      	movs	r2, #0
 800c24c:	602a      	str	r2, [r5, #0]
 800c24e:	461a      	mov	r2, r3
 800c250:	f7f6 f836 	bl	80022c0 <_lseek>
 800c254:	1c43      	adds	r3, r0, #1
 800c256:	d102      	bne.n	800c25e <_lseek_r+0x1e>
 800c258:	682b      	ldr	r3, [r5, #0]
 800c25a:	b103      	cbz	r3, 800c25e <_lseek_r+0x1e>
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	bd38      	pop	{r3, r4, r5, pc}
 800c260:	200058bc 	.word	0x200058bc

0800c264 <_read_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4d07      	ldr	r5, [pc, #28]	; (800c284 <_read_r+0x20>)
 800c268:	4604      	mov	r4, r0
 800c26a:	4608      	mov	r0, r1
 800c26c:	4611      	mov	r1, r2
 800c26e:	2200      	movs	r2, #0
 800c270:	602a      	str	r2, [r5, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	f7f5 ffe0 	bl	8002238 <_read>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d102      	bne.n	800c282 <_read_r+0x1e>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	b103      	cbz	r3, 800c282 <_read_r+0x1e>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	200058bc 	.word	0x200058bc

0800c288 <_write_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d07      	ldr	r5, [pc, #28]	; (800c2a8 <_write_r+0x20>)
 800c28c:	4604      	mov	r4, r0
 800c28e:	4608      	mov	r0, r1
 800c290:	4611      	mov	r1, r2
 800c292:	2200      	movs	r2, #0
 800c294:	602a      	str	r2, [r5, #0]
 800c296:	461a      	mov	r2, r3
 800c298:	f7f4 fe44 	bl	8000f24 <_write>
 800c29c:	1c43      	adds	r3, r0, #1
 800c29e:	d102      	bne.n	800c2a6 <_write_r+0x1e>
 800c2a0:	682b      	ldr	r3, [r5, #0]
 800c2a2:	b103      	cbz	r3, 800c2a6 <_write_r+0x1e>
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}
 800c2a8:	200058bc 	.word	0x200058bc

0800c2ac <__errno>:
 800c2ac:	4b01      	ldr	r3, [pc, #4]	; (800c2b4 <__errno+0x8>)
 800c2ae:	6818      	ldr	r0, [r3, #0]
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	20000080 	.word	0x20000080

0800c2b8 <__libc_init_array>:
 800c2b8:	b570      	push	{r4, r5, r6, lr}
 800c2ba:	4d0d      	ldr	r5, [pc, #52]	; (800c2f0 <__libc_init_array+0x38>)
 800c2bc:	4c0d      	ldr	r4, [pc, #52]	; (800c2f4 <__libc_init_array+0x3c>)
 800c2be:	1b64      	subs	r4, r4, r5
 800c2c0:	10a4      	asrs	r4, r4, #2
 800c2c2:	2600      	movs	r6, #0
 800c2c4:	42a6      	cmp	r6, r4
 800c2c6:	d109      	bne.n	800c2dc <__libc_init_array+0x24>
 800c2c8:	4d0b      	ldr	r5, [pc, #44]	; (800c2f8 <__libc_init_array+0x40>)
 800c2ca:	4c0c      	ldr	r4, [pc, #48]	; (800c2fc <__libc_init_array+0x44>)
 800c2cc:	f002 f892 	bl	800e3f4 <_init>
 800c2d0:	1b64      	subs	r4, r4, r5
 800c2d2:	10a4      	asrs	r4, r4, #2
 800c2d4:	2600      	movs	r6, #0
 800c2d6:	42a6      	cmp	r6, r4
 800c2d8:	d105      	bne.n	800c2e6 <__libc_init_array+0x2e>
 800c2da:	bd70      	pop	{r4, r5, r6, pc}
 800c2dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2e0:	4798      	blx	r3
 800c2e2:	3601      	adds	r6, #1
 800c2e4:	e7ee      	b.n	800c2c4 <__libc_init_array+0xc>
 800c2e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2ea:	4798      	blx	r3
 800c2ec:	3601      	adds	r6, #1
 800c2ee:	e7f2      	b.n	800c2d6 <__libc_init_array+0x1e>
 800c2f0:	0800e8ec 	.word	0x0800e8ec
 800c2f4:	0800e8ec 	.word	0x0800e8ec
 800c2f8:	0800e8ec 	.word	0x0800e8ec
 800c2fc:	0800e8f0 	.word	0x0800e8f0

0800c300 <__retarget_lock_acquire_recursive>:
 800c300:	4770      	bx	lr

0800c302 <__retarget_lock_release_recursive>:
 800c302:	4770      	bx	lr

0800c304 <memcpy>:
 800c304:	440a      	add	r2, r1
 800c306:	4291      	cmp	r1, r2
 800c308:	f100 33ff 	add.w	r3, r0, #4294967295
 800c30c:	d100      	bne.n	800c310 <memcpy+0xc>
 800c30e:	4770      	bx	lr
 800c310:	b510      	push	{r4, lr}
 800c312:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c31a:	4291      	cmp	r1, r2
 800c31c:	d1f9      	bne.n	800c312 <memcpy+0xe>
 800c31e:	bd10      	pop	{r4, pc}

0800c320 <quorem>:
 800c320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c324:	6903      	ldr	r3, [r0, #16]
 800c326:	690c      	ldr	r4, [r1, #16]
 800c328:	42a3      	cmp	r3, r4
 800c32a:	4607      	mov	r7, r0
 800c32c:	db7e      	blt.n	800c42c <quorem+0x10c>
 800c32e:	3c01      	subs	r4, #1
 800c330:	f101 0814 	add.w	r8, r1, #20
 800c334:	f100 0514 	add.w	r5, r0, #20
 800c338:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c33c:	9301      	str	r3, [sp, #4]
 800c33e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c342:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c346:	3301      	adds	r3, #1
 800c348:	429a      	cmp	r2, r3
 800c34a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c34e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c352:	fbb2 f6f3 	udiv	r6, r2, r3
 800c356:	d331      	bcc.n	800c3bc <quorem+0x9c>
 800c358:	f04f 0e00 	mov.w	lr, #0
 800c35c:	4640      	mov	r0, r8
 800c35e:	46ac      	mov	ip, r5
 800c360:	46f2      	mov	sl, lr
 800c362:	f850 2b04 	ldr.w	r2, [r0], #4
 800c366:	b293      	uxth	r3, r2
 800c368:	fb06 e303 	mla	r3, r6, r3, lr
 800c36c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c370:	0c1a      	lsrs	r2, r3, #16
 800c372:	b29b      	uxth	r3, r3
 800c374:	ebaa 0303 	sub.w	r3, sl, r3
 800c378:	f8dc a000 	ldr.w	sl, [ip]
 800c37c:	fa13 f38a 	uxtah	r3, r3, sl
 800c380:	fb06 220e 	mla	r2, r6, lr, r2
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	9b00      	ldr	r3, [sp, #0]
 800c388:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c38c:	b292      	uxth	r2, r2
 800c38e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c392:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c396:	f8bd 3000 	ldrh.w	r3, [sp]
 800c39a:	4581      	cmp	r9, r0
 800c39c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3a0:	f84c 3b04 	str.w	r3, [ip], #4
 800c3a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c3a8:	d2db      	bcs.n	800c362 <quorem+0x42>
 800c3aa:	f855 300b 	ldr.w	r3, [r5, fp]
 800c3ae:	b92b      	cbnz	r3, 800c3bc <quorem+0x9c>
 800c3b0:	9b01      	ldr	r3, [sp, #4]
 800c3b2:	3b04      	subs	r3, #4
 800c3b4:	429d      	cmp	r5, r3
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	d32c      	bcc.n	800c414 <quorem+0xf4>
 800c3ba:	613c      	str	r4, [r7, #16]
 800c3bc:	4638      	mov	r0, r7
 800c3be:	f001 f9a5 	bl	800d70c <__mcmp>
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	db22      	blt.n	800c40c <quorem+0xec>
 800c3c6:	3601      	adds	r6, #1
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	f858 2b04 	ldr.w	r2, [r8], #4
 800c3d0:	f8d1 c000 	ldr.w	ip, [r1]
 800c3d4:	b293      	uxth	r3, r2
 800c3d6:	1ac3      	subs	r3, r0, r3
 800c3d8:	0c12      	lsrs	r2, r2, #16
 800c3da:	fa13 f38c 	uxtah	r3, r3, ip
 800c3de:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c3e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3ec:	45c1      	cmp	r9, r8
 800c3ee:	f841 3b04 	str.w	r3, [r1], #4
 800c3f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c3f6:	d2e9      	bcs.n	800c3cc <quorem+0xac>
 800c3f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c400:	b922      	cbnz	r2, 800c40c <quorem+0xec>
 800c402:	3b04      	subs	r3, #4
 800c404:	429d      	cmp	r5, r3
 800c406:	461a      	mov	r2, r3
 800c408:	d30a      	bcc.n	800c420 <quorem+0x100>
 800c40a:	613c      	str	r4, [r7, #16]
 800c40c:	4630      	mov	r0, r6
 800c40e:	b003      	add	sp, #12
 800c410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c414:	6812      	ldr	r2, [r2, #0]
 800c416:	3b04      	subs	r3, #4
 800c418:	2a00      	cmp	r2, #0
 800c41a:	d1ce      	bne.n	800c3ba <quorem+0x9a>
 800c41c:	3c01      	subs	r4, #1
 800c41e:	e7c9      	b.n	800c3b4 <quorem+0x94>
 800c420:	6812      	ldr	r2, [r2, #0]
 800c422:	3b04      	subs	r3, #4
 800c424:	2a00      	cmp	r2, #0
 800c426:	d1f0      	bne.n	800c40a <quorem+0xea>
 800c428:	3c01      	subs	r4, #1
 800c42a:	e7eb      	b.n	800c404 <quorem+0xe4>
 800c42c:	2000      	movs	r0, #0
 800c42e:	e7ee      	b.n	800c40e <quorem+0xee>

0800c430 <_dtoa_r>:
 800c430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c434:	ed2d 8b04 	vpush	{d8-d9}
 800c438:	69c5      	ldr	r5, [r0, #28]
 800c43a:	b093      	sub	sp, #76	; 0x4c
 800c43c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c440:	ec57 6b10 	vmov	r6, r7, d0
 800c444:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c448:	9107      	str	r1, [sp, #28]
 800c44a:	4604      	mov	r4, r0
 800c44c:	920a      	str	r2, [sp, #40]	; 0x28
 800c44e:	930d      	str	r3, [sp, #52]	; 0x34
 800c450:	b975      	cbnz	r5, 800c470 <_dtoa_r+0x40>
 800c452:	2010      	movs	r0, #16
 800c454:	f000 fe2a 	bl	800d0ac <malloc>
 800c458:	4602      	mov	r2, r0
 800c45a:	61e0      	str	r0, [r4, #28]
 800c45c:	b920      	cbnz	r0, 800c468 <_dtoa_r+0x38>
 800c45e:	4bae      	ldr	r3, [pc, #696]	; (800c718 <_dtoa_r+0x2e8>)
 800c460:	21ef      	movs	r1, #239	; 0xef
 800c462:	48ae      	ldr	r0, [pc, #696]	; (800c71c <_dtoa_r+0x2ec>)
 800c464:	f001 fc82 	bl	800dd6c <__assert_func>
 800c468:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c46c:	6005      	str	r5, [r0, #0]
 800c46e:	60c5      	str	r5, [r0, #12]
 800c470:	69e3      	ldr	r3, [r4, #28]
 800c472:	6819      	ldr	r1, [r3, #0]
 800c474:	b151      	cbz	r1, 800c48c <_dtoa_r+0x5c>
 800c476:	685a      	ldr	r2, [r3, #4]
 800c478:	604a      	str	r2, [r1, #4]
 800c47a:	2301      	movs	r3, #1
 800c47c:	4093      	lsls	r3, r2
 800c47e:	608b      	str	r3, [r1, #8]
 800c480:	4620      	mov	r0, r4
 800c482:	f000 ff07 	bl	800d294 <_Bfree>
 800c486:	69e3      	ldr	r3, [r4, #28]
 800c488:	2200      	movs	r2, #0
 800c48a:	601a      	str	r2, [r3, #0]
 800c48c:	1e3b      	subs	r3, r7, #0
 800c48e:	bfbb      	ittet	lt
 800c490:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c494:	9303      	strlt	r3, [sp, #12]
 800c496:	2300      	movge	r3, #0
 800c498:	2201      	movlt	r2, #1
 800c49a:	bfac      	ite	ge
 800c49c:	f8c8 3000 	strge.w	r3, [r8]
 800c4a0:	f8c8 2000 	strlt.w	r2, [r8]
 800c4a4:	4b9e      	ldr	r3, [pc, #632]	; (800c720 <_dtoa_r+0x2f0>)
 800c4a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c4aa:	ea33 0308 	bics.w	r3, r3, r8
 800c4ae:	d11b      	bne.n	800c4e8 <_dtoa_r+0xb8>
 800c4b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c4b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c4b6:	6013      	str	r3, [r2, #0]
 800c4b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c4bc:	4333      	orrs	r3, r6
 800c4be:	f000 8593 	beq.w	800cfe8 <_dtoa_r+0xbb8>
 800c4c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4c4:	b963      	cbnz	r3, 800c4e0 <_dtoa_r+0xb0>
 800c4c6:	4b97      	ldr	r3, [pc, #604]	; (800c724 <_dtoa_r+0x2f4>)
 800c4c8:	e027      	b.n	800c51a <_dtoa_r+0xea>
 800c4ca:	4b97      	ldr	r3, [pc, #604]	; (800c728 <_dtoa_r+0x2f8>)
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	3308      	adds	r3, #8
 800c4d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c4d2:	6013      	str	r3, [r2, #0]
 800c4d4:	9800      	ldr	r0, [sp, #0]
 800c4d6:	b013      	add	sp, #76	; 0x4c
 800c4d8:	ecbd 8b04 	vpop	{d8-d9}
 800c4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e0:	4b90      	ldr	r3, [pc, #576]	; (800c724 <_dtoa_r+0x2f4>)
 800c4e2:	9300      	str	r3, [sp, #0]
 800c4e4:	3303      	adds	r3, #3
 800c4e6:	e7f3      	b.n	800c4d0 <_dtoa_r+0xa0>
 800c4e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	ec51 0b17 	vmov	r0, r1, d7
 800c4f2:	eeb0 8a47 	vmov.f32	s16, s14
 800c4f6:	eef0 8a67 	vmov.f32	s17, s15
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f7f4 fb04 	bl	8000b08 <__aeabi_dcmpeq>
 800c500:	4681      	mov	r9, r0
 800c502:	b160      	cbz	r0, 800c51e <_dtoa_r+0xee>
 800c504:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c506:	2301      	movs	r3, #1
 800c508:	6013      	str	r3, [r2, #0]
 800c50a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f000 8568 	beq.w	800cfe2 <_dtoa_r+0xbb2>
 800c512:	4b86      	ldr	r3, [pc, #536]	; (800c72c <_dtoa_r+0x2fc>)
 800c514:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c516:	6013      	str	r3, [r2, #0]
 800c518:	3b01      	subs	r3, #1
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	e7da      	b.n	800c4d4 <_dtoa_r+0xa4>
 800c51e:	aa10      	add	r2, sp, #64	; 0x40
 800c520:	a911      	add	r1, sp, #68	; 0x44
 800c522:	4620      	mov	r0, r4
 800c524:	eeb0 0a48 	vmov.f32	s0, s16
 800c528:	eef0 0a68 	vmov.f32	s1, s17
 800c52c:	f001 f994 	bl	800d858 <__d2b>
 800c530:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c534:	4682      	mov	sl, r0
 800c536:	2d00      	cmp	r5, #0
 800c538:	d07f      	beq.n	800c63a <_dtoa_r+0x20a>
 800c53a:	ee18 3a90 	vmov	r3, s17
 800c53e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c542:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c546:	ec51 0b18 	vmov	r0, r1, d8
 800c54a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c54e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c552:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c556:	4619      	mov	r1, r3
 800c558:	2200      	movs	r2, #0
 800c55a:	4b75      	ldr	r3, [pc, #468]	; (800c730 <_dtoa_r+0x300>)
 800c55c:	f7f3 feb4 	bl	80002c8 <__aeabi_dsub>
 800c560:	a367      	add	r3, pc, #412	; (adr r3, 800c700 <_dtoa_r+0x2d0>)
 800c562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c566:	f7f4 f867 	bl	8000638 <__aeabi_dmul>
 800c56a:	a367      	add	r3, pc, #412	; (adr r3, 800c708 <_dtoa_r+0x2d8>)
 800c56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c570:	f7f3 feac 	bl	80002cc <__adddf3>
 800c574:	4606      	mov	r6, r0
 800c576:	4628      	mov	r0, r5
 800c578:	460f      	mov	r7, r1
 800c57a:	f7f3 fff3 	bl	8000564 <__aeabi_i2d>
 800c57e:	a364      	add	r3, pc, #400	; (adr r3, 800c710 <_dtoa_r+0x2e0>)
 800c580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c584:	f7f4 f858 	bl	8000638 <__aeabi_dmul>
 800c588:	4602      	mov	r2, r0
 800c58a:	460b      	mov	r3, r1
 800c58c:	4630      	mov	r0, r6
 800c58e:	4639      	mov	r1, r7
 800c590:	f7f3 fe9c 	bl	80002cc <__adddf3>
 800c594:	4606      	mov	r6, r0
 800c596:	460f      	mov	r7, r1
 800c598:	f7f4 fafe 	bl	8000b98 <__aeabi_d2iz>
 800c59c:	2200      	movs	r2, #0
 800c59e:	4683      	mov	fp, r0
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	4639      	mov	r1, r7
 800c5a6:	f7f4 fab9 	bl	8000b1c <__aeabi_dcmplt>
 800c5aa:	b148      	cbz	r0, 800c5c0 <_dtoa_r+0x190>
 800c5ac:	4658      	mov	r0, fp
 800c5ae:	f7f3 ffd9 	bl	8000564 <__aeabi_i2d>
 800c5b2:	4632      	mov	r2, r6
 800c5b4:	463b      	mov	r3, r7
 800c5b6:	f7f4 faa7 	bl	8000b08 <__aeabi_dcmpeq>
 800c5ba:	b908      	cbnz	r0, 800c5c0 <_dtoa_r+0x190>
 800c5bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c5c0:	f1bb 0f16 	cmp.w	fp, #22
 800c5c4:	d857      	bhi.n	800c676 <_dtoa_r+0x246>
 800c5c6:	4b5b      	ldr	r3, [pc, #364]	; (800c734 <_dtoa_r+0x304>)
 800c5c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d0:	ec51 0b18 	vmov	r0, r1, d8
 800c5d4:	f7f4 faa2 	bl	8000b1c <__aeabi_dcmplt>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	d04e      	beq.n	800c67a <_dtoa_r+0x24a>
 800c5dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	930c      	str	r3, [sp, #48]	; 0x30
 800c5e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5e6:	1b5b      	subs	r3, r3, r5
 800c5e8:	1e5a      	subs	r2, r3, #1
 800c5ea:	bf45      	ittet	mi
 800c5ec:	f1c3 0301 	rsbmi	r3, r3, #1
 800c5f0:	9305      	strmi	r3, [sp, #20]
 800c5f2:	2300      	movpl	r3, #0
 800c5f4:	2300      	movmi	r3, #0
 800c5f6:	9206      	str	r2, [sp, #24]
 800c5f8:	bf54      	ite	pl
 800c5fa:	9305      	strpl	r3, [sp, #20]
 800c5fc:	9306      	strmi	r3, [sp, #24]
 800c5fe:	f1bb 0f00 	cmp.w	fp, #0
 800c602:	db3c      	blt.n	800c67e <_dtoa_r+0x24e>
 800c604:	9b06      	ldr	r3, [sp, #24]
 800c606:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c60a:	445b      	add	r3, fp
 800c60c:	9306      	str	r3, [sp, #24]
 800c60e:	2300      	movs	r3, #0
 800c610:	9308      	str	r3, [sp, #32]
 800c612:	9b07      	ldr	r3, [sp, #28]
 800c614:	2b09      	cmp	r3, #9
 800c616:	d868      	bhi.n	800c6ea <_dtoa_r+0x2ba>
 800c618:	2b05      	cmp	r3, #5
 800c61a:	bfc4      	itt	gt
 800c61c:	3b04      	subgt	r3, #4
 800c61e:	9307      	strgt	r3, [sp, #28]
 800c620:	9b07      	ldr	r3, [sp, #28]
 800c622:	f1a3 0302 	sub.w	r3, r3, #2
 800c626:	bfcc      	ite	gt
 800c628:	2500      	movgt	r5, #0
 800c62a:	2501      	movle	r5, #1
 800c62c:	2b03      	cmp	r3, #3
 800c62e:	f200 8085 	bhi.w	800c73c <_dtoa_r+0x30c>
 800c632:	e8df f003 	tbb	[pc, r3]
 800c636:	3b2e      	.short	0x3b2e
 800c638:	5839      	.short	0x5839
 800c63a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c63e:	441d      	add	r5, r3
 800c640:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c644:	2b20      	cmp	r3, #32
 800c646:	bfc1      	itttt	gt
 800c648:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c64c:	fa08 f803 	lslgt.w	r8, r8, r3
 800c650:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c654:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c658:	bfd6      	itet	le
 800c65a:	f1c3 0320 	rsble	r3, r3, #32
 800c65e:	ea48 0003 	orrgt.w	r0, r8, r3
 800c662:	fa06 f003 	lslle.w	r0, r6, r3
 800c666:	f7f3 ff6d 	bl	8000544 <__aeabi_ui2d>
 800c66a:	2201      	movs	r2, #1
 800c66c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c670:	3d01      	subs	r5, #1
 800c672:	920e      	str	r2, [sp, #56]	; 0x38
 800c674:	e76f      	b.n	800c556 <_dtoa_r+0x126>
 800c676:	2301      	movs	r3, #1
 800c678:	e7b3      	b.n	800c5e2 <_dtoa_r+0x1b2>
 800c67a:	900c      	str	r0, [sp, #48]	; 0x30
 800c67c:	e7b2      	b.n	800c5e4 <_dtoa_r+0x1b4>
 800c67e:	9b05      	ldr	r3, [sp, #20]
 800c680:	eba3 030b 	sub.w	r3, r3, fp
 800c684:	9305      	str	r3, [sp, #20]
 800c686:	f1cb 0300 	rsb	r3, fp, #0
 800c68a:	9308      	str	r3, [sp, #32]
 800c68c:	2300      	movs	r3, #0
 800c68e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c690:	e7bf      	b.n	800c612 <_dtoa_r+0x1e2>
 800c692:	2300      	movs	r3, #0
 800c694:	9309      	str	r3, [sp, #36]	; 0x24
 800c696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c698:	2b00      	cmp	r3, #0
 800c69a:	dc52      	bgt.n	800c742 <_dtoa_r+0x312>
 800c69c:	2301      	movs	r3, #1
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	9304      	str	r3, [sp, #16]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	920a      	str	r2, [sp, #40]	; 0x28
 800c6a6:	e00b      	b.n	800c6c0 <_dtoa_r+0x290>
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e7f3      	b.n	800c694 <_dtoa_r+0x264>
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6b2:	445b      	add	r3, fp
 800c6b4:	9301      	str	r3, [sp, #4]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	9304      	str	r3, [sp, #16]
 800c6bc:	bfb8      	it	lt
 800c6be:	2301      	movlt	r3, #1
 800c6c0:	69e0      	ldr	r0, [r4, #28]
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	2204      	movs	r2, #4
 800c6c6:	f102 0614 	add.w	r6, r2, #20
 800c6ca:	429e      	cmp	r6, r3
 800c6cc:	d93d      	bls.n	800c74a <_dtoa_r+0x31a>
 800c6ce:	6041      	str	r1, [r0, #4]
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f000 fd9f 	bl	800d214 <_Balloc>
 800c6d6:	9000      	str	r0, [sp, #0]
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d139      	bne.n	800c750 <_dtoa_r+0x320>
 800c6dc:	4b16      	ldr	r3, [pc, #88]	; (800c738 <_dtoa_r+0x308>)
 800c6de:	4602      	mov	r2, r0
 800c6e0:	f240 11af 	movw	r1, #431	; 0x1af
 800c6e4:	e6bd      	b.n	800c462 <_dtoa_r+0x32>
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e7e1      	b.n	800c6ae <_dtoa_r+0x27e>
 800c6ea:	2501      	movs	r5, #1
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	9307      	str	r3, [sp, #28]
 800c6f0:	9509      	str	r5, [sp, #36]	; 0x24
 800c6f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f6:	9301      	str	r3, [sp, #4]
 800c6f8:	9304      	str	r3, [sp, #16]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	2312      	movs	r3, #18
 800c6fe:	e7d1      	b.n	800c6a4 <_dtoa_r+0x274>
 800c700:	636f4361 	.word	0x636f4361
 800c704:	3fd287a7 	.word	0x3fd287a7
 800c708:	8b60c8b3 	.word	0x8b60c8b3
 800c70c:	3fc68a28 	.word	0x3fc68a28
 800c710:	509f79fb 	.word	0x509f79fb
 800c714:	3fd34413 	.word	0x3fd34413
 800c718:	0800e5b5 	.word	0x0800e5b5
 800c71c:	0800e5cc 	.word	0x0800e5cc
 800c720:	7ff00000 	.word	0x7ff00000
 800c724:	0800e5b1 	.word	0x0800e5b1
 800c728:	0800e5a8 	.word	0x0800e5a8
 800c72c:	0800e585 	.word	0x0800e585
 800c730:	3ff80000 	.word	0x3ff80000
 800c734:	0800e6b8 	.word	0x0800e6b8
 800c738:	0800e624 	.word	0x0800e624
 800c73c:	2301      	movs	r3, #1
 800c73e:	9309      	str	r3, [sp, #36]	; 0x24
 800c740:	e7d7      	b.n	800c6f2 <_dtoa_r+0x2c2>
 800c742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c744:	9301      	str	r3, [sp, #4]
 800c746:	9304      	str	r3, [sp, #16]
 800c748:	e7ba      	b.n	800c6c0 <_dtoa_r+0x290>
 800c74a:	3101      	adds	r1, #1
 800c74c:	0052      	lsls	r2, r2, #1
 800c74e:	e7ba      	b.n	800c6c6 <_dtoa_r+0x296>
 800c750:	69e3      	ldr	r3, [r4, #28]
 800c752:	9a00      	ldr	r2, [sp, #0]
 800c754:	601a      	str	r2, [r3, #0]
 800c756:	9b04      	ldr	r3, [sp, #16]
 800c758:	2b0e      	cmp	r3, #14
 800c75a:	f200 80a8 	bhi.w	800c8ae <_dtoa_r+0x47e>
 800c75e:	2d00      	cmp	r5, #0
 800c760:	f000 80a5 	beq.w	800c8ae <_dtoa_r+0x47e>
 800c764:	f1bb 0f00 	cmp.w	fp, #0
 800c768:	dd38      	ble.n	800c7dc <_dtoa_r+0x3ac>
 800c76a:	4bc0      	ldr	r3, [pc, #768]	; (800ca6c <_dtoa_r+0x63c>)
 800c76c:	f00b 020f 	and.w	r2, fp, #15
 800c770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c774:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c778:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c77c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c780:	d019      	beq.n	800c7b6 <_dtoa_r+0x386>
 800c782:	4bbb      	ldr	r3, [pc, #748]	; (800ca70 <_dtoa_r+0x640>)
 800c784:	ec51 0b18 	vmov	r0, r1, d8
 800c788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c78c:	f7f4 f87e 	bl	800088c <__aeabi_ddiv>
 800c790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c794:	f008 080f 	and.w	r8, r8, #15
 800c798:	2503      	movs	r5, #3
 800c79a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ca70 <_dtoa_r+0x640>
 800c79e:	f1b8 0f00 	cmp.w	r8, #0
 800c7a2:	d10a      	bne.n	800c7ba <_dtoa_r+0x38a>
 800c7a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7a8:	4632      	mov	r2, r6
 800c7aa:	463b      	mov	r3, r7
 800c7ac:	f7f4 f86e 	bl	800088c <__aeabi_ddiv>
 800c7b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7b4:	e02b      	b.n	800c80e <_dtoa_r+0x3de>
 800c7b6:	2502      	movs	r5, #2
 800c7b8:	e7ef      	b.n	800c79a <_dtoa_r+0x36a>
 800c7ba:	f018 0f01 	tst.w	r8, #1
 800c7be:	d008      	beq.n	800c7d2 <_dtoa_r+0x3a2>
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	4639      	mov	r1, r7
 800c7c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c7c8:	f7f3 ff36 	bl	8000638 <__aeabi_dmul>
 800c7cc:	3501      	adds	r5, #1
 800c7ce:	4606      	mov	r6, r0
 800c7d0:	460f      	mov	r7, r1
 800c7d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c7d6:	f109 0908 	add.w	r9, r9, #8
 800c7da:	e7e0      	b.n	800c79e <_dtoa_r+0x36e>
 800c7dc:	f000 809f 	beq.w	800c91e <_dtoa_r+0x4ee>
 800c7e0:	f1cb 0600 	rsb	r6, fp, #0
 800c7e4:	4ba1      	ldr	r3, [pc, #644]	; (800ca6c <_dtoa_r+0x63c>)
 800c7e6:	4fa2      	ldr	r7, [pc, #648]	; (800ca70 <_dtoa_r+0x640>)
 800c7e8:	f006 020f 	and.w	r2, r6, #15
 800c7ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f4:	ec51 0b18 	vmov	r0, r1, d8
 800c7f8:	f7f3 ff1e 	bl	8000638 <__aeabi_dmul>
 800c7fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c800:	1136      	asrs	r6, r6, #4
 800c802:	2300      	movs	r3, #0
 800c804:	2502      	movs	r5, #2
 800c806:	2e00      	cmp	r6, #0
 800c808:	d17e      	bne.n	800c908 <_dtoa_r+0x4d8>
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d1d0      	bne.n	800c7b0 <_dtoa_r+0x380>
 800c80e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c810:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c814:	2b00      	cmp	r3, #0
 800c816:	f000 8084 	beq.w	800c922 <_dtoa_r+0x4f2>
 800c81a:	4b96      	ldr	r3, [pc, #600]	; (800ca74 <_dtoa_r+0x644>)
 800c81c:	2200      	movs	r2, #0
 800c81e:	4640      	mov	r0, r8
 800c820:	4649      	mov	r1, r9
 800c822:	f7f4 f97b 	bl	8000b1c <__aeabi_dcmplt>
 800c826:	2800      	cmp	r0, #0
 800c828:	d07b      	beq.n	800c922 <_dtoa_r+0x4f2>
 800c82a:	9b04      	ldr	r3, [sp, #16]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d078      	beq.n	800c922 <_dtoa_r+0x4f2>
 800c830:	9b01      	ldr	r3, [sp, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	dd39      	ble.n	800c8aa <_dtoa_r+0x47a>
 800c836:	4b90      	ldr	r3, [pc, #576]	; (800ca78 <_dtoa_r+0x648>)
 800c838:	2200      	movs	r2, #0
 800c83a:	4640      	mov	r0, r8
 800c83c:	4649      	mov	r1, r9
 800c83e:	f7f3 fefb 	bl	8000638 <__aeabi_dmul>
 800c842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c846:	9e01      	ldr	r6, [sp, #4]
 800c848:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c84c:	3501      	adds	r5, #1
 800c84e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c852:	4628      	mov	r0, r5
 800c854:	f7f3 fe86 	bl	8000564 <__aeabi_i2d>
 800c858:	4642      	mov	r2, r8
 800c85a:	464b      	mov	r3, r9
 800c85c:	f7f3 feec 	bl	8000638 <__aeabi_dmul>
 800c860:	4b86      	ldr	r3, [pc, #536]	; (800ca7c <_dtoa_r+0x64c>)
 800c862:	2200      	movs	r2, #0
 800c864:	f7f3 fd32 	bl	80002cc <__adddf3>
 800c868:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c86c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c870:	9303      	str	r3, [sp, #12]
 800c872:	2e00      	cmp	r6, #0
 800c874:	d158      	bne.n	800c928 <_dtoa_r+0x4f8>
 800c876:	4b82      	ldr	r3, [pc, #520]	; (800ca80 <_dtoa_r+0x650>)
 800c878:	2200      	movs	r2, #0
 800c87a:	4640      	mov	r0, r8
 800c87c:	4649      	mov	r1, r9
 800c87e:	f7f3 fd23 	bl	80002c8 <__aeabi_dsub>
 800c882:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c886:	4680      	mov	r8, r0
 800c888:	4689      	mov	r9, r1
 800c88a:	f7f4 f965 	bl	8000b58 <__aeabi_dcmpgt>
 800c88e:	2800      	cmp	r0, #0
 800c890:	f040 8296 	bne.w	800cdc0 <_dtoa_r+0x990>
 800c894:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c898:	4640      	mov	r0, r8
 800c89a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c89e:	4649      	mov	r1, r9
 800c8a0:	f7f4 f93c 	bl	8000b1c <__aeabi_dcmplt>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	f040 8289 	bne.w	800cdbc <_dtoa_r+0x98c>
 800c8aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c8ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f2c0 814e 	blt.w	800cb52 <_dtoa_r+0x722>
 800c8b6:	f1bb 0f0e 	cmp.w	fp, #14
 800c8ba:	f300 814a 	bgt.w	800cb52 <_dtoa_r+0x722>
 800c8be:	4b6b      	ldr	r3, [pc, #428]	; (800ca6c <_dtoa_r+0x63c>)
 800c8c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c8c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f280 80dc 	bge.w	800ca88 <_dtoa_r+0x658>
 800c8d0:	9b04      	ldr	r3, [sp, #16]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f300 80d8 	bgt.w	800ca88 <_dtoa_r+0x658>
 800c8d8:	f040 826f 	bne.w	800cdba <_dtoa_r+0x98a>
 800c8dc:	4b68      	ldr	r3, [pc, #416]	; (800ca80 <_dtoa_r+0x650>)
 800c8de:	2200      	movs	r2, #0
 800c8e0:	4640      	mov	r0, r8
 800c8e2:	4649      	mov	r1, r9
 800c8e4:	f7f3 fea8 	bl	8000638 <__aeabi_dmul>
 800c8e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8ec:	f7f4 f92a 	bl	8000b44 <__aeabi_dcmpge>
 800c8f0:	9e04      	ldr	r6, [sp, #16]
 800c8f2:	4637      	mov	r7, r6
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	f040 8245 	bne.w	800cd84 <_dtoa_r+0x954>
 800c8fa:	9d00      	ldr	r5, [sp, #0]
 800c8fc:	2331      	movs	r3, #49	; 0x31
 800c8fe:	f805 3b01 	strb.w	r3, [r5], #1
 800c902:	f10b 0b01 	add.w	fp, fp, #1
 800c906:	e241      	b.n	800cd8c <_dtoa_r+0x95c>
 800c908:	07f2      	lsls	r2, r6, #31
 800c90a:	d505      	bpl.n	800c918 <_dtoa_r+0x4e8>
 800c90c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c910:	f7f3 fe92 	bl	8000638 <__aeabi_dmul>
 800c914:	3501      	adds	r5, #1
 800c916:	2301      	movs	r3, #1
 800c918:	1076      	asrs	r6, r6, #1
 800c91a:	3708      	adds	r7, #8
 800c91c:	e773      	b.n	800c806 <_dtoa_r+0x3d6>
 800c91e:	2502      	movs	r5, #2
 800c920:	e775      	b.n	800c80e <_dtoa_r+0x3de>
 800c922:	9e04      	ldr	r6, [sp, #16]
 800c924:	465f      	mov	r7, fp
 800c926:	e792      	b.n	800c84e <_dtoa_r+0x41e>
 800c928:	9900      	ldr	r1, [sp, #0]
 800c92a:	4b50      	ldr	r3, [pc, #320]	; (800ca6c <_dtoa_r+0x63c>)
 800c92c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c930:	4431      	add	r1, r6
 800c932:	9102      	str	r1, [sp, #8]
 800c934:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c936:	eeb0 9a47 	vmov.f32	s18, s14
 800c93a:	eef0 9a67 	vmov.f32	s19, s15
 800c93e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c942:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c946:	2900      	cmp	r1, #0
 800c948:	d044      	beq.n	800c9d4 <_dtoa_r+0x5a4>
 800c94a:	494e      	ldr	r1, [pc, #312]	; (800ca84 <_dtoa_r+0x654>)
 800c94c:	2000      	movs	r0, #0
 800c94e:	f7f3 ff9d 	bl	800088c <__aeabi_ddiv>
 800c952:	ec53 2b19 	vmov	r2, r3, d9
 800c956:	f7f3 fcb7 	bl	80002c8 <__aeabi_dsub>
 800c95a:	9d00      	ldr	r5, [sp, #0]
 800c95c:	ec41 0b19 	vmov	d9, r0, r1
 800c960:	4649      	mov	r1, r9
 800c962:	4640      	mov	r0, r8
 800c964:	f7f4 f918 	bl	8000b98 <__aeabi_d2iz>
 800c968:	4606      	mov	r6, r0
 800c96a:	f7f3 fdfb 	bl	8000564 <__aeabi_i2d>
 800c96e:	4602      	mov	r2, r0
 800c970:	460b      	mov	r3, r1
 800c972:	4640      	mov	r0, r8
 800c974:	4649      	mov	r1, r9
 800c976:	f7f3 fca7 	bl	80002c8 <__aeabi_dsub>
 800c97a:	3630      	adds	r6, #48	; 0x30
 800c97c:	f805 6b01 	strb.w	r6, [r5], #1
 800c980:	ec53 2b19 	vmov	r2, r3, d9
 800c984:	4680      	mov	r8, r0
 800c986:	4689      	mov	r9, r1
 800c988:	f7f4 f8c8 	bl	8000b1c <__aeabi_dcmplt>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	d164      	bne.n	800ca5a <_dtoa_r+0x62a>
 800c990:	4642      	mov	r2, r8
 800c992:	464b      	mov	r3, r9
 800c994:	4937      	ldr	r1, [pc, #220]	; (800ca74 <_dtoa_r+0x644>)
 800c996:	2000      	movs	r0, #0
 800c998:	f7f3 fc96 	bl	80002c8 <__aeabi_dsub>
 800c99c:	ec53 2b19 	vmov	r2, r3, d9
 800c9a0:	f7f4 f8bc 	bl	8000b1c <__aeabi_dcmplt>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	f040 80b6 	bne.w	800cb16 <_dtoa_r+0x6e6>
 800c9aa:	9b02      	ldr	r3, [sp, #8]
 800c9ac:	429d      	cmp	r5, r3
 800c9ae:	f43f af7c 	beq.w	800c8aa <_dtoa_r+0x47a>
 800c9b2:	4b31      	ldr	r3, [pc, #196]	; (800ca78 <_dtoa_r+0x648>)
 800c9b4:	ec51 0b19 	vmov	r0, r1, d9
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f7f3 fe3d 	bl	8000638 <__aeabi_dmul>
 800c9be:	4b2e      	ldr	r3, [pc, #184]	; (800ca78 <_dtoa_r+0x648>)
 800c9c0:	ec41 0b19 	vmov	d9, r0, r1
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	4640      	mov	r0, r8
 800c9c8:	4649      	mov	r1, r9
 800c9ca:	f7f3 fe35 	bl	8000638 <__aeabi_dmul>
 800c9ce:	4680      	mov	r8, r0
 800c9d0:	4689      	mov	r9, r1
 800c9d2:	e7c5      	b.n	800c960 <_dtoa_r+0x530>
 800c9d4:	ec51 0b17 	vmov	r0, r1, d7
 800c9d8:	f7f3 fe2e 	bl	8000638 <__aeabi_dmul>
 800c9dc:	9b02      	ldr	r3, [sp, #8]
 800c9de:	9d00      	ldr	r5, [sp, #0]
 800c9e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9e2:	ec41 0b19 	vmov	d9, r0, r1
 800c9e6:	4649      	mov	r1, r9
 800c9e8:	4640      	mov	r0, r8
 800c9ea:	f7f4 f8d5 	bl	8000b98 <__aeabi_d2iz>
 800c9ee:	4606      	mov	r6, r0
 800c9f0:	f7f3 fdb8 	bl	8000564 <__aeabi_i2d>
 800c9f4:	3630      	adds	r6, #48	; 0x30
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	4640      	mov	r0, r8
 800c9fc:	4649      	mov	r1, r9
 800c9fe:	f7f3 fc63 	bl	80002c8 <__aeabi_dsub>
 800ca02:	f805 6b01 	strb.w	r6, [r5], #1
 800ca06:	9b02      	ldr	r3, [sp, #8]
 800ca08:	429d      	cmp	r5, r3
 800ca0a:	4680      	mov	r8, r0
 800ca0c:	4689      	mov	r9, r1
 800ca0e:	f04f 0200 	mov.w	r2, #0
 800ca12:	d124      	bne.n	800ca5e <_dtoa_r+0x62e>
 800ca14:	4b1b      	ldr	r3, [pc, #108]	; (800ca84 <_dtoa_r+0x654>)
 800ca16:	ec51 0b19 	vmov	r0, r1, d9
 800ca1a:	f7f3 fc57 	bl	80002cc <__adddf3>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	460b      	mov	r3, r1
 800ca22:	4640      	mov	r0, r8
 800ca24:	4649      	mov	r1, r9
 800ca26:	f7f4 f897 	bl	8000b58 <__aeabi_dcmpgt>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d173      	bne.n	800cb16 <_dtoa_r+0x6e6>
 800ca2e:	ec53 2b19 	vmov	r2, r3, d9
 800ca32:	4914      	ldr	r1, [pc, #80]	; (800ca84 <_dtoa_r+0x654>)
 800ca34:	2000      	movs	r0, #0
 800ca36:	f7f3 fc47 	bl	80002c8 <__aeabi_dsub>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4640      	mov	r0, r8
 800ca40:	4649      	mov	r1, r9
 800ca42:	f7f4 f86b 	bl	8000b1c <__aeabi_dcmplt>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	f43f af2f 	beq.w	800c8aa <_dtoa_r+0x47a>
 800ca4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ca4e:	1e6b      	subs	r3, r5, #1
 800ca50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca56:	2b30      	cmp	r3, #48	; 0x30
 800ca58:	d0f8      	beq.n	800ca4c <_dtoa_r+0x61c>
 800ca5a:	46bb      	mov	fp, r7
 800ca5c:	e04a      	b.n	800caf4 <_dtoa_r+0x6c4>
 800ca5e:	4b06      	ldr	r3, [pc, #24]	; (800ca78 <_dtoa_r+0x648>)
 800ca60:	f7f3 fdea 	bl	8000638 <__aeabi_dmul>
 800ca64:	4680      	mov	r8, r0
 800ca66:	4689      	mov	r9, r1
 800ca68:	e7bd      	b.n	800c9e6 <_dtoa_r+0x5b6>
 800ca6a:	bf00      	nop
 800ca6c:	0800e6b8 	.word	0x0800e6b8
 800ca70:	0800e690 	.word	0x0800e690
 800ca74:	3ff00000 	.word	0x3ff00000
 800ca78:	40240000 	.word	0x40240000
 800ca7c:	401c0000 	.word	0x401c0000
 800ca80:	40140000 	.word	0x40140000
 800ca84:	3fe00000 	.word	0x3fe00000
 800ca88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ca8c:	9d00      	ldr	r5, [sp, #0]
 800ca8e:	4642      	mov	r2, r8
 800ca90:	464b      	mov	r3, r9
 800ca92:	4630      	mov	r0, r6
 800ca94:	4639      	mov	r1, r7
 800ca96:	f7f3 fef9 	bl	800088c <__aeabi_ddiv>
 800ca9a:	f7f4 f87d 	bl	8000b98 <__aeabi_d2iz>
 800ca9e:	9001      	str	r0, [sp, #4]
 800caa0:	f7f3 fd60 	bl	8000564 <__aeabi_i2d>
 800caa4:	4642      	mov	r2, r8
 800caa6:	464b      	mov	r3, r9
 800caa8:	f7f3 fdc6 	bl	8000638 <__aeabi_dmul>
 800caac:	4602      	mov	r2, r0
 800caae:	460b      	mov	r3, r1
 800cab0:	4630      	mov	r0, r6
 800cab2:	4639      	mov	r1, r7
 800cab4:	f7f3 fc08 	bl	80002c8 <__aeabi_dsub>
 800cab8:	9e01      	ldr	r6, [sp, #4]
 800caba:	9f04      	ldr	r7, [sp, #16]
 800cabc:	3630      	adds	r6, #48	; 0x30
 800cabe:	f805 6b01 	strb.w	r6, [r5], #1
 800cac2:	9e00      	ldr	r6, [sp, #0]
 800cac4:	1bae      	subs	r6, r5, r6
 800cac6:	42b7      	cmp	r7, r6
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	d134      	bne.n	800cb38 <_dtoa_r+0x708>
 800cace:	f7f3 fbfd 	bl	80002cc <__adddf3>
 800cad2:	4642      	mov	r2, r8
 800cad4:	464b      	mov	r3, r9
 800cad6:	4606      	mov	r6, r0
 800cad8:	460f      	mov	r7, r1
 800cada:	f7f4 f83d 	bl	8000b58 <__aeabi_dcmpgt>
 800cade:	b9c8      	cbnz	r0, 800cb14 <_dtoa_r+0x6e4>
 800cae0:	4642      	mov	r2, r8
 800cae2:	464b      	mov	r3, r9
 800cae4:	4630      	mov	r0, r6
 800cae6:	4639      	mov	r1, r7
 800cae8:	f7f4 f80e 	bl	8000b08 <__aeabi_dcmpeq>
 800caec:	b110      	cbz	r0, 800caf4 <_dtoa_r+0x6c4>
 800caee:	9b01      	ldr	r3, [sp, #4]
 800caf0:	07db      	lsls	r3, r3, #31
 800caf2:	d40f      	bmi.n	800cb14 <_dtoa_r+0x6e4>
 800caf4:	4651      	mov	r1, sl
 800caf6:	4620      	mov	r0, r4
 800caf8:	f000 fbcc 	bl	800d294 <_Bfree>
 800cafc:	2300      	movs	r3, #0
 800cafe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb00:	702b      	strb	r3, [r5, #0]
 800cb02:	f10b 0301 	add.w	r3, fp, #1
 800cb06:	6013      	str	r3, [r2, #0]
 800cb08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f43f ace2 	beq.w	800c4d4 <_dtoa_r+0xa4>
 800cb10:	601d      	str	r5, [r3, #0]
 800cb12:	e4df      	b.n	800c4d4 <_dtoa_r+0xa4>
 800cb14:	465f      	mov	r7, fp
 800cb16:	462b      	mov	r3, r5
 800cb18:	461d      	mov	r5, r3
 800cb1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb1e:	2a39      	cmp	r2, #57	; 0x39
 800cb20:	d106      	bne.n	800cb30 <_dtoa_r+0x700>
 800cb22:	9a00      	ldr	r2, [sp, #0]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d1f7      	bne.n	800cb18 <_dtoa_r+0x6e8>
 800cb28:	9900      	ldr	r1, [sp, #0]
 800cb2a:	2230      	movs	r2, #48	; 0x30
 800cb2c:	3701      	adds	r7, #1
 800cb2e:	700a      	strb	r2, [r1, #0]
 800cb30:	781a      	ldrb	r2, [r3, #0]
 800cb32:	3201      	adds	r2, #1
 800cb34:	701a      	strb	r2, [r3, #0]
 800cb36:	e790      	b.n	800ca5a <_dtoa_r+0x62a>
 800cb38:	4ba3      	ldr	r3, [pc, #652]	; (800cdc8 <_dtoa_r+0x998>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f7f3 fd7c 	bl	8000638 <__aeabi_dmul>
 800cb40:	2200      	movs	r2, #0
 800cb42:	2300      	movs	r3, #0
 800cb44:	4606      	mov	r6, r0
 800cb46:	460f      	mov	r7, r1
 800cb48:	f7f3 ffde 	bl	8000b08 <__aeabi_dcmpeq>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d09e      	beq.n	800ca8e <_dtoa_r+0x65e>
 800cb50:	e7d0      	b.n	800caf4 <_dtoa_r+0x6c4>
 800cb52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb54:	2a00      	cmp	r2, #0
 800cb56:	f000 80ca 	beq.w	800ccee <_dtoa_r+0x8be>
 800cb5a:	9a07      	ldr	r2, [sp, #28]
 800cb5c:	2a01      	cmp	r2, #1
 800cb5e:	f300 80ad 	bgt.w	800ccbc <_dtoa_r+0x88c>
 800cb62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb64:	2a00      	cmp	r2, #0
 800cb66:	f000 80a5 	beq.w	800ccb4 <_dtoa_r+0x884>
 800cb6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb6e:	9e08      	ldr	r6, [sp, #32]
 800cb70:	9d05      	ldr	r5, [sp, #20]
 800cb72:	9a05      	ldr	r2, [sp, #20]
 800cb74:	441a      	add	r2, r3
 800cb76:	9205      	str	r2, [sp, #20]
 800cb78:	9a06      	ldr	r2, [sp, #24]
 800cb7a:	2101      	movs	r1, #1
 800cb7c:	441a      	add	r2, r3
 800cb7e:	4620      	mov	r0, r4
 800cb80:	9206      	str	r2, [sp, #24]
 800cb82:	f000 fc3d 	bl	800d400 <__i2b>
 800cb86:	4607      	mov	r7, r0
 800cb88:	b165      	cbz	r5, 800cba4 <_dtoa_r+0x774>
 800cb8a:	9b06      	ldr	r3, [sp, #24]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	dd09      	ble.n	800cba4 <_dtoa_r+0x774>
 800cb90:	42ab      	cmp	r3, r5
 800cb92:	9a05      	ldr	r2, [sp, #20]
 800cb94:	bfa8      	it	ge
 800cb96:	462b      	movge	r3, r5
 800cb98:	1ad2      	subs	r2, r2, r3
 800cb9a:	9205      	str	r2, [sp, #20]
 800cb9c:	9a06      	ldr	r2, [sp, #24]
 800cb9e:	1aed      	subs	r5, r5, r3
 800cba0:	1ad3      	subs	r3, r2, r3
 800cba2:	9306      	str	r3, [sp, #24]
 800cba4:	9b08      	ldr	r3, [sp, #32]
 800cba6:	b1f3      	cbz	r3, 800cbe6 <_dtoa_r+0x7b6>
 800cba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	f000 80a3 	beq.w	800ccf6 <_dtoa_r+0x8c6>
 800cbb0:	2e00      	cmp	r6, #0
 800cbb2:	dd10      	ble.n	800cbd6 <_dtoa_r+0x7a6>
 800cbb4:	4639      	mov	r1, r7
 800cbb6:	4632      	mov	r2, r6
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f000 fce1 	bl	800d580 <__pow5mult>
 800cbbe:	4652      	mov	r2, sl
 800cbc0:	4601      	mov	r1, r0
 800cbc2:	4607      	mov	r7, r0
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	f000 fc31 	bl	800d42c <__multiply>
 800cbca:	4651      	mov	r1, sl
 800cbcc:	4680      	mov	r8, r0
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f000 fb60 	bl	800d294 <_Bfree>
 800cbd4:	46c2      	mov	sl, r8
 800cbd6:	9b08      	ldr	r3, [sp, #32]
 800cbd8:	1b9a      	subs	r2, r3, r6
 800cbda:	d004      	beq.n	800cbe6 <_dtoa_r+0x7b6>
 800cbdc:	4651      	mov	r1, sl
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f000 fcce 	bl	800d580 <__pow5mult>
 800cbe4:	4682      	mov	sl, r0
 800cbe6:	2101      	movs	r1, #1
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f000 fc09 	bl	800d400 <__i2b>
 800cbee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	4606      	mov	r6, r0
 800cbf4:	f340 8081 	ble.w	800ccfa <_dtoa_r+0x8ca>
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	4601      	mov	r1, r0
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	f000 fcbf 	bl	800d580 <__pow5mult>
 800cc02:	9b07      	ldr	r3, [sp, #28]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	4606      	mov	r6, r0
 800cc08:	dd7a      	ble.n	800cd00 <_dtoa_r+0x8d0>
 800cc0a:	f04f 0800 	mov.w	r8, #0
 800cc0e:	6933      	ldr	r3, [r6, #16]
 800cc10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cc14:	6918      	ldr	r0, [r3, #16]
 800cc16:	f000 fba5 	bl	800d364 <__hi0bits>
 800cc1a:	f1c0 0020 	rsb	r0, r0, #32
 800cc1e:	9b06      	ldr	r3, [sp, #24]
 800cc20:	4418      	add	r0, r3
 800cc22:	f010 001f 	ands.w	r0, r0, #31
 800cc26:	f000 8094 	beq.w	800cd52 <_dtoa_r+0x922>
 800cc2a:	f1c0 0320 	rsb	r3, r0, #32
 800cc2e:	2b04      	cmp	r3, #4
 800cc30:	f340 8085 	ble.w	800cd3e <_dtoa_r+0x90e>
 800cc34:	9b05      	ldr	r3, [sp, #20]
 800cc36:	f1c0 001c 	rsb	r0, r0, #28
 800cc3a:	4403      	add	r3, r0
 800cc3c:	9305      	str	r3, [sp, #20]
 800cc3e:	9b06      	ldr	r3, [sp, #24]
 800cc40:	4403      	add	r3, r0
 800cc42:	4405      	add	r5, r0
 800cc44:	9306      	str	r3, [sp, #24]
 800cc46:	9b05      	ldr	r3, [sp, #20]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	dd05      	ble.n	800cc58 <_dtoa_r+0x828>
 800cc4c:	4651      	mov	r1, sl
 800cc4e:	461a      	mov	r2, r3
 800cc50:	4620      	mov	r0, r4
 800cc52:	f000 fcef 	bl	800d634 <__lshift>
 800cc56:	4682      	mov	sl, r0
 800cc58:	9b06      	ldr	r3, [sp, #24]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	dd05      	ble.n	800cc6a <_dtoa_r+0x83a>
 800cc5e:	4631      	mov	r1, r6
 800cc60:	461a      	mov	r2, r3
 800cc62:	4620      	mov	r0, r4
 800cc64:	f000 fce6 	bl	800d634 <__lshift>
 800cc68:	4606      	mov	r6, r0
 800cc6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d072      	beq.n	800cd56 <_dtoa_r+0x926>
 800cc70:	4631      	mov	r1, r6
 800cc72:	4650      	mov	r0, sl
 800cc74:	f000 fd4a 	bl	800d70c <__mcmp>
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	da6c      	bge.n	800cd56 <_dtoa_r+0x926>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	4651      	mov	r1, sl
 800cc80:	220a      	movs	r2, #10
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 fb28 	bl	800d2d8 <__multadd>
 800cc88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc8e:	4682      	mov	sl, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f000 81b0 	beq.w	800cff6 <_dtoa_r+0xbc6>
 800cc96:	2300      	movs	r3, #0
 800cc98:	4639      	mov	r1, r7
 800cc9a:	220a      	movs	r2, #10
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f000 fb1b 	bl	800d2d8 <__multadd>
 800cca2:	9b01      	ldr	r3, [sp, #4]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	4607      	mov	r7, r0
 800cca8:	f300 8096 	bgt.w	800cdd8 <_dtoa_r+0x9a8>
 800ccac:	9b07      	ldr	r3, [sp, #28]
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	dc59      	bgt.n	800cd66 <_dtoa_r+0x936>
 800ccb2:	e091      	b.n	800cdd8 <_dtoa_r+0x9a8>
 800ccb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ccba:	e758      	b.n	800cb6e <_dtoa_r+0x73e>
 800ccbc:	9b04      	ldr	r3, [sp, #16]
 800ccbe:	1e5e      	subs	r6, r3, #1
 800ccc0:	9b08      	ldr	r3, [sp, #32]
 800ccc2:	42b3      	cmp	r3, r6
 800ccc4:	bfbf      	itttt	lt
 800ccc6:	9b08      	ldrlt	r3, [sp, #32]
 800ccc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ccca:	9608      	strlt	r6, [sp, #32]
 800cccc:	1af3      	sublt	r3, r6, r3
 800ccce:	bfb4      	ite	lt
 800ccd0:	18d2      	addlt	r2, r2, r3
 800ccd2:	1b9e      	subge	r6, r3, r6
 800ccd4:	9b04      	ldr	r3, [sp, #16]
 800ccd6:	bfbc      	itt	lt
 800ccd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ccda:	2600      	movlt	r6, #0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	bfb7      	itett	lt
 800cce0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cce4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cce8:	1a9d      	sublt	r5, r3, r2
 800ccea:	2300      	movlt	r3, #0
 800ccec:	e741      	b.n	800cb72 <_dtoa_r+0x742>
 800ccee:	9e08      	ldr	r6, [sp, #32]
 800ccf0:	9d05      	ldr	r5, [sp, #20]
 800ccf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ccf4:	e748      	b.n	800cb88 <_dtoa_r+0x758>
 800ccf6:	9a08      	ldr	r2, [sp, #32]
 800ccf8:	e770      	b.n	800cbdc <_dtoa_r+0x7ac>
 800ccfa:	9b07      	ldr	r3, [sp, #28]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	dc19      	bgt.n	800cd34 <_dtoa_r+0x904>
 800cd00:	9b02      	ldr	r3, [sp, #8]
 800cd02:	b9bb      	cbnz	r3, 800cd34 <_dtoa_r+0x904>
 800cd04:	9b03      	ldr	r3, [sp, #12]
 800cd06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd0a:	b99b      	cbnz	r3, 800cd34 <_dtoa_r+0x904>
 800cd0c:	9b03      	ldr	r3, [sp, #12]
 800cd0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd12:	0d1b      	lsrs	r3, r3, #20
 800cd14:	051b      	lsls	r3, r3, #20
 800cd16:	b183      	cbz	r3, 800cd3a <_dtoa_r+0x90a>
 800cd18:	9b05      	ldr	r3, [sp, #20]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	9305      	str	r3, [sp, #20]
 800cd1e:	9b06      	ldr	r3, [sp, #24]
 800cd20:	3301      	adds	r3, #1
 800cd22:	9306      	str	r3, [sp, #24]
 800cd24:	f04f 0801 	mov.w	r8, #1
 800cd28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f47f af6f 	bne.w	800cc0e <_dtoa_r+0x7de>
 800cd30:	2001      	movs	r0, #1
 800cd32:	e774      	b.n	800cc1e <_dtoa_r+0x7ee>
 800cd34:	f04f 0800 	mov.w	r8, #0
 800cd38:	e7f6      	b.n	800cd28 <_dtoa_r+0x8f8>
 800cd3a:	4698      	mov	r8, r3
 800cd3c:	e7f4      	b.n	800cd28 <_dtoa_r+0x8f8>
 800cd3e:	d082      	beq.n	800cc46 <_dtoa_r+0x816>
 800cd40:	9a05      	ldr	r2, [sp, #20]
 800cd42:	331c      	adds	r3, #28
 800cd44:	441a      	add	r2, r3
 800cd46:	9205      	str	r2, [sp, #20]
 800cd48:	9a06      	ldr	r2, [sp, #24]
 800cd4a:	441a      	add	r2, r3
 800cd4c:	441d      	add	r5, r3
 800cd4e:	9206      	str	r2, [sp, #24]
 800cd50:	e779      	b.n	800cc46 <_dtoa_r+0x816>
 800cd52:	4603      	mov	r3, r0
 800cd54:	e7f4      	b.n	800cd40 <_dtoa_r+0x910>
 800cd56:	9b04      	ldr	r3, [sp, #16]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	dc37      	bgt.n	800cdcc <_dtoa_r+0x99c>
 800cd5c:	9b07      	ldr	r3, [sp, #28]
 800cd5e:	2b02      	cmp	r3, #2
 800cd60:	dd34      	ble.n	800cdcc <_dtoa_r+0x99c>
 800cd62:	9b04      	ldr	r3, [sp, #16]
 800cd64:	9301      	str	r3, [sp, #4]
 800cd66:	9b01      	ldr	r3, [sp, #4]
 800cd68:	b963      	cbnz	r3, 800cd84 <_dtoa_r+0x954>
 800cd6a:	4631      	mov	r1, r6
 800cd6c:	2205      	movs	r2, #5
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f000 fab2 	bl	800d2d8 <__multadd>
 800cd74:	4601      	mov	r1, r0
 800cd76:	4606      	mov	r6, r0
 800cd78:	4650      	mov	r0, sl
 800cd7a:	f000 fcc7 	bl	800d70c <__mcmp>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	f73f adbb 	bgt.w	800c8fa <_dtoa_r+0x4ca>
 800cd84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd86:	9d00      	ldr	r5, [sp, #0]
 800cd88:	ea6f 0b03 	mvn.w	fp, r3
 800cd8c:	f04f 0800 	mov.w	r8, #0
 800cd90:	4631      	mov	r1, r6
 800cd92:	4620      	mov	r0, r4
 800cd94:	f000 fa7e 	bl	800d294 <_Bfree>
 800cd98:	2f00      	cmp	r7, #0
 800cd9a:	f43f aeab 	beq.w	800caf4 <_dtoa_r+0x6c4>
 800cd9e:	f1b8 0f00 	cmp.w	r8, #0
 800cda2:	d005      	beq.n	800cdb0 <_dtoa_r+0x980>
 800cda4:	45b8      	cmp	r8, r7
 800cda6:	d003      	beq.n	800cdb0 <_dtoa_r+0x980>
 800cda8:	4641      	mov	r1, r8
 800cdaa:	4620      	mov	r0, r4
 800cdac:	f000 fa72 	bl	800d294 <_Bfree>
 800cdb0:	4639      	mov	r1, r7
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f000 fa6e 	bl	800d294 <_Bfree>
 800cdb8:	e69c      	b.n	800caf4 <_dtoa_r+0x6c4>
 800cdba:	2600      	movs	r6, #0
 800cdbc:	4637      	mov	r7, r6
 800cdbe:	e7e1      	b.n	800cd84 <_dtoa_r+0x954>
 800cdc0:	46bb      	mov	fp, r7
 800cdc2:	4637      	mov	r7, r6
 800cdc4:	e599      	b.n	800c8fa <_dtoa_r+0x4ca>
 800cdc6:	bf00      	nop
 800cdc8:	40240000 	.word	0x40240000
 800cdcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f000 80c8 	beq.w	800cf64 <_dtoa_r+0xb34>
 800cdd4:	9b04      	ldr	r3, [sp, #16]
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	2d00      	cmp	r5, #0
 800cdda:	dd05      	ble.n	800cde8 <_dtoa_r+0x9b8>
 800cddc:	4639      	mov	r1, r7
 800cdde:	462a      	mov	r2, r5
 800cde0:	4620      	mov	r0, r4
 800cde2:	f000 fc27 	bl	800d634 <__lshift>
 800cde6:	4607      	mov	r7, r0
 800cde8:	f1b8 0f00 	cmp.w	r8, #0
 800cdec:	d05b      	beq.n	800cea6 <_dtoa_r+0xa76>
 800cdee:	6879      	ldr	r1, [r7, #4]
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f000 fa0f 	bl	800d214 <_Balloc>
 800cdf6:	4605      	mov	r5, r0
 800cdf8:	b928      	cbnz	r0, 800ce06 <_dtoa_r+0x9d6>
 800cdfa:	4b83      	ldr	r3, [pc, #524]	; (800d008 <_dtoa_r+0xbd8>)
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ce02:	f7ff bb2e 	b.w	800c462 <_dtoa_r+0x32>
 800ce06:	693a      	ldr	r2, [r7, #16]
 800ce08:	3202      	adds	r2, #2
 800ce0a:	0092      	lsls	r2, r2, #2
 800ce0c:	f107 010c 	add.w	r1, r7, #12
 800ce10:	300c      	adds	r0, #12
 800ce12:	f7ff fa77 	bl	800c304 <memcpy>
 800ce16:	2201      	movs	r2, #1
 800ce18:	4629      	mov	r1, r5
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	f000 fc0a 	bl	800d634 <__lshift>
 800ce20:	9b00      	ldr	r3, [sp, #0]
 800ce22:	3301      	adds	r3, #1
 800ce24:	9304      	str	r3, [sp, #16]
 800ce26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	9308      	str	r3, [sp, #32]
 800ce2e:	9b02      	ldr	r3, [sp, #8]
 800ce30:	f003 0301 	and.w	r3, r3, #1
 800ce34:	46b8      	mov	r8, r7
 800ce36:	9306      	str	r3, [sp, #24]
 800ce38:	4607      	mov	r7, r0
 800ce3a:	9b04      	ldr	r3, [sp, #16]
 800ce3c:	4631      	mov	r1, r6
 800ce3e:	3b01      	subs	r3, #1
 800ce40:	4650      	mov	r0, sl
 800ce42:	9301      	str	r3, [sp, #4]
 800ce44:	f7ff fa6c 	bl	800c320 <quorem>
 800ce48:	4641      	mov	r1, r8
 800ce4a:	9002      	str	r0, [sp, #8]
 800ce4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ce50:	4650      	mov	r0, sl
 800ce52:	f000 fc5b 	bl	800d70c <__mcmp>
 800ce56:	463a      	mov	r2, r7
 800ce58:	9005      	str	r0, [sp, #20]
 800ce5a:	4631      	mov	r1, r6
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	f000 fc71 	bl	800d744 <__mdiff>
 800ce62:	68c2      	ldr	r2, [r0, #12]
 800ce64:	4605      	mov	r5, r0
 800ce66:	bb02      	cbnz	r2, 800ceaa <_dtoa_r+0xa7a>
 800ce68:	4601      	mov	r1, r0
 800ce6a:	4650      	mov	r0, sl
 800ce6c:	f000 fc4e 	bl	800d70c <__mcmp>
 800ce70:	4602      	mov	r2, r0
 800ce72:	4629      	mov	r1, r5
 800ce74:	4620      	mov	r0, r4
 800ce76:	9209      	str	r2, [sp, #36]	; 0x24
 800ce78:	f000 fa0c 	bl	800d294 <_Bfree>
 800ce7c:	9b07      	ldr	r3, [sp, #28]
 800ce7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce80:	9d04      	ldr	r5, [sp, #16]
 800ce82:	ea43 0102 	orr.w	r1, r3, r2
 800ce86:	9b06      	ldr	r3, [sp, #24]
 800ce88:	4319      	orrs	r1, r3
 800ce8a:	d110      	bne.n	800ceae <_dtoa_r+0xa7e>
 800ce8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce90:	d029      	beq.n	800cee6 <_dtoa_r+0xab6>
 800ce92:	9b05      	ldr	r3, [sp, #20]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	dd02      	ble.n	800ce9e <_dtoa_r+0xa6e>
 800ce98:	9b02      	ldr	r3, [sp, #8]
 800ce9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ce9e:	9b01      	ldr	r3, [sp, #4]
 800cea0:	f883 9000 	strb.w	r9, [r3]
 800cea4:	e774      	b.n	800cd90 <_dtoa_r+0x960>
 800cea6:	4638      	mov	r0, r7
 800cea8:	e7ba      	b.n	800ce20 <_dtoa_r+0x9f0>
 800ceaa:	2201      	movs	r2, #1
 800ceac:	e7e1      	b.n	800ce72 <_dtoa_r+0xa42>
 800ceae:	9b05      	ldr	r3, [sp, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	db04      	blt.n	800cebe <_dtoa_r+0xa8e>
 800ceb4:	9907      	ldr	r1, [sp, #28]
 800ceb6:	430b      	orrs	r3, r1
 800ceb8:	9906      	ldr	r1, [sp, #24]
 800ceba:	430b      	orrs	r3, r1
 800cebc:	d120      	bne.n	800cf00 <_dtoa_r+0xad0>
 800cebe:	2a00      	cmp	r2, #0
 800cec0:	dded      	ble.n	800ce9e <_dtoa_r+0xa6e>
 800cec2:	4651      	mov	r1, sl
 800cec4:	2201      	movs	r2, #1
 800cec6:	4620      	mov	r0, r4
 800cec8:	f000 fbb4 	bl	800d634 <__lshift>
 800cecc:	4631      	mov	r1, r6
 800cece:	4682      	mov	sl, r0
 800ced0:	f000 fc1c 	bl	800d70c <__mcmp>
 800ced4:	2800      	cmp	r0, #0
 800ced6:	dc03      	bgt.n	800cee0 <_dtoa_r+0xab0>
 800ced8:	d1e1      	bne.n	800ce9e <_dtoa_r+0xa6e>
 800ceda:	f019 0f01 	tst.w	r9, #1
 800cede:	d0de      	beq.n	800ce9e <_dtoa_r+0xa6e>
 800cee0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cee4:	d1d8      	bne.n	800ce98 <_dtoa_r+0xa68>
 800cee6:	9a01      	ldr	r2, [sp, #4]
 800cee8:	2339      	movs	r3, #57	; 0x39
 800ceea:	7013      	strb	r3, [r2, #0]
 800ceec:	462b      	mov	r3, r5
 800ceee:	461d      	mov	r5, r3
 800cef0:	3b01      	subs	r3, #1
 800cef2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cef6:	2a39      	cmp	r2, #57	; 0x39
 800cef8:	d06c      	beq.n	800cfd4 <_dtoa_r+0xba4>
 800cefa:	3201      	adds	r2, #1
 800cefc:	701a      	strb	r2, [r3, #0]
 800cefe:	e747      	b.n	800cd90 <_dtoa_r+0x960>
 800cf00:	2a00      	cmp	r2, #0
 800cf02:	dd07      	ble.n	800cf14 <_dtoa_r+0xae4>
 800cf04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cf08:	d0ed      	beq.n	800cee6 <_dtoa_r+0xab6>
 800cf0a:	9a01      	ldr	r2, [sp, #4]
 800cf0c:	f109 0301 	add.w	r3, r9, #1
 800cf10:	7013      	strb	r3, [r2, #0]
 800cf12:	e73d      	b.n	800cd90 <_dtoa_r+0x960>
 800cf14:	9b04      	ldr	r3, [sp, #16]
 800cf16:	9a08      	ldr	r2, [sp, #32]
 800cf18:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d043      	beq.n	800cfa8 <_dtoa_r+0xb78>
 800cf20:	4651      	mov	r1, sl
 800cf22:	2300      	movs	r3, #0
 800cf24:	220a      	movs	r2, #10
 800cf26:	4620      	mov	r0, r4
 800cf28:	f000 f9d6 	bl	800d2d8 <__multadd>
 800cf2c:	45b8      	cmp	r8, r7
 800cf2e:	4682      	mov	sl, r0
 800cf30:	f04f 0300 	mov.w	r3, #0
 800cf34:	f04f 020a 	mov.w	r2, #10
 800cf38:	4641      	mov	r1, r8
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	d107      	bne.n	800cf4e <_dtoa_r+0xb1e>
 800cf3e:	f000 f9cb 	bl	800d2d8 <__multadd>
 800cf42:	4680      	mov	r8, r0
 800cf44:	4607      	mov	r7, r0
 800cf46:	9b04      	ldr	r3, [sp, #16]
 800cf48:	3301      	adds	r3, #1
 800cf4a:	9304      	str	r3, [sp, #16]
 800cf4c:	e775      	b.n	800ce3a <_dtoa_r+0xa0a>
 800cf4e:	f000 f9c3 	bl	800d2d8 <__multadd>
 800cf52:	4639      	mov	r1, r7
 800cf54:	4680      	mov	r8, r0
 800cf56:	2300      	movs	r3, #0
 800cf58:	220a      	movs	r2, #10
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f000 f9bc 	bl	800d2d8 <__multadd>
 800cf60:	4607      	mov	r7, r0
 800cf62:	e7f0      	b.n	800cf46 <_dtoa_r+0xb16>
 800cf64:	9b04      	ldr	r3, [sp, #16]
 800cf66:	9301      	str	r3, [sp, #4]
 800cf68:	9d00      	ldr	r5, [sp, #0]
 800cf6a:	4631      	mov	r1, r6
 800cf6c:	4650      	mov	r0, sl
 800cf6e:	f7ff f9d7 	bl	800c320 <quorem>
 800cf72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cf76:	9b00      	ldr	r3, [sp, #0]
 800cf78:	f805 9b01 	strb.w	r9, [r5], #1
 800cf7c:	1aea      	subs	r2, r5, r3
 800cf7e:	9b01      	ldr	r3, [sp, #4]
 800cf80:	4293      	cmp	r3, r2
 800cf82:	dd07      	ble.n	800cf94 <_dtoa_r+0xb64>
 800cf84:	4651      	mov	r1, sl
 800cf86:	2300      	movs	r3, #0
 800cf88:	220a      	movs	r2, #10
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f000 f9a4 	bl	800d2d8 <__multadd>
 800cf90:	4682      	mov	sl, r0
 800cf92:	e7ea      	b.n	800cf6a <_dtoa_r+0xb3a>
 800cf94:	9b01      	ldr	r3, [sp, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	bfc8      	it	gt
 800cf9a:	461d      	movgt	r5, r3
 800cf9c:	9b00      	ldr	r3, [sp, #0]
 800cf9e:	bfd8      	it	le
 800cfa0:	2501      	movle	r5, #1
 800cfa2:	441d      	add	r5, r3
 800cfa4:	f04f 0800 	mov.w	r8, #0
 800cfa8:	4651      	mov	r1, sl
 800cfaa:	2201      	movs	r2, #1
 800cfac:	4620      	mov	r0, r4
 800cfae:	f000 fb41 	bl	800d634 <__lshift>
 800cfb2:	4631      	mov	r1, r6
 800cfb4:	4682      	mov	sl, r0
 800cfb6:	f000 fba9 	bl	800d70c <__mcmp>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	dc96      	bgt.n	800ceec <_dtoa_r+0xabc>
 800cfbe:	d102      	bne.n	800cfc6 <_dtoa_r+0xb96>
 800cfc0:	f019 0f01 	tst.w	r9, #1
 800cfc4:	d192      	bne.n	800ceec <_dtoa_r+0xabc>
 800cfc6:	462b      	mov	r3, r5
 800cfc8:	461d      	mov	r5, r3
 800cfca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfce:	2a30      	cmp	r2, #48	; 0x30
 800cfd0:	d0fa      	beq.n	800cfc8 <_dtoa_r+0xb98>
 800cfd2:	e6dd      	b.n	800cd90 <_dtoa_r+0x960>
 800cfd4:	9a00      	ldr	r2, [sp, #0]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d189      	bne.n	800ceee <_dtoa_r+0xabe>
 800cfda:	f10b 0b01 	add.w	fp, fp, #1
 800cfde:	2331      	movs	r3, #49	; 0x31
 800cfe0:	e796      	b.n	800cf10 <_dtoa_r+0xae0>
 800cfe2:	4b0a      	ldr	r3, [pc, #40]	; (800d00c <_dtoa_r+0xbdc>)
 800cfe4:	f7ff ba99 	b.w	800c51a <_dtoa_r+0xea>
 800cfe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f47f aa6d 	bne.w	800c4ca <_dtoa_r+0x9a>
 800cff0:	4b07      	ldr	r3, [pc, #28]	; (800d010 <_dtoa_r+0xbe0>)
 800cff2:	f7ff ba92 	b.w	800c51a <_dtoa_r+0xea>
 800cff6:	9b01      	ldr	r3, [sp, #4]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	dcb5      	bgt.n	800cf68 <_dtoa_r+0xb38>
 800cffc:	9b07      	ldr	r3, [sp, #28]
 800cffe:	2b02      	cmp	r3, #2
 800d000:	f73f aeb1 	bgt.w	800cd66 <_dtoa_r+0x936>
 800d004:	e7b0      	b.n	800cf68 <_dtoa_r+0xb38>
 800d006:	bf00      	nop
 800d008:	0800e624 	.word	0x0800e624
 800d00c:	0800e584 	.word	0x0800e584
 800d010:	0800e5a8 	.word	0x0800e5a8

0800d014 <_free_r>:
 800d014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d016:	2900      	cmp	r1, #0
 800d018:	d044      	beq.n	800d0a4 <_free_r+0x90>
 800d01a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d01e:	9001      	str	r0, [sp, #4]
 800d020:	2b00      	cmp	r3, #0
 800d022:	f1a1 0404 	sub.w	r4, r1, #4
 800d026:	bfb8      	it	lt
 800d028:	18e4      	addlt	r4, r4, r3
 800d02a:	f000 f8e7 	bl	800d1fc <__malloc_lock>
 800d02e:	4a1e      	ldr	r2, [pc, #120]	; (800d0a8 <_free_r+0x94>)
 800d030:	9801      	ldr	r0, [sp, #4]
 800d032:	6813      	ldr	r3, [r2, #0]
 800d034:	b933      	cbnz	r3, 800d044 <_free_r+0x30>
 800d036:	6063      	str	r3, [r4, #4]
 800d038:	6014      	str	r4, [r2, #0]
 800d03a:	b003      	add	sp, #12
 800d03c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d040:	f000 b8e2 	b.w	800d208 <__malloc_unlock>
 800d044:	42a3      	cmp	r3, r4
 800d046:	d908      	bls.n	800d05a <_free_r+0x46>
 800d048:	6825      	ldr	r5, [r4, #0]
 800d04a:	1961      	adds	r1, r4, r5
 800d04c:	428b      	cmp	r3, r1
 800d04e:	bf01      	itttt	eq
 800d050:	6819      	ldreq	r1, [r3, #0]
 800d052:	685b      	ldreq	r3, [r3, #4]
 800d054:	1949      	addeq	r1, r1, r5
 800d056:	6021      	streq	r1, [r4, #0]
 800d058:	e7ed      	b.n	800d036 <_free_r+0x22>
 800d05a:	461a      	mov	r2, r3
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	b10b      	cbz	r3, 800d064 <_free_r+0x50>
 800d060:	42a3      	cmp	r3, r4
 800d062:	d9fa      	bls.n	800d05a <_free_r+0x46>
 800d064:	6811      	ldr	r1, [r2, #0]
 800d066:	1855      	adds	r5, r2, r1
 800d068:	42a5      	cmp	r5, r4
 800d06a:	d10b      	bne.n	800d084 <_free_r+0x70>
 800d06c:	6824      	ldr	r4, [r4, #0]
 800d06e:	4421      	add	r1, r4
 800d070:	1854      	adds	r4, r2, r1
 800d072:	42a3      	cmp	r3, r4
 800d074:	6011      	str	r1, [r2, #0]
 800d076:	d1e0      	bne.n	800d03a <_free_r+0x26>
 800d078:	681c      	ldr	r4, [r3, #0]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	6053      	str	r3, [r2, #4]
 800d07e:	440c      	add	r4, r1
 800d080:	6014      	str	r4, [r2, #0]
 800d082:	e7da      	b.n	800d03a <_free_r+0x26>
 800d084:	d902      	bls.n	800d08c <_free_r+0x78>
 800d086:	230c      	movs	r3, #12
 800d088:	6003      	str	r3, [r0, #0]
 800d08a:	e7d6      	b.n	800d03a <_free_r+0x26>
 800d08c:	6825      	ldr	r5, [r4, #0]
 800d08e:	1961      	adds	r1, r4, r5
 800d090:	428b      	cmp	r3, r1
 800d092:	bf04      	itt	eq
 800d094:	6819      	ldreq	r1, [r3, #0]
 800d096:	685b      	ldreq	r3, [r3, #4]
 800d098:	6063      	str	r3, [r4, #4]
 800d09a:	bf04      	itt	eq
 800d09c:	1949      	addeq	r1, r1, r5
 800d09e:	6021      	streq	r1, [r4, #0]
 800d0a0:	6054      	str	r4, [r2, #4]
 800d0a2:	e7ca      	b.n	800d03a <_free_r+0x26>
 800d0a4:	b003      	add	sp, #12
 800d0a6:	bd30      	pop	{r4, r5, pc}
 800d0a8:	200058c4 	.word	0x200058c4

0800d0ac <malloc>:
 800d0ac:	4b02      	ldr	r3, [pc, #8]	; (800d0b8 <malloc+0xc>)
 800d0ae:	4601      	mov	r1, r0
 800d0b0:	6818      	ldr	r0, [r3, #0]
 800d0b2:	f000 b823 	b.w	800d0fc <_malloc_r>
 800d0b6:	bf00      	nop
 800d0b8:	20000080 	.word	0x20000080

0800d0bc <sbrk_aligned>:
 800d0bc:	b570      	push	{r4, r5, r6, lr}
 800d0be:	4e0e      	ldr	r6, [pc, #56]	; (800d0f8 <sbrk_aligned+0x3c>)
 800d0c0:	460c      	mov	r4, r1
 800d0c2:	6831      	ldr	r1, [r6, #0]
 800d0c4:	4605      	mov	r5, r0
 800d0c6:	b911      	cbnz	r1, 800d0ce <sbrk_aligned+0x12>
 800d0c8:	f000 fe40 	bl	800dd4c <_sbrk_r>
 800d0cc:	6030      	str	r0, [r6, #0]
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	f000 fe3b 	bl	800dd4c <_sbrk_r>
 800d0d6:	1c43      	adds	r3, r0, #1
 800d0d8:	d00a      	beq.n	800d0f0 <sbrk_aligned+0x34>
 800d0da:	1cc4      	adds	r4, r0, #3
 800d0dc:	f024 0403 	bic.w	r4, r4, #3
 800d0e0:	42a0      	cmp	r0, r4
 800d0e2:	d007      	beq.n	800d0f4 <sbrk_aligned+0x38>
 800d0e4:	1a21      	subs	r1, r4, r0
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	f000 fe30 	bl	800dd4c <_sbrk_r>
 800d0ec:	3001      	adds	r0, #1
 800d0ee:	d101      	bne.n	800d0f4 <sbrk_aligned+0x38>
 800d0f0:	f04f 34ff 	mov.w	r4, #4294967295
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	bd70      	pop	{r4, r5, r6, pc}
 800d0f8:	200058c8 	.word	0x200058c8

0800d0fc <_malloc_r>:
 800d0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d100:	1ccd      	adds	r5, r1, #3
 800d102:	f025 0503 	bic.w	r5, r5, #3
 800d106:	3508      	adds	r5, #8
 800d108:	2d0c      	cmp	r5, #12
 800d10a:	bf38      	it	cc
 800d10c:	250c      	movcc	r5, #12
 800d10e:	2d00      	cmp	r5, #0
 800d110:	4607      	mov	r7, r0
 800d112:	db01      	blt.n	800d118 <_malloc_r+0x1c>
 800d114:	42a9      	cmp	r1, r5
 800d116:	d905      	bls.n	800d124 <_malloc_r+0x28>
 800d118:	230c      	movs	r3, #12
 800d11a:	603b      	str	r3, [r7, #0]
 800d11c:	2600      	movs	r6, #0
 800d11e:	4630      	mov	r0, r6
 800d120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d124:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d1f8 <_malloc_r+0xfc>
 800d128:	f000 f868 	bl	800d1fc <__malloc_lock>
 800d12c:	f8d8 3000 	ldr.w	r3, [r8]
 800d130:	461c      	mov	r4, r3
 800d132:	bb5c      	cbnz	r4, 800d18c <_malloc_r+0x90>
 800d134:	4629      	mov	r1, r5
 800d136:	4638      	mov	r0, r7
 800d138:	f7ff ffc0 	bl	800d0bc <sbrk_aligned>
 800d13c:	1c43      	adds	r3, r0, #1
 800d13e:	4604      	mov	r4, r0
 800d140:	d155      	bne.n	800d1ee <_malloc_r+0xf2>
 800d142:	f8d8 4000 	ldr.w	r4, [r8]
 800d146:	4626      	mov	r6, r4
 800d148:	2e00      	cmp	r6, #0
 800d14a:	d145      	bne.n	800d1d8 <_malloc_r+0xdc>
 800d14c:	2c00      	cmp	r4, #0
 800d14e:	d048      	beq.n	800d1e2 <_malloc_r+0xe6>
 800d150:	6823      	ldr	r3, [r4, #0]
 800d152:	4631      	mov	r1, r6
 800d154:	4638      	mov	r0, r7
 800d156:	eb04 0903 	add.w	r9, r4, r3
 800d15a:	f000 fdf7 	bl	800dd4c <_sbrk_r>
 800d15e:	4581      	cmp	r9, r0
 800d160:	d13f      	bne.n	800d1e2 <_malloc_r+0xe6>
 800d162:	6821      	ldr	r1, [r4, #0]
 800d164:	1a6d      	subs	r5, r5, r1
 800d166:	4629      	mov	r1, r5
 800d168:	4638      	mov	r0, r7
 800d16a:	f7ff ffa7 	bl	800d0bc <sbrk_aligned>
 800d16e:	3001      	adds	r0, #1
 800d170:	d037      	beq.n	800d1e2 <_malloc_r+0xe6>
 800d172:	6823      	ldr	r3, [r4, #0]
 800d174:	442b      	add	r3, r5
 800d176:	6023      	str	r3, [r4, #0]
 800d178:	f8d8 3000 	ldr.w	r3, [r8]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d038      	beq.n	800d1f2 <_malloc_r+0xf6>
 800d180:	685a      	ldr	r2, [r3, #4]
 800d182:	42a2      	cmp	r2, r4
 800d184:	d12b      	bne.n	800d1de <_malloc_r+0xe2>
 800d186:	2200      	movs	r2, #0
 800d188:	605a      	str	r2, [r3, #4]
 800d18a:	e00f      	b.n	800d1ac <_malloc_r+0xb0>
 800d18c:	6822      	ldr	r2, [r4, #0]
 800d18e:	1b52      	subs	r2, r2, r5
 800d190:	d41f      	bmi.n	800d1d2 <_malloc_r+0xd6>
 800d192:	2a0b      	cmp	r2, #11
 800d194:	d917      	bls.n	800d1c6 <_malloc_r+0xca>
 800d196:	1961      	adds	r1, r4, r5
 800d198:	42a3      	cmp	r3, r4
 800d19a:	6025      	str	r5, [r4, #0]
 800d19c:	bf18      	it	ne
 800d19e:	6059      	strne	r1, [r3, #4]
 800d1a0:	6863      	ldr	r3, [r4, #4]
 800d1a2:	bf08      	it	eq
 800d1a4:	f8c8 1000 	streq.w	r1, [r8]
 800d1a8:	5162      	str	r2, [r4, r5]
 800d1aa:	604b      	str	r3, [r1, #4]
 800d1ac:	4638      	mov	r0, r7
 800d1ae:	f104 060b 	add.w	r6, r4, #11
 800d1b2:	f000 f829 	bl	800d208 <__malloc_unlock>
 800d1b6:	f026 0607 	bic.w	r6, r6, #7
 800d1ba:	1d23      	adds	r3, r4, #4
 800d1bc:	1af2      	subs	r2, r6, r3
 800d1be:	d0ae      	beq.n	800d11e <_malloc_r+0x22>
 800d1c0:	1b9b      	subs	r3, r3, r6
 800d1c2:	50a3      	str	r3, [r4, r2]
 800d1c4:	e7ab      	b.n	800d11e <_malloc_r+0x22>
 800d1c6:	42a3      	cmp	r3, r4
 800d1c8:	6862      	ldr	r2, [r4, #4]
 800d1ca:	d1dd      	bne.n	800d188 <_malloc_r+0x8c>
 800d1cc:	f8c8 2000 	str.w	r2, [r8]
 800d1d0:	e7ec      	b.n	800d1ac <_malloc_r+0xb0>
 800d1d2:	4623      	mov	r3, r4
 800d1d4:	6864      	ldr	r4, [r4, #4]
 800d1d6:	e7ac      	b.n	800d132 <_malloc_r+0x36>
 800d1d8:	4634      	mov	r4, r6
 800d1da:	6876      	ldr	r6, [r6, #4]
 800d1dc:	e7b4      	b.n	800d148 <_malloc_r+0x4c>
 800d1de:	4613      	mov	r3, r2
 800d1e0:	e7cc      	b.n	800d17c <_malloc_r+0x80>
 800d1e2:	230c      	movs	r3, #12
 800d1e4:	603b      	str	r3, [r7, #0]
 800d1e6:	4638      	mov	r0, r7
 800d1e8:	f000 f80e 	bl	800d208 <__malloc_unlock>
 800d1ec:	e797      	b.n	800d11e <_malloc_r+0x22>
 800d1ee:	6025      	str	r5, [r4, #0]
 800d1f0:	e7dc      	b.n	800d1ac <_malloc_r+0xb0>
 800d1f2:	605b      	str	r3, [r3, #4]
 800d1f4:	deff      	udf	#255	; 0xff
 800d1f6:	bf00      	nop
 800d1f8:	200058c4 	.word	0x200058c4

0800d1fc <__malloc_lock>:
 800d1fc:	4801      	ldr	r0, [pc, #4]	; (800d204 <__malloc_lock+0x8>)
 800d1fe:	f7ff b87f 	b.w	800c300 <__retarget_lock_acquire_recursive>
 800d202:	bf00      	nop
 800d204:	200058c0 	.word	0x200058c0

0800d208 <__malloc_unlock>:
 800d208:	4801      	ldr	r0, [pc, #4]	; (800d210 <__malloc_unlock+0x8>)
 800d20a:	f7ff b87a 	b.w	800c302 <__retarget_lock_release_recursive>
 800d20e:	bf00      	nop
 800d210:	200058c0 	.word	0x200058c0

0800d214 <_Balloc>:
 800d214:	b570      	push	{r4, r5, r6, lr}
 800d216:	69c6      	ldr	r6, [r0, #28]
 800d218:	4604      	mov	r4, r0
 800d21a:	460d      	mov	r5, r1
 800d21c:	b976      	cbnz	r6, 800d23c <_Balloc+0x28>
 800d21e:	2010      	movs	r0, #16
 800d220:	f7ff ff44 	bl	800d0ac <malloc>
 800d224:	4602      	mov	r2, r0
 800d226:	61e0      	str	r0, [r4, #28]
 800d228:	b920      	cbnz	r0, 800d234 <_Balloc+0x20>
 800d22a:	4b18      	ldr	r3, [pc, #96]	; (800d28c <_Balloc+0x78>)
 800d22c:	4818      	ldr	r0, [pc, #96]	; (800d290 <_Balloc+0x7c>)
 800d22e:	216b      	movs	r1, #107	; 0x6b
 800d230:	f000 fd9c 	bl	800dd6c <__assert_func>
 800d234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d238:	6006      	str	r6, [r0, #0]
 800d23a:	60c6      	str	r6, [r0, #12]
 800d23c:	69e6      	ldr	r6, [r4, #28]
 800d23e:	68f3      	ldr	r3, [r6, #12]
 800d240:	b183      	cbz	r3, 800d264 <_Balloc+0x50>
 800d242:	69e3      	ldr	r3, [r4, #28]
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d24a:	b9b8      	cbnz	r0, 800d27c <_Balloc+0x68>
 800d24c:	2101      	movs	r1, #1
 800d24e:	fa01 f605 	lsl.w	r6, r1, r5
 800d252:	1d72      	adds	r2, r6, #5
 800d254:	0092      	lsls	r2, r2, #2
 800d256:	4620      	mov	r0, r4
 800d258:	f000 fda6 	bl	800dda8 <_calloc_r>
 800d25c:	b160      	cbz	r0, 800d278 <_Balloc+0x64>
 800d25e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d262:	e00e      	b.n	800d282 <_Balloc+0x6e>
 800d264:	2221      	movs	r2, #33	; 0x21
 800d266:	2104      	movs	r1, #4
 800d268:	4620      	mov	r0, r4
 800d26a:	f000 fd9d 	bl	800dda8 <_calloc_r>
 800d26e:	69e3      	ldr	r3, [r4, #28]
 800d270:	60f0      	str	r0, [r6, #12]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1e4      	bne.n	800d242 <_Balloc+0x2e>
 800d278:	2000      	movs	r0, #0
 800d27a:	bd70      	pop	{r4, r5, r6, pc}
 800d27c:	6802      	ldr	r2, [r0, #0]
 800d27e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d282:	2300      	movs	r3, #0
 800d284:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d288:	e7f7      	b.n	800d27a <_Balloc+0x66>
 800d28a:	bf00      	nop
 800d28c:	0800e5b5 	.word	0x0800e5b5
 800d290:	0800e635 	.word	0x0800e635

0800d294 <_Bfree>:
 800d294:	b570      	push	{r4, r5, r6, lr}
 800d296:	69c6      	ldr	r6, [r0, #28]
 800d298:	4605      	mov	r5, r0
 800d29a:	460c      	mov	r4, r1
 800d29c:	b976      	cbnz	r6, 800d2bc <_Bfree+0x28>
 800d29e:	2010      	movs	r0, #16
 800d2a0:	f7ff ff04 	bl	800d0ac <malloc>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	61e8      	str	r0, [r5, #28]
 800d2a8:	b920      	cbnz	r0, 800d2b4 <_Bfree+0x20>
 800d2aa:	4b09      	ldr	r3, [pc, #36]	; (800d2d0 <_Bfree+0x3c>)
 800d2ac:	4809      	ldr	r0, [pc, #36]	; (800d2d4 <_Bfree+0x40>)
 800d2ae:	218f      	movs	r1, #143	; 0x8f
 800d2b0:	f000 fd5c 	bl	800dd6c <__assert_func>
 800d2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2b8:	6006      	str	r6, [r0, #0]
 800d2ba:	60c6      	str	r6, [r0, #12]
 800d2bc:	b13c      	cbz	r4, 800d2ce <_Bfree+0x3a>
 800d2be:	69eb      	ldr	r3, [r5, #28]
 800d2c0:	6862      	ldr	r2, [r4, #4]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d2c8:	6021      	str	r1, [r4, #0]
 800d2ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d2ce:	bd70      	pop	{r4, r5, r6, pc}
 800d2d0:	0800e5b5 	.word	0x0800e5b5
 800d2d4:	0800e635 	.word	0x0800e635

0800d2d8 <__multadd>:
 800d2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2dc:	690d      	ldr	r5, [r1, #16]
 800d2de:	4607      	mov	r7, r0
 800d2e0:	460c      	mov	r4, r1
 800d2e2:	461e      	mov	r6, r3
 800d2e4:	f101 0c14 	add.w	ip, r1, #20
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	f8dc 3000 	ldr.w	r3, [ip]
 800d2ee:	b299      	uxth	r1, r3
 800d2f0:	fb02 6101 	mla	r1, r2, r1, r6
 800d2f4:	0c1e      	lsrs	r6, r3, #16
 800d2f6:	0c0b      	lsrs	r3, r1, #16
 800d2f8:	fb02 3306 	mla	r3, r2, r6, r3
 800d2fc:	b289      	uxth	r1, r1
 800d2fe:	3001      	adds	r0, #1
 800d300:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d304:	4285      	cmp	r5, r0
 800d306:	f84c 1b04 	str.w	r1, [ip], #4
 800d30a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d30e:	dcec      	bgt.n	800d2ea <__multadd+0x12>
 800d310:	b30e      	cbz	r6, 800d356 <__multadd+0x7e>
 800d312:	68a3      	ldr	r3, [r4, #8]
 800d314:	42ab      	cmp	r3, r5
 800d316:	dc19      	bgt.n	800d34c <__multadd+0x74>
 800d318:	6861      	ldr	r1, [r4, #4]
 800d31a:	4638      	mov	r0, r7
 800d31c:	3101      	adds	r1, #1
 800d31e:	f7ff ff79 	bl	800d214 <_Balloc>
 800d322:	4680      	mov	r8, r0
 800d324:	b928      	cbnz	r0, 800d332 <__multadd+0x5a>
 800d326:	4602      	mov	r2, r0
 800d328:	4b0c      	ldr	r3, [pc, #48]	; (800d35c <__multadd+0x84>)
 800d32a:	480d      	ldr	r0, [pc, #52]	; (800d360 <__multadd+0x88>)
 800d32c:	21ba      	movs	r1, #186	; 0xba
 800d32e:	f000 fd1d 	bl	800dd6c <__assert_func>
 800d332:	6922      	ldr	r2, [r4, #16]
 800d334:	3202      	adds	r2, #2
 800d336:	f104 010c 	add.w	r1, r4, #12
 800d33a:	0092      	lsls	r2, r2, #2
 800d33c:	300c      	adds	r0, #12
 800d33e:	f7fe ffe1 	bl	800c304 <memcpy>
 800d342:	4621      	mov	r1, r4
 800d344:	4638      	mov	r0, r7
 800d346:	f7ff ffa5 	bl	800d294 <_Bfree>
 800d34a:	4644      	mov	r4, r8
 800d34c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d350:	3501      	adds	r5, #1
 800d352:	615e      	str	r6, [r3, #20]
 800d354:	6125      	str	r5, [r4, #16]
 800d356:	4620      	mov	r0, r4
 800d358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d35c:	0800e624 	.word	0x0800e624
 800d360:	0800e635 	.word	0x0800e635

0800d364 <__hi0bits>:
 800d364:	0c03      	lsrs	r3, r0, #16
 800d366:	041b      	lsls	r3, r3, #16
 800d368:	b9d3      	cbnz	r3, 800d3a0 <__hi0bits+0x3c>
 800d36a:	0400      	lsls	r0, r0, #16
 800d36c:	2310      	movs	r3, #16
 800d36e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d372:	bf04      	itt	eq
 800d374:	0200      	lsleq	r0, r0, #8
 800d376:	3308      	addeq	r3, #8
 800d378:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d37c:	bf04      	itt	eq
 800d37e:	0100      	lsleq	r0, r0, #4
 800d380:	3304      	addeq	r3, #4
 800d382:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d386:	bf04      	itt	eq
 800d388:	0080      	lsleq	r0, r0, #2
 800d38a:	3302      	addeq	r3, #2
 800d38c:	2800      	cmp	r0, #0
 800d38e:	db05      	blt.n	800d39c <__hi0bits+0x38>
 800d390:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d394:	f103 0301 	add.w	r3, r3, #1
 800d398:	bf08      	it	eq
 800d39a:	2320      	moveq	r3, #32
 800d39c:	4618      	mov	r0, r3
 800d39e:	4770      	bx	lr
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	e7e4      	b.n	800d36e <__hi0bits+0xa>

0800d3a4 <__lo0bits>:
 800d3a4:	6803      	ldr	r3, [r0, #0]
 800d3a6:	f013 0207 	ands.w	r2, r3, #7
 800d3aa:	d00c      	beq.n	800d3c6 <__lo0bits+0x22>
 800d3ac:	07d9      	lsls	r1, r3, #31
 800d3ae:	d422      	bmi.n	800d3f6 <__lo0bits+0x52>
 800d3b0:	079a      	lsls	r2, r3, #30
 800d3b2:	bf49      	itett	mi
 800d3b4:	085b      	lsrmi	r3, r3, #1
 800d3b6:	089b      	lsrpl	r3, r3, #2
 800d3b8:	6003      	strmi	r3, [r0, #0]
 800d3ba:	2201      	movmi	r2, #1
 800d3bc:	bf5c      	itt	pl
 800d3be:	6003      	strpl	r3, [r0, #0]
 800d3c0:	2202      	movpl	r2, #2
 800d3c2:	4610      	mov	r0, r2
 800d3c4:	4770      	bx	lr
 800d3c6:	b299      	uxth	r1, r3
 800d3c8:	b909      	cbnz	r1, 800d3ce <__lo0bits+0x2a>
 800d3ca:	0c1b      	lsrs	r3, r3, #16
 800d3cc:	2210      	movs	r2, #16
 800d3ce:	b2d9      	uxtb	r1, r3
 800d3d0:	b909      	cbnz	r1, 800d3d6 <__lo0bits+0x32>
 800d3d2:	3208      	adds	r2, #8
 800d3d4:	0a1b      	lsrs	r3, r3, #8
 800d3d6:	0719      	lsls	r1, r3, #28
 800d3d8:	bf04      	itt	eq
 800d3da:	091b      	lsreq	r3, r3, #4
 800d3dc:	3204      	addeq	r2, #4
 800d3de:	0799      	lsls	r1, r3, #30
 800d3e0:	bf04      	itt	eq
 800d3e2:	089b      	lsreq	r3, r3, #2
 800d3e4:	3202      	addeq	r2, #2
 800d3e6:	07d9      	lsls	r1, r3, #31
 800d3e8:	d403      	bmi.n	800d3f2 <__lo0bits+0x4e>
 800d3ea:	085b      	lsrs	r3, r3, #1
 800d3ec:	f102 0201 	add.w	r2, r2, #1
 800d3f0:	d003      	beq.n	800d3fa <__lo0bits+0x56>
 800d3f2:	6003      	str	r3, [r0, #0]
 800d3f4:	e7e5      	b.n	800d3c2 <__lo0bits+0x1e>
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	e7e3      	b.n	800d3c2 <__lo0bits+0x1e>
 800d3fa:	2220      	movs	r2, #32
 800d3fc:	e7e1      	b.n	800d3c2 <__lo0bits+0x1e>
	...

0800d400 <__i2b>:
 800d400:	b510      	push	{r4, lr}
 800d402:	460c      	mov	r4, r1
 800d404:	2101      	movs	r1, #1
 800d406:	f7ff ff05 	bl	800d214 <_Balloc>
 800d40a:	4602      	mov	r2, r0
 800d40c:	b928      	cbnz	r0, 800d41a <__i2b+0x1a>
 800d40e:	4b05      	ldr	r3, [pc, #20]	; (800d424 <__i2b+0x24>)
 800d410:	4805      	ldr	r0, [pc, #20]	; (800d428 <__i2b+0x28>)
 800d412:	f240 1145 	movw	r1, #325	; 0x145
 800d416:	f000 fca9 	bl	800dd6c <__assert_func>
 800d41a:	2301      	movs	r3, #1
 800d41c:	6144      	str	r4, [r0, #20]
 800d41e:	6103      	str	r3, [r0, #16]
 800d420:	bd10      	pop	{r4, pc}
 800d422:	bf00      	nop
 800d424:	0800e624 	.word	0x0800e624
 800d428:	0800e635 	.word	0x0800e635

0800d42c <__multiply>:
 800d42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d430:	4691      	mov	r9, r2
 800d432:	690a      	ldr	r2, [r1, #16]
 800d434:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d438:	429a      	cmp	r2, r3
 800d43a:	bfb8      	it	lt
 800d43c:	460b      	movlt	r3, r1
 800d43e:	460c      	mov	r4, r1
 800d440:	bfbc      	itt	lt
 800d442:	464c      	movlt	r4, r9
 800d444:	4699      	movlt	r9, r3
 800d446:	6927      	ldr	r7, [r4, #16]
 800d448:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d44c:	68a3      	ldr	r3, [r4, #8]
 800d44e:	6861      	ldr	r1, [r4, #4]
 800d450:	eb07 060a 	add.w	r6, r7, sl
 800d454:	42b3      	cmp	r3, r6
 800d456:	b085      	sub	sp, #20
 800d458:	bfb8      	it	lt
 800d45a:	3101      	addlt	r1, #1
 800d45c:	f7ff feda 	bl	800d214 <_Balloc>
 800d460:	b930      	cbnz	r0, 800d470 <__multiply+0x44>
 800d462:	4602      	mov	r2, r0
 800d464:	4b44      	ldr	r3, [pc, #272]	; (800d578 <__multiply+0x14c>)
 800d466:	4845      	ldr	r0, [pc, #276]	; (800d57c <__multiply+0x150>)
 800d468:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d46c:	f000 fc7e 	bl	800dd6c <__assert_func>
 800d470:	f100 0514 	add.w	r5, r0, #20
 800d474:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d478:	462b      	mov	r3, r5
 800d47a:	2200      	movs	r2, #0
 800d47c:	4543      	cmp	r3, r8
 800d47e:	d321      	bcc.n	800d4c4 <__multiply+0x98>
 800d480:	f104 0314 	add.w	r3, r4, #20
 800d484:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d488:	f109 0314 	add.w	r3, r9, #20
 800d48c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d490:	9202      	str	r2, [sp, #8]
 800d492:	1b3a      	subs	r2, r7, r4
 800d494:	3a15      	subs	r2, #21
 800d496:	f022 0203 	bic.w	r2, r2, #3
 800d49a:	3204      	adds	r2, #4
 800d49c:	f104 0115 	add.w	r1, r4, #21
 800d4a0:	428f      	cmp	r7, r1
 800d4a2:	bf38      	it	cc
 800d4a4:	2204      	movcc	r2, #4
 800d4a6:	9201      	str	r2, [sp, #4]
 800d4a8:	9a02      	ldr	r2, [sp, #8]
 800d4aa:	9303      	str	r3, [sp, #12]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d80c      	bhi.n	800d4ca <__multiply+0x9e>
 800d4b0:	2e00      	cmp	r6, #0
 800d4b2:	dd03      	ble.n	800d4bc <__multiply+0x90>
 800d4b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d05b      	beq.n	800d574 <__multiply+0x148>
 800d4bc:	6106      	str	r6, [r0, #16]
 800d4be:	b005      	add	sp, #20
 800d4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c4:	f843 2b04 	str.w	r2, [r3], #4
 800d4c8:	e7d8      	b.n	800d47c <__multiply+0x50>
 800d4ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800d4ce:	f1ba 0f00 	cmp.w	sl, #0
 800d4d2:	d024      	beq.n	800d51e <__multiply+0xf2>
 800d4d4:	f104 0e14 	add.w	lr, r4, #20
 800d4d8:	46a9      	mov	r9, r5
 800d4da:	f04f 0c00 	mov.w	ip, #0
 800d4de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d4e2:	f8d9 1000 	ldr.w	r1, [r9]
 800d4e6:	fa1f fb82 	uxth.w	fp, r2
 800d4ea:	b289      	uxth	r1, r1
 800d4ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800d4f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d4f4:	f8d9 2000 	ldr.w	r2, [r9]
 800d4f8:	4461      	add	r1, ip
 800d4fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d4fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800d502:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d506:	b289      	uxth	r1, r1
 800d508:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d50c:	4577      	cmp	r7, lr
 800d50e:	f849 1b04 	str.w	r1, [r9], #4
 800d512:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d516:	d8e2      	bhi.n	800d4de <__multiply+0xb2>
 800d518:	9a01      	ldr	r2, [sp, #4]
 800d51a:	f845 c002 	str.w	ip, [r5, r2]
 800d51e:	9a03      	ldr	r2, [sp, #12]
 800d520:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d524:	3304      	adds	r3, #4
 800d526:	f1b9 0f00 	cmp.w	r9, #0
 800d52a:	d021      	beq.n	800d570 <__multiply+0x144>
 800d52c:	6829      	ldr	r1, [r5, #0]
 800d52e:	f104 0c14 	add.w	ip, r4, #20
 800d532:	46ae      	mov	lr, r5
 800d534:	f04f 0a00 	mov.w	sl, #0
 800d538:	f8bc b000 	ldrh.w	fp, [ip]
 800d53c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d540:	fb09 220b 	mla	r2, r9, fp, r2
 800d544:	4452      	add	r2, sl
 800d546:	b289      	uxth	r1, r1
 800d548:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d54c:	f84e 1b04 	str.w	r1, [lr], #4
 800d550:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d554:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d558:	f8be 1000 	ldrh.w	r1, [lr]
 800d55c:	fb09 110a 	mla	r1, r9, sl, r1
 800d560:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d564:	4567      	cmp	r7, ip
 800d566:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d56a:	d8e5      	bhi.n	800d538 <__multiply+0x10c>
 800d56c:	9a01      	ldr	r2, [sp, #4]
 800d56e:	50a9      	str	r1, [r5, r2]
 800d570:	3504      	adds	r5, #4
 800d572:	e799      	b.n	800d4a8 <__multiply+0x7c>
 800d574:	3e01      	subs	r6, #1
 800d576:	e79b      	b.n	800d4b0 <__multiply+0x84>
 800d578:	0800e624 	.word	0x0800e624
 800d57c:	0800e635 	.word	0x0800e635

0800d580 <__pow5mult>:
 800d580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d584:	4615      	mov	r5, r2
 800d586:	f012 0203 	ands.w	r2, r2, #3
 800d58a:	4606      	mov	r6, r0
 800d58c:	460f      	mov	r7, r1
 800d58e:	d007      	beq.n	800d5a0 <__pow5mult+0x20>
 800d590:	4c25      	ldr	r4, [pc, #148]	; (800d628 <__pow5mult+0xa8>)
 800d592:	3a01      	subs	r2, #1
 800d594:	2300      	movs	r3, #0
 800d596:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d59a:	f7ff fe9d 	bl	800d2d8 <__multadd>
 800d59e:	4607      	mov	r7, r0
 800d5a0:	10ad      	asrs	r5, r5, #2
 800d5a2:	d03d      	beq.n	800d620 <__pow5mult+0xa0>
 800d5a4:	69f4      	ldr	r4, [r6, #28]
 800d5a6:	b97c      	cbnz	r4, 800d5c8 <__pow5mult+0x48>
 800d5a8:	2010      	movs	r0, #16
 800d5aa:	f7ff fd7f 	bl	800d0ac <malloc>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	61f0      	str	r0, [r6, #28]
 800d5b2:	b928      	cbnz	r0, 800d5c0 <__pow5mult+0x40>
 800d5b4:	4b1d      	ldr	r3, [pc, #116]	; (800d62c <__pow5mult+0xac>)
 800d5b6:	481e      	ldr	r0, [pc, #120]	; (800d630 <__pow5mult+0xb0>)
 800d5b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d5bc:	f000 fbd6 	bl	800dd6c <__assert_func>
 800d5c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5c4:	6004      	str	r4, [r0, #0]
 800d5c6:	60c4      	str	r4, [r0, #12]
 800d5c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d5cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d5d0:	b94c      	cbnz	r4, 800d5e6 <__pow5mult+0x66>
 800d5d2:	f240 2171 	movw	r1, #625	; 0x271
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	f7ff ff12 	bl	800d400 <__i2b>
 800d5dc:	2300      	movs	r3, #0
 800d5de:	f8c8 0008 	str.w	r0, [r8, #8]
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	6003      	str	r3, [r0, #0]
 800d5e6:	f04f 0900 	mov.w	r9, #0
 800d5ea:	07eb      	lsls	r3, r5, #31
 800d5ec:	d50a      	bpl.n	800d604 <__pow5mult+0x84>
 800d5ee:	4639      	mov	r1, r7
 800d5f0:	4622      	mov	r2, r4
 800d5f2:	4630      	mov	r0, r6
 800d5f4:	f7ff ff1a 	bl	800d42c <__multiply>
 800d5f8:	4639      	mov	r1, r7
 800d5fa:	4680      	mov	r8, r0
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	f7ff fe49 	bl	800d294 <_Bfree>
 800d602:	4647      	mov	r7, r8
 800d604:	106d      	asrs	r5, r5, #1
 800d606:	d00b      	beq.n	800d620 <__pow5mult+0xa0>
 800d608:	6820      	ldr	r0, [r4, #0]
 800d60a:	b938      	cbnz	r0, 800d61c <__pow5mult+0x9c>
 800d60c:	4622      	mov	r2, r4
 800d60e:	4621      	mov	r1, r4
 800d610:	4630      	mov	r0, r6
 800d612:	f7ff ff0b 	bl	800d42c <__multiply>
 800d616:	6020      	str	r0, [r4, #0]
 800d618:	f8c0 9000 	str.w	r9, [r0]
 800d61c:	4604      	mov	r4, r0
 800d61e:	e7e4      	b.n	800d5ea <__pow5mult+0x6a>
 800d620:	4638      	mov	r0, r7
 800d622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d626:	bf00      	nop
 800d628:	0800e780 	.word	0x0800e780
 800d62c:	0800e5b5 	.word	0x0800e5b5
 800d630:	0800e635 	.word	0x0800e635

0800d634 <__lshift>:
 800d634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d638:	460c      	mov	r4, r1
 800d63a:	6849      	ldr	r1, [r1, #4]
 800d63c:	6923      	ldr	r3, [r4, #16]
 800d63e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d642:	68a3      	ldr	r3, [r4, #8]
 800d644:	4607      	mov	r7, r0
 800d646:	4691      	mov	r9, r2
 800d648:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d64c:	f108 0601 	add.w	r6, r8, #1
 800d650:	42b3      	cmp	r3, r6
 800d652:	db0b      	blt.n	800d66c <__lshift+0x38>
 800d654:	4638      	mov	r0, r7
 800d656:	f7ff fddd 	bl	800d214 <_Balloc>
 800d65a:	4605      	mov	r5, r0
 800d65c:	b948      	cbnz	r0, 800d672 <__lshift+0x3e>
 800d65e:	4602      	mov	r2, r0
 800d660:	4b28      	ldr	r3, [pc, #160]	; (800d704 <__lshift+0xd0>)
 800d662:	4829      	ldr	r0, [pc, #164]	; (800d708 <__lshift+0xd4>)
 800d664:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d668:	f000 fb80 	bl	800dd6c <__assert_func>
 800d66c:	3101      	adds	r1, #1
 800d66e:	005b      	lsls	r3, r3, #1
 800d670:	e7ee      	b.n	800d650 <__lshift+0x1c>
 800d672:	2300      	movs	r3, #0
 800d674:	f100 0114 	add.w	r1, r0, #20
 800d678:	f100 0210 	add.w	r2, r0, #16
 800d67c:	4618      	mov	r0, r3
 800d67e:	4553      	cmp	r3, sl
 800d680:	db33      	blt.n	800d6ea <__lshift+0xb6>
 800d682:	6920      	ldr	r0, [r4, #16]
 800d684:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d688:	f104 0314 	add.w	r3, r4, #20
 800d68c:	f019 091f 	ands.w	r9, r9, #31
 800d690:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d694:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d698:	d02b      	beq.n	800d6f2 <__lshift+0xbe>
 800d69a:	f1c9 0e20 	rsb	lr, r9, #32
 800d69e:	468a      	mov	sl, r1
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	6818      	ldr	r0, [r3, #0]
 800d6a4:	fa00 f009 	lsl.w	r0, r0, r9
 800d6a8:	4310      	orrs	r0, r2
 800d6aa:	f84a 0b04 	str.w	r0, [sl], #4
 800d6ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6b2:	459c      	cmp	ip, r3
 800d6b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d6b8:	d8f3      	bhi.n	800d6a2 <__lshift+0x6e>
 800d6ba:	ebac 0304 	sub.w	r3, ip, r4
 800d6be:	3b15      	subs	r3, #21
 800d6c0:	f023 0303 	bic.w	r3, r3, #3
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	f104 0015 	add.w	r0, r4, #21
 800d6ca:	4584      	cmp	ip, r0
 800d6cc:	bf38      	it	cc
 800d6ce:	2304      	movcc	r3, #4
 800d6d0:	50ca      	str	r2, [r1, r3]
 800d6d2:	b10a      	cbz	r2, 800d6d8 <__lshift+0xa4>
 800d6d4:	f108 0602 	add.w	r6, r8, #2
 800d6d8:	3e01      	subs	r6, #1
 800d6da:	4638      	mov	r0, r7
 800d6dc:	612e      	str	r6, [r5, #16]
 800d6de:	4621      	mov	r1, r4
 800d6e0:	f7ff fdd8 	bl	800d294 <_Bfree>
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	e7c5      	b.n	800d67e <__lshift+0x4a>
 800d6f2:	3904      	subs	r1, #4
 800d6f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d6fc:	459c      	cmp	ip, r3
 800d6fe:	d8f9      	bhi.n	800d6f4 <__lshift+0xc0>
 800d700:	e7ea      	b.n	800d6d8 <__lshift+0xa4>
 800d702:	bf00      	nop
 800d704:	0800e624 	.word	0x0800e624
 800d708:	0800e635 	.word	0x0800e635

0800d70c <__mcmp>:
 800d70c:	b530      	push	{r4, r5, lr}
 800d70e:	6902      	ldr	r2, [r0, #16]
 800d710:	690c      	ldr	r4, [r1, #16]
 800d712:	1b12      	subs	r2, r2, r4
 800d714:	d10e      	bne.n	800d734 <__mcmp+0x28>
 800d716:	f100 0314 	add.w	r3, r0, #20
 800d71a:	3114      	adds	r1, #20
 800d71c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d720:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d724:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d728:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d72c:	42a5      	cmp	r5, r4
 800d72e:	d003      	beq.n	800d738 <__mcmp+0x2c>
 800d730:	d305      	bcc.n	800d73e <__mcmp+0x32>
 800d732:	2201      	movs	r2, #1
 800d734:	4610      	mov	r0, r2
 800d736:	bd30      	pop	{r4, r5, pc}
 800d738:	4283      	cmp	r3, r0
 800d73a:	d3f3      	bcc.n	800d724 <__mcmp+0x18>
 800d73c:	e7fa      	b.n	800d734 <__mcmp+0x28>
 800d73e:	f04f 32ff 	mov.w	r2, #4294967295
 800d742:	e7f7      	b.n	800d734 <__mcmp+0x28>

0800d744 <__mdiff>:
 800d744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d748:	460c      	mov	r4, r1
 800d74a:	4606      	mov	r6, r0
 800d74c:	4611      	mov	r1, r2
 800d74e:	4620      	mov	r0, r4
 800d750:	4690      	mov	r8, r2
 800d752:	f7ff ffdb 	bl	800d70c <__mcmp>
 800d756:	1e05      	subs	r5, r0, #0
 800d758:	d110      	bne.n	800d77c <__mdiff+0x38>
 800d75a:	4629      	mov	r1, r5
 800d75c:	4630      	mov	r0, r6
 800d75e:	f7ff fd59 	bl	800d214 <_Balloc>
 800d762:	b930      	cbnz	r0, 800d772 <__mdiff+0x2e>
 800d764:	4b3a      	ldr	r3, [pc, #232]	; (800d850 <__mdiff+0x10c>)
 800d766:	4602      	mov	r2, r0
 800d768:	f240 2137 	movw	r1, #567	; 0x237
 800d76c:	4839      	ldr	r0, [pc, #228]	; (800d854 <__mdiff+0x110>)
 800d76e:	f000 fafd 	bl	800dd6c <__assert_func>
 800d772:	2301      	movs	r3, #1
 800d774:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d77c:	bfa4      	itt	ge
 800d77e:	4643      	movge	r3, r8
 800d780:	46a0      	movge	r8, r4
 800d782:	4630      	mov	r0, r6
 800d784:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d788:	bfa6      	itte	ge
 800d78a:	461c      	movge	r4, r3
 800d78c:	2500      	movge	r5, #0
 800d78e:	2501      	movlt	r5, #1
 800d790:	f7ff fd40 	bl	800d214 <_Balloc>
 800d794:	b920      	cbnz	r0, 800d7a0 <__mdiff+0x5c>
 800d796:	4b2e      	ldr	r3, [pc, #184]	; (800d850 <__mdiff+0x10c>)
 800d798:	4602      	mov	r2, r0
 800d79a:	f240 2145 	movw	r1, #581	; 0x245
 800d79e:	e7e5      	b.n	800d76c <__mdiff+0x28>
 800d7a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d7a4:	6926      	ldr	r6, [r4, #16]
 800d7a6:	60c5      	str	r5, [r0, #12]
 800d7a8:	f104 0914 	add.w	r9, r4, #20
 800d7ac:	f108 0514 	add.w	r5, r8, #20
 800d7b0:	f100 0e14 	add.w	lr, r0, #20
 800d7b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d7b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d7bc:	f108 0210 	add.w	r2, r8, #16
 800d7c0:	46f2      	mov	sl, lr
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d7c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d7cc:	fa11 f88b 	uxtah	r8, r1, fp
 800d7d0:	b299      	uxth	r1, r3
 800d7d2:	0c1b      	lsrs	r3, r3, #16
 800d7d4:	eba8 0801 	sub.w	r8, r8, r1
 800d7d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d7dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d7e0:	fa1f f888 	uxth.w	r8, r8
 800d7e4:	1419      	asrs	r1, r3, #16
 800d7e6:	454e      	cmp	r6, r9
 800d7e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d7ec:	f84a 3b04 	str.w	r3, [sl], #4
 800d7f0:	d8e8      	bhi.n	800d7c4 <__mdiff+0x80>
 800d7f2:	1b33      	subs	r3, r6, r4
 800d7f4:	3b15      	subs	r3, #21
 800d7f6:	f023 0303 	bic.w	r3, r3, #3
 800d7fa:	3304      	adds	r3, #4
 800d7fc:	3415      	adds	r4, #21
 800d7fe:	42a6      	cmp	r6, r4
 800d800:	bf38      	it	cc
 800d802:	2304      	movcc	r3, #4
 800d804:	441d      	add	r5, r3
 800d806:	4473      	add	r3, lr
 800d808:	469e      	mov	lr, r3
 800d80a:	462e      	mov	r6, r5
 800d80c:	4566      	cmp	r6, ip
 800d80e:	d30e      	bcc.n	800d82e <__mdiff+0xea>
 800d810:	f10c 0203 	add.w	r2, ip, #3
 800d814:	1b52      	subs	r2, r2, r5
 800d816:	f022 0203 	bic.w	r2, r2, #3
 800d81a:	3d03      	subs	r5, #3
 800d81c:	45ac      	cmp	ip, r5
 800d81e:	bf38      	it	cc
 800d820:	2200      	movcc	r2, #0
 800d822:	4413      	add	r3, r2
 800d824:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d828:	b17a      	cbz	r2, 800d84a <__mdiff+0x106>
 800d82a:	6107      	str	r7, [r0, #16]
 800d82c:	e7a4      	b.n	800d778 <__mdiff+0x34>
 800d82e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d832:	fa11 f288 	uxtah	r2, r1, r8
 800d836:	1414      	asrs	r4, r2, #16
 800d838:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d83c:	b292      	uxth	r2, r2
 800d83e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d842:	f84e 2b04 	str.w	r2, [lr], #4
 800d846:	1421      	asrs	r1, r4, #16
 800d848:	e7e0      	b.n	800d80c <__mdiff+0xc8>
 800d84a:	3f01      	subs	r7, #1
 800d84c:	e7ea      	b.n	800d824 <__mdiff+0xe0>
 800d84e:	bf00      	nop
 800d850:	0800e624 	.word	0x0800e624
 800d854:	0800e635 	.word	0x0800e635

0800d858 <__d2b>:
 800d858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d85c:	460f      	mov	r7, r1
 800d85e:	2101      	movs	r1, #1
 800d860:	ec59 8b10 	vmov	r8, r9, d0
 800d864:	4616      	mov	r6, r2
 800d866:	f7ff fcd5 	bl	800d214 <_Balloc>
 800d86a:	4604      	mov	r4, r0
 800d86c:	b930      	cbnz	r0, 800d87c <__d2b+0x24>
 800d86e:	4602      	mov	r2, r0
 800d870:	4b24      	ldr	r3, [pc, #144]	; (800d904 <__d2b+0xac>)
 800d872:	4825      	ldr	r0, [pc, #148]	; (800d908 <__d2b+0xb0>)
 800d874:	f240 310f 	movw	r1, #783	; 0x30f
 800d878:	f000 fa78 	bl	800dd6c <__assert_func>
 800d87c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d884:	bb2d      	cbnz	r5, 800d8d2 <__d2b+0x7a>
 800d886:	9301      	str	r3, [sp, #4]
 800d888:	f1b8 0300 	subs.w	r3, r8, #0
 800d88c:	d026      	beq.n	800d8dc <__d2b+0x84>
 800d88e:	4668      	mov	r0, sp
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	f7ff fd87 	bl	800d3a4 <__lo0bits>
 800d896:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d89a:	b1e8      	cbz	r0, 800d8d8 <__d2b+0x80>
 800d89c:	f1c0 0320 	rsb	r3, r0, #32
 800d8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d8a4:	430b      	orrs	r3, r1
 800d8a6:	40c2      	lsrs	r2, r0
 800d8a8:	6163      	str	r3, [r4, #20]
 800d8aa:	9201      	str	r2, [sp, #4]
 800d8ac:	9b01      	ldr	r3, [sp, #4]
 800d8ae:	61a3      	str	r3, [r4, #24]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	bf14      	ite	ne
 800d8b4:	2202      	movne	r2, #2
 800d8b6:	2201      	moveq	r2, #1
 800d8b8:	6122      	str	r2, [r4, #16]
 800d8ba:	b1bd      	cbz	r5, 800d8ec <__d2b+0x94>
 800d8bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d8c0:	4405      	add	r5, r0
 800d8c2:	603d      	str	r5, [r7, #0]
 800d8c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d8c8:	6030      	str	r0, [r6, #0]
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	b003      	add	sp, #12
 800d8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8d6:	e7d6      	b.n	800d886 <__d2b+0x2e>
 800d8d8:	6161      	str	r1, [r4, #20]
 800d8da:	e7e7      	b.n	800d8ac <__d2b+0x54>
 800d8dc:	a801      	add	r0, sp, #4
 800d8de:	f7ff fd61 	bl	800d3a4 <__lo0bits>
 800d8e2:	9b01      	ldr	r3, [sp, #4]
 800d8e4:	6163      	str	r3, [r4, #20]
 800d8e6:	3020      	adds	r0, #32
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	e7e5      	b.n	800d8b8 <__d2b+0x60>
 800d8ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d8f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d8f4:	6038      	str	r0, [r7, #0]
 800d8f6:	6918      	ldr	r0, [r3, #16]
 800d8f8:	f7ff fd34 	bl	800d364 <__hi0bits>
 800d8fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d900:	e7e2      	b.n	800d8c8 <__d2b+0x70>
 800d902:	bf00      	nop
 800d904:	0800e624 	.word	0x0800e624
 800d908:	0800e635 	.word	0x0800e635

0800d90c <__ssputs_r>:
 800d90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d910:	688e      	ldr	r6, [r1, #8]
 800d912:	461f      	mov	r7, r3
 800d914:	42be      	cmp	r6, r7
 800d916:	680b      	ldr	r3, [r1, #0]
 800d918:	4682      	mov	sl, r0
 800d91a:	460c      	mov	r4, r1
 800d91c:	4690      	mov	r8, r2
 800d91e:	d82c      	bhi.n	800d97a <__ssputs_r+0x6e>
 800d920:	898a      	ldrh	r2, [r1, #12]
 800d922:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d926:	d026      	beq.n	800d976 <__ssputs_r+0x6a>
 800d928:	6965      	ldr	r5, [r4, #20]
 800d92a:	6909      	ldr	r1, [r1, #16]
 800d92c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d930:	eba3 0901 	sub.w	r9, r3, r1
 800d934:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d938:	1c7b      	adds	r3, r7, #1
 800d93a:	444b      	add	r3, r9
 800d93c:	106d      	asrs	r5, r5, #1
 800d93e:	429d      	cmp	r5, r3
 800d940:	bf38      	it	cc
 800d942:	461d      	movcc	r5, r3
 800d944:	0553      	lsls	r3, r2, #21
 800d946:	d527      	bpl.n	800d998 <__ssputs_r+0x8c>
 800d948:	4629      	mov	r1, r5
 800d94a:	f7ff fbd7 	bl	800d0fc <_malloc_r>
 800d94e:	4606      	mov	r6, r0
 800d950:	b360      	cbz	r0, 800d9ac <__ssputs_r+0xa0>
 800d952:	6921      	ldr	r1, [r4, #16]
 800d954:	464a      	mov	r2, r9
 800d956:	f7fe fcd5 	bl	800c304 <memcpy>
 800d95a:	89a3      	ldrh	r3, [r4, #12]
 800d95c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d964:	81a3      	strh	r3, [r4, #12]
 800d966:	6126      	str	r6, [r4, #16]
 800d968:	6165      	str	r5, [r4, #20]
 800d96a:	444e      	add	r6, r9
 800d96c:	eba5 0509 	sub.w	r5, r5, r9
 800d970:	6026      	str	r6, [r4, #0]
 800d972:	60a5      	str	r5, [r4, #8]
 800d974:	463e      	mov	r6, r7
 800d976:	42be      	cmp	r6, r7
 800d978:	d900      	bls.n	800d97c <__ssputs_r+0x70>
 800d97a:	463e      	mov	r6, r7
 800d97c:	6820      	ldr	r0, [r4, #0]
 800d97e:	4632      	mov	r2, r6
 800d980:	4641      	mov	r1, r8
 800d982:	f000 f9c9 	bl	800dd18 <memmove>
 800d986:	68a3      	ldr	r3, [r4, #8]
 800d988:	1b9b      	subs	r3, r3, r6
 800d98a:	60a3      	str	r3, [r4, #8]
 800d98c:	6823      	ldr	r3, [r4, #0]
 800d98e:	4433      	add	r3, r6
 800d990:	6023      	str	r3, [r4, #0]
 800d992:	2000      	movs	r0, #0
 800d994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d998:	462a      	mov	r2, r5
 800d99a:	f000 fa2d 	bl	800ddf8 <_realloc_r>
 800d99e:	4606      	mov	r6, r0
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	d1e0      	bne.n	800d966 <__ssputs_r+0x5a>
 800d9a4:	6921      	ldr	r1, [r4, #16]
 800d9a6:	4650      	mov	r0, sl
 800d9a8:	f7ff fb34 	bl	800d014 <_free_r>
 800d9ac:	230c      	movs	r3, #12
 800d9ae:	f8ca 3000 	str.w	r3, [sl]
 800d9b2:	89a3      	ldrh	r3, [r4, #12]
 800d9b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9b8:	81a3      	strh	r3, [r4, #12]
 800d9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d9be:	e7e9      	b.n	800d994 <__ssputs_r+0x88>

0800d9c0 <_svfiprintf_r>:
 800d9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c4:	4698      	mov	r8, r3
 800d9c6:	898b      	ldrh	r3, [r1, #12]
 800d9c8:	061b      	lsls	r3, r3, #24
 800d9ca:	b09d      	sub	sp, #116	; 0x74
 800d9cc:	4607      	mov	r7, r0
 800d9ce:	460d      	mov	r5, r1
 800d9d0:	4614      	mov	r4, r2
 800d9d2:	d50e      	bpl.n	800d9f2 <_svfiprintf_r+0x32>
 800d9d4:	690b      	ldr	r3, [r1, #16]
 800d9d6:	b963      	cbnz	r3, 800d9f2 <_svfiprintf_r+0x32>
 800d9d8:	2140      	movs	r1, #64	; 0x40
 800d9da:	f7ff fb8f 	bl	800d0fc <_malloc_r>
 800d9de:	6028      	str	r0, [r5, #0]
 800d9e0:	6128      	str	r0, [r5, #16]
 800d9e2:	b920      	cbnz	r0, 800d9ee <_svfiprintf_r+0x2e>
 800d9e4:	230c      	movs	r3, #12
 800d9e6:	603b      	str	r3, [r7, #0]
 800d9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ec:	e0d0      	b.n	800db90 <_svfiprintf_r+0x1d0>
 800d9ee:	2340      	movs	r3, #64	; 0x40
 800d9f0:	616b      	str	r3, [r5, #20]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d9f6:	2320      	movs	r3, #32
 800d9f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800da00:	2330      	movs	r3, #48	; 0x30
 800da02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dba8 <_svfiprintf_r+0x1e8>
 800da06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da0a:	f04f 0901 	mov.w	r9, #1
 800da0e:	4623      	mov	r3, r4
 800da10:	469a      	mov	sl, r3
 800da12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da16:	b10a      	cbz	r2, 800da1c <_svfiprintf_r+0x5c>
 800da18:	2a25      	cmp	r2, #37	; 0x25
 800da1a:	d1f9      	bne.n	800da10 <_svfiprintf_r+0x50>
 800da1c:	ebba 0b04 	subs.w	fp, sl, r4
 800da20:	d00b      	beq.n	800da3a <_svfiprintf_r+0x7a>
 800da22:	465b      	mov	r3, fp
 800da24:	4622      	mov	r2, r4
 800da26:	4629      	mov	r1, r5
 800da28:	4638      	mov	r0, r7
 800da2a:	f7ff ff6f 	bl	800d90c <__ssputs_r>
 800da2e:	3001      	adds	r0, #1
 800da30:	f000 80a9 	beq.w	800db86 <_svfiprintf_r+0x1c6>
 800da34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da36:	445a      	add	r2, fp
 800da38:	9209      	str	r2, [sp, #36]	; 0x24
 800da3a:	f89a 3000 	ldrb.w	r3, [sl]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	f000 80a1 	beq.w	800db86 <_svfiprintf_r+0x1c6>
 800da44:	2300      	movs	r3, #0
 800da46:	f04f 32ff 	mov.w	r2, #4294967295
 800da4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da4e:	f10a 0a01 	add.w	sl, sl, #1
 800da52:	9304      	str	r3, [sp, #16]
 800da54:	9307      	str	r3, [sp, #28]
 800da56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da5a:	931a      	str	r3, [sp, #104]	; 0x68
 800da5c:	4654      	mov	r4, sl
 800da5e:	2205      	movs	r2, #5
 800da60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da64:	4850      	ldr	r0, [pc, #320]	; (800dba8 <_svfiprintf_r+0x1e8>)
 800da66:	f7f2 fbd3 	bl	8000210 <memchr>
 800da6a:	9a04      	ldr	r2, [sp, #16]
 800da6c:	b9d8      	cbnz	r0, 800daa6 <_svfiprintf_r+0xe6>
 800da6e:	06d0      	lsls	r0, r2, #27
 800da70:	bf44      	itt	mi
 800da72:	2320      	movmi	r3, #32
 800da74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da78:	0711      	lsls	r1, r2, #28
 800da7a:	bf44      	itt	mi
 800da7c:	232b      	movmi	r3, #43	; 0x2b
 800da7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da82:	f89a 3000 	ldrb.w	r3, [sl]
 800da86:	2b2a      	cmp	r3, #42	; 0x2a
 800da88:	d015      	beq.n	800dab6 <_svfiprintf_r+0xf6>
 800da8a:	9a07      	ldr	r2, [sp, #28]
 800da8c:	4654      	mov	r4, sl
 800da8e:	2000      	movs	r0, #0
 800da90:	f04f 0c0a 	mov.w	ip, #10
 800da94:	4621      	mov	r1, r4
 800da96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da9a:	3b30      	subs	r3, #48	; 0x30
 800da9c:	2b09      	cmp	r3, #9
 800da9e:	d94d      	bls.n	800db3c <_svfiprintf_r+0x17c>
 800daa0:	b1b0      	cbz	r0, 800dad0 <_svfiprintf_r+0x110>
 800daa2:	9207      	str	r2, [sp, #28]
 800daa4:	e014      	b.n	800dad0 <_svfiprintf_r+0x110>
 800daa6:	eba0 0308 	sub.w	r3, r0, r8
 800daaa:	fa09 f303 	lsl.w	r3, r9, r3
 800daae:	4313      	orrs	r3, r2
 800dab0:	9304      	str	r3, [sp, #16]
 800dab2:	46a2      	mov	sl, r4
 800dab4:	e7d2      	b.n	800da5c <_svfiprintf_r+0x9c>
 800dab6:	9b03      	ldr	r3, [sp, #12]
 800dab8:	1d19      	adds	r1, r3, #4
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	9103      	str	r1, [sp, #12]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	bfbb      	ittet	lt
 800dac2:	425b      	neglt	r3, r3
 800dac4:	f042 0202 	orrlt.w	r2, r2, #2
 800dac8:	9307      	strge	r3, [sp, #28]
 800daca:	9307      	strlt	r3, [sp, #28]
 800dacc:	bfb8      	it	lt
 800dace:	9204      	strlt	r2, [sp, #16]
 800dad0:	7823      	ldrb	r3, [r4, #0]
 800dad2:	2b2e      	cmp	r3, #46	; 0x2e
 800dad4:	d10c      	bne.n	800daf0 <_svfiprintf_r+0x130>
 800dad6:	7863      	ldrb	r3, [r4, #1]
 800dad8:	2b2a      	cmp	r3, #42	; 0x2a
 800dada:	d134      	bne.n	800db46 <_svfiprintf_r+0x186>
 800dadc:	9b03      	ldr	r3, [sp, #12]
 800dade:	1d1a      	adds	r2, r3, #4
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	9203      	str	r2, [sp, #12]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	bfb8      	it	lt
 800dae8:	f04f 33ff 	movlt.w	r3, #4294967295
 800daec:	3402      	adds	r4, #2
 800daee:	9305      	str	r3, [sp, #20]
 800daf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dbb8 <_svfiprintf_r+0x1f8>
 800daf4:	7821      	ldrb	r1, [r4, #0]
 800daf6:	2203      	movs	r2, #3
 800daf8:	4650      	mov	r0, sl
 800dafa:	f7f2 fb89 	bl	8000210 <memchr>
 800dafe:	b138      	cbz	r0, 800db10 <_svfiprintf_r+0x150>
 800db00:	9b04      	ldr	r3, [sp, #16]
 800db02:	eba0 000a 	sub.w	r0, r0, sl
 800db06:	2240      	movs	r2, #64	; 0x40
 800db08:	4082      	lsls	r2, r0
 800db0a:	4313      	orrs	r3, r2
 800db0c:	3401      	adds	r4, #1
 800db0e:	9304      	str	r3, [sp, #16]
 800db10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db14:	4825      	ldr	r0, [pc, #148]	; (800dbac <_svfiprintf_r+0x1ec>)
 800db16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db1a:	2206      	movs	r2, #6
 800db1c:	f7f2 fb78 	bl	8000210 <memchr>
 800db20:	2800      	cmp	r0, #0
 800db22:	d038      	beq.n	800db96 <_svfiprintf_r+0x1d6>
 800db24:	4b22      	ldr	r3, [pc, #136]	; (800dbb0 <_svfiprintf_r+0x1f0>)
 800db26:	bb1b      	cbnz	r3, 800db70 <_svfiprintf_r+0x1b0>
 800db28:	9b03      	ldr	r3, [sp, #12]
 800db2a:	3307      	adds	r3, #7
 800db2c:	f023 0307 	bic.w	r3, r3, #7
 800db30:	3308      	adds	r3, #8
 800db32:	9303      	str	r3, [sp, #12]
 800db34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db36:	4433      	add	r3, r6
 800db38:	9309      	str	r3, [sp, #36]	; 0x24
 800db3a:	e768      	b.n	800da0e <_svfiprintf_r+0x4e>
 800db3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800db40:	460c      	mov	r4, r1
 800db42:	2001      	movs	r0, #1
 800db44:	e7a6      	b.n	800da94 <_svfiprintf_r+0xd4>
 800db46:	2300      	movs	r3, #0
 800db48:	3401      	adds	r4, #1
 800db4a:	9305      	str	r3, [sp, #20]
 800db4c:	4619      	mov	r1, r3
 800db4e:	f04f 0c0a 	mov.w	ip, #10
 800db52:	4620      	mov	r0, r4
 800db54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db58:	3a30      	subs	r2, #48	; 0x30
 800db5a:	2a09      	cmp	r2, #9
 800db5c:	d903      	bls.n	800db66 <_svfiprintf_r+0x1a6>
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d0c6      	beq.n	800daf0 <_svfiprintf_r+0x130>
 800db62:	9105      	str	r1, [sp, #20]
 800db64:	e7c4      	b.n	800daf0 <_svfiprintf_r+0x130>
 800db66:	fb0c 2101 	mla	r1, ip, r1, r2
 800db6a:	4604      	mov	r4, r0
 800db6c:	2301      	movs	r3, #1
 800db6e:	e7f0      	b.n	800db52 <_svfiprintf_r+0x192>
 800db70:	ab03      	add	r3, sp, #12
 800db72:	9300      	str	r3, [sp, #0]
 800db74:	462a      	mov	r2, r5
 800db76:	4b0f      	ldr	r3, [pc, #60]	; (800dbb4 <_svfiprintf_r+0x1f4>)
 800db78:	a904      	add	r1, sp, #16
 800db7a:	4638      	mov	r0, r7
 800db7c:	f7fd fe14 	bl	800b7a8 <_printf_float>
 800db80:	1c42      	adds	r2, r0, #1
 800db82:	4606      	mov	r6, r0
 800db84:	d1d6      	bne.n	800db34 <_svfiprintf_r+0x174>
 800db86:	89ab      	ldrh	r3, [r5, #12]
 800db88:	065b      	lsls	r3, r3, #25
 800db8a:	f53f af2d 	bmi.w	800d9e8 <_svfiprintf_r+0x28>
 800db8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db90:	b01d      	add	sp, #116	; 0x74
 800db92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db96:	ab03      	add	r3, sp, #12
 800db98:	9300      	str	r3, [sp, #0]
 800db9a:	462a      	mov	r2, r5
 800db9c:	4b05      	ldr	r3, [pc, #20]	; (800dbb4 <_svfiprintf_r+0x1f4>)
 800db9e:	a904      	add	r1, sp, #16
 800dba0:	4638      	mov	r0, r7
 800dba2:	f7fe f8a5 	bl	800bcf0 <_printf_i>
 800dba6:	e7eb      	b.n	800db80 <_svfiprintf_r+0x1c0>
 800dba8:	0800e78c 	.word	0x0800e78c
 800dbac:	0800e796 	.word	0x0800e796
 800dbb0:	0800b7a9 	.word	0x0800b7a9
 800dbb4:	0800d90d 	.word	0x0800d90d
 800dbb8:	0800e792 	.word	0x0800e792

0800dbbc <__sflush_r>:
 800dbbc:	898a      	ldrh	r2, [r1, #12]
 800dbbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbc2:	4605      	mov	r5, r0
 800dbc4:	0710      	lsls	r0, r2, #28
 800dbc6:	460c      	mov	r4, r1
 800dbc8:	d458      	bmi.n	800dc7c <__sflush_r+0xc0>
 800dbca:	684b      	ldr	r3, [r1, #4]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	dc05      	bgt.n	800dbdc <__sflush_r+0x20>
 800dbd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	dc02      	bgt.n	800dbdc <__sflush_r+0x20>
 800dbd6:	2000      	movs	r0, #0
 800dbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbde:	2e00      	cmp	r6, #0
 800dbe0:	d0f9      	beq.n	800dbd6 <__sflush_r+0x1a>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dbe8:	682f      	ldr	r7, [r5, #0]
 800dbea:	6a21      	ldr	r1, [r4, #32]
 800dbec:	602b      	str	r3, [r5, #0]
 800dbee:	d032      	beq.n	800dc56 <__sflush_r+0x9a>
 800dbf0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dbf2:	89a3      	ldrh	r3, [r4, #12]
 800dbf4:	075a      	lsls	r2, r3, #29
 800dbf6:	d505      	bpl.n	800dc04 <__sflush_r+0x48>
 800dbf8:	6863      	ldr	r3, [r4, #4]
 800dbfa:	1ac0      	subs	r0, r0, r3
 800dbfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dbfe:	b10b      	cbz	r3, 800dc04 <__sflush_r+0x48>
 800dc00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc02:	1ac0      	subs	r0, r0, r3
 800dc04:	2300      	movs	r3, #0
 800dc06:	4602      	mov	r2, r0
 800dc08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc0a:	6a21      	ldr	r1, [r4, #32]
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	47b0      	blx	r6
 800dc10:	1c43      	adds	r3, r0, #1
 800dc12:	89a3      	ldrh	r3, [r4, #12]
 800dc14:	d106      	bne.n	800dc24 <__sflush_r+0x68>
 800dc16:	6829      	ldr	r1, [r5, #0]
 800dc18:	291d      	cmp	r1, #29
 800dc1a:	d82b      	bhi.n	800dc74 <__sflush_r+0xb8>
 800dc1c:	4a29      	ldr	r2, [pc, #164]	; (800dcc4 <__sflush_r+0x108>)
 800dc1e:	410a      	asrs	r2, r1
 800dc20:	07d6      	lsls	r6, r2, #31
 800dc22:	d427      	bmi.n	800dc74 <__sflush_r+0xb8>
 800dc24:	2200      	movs	r2, #0
 800dc26:	6062      	str	r2, [r4, #4]
 800dc28:	04d9      	lsls	r1, r3, #19
 800dc2a:	6922      	ldr	r2, [r4, #16]
 800dc2c:	6022      	str	r2, [r4, #0]
 800dc2e:	d504      	bpl.n	800dc3a <__sflush_r+0x7e>
 800dc30:	1c42      	adds	r2, r0, #1
 800dc32:	d101      	bne.n	800dc38 <__sflush_r+0x7c>
 800dc34:	682b      	ldr	r3, [r5, #0]
 800dc36:	b903      	cbnz	r3, 800dc3a <__sflush_r+0x7e>
 800dc38:	6560      	str	r0, [r4, #84]	; 0x54
 800dc3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc3c:	602f      	str	r7, [r5, #0]
 800dc3e:	2900      	cmp	r1, #0
 800dc40:	d0c9      	beq.n	800dbd6 <__sflush_r+0x1a>
 800dc42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc46:	4299      	cmp	r1, r3
 800dc48:	d002      	beq.n	800dc50 <__sflush_r+0x94>
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	f7ff f9e2 	bl	800d014 <_free_r>
 800dc50:	2000      	movs	r0, #0
 800dc52:	6360      	str	r0, [r4, #52]	; 0x34
 800dc54:	e7c0      	b.n	800dbd8 <__sflush_r+0x1c>
 800dc56:	2301      	movs	r3, #1
 800dc58:	4628      	mov	r0, r5
 800dc5a:	47b0      	blx	r6
 800dc5c:	1c41      	adds	r1, r0, #1
 800dc5e:	d1c8      	bne.n	800dbf2 <__sflush_r+0x36>
 800dc60:	682b      	ldr	r3, [r5, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d0c5      	beq.n	800dbf2 <__sflush_r+0x36>
 800dc66:	2b1d      	cmp	r3, #29
 800dc68:	d001      	beq.n	800dc6e <__sflush_r+0xb2>
 800dc6a:	2b16      	cmp	r3, #22
 800dc6c:	d101      	bne.n	800dc72 <__sflush_r+0xb6>
 800dc6e:	602f      	str	r7, [r5, #0]
 800dc70:	e7b1      	b.n	800dbd6 <__sflush_r+0x1a>
 800dc72:	89a3      	ldrh	r3, [r4, #12]
 800dc74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc78:	81a3      	strh	r3, [r4, #12]
 800dc7a:	e7ad      	b.n	800dbd8 <__sflush_r+0x1c>
 800dc7c:	690f      	ldr	r7, [r1, #16]
 800dc7e:	2f00      	cmp	r7, #0
 800dc80:	d0a9      	beq.n	800dbd6 <__sflush_r+0x1a>
 800dc82:	0793      	lsls	r3, r2, #30
 800dc84:	680e      	ldr	r6, [r1, #0]
 800dc86:	bf08      	it	eq
 800dc88:	694b      	ldreq	r3, [r1, #20]
 800dc8a:	600f      	str	r7, [r1, #0]
 800dc8c:	bf18      	it	ne
 800dc8e:	2300      	movne	r3, #0
 800dc90:	eba6 0807 	sub.w	r8, r6, r7
 800dc94:	608b      	str	r3, [r1, #8]
 800dc96:	f1b8 0f00 	cmp.w	r8, #0
 800dc9a:	dd9c      	ble.n	800dbd6 <__sflush_r+0x1a>
 800dc9c:	6a21      	ldr	r1, [r4, #32]
 800dc9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dca0:	4643      	mov	r3, r8
 800dca2:	463a      	mov	r2, r7
 800dca4:	4628      	mov	r0, r5
 800dca6:	47b0      	blx	r6
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	dc06      	bgt.n	800dcba <__sflush_r+0xfe>
 800dcac:	89a3      	ldrh	r3, [r4, #12]
 800dcae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcb2:	81a3      	strh	r3, [r4, #12]
 800dcb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb8:	e78e      	b.n	800dbd8 <__sflush_r+0x1c>
 800dcba:	4407      	add	r7, r0
 800dcbc:	eba8 0800 	sub.w	r8, r8, r0
 800dcc0:	e7e9      	b.n	800dc96 <__sflush_r+0xda>
 800dcc2:	bf00      	nop
 800dcc4:	dfbffffe 	.word	0xdfbffffe

0800dcc8 <_fflush_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	690b      	ldr	r3, [r1, #16]
 800dccc:	4605      	mov	r5, r0
 800dcce:	460c      	mov	r4, r1
 800dcd0:	b913      	cbnz	r3, 800dcd8 <_fflush_r+0x10>
 800dcd2:	2500      	movs	r5, #0
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	bd38      	pop	{r3, r4, r5, pc}
 800dcd8:	b118      	cbz	r0, 800dce2 <_fflush_r+0x1a>
 800dcda:	6a03      	ldr	r3, [r0, #32]
 800dcdc:	b90b      	cbnz	r3, 800dce2 <_fflush_r+0x1a>
 800dcde:	f7fe f9a3 	bl	800c028 <__sinit>
 800dce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d0f3      	beq.n	800dcd2 <_fflush_r+0xa>
 800dcea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dcec:	07d0      	lsls	r0, r2, #31
 800dcee:	d404      	bmi.n	800dcfa <_fflush_r+0x32>
 800dcf0:	0599      	lsls	r1, r3, #22
 800dcf2:	d402      	bmi.n	800dcfa <_fflush_r+0x32>
 800dcf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcf6:	f7fe fb03 	bl	800c300 <__retarget_lock_acquire_recursive>
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	4621      	mov	r1, r4
 800dcfe:	f7ff ff5d 	bl	800dbbc <__sflush_r>
 800dd02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd04:	07da      	lsls	r2, r3, #31
 800dd06:	4605      	mov	r5, r0
 800dd08:	d4e4      	bmi.n	800dcd4 <_fflush_r+0xc>
 800dd0a:	89a3      	ldrh	r3, [r4, #12]
 800dd0c:	059b      	lsls	r3, r3, #22
 800dd0e:	d4e1      	bmi.n	800dcd4 <_fflush_r+0xc>
 800dd10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd12:	f7fe faf6 	bl	800c302 <__retarget_lock_release_recursive>
 800dd16:	e7dd      	b.n	800dcd4 <_fflush_r+0xc>

0800dd18 <memmove>:
 800dd18:	4288      	cmp	r0, r1
 800dd1a:	b510      	push	{r4, lr}
 800dd1c:	eb01 0402 	add.w	r4, r1, r2
 800dd20:	d902      	bls.n	800dd28 <memmove+0x10>
 800dd22:	4284      	cmp	r4, r0
 800dd24:	4623      	mov	r3, r4
 800dd26:	d807      	bhi.n	800dd38 <memmove+0x20>
 800dd28:	1e43      	subs	r3, r0, #1
 800dd2a:	42a1      	cmp	r1, r4
 800dd2c:	d008      	beq.n	800dd40 <memmove+0x28>
 800dd2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd36:	e7f8      	b.n	800dd2a <memmove+0x12>
 800dd38:	4402      	add	r2, r0
 800dd3a:	4601      	mov	r1, r0
 800dd3c:	428a      	cmp	r2, r1
 800dd3e:	d100      	bne.n	800dd42 <memmove+0x2a>
 800dd40:	bd10      	pop	{r4, pc}
 800dd42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd4a:	e7f7      	b.n	800dd3c <memmove+0x24>

0800dd4c <_sbrk_r>:
 800dd4c:	b538      	push	{r3, r4, r5, lr}
 800dd4e:	4d06      	ldr	r5, [pc, #24]	; (800dd68 <_sbrk_r+0x1c>)
 800dd50:	2300      	movs	r3, #0
 800dd52:	4604      	mov	r4, r0
 800dd54:	4608      	mov	r0, r1
 800dd56:	602b      	str	r3, [r5, #0]
 800dd58:	f7f4 fac0 	bl	80022dc <_sbrk>
 800dd5c:	1c43      	adds	r3, r0, #1
 800dd5e:	d102      	bne.n	800dd66 <_sbrk_r+0x1a>
 800dd60:	682b      	ldr	r3, [r5, #0]
 800dd62:	b103      	cbz	r3, 800dd66 <_sbrk_r+0x1a>
 800dd64:	6023      	str	r3, [r4, #0]
 800dd66:	bd38      	pop	{r3, r4, r5, pc}
 800dd68:	200058bc 	.word	0x200058bc

0800dd6c <__assert_func>:
 800dd6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd6e:	4614      	mov	r4, r2
 800dd70:	461a      	mov	r2, r3
 800dd72:	4b09      	ldr	r3, [pc, #36]	; (800dd98 <__assert_func+0x2c>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4605      	mov	r5, r0
 800dd78:	68d8      	ldr	r0, [r3, #12]
 800dd7a:	b14c      	cbz	r4, 800dd90 <__assert_func+0x24>
 800dd7c:	4b07      	ldr	r3, [pc, #28]	; (800dd9c <__assert_func+0x30>)
 800dd7e:	9100      	str	r1, [sp, #0]
 800dd80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd84:	4906      	ldr	r1, [pc, #24]	; (800dda0 <__assert_func+0x34>)
 800dd86:	462b      	mov	r3, r5
 800dd88:	f000 f872 	bl	800de70 <fiprintf>
 800dd8c:	f000 f882 	bl	800de94 <abort>
 800dd90:	4b04      	ldr	r3, [pc, #16]	; (800dda4 <__assert_func+0x38>)
 800dd92:	461c      	mov	r4, r3
 800dd94:	e7f3      	b.n	800dd7e <__assert_func+0x12>
 800dd96:	bf00      	nop
 800dd98:	20000080 	.word	0x20000080
 800dd9c:	0800e7a7 	.word	0x0800e7a7
 800dda0:	0800e7b4 	.word	0x0800e7b4
 800dda4:	0800e7e2 	.word	0x0800e7e2

0800dda8 <_calloc_r>:
 800dda8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddaa:	fba1 2402 	umull	r2, r4, r1, r2
 800ddae:	b94c      	cbnz	r4, 800ddc4 <_calloc_r+0x1c>
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	9201      	str	r2, [sp, #4]
 800ddb4:	f7ff f9a2 	bl	800d0fc <_malloc_r>
 800ddb8:	9a01      	ldr	r2, [sp, #4]
 800ddba:	4605      	mov	r5, r0
 800ddbc:	b930      	cbnz	r0, 800ddcc <_calloc_r+0x24>
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	b003      	add	sp, #12
 800ddc2:	bd30      	pop	{r4, r5, pc}
 800ddc4:	220c      	movs	r2, #12
 800ddc6:	6002      	str	r2, [r0, #0]
 800ddc8:	2500      	movs	r5, #0
 800ddca:	e7f8      	b.n	800ddbe <_calloc_r+0x16>
 800ddcc:	4621      	mov	r1, r4
 800ddce:	f7fe f9c4 	bl	800c15a <memset>
 800ddd2:	e7f4      	b.n	800ddbe <_calloc_r+0x16>

0800ddd4 <__ascii_mbtowc>:
 800ddd4:	b082      	sub	sp, #8
 800ddd6:	b901      	cbnz	r1, 800ddda <__ascii_mbtowc+0x6>
 800ddd8:	a901      	add	r1, sp, #4
 800ddda:	b142      	cbz	r2, 800ddee <__ascii_mbtowc+0x1a>
 800dddc:	b14b      	cbz	r3, 800ddf2 <__ascii_mbtowc+0x1e>
 800ddde:	7813      	ldrb	r3, [r2, #0]
 800dde0:	600b      	str	r3, [r1, #0]
 800dde2:	7812      	ldrb	r2, [r2, #0]
 800dde4:	1e10      	subs	r0, r2, #0
 800dde6:	bf18      	it	ne
 800dde8:	2001      	movne	r0, #1
 800ddea:	b002      	add	sp, #8
 800ddec:	4770      	bx	lr
 800ddee:	4610      	mov	r0, r2
 800ddf0:	e7fb      	b.n	800ddea <__ascii_mbtowc+0x16>
 800ddf2:	f06f 0001 	mvn.w	r0, #1
 800ddf6:	e7f8      	b.n	800ddea <__ascii_mbtowc+0x16>

0800ddf8 <_realloc_r>:
 800ddf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddfc:	4680      	mov	r8, r0
 800ddfe:	4614      	mov	r4, r2
 800de00:	460e      	mov	r6, r1
 800de02:	b921      	cbnz	r1, 800de0e <_realloc_r+0x16>
 800de04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de08:	4611      	mov	r1, r2
 800de0a:	f7ff b977 	b.w	800d0fc <_malloc_r>
 800de0e:	b92a      	cbnz	r2, 800de1c <_realloc_r+0x24>
 800de10:	f7ff f900 	bl	800d014 <_free_r>
 800de14:	4625      	mov	r5, r4
 800de16:	4628      	mov	r0, r5
 800de18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de1c:	f000 f841 	bl	800dea2 <_malloc_usable_size_r>
 800de20:	4284      	cmp	r4, r0
 800de22:	4607      	mov	r7, r0
 800de24:	d802      	bhi.n	800de2c <_realloc_r+0x34>
 800de26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de2a:	d812      	bhi.n	800de52 <_realloc_r+0x5a>
 800de2c:	4621      	mov	r1, r4
 800de2e:	4640      	mov	r0, r8
 800de30:	f7ff f964 	bl	800d0fc <_malloc_r>
 800de34:	4605      	mov	r5, r0
 800de36:	2800      	cmp	r0, #0
 800de38:	d0ed      	beq.n	800de16 <_realloc_r+0x1e>
 800de3a:	42bc      	cmp	r4, r7
 800de3c:	4622      	mov	r2, r4
 800de3e:	4631      	mov	r1, r6
 800de40:	bf28      	it	cs
 800de42:	463a      	movcs	r2, r7
 800de44:	f7fe fa5e 	bl	800c304 <memcpy>
 800de48:	4631      	mov	r1, r6
 800de4a:	4640      	mov	r0, r8
 800de4c:	f7ff f8e2 	bl	800d014 <_free_r>
 800de50:	e7e1      	b.n	800de16 <_realloc_r+0x1e>
 800de52:	4635      	mov	r5, r6
 800de54:	e7df      	b.n	800de16 <_realloc_r+0x1e>

0800de56 <__ascii_wctomb>:
 800de56:	b149      	cbz	r1, 800de6c <__ascii_wctomb+0x16>
 800de58:	2aff      	cmp	r2, #255	; 0xff
 800de5a:	bf85      	ittet	hi
 800de5c:	238a      	movhi	r3, #138	; 0x8a
 800de5e:	6003      	strhi	r3, [r0, #0]
 800de60:	700a      	strbls	r2, [r1, #0]
 800de62:	f04f 30ff 	movhi.w	r0, #4294967295
 800de66:	bf98      	it	ls
 800de68:	2001      	movls	r0, #1
 800de6a:	4770      	bx	lr
 800de6c:	4608      	mov	r0, r1
 800de6e:	4770      	bx	lr

0800de70 <fiprintf>:
 800de70:	b40e      	push	{r1, r2, r3}
 800de72:	b503      	push	{r0, r1, lr}
 800de74:	4601      	mov	r1, r0
 800de76:	ab03      	add	r3, sp, #12
 800de78:	4805      	ldr	r0, [pc, #20]	; (800de90 <fiprintf+0x20>)
 800de7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800de7e:	6800      	ldr	r0, [r0, #0]
 800de80:	9301      	str	r3, [sp, #4]
 800de82:	f000 f83f 	bl	800df04 <_vfiprintf_r>
 800de86:	b002      	add	sp, #8
 800de88:	f85d eb04 	ldr.w	lr, [sp], #4
 800de8c:	b003      	add	sp, #12
 800de8e:	4770      	bx	lr
 800de90:	20000080 	.word	0x20000080

0800de94 <abort>:
 800de94:	b508      	push	{r3, lr}
 800de96:	2006      	movs	r0, #6
 800de98:	f000 fa0c 	bl	800e2b4 <raise>
 800de9c:	2001      	movs	r0, #1
 800de9e:	f7f4 f9c1 	bl	8002224 <_exit>

0800dea2 <_malloc_usable_size_r>:
 800dea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dea6:	1f18      	subs	r0, r3, #4
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	bfbc      	itt	lt
 800deac:	580b      	ldrlt	r3, [r1, r0]
 800deae:	18c0      	addlt	r0, r0, r3
 800deb0:	4770      	bx	lr

0800deb2 <__sfputc_r>:
 800deb2:	6893      	ldr	r3, [r2, #8]
 800deb4:	3b01      	subs	r3, #1
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	b410      	push	{r4}
 800deba:	6093      	str	r3, [r2, #8]
 800debc:	da08      	bge.n	800ded0 <__sfputc_r+0x1e>
 800debe:	6994      	ldr	r4, [r2, #24]
 800dec0:	42a3      	cmp	r3, r4
 800dec2:	db01      	blt.n	800dec8 <__sfputc_r+0x16>
 800dec4:	290a      	cmp	r1, #10
 800dec6:	d103      	bne.n	800ded0 <__sfputc_r+0x1e>
 800dec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800decc:	f000 b934 	b.w	800e138 <__swbuf_r>
 800ded0:	6813      	ldr	r3, [r2, #0]
 800ded2:	1c58      	adds	r0, r3, #1
 800ded4:	6010      	str	r0, [r2, #0]
 800ded6:	7019      	strb	r1, [r3, #0]
 800ded8:	4608      	mov	r0, r1
 800deda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <__sfputs_r>:
 800dee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee2:	4606      	mov	r6, r0
 800dee4:	460f      	mov	r7, r1
 800dee6:	4614      	mov	r4, r2
 800dee8:	18d5      	adds	r5, r2, r3
 800deea:	42ac      	cmp	r4, r5
 800deec:	d101      	bne.n	800def2 <__sfputs_r+0x12>
 800deee:	2000      	movs	r0, #0
 800def0:	e007      	b.n	800df02 <__sfputs_r+0x22>
 800def2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800def6:	463a      	mov	r2, r7
 800def8:	4630      	mov	r0, r6
 800defa:	f7ff ffda 	bl	800deb2 <__sfputc_r>
 800defe:	1c43      	adds	r3, r0, #1
 800df00:	d1f3      	bne.n	800deea <__sfputs_r+0xa>
 800df02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df04 <_vfiprintf_r>:
 800df04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df08:	460d      	mov	r5, r1
 800df0a:	b09d      	sub	sp, #116	; 0x74
 800df0c:	4614      	mov	r4, r2
 800df0e:	4698      	mov	r8, r3
 800df10:	4606      	mov	r6, r0
 800df12:	b118      	cbz	r0, 800df1c <_vfiprintf_r+0x18>
 800df14:	6a03      	ldr	r3, [r0, #32]
 800df16:	b90b      	cbnz	r3, 800df1c <_vfiprintf_r+0x18>
 800df18:	f7fe f886 	bl	800c028 <__sinit>
 800df1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df1e:	07d9      	lsls	r1, r3, #31
 800df20:	d405      	bmi.n	800df2e <_vfiprintf_r+0x2a>
 800df22:	89ab      	ldrh	r3, [r5, #12]
 800df24:	059a      	lsls	r2, r3, #22
 800df26:	d402      	bmi.n	800df2e <_vfiprintf_r+0x2a>
 800df28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df2a:	f7fe f9e9 	bl	800c300 <__retarget_lock_acquire_recursive>
 800df2e:	89ab      	ldrh	r3, [r5, #12]
 800df30:	071b      	lsls	r3, r3, #28
 800df32:	d501      	bpl.n	800df38 <_vfiprintf_r+0x34>
 800df34:	692b      	ldr	r3, [r5, #16]
 800df36:	b99b      	cbnz	r3, 800df60 <_vfiprintf_r+0x5c>
 800df38:	4629      	mov	r1, r5
 800df3a:	4630      	mov	r0, r6
 800df3c:	f000 f93a 	bl	800e1b4 <__swsetup_r>
 800df40:	b170      	cbz	r0, 800df60 <_vfiprintf_r+0x5c>
 800df42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df44:	07dc      	lsls	r4, r3, #31
 800df46:	d504      	bpl.n	800df52 <_vfiprintf_r+0x4e>
 800df48:	f04f 30ff 	mov.w	r0, #4294967295
 800df4c:	b01d      	add	sp, #116	; 0x74
 800df4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df52:	89ab      	ldrh	r3, [r5, #12]
 800df54:	0598      	lsls	r0, r3, #22
 800df56:	d4f7      	bmi.n	800df48 <_vfiprintf_r+0x44>
 800df58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df5a:	f7fe f9d2 	bl	800c302 <__retarget_lock_release_recursive>
 800df5e:	e7f3      	b.n	800df48 <_vfiprintf_r+0x44>
 800df60:	2300      	movs	r3, #0
 800df62:	9309      	str	r3, [sp, #36]	; 0x24
 800df64:	2320      	movs	r3, #32
 800df66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800df6e:	2330      	movs	r3, #48	; 0x30
 800df70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e124 <_vfiprintf_r+0x220>
 800df74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df78:	f04f 0901 	mov.w	r9, #1
 800df7c:	4623      	mov	r3, r4
 800df7e:	469a      	mov	sl, r3
 800df80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df84:	b10a      	cbz	r2, 800df8a <_vfiprintf_r+0x86>
 800df86:	2a25      	cmp	r2, #37	; 0x25
 800df88:	d1f9      	bne.n	800df7e <_vfiprintf_r+0x7a>
 800df8a:	ebba 0b04 	subs.w	fp, sl, r4
 800df8e:	d00b      	beq.n	800dfa8 <_vfiprintf_r+0xa4>
 800df90:	465b      	mov	r3, fp
 800df92:	4622      	mov	r2, r4
 800df94:	4629      	mov	r1, r5
 800df96:	4630      	mov	r0, r6
 800df98:	f7ff ffa2 	bl	800dee0 <__sfputs_r>
 800df9c:	3001      	adds	r0, #1
 800df9e:	f000 80a9 	beq.w	800e0f4 <_vfiprintf_r+0x1f0>
 800dfa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfa4:	445a      	add	r2, fp
 800dfa6:	9209      	str	r2, [sp, #36]	; 0x24
 800dfa8:	f89a 3000 	ldrb.w	r3, [sl]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	f000 80a1 	beq.w	800e0f4 <_vfiprintf_r+0x1f0>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	f04f 32ff 	mov.w	r2, #4294967295
 800dfb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfbc:	f10a 0a01 	add.w	sl, sl, #1
 800dfc0:	9304      	str	r3, [sp, #16]
 800dfc2:	9307      	str	r3, [sp, #28]
 800dfc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfc8:	931a      	str	r3, [sp, #104]	; 0x68
 800dfca:	4654      	mov	r4, sl
 800dfcc:	2205      	movs	r2, #5
 800dfce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfd2:	4854      	ldr	r0, [pc, #336]	; (800e124 <_vfiprintf_r+0x220>)
 800dfd4:	f7f2 f91c 	bl	8000210 <memchr>
 800dfd8:	9a04      	ldr	r2, [sp, #16]
 800dfda:	b9d8      	cbnz	r0, 800e014 <_vfiprintf_r+0x110>
 800dfdc:	06d1      	lsls	r1, r2, #27
 800dfde:	bf44      	itt	mi
 800dfe0:	2320      	movmi	r3, #32
 800dfe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfe6:	0713      	lsls	r3, r2, #28
 800dfe8:	bf44      	itt	mi
 800dfea:	232b      	movmi	r3, #43	; 0x2b
 800dfec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dff0:	f89a 3000 	ldrb.w	r3, [sl]
 800dff4:	2b2a      	cmp	r3, #42	; 0x2a
 800dff6:	d015      	beq.n	800e024 <_vfiprintf_r+0x120>
 800dff8:	9a07      	ldr	r2, [sp, #28]
 800dffa:	4654      	mov	r4, sl
 800dffc:	2000      	movs	r0, #0
 800dffe:	f04f 0c0a 	mov.w	ip, #10
 800e002:	4621      	mov	r1, r4
 800e004:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e008:	3b30      	subs	r3, #48	; 0x30
 800e00a:	2b09      	cmp	r3, #9
 800e00c:	d94d      	bls.n	800e0aa <_vfiprintf_r+0x1a6>
 800e00e:	b1b0      	cbz	r0, 800e03e <_vfiprintf_r+0x13a>
 800e010:	9207      	str	r2, [sp, #28]
 800e012:	e014      	b.n	800e03e <_vfiprintf_r+0x13a>
 800e014:	eba0 0308 	sub.w	r3, r0, r8
 800e018:	fa09 f303 	lsl.w	r3, r9, r3
 800e01c:	4313      	orrs	r3, r2
 800e01e:	9304      	str	r3, [sp, #16]
 800e020:	46a2      	mov	sl, r4
 800e022:	e7d2      	b.n	800dfca <_vfiprintf_r+0xc6>
 800e024:	9b03      	ldr	r3, [sp, #12]
 800e026:	1d19      	adds	r1, r3, #4
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	9103      	str	r1, [sp, #12]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	bfbb      	ittet	lt
 800e030:	425b      	neglt	r3, r3
 800e032:	f042 0202 	orrlt.w	r2, r2, #2
 800e036:	9307      	strge	r3, [sp, #28]
 800e038:	9307      	strlt	r3, [sp, #28]
 800e03a:	bfb8      	it	lt
 800e03c:	9204      	strlt	r2, [sp, #16]
 800e03e:	7823      	ldrb	r3, [r4, #0]
 800e040:	2b2e      	cmp	r3, #46	; 0x2e
 800e042:	d10c      	bne.n	800e05e <_vfiprintf_r+0x15a>
 800e044:	7863      	ldrb	r3, [r4, #1]
 800e046:	2b2a      	cmp	r3, #42	; 0x2a
 800e048:	d134      	bne.n	800e0b4 <_vfiprintf_r+0x1b0>
 800e04a:	9b03      	ldr	r3, [sp, #12]
 800e04c:	1d1a      	adds	r2, r3, #4
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	9203      	str	r2, [sp, #12]
 800e052:	2b00      	cmp	r3, #0
 800e054:	bfb8      	it	lt
 800e056:	f04f 33ff 	movlt.w	r3, #4294967295
 800e05a:	3402      	adds	r4, #2
 800e05c:	9305      	str	r3, [sp, #20]
 800e05e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e134 <_vfiprintf_r+0x230>
 800e062:	7821      	ldrb	r1, [r4, #0]
 800e064:	2203      	movs	r2, #3
 800e066:	4650      	mov	r0, sl
 800e068:	f7f2 f8d2 	bl	8000210 <memchr>
 800e06c:	b138      	cbz	r0, 800e07e <_vfiprintf_r+0x17a>
 800e06e:	9b04      	ldr	r3, [sp, #16]
 800e070:	eba0 000a 	sub.w	r0, r0, sl
 800e074:	2240      	movs	r2, #64	; 0x40
 800e076:	4082      	lsls	r2, r0
 800e078:	4313      	orrs	r3, r2
 800e07a:	3401      	adds	r4, #1
 800e07c:	9304      	str	r3, [sp, #16]
 800e07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e082:	4829      	ldr	r0, [pc, #164]	; (800e128 <_vfiprintf_r+0x224>)
 800e084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e088:	2206      	movs	r2, #6
 800e08a:	f7f2 f8c1 	bl	8000210 <memchr>
 800e08e:	2800      	cmp	r0, #0
 800e090:	d03f      	beq.n	800e112 <_vfiprintf_r+0x20e>
 800e092:	4b26      	ldr	r3, [pc, #152]	; (800e12c <_vfiprintf_r+0x228>)
 800e094:	bb1b      	cbnz	r3, 800e0de <_vfiprintf_r+0x1da>
 800e096:	9b03      	ldr	r3, [sp, #12]
 800e098:	3307      	adds	r3, #7
 800e09a:	f023 0307 	bic.w	r3, r3, #7
 800e09e:	3308      	adds	r3, #8
 800e0a0:	9303      	str	r3, [sp, #12]
 800e0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0a4:	443b      	add	r3, r7
 800e0a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0a8:	e768      	b.n	800df7c <_vfiprintf_r+0x78>
 800e0aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0ae:	460c      	mov	r4, r1
 800e0b0:	2001      	movs	r0, #1
 800e0b2:	e7a6      	b.n	800e002 <_vfiprintf_r+0xfe>
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	3401      	adds	r4, #1
 800e0b8:	9305      	str	r3, [sp, #20]
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	f04f 0c0a 	mov.w	ip, #10
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0c6:	3a30      	subs	r2, #48	; 0x30
 800e0c8:	2a09      	cmp	r2, #9
 800e0ca:	d903      	bls.n	800e0d4 <_vfiprintf_r+0x1d0>
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d0c6      	beq.n	800e05e <_vfiprintf_r+0x15a>
 800e0d0:	9105      	str	r1, [sp, #20]
 800e0d2:	e7c4      	b.n	800e05e <_vfiprintf_r+0x15a>
 800e0d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0d8:	4604      	mov	r4, r0
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e7f0      	b.n	800e0c0 <_vfiprintf_r+0x1bc>
 800e0de:	ab03      	add	r3, sp, #12
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	462a      	mov	r2, r5
 800e0e4:	4b12      	ldr	r3, [pc, #72]	; (800e130 <_vfiprintf_r+0x22c>)
 800e0e6:	a904      	add	r1, sp, #16
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	f7fd fb5d 	bl	800b7a8 <_printf_float>
 800e0ee:	4607      	mov	r7, r0
 800e0f0:	1c78      	adds	r0, r7, #1
 800e0f2:	d1d6      	bne.n	800e0a2 <_vfiprintf_r+0x19e>
 800e0f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0f6:	07d9      	lsls	r1, r3, #31
 800e0f8:	d405      	bmi.n	800e106 <_vfiprintf_r+0x202>
 800e0fa:	89ab      	ldrh	r3, [r5, #12]
 800e0fc:	059a      	lsls	r2, r3, #22
 800e0fe:	d402      	bmi.n	800e106 <_vfiprintf_r+0x202>
 800e100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e102:	f7fe f8fe 	bl	800c302 <__retarget_lock_release_recursive>
 800e106:	89ab      	ldrh	r3, [r5, #12]
 800e108:	065b      	lsls	r3, r3, #25
 800e10a:	f53f af1d 	bmi.w	800df48 <_vfiprintf_r+0x44>
 800e10e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e110:	e71c      	b.n	800df4c <_vfiprintf_r+0x48>
 800e112:	ab03      	add	r3, sp, #12
 800e114:	9300      	str	r3, [sp, #0]
 800e116:	462a      	mov	r2, r5
 800e118:	4b05      	ldr	r3, [pc, #20]	; (800e130 <_vfiprintf_r+0x22c>)
 800e11a:	a904      	add	r1, sp, #16
 800e11c:	4630      	mov	r0, r6
 800e11e:	f7fd fde7 	bl	800bcf0 <_printf_i>
 800e122:	e7e4      	b.n	800e0ee <_vfiprintf_r+0x1ea>
 800e124:	0800e78c 	.word	0x0800e78c
 800e128:	0800e796 	.word	0x0800e796
 800e12c:	0800b7a9 	.word	0x0800b7a9
 800e130:	0800dee1 	.word	0x0800dee1
 800e134:	0800e792 	.word	0x0800e792

0800e138 <__swbuf_r>:
 800e138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e13a:	460e      	mov	r6, r1
 800e13c:	4614      	mov	r4, r2
 800e13e:	4605      	mov	r5, r0
 800e140:	b118      	cbz	r0, 800e14a <__swbuf_r+0x12>
 800e142:	6a03      	ldr	r3, [r0, #32]
 800e144:	b90b      	cbnz	r3, 800e14a <__swbuf_r+0x12>
 800e146:	f7fd ff6f 	bl	800c028 <__sinit>
 800e14a:	69a3      	ldr	r3, [r4, #24]
 800e14c:	60a3      	str	r3, [r4, #8]
 800e14e:	89a3      	ldrh	r3, [r4, #12]
 800e150:	071a      	lsls	r2, r3, #28
 800e152:	d525      	bpl.n	800e1a0 <__swbuf_r+0x68>
 800e154:	6923      	ldr	r3, [r4, #16]
 800e156:	b31b      	cbz	r3, 800e1a0 <__swbuf_r+0x68>
 800e158:	6823      	ldr	r3, [r4, #0]
 800e15a:	6922      	ldr	r2, [r4, #16]
 800e15c:	1a98      	subs	r0, r3, r2
 800e15e:	6963      	ldr	r3, [r4, #20]
 800e160:	b2f6      	uxtb	r6, r6
 800e162:	4283      	cmp	r3, r0
 800e164:	4637      	mov	r7, r6
 800e166:	dc04      	bgt.n	800e172 <__swbuf_r+0x3a>
 800e168:	4621      	mov	r1, r4
 800e16a:	4628      	mov	r0, r5
 800e16c:	f7ff fdac 	bl	800dcc8 <_fflush_r>
 800e170:	b9e0      	cbnz	r0, 800e1ac <__swbuf_r+0x74>
 800e172:	68a3      	ldr	r3, [r4, #8]
 800e174:	3b01      	subs	r3, #1
 800e176:	60a3      	str	r3, [r4, #8]
 800e178:	6823      	ldr	r3, [r4, #0]
 800e17a:	1c5a      	adds	r2, r3, #1
 800e17c:	6022      	str	r2, [r4, #0]
 800e17e:	701e      	strb	r6, [r3, #0]
 800e180:	6962      	ldr	r2, [r4, #20]
 800e182:	1c43      	adds	r3, r0, #1
 800e184:	429a      	cmp	r2, r3
 800e186:	d004      	beq.n	800e192 <__swbuf_r+0x5a>
 800e188:	89a3      	ldrh	r3, [r4, #12]
 800e18a:	07db      	lsls	r3, r3, #31
 800e18c:	d506      	bpl.n	800e19c <__swbuf_r+0x64>
 800e18e:	2e0a      	cmp	r6, #10
 800e190:	d104      	bne.n	800e19c <__swbuf_r+0x64>
 800e192:	4621      	mov	r1, r4
 800e194:	4628      	mov	r0, r5
 800e196:	f7ff fd97 	bl	800dcc8 <_fflush_r>
 800e19a:	b938      	cbnz	r0, 800e1ac <__swbuf_r+0x74>
 800e19c:	4638      	mov	r0, r7
 800e19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1a0:	4621      	mov	r1, r4
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	f000 f806 	bl	800e1b4 <__swsetup_r>
 800e1a8:	2800      	cmp	r0, #0
 800e1aa:	d0d5      	beq.n	800e158 <__swbuf_r+0x20>
 800e1ac:	f04f 37ff 	mov.w	r7, #4294967295
 800e1b0:	e7f4      	b.n	800e19c <__swbuf_r+0x64>
	...

0800e1b4 <__swsetup_r>:
 800e1b4:	b538      	push	{r3, r4, r5, lr}
 800e1b6:	4b2a      	ldr	r3, [pc, #168]	; (800e260 <__swsetup_r+0xac>)
 800e1b8:	4605      	mov	r5, r0
 800e1ba:	6818      	ldr	r0, [r3, #0]
 800e1bc:	460c      	mov	r4, r1
 800e1be:	b118      	cbz	r0, 800e1c8 <__swsetup_r+0x14>
 800e1c0:	6a03      	ldr	r3, [r0, #32]
 800e1c2:	b90b      	cbnz	r3, 800e1c8 <__swsetup_r+0x14>
 800e1c4:	f7fd ff30 	bl	800c028 <__sinit>
 800e1c8:	89a3      	ldrh	r3, [r4, #12]
 800e1ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1ce:	0718      	lsls	r0, r3, #28
 800e1d0:	d422      	bmi.n	800e218 <__swsetup_r+0x64>
 800e1d2:	06d9      	lsls	r1, r3, #27
 800e1d4:	d407      	bmi.n	800e1e6 <__swsetup_r+0x32>
 800e1d6:	2309      	movs	r3, #9
 800e1d8:	602b      	str	r3, [r5, #0]
 800e1da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e1de:	81a3      	strh	r3, [r4, #12]
 800e1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e4:	e034      	b.n	800e250 <__swsetup_r+0x9c>
 800e1e6:	0758      	lsls	r0, r3, #29
 800e1e8:	d512      	bpl.n	800e210 <__swsetup_r+0x5c>
 800e1ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1ec:	b141      	cbz	r1, 800e200 <__swsetup_r+0x4c>
 800e1ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1f2:	4299      	cmp	r1, r3
 800e1f4:	d002      	beq.n	800e1fc <__swsetup_r+0x48>
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	f7fe ff0c 	bl	800d014 <_free_r>
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	6363      	str	r3, [r4, #52]	; 0x34
 800e200:	89a3      	ldrh	r3, [r4, #12]
 800e202:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e206:	81a3      	strh	r3, [r4, #12]
 800e208:	2300      	movs	r3, #0
 800e20a:	6063      	str	r3, [r4, #4]
 800e20c:	6923      	ldr	r3, [r4, #16]
 800e20e:	6023      	str	r3, [r4, #0]
 800e210:	89a3      	ldrh	r3, [r4, #12]
 800e212:	f043 0308 	orr.w	r3, r3, #8
 800e216:	81a3      	strh	r3, [r4, #12]
 800e218:	6923      	ldr	r3, [r4, #16]
 800e21a:	b94b      	cbnz	r3, 800e230 <__swsetup_r+0x7c>
 800e21c:	89a3      	ldrh	r3, [r4, #12]
 800e21e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e226:	d003      	beq.n	800e230 <__swsetup_r+0x7c>
 800e228:	4621      	mov	r1, r4
 800e22a:	4628      	mov	r0, r5
 800e22c:	f000 f884 	bl	800e338 <__smakebuf_r>
 800e230:	89a0      	ldrh	r0, [r4, #12]
 800e232:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e236:	f010 0301 	ands.w	r3, r0, #1
 800e23a:	d00a      	beq.n	800e252 <__swsetup_r+0x9e>
 800e23c:	2300      	movs	r3, #0
 800e23e:	60a3      	str	r3, [r4, #8]
 800e240:	6963      	ldr	r3, [r4, #20]
 800e242:	425b      	negs	r3, r3
 800e244:	61a3      	str	r3, [r4, #24]
 800e246:	6923      	ldr	r3, [r4, #16]
 800e248:	b943      	cbnz	r3, 800e25c <__swsetup_r+0xa8>
 800e24a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e24e:	d1c4      	bne.n	800e1da <__swsetup_r+0x26>
 800e250:	bd38      	pop	{r3, r4, r5, pc}
 800e252:	0781      	lsls	r1, r0, #30
 800e254:	bf58      	it	pl
 800e256:	6963      	ldrpl	r3, [r4, #20]
 800e258:	60a3      	str	r3, [r4, #8]
 800e25a:	e7f4      	b.n	800e246 <__swsetup_r+0x92>
 800e25c:	2000      	movs	r0, #0
 800e25e:	e7f7      	b.n	800e250 <__swsetup_r+0x9c>
 800e260:	20000080 	.word	0x20000080

0800e264 <_raise_r>:
 800e264:	291f      	cmp	r1, #31
 800e266:	b538      	push	{r3, r4, r5, lr}
 800e268:	4604      	mov	r4, r0
 800e26a:	460d      	mov	r5, r1
 800e26c:	d904      	bls.n	800e278 <_raise_r+0x14>
 800e26e:	2316      	movs	r3, #22
 800e270:	6003      	str	r3, [r0, #0]
 800e272:	f04f 30ff 	mov.w	r0, #4294967295
 800e276:	bd38      	pop	{r3, r4, r5, pc}
 800e278:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e27a:	b112      	cbz	r2, 800e282 <_raise_r+0x1e>
 800e27c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e280:	b94b      	cbnz	r3, 800e296 <_raise_r+0x32>
 800e282:	4620      	mov	r0, r4
 800e284:	f000 f830 	bl	800e2e8 <_getpid_r>
 800e288:	462a      	mov	r2, r5
 800e28a:	4601      	mov	r1, r0
 800e28c:	4620      	mov	r0, r4
 800e28e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e292:	f000 b817 	b.w	800e2c4 <_kill_r>
 800e296:	2b01      	cmp	r3, #1
 800e298:	d00a      	beq.n	800e2b0 <_raise_r+0x4c>
 800e29a:	1c59      	adds	r1, r3, #1
 800e29c:	d103      	bne.n	800e2a6 <_raise_r+0x42>
 800e29e:	2316      	movs	r3, #22
 800e2a0:	6003      	str	r3, [r0, #0]
 800e2a2:	2001      	movs	r0, #1
 800e2a4:	e7e7      	b.n	800e276 <_raise_r+0x12>
 800e2a6:	2400      	movs	r4, #0
 800e2a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	4798      	blx	r3
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	e7e0      	b.n	800e276 <_raise_r+0x12>

0800e2b4 <raise>:
 800e2b4:	4b02      	ldr	r3, [pc, #8]	; (800e2c0 <raise+0xc>)
 800e2b6:	4601      	mov	r1, r0
 800e2b8:	6818      	ldr	r0, [r3, #0]
 800e2ba:	f7ff bfd3 	b.w	800e264 <_raise_r>
 800e2be:	bf00      	nop
 800e2c0:	20000080 	.word	0x20000080

0800e2c4 <_kill_r>:
 800e2c4:	b538      	push	{r3, r4, r5, lr}
 800e2c6:	4d07      	ldr	r5, [pc, #28]	; (800e2e4 <_kill_r+0x20>)
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	4608      	mov	r0, r1
 800e2ce:	4611      	mov	r1, r2
 800e2d0:	602b      	str	r3, [r5, #0]
 800e2d2:	f7f3 ff97 	bl	8002204 <_kill>
 800e2d6:	1c43      	adds	r3, r0, #1
 800e2d8:	d102      	bne.n	800e2e0 <_kill_r+0x1c>
 800e2da:	682b      	ldr	r3, [r5, #0]
 800e2dc:	b103      	cbz	r3, 800e2e0 <_kill_r+0x1c>
 800e2de:	6023      	str	r3, [r4, #0]
 800e2e0:	bd38      	pop	{r3, r4, r5, pc}
 800e2e2:	bf00      	nop
 800e2e4:	200058bc 	.word	0x200058bc

0800e2e8 <_getpid_r>:
 800e2e8:	f7f3 bf84 	b.w	80021f4 <_getpid>

0800e2ec <__swhatbuf_r>:
 800e2ec:	b570      	push	{r4, r5, r6, lr}
 800e2ee:	460c      	mov	r4, r1
 800e2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2f4:	2900      	cmp	r1, #0
 800e2f6:	b096      	sub	sp, #88	; 0x58
 800e2f8:	4615      	mov	r5, r2
 800e2fa:	461e      	mov	r6, r3
 800e2fc:	da0d      	bge.n	800e31a <__swhatbuf_r+0x2e>
 800e2fe:	89a3      	ldrh	r3, [r4, #12]
 800e300:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e304:	f04f 0100 	mov.w	r1, #0
 800e308:	bf0c      	ite	eq
 800e30a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e30e:	2340      	movne	r3, #64	; 0x40
 800e310:	2000      	movs	r0, #0
 800e312:	6031      	str	r1, [r6, #0]
 800e314:	602b      	str	r3, [r5, #0]
 800e316:	b016      	add	sp, #88	; 0x58
 800e318:	bd70      	pop	{r4, r5, r6, pc}
 800e31a:	466a      	mov	r2, sp
 800e31c:	f000 f848 	bl	800e3b0 <_fstat_r>
 800e320:	2800      	cmp	r0, #0
 800e322:	dbec      	blt.n	800e2fe <__swhatbuf_r+0x12>
 800e324:	9901      	ldr	r1, [sp, #4]
 800e326:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e32a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e32e:	4259      	negs	r1, r3
 800e330:	4159      	adcs	r1, r3
 800e332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e336:	e7eb      	b.n	800e310 <__swhatbuf_r+0x24>

0800e338 <__smakebuf_r>:
 800e338:	898b      	ldrh	r3, [r1, #12]
 800e33a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e33c:	079d      	lsls	r5, r3, #30
 800e33e:	4606      	mov	r6, r0
 800e340:	460c      	mov	r4, r1
 800e342:	d507      	bpl.n	800e354 <__smakebuf_r+0x1c>
 800e344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e348:	6023      	str	r3, [r4, #0]
 800e34a:	6123      	str	r3, [r4, #16]
 800e34c:	2301      	movs	r3, #1
 800e34e:	6163      	str	r3, [r4, #20]
 800e350:	b002      	add	sp, #8
 800e352:	bd70      	pop	{r4, r5, r6, pc}
 800e354:	ab01      	add	r3, sp, #4
 800e356:	466a      	mov	r2, sp
 800e358:	f7ff ffc8 	bl	800e2ec <__swhatbuf_r>
 800e35c:	9900      	ldr	r1, [sp, #0]
 800e35e:	4605      	mov	r5, r0
 800e360:	4630      	mov	r0, r6
 800e362:	f7fe fecb 	bl	800d0fc <_malloc_r>
 800e366:	b948      	cbnz	r0, 800e37c <__smakebuf_r+0x44>
 800e368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e36c:	059a      	lsls	r2, r3, #22
 800e36e:	d4ef      	bmi.n	800e350 <__smakebuf_r+0x18>
 800e370:	f023 0303 	bic.w	r3, r3, #3
 800e374:	f043 0302 	orr.w	r3, r3, #2
 800e378:	81a3      	strh	r3, [r4, #12]
 800e37a:	e7e3      	b.n	800e344 <__smakebuf_r+0xc>
 800e37c:	89a3      	ldrh	r3, [r4, #12]
 800e37e:	6020      	str	r0, [r4, #0]
 800e380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e384:	81a3      	strh	r3, [r4, #12]
 800e386:	9b00      	ldr	r3, [sp, #0]
 800e388:	6163      	str	r3, [r4, #20]
 800e38a:	9b01      	ldr	r3, [sp, #4]
 800e38c:	6120      	str	r0, [r4, #16]
 800e38e:	b15b      	cbz	r3, 800e3a8 <__smakebuf_r+0x70>
 800e390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e394:	4630      	mov	r0, r6
 800e396:	f000 f81d 	bl	800e3d4 <_isatty_r>
 800e39a:	b128      	cbz	r0, 800e3a8 <__smakebuf_r+0x70>
 800e39c:	89a3      	ldrh	r3, [r4, #12]
 800e39e:	f023 0303 	bic.w	r3, r3, #3
 800e3a2:	f043 0301 	orr.w	r3, r3, #1
 800e3a6:	81a3      	strh	r3, [r4, #12]
 800e3a8:	89a3      	ldrh	r3, [r4, #12]
 800e3aa:	431d      	orrs	r5, r3
 800e3ac:	81a5      	strh	r5, [r4, #12]
 800e3ae:	e7cf      	b.n	800e350 <__smakebuf_r+0x18>

0800e3b0 <_fstat_r>:
 800e3b0:	b538      	push	{r3, r4, r5, lr}
 800e3b2:	4d07      	ldr	r5, [pc, #28]	; (800e3d0 <_fstat_r+0x20>)
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	4608      	mov	r0, r1
 800e3ba:	4611      	mov	r1, r2
 800e3bc:	602b      	str	r3, [r5, #0]
 800e3be:	f7f3 ff64 	bl	800228a <_fstat>
 800e3c2:	1c43      	adds	r3, r0, #1
 800e3c4:	d102      	bne.n	800e3cc <_fstat_r+0x1c>
 800e3c6:	682b      	ldr	r3, [r5, #0]
 800e3c8:	b103      	cbz	r3, 800e3cc <_fstat_r+0x1c>
 800e3ca:	6023      	str	r3, [r4, #0]
 800e3cc:	bd38      	pop	{r3, r4, r5, pc}
 800e3ce:	bf00      	nop
 800e3d0:	200058bc 	.word	0x200058bc

0800e3d4 <_isatty_r>:
 800e3d4:	b538      	push	{r3, r4, r5, lr}
 800e3d6:	4d06      	ldr	r5, [pc, #24]	; (800e3f0 <_isatty_r+0x1c>)
 800e3d8:	2300      	movs	r3, #0
 800e3da:	4604      	mov	r4, r0
 800e3dc:	4608      	mov	r0, r1
 800e3de:	602b      	str	r3, [r5, #0]
 800e3e0:	f7f3 ff63 	bl	80022aa <_isatty>
 800e3e4:	1c43      	adds	r3, r0, #1
 800e3e6:	d102      	bne.n	800e3ee <_isatty_r+0x1a>
 800e3e8:	682b      	ldr	r3, [r5, #0]
 800e3ea:	b103      	cbz	r3, 800e3ee <_isatty_r+0x1a>
 800e3ec:	6023      	str	r3, [r4, #0]
 800e3ee:	bd38      	pop	{r3, r4, r5, pc}
 800e3f0:	200058bc 	.word	0x200058bc

0800e3f4 <_init>:
 800e3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f6:	bf00      	nop
 800e3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3fa:	bc08      	pop	{r3}
 800e3fc:	469e      	mov	lr, r3
 800e3fe:	4770      	bx	lr

0800e400 <_fini>:
 800e400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e402:	bf00      	nop
 800e404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e406:	bc08      	pop	{r3}
 800e408:	469e      	mov	lr, r3
 800e40a:	4770      	bx	lr
