
RTOS_project_101124.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ccc  08010998  08010998  00020998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011664  08011664  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08011664  08011664  00021664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801166c  0801166c  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801166c  0801166c  0002166c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011670  08011670  00021670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08011674  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000578c  200001f8  0801186c  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20005984  0801186c  00035984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 13 .debug_info   000252f3  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005060  00000000  00000000  0005555e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fa8  00000000  00000000  0005a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018ab  00000000  00000000  0005c568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029c1a  00000000  00000000  0005de13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027b17  00000000  00000000  00087a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f54bc  00000000  00000000  000af544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009704  00000000  00000000  001a4a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001ae104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801097c 	.word	0x0801097c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0801097c 	.word	0x0801097c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
extern TIM_HandleTypeDef htim11;
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <configureTimerForRunTimeStats+0x10>)
 8000eea:	f007 fc03 	bl	80086f4 <HAL_TIM_Base_Start_IT>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200005e0 	.word	0x200005e0

08000ef8 <getRunTimeCounterValue>:
extern volatile unsigned long ulHighFrequencyTimerTicks;

__weak unsigned long getRunTimeCounterValue(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <getRunTimeCounterValue+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000a0c 	.word	0x20000a0c

08000f10 <vPortSuppressTicksAndSleep>:
/* USER CODE END 1 */

/* USER CODE BEGIN VPORT_SUPPORT_TICKS_AND_SLEEP */
__weak void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  // Generated when configUSE_TICKLESS_IDLE == 2.
  // Function called in tasks.c (in portTASK_FUNCTION).
  // TO BE COMPLETED or TO BE REPLACED by a user one, overriding that weak one.
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_write>:
#define ADC_RESOLUTION 4095
#define ADC_SAMPLES 100

extern UART_HandleTypeDef huart2;

int _write(int fd, char *ptr, int len){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d002      	beq.n	8000f3c <_write+0x18>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d111      	bne.n	8000f60 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <_write+0x48>)
 8000f48:	f008 f853 	bl	8008ff2 <HAL_UART_Transmit>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <_write+0x36>
            return len;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	e004      	b.n	8000f64 <_write+0x40>
        else
            return -1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e001      	b.n	8000f64 <_write+0x40>
    }
    return -1;
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000628 	.word	0x20000628

08000f70 <process_adc_buffer>:

// Process half a buffer full of data
static inline void process_adc_buffer(uint16_t *buffer){
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    uint32_t sum1 = 0, sum2 = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < ADC_SAMPLES; ++i) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e016      	b.n	8000fb4 <process_adc_buffer+0x44>
        sum1 += buffer[i * 2];
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	4413      	add	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]
        sum2 += buffer[1 + i * 2];
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4413      	add	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < ADC_SAMPLES; ++i) {
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b63      	cmp	r3, #99	; 0x63
 8000fb8:	dde5      	ble.n	8000f86 <process_adc_buffer+0x16>
    }

    vref_avg = sum2 / ADC_SAMPLES;
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4a30      	ldr	r2, [pc, #192]	; (8001080 <process_adc_buffer+0x110>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <process_adc_buffer+0x114>)
 8000fc8:	801a      	strh	r2, [r3, #0]
    temp_avg = sum1 / ADC_SAMPLES;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	4a2c      	ldr	r2, [pc, #176]	; (8001080 <process_adc_buffer+0x110>)
 8000fce:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <process_adc_buffer+0x118>)
 8000fd8:	801a      	strh	r2, [r3, #0]

    // VDDA can be calculated based on the measured vref and the calibration data
    vdda = (float) VREFINT_CAL_VREF * (float) *VREFINT_CAL_ADDR / vref_avg / 1000;
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <process_adc_buffer+0x11c>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001090 <process_adc_buffer+0x120>
 8000fea:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <process_adc_buffer+0x114>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ffe:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001094 <process_adc_buffer+0x124>
 8001002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <process_adc_buffer+0x128>)
 8001008:	edc3 7a00 	vstr	s15, [r3]

    // Knowing vdda and the resolution of adc - the actual voltage can be calculated
    vref = (float) vdda / ADC_RESOLUTION * vref_avg;
 800100c:	4b22      	ldr	r3, [pc, #136]	; (8001098 <process_adc_buffer+0x128>)
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	eddf 6a22 	vldr	s13, [pc, #136]	; 800109c <process_adc_buffer+0x12c>
 8001016:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <process_adc_buffer+0x114>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <process_adc_buffer+0x130>)
 800102c:	edc3 7a00 	vstr	s15, [r3]
    //vref = __LL_ADC_CALC_VREFANALOG_VOLTAGE(vref_avg, ADC_RESOLUTION_12B);

    temp = (float) ( (float)( (float)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP) / (float)(*TEMPSENSOR_CAL2_ADDR - *TEMPSENSOR_CAL1_ADDR)) * (temp_avg - *TEMPSENSOR_CAL1_ADDR) + TEMPSENSOR_CAL1_TEMP);
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <process_adc_buffer+0x134>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <process_adc_buffer+0x138>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001044:	eddf 6a19 	vldr	s13, [pc, #100]	; 80010ac <process_adc_buffer+0x13c>
 8001048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <process_adc_buffer+0x118>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <process_adc_buffer+0x138>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001064:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001068:	ee77 7a87 	vadd.f32	s15, s15, s14
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <process_adc_buffer+0x140>)
 800106e:	edc3 7a00 	vstr	s15, [r3]
    //temp = __LL_ADC_CALC_TEMPERATURE(vref, temp_avg, ADC_RESOLUTION_12B);
}
 8001072:	bf00      	nop
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	51eb851f 	.word	0x51eb851f
 8001084:	20000218 	.word	0x20000218
 8001088:	2000021a 	.word	0x2000021a
 800108c:	1fff7a2a 	.word	0x1fff7a2a
 8001090:	454e4000 	.word	0x454e4000
 8001094:	447a0000 	.word	0x447a0000
 8001098:	2000021c 	.word	0x2000021c
 800109c:	457ff000 	.word	0x457ff000
 80010a0:	20000220 	.word	0x20000220
 80010a4:	1fff7a2e 	.word	0x1fff7a2e
 80010a8:	1fff7a2c 	.word	0x1fff7a2c
 80010ac:	42a00000 	.word	0x42a00000
 80010b0:	20000224 	.word	0x20000224

080010b4 <buffclear>:
	int i=0;
	while(*buf++!='\0'){
	i++;}
	return i;
}
void buffclear(char*string){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff f8f7 	bl	80002b0 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	72fb      	strb	r3, [r7, #11]
	for(int i=0;i<len;i++){
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e007      	b.n	80010dc <buffclear+0x28>
		string[i]='\0';
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<len;i++){
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3301      	adds	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dbf3      	blt.n	80010cc <buffclear+0x18>
	}
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <send_uart>:

void send_uart(char*string){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff f8d9 	bl	80002b0 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, len, 2000);
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	b29a      	uxth	r2, r3
 8001106:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <send_uart+0x30>)
 800110e:	f007 ff70 	bl	8008ff2 <HAL_UART_Transmit>
	buffclear(string);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffce 	bl	80010b4 <buffclear>
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000628 	.word	0x20000628

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112a:	f001 fa57 	bl	80025dc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112e:	f000 f8cf 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001132:	f000 fb9d 	bl	8001870 <MX_GPIO_Init>
  MX_DMA_Init();
 8001136:	f000 fb7b 	bl	8001830 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800113a:	f000 fb4f 	bl	80017dc <MX_USART2_UART_Init>
  MX_RTC_Init();
 800113e:	f000 fa19 	bl	8001574 <MX_RTC_Init>
  MX_SPI2_Init();
 8001142:	f000 faa3 	bl	800168c <MX_SPI2_Init>
  MX_FATFS_Init();
 8001146:	f008 fac9 	bl	80096dc <MX_FATFS_Init>
  MX_ADC1_Init();
 800114a:	f000 f931 	bl	80013b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800114e:	f000 f991 	bl	8001474 <MX_ADC2_Init>
  MX_I2C1_Init();
 8001152:	f000 f9e1 	bl	8001518 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001156:	f000 facf 	bl	80016f8 <MX_TIM3_Init>
  MX_TIM11_Init();
 800115a:	f000 fb1b 	bl	8001794 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800115e:	f008 fc3d 	bl	80099dc <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  MutexOne = xSemaphoreCreateMutex();
 8001162:	2001      	movs	r0, #1
 8001164:	f008 ff71 	bl	800a04a <xQueueCreateMutex>
 8001168:	4603      	mov	r3, r0
 800116a:	4a3c      	ldr	r2, [pc, #240]	; (800125c <main+0x138>)
 800116c:	6013      	str	r3, [r2, #0]
  binarySemaphoreISR = xSemaphoreCreateBinary();
 800116e:	2203      	movs	r2, #3
 8001170:	2100      	movs	r1, #0
 8001172:	2001      	movs	r0, #1
 8001174:	f008 fef2 	bl	8009f5c <xQueueGenericCreate>
 8001178:	4603      	mov	r3, r0
 800117a:	4a39      	ldr	r2, [pc, #228]	; (8001260 <main+0x13c>)
 800117c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  buttonPressTimer = xTimerCreate("ButtonPressTimer", pdMS_TO_TICKS(100), pdFALSE, NULL, vTimerCallback);
 800117e:	4b39      	ldr	r3, [pc, #228]	; (8001264 <main+0x140>)
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	2200      	movs	r2, #0
 8001186:	2164      	movs	r1, #100	; 0x64
 8001188:	4837      	ldr	r0, [pc, #220]	; (8001268 <main+0x144>)
 800118a:	f00a fe03 	bl	800bd94 <xTimerCreate>
 800118e:	4603      	mov	r3, r0
 8001190:	4a36      	ldr	r2, [pc, #216]	; (800126c <main+0x148>)
 8001192:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  MainQueue = xQueueCreate(MAX_QUEUE_SIZE, MAX_CHARS *sizeof(char));
 8001194:	2200      	movs	r2, #0
 8001196:	2128      	movs	r1, #40	; 0x28
 8001198:	200a      	movs	r0, #10
 800119a:	f008 fedf 	bl	8009f5c <xQueueGenericCreate>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a33      	ldr	r2, [pc, #204]	; (8001270 <main+0x14c>)
 80011a2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idleTask */
  idleTaskHandle = osThreadNew(StartDefaultTask, NULL, &idleTask_attributes);
 80011a4:	4a33      	ldr	r2, [pc, #204]	; (8001274 <main+0x150>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	4833      	ldr	r0, [pc, #204]	; (8001278 <main+0x154>)
 80011aa:	f008 fc61 	bl	8009a70 <osThreadNew>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a32      	ldr	r2, [pc, #200]	; (800127c <main+0x158>)
 80011b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(vUARTtask,"UART_Task", 1024, NULL, 1, &UART_Handle);
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <main+0x15c>)
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	2301      	movs	r3, #1
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2300      	movs	r3, #0
 80011be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c2:	4930      	ldr	r1, [pc, #192]	; (8001284 <main+0x160>)
 80011c4:	4830      	ldr	r0, [pc, #192]	; (8001288 <main+0x164>)
 80011c6:	f009 fd4e 	bl	800ac66 <xTaskCreate>
  xTaskCreate(vRCWLtask,"RCWL_Tsk", 128, NULL, 1, &RCWL_Handle);
 80011ca:	4b30      	ldr	r3, [pc, #192]	; (800128c <main+0x168>)
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	2301      	movs	r3, #1
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2300      	movs	r3, #0
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	492e      	ldr	r1, [pc, #184]	; (8001290 <main+0x16c>)
 80011d8:	482e      	ldr	r0, [pc, #184]	; (8001294 <main+0x170>)
 80011da:	f009 fd44 	bl	800ac66 <xTaskCreate>
  xTaskCreate(vMQ135task,"MQ135_Task", 128, NULL, 1, &MQ135_Handle);
 80011de:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <main+0x174>)
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	2301      	movs	r3, #1
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2300      	movs	r3, #0
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	492c      	ldr	r1, [pc, #176]	; (800129c <main+0x178>)
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <main+0x17c>)
 80011ee:	f009 fd3a 	bl	800ac66 <xTaskCreate>
  xTaskCreate(vInternalTemptask,"Temp_Task", 256, NULL, 2, &InternalTemp_Handle);
 80011f2:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <main+0x180>)
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	2302      	movs	r3, #2
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2300      	movs	r3, #0
 80011fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001200:	4929      	ldr	r1, [pc, #164]	; (80012a8 <main+0x184>)
 8001202:	482a      	ldr	r0, [pc, #168]	; (80012ac <main+0x188>)
 8001204:	f009 fd2f 	bl	800ac66 <xTaskCreate>
  xTaskCreate(vRTCtask,"RTC_Task", 512, NULL, 2, &RTC_Handle);
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <main+0x18c>)
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	2302      	movs	r3, #2
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2300      	movs	r3, #0
 8001212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001216:	4927      	ldr	r1, [pc, #156]	; (80012b4 <main+0x190>)
 8001218:	4827      	ldr	r0, [pc, #156]	; (80012b8 <main+0x194>)
 800121a:	f009 fd24 	bl	800ac66 <xTaskCreate>
  xTaskCreate(vSwitchtask,"Switch_Task", 512, NULL, 2, &Switch_Handle);
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <main+0x198>)
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	2302      	movs	r3, #2
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2300      	movs	r3, #0
 8001228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122c:	4924      	ldr	r1, [pc, #144]	; (80012c0 <main+0x19c>)
 800122e:	4825      	ldr	r0, [pc, #148]	; (80012c4 <main+0x1a0>)
 8001230:	f009 fd19 	bl	800ac66 <xTaskCreate>
//  xTaskCreate(vsdCardtask,"sdCard_Task", 512, NULL, 1, &sdCard_Handle);
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  MX_FREERTOS_Init();
 8001234:	f000 fbb2 	bl	800199c <MX_FREERTOS_Init>
  SSD1306_Init();
 8001238:	f00b fd48 	bl	800cccc <SSD1306_Init>
  SSD1306_Clear();
 800123c:	f00b ff6b 	bl	800d116 <SSD1306_Clear>
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001240:	f008 fbf0 	bl	8009a24 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	SSD1306_GotoXY (10,10); // goto 10, 10
 8001244:	210a      	movs	r1, #10
 8001246:	200a      	movs	r0, #10
 8001248:	f00b feaa 	bl	800cfa0 <SSD1306_GotoXY>
		SSD1306_Puts("HELLOOOOOOOOWERT", &Font_7x10, 1);
 800124c:	2201      	movs	r2, #1
 800124e:	491e      	ldr	r1, [pc, #120]	; (80012c8 <main+0x1a4>)
 8001250:	481e      	ldr	r0, [pc, #120]	; (80012cc <main+0x1a8>)
 8001252:	f00b ff3b 	bl	800d0cc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001256:	f00b fdfd 	bl	800ce54 <SSD1306_UpdateScreen>
  	SSD1306_GotoXY (10,10); // goto 10, 10
 800125a:	e7f3      	b.n	8001244 <main+0x120>
 800125c:	2000068c 	.word	0x2000068c
 8001260:	20000690 	.word	0x20000690
 8001264:	08001d2d 	.word	0x08001d2d
 8001268:	080109a4 	.word	0x080109a4
 800126c:	20000694 	.word	0x20000694
 8001270:	20000688 	.word	0x20000688
 8001274:	08010b44 	.word	0x08010b44
 8001278:	08001dfd 	.word	0x08001dfd
 800127c:	2000066c 	.word	0x2000066c
 8001280:	20000678 	.word	0x20000678
 8001284:	080109b8 	.word	0x080109b8
 8001288:	08001a15 	.word	0x08001a15
 800128c:	20000670 	.word	0x20000670
 8001290:	080109c4 	.word	0x080109c4
 8001294:	08001b91 	.word	0x08001b91
 8001298:	2000067c 	.word	0x2000067c
 800129c:	080109d0 	.word	0x080109d0
 80012a0:	08001cb9 	.word	0x08001cb9
 80012a4:	20000680 	.word	0x20000680
 80012a8:	080109dc 	.word	0x080109dc
 80012ac:	08001b11 	.word	0x08001b11
 80012b0:	20000674 	.word	0x20000674
 80012b4:	080109e8 	.word	0x080109e8
 80012b8:	08001c05 	.word	0x08001c05
 80012bc:	20000684 	.word	0x20000684
 80012c0:	080109f4 	.word	0x080109f4
 80012c4:	08001a4d 	.word	0x08001a4d
 80012c8:	20000024 	.word	0x20000024
 80012cc:	08010a00 	.word	0x08010a00

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b094      	sub	sp, #80	; 0x50
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	2234      	movs	r2, #52	; 0x34
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f00d f9ff 	bl	800e6e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <SystemClock_Config+0xd8>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	4a2a      	ldr	r2, [pc, #168]	; (80013a8 <SystemClock_Config+0xd8>)
 80012fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001302:	6413      	str	r3, [r2, #64]	; 0x40
 8001304:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <SystemClock_Config+0xd8>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001310:	2300      	movs	r3, #0
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	4b25      	ldr	r3, [pc, #148]	; (80013ac <SystemClock_Config+0xdc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800131c:	4a23      	ldr	r2, [pc, #140]	; (80013ac <SystemClock_Config+0xdc>)
 800131e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <SystemClock_Config+0xdc>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001330:	230a      	movs	r3, #10
 8001332:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001334:	2301      	movs	r3, #1
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800133c:	2310      	movs	r3, #16
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001340:	2301      	movs	r3, #1
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001344:	2302      	movs	r3, #2
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001348:	2300      	movs	r3, #0
 800134a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800134c:	2308      	movs	r3, #8
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001350:	2354      	movs	r3, #84	; 0x54
 8001352:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001354:	2302      	movs	r3, #2
 8001356:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001358:	2302      	movs	r3, #2
 800135a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800135c:	2302      	movs	r3, #2
 800135e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4618      	mov	r0, r3
 8001366:	f005 fe7d 	bl	8007064 <HAL_RCC_OscConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001370:	f000 fd7a 	bl	8001e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001374:	230f      	movs	r3, #15
 8001376:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001378:	2302      	movs	r3, #2
 800137a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	2102      	movs	r1, #2
 8001390:	4618      	mov	r0, r3
 8001392:	f004 ffc1 	bl	8006318 <HAL_RCC_ClockConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800139c:	f000 fd64 	bl	8001e68 <Error_Handler>
  }
}
 80013a0:	bf00      	nop
 80013a2:	3750      	adds	r7, #80	; 0x50
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40007000 	.word	0x40007000

080013b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013b6:	463b      	mov	r3, r7
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013c2:	4b29      	ldr	r3, [pc, #164]	; (8001468 <MX_ADC1_Init+0xb8>)
 80013c4:	4a29      	ldr	r2, [pc, #164]	; (800146c <MX_ADC1_Init+0xbc>)
 80013c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013c8:	4b27      	ldr	r3, [pc, #156]	; (8001468 <MX_ADC1_Init+0xb8>)
 80013ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013d0:	4b25      	ldr	r3, [pc, #148]	; (8001468 <MX_ADC1_Init+0xb8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <MX_ADC1_Init+0xb8>)
 80013d8:	2201      	movs	r2, #1
 80013da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MX_ADC1_Init+0xb8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <MX_ADC1_Init+0xb8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_ADC1_Init+0xb8>)
 80013ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <MX_ADC1_Init+0xb8>)
 80013f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_ADC1_Init+0xb8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <MX_ADC1_Init+0xb8>)
 8001402:	2202      	movs	r2, #2
 8001404:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_ADC1_Init+0xb8>)
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_ADC1_Init+0xb8>)
 8001410:	2201      	movs	r2, #1
 8001412:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001414:	4814      	ldr	r0, [pc, #80]	; (8001468 <MX_ADC1_Init+0xb8>)
 8001416:	f001 f947 	bl	80026a8 <HAL_ADC_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001420:	f000 fd22 	bl	8001e68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_ADC1_Init+0xc0>)
 8001426:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001428:	2301      	movs	r3, #1
 800142a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800142c:	2307      	movs	r3, #7
 800142e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	4619      	mov	r1, r3
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <MX_ADC1_Init+0xb8>)
 8001436:	f001 fc33 	bl	8002ca0 <HAL_ADC_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001440:	f000 fd12 	bl	8001e68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001444:	2311      	movs	r3, #17
 8001446:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001448:	2302      	movs	r3, #2
 800144a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144c:	463b      	mov	r3, r7
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_ADC1_Init+0xb8>)
 8001452:	f001 fc25 	bl	8002ca0 <HAL_ADC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800145c:	f000 fd04 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200003dc 	.word	0x200003dc
 800146c:	40012000 	.word	0x40012000
 8001470:	10000012 	.word	0x10000012

08001474 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800147a:	463b      	mov	r3, r7
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <MX_ADC2_Init+0x98>)
 8001488:	4a21      	ldr	r2, [pc, #132]	; (8001510 <MX_ADC2_Init+0x9c>)
 800148a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <MX_ADC2_Init+0x98>)
 800148e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001492:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001494:	4b1d      	ldr	r3, [pc, #116]	; (800150c <MX_ADC2_Init+0x98>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <MX_ADC2_Init+0x98>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_ADC2_Init+0x98>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <MX_ADC2_Init+0x98>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_ADC2_Init+0x98>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_ADC2_Init+0x98>)
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <MX_ADC2_Init+0xa0>)
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_ADC2_Init+0x98>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_ADC2_Init+0x98>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_ADC2_Init+0x98>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_ADC2_Init+0x98>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_ADC2_Init+0x98>)
 80014d6:	f001 f8e7 	bl	80026a8 <HAL_ADC_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80014e0:	f000 fcc2 	bl	8001e68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80014ec:	2307      	movs	r3, #7
 80014ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014f0:	463b      	mov	r3, r7
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_ADC2_Init+0x98>)
 80014f6:	f001 fbd3 	bl	8002ca0 <HAL_ADC_ConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001500:	f000 fcb2 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000424 	.word	0x20000424
 8001510:	40012100 	.word	0x40012100
 8001514:	0f000001 	.word	0x0f000001

08001518 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_I2C1_Init+0x50>)
 800151e:	4a13      	ldr	r2, [pc, #76]	; (800156c <MX_I2C1_Init+0x54>)
 8001520:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_I2C1_Init+0x50>)
 8001524:	4a12      	ldr	r2, [pc, #72]	; (8001570 <MX_I2C1_Init+0x58>)
 8001526:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_I2C1_Init+0x50>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_I2C1_Init+0x50>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_I2C1_Init+0x50>)
 8001536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <MX_I2C1_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_I2C1_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <MX_I2C1_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_I2C1_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <MX_I2C1_Init+0x50>)
 8001556:	f002 fcb3 	bl	8003ec0 <HAL_I2C_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001560:	f000 fc82 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200004cc 	.word	0x200004cc
 800156c:	40005400 	.word	0x40005400
 8001570:	00061a80 	.word	0x00061a80

08001574 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b090      	sub	sp, #64	; 0x40
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800157a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800158e:	463b      	mov	r3, r7
 8001590:	2228      	movs	r2, #40	; 0x28
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f00d f8a4 	bl	800e6e2 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800159a:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <MX_RTC_Init+0x110>)
 800159c:	4a3a      	ldr	r2, [pc, #232]	; (8001688 <MX_RTC_Init+0x114>)
 800159e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015a0:	4b38      	ldr	r3, [pc, #224]	; (8001684 <MX_RTC_Init+0x110>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015a6:	4b37      	ldr	r3, [pc, #220]	; (8001684 <MX_RTC_Init+0x110>)
 80015a8:	227f      	movs	r2, #127	; 0x7f
 80015aa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015ac:	4b35      	ldr	r3, [pc, #212]	; (8001684 <MX_RTC_Init+0x110>)
 80015ae:	22ff      	movs	r2, #255	; 0xff
 80015b0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015b2:	4b34      	ldr	r3, [pc, #208]	; (8001684 <MX_RTC_Init+0x110>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015b8:	4b32      	ldr	r3, [pc, #200]	; (8001684 <MX_RTC_Init+0x110>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015be:	4b31      	ldr	r3, [pc, #196]	; (8001684 <MX_RTC_Init+0x110>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015c4:	482f      	ldr	r0, [pc, #188]	; (8001684 <MX_RTC_Init+0x110>)
 80015c6:	f005 ffeb 	bl	80075a0 <HAL_RTC_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80015d0:	f000 fc4a 	bl	8001e68 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 80015d4:	2311      	movs	r3, #17
 80015d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 42;
 80015da:	232a      	movs	r3, #42	; 0x2a
 80015dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 30;
 80015e0:	231e      	movs	r3, #30
 80015e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80015ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f2:	2200      	movs	r2, #0
 80015f4:	4619      	mov	r1, r3
 80015f6:	4823      	ldr	r0, [pc, #140]	; (8001684 <MX_RTC_Init+0x110>)
 80015f8:	f006 f848 	bl	800768c <HAL_RTC_SetTime>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001602:	f000 fc31 	bl	8001e68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001606:	2307      	movs	r3, #7
 8001608:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 800160c:	2311      	movs	r3, #17
 800160e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 10;
 8001612:	230a      	movs	r3, #10
 8001614:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 24;
 8001618:	2318      	movs	r3, #24
 800161a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800161e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	4817      	ldr	r0, [pc, #92]	; (8001684 <MX_RTC_Init+0x110>)
 8001628:	f006 f928 	bl	800787c <HAL_RTC_SetDate>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001632:	f000 fc19 	bl	8001e68 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800165a:	2301      	movs	r3, #1
 800165c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001666:	463b      	mov	r3, r7
 8001668:	2200      	movs	r2, #0
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_RTC_Init+0x110>)
 800166e:	f006 f9d8 	bl	8007a22 <HAL_RTC_SetAlarm>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001678:	f000 fbf6 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	3740      	adds	r7, #64	; 0x40
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000520 	.word	0x20000520
 8001688:	40002800 	.word	0x40002800

0800168c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_SPI2_Init+0x64>)
 8001692:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <MX_SPI2_Init+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_SPI2_Init+0x64>)
 8001698:	f44f 7282 	mov.w	r2, #260	; 0x104
 800169c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_SPI2_Init+0x64>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_SPI2_Init+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_SPI2_Init+0x64>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_SPI2_Init+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_SPI2_Init+0x64>)
 80016b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_SPI2_Init+0x64>)
 80016c0:	2208      	movs	r2, #8
 80016c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <MX_SPI2_Init+0x64>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_SPI2_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <MX_SPI2_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_SPI2_Init+0x64>)
 80016d8:	220a      	movs	r2, #10
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <MX_SPI2_Init+0x64>)
 80016de:	f006 fb87 	bl	8007df0 <HAL_SPI_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016e8:	f000 fbbe 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000540 	.word	0x20000540
 80016f4:	40003800 	.word	0x40003800

080016f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <MX_TIM3_Init+0x94>)
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <MX_TIM3_Init+0x98>)
 8001718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <MX_TIM3_Init+0x94>)
 800171c:	f240 3247 	movw	r2, #839	; 0x347
 8001720:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001722:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_TIM3_Init+0x94>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001728:	4b18      	ldr	r3, [pc, #96]	; (800178c <MX_TIM3_Init+0x94>)
 800172a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800172e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <MX_TIM3_Init+0x94>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <MX_TIM3_Init+0x94>)
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800173c:	4813      	ldr	r0, [pc, #76]	; (800178c <MX_TIM3_Init+0x94>)
 800173e:	f006 ff89 	bl	8008654 <HAL_TIM_Base_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001748:	f000 fb8e 	bl	8001e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001750:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	4619      	mov	r1, r3
 8001758:	480c      	ldr	r0, [pc, #48]	; (800178c <MX_TIM3_Init+0x94>)
 800175a:	f007 f943 	bl	80089e4 <HAL_TIM_ConfigClockSource>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001764:	f000 fb80 	bl	8001e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001768:	2320      	movs	r3, #32
 800176a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001770:	463b      	mov	r3, r7
 8001772:	4619      	mov	r1, r3
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_TIM3_Init+0x94>)
 8001776:	f007 fb5f 	bl	8008e38 <HAL_TIMEx_MasterConfigSynchronization>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001780:	f000 fb72 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000598 	.word	0x20000598
 8001790:	40000400 	.word	0x40000400

08001794 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_TIM11_Init+0x40>)
 800179a:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <MX_TIM11_Init+0x44>)
 800179c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <MX_TIM11_Init+0x40>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <MX_TIM11_Init+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <MX_TIM11_Init+0x40>)
 80017ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <MX_TIM11_Init+0x40>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_TIM11_Init+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_TIM11_Init+0x40>)
 80017c0:	f006 ff48 	bl	8008654 <HAL_TIM_Base_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80017ca:	f000 fb4d 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200005e0 	.word	0x200005e0
 80017d8:	40014800 	.word	0x40014800

080017dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <MX_USART2_UART_Init+0x50>)
 80017e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 80017e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 8001802:	220c      	movs	r2, #12
 8001804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 8001814:	f007 fba0 	bl	8008f58 <HAL_UART_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800181e:	f000 fb23 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000628 	.word	0x20000628
 800182c:	40004400 	.word	0x40004400

08001830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_DMA_Init+0x3c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <MX_DMA_Init+0x3c>)
 8001840:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_DMA_Init+0x3c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2101      	movs	r1, #1
 8001856:	2038      	movs	r0, #56	; 0x38
 8001858:	f001 fd8a 	bl	8003370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800185c:	2038      	movs	r0, #56	; 0x38
 800185e:	f001 fda3 	bl	80033a8 <HAL_NVIC_EnableIRQ>

}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800

08001870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b41      	ldr	r3, [pc, #260]	; (8001990 <MX_GPIO_Init+0x120>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a40      	ldr	r2, [pc, #256]	; (8001990 <MX_GPIO_Init+0x120>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <MX_GPIO_Init+0x120>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <MX_GPIO_Init+0x120>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a39      	ldr	r2, [pc, #228]	; (8001990 <MX_GPIO_Init+0x120>)
 80018ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b37      	ldr	r3, [pc, #220]	; (8001990 <MX_GPIO_Init+0x120>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	4b33      	ldr	r3, [pc, #204]	; (8001990 <MX_GPIO_Init+0x120>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a32      	ldr	r2, [pc, #200]	; (8001990 <MX_GPIO_Init+0x120>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <MX_GPIO_Init+0x120>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <MX_GPIO_Init+0x120>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a2b      	ldr	r2, [pc, #172]	; (8001990 <MX_GPIO_Init+0x120>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <MX_GPIO_Init+0x120>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2108      	movs	r1, #8
 80018fa:	4826      	ldr	r0, [pc, #152]	; (8001994 <MX_GPIO_Init+0x124>)
 80018fc:	f002 faae 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	2120      	movs	r1, #32
 8001904:	4824      	ldr	r0, [pc, #144]	; (8001998 <MX_GPIO_Init+0x128>)
 8001906:	f002 faa9 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800190a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001910:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001916:	2301      	movs	r3, #1
 8001918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	481c      	ldr	r0, [pc, #112]	; (8001994 <MX_GPIO_Init+0x124>)
 8001922:	f002 f8ef 	bl	8003b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001926:	2308      	movs	r3, #8
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	4815      	ldr	r0, [pc, #84]	; (8001994 <MX_GPIO_Init+0x124>)
 800193e:	f002 f8e1 	bl	8003b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001942:	2320      	movs	r3, #32
 8001944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	480f      	ldr	r0, [pc, #60]	; (8001998 <MX_GPIO_Init+0x128>)
 800195a:	f002 f8d3 	bl	8003b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : RCWL_Pin */
  GPIO_InitStruct.Pin = RCWL_Pin;
 800195e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001964:	2300      	movs	r3, #0
 8001966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RCWL_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	4809      	ldr	r0, [pc, #36]	; (8001998 <MX_GPIO_Init+0x128>)
 8001974:	f002 f8c6 	bl	8003b04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	2105      	movs	r1, #5
 800197c:	2028      	movs	r0, #40	; 0x28
 800197e:	f001 fcf7 	bl	8003370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001982:	2028      	movs	r0, #40	; 0x28
 8001984:	f001 fd10 	bl	80033a8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	; 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	40020800 	.word	0x40020800
 8001998:	40020000 	.word	0x40020000

0800199c <MX_FREERTOS_Init>:

/* USER CODE BEGIN 4 */
void MX_FREERTOS_Init(void){
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	vQueueAddToRegistry(MainQueue, "Main_Queue");
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_FREERTOS_Init+0x2c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4909      	ldr	r1, [pc, #36]	; (80019cc <MX_FREERTOS_Init+0x30>)
 80019a6:	4618      	mov	r0, r3
 80019a8:	f009 f8a2 	bl	800aaf0 <vQueueAddToRegistry>
	vQueueAddToRegistry(binarySemaphoreISR, "binary_semaphore_ISR");
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_FREERTOS_Init+0x34>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4908      	ldr	r1, [pc, #32]	; (80019d4 <MX_FREERTOS_Init+0x38>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f009 f89c 	bl	800aaf0 <vQueueAddToRegistry>
	vQueueAddToRegistry(MutexOne, "Mutex_One");
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <MX_FREERTOS_Init+0x3c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4907      	ldr	r1, [pc, #28]	; (80019dc <MX_FREERTOS_Init+0x40>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f009 f896 	bl	800aaf0 <vQueueAddToRegistry>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000688 	.word	0x20000688
 80019cc:	08010a14 	.word	0x08010a14
 80019d0:	20000690 	.word	0x20000690
 80019d4:	08010a20 	.word	0x08010a20
 80019d8:	2000068c 	.word	0x2000068c
 80019dc:	08010a38 	.word	0x08010a38

080019e0 <send_OLED>:


void send_OLED(char*string, uint8_t y){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	70fb      	strb	r3, [r7, #3]
		SSD1306_GotoXY (5,y); // goto 10, 10
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4619      	mov	r1, r3
 80019f2:	2005      	movs	r0, #5
 80019f4:	f00b fad4 	bl	800cfa0 <SSD1306_GotoXY>
		SSD1306_Puts(string, &Font_7x10, 1);
 80019f8:	2201      	movs	r2, #1
 80019fa:	4905      	ldr	r1, [pc, #20]	; (8001a10 <send_OLED+0x30>)
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f00b fb65 	bl	800d0cc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001a02:	f00b fa27 	bl	800ce54 <SSD1306_UpdateScreen>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000024 	.word	0x20000024

08001a14 <vUARTtask>:


void vUARTtask(void *pvParameters){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	uint16_t count=0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	81fb      	strh	r3, [r7, #14]
	while(1){
		count++;
 8001a20:	89fb      	ldrh	r3, [r7, #14]
 8001a22:	3301      	adds	r3, #1
 8001a24:	81fb      	strh	r3, [r7, #14]
		sprintf(buffer,"count is %d\n\r",count);
 8001a26:	89fb      	ldrh	r3, [r7, #14]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4906      	ldr	r1, [pc, #24]	; (8001a44 <vUARTtask+0x30>)
 8001a2c:	4806      	ldr	r0, [pc, #24]	; (8001a48 <vUARTtask+0x34>)
 8001a2e:	f00c fdf5 	bl	800e61c <siprintf>
		send_uart(buffer);
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <vUARTtask+0x34>)
 8001a34:	f7ff fb5c 	bl	80010f0 <send_uart>
		vTaskDelay(500);
 8001a38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a3c:	f009 fa74 	bl	800af28 <vTaskDelay>
		count++;
 8001a40:	e7ee      	b.n	8001a20 <vUARTtask+0xc>
 8001a42:	bf00      	nop
 8001a44:	08010a44 	.word	0x08010a44
 8001a48:	20000228 	.word	0x20000228

08001a4c <vSwitchtask>:
	}
}

void vSwitchtask(void *pvParameters){
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	6078      	str	r0, [r7, #4]
	while(1){
		if(xSemaphoreTake(binarySemaphoreISR, portMAX_DELAY)==pdTRUE){
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <vSwitchtask+0xa4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f008 fe13 	bl	800a688 <xQueueSemaphoreTake>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d1f5      	bne.n	8001a54 <vSwitchtask+0x8>
			if (!isButtonPressed) {
 8001a68:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <vSwitchtask+0xa8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d117      	bne.n	8001aa0 <vSwitchtask+0x54>
				pressStartTime = xTaskGetTickCount();
 8001a70:	f009 fbe4 	bl	800b23c <xTaskGetTickCount>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a20      	ldr	r2, [pc, #128]	; (8001af8 <vSwitchtask+0xac>)
 8001a78:	6013      	str	r3, [r2, #0]
				isButtonPressed = pdTRUE;
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <vSwitchtask+0xa8>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
				xTimerStart(buttonPressTimer, 0);
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <vSwitchtask+0xb0>)
 8001a82:	681c      	ldr	r4, [r3, #0]
 8001a84:	f009 fbda 	bl	800b23c <xTaskGetTickCount>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	2101      	movs	r1, #1
 8001a92:	4620      	mov	r0, r4
 8001a94:	f00a f9da 	bl	800be4c <xTimerGenericCommand>
				send_uart("Button Pressed\r\n");
 8001a98:	4819      	ldr	r0, [pc, #100]	; (8001b00 <vSwitchtask+0xb4>)
 8001a9a:	f7ff fb29 	bl	80010f0 <send_uart>
 8001a9e:	e7d9      	b.n	8001a54 <vSwitchtask+0x8>

				}
			else {
				pressEndTime = xTaskGetTickCount();
 8001aa0:	f009 fbcc 	bl	800b23c <xTaskGetTickCount>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <vSwitchtask+0xb8>)
 8001aa8:	6013      	str	r3, [r2, #0]
				isButtonPressed = pdFALSE;
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <vSwitchtask+0xa8>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
				xTimerStop(buttonPressTimer, 0);
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <vSwitchtask+0xb0>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	2200      	movs	r2, #0
 8001abc:	2103      	movs	r1, #3
 8001abe:	f00a f9c5 	bl	800be4c <xTimerGenericCommand>
				uint32_t pressDurationMs = (pressEndTime - pressStartTime) * portTICK_PERIOD_MS;
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <vSwitchtask+0xb8>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <vSwitchtask+0xac>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	60fb      	str	r3, [r7, #12]
				if (pressDurationMs < 1000) {
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ad4:	d203      	bcs.n	8001ade <vSwitchtask+0x92>
					send_uart("Help\r\n");
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <vSwitchtask+0xbc>)
 8001ad8:	f7ff fb0a 	bl	80010f0 <send_uart>
 8001adc:	e7ba      	b.n	8001a54 <vSwitchtask+0x8>
				}
				else if (pressDurationMs > 3000) {
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d9b5      	bls.n	8001a54 <vSwitchtask+0x8>
					send_uart("Nurse\r\n");
 8001ae8:	4808      	ldr	r0, [pc, #32]	; (8001b0c <vSwitchtask+0xc0>)
 8001aea:	f7ff fb01 	bl	80010f0 <send_uart>
		if(xSemaphoreTake(binarySemaphoreISR, portMAX_DELAY)==pdTRUE){
 8001aee:	e7b1      	b.n	8001a54 <vSwitchtask+0x8>
 8001af0:	20000690 	.word	0x20000690
 8001af4:	200009c0 	.word	0x200009c0
 8001af8:	200009b8 	.word	0x200009b8
 8001afc:	20000694 	.word	0x20000694
 8001b00:	08010a54 	.word	0x08010a54
 8001b04:	200009bc 	.word	0x200009bc
 8001b08:	08010a68 	.word	0x08010a68
 8001b0c:	08010a70 	.word	0x08010a70

08001b10 <vInternalTemptask>:
			}
		}
	}
}

void vInternalTemptask(void *pvParameters){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim3); // First get the timer running
 8001b18:	4816      	ldr	r0, [pc, #88]	; (8001b74 <vInternalTemptask+0x64>)
 8001b1a:	f006 fdeb 	bl	80086f4 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, ADC_SAMPLES * 2 * 2); // Now fire up the ADC DMA
 8001b1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001b22:	4915      	ldr	r1, [pc, #84]	; (8001b78 <vInternalTemptask+0x68>)
 8001b24:	4815      	ldr	r0, [pc, #84]	; (8001b7c <vInternalTemptask+0x6c>)
 8001b26:	f000 ff93 	bl	8002a50 <HAL_ADC_Start_DMA>
	while(1){
		sprintf(tempState,"Temp = %4.2f C",temp);// to get raw value call temp_avg variable
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <vInternalTemptask+0x70>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fd2a 	bl	8000588 <__aeabi_f2d>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4912      	ldr	r1, [pc, #72]	; (8001b84 <vInternalTemptask+0x74>)
 8001b3a:	4813      	ldr	r0, [pc, #76]	; (8001b88 <vInternalTemptask+0x78>)
 8001b3c:	f00c fd6e 	bl	800e61c <siprintf>
		if(xSemaphoreTake(MutexOne, portMAX_DELAY)==pdTRUE){
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <vInternalTemptask+0x7c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f008 fd9d 	bl	800a688 <xQueueSemaphoreTake>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d10a      	bne.n	8001b6a <vInternalTemptask+0x5a>
			send_OLED(tempState, 50);
 8001b54:	2132      	movs	r1, #50	; 0x32
 8001b56:	480c      	ldr	r0, [pc, #48]	; (8001b88 <vInternalTemptask+0x78>)
 8001b58:	f7ff ff42 	bl	80019e0 <send_OLED>
			xSemaphoreGive(MutexOne);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <vInternalTemptask+0x7c>)
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	2300      	movs	r3, #0
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	f008 fa89 	bl	800a07c <xQueueGenericSend>
		}
//		buffclear(tempState);
		vTaskDelay(20);
 8001b6a:	2014      	movs	r0, #20
 8001b6c:	f009 f9dc 	bl	800af28 <vTaskDelay>
		sprintf(tempState,"Temp = %4.2f C",temp);// to get raw value call temp_avg variable
 8001b70:	e7db      	b.n	8001b2a <vInternalTemptask+0x1a>
 8001b72:	bf00      	nop
 8001b74:	20000598 	.word	0x20000598
 8001b78:	20000698 	.word	0x20000698
 8001b7c:	200003dc 	.word	0x200003dc
 8001b80:	20000224 	.word	0x20000224
 8001b84:	08010a78 	.word	0x08010a78
 8001b88:	20000390 	.word	0x20000390
 8001b8c:	2000068c 	.word	0x2000068c

08001b90 <vRCWLtask>:
	}
}


void vRCWLtask(void *pvParameters){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	while(1){
		uint8_t rcwl = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001b98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b9c:	4813      	ldr	r0, [pc, #76]	; (8001bec <vRCWLtask+0x5c>)
 8001b9e:	f002 f945 	bl	8003e2c <HAL_GPIO_ReadPin>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	73fb      	strb	r3, [r7, #15]
		char *rcwl_state = (rcwl == 1) ? "HIGH" : "LOW";
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <vRCWLtask+0x20>
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <vRCWLtask+0x60>)
 8001bae:	e000      	b.n	8001bb2 <vRCWLtask+0x22>
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <vRCWLtask+0x64>)
 8001bb2:	60bb      	str	r3, [r7, #8]
		sprintf(motionState,"Motion is %s", rcwl_state);
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	4910      	ldr	r1, [pc, #64]	; (8001bf8 <vRCWLtask+0x68>)
 8001bb8:	4810      	ldr	r0, [pc, #64]	; (8001bfc <vRCWLtask+0x6c>)
 8001bba:	f00c fd2f 	bl	800e61c <siprintf>
		if(xSemaphoreTake(MutexOne, portMAX_DELAY)==pdTRUE){
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <vRCWLtask+0x70>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f008 fd5e 	bl	800a688 <xQueueSemaphoreTake>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d1e2      	bne.n	8001b98 <vRCWLtask+0x8>
			send_OLED(motionState, 30);
 8001bd2:	211e      	movs	r1, #30
 8001bd4:	4809      	ldr	r0, [pc, #36]	; (8001bfc <vRCWLtask+0x6c>)
 8001bd6:	f7ff ff03 	bl	80019e0 <send_OLED>
			xSemaphoreGive(MutexOne);
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <vRCWLtask+0x70>)
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	2300      	movs	r3, #0
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	f008 fa4a 	bl	800a07c <xQueueGenericSend>
	while(1){
 8001be8:	e7d6      	b.n	8001b98 <vRCWLtask+0x8>
 8001bea:	bf00      	nop
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	08010a88 	.word	0x08010a88
 8001bf4:	08010a90 	.word	0x08010a90
 8001bf8:	08010a94 	.word	0x08010a94
 8001bfc:	20000328 	.word	0x20000328
 8001c00:	2000068c 	.word	0x2000068c

08001c04 <vRTCtask>:
//		buffclear(motionState);
//		vTaskDelay(1);
	}
}

void vRTCtask(void *pvParameters){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0a2      	sub	sp, #136	; 0x88
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	6078      	str	r0, [r7, #4]
	while(1){
		char time[60];
		char date[60];
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4924      	ldr	r1, [pc, #144]	; (8001ca0 <vRTCtask+0x9c>)
 8001c10:	4824      	ldr	r0, [pc, #144]	; (8001ca4 <vRTCtask+0xa0>)
 8001c12:	f005 fdd5 	bl	80077c0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001c16:	2200      	movs	r2, #0
 8001c18:	4923      	ldr	r1, [pc, #140]	; (8001ca8 <vRTCtask+0xa4>)
 8001c1a:	4822      	ldr	r0, [pc, #136]	; (8001ca4 <vRTCtask+0xa0>)
 8001c1c:	f005 feb2 	bl	8007984 <HAL_RTC_GetDate>
		sprintf(date,"Date :%02d.%02d.%02d",sDate.Date, sDate.Month, sDate.Year);
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <vRTCtask+0xa4>)
 8001c22:	789b      	ldrb	r3, [r3, #2]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <vRTCtask+0xa4>)
 8001c28:	785b      	ldrb	r3, [r3, #1]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <vRTCtask+0xa4>)
 8001c2e:	78db      	ldrb	r3, [r3, #3]
 8001c30:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	460b      	mov	r3, r1
 8001c38:	491c      	ldr	r1, [pc, #112]	; (8001cac <vRTCtask+0xa8>)
 8001c3a:	f00c fcef 	bl	800e61c <siprintf>
		sprintf(time,"Time :%02d.%02d.%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8001c3e:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <vRTCtask+0x9c>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <vRTCtask+0x9c>)
 8001c46:	785b      	ldrb	r3, [r3, #1]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <vRTCtask+0x9c>)
 8001c4c:	789b      	ldrb	r3, [r3, #2]
 8001c4e:	f107 0008 	add.w	r0, r7, #8
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	460b      	mov	r3, r1
 8001c56:	4916      	ldr	r1, [pc, #88]	; (8001cb0 <vRTCtask+0xac>)
 8001c58:	f00c fce0 	bl	800e61c <siprintf>
		if(xSemaphoreTake(MutexOne, portMAX_DELAY)==pdTRUE){
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <vRTCtask+0xb0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	4618      	mov	r0, r3
 8001c66:	f008 fd0f 	bl	800a688 <xQueueSemaphoreTake>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d112      	bne.n	8001c96 <vRTCtask+0x92>
			send_OLED(date, 10);
 8001c70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c74:	210a      	movs	r1, #10
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff feb2 	bl	80019e0 <send_OLED>
			send_OLED(time, 20);
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	2114      	movs	r1, #20
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff feac 	bl	80019e0 <send_OLED>
			xSemaphoreGive(MutexOne);
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <vRTCtask+0xb0>)
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	f008 f9f3 	bl	800a07c <xQueueGenericSend>
		}
//		buffclear(date);
//		buffclear(time);
		vTaskDelay(50);
 8001c96:	2032      	movs	r0, #50	; 0x32
 8001c98:	f009 f946 	bl	800af28 <vTaskDelay>
	while(1){
 8001c9c:	e7b6      	b.n	8001c0c <vRTCtask+0x8>
 8001c9e:	bf00      	nop
 8001ca0:	200003c4 	.word	0x200003c4
 8001ca4:	20000520 	.word	0x20000520
 8001ca8:	200003d8 	.word	0x200003d8
 8001cac:	08010aa4 	.word	0x08010aa4
 8001cb0:	08010abc 	.word	0x08010abc
 8001cb4:	2000068c 	.word	0x2000068c

08001cb8 <vMQ135task>:
	}
}

void vMQ135task(void *pvParameters){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_ADC_Start(&hadc2);
 8001cc0:	4816      	ldr	r0, [pc, #88]	; (8001d1c <vMQ135task+0x64>)
 8001cc2:	f000 fd35 	bl	8002730 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8001cca:	4814      	ldr	r0, [pc, #80]	; (8001d1c <vMQ135task+0x64>)
 8001ccc:	f000 fe35 	bl	800293a <HAL_ADC_PollForConversion>
		long unsigned int adc_value= HAL_ADC_GetValue(&hadc2);
 8001cd0:	4812      	ldr	r0, [pc, #72]	; (8001d1c <vMQ135task+0x64>)
 8001cd2:	f000 ffcd 	bl	8002c70 <HAL_ADC_GetValue>
 8001cd6:	60f8      	str	r0, [r7, #12]
		HAL_ADC_Stop(&hadc2);
 8001cd8:	4810      	ldr	r0, [pc, #64]	; (8001d1c <vMQ135task+0x64>)
 8001cda:	f000 fdfb 	bl	80028d4 <HAL_ADC_Stop>
		sprintf(adcVal,"ADC Value is %lu",adc_value);
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	490f      	ldr	r1, [pc, #60]	; (8001d20 <vMQ135task+0x68>)
 8001ce2:	4810      	ldr	r0, [pc, #64]	; (8001d24 <vMQ135task+0x6c>)
 8001ce4:	f00c fc9a 	bl	800e61c <siprintf>
		if(xSemaphoreTake(MutexOne, portMAX_DELAY)==pdTRUE){
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <vMQ135task+0x70>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f008 fcc9 	bl	800a688 <xQueueSemaphoreTake>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d10a      	bne.n	8001d12 <vMQ135task+0x5a>
			send_OLED(adcVal, 40);
 8001cfc:	2128      	movs	r1, #40	; 0x28
 8001cfe:	4809      	ldr	r0, [pc, #36]	; (8001d24 <vMQ135task+0x6c>)
 8001d00:	f7ff fe6e 	bl	80019e0 <send_OLED>
			xSemaphoreGive(MutexOne);
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <vMQ135task+0x70>)
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	f008 f9b5 	bl	800a07c <xQueueGenericSend>
		}
//		buffclear(adcVal);
		vTaskDelay(5);
 8001d12:	2005      	movs	r0, #5
 8001d14:	f009 f908 	bl	800af28 <vTaskDelay>
	while(1){
 8001d18:	e7d2      	b.n	8001cc0 <vMQ135task+0x8>
 8001d1a:	bf00      	nop
 8001d1c:	20000424 	.word	0x20000424
 8001d20:	08010ad4 	.word	0x08010ad4
 8001d24:	2000035c 	.word	0x2000035c
 8001d28:	2000068c 	.word	0x2000068c

08001d2c <vTimerCallback>:
//		count1++;
//		vTaskDelay(500);
//	}
//}

void vTimerCallback(TimerHandle_t xTimer) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
    // Handle cases where the button is held but not released
    if (isButtonPressed) {
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <vTimerCallback+0x44>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d015      	beq.n	8001d68 <vTimerCallback+0x3c>
        pressEndTime = xTaskGetTickCount();
 8001d3c:	f009 fa7e 	bl	800b23c <xTaskGetTickCount>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <vTimerCallback+0x48>)
 8001d44:	6013      	str	r3, [r2, #0]
        uint32_t pressDurationMs = (pressEndTime - pressStartTime) * portTICK_PERIOD_MS;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <vTimerCallback+0x48>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <vTimerCallback+0x4c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	60fb      	str	r3, [r7, #12]

        if (pressDurationMs > 3000) {
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d902      	bls.n	8001d62 <vTimerCallback+0x36>
            send_uart("Help Resolved by Nurse\r\n");
 8001d5c:	4807      	ldr	r0, [pc, #28]	; (8001d7c <vTimerCallback+0x50>)
 8001d5e:	f7ff f9c7 	bl	80010f0 <send_uart>
        }
        isButtonPressed = pdFALSE;
 8001d62:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <vTimerCallback+0x44>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
    }
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200009c0 	.word	0x200009c0
 8001d74:	200009bc 	.word	0x200009bc
 8001d78:	200009b8 	.word	0x200009b8
 8001d7c:	08010ae8 	.word	0x08010ae8

08001d80 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
    process_adc_buffer(&adc_buffer[0]); // We're half way through the buffer, so can safely deal with first half
 8001d88:	4803      	ldr	r0, [pc, #12]	; (8001d98 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001d8a:	f7ff f8f1 	bl	8000f70 <process_adc_buffer>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000698 	.word	0x20000698

08001d9c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
    process_adc_buffer(&adc_buffer[ADC_SAMPLES * 2]); // We're all the way through the buffer, so deal with second half
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <HAL_ADC_ConvCpltCallback+0x18>)
 8001da6:	f7ff f8e3 	bl	8000f70 <process_adc_buffer>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000828 	.word	0x20000828

08001db8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken;
//	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
//	send_uart("button pressed");
	xHigherPriorityTaskWoken = pdFALSE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR( binarySemaphoreISR, &xHigherPriorityTaskWoken );
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f107 020c 	add.w	r2, r7, #12
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f008 faec 	bl	800a3ae <xQueueGiveFromISR>
//	vTaskNotifyGiveFromISR(Switch_Handle, &xHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <HAL_GPIO_EXTI_Callback+0x34>
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x40>)
 8001dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	f3bf 8f6f 	isb	sy
}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000690 	.word	0x20000690
 8001df8:	e000ed04 	.word	0xe000ed04

08001dfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e04:	2001      	movs	r0, #1
 8001e06:	f007 fec5 	bl	8009b94 <osDelay>
 8001e0a:	e7fb      	b.n	8001e04 <StartDefaultTask+0x8>

08001e0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM3) {
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d111      	bne.n	8001e42 <HAL_TIM_PeriodElapsedCallback+0x36>
		if (tim_cnt % 500 == 0)
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001e24:	fba3 1302 	umull	r1, r3, r3, r2
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d104      	bne.n	8001e42 <HAL_TIM_PeriodElapsedCallback+0x36>
//				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		tim_cnt++;
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	4a07      	ldr	r2, [pc, #28]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e40:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_TIM_PeriodElapsedCallback+0x44>
    HAL_IncTick();
 8001e4c:	f000 fbe8 	bl	8002620 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40000400 	.word	0x40000400
 8001e5c:	20000214 	.word	0x20000214
 8001e60:	10624dd3 	.word	0x10624dd3
 8001e64:	40001000 	.word	0x40001000

08001e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e6c:	b672      	cpsid	i
}
 8001e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <Error_Handler+0x8>
	...

08001e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_MspInit+0x54>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	4a11      	ldr	r2, [pc, #68]	; (8001ec8 <HAL_MspInit+0x54>)
 8001e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e88:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_MspInit+0x54>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_MspInit+0x54>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <HAL_MspInit+0x54>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_MspInit+0x54>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	210f      	movs	r1, #15
 8001eb6:	f06f 0001 	mvn.w	r0, #1
 8001eba:	f001 fa59 	bl	8003370 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800

08001ecc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a39      	ldr	r2, [pc, #228]	; (8001fd0 <HAL_ADC_MspInit+0x104>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d13f      	bne.n	8001f6e <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <HAL_ADC_MspInit+0x108>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	4a37      	ldr	r2, [pc, #220]	; (8001fd4 <HAL_ADC_MspInit+0x108>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efc:	6453      	str	r3, [r2, #68]	; 0x44
 8001efe:	4b35      	ldr	r3, [pc, #212]	; (8001fd4 <HAL_ADC_MspInit+0x108>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f0a:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <HAL_ADC_MspInit+0x10c>)
 8001f0c:	4a33      	ldr	r2, [pc, #204]	; (8001fdc <HAL_ADC_MspInit+0x110>)
 8001f0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f10:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_ADC_MspInit+0x10c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f16:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <HAL_ADC_MspInit+0x10c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <HAL_ADC_MspInit+0x10c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f22:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_ADC_MspInit+0x10c>)
 8001f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f2a:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <HAL_ADC_MspInit+0x10c>)
 8001f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_ADC_MspInit+0x10c>)
 8001f34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f3a:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <HAL_ADC_MspInit+0x10c>)
 8001f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f40:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f42:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <HAL_ADC_MspInit+0x10c>)
 8001f44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f48:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f4a:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <HAL_ADC_MspInit+0x10c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f50:	4821      	ldr	r0, [pc, #132]	; (8001fd8 <HAL_ADC_MspInit+0x10c>)
 8001f52:	f001 fa37 	bl	80033c4 <HAL_DMA_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001f5c:	f7ff ff84 	bl	8001e68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <HAL_ADC_MspInit+0x10c>)
 8001f64:	639a      	str	r2, [r3, #56]	; 0x38
 8001f66:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <HAL_ADC_MspInit+0x10c>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f6c:	e02c      	b.n	8001fc8 <HAL_ADC_MspInit+0xfc>
  else if(hadc->Instance==ADC2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1b      	ldr	r2, [pc, #108]	; (8001fe0 <HAL_ADC_MspInit+0x114>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d127      	bne.n	8001fc8 <HAL_ADC_MspInit+0xfc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_ADC_MspInit+0x108>)
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f80:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <HAL_ADC_MspInit+0x108>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f86:	6453      	str	r3, [r2, #68]	; 0x44
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_ADC_MspInit+0x108>)
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_ADC_MspInit+0x108>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <HAL_ADC_MspInit+0x108>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_ADC_MspInit+0x108>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MQ135_Pin;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MQ135_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4808      	ldr	r0, [pc, #32]	; (8001fe4 <HAL_ADC_MspInit+0x118>)
 8001fc4:	f001 fd9e 	bl	8003b04 <HAL_GPIO_Init>
}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40012000 	.word	0x40012000
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	2000046c 	.word	0x2000046c
 8001fdc:	40026410 	.word	0x40026410
 8001fe0:	40012100 	.word	0x40012100
 8001fe4:	40020000 	.word	0x40020000

08001fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a21      	ldr	r2, [pc, #132]	; (800208c <HAL_I2C_MspInit+0xa4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d13c      	bne.n	8002084 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_I2C_MspInit+0xa8>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a1f      	ldr	r2, [pc, #124]	; (8002090 <HAL_I2C_MspInit+0xa8>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_I2C_MspInit+0xa8>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002026:	f44f 7310 	mov.w	r3, #576	; 0x240
 800202a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202c:	2312      	movs	r3, #18
 800202e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002038:	2304      	movs	r3, #4
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4619      	mov	r1, r3
 8002042:	4814      	ldr	r0, [pc, #80]	; (8002094 <HAL_I2C_MspInit+0xac>)
 8002044:	f001 fd5e 	bl	8003b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_I2C_MspInit+0xa8>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4a0f      	ldr	r2, [pc, #60]	; (8002090 <HAL_I2C_MspInit+0xa8>)
 8002052:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002056:	6413      	str	r3, [r2, #64]	; 0x40
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_I2C_MspInit+0xa8>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2105      	movs	r1, #5
 8002068:	201f      	movs	r0, #31
 800206a:	f001 f981 	bl	8003370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800206e:	201f      	movs	r0, #31
 8002070:	f001 f99a 	bl	80033a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	2105      	movs	r1, #5
 8002078:	2020      	movs	r0, #32
 800207a:	f001 f979 	bl	8003370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800207e:	2020      	movs	r0, #32
 8002080:	f001 f992 	bl	80033a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002084:	bf00      	nop
 8002086:	3728      	adds	r7, #40	; 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40005400 	.word	0x40005400
 8002090:	40023800 	.word	0x40023800
 8002094:	40020400 	.word	0x40020400

08002098 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b09a      	sub	sp, #104	; 0x68
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	225c      	movs	r2, #92	; 0x5c
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f00c fb1a 	bl	800e6e2 <memset>
  if(hrtc->Instance==RTC)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <HAL_RTC_MspInit+0x4c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d111      	bne.n	80020dc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020b8:	2320      	movs	r3, #32
 80020ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	4618      	mov	r0, r3
 80020c8:	f004 fa72 	bl	80065b0 <HAL_RCCEx_PeriphCLKConfig>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80020d2:	f7ff fec9 	bl	8001e68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <HAL_RTC_MspInit+0x50>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020dc:	bf00      	nop
 80020de:	3768      	adds	r7, #104	; 0x68
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40002800 	.word	0x40002800
 80020e8:	42470e3c 	.word	0x42470e3c

080020ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a30      	ldr	r2, [pc, #192]	; (80021cc <HAL_SPI_MspInit+0xe0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d15a      	bne.n	80021c4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <HAL_SPI_MspInit+0xe4>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4a2e      	ldr	r2, [pc, #184]	; (80021d0 <HAL_SPI_MspInit+0xe4>)
 8002118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211c:	6413      	str	r3, [r2, #64]	; 0x40
 800211e:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <HAL_SPI_MspInit+0xe4>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <HAL_SPI_MspInit+0xe4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <HAL_SPI_MspInit+0xe4>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <HAL_SPI_MspInit+0xe4>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_SPI_MspInit+0xe4>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a20      	ldr	r2, [pc, #128]	; (80021d0 <HAL_SPI_MspInit+0xe4>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_SPI_MspInit+0xe4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002162:	2302      	movs	r3, #2
 8002164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002172:	2307      	movs	r3, #7
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	4619      	mov	r1, r3
 800217c:	4815      	ldr	r0, [pc, #84]	; (80021d4 <HAL_SPI_MspInit+0xe8>)
 800217e:	f001 fcc1 	bl	8003b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002182:	2304      	movs	r3, #4
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218e:	2303      	movs	r3, #3
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002192:	2305      	movs	r3, #5
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	480d      	ldr	r0, [pc, #52]	; (80021d4 <HAL_SPI_MspInit+0xe8>)
 800219e:	f001 fcb1 	bl	8003b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021b4:	2305      	movs	r3, #5
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	4806      	ldr	r0, [pc, #24]	; (80021d8 <HAL_SPI_MspInit+0xec>)
 80021c0:	f001 fca0 	bl	8003b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021c4:	bf00      	nop
 80021c6:	3728      	adds	r7, #40	; 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40003800 	.word	0x40003800
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40020400 	.word	0x40020400

080021dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a18      	ldr	r2, [pc, #96]	; (800224c <HAL_TIM_Base_MspInit+0x70>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d10e      	bne.n	800220c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_TIM_Base_MspInit+0x74>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a16      	ldr	r2, [pc, #88]	; (8002250 <HAL_TIM_Base_MspInit+0x74>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_TIM_Base_MspInit+0x74>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800220a:	e01a      	b.n	8002242 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a10      	ldr	r2, [pc, #64]	; (8002254 <HAL_TIM_Base_MspInit+0x78>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d115      	bne.n	8002242 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_TIM_Base_MspInit+0x74>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <HAL_TIM_Base_MspInit+0x74>)
 8002220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002224:	6453      	str	r3, [r2, #68]	; 0x44
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_TIM_Base_MspInit+0x74>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2105      	movs	r1, #5
 8002236:	201a      	movs	r0, #26
 8002238:	f001 f89a 	bl	8003370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800223c:	201a      	movs	r0, #26
 800223e:	f001 f8b3 	bl	80033a8 <HAL_NVIC_EnableIRQ>
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40000400 	.word	0x40000400
 8002250:	40023800 	.word	0x40023800
 8002254:	40014800 	.word	0x40014800

08002258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a19      	ldr	r2, [pc, #100]	; (80022dc <HAL_UART_MspInit+0x84>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d12b      	bne.n	80022d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <HAL_UART_MspInit+0x88>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <HAL_UART_MspInit+0x88>)
 8002284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_UART_MspInit+0x88>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_UART_MspInit+0x88>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <HAL_UART_MspInit+0x88>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <HAL_UART_MspInit+0x88>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 80022b2:	230c      	movs	r3, #12
 80022b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022be:	2303      	movs	r3, #3
 80022c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022c2:	2307      	movs	r3, #7
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4619      	mov	r1, r3
 80022cc:	4805      	ldr	r0, [pc, #20]	; (80022e4 <HAL_UART_MspInit+0x8c>)
 80022ce:	f001 fc19 	bl	8003b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022d2:	bf00      	nop
 80022d4:	3728      	adds	r7, #40	; 0x28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40004400 	.word	0x40004400
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40020000 	.word	0x40020000

080022e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08e      	sub	sp, #56	; 0x38
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	4b33      	ldr	r3, [pc, #204]	; (80023cc <HAL_InitTick+0xe4>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	4a32      	ldr	r2, [pc, #200]	; (80023cc <HAL_InitTick+0xe4>)
 8002302:	f043 0310 	orr.w	r3, r3, #16
 8002306:	6413      	str	r3, [r2, #64]	; 0x40
 8002308:	4b30      	ldr	r3, [pc, #192]	; (80023cc <HAL_InitTick+0xe4>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002314:	f107 0210 	add.w	r2, r7, #16
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f004 f914 	bl	800654c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d103      	bne.n	8002336 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800232e:	f004 f8e5 	bl	80064fc <HAL_RCC_GetPCLK1Freq>
 8002332:	6378      	str	r0, [r7, #52]	; 0x34
 8002334:	e004      	b.n	8002340 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002336:	f004 f8e1 	bl	80064fc <HAL_RCC_GetPCLK1Freq>
 800233a:	4603      	mov	r3, r0
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002342:	4a23      	ldr	r2, [pc, #140]	; (80023d0 <HAL_InitTick+0xe8>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	0c9b      	lsrs	r3, r3, #18
 800234a:	3b01      	subs	r3, #1
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800234e:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <HAL_InitTick+0xec>)
 8002350:	4a21      	ldr	r2, [pc, #132]	; (80023d8 <HAL_InitTick+0xf0>)
 8002352:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <HAL_InitTick+0xec>)
 8002356:	f240 32e7 	movw	r2, #999	; 0x3e7
 800235a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800235c:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <HAL_InitTick+0xec>)
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002362:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <HAL_InitTick+0xec>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002368:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <HAL_InitTick+0xec>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_InitTick+0xec>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002374:	4817      	ldr	r0, [pc, #92]	; (80023d4 <HAL_InitTick+0xec>)
 8002376:	f006 f96d 	bl	8008654 <HAL_TIM_Base_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002380:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002384:	2b00      	cmp	r3, #0
 8002386:	d11b      	bne.n	80023c0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002388:	4812      	ldr	r0, [pc, #72]	; (80023d4 <HAL_InitTick+0xec>)
 800238a:	f006 f9b3 	bl	80086f4 <HAL_TIM_Base_Start_IT>
 800238e:	4603      	mov	r3, r0
 8002390:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002394:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002398:	2b00      	cmp	r3, #0
 800239a:	d111      	bne.n	80023c0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800239c:	2036      	movs	r0, #54	; 0x36
 800239e:	f001 f803 	bl	80033a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b0f      	cmp	r3, #15
 80023a6:	d808      	bhi.n	80023ba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80023a8:	2200      	movs	r2, #0
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	2036      	movs	r0, #54	; 0x36
 80023ae:	f000 ffdf 	bl	8003370 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_InitTick+0xf4>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	e002      	b.n	80023c0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80023c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3738      	adds	r7, #56	; 0x38
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40023800 	.word	0x40023800
 80023d0:	431bde83 	.word	0x431bde83
 80023d4:	200009c4 	.word	0x200009c4
 80023d8:	40001000 	.word	0x40001000
 80023dc:	20000004 	.word	0x20000004

080023e0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <SDTimer_Handler+0x40>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d006      	beq.n	80023fc <SDTimer_Handler+0x1c>
    Timer1--;
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <SDTimer_Handler+0x40>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <SDTimer_Handler+0x40>)
 80023fa:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <SDTimer_Handler+0x44>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <SDTimer_Handler+0x34>
    Timer2--;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <SDTimer_Handler+0x44>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <SDTimer_Handler+0x44>)
 8002412:	701a      	strb	r2, [r3, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000a11 	.word	0x20000a11
 8002424:	20000a12 	.word	0x20000a12

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800242c:	e7fe      	b.n	800242c <NMI_Handler+0x4>

0800242e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <MemManage_Handler+0x4>

0800243a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <UsageFault_Handler+0x4>

08002446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002458:	4804      	ldr	r0, [pc, #16]	; (800246c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800245a:	f006 f9bb 	bl	80087d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	3301      	adds	r3, #1
 8002464:	4a02      	ldr	r2, [pc, #8]	; (8002470 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8002466:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}
 800246c:	200005e0 	.word	0x200005e0
 8002470:	20000a0c 	.word	0x20000a0c

08002474 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <I2C1_EV_IRQHandler+0x10>)
 800247a:	f002 f891 	bl	80045a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200004cc 	.word	0x200004cc

08002488 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <I2C1_ER_IRQHandler+0x10>)
 800248e:	f002 f9da 	bl	8004846 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200004cc 	.word	0x200004cc

0800249c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80024a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024a4:	f001 fcf4 	bl	8003e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	 FatFsCnt++;
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <TIM6_DAC_IRQHandler+0x30>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <TIM6_DAC_IRQHandler+0x30>)
 80024bc:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80024be:	4b07      	ldr	r3, [pc, #28]	; (80024dc <TIM6_DAC_IRQHandler+0x30>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b09      	cmp	r3, #9
 80024c6:	d904      	bls.n	80024d2 <TIM6_DAC_IRQHandler+0x26>
	  {
	    FatFsCnt = 0;
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <TIM6_DAC_IRQHandler+0x30>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80024ce:	f7ff ff87 	bl	80023e0 <SDTimer_Handler>
	  }

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024d2:	4803      	ldr	r0, [pc, #12]	; (80024e0 <TIM6_DAC_IRQHandler+0x34>)
 80024d4:	f006 f97e 	bl	80087d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000a10 	.word	0x20000a10
 80024e0:	200009c4 	.word	0x200009c4

080024e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <DMA2_Stream0_IRQHandler+0x10>)
 80024ea:	f001 f893 	bl	8003614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000046c 	.word	0x2000046c

080024f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002500:	4a14      	ldr	r2, [pc, #80]	; (8002554 <_sbrk+0x5c>)
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <_sbrk+0x60>)
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <_sbrk+0x64>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <_sbrk+0x64>)
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <_sbrk+0x68>)
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	429a      	cmp	r2, r3
 8002526:	d207      	bcs.n	8002538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002528:	f00c f984 	bl	800e834 <__errno>
 800252c:	4603      	mov	r3, r0
 800252e:	220c      	movs	r2, #12
 8002530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
 8002536:	e009      	b.n	800254c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <_sbrk+0x64>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	4a05      	ldr	r2, [pc, #20]	; (800255c <_sbrk+0x64>)
 8002548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800254a:	68fb      	ldr	r3, [r7, #12]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20020000 	.word	0x20020000
 8002558:	00000800 	.word	0x00000800
 800255c:	20000a14 	.word	0x20000a14
 8002560:	20005988 	.word	0x20005988

08002564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <SystemInit+0x20>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	4a05      	ldr	r2, [pc, #20]	; (8002584 <SystemInit+0x20>)
 8002570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800258c:	480d      	ldr	r0, [pc, #52]	; (80025c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800258e:	490e      	ldr	r1, [pc, #56]	; (80025c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002590:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002594:	e002      	b.n	800259c <LoopCopyDataInit>

08002596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259a:	3304      	adds	r3, #4

0800259c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800259c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a0:	d3f9      	bcc.n	8002596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a2:	4a0b      	ldr	r2, [pc, #44]	; (80025d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025a4:	4c0b      	ldr	r4, [pc, #44]	; (80025d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a8:	e001      	b.n	80025ae <LoopFillZerobss>

080025aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ac:	3204      	adds	r2, #4

080025ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b0:	d3fb      	bcc.n	80025aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025b2:	f7ff ffd7 	bl	8002564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025b6:	f00c f943 	bl	800e840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ba:	f7fe fdb3 	bl	8001124 <main>
  bx  lr    
 80025be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80025cc:	08011674 	.word	0x08011674
  ldr r2, =_sbss
 80025d0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80025d4:	20005984 	.word	0x20005984

080025d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d8:	e7fe      	b.n	80025d8 <ADC_IRQHandler>
	...

080025dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <HAL_Init+0x40>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0d      	ldr	r2, [pc, #52]	; (800261c <HAL_Init+0x40>)
 80025e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_Init+0x40>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0a      	ldr	r2, [pc, #40]	; (800261c <HAL_Init+0x40>)
 80025f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_Init+0x40>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a07      	ldr	r2, [pc, #28]	; (800261c <HAL_Init+0x40>)
 80025fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002604:	2003      	movs	r0, #3
 8002606:	f000 fea8 	bl	800335a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800260a:	200f      	movs	r0, #15
 800260c:	f7ff fe6c 	bl	80022e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002610:	f7ff fc30 	bl	8001e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023c00 	.word	0x40023c00

08002620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_IncTick+0x20>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_IncTick+0x24>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4413      	add	r3, r2
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <HAL_IncTick+0x24>)
 8002632:	6013      	str	r3, [r2, #0]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000008 	.word	0x20000008
 8002644:	20000a18 	.word	0x20000a18

08002648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return uwTick;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_GetTick+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000a18 	.word	0x20000a18

08002660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff ffee 	bl	8002648 <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d005      	beq.n	8002686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_Delay+0x44>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002686:	bf00      	nop
 8002688:	f7ff ffde 	bl	8002648 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	429a      	cmp	r2, r3
 8002696:	d8f7      	bhi.n	8002688 <HAL_Delay+0x28>
  {
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000008 	.word	0x20000008

080026a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e033      	b.n	8002726 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff fc00 	bl	8001ecc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d118      	bne.n	8002718 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	f043 0202 	orr.w	r2, r3, #2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fc02 	bl	8002f04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
 8002716:	e001      	b.n	800271c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_ADC_Start+0x1a>
 8002746:	2302      	movs	r3, #2
 8002748:	e0b2      	b.n	80028b0 <HAL_ADC_Start+0x180>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b01      	cmp	r3, #1
 800275e:	d018      	beq.n	8002792 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002770:	4b52      	ldr	r3, [pc, #328]	; (80028bc <HAL_ADC_Start+0x18c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a52      	ldr	r2, [pc, #328]	; (80028c0 <HAL_ADC_Start+0x190>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	0c9a      	lsrs	r2, r3, #18
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002784:	e002      	b.n	800278c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	3b01      	subs	r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f9      	bne.n	8002786 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d17a      	bne.n	8002896 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d007      	beq.n	80027d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027de:	d106      	bne.n	80027ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f023 0206 	bic.w	r2, r3, #6
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	645a      	str	r2, [r3, #68]	; 0x44
 80027ec:	e002      	b.n	80027f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027fc:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <HAL_ADC_Start+0x194>)
 80027fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002808:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2b00      	cmp	r3, #0
 8002814:	d12a      	bne.n	800286c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a2b      	ldr	r2, [pc, #172]	; (80028c8 <HAL_ADC_Start+0x198>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d015      	beq.n	800284c <HAL_ADC_Start+0x11c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a29      	ldr	r2, [pc, #164]	; (80028cc <HAL_ADC_Start+0x19c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d105      	bne.n	8002836 <HAL_ADC_Start+0x106>
 800282a:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <HAL_ADC_Start+0x194>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a25      	ldr	r2, [pc, #148]	; (80028d0 <HAL_ADC_Start+0x1a0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d136      	bne.n	80028ae <HAL_ADC_Start+0x17e>
 8002840:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_ADC_Start+0x194>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	d130      	bne.n	80028ae <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d129      	bne.n	80028ae <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	e020      	b.n	80028ae <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a15      	ldr	r2, [pc, #84]	; (80028c8 <HAL_ADC_Start+0x198>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d11b      	bne.n	80028ae <HAL_ADC_Start+0x17e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d114      	bne.n	80028ae <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	e00b      	b.n	80028ae <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f043 0210 	orr.w	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f043 0201 	orr.w	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	20000000 	.word	0x20000000
 80028c0:	431bde83 	.word	0x431bde83
 80028c4:	40012300 	.word	0x40012300
 80028c8:	40012000 	.word	0x40012000
 80028cc:	40012100 	.word	0x40012100
 80028d0:	40012200 	.word	0x40012200

080028d4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_Stop+0x16>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e021      	b.n	800292e <HAL_ADC_Stop+0x5a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	f043 0201 	orr.w	r2, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002956:	d113      	bne.n	8002980 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002966:	d10b      	bne.n	8002980 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e063      	b.n	8002a48 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002980:	f7ff fe62 	bl	8002648 <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002986:	e021      	b.n	80029cc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298e:	d01d      	beq.n	80029cc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <HAL_ADC_PollForConversion+0x6c>
 8002996:	f7ff fe57 	bl	8002648 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d212      	bcs.n	80029cc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d00b      	beq.n	80029cc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f043 0204 	orr.w	r2, r3, #4
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e03d      	b.n	8002a48 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d1d6      	bne.n	8002988 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f06f 0212 	mvn.w	r2, #18
 80029e2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d123      	bne.n	8002a46 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d11f      	bne.n	8002a46 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d111      	bne.n	8002a46 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d105      	bne.n	8002a46 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_Start_DMA+0x1e>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e0e9      	b.n	8002c42 <HAL_ADC_Start_DMA+0x1f2>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d018      	beq.n	8002ab6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a94:	4b6d      	ldr	r3, [pc, #436]	; (8002c4c <HAL_ADC_Start_DMA+0x1fc>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6d      	ldr	r2, [pc, #436]	; (8002c50 <HAL_ADC_Start_DMA+0x200>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0c9a      	lsrs	r2, r3, #18
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002aa8:	e002      	b.n	8002ab0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f9      	bne.n	8002aaa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac4:	d107      	bne.n	8002ad6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ad4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	f040 80a1 	bne.w	8002c28 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b24:	d106      	bne.n	8002b34 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f023 0206 	bic.w	r2, r3, #6
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
 8002b32:	e002      	b.n	8002b3a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b42:	4b44      	ldr	r3, [pc, #272]	; (8002c54 <HAL_ADC_Start_DMA+0x204>)
 8002b44:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	4a43      	ldr	r2, [pc, #268]	; (8002c58 <HAL_ADC_Start_DMA+0x208>)
 8002b4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	4a42      	ldr	r2, [pc, #264]	; (8002c5c <HAL_ADC_Start_DMA+0x20c>)
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	4a41      	ldr	r2, [pc, #260]	; (8002c60 <HAL_ADC_Start_DMA+0x210>)
 8002b5c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b66:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b76:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b86:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	334c      	adds	r3, #76	; 0x4c
 8002b92:	4619      	mov	r1, r3
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f000 fcc2 	bl	8003520 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d12a      	bne.n	8002bfe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a2d      	ldr	r2, [pc, #180]	; (8002c64 <HAL_ADC_Start_DMA+0x214>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d015      	beq.n	8002bde <HAL_ADC_Start_DMA+0x18e>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2c      	ldr	r2, [pc, #176]	; (8002c68 <HAL_ADC_Start_DMA+0x218>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d105      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0x178>
 8002bbc:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <HAL_ADC_Start_DMA+0x204>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a27      	ldr	r2, [pc, #156]	; (8002c6c <HAL_ADC_Start_DMA+0x21c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d136      	bne.n	8002c40 <HAL_ADC_Start_DMA+0x1f0>
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_ADC_Start_DMA+0x204>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d130      	bne.n	8002c40 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d129      	bne.n	8002c40 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	e020      	b.n	8002c40 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_ADC_Start_DMA+0x214>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d11b      	bne.n	8002c40 <HAL_ADC_Start_DMA+0x1f0>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d114      	bne.n	8002c40 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	e00b      	b.n	8002c40 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f043 0210 	orr.w	r2, r3, #16
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	431bde83 	.word	0x431bde83
 8002c54:	40012300 	.word	0x40012300
 8002c58:	080030fd 	.word	0x080030fd
 8002c5c:	080031b7 	.word	0x080031b7
 8002c60:	080031d3 	.word	0x080031d3
 8002c64:	40012000 	.word	0x40012000
 8002c68:	40012100 	.word	0x40012100
 8002c6c:	40012200 	.word	0x40012200

08002c70 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x1c>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e113      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x244>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b09      	cmp	r3, #9
 8002cca:	d925      	bls.n	8002d18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68d9      	ldr	r1, [r3, #12]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	3b1e      	subs	r3, #30
 8002ce2:	2207      	movs	r2, #7
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	400a      	ands	r2, r1
 8002cf0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68d9      	ldr	r1, [r3, #12]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	4603      	mov	r3, r0
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4403      	add	r3, r0
 8002d0a:	3b1e      	subs	r3, #30
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	e022      	b.n	8002d5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6919      	ldr	r1, [r3, #16]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	2207      	movs	r2, #7
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	400a      	ands	r2, r1
 8002d3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6919      	ldr	r1, [r3, #16]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4403      	add	r3, r0
 8002d54:	409a      	lsls	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d824      	bhi.n	8002db0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	3b05      	subs	r3, #5
 8002d78:	221f      	movs	r2, #31
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43da      	mvns	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	400a      	ands	r2, r1
 8002d86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4618      	mov	r0, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	3b05      	subs	r3, #5
 8002da2:	fa00 f203 	lsl.w	r2, r0, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	635a      	str	r2, [r3, #52]	; 0x34
 8002dae:	e04c      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	d824      	bhi.n	8002e02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3b23      	subs	r3, #35	; 0x23
 8002dca:	221f      	movs	r2, #31
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43da      	mvns	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	400a      	ands	r2, r1
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	4618      	mov	r0, r3
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	3b23      	subs	r3, #35	; 0x23
 8002df4:	fa00 f203 	lsl.w	r2, r0, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
 8002e00:	e023      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	3b41      	subs	r3, #65	; 0x41
 8002e14:	221f      	movs	r2, #31
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	400a      	ands	r2, r1
 8002e22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	4618      	mov	r0, r3
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3b41      	subs	r3, #65	; 0x41
 8002e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e4a:	4b29      	ldr	r3, [pc, #164]	; (8002ef0 <HAL_ADC_ConfigChannel+0x250>)
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a28      	ldr	r2, [pc, #160]	; (8002ef4 <HAL_ADC_ConfigChannel+0x254>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d10f      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1d8>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b12      	cmp	r3, #18
 8002e5e:	d10b      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <HAL_ADC_ConfigChannel+0x254>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d12b      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x23a>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <HAL_ADC_ConfigChannel+0x258>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <HAL_ADC_ConfigChannel+0x1f4>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b11      	cmp	r3, #17
 8002e92:	d122      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a11      	ldr	r2, [pc, #68]	; (8002ef8 <HAL_ADC_ConfigChannel+0x258>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d111      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_ADC_ConfigChannel+0x25c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <HAL_ADC_ConfigChannel+0x260>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	0c9a      	lsrs	r2, r3, #18
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ecc:	e002      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f9      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40012300 	.word	0x40012300
 8002ef4:	40012000 	.word	0x40012000
 8002ef8:	10000012 	.word	0x10000012
 8002efc:	20000000 	.word	0x20000000
 8002f00:	431bde83 	.word	0x431bde83

08002f04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f0c:	4b79      	ldr	r3, [pc, #484]	; (80030f4 <ADC_Init+0x1f0>)
 8002f0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	021a      	lsls	r2, r3, #8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6899      	ldr	r1, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <ADC_Init+0x1f4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d022      	beq.n	8002fe2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002faa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6899      	ldr	r1, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6899      	ldr	r1, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	e00f      	b.n	8003002 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003000:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0202 	bic.w	r2, r2, #2
 8003010:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	7e1b      	ldrb	r3, [r3, #24]
 800301c:	005a      	lsls	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01b      	beq.n	8003068 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800304e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	3b01      	subs	r3, #1
 800305c:	035a      	lsls	r2, r3, #13
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	e007      	b.n	8003078 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003076:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003086:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	3b01      	subs	r3, #1
 8003094:	051a      	lsls	r2, r3, #20
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6899      	ldr	r1, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ba:	025a      	lsls	r2, r3, #9
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6899      	ldr	r1, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	029a      	lsls	r2, r3, #10
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	609a      	str	r2, [r3, #8]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40012300 	.word	0x40012300
 80030f8:	0f000001 	.word	0x0f000001

080030fc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003112:	2b00      	cmp	r3, #0
 8003114:	d13c      	bne.n	8003190 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d12b      	bne.n	8003188 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003134:	2b00      	cmp	r3, #0
 8003136:	d127      	bne.n	8003188 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003142:	2b00      	cmp	r3, #0
 8003144:	d006      	beq.n	8003154 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003150:	2b00      	cmp	r3, #0
 8003152:	d119      	bne.n	8003188 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0220 	bic.w	r2, r2, #32
 8003162:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d105      	bne.n	8003188 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	f043 0201 	orr.w	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7fe fe07 	bl	8001d9c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800318e:	e00e      	b.n	80031ae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f7ff fd74 	bl	8002c8a <HAL_ADC_ErrorCallback>
}
 80031a2:	e004      	b.n	80031ae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7fe fddb 	bl	8001d80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2240      	movs	r2, #64	; 0x40
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	f043 0204 	orr.w	r2, r3, #4
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f7ff fd49 	bl	8002c8a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <__NVIC_SetPriorityGrouping+0x44>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800321c:	4013      	ands	r3, r2
 800321e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800322c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003232:	4a04      	ldr	r2, [pc, #16]	; (8003244 <__NVIC_SetPriorityGrouping+0x44>)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	60d3      	str	r3, [r2, #12]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800324c:	4b04      	ldr	r3, [pc, #16]	; (8003260 <__NVIC_GetPriorityGrouping+0x18>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	f003 0307 	and.w	r3, r3, #7
}
 8003256:	4618      	mov	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	2b00      	cmp	r3, #0
 8003274:	db0b      	blt.n	800328e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	f003 021f 	and.w	r2, r3, #31
 800327c:	4907      	ldr	r1, [pc, #28]	; (800329c <__NVIC_EnableIRQ+0x38>)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	2001      	movs	r0, #1
 8003286:	fa00 f202 	lsl.w	r2, r0, r2
 800328a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000e100 	.word	0xe000e100

080032a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	db0a      	blt.n	80032ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	490c      	ldr	r1, [pc, #48]	; (80032ec <__NVIC_SetPriority+0x4c>)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	0112      	lsls	r2, r2, #4
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	440b      	add	r3, r1
 80032c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c8:	e00a      	b.n	80032e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	4908      	ldr	r1, [pc, #32]	; (80032f0 <__NVIC_SetPriority+0x50>)
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	3b04      	subs	r3, #4
 80032d8:	0112      	lsls	r2, r2, #4
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	440b      	add	r3, r1
 80032de:	761a      	strb	r2, [r3, #24]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000e100 	.word	0xe000e100
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b089      	sub	sp, #36	; 0x24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f1c3 0307 	rsb	r3, r3, #7
 800330e:	2b04      	cmp	r3, #4
 8003310:	bf28      	it	cs
 8003312:	2304      	movcs	r3, #4
 8003314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3304      	adds	r3, #4
 800331a:	2b06      	cmp	r3, #6
 800331c:	d902      	bls.n	8003324 <NVIC_EncodePriority+0x30>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3b03      	subs	r3, #3
 8003322:	e000      	b.n	8003326 <NVIC_EncodePriority+0x32>
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	f04f 32ff 	mov.w	r2, #4294967295
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43da      	mvns	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	401a      	ands	r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800333c:	f04f 31ff 	mov.w	r1, #4294967295
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	fa01 f303 	lsl.w	r3, r1, r3
 8003346:	43d9      	mvns	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800334c:	4313      	orrs	r3, r2
         );
}
 800334e:	4618      	mov	r0, r3
 8003350:	3724      	adds	r7, #36	; 0x24
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff ff4c 	bl	8003200 <__NVIC_SetPriorityGrouping>
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003382:	f7ff ff61 	bl	8003248 <__NVIC_GetPriorityGrouping>
 8003386:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	6978      	ldr	r0, [r7, #20]
 800338e:	f7ff ffb1 	bl	80032f4 <NVIC_EncodePriority>
 8003392:	4602      	mov	r2, r0
 8003394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff ff80 	bl	80032a0 <__NVIC_SetPriority>
}
 80033a0:	bf00      	nop
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff ff54 	bl	8003264 <__NVIC_EnableIRQ>
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033d0:	f7ff f93a 	bl	8002648 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e099      	b.n	8003514 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003400:	e00f      	b.n	8003422 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003402:	f7ff f921 	bl	8002648 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b05      	cmp	r3, #5
 800340e:	d908      	bls.n	8003422 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2203      	movs	r2, #3
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e078      	b.n	8003514 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e8      	bne.n	8003402 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4b38      	ldr	r3, [pc, #224]	; (800351c <HAL_DMA_Init+0x158>)
 800343c:	4013      	ands	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800344e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	2b04      	cmp	r3, #4
 800347a:	d107      	bne.n	800348c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	4313      	orrs	r3, r2
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0307 	bic.w	r3, r3, #7
 80034a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d117      	bne.n	80034e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00e      	beq.n	80034e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fa9f 	bl	8003a0c <DMA_CheckFifoParam>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2240      	movs	r2, #64	; 0x40
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034e2:	2301      	movs	r3, #1
 80034e4:	e016      	b.n	8003514 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fa56 	bl	80039a0 <DMA_CalcBaseAndBitshift>
 80034f4:	4603      	mov	r3, r0
 80034f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	223f      	movs	r2, #63	; 0x3f
 80034fe:	409a      	lsls	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	f010803f 	.word	0xf010803f

08003520 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003536:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_DMA_Start_IT+0x26>
 8003542:	2302      	movs	r3, #2
 8003544:	e040      	b.n	80035c8 <HAL_DMA_Start_IT+0xa8>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d12f      	bne.n	80035ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2202      	movs	r2, #2
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f9e8 	bl	8003944 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003578:	223f      	movs	r2, #63	; 0x3f
 800357a:	409a      	lsls	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0216 	orr.w	r2, r2, #22
 800358e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0208 	orr.w	r2, r2, #8
 80035a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	e005      	b.n	80035c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035c2:	2302      	movs	r3, #2
 80035c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d004      	beq.n	80035ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e00c      	b.n	8003608 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2205      	movs	r2, #5
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003620:	4b8e      	ldr	r3, [pc, #568]	; (800385c <HAL_DMA_IRQHandler+0x248>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a8e      	ldr	r2, [pc, #568]	; (8003860 <HAL_DMA_IRQHandler+0x24c>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0a9b      	lsrs	r3, r3, #10
 800362c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	2208      	movs	r2, #8
 8003640:	409a      	lsls	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01a      	beq.n	8003680 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d013      	beq.n	8003680 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0204 	bic.w	r2, r2, #4
 8003666:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	2208      	movs	r2, #8
 800366e:	409a      	lsls	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	2201      	movs	r2, #1
 8003686:	409a      	lsls	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d012      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	2201      	movs	r2, #1
 80036a4:	409a      	lsls	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	f043 0202 	orr.w	r2, r3, #2
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	2204      	movs	r2, #4
 80036bc:	409a      	lsls	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d012      	beq.n	80036ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00b      	beq.n	80036ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d8:	2204      	movs	r2, #4
 80036da:	409a      	lsls	r2, r3
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f043 0204 	orr.w	r2, r3, #4
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	2210      	movs	r2, #16
 80036f2:	409a      	lsls	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d043      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d03c      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370e:	2210      	movs	r2, #16
 8003710:	409a      	lsls	r2, r3
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d018      	beq.n	8003756 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d108      	bne.n	8003744 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d024      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	4798      	blx	r3
 8003742:	e01f      	b.n	8003784 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01b      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
 8003754:	e016      	b.n	8003784 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d107      	bne.n	8003774 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0208 	bic.w	r2, r2, #8
 8003772:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	2220      	movs	r2, #32
 800378a:	409a      	lsls	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 808f 	beq.w	80038b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8087 	beq.w	80038b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	2220      	movs	r2, #32
 80037ac:	409a      	lsls	r2, r3
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d136      	bne.n	800382c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0216 	bic.w	r2, r2, #22
 80037cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d103      	bne.n	80037ee <HAL_DMA_IRQHandler+0x1da>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0208 	bic.w	r2, r2, #8
 80037fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003802:	223f      	movs	r2, #63	; 0x3f
 8003804:	409a      	lsls	r2, r3
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381e:	2b00      	cmp	r3, #0
 8003820:	d07e      	beq.n	8003920 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
        }
        return;
 800382a:	e079      	b.n	8003920 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01d      	beq.n	8003876 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10d      	bne.n	8003864 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	2b00      	cmp	r3, #0
 800384e:	d031      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
 8003858:	e02c      	b.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
 800385a:	bf00      	nop
 800385c:	20000000 	.word	0x20000000
 8003860:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d023      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
 8003874:	e01e      	b.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10f      	bne.n	80038a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0210 	bic.w	r2, r2, #16
 8003892:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d032      	beq.n	8003922 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d022      	beq.n	800390e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2205      	movs	r2, #5
 80038cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	3301      	adds	r3, #1
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d307      	bcc.n	80038fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f2      	bne.n	80038e0 <HAL_DMA_IRQHandler+0x2cc>
 80038fa:	e000      	b.n	80038fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
 800391e:	e000      	b.n	8003922 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003920:	bf00      	nop
    }
  }
}
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003936:	b2db      	uxtb	r3, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003960:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b40      	cmp	r3, #64	; 0x40
 8003970:	d108      	bne.n	8003984 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003982:	e007      	b.n	8003994 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	3b10      	subs	r3, #16
 80039b0:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <DMA_CalcBaseAndBitshift+0x64>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039ba:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <DMA_CalcBaseAndBitshift+0x68>)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4413      	add	r3, r2
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d909      	bls.n	80039e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039d6:	f023 0303 	bic.w	r3, r3, #3
 80039da:	1d1a      	adds	r2, r3, #4
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	659a      	str	r2, [r3, #88]	; 0x58
 80039e0:	e007      	b.n	80039f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039ea:	f023 0303 	bic.w	r3, r3, #3
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	aaaaaaab 	.word	0xaaaaaaab
 8003a08:	08010b80 	.word	0x08010b80

08003a0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d11f      	bne.n	8003a66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d856      	bhi.n	8003ada <DMA_CheckFifoParam+0xce>
 8003a2c:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <DMA_CheckFifoParam+0x28>)
 8003a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003a45 	.word	0x08003a45
 8003a38:	08003a57 	.word	0x08003a57
 8003a3c:	08003a45 	.word	0x08003a45
 8003a40:	08003adb 	.word	0x08003adb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d046      	beq.n	8003ade <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a54:	e043      	b.n	8003ade <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a5e:	d140      	bne.n	8003ae2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a64:	e03d      	b.n	8003ae2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6e:	d121      	bne.n	8003ab4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d837      	bhi.n	8003ae6 <DMA_CheckFifoParam+0xda>
 8003a76:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <DMA_CheckFifoParam+0x70>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003a8d 	.word	0x08003a8d
 8003a80:	08003a93 	.word	0x08003a93
 8003a84:	08003a8d 	.word	0x08003a8d
 8003a88:	08003aa5 	.word	0x08003aa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a90:	e030      	b.n	8003af4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d025      	beq.n	8003aea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa2:	e022      	b.n	8003aea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aac:	d11f      	bne.n	8003aee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ab2:	e01c      	b.n	8003aee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d903      	bls.n	8003ac2 <DMA_CheckFifoParam+0xb6>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d003      	beq.n	8003ac8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ac0:	e018      	b.n	8003af4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac6:	e015      	b.n	8003af4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00e      	beq.n	8003af2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad8:	e00b      	b.n	8003af2 <DMA_CheckFifoParam+0xe6>
      break;
 8003ada:	bf00      	nop
 8003adc:	e00a      	b.n	8003af4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e008      	b.n	8003af4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e006      	b.n	8003af4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e004      	b.n	8003af4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aea:	bf00      	nop
 8003aec:	e002      	b.n	8003af4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003aee:	bf00      	nop
 8003af0:	e000      	b.n	8003af4 <DMA_CheckFifoParam+0xe8>
      break;
 8003af2:	bf00      	nop
    }
  } 
  
  return status; 
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop

08003b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b089      	sub	sp, #36	; 0x24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	e165      	b.n	8003dec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b20:	2201      	movs	r2, #1
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4013      	ands	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	f040 8154 	bne.w	8003de6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d005      	beq.n	8003b56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d130      	bne.n	8003bb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	2203      	movs	r2, #3
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f003 0201 	and.w	r2, r3, #1
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d017      	beq.n	8003bf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	2203      	movs	r2, #3
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d123      	bne.n	8003c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	08da      	lsrs	r2, r3, #3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3208      	adds	r2, #8
 8003c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	220f      	movs	r2, #15
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	08da      	lsrs	r2, r3, #3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3208      	adds	r2, #8
 8003c42:	69b9      	ldr	r1, [r7, #24]
 8003c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	2203      	movs	r2, #3
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 0203 	and.w	r2, r3, #3
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80ae 	beq.w	8003de6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	4b5d      	ldr	r3, [pc, #372]	; (8003e04 <HAL_GPIO_Init+0x300>)
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	4a5c      	ldr	r2, [pc, #368]	; (8003e04 <HAL_GPIO_Init+0x300>)
 8003c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c98:	6453      	str	r3, [r2, #68]	; 0x44
 8003c9a:	4b5a      	ldr	r3, [pc, #360]	; (8003e04 <HAL_GPIO_Init+0x300>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ca6:	4a58      	ldr	r2, [pc, #352]	; (8003e08 <HAL_GPIO_Init+0x304>)
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	089b      	lsrs	r3, r3, #2
 8003cac:	3302      	adds	r3, #2
 8003cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	220f      	movs	r2, #15
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a4f      	ldr	r2, [pc, #316]	; (8003e0c <HAL_GPIO_Init+0x308>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d025      	beq.n	8003d1e <HAL_GPIO_Init+0x21a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a4e      	ldr	r2, [pc, #312]	; (8003e10 <HAL_GPIO_Init+0x30c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01f      	beq.n	8003d1a <HAL_GPIO_Init+0x216>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a4d      	ldr	r2, [pc, #308]	; (8003e14 <HAL_GPIO_Init+0x310>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d019      	beq.n	8003d16 <HAL_GPIO_Init+0x212>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a4c      	ldr	r2, [pc, #304]	; (8003e18 <HAL_GPIO_Init+0x314>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_GPIO_Init+0x20e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a4b      	ldr	r2, [pc, #300]	; (8003e1c <HAL_GPIO_Init+0x318>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00d      	beq.n	8003d0e <HAL_GPIO_Init+0x20a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4a      	ldr	r2, [pc, #296]	; (8003e20 <HAL_GPIO_Init+0x31c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <HAL_GPIO_Init+0x206>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a49      	ldr	r2, [pc, #292]	; (8003e24 <HAL_GPIO_Init+0x320>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_GPIO_Init+0x202>
 8003d02:	2306      	movs	r3, #6
 8003d04:	e00c      	b.n	8003d20 <HAL_GPIO_Init+0x21c>
 8003d06:	2307      	movs	r3, #7
 8003d08:	e00a      	b.n	8003d20 <HAL_GPIO_Init+0x21c>
 8003d0a:	2305      	movs	r3, #5
 8003d0c:	e008      	b.n	8003d20 <HAL_GPIO_Init+0x21c>
 8003d0e:	2304      	movs	r3, #4
 8003d10:	e006      	b.n	8003d20 <HAL_GPIO_Init+0x21c>
 8003d12:	2303      	movs	r3, #3
 8003d14:	e004      	b.n	8003d20 <HAL_GPIO_Init+0x21c>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e002      	b.n	8003d20 <HAL_GPIO_Init+0x21c>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <HAL_GPIO_Init+0x21c>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	f002 0203 	and.w	r2, r2, #3
 8003d26:	0092      	lsls	r2, r2, #2
 8003d28:	4093      	lsls	r3, r2
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d30:	4935      	ldr	r1, [pc, #212]	; (8003e08 <HAL_GPIO_Init+0x304>)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	089b      	lsrs	r3, r3, #2
 8003d36:	3302      	adds	r3, #2
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d3e:	4b3a      	ldr	r3, [pc, #232]	; (8003e28 <HAL_GPIO_Init+0x324>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	43db      	mvns	r3, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d62:	4a31      	ldr	r2, [pc, #196]	; (8003e28 <HAL_GPIO_Init+0x324>)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d68:	4b2f      	ldr	r3, [pc, #188]	; (8003e28 <HAL_GPIO_Init+0x324>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d8c:	4a26      	ldr	r2, [pc, #152]	; (8003e28 <HAL_GPIO_Init+0x324>)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d92:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <HAL_GPIO_Init+0x324>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003db6:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <HAL_GPIO_Init+0x324>)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dbc:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <HAL_GPIO_Init+0x324>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003de0:	4a11      	ldr	r2, [pc, #68]	; (8003e28 <HAL_GPIO_Init+0x324>)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	3301      	adds	r3, #1
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	2b0f      	cmp	r3, #15
 8003df0:	f67f ae96 	bls.w	8003b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	3724      	adds	r7, #36	; 0x24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40013800 	.word	0x40013800
 8003e0c:	40020000 	.word	0x40020000
 8003e10:	40020400 	.word	0x40020400
 8003e14:	40020800 	.word	0x40020800
 8003e18:	40020c00 	.word	0x40020c00
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40021400 	.word	0x40021400
 8003e24:	40021800 	.word	0x40021800
 8003e28:	40013c00 	.word	0x40013c00

08003e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	887b      	ldrh	r3, [r7, #2]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
 8003e48:	e001      	b.n	8003e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	807b      	strh	r3, [r7, #2]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e6c:	787b      	ldrb	r3, [r7, #1]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e72:	887a      	ldrh	r2, [r7, #2]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e78:	e003      	b.n	8003e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e7a:	887b      	ldrh	r3, [r7, #2]
 8003e7c:	041a      	lsls	r2, r3, #16
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	619a      	str	r2, [r3, #24]
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
	...

08003e90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d006      	beq.n	8003eb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ea6:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fd ff82 	bl	8001db8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003eb4:	bf00      	nop
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40013c00 	.word	0x40013c00

08003ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e12b      	b.n	800412a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fe f87e 	bl	8001fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2224      	movs	r2, #36	; 0x24
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f24:	f002 faea 	bl	80064fc <HAL_RCC_GetPCLK1Freq>
 8003f28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4a81      	ldr	r2, [pc, #516]	; (8004134 <HAL_I2C_Init+0x274>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d807      	bhi.n	8003f44 <HAL_I2C_Init+0x84>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a80      	ldr	r2, [pc, #512]	; (8004138 <HAL_I2C_Init+0x278>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	bf94      	ite	ls
 8003f3c:	2301      	movls	r3, #1
 8003f3e:	2300      	movhi	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e006      	b.n	8003f52 <HAL_I2C_Init+0x92>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a7d      	ldr	r2, [pc, #500]	; (800413c <HAL_I2C_Init+0x27c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	bf94      	ite	ls
 8003f4c:	2301      	movls	r3, #1
 8003f4e:	2300      	movhi	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0e7      	b.n	800412a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a78      	ldr	r2, [pc, #480]	; (8004140 <HAL_I2C_Init+0x280>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	0c9b      	lsrs	r3, r3, #18
 8003f64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4a6a      	ldr	r2, [pc, #424]	; (8004134 <HAL_I2C_Init+0x274>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d802      	bhi.n	8003f94 <HAL_I2C_Init+0xd4>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	3301      	adds	r3, #1
 8003f92:	e009      	b.n	8003fa8 <HAL_I2C_Init+0xe8>
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	4a69      	ldr	r2, [pc, #420]	; (8004144 <HAL_I2C_Init+0x284>)
 8003fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa4:	099b      	lsrs	r3, r3, #6
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	495c      	ldr	r1, [pc, #368]	; (8004134 <HAL_I2C_Init+0x274>)
 8003fc4:	428b      	cmp	r3, r1
 8003fc6:	d819      	bhi.n	8003ffc <HAL_I2C_Init+0x13c>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1e59      	subs	r1, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fd6:	1c59      	adds	r1, r3, #1
 8003fd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fdc:	400b      	ands	r3, r1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_I2C_Init+0x138>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1e59      	subs	r1, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff6:	e051      	b.n	800409c <HAL_I2C_Init+0x1dc>
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	e04f      	b.n	800409c <HAL_I2C_Init+0x1dc>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d111      	bne.n	8004028 <HAL_I2C_Init+0x168>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1e58      	subs	r0, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	440b      	add	r3, r1
 8004012:	fbb0 f3f3 	udiv	r3, r0, r3
 8004016:	3301      	adds	r3, #1
 8004018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	e012      	b.n	800404e <HAL_I2C_Init+0x18e>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	1e58      	subs	r0, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	0099      	lsls	r1, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	fbb0 f3f3 	udiv	r3, r0, r3
 800403e:	3301      	adds	r3, #1
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_Init+0x196>
 8004052:	2301      	movs	r3, #1
 8004054:	e022      	b.n	800409c <HAL_I2C_Init+0x1dc>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10e      	bne.n	800407c <HAL_I2C_Init+0x1bc>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1e58      	subs	r0, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6859      	ldr	r1, [r3, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	440b      	add	r3, r1
 800406c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004070:	3301      	adds	r3, #1
 8004072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800407a:	e00f      	b.n	800409c <HAL_I2C_Init+0x1dc>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1e58      	subs	r0, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	0099      	lsls	r1, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004092:	3301      	adds	r3, #1
 8004094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	6809      	ldr	r1, [r1, #0]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69da      	ldr	r2, [r3, #28]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6911      	ldr	r1, [r2, #16]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	68d2      	ldr	r2, [r2, #12]
 80040d6:	4311      	orrs	r1, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	430b      	orrs	r3, r1
 80040de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	000186a0 	.word	0x000186a0
 8004138:	001e847f 	.word	0x001e847f
 800413c:	003d08ff 	.word	0x003d08ff
 8004140:	431bde83 	.word	0x431bde83
 8004144:	10624dd3 	.word	0x10624dd3

08004148 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	461a      	mov	r2, r3
 8004154:	460b      	mov	r3, r1
 8004156:	817b      	strh	r3, [r7, #10]
 8004158:	4613      	mov	r3, r2
 800415a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800415c:	f7fe fa74 	bl	8002648 <HAL_GetTick>
 8004160:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b20      	cmp	r3, #32
 800416c:	f040 80e0 	bne.w	8004330 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	2319      	movs	r3, #25
 8004176:	2201      	movs	r2, #1
 8004178:	4970      	ldr	r1, [pc, #448]	; (800433c <HAL_I2C_Master_Transmit+0x1f4>)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f001 fef8 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004186:	2302      	movs	r3, #2
 8004188:	e0d3      	b.n	8004332 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_I2C_Master_Transmit+0x50>
 8004194:	2302      	movs	r3, #2
 8004196:	e0cc      	b.n	8004332 <HAL_I2C_Master_Transmit+0x1ea>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d007      	beq.n	80041be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0201 	orr.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2221      	movs	r2, #33	; 0x21
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2210      	movs	r2, #16
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	893a      	ldrh	r2, [r7, #8]
 80041ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a50      	ldr	r2, [pc, #320]	; (8004340 <HAL_I2C_Master_Transmit+0x1f8>)
 80041fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004200:	8979      	ldrh	r1, [r7, #10]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	6a3a      	ldr	r2, [r7, #32]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f001 fd88 	bl	8005d1c <I2C_MasterRequestWrite>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e08d      	b.n	8004332 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800422c:	e066      	b.n	80042fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	6a39      	ldr	r1, [r7, #32]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f001 ff72 	bl	800611c <I2C_WaitOnTXEFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	2b04      	cmp	r3, #4
 8004244:	d107      	bne.n	8004256 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004254:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e06b      	b.n	8004332 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	781a      	ldrb	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b04      	cmp	r3, #4
 8004296:	d11b      	bne.n	80042d0 <HAL_I2C_Master_Transmit+0x188>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429c:	2b00      	cmp	r3, #0
 800429e:	d017      	beq.n	80042d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	781a      	ldrb	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	6a39      	ldr	r1, [r7, #32]
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f001 ff62 	bl	800619e <I2C_WaitOnBTFFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00d      	beq.n	80042fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d107      	bne.n	80042f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e01a      	b.n	8004332 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004300:	2b00      	cmp	r3, #0
 8004302:	d194      	bne.n	800422e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e000      	b.n	8004332 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004330:	2302      	movs	r3, #2
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	00100002 	.word	0x00100002
 8004340:	ffff0000 	.word	0xffff0000

08004344 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af02      	add	r7, sp, #8
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	607a      	str	r2, [r7, #4]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	460b      	mov	r3, r1
 8004352:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004354:	f7fe f978 	bl	8002648 <HAL_GetTick>
 8004358:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b20      	cmp	r3, #32
 8004368:	f040 8111 	bne.w	800458e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2319      	movs	r3, #25
 8004372:	2201      	movs	r2, #1
 8004374:	4988      	ldr	r1, [pc, #544]	; (8004598 <HAL_I2C_IsDeviceReady+0x254>)
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f001 fdfa 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004382:	2302      	movs	r3, #2
 8004384:	e104      	b.n	8004590 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_I2C_IsDeviceReady+0x50>
 8004390:	2302      	movs	r3, #2
 8004392:	e0fd      	b.n	8004590 <HAL_I2C_IsDeviceReady+0x24c>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d007      	beq.n	80043ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0201 	orr.w	r2, r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2224      	movs	r2, #36	; 0x24
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a70      	ldr	r2, [pc, #448]	; (800459c <HAL_I2C_IsDeviceReady+0x258>)
 80043dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f001 fdb8 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00d      	beq.n	8004422 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004414:	d103      	bne.n	800441e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e0b6      	b.n	8004590 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004422:	897b      	ldrh	r3, [r7, #10]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004430:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004432:	f7fe f909 	bl	8002648 <HAL_GetTick>
 8004436:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b02      	cmp	r3, #2
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445c:	bf0c      	ite	eq
 800445e:	2301      	moveq	r3, #1
 8004460:	2300      	movne	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004466:	e025      	b.n	80044b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004468:	f7fe f8ee 	bl	8002648 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d302      	bcc.n	800447e <HAL_I2C_IsDeviceReady+0x13a>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	22a0      	movs	r2, #160	; 0xa0
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b02      	cmp	r3, #2
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2ba0      	cmp	r3, #160	; 0xa0
 80044be:	d005      	beq.n	80044cc <HAL_I2C_IsDeviceReady+0x188>
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <HAL_I2C_IsDeviceReady+0x188>
 80044c6:	7dbb      	ldrb	r3, [r7, #22]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0cd      	beq.n	8004468 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d129      	bne.n	8004536 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	2319      	movs	r3, #25
 800450e:	2201      	movs	r2, #1
 8004510:	4921      	ldr	r1, [pc, #132]	; (8004598 <HAL_I2C_IsDeviceReady+0x254>)
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f001 fd2c 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e036      	b.n	8004590 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e02c      	b.n	8004590 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004544:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800454e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2319      	movs	r3, #25
 8004556:	2201      	movs	r2, #1
 8004558:	490f      	ldr	r1, [pc, #60]	; (8004598 <HAL_I2C_IsDeviceReady+0x254>)
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f001 fd08 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e012      	b.n	8004590 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	3301      	adds	r3, #1
 800456e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	429a      	cmp	r2, r3
 8004576:	f4ff af32 	bcc.w	80043de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3720      	adds	r7, #32
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	00100002 	.word	0x00100002
 800459c:	ffff0000 	.word	0xffff0000

080045a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d003      	beq.n	80045d8 <HAL_I2C_EV_IRQHandler+0x38>
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	f040 80b1 	bne.w	800473a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10d      	bne.n	800460e <HAL_I2C_EV_IRQHandler+0x6e>
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80045f8:	d003      	beq.n	8004602 <HAL_I2C_EV_IRQHandler+0x62>
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004600:	d101      	bne.n	8004606 <HAL_I2C_EV_IRQHandler+0x66>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <HAL_I2C_EV_IRQHandler+0x68>
 8004606:	2300      	movs	r3, #0
 8004608:	2b01      	cmp	r3, #1
 800460a:	f000 8114 	beq.w	8004836 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00b      	beq.n	8004630 <HAL_I2C_EV_IRQHandler+0x90>
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800461e:	2b00      	cmp	r3, #0
 8004620:	d006      	beq.n	8004630 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f001 fe5d 	bl	80062e2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fd5e 	bl	80050ea <I2C_Master_SB>
 800462e:	e083      	b.n	8004738 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d008      	beq.n	800464c <HAL_I2C_EV_IRQHandler+0xac>
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fdd6 	bl	80051f6 <I2C_Master_ADD10>
 800464a:	e075      	b.n	8004738 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d008      	beq.n	8004668 <HAL_I2C_EV_IRQHandler+0xc8>
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fdf2 	bl	800524a <I2C_Master_ADDR>
 8004666:	e067      	b.n	8004738 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d036      	beq.n	80046e0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004680:	f000 80db 	beq.w	800483a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00d      	beq.n	80046aa <HAL_I2C_EV_IRQHandler+0x10a>
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_I2C_EV_IRQHandler+0x10a>
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d103      	bne.n	80046aa <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f9d6 	bl	8004a54 <I2C_MasterTransmit_TXE>
 80046a8:	e046      	b.n	8004738 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80c2 	beq.w	800483a <HAL_I2C_EV_IRQHandler+0x29a>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80bc 	beq.w	800483a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046c2:	7bbb      	ldrb	r3, [r7, #14]
 80046c4:	2b21      	cmp	r3, #33	; 0x21
 80046c6:	d103      	bne.n	80046d0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fa5f 	bl	8004b8c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ce:	e0b4      	b.n	800483a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b40      	cmp	r3, #64	; 0x40
 80046d4:	f040 80b1 	bne.w	800483a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 facd 	bl	8004c78 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046de:	e0ac      	b.n	800483a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ee:	f000 80a4 	beq.w	800483a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00d      	beq.n	8004718 <HAL_I2C_EV_IRQHandler+0x178>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004702:	2b00      	cmp	r3, #0
 8004704:	d008      	beq.n	8004718 <HAL_I2C_EV_IRQHandler+0x178>
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d103      	bne.n	8004718 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fb45 	bl	8004da0 <I2C_MasterReceive_RXNE>
 8004716:	e00f      	b.n	8004738 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 808b 	beq.w	800483a <HAL_I2C_EV_IRQHandler+0x29a>
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8085 	beq.w	800483a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fbf0 	bl	8004f16 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004736:	e080      	b.n	800483a <HAL_I2C_EV_IRQHandler+0x29a>
 8004738:	e07f      	b.n	800483a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	e007      	b.n	800475c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d011      	beq.n	800478a <HAL_I2C_EV_IRQHandler+0x1ea>
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00c      	beq.n	800478a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004780:	69b9      	ldr	r1, [r7, #24]
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 ffb0 	bl	80056e8 <I2C_Slave_ADDR>
 8004788:	e05a      	b.n	8004840 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x206>
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 ffea 	bl	8005778 <I2C_Slave_STOPF>
 80047a4:	e04c      	b.n	8004840 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047a6:	7bbb      	ldrb	r3, [r7, #14]
 80047a8:	2b21      	cmp	r3, #33	; 0x21
 80047aa:	d002      	beq.n	80047b2 <HAL_I2C_EV_IRQHandler+0x212>
 80047ac:	7bbb      	ldrb	r3, [r7, #14]
 80047ae:	2b29      	cmp	r3, #41	; 0x29
 80047b0:	d120      	bne.n	80047f4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00d      	beq.n	80047d8 <HAL_I2C_EV_IRQHandler+0x238>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <HAL_I2C_EV_IRQHandler+0x238>
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d103      	bne.n	80047d8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fecb 	bl	800556c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047d6:	e032      	b.n	800483e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d02d      	beq.n	800483e <HAL_I2C_EV_IRQHandler+0x29e>
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d028      	beq.n	800483e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fefa 	bl	80055e6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047f2:	e024      	b.n	800483e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00d      	beq.n	800481a <HAL_I2C_EV_IRQHandler+0x27a>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_I2C_EV_IRQHandler+0x27a>
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 ff08 	bl	8005628 <I2C_SlaveReceive_RXNE>
 8004818:	e012      	b.n	8004840 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00d      	beq.n	8004840 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482a:	2b00      	cmp	r3, #0
 800482c:	d008      	beq.n	8004840 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 ff38 	bl	80056a4 <I2C_SlaveReceive_BTF>
 8004834:	e004      	b.n	8004840 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004836:	bf00      	nop
 8004838:	e002      	b.n	8004840 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800483a:	bf00      	nop
 800483c:	e000      	b.n	8004840 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800483e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004840:	3720      	adds	r7, #32
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b08a      	sub	sp, #40	; 0x28
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004868:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00d      	beq.n	8004890 <HAL_I2C_ER_IRQHandler+0x4a>
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800488e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00d      	beq.n	80048b6 <HAL_I2C_ER_IRQHandler+0x70>
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	f043 0302 	orr.w	r3, r3, #2
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80048b4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d03e      	beq.n	800493e <HAL_I2C_ER_IRQHandler+0xf8>
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d039      	beq.n	800493e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80048ca:	7efb      	ldrb	r3, [r7, #27]
 80048cc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80048e4:	7ebb      	ldrb	r3, [r7, #26]
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d112      	bne.n	8004910 <HAL_I2C_ER_IRQHandler+0xca>
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10f      	bne.n	8004910 <HAL_I2C_ER_IRQHandler+0xca>
 80048f0:	7cfb      	ldrb	r3, [r7, #19]
 80048f2:	2b21      	cmp	r3, #33	; 0x21
 80048f4:	d008      	beq.n	8004908 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80048f6:	7cfb      	ldrb	r3, [r7, #19]
 80048f8:	2b29      	cmp	r3, #41	; 0x29
 80048fa:	d005      	beq.n	8004908 <HAL_I2C_ER_IRQHandler+0xc2>
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	2b28      	cmp	r3, #40	; 0x28
 8004900:	d106      	bne.n	8004910 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b21      	cmp	r3, #33	; 0x21
 8004906:	d103      	bne.n	8004910 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f001 f865 	bl	80059d8 <I2C_Slave_AF>
 800490e:	e016      	b.n	800493e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004918:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	f043 0304 	orr.w	r3, r3, #4
 8004920:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004922:	7efb      	ldrb	r3, [r7, #27]
 8004924:	2b10      	cmp	r3, #16
 8004926:	d002      	beq.n	800492e <HAL_I2C_ER_IRQHandler+0xe8>
 8004928:	7efb      	ldrb	r3, [r7, #27]
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d107      	bne.n	800493e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00d      	beq.n	8004964 <HAL_I2C_ER_IRQHandler+0x11e>
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	f043 0308 	orr.w	r3, r3, #8
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004962:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f001 f89e 	bl	8005ab8 <I2C_ITError>
  }
}
 800497c:	bf00      	nop
 800497e:	3728      	adds	r7, #40	; 0x28
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	70fb      	strb	r3, [r7, #3]
 80049e0:	4613      	mov	r3, r2
 80049e2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a62:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a6a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d150      	bne.n	8004b1c <I2C_MasterTransmit_TXE+0xc8>
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b21      	cmp	r3, #33	; 0x21
 8004a7e:	d14d      	bne.n	8004b1c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d01d      	beq.n	8004ac2 <I2C_MasterTransmit_TXE+0x6e>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d01a      	beq.n	8004ac2 <I2C_MasterTransmit_TXE+0x6e>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a92:	d016      	beq.n	8004ac2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aa2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2211      	movs	r2, #17
 8004aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff ff62 	bl	8004984 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ac0:	e060      	b.n	8004b84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ad0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	d107      	bne.n	8004b0c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ff7d 	bl	8004a04 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b0a:	e03b      	b.n	8004b84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff ff35 	bl	8004984 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b1a:	e033      	b.n	8004b84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	2b21      	cmp	r3, #33	; 0x21
 8004b20:	d005      	beq.n	8004b2e <I2C_MasterTransmit_TXE+0xda>
 8004b22:	7bbb      	ldrb	r3, [r7, #14]
 8004b24:	2b40      	cmp	r3, #64	; 0x40
 8004b26:	d12d      	bne.n	8004b84 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b22      	cmp	r3, #34	; 0x22
 8004b2c:	d12a      	bne.n	8004b84 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d108      	bne.n	8004b4a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b46:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b48:	e01c      	b.n	8004b84 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b40      	cmp	r3, #64	; 0x40
 8004b54:	d103      	bne.n	8004b5e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f88e 	bl	8004c78 <I2C_MemoryTransmit_TXE_BTF>
}
 8004b5c:	e012      	b.n	8004b84 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	781a      	ldrb	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b82:	e7ff      	b.n	8004b84 <I2C_MasterTransmit_TXE+0x130>
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b21      	cmp	r3, #33	; 0x21
 8004ba4:	d164      	bne.n	8004c70 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d012      	beq.n	8004bd6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	781a      	ldrb	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004bd4:	e04c      	b.n	8004c70 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d01d      	beq.n	8004c18 <I2C_MasterTransmit_BTF+0x8c>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	d01a      	beq.n	8004c18 <I2C_MasterTransmit_BTF+0x8c>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004be8:	d016      	beq.n	8004c18 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bf8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2211      	movs	r2, #17
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff feb7 	bl	8004984 <HAL_I2C_MasterTxCpltCallback>
}
 8004c16:	e02b      	b.n	8004c70 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c26:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c36:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b40      	cmp	r3, #64	; 0x40
 8004c50:	d107      	bne.n	8004c62 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff fed2 	bl	8004a04 <HAL_I2C_MemTxCpltCallback>
}
 8004c60:	e006      	b.n	8004c70 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fe8a 	bl	8004984 <HAL_I2C_MasterTxCpltCallback>
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d11d      	bne.n	8004ccc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d10b      	bne.n	8004cb0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca8:	1c9a      	adds	r2, r3, #2
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004cae:	e073      	b.n	8004d98 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	121b      	asrs	r3, r3, #8
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cca:	e065      	b.n	8004d98 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d10b      	bne.n	8004cec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cea:	e055      	b.n	8004d98 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d151      	bne.n	8004d98 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
 8004cf6:	2b22      	cmp	r3, #34	; 0x22
 8004cf8:	d10d      	bne.n	8004d16 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d08:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d14:	e040      	b.n	8004d98 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d015      	beq.n	8004d4c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	2b21      	cmp	r3, #33	; 0x21
 8004d24:	d112      	bne.n	8004d4c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	781a      	ldrb	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d4a:	e025      	b.n	8004d98 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d120      	bne.n	8004d98 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	2b21      	cmp	r3, #33	; 0x21
 8004d5a:	d11d      	bne.n	8004d98 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d6a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fe36 	bl	8004a04 <HAL_I2C_MemTxCpltCallback>
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b22      	cmp	r3, #34	; 0x22
 8004db2:	f040 80ac 	bne.w	8004f0e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d921      	bls.n	8004e08 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	f040 808c 	bne.w	8004f0e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e04:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004e06:	e082      	b.n	8004f0e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d075      	beq.n	8004efc <I2C_MasterReceive_RXNE+0x15c>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d002      	beq.n	8004e1c <I2C_MasterReceive_RXNE+0x7c>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d16f      	bne.n	8004efc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 f9ff 	bl	8006220 <I2C_WaitOnSTOPRequestThroughIT>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d142      	bne.n	8004eae <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e36:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e46:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b40      	cmp	r3, #64	; 0x40
 8004e80:	d10a      	bne.n	8004e98 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff fdc1 	bl	8004a18 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e96:	e03a      	b.n	8004f0e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2212      	movs	r2, #18
 8004ea4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff fd76 	bl	8004998 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004eac:	e02f      	b.n	8004f0e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ebc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff fd99 	bl	8004a2c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004efa:	e008      	b.n	8004f0e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0a:	605a      	str	r2, [r3, #4]
}
 8004f0c:	e7ff      	b.n	8004f0e <I2C_MasterReceive_RXNE+0x16e>
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b084      	sub	sp, #16
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d11b      	bne.n	8004f66 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004f64:	e0bd      	b.n	80050e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d129      	bne.n	8004fc4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d00a      	beq.n	8004f9c <I2C_MasterReceive_BTF+0x86>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d007      	beq.n	8004f9c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004fc2:	e08e      	b.n	80050e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d176      	bne.n	80050bc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d002      	beq.n	8004fda <I2C_MasterReceive_BTF+0xc4>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b10      	cmp	r3, #16
 8004fd8:	d108      	bne.n	8004fec <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e019      	b.n	8005020 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d002      	beq.n	8004ff8 <I2C_MasterReceive_BTF+0xe2>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d108      	bne.n	800500a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e00a      	b.n	8005020 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b10      	cmp	r3, #16
 800500e:	d007      	beq.n	8005020 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691a      	ldr	r2, [r3, #16]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800507a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b40      	cmp	r3, #64	; 0x40
 800508e:	d10a      	bne.n	80050a6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7ff fcba 	bl	8004a18 <HAL_I2C_MemRxCpltCallback>
}
 80050a4:	e01d      	b.n	80050e2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2212      	movs	r2, #18
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff fc6f 	bl	8004998 <HAL_I2C_MasterRxCpltCallback>
}
 80050ba:	e012      	b.n	80050e2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29a      	uxth	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b40      	cmp	r3, #64	; 0x40
 80050fc:	d117      	bne.n	800512e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005102:	2b00      	cmp	r3, #0
 8005104:	d109      	bne.n	800511a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	b2db      	uxtb	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005116:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005118:	e067      	b.n	80051ea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f043 0301 	orr.w	r3, r3, #1
 8005124:	b2da      	uxtb	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	611a      	str	r2, [r3, #16]
}
 800512c:	e05d      	b.n	80051ea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005136:	d133      	bne.n	80051a0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b21      	cmp	r3, #33	; 0x21
 8005142:	d109      	bne.n	8005158 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005148:	b2db      	uxtb	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005154:	611a      	str	r2, [r3, #16]
 8005156:	e008      	b.n	800516a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	b2da      	uxtb	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516e:	2b00      	cmp	r3, #0
 8005170:	d004      	beq.n	800517c <I2C_Master_SB+0x92>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005178:	2b00      	cmp	r3, #0
 800517a:	d108      	bne.n	800518e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	2b00      	cmp	r3, #0
 8005182:	d032      	beq.n	80051ea <I2C_Master_SB+0x100>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d02d      	beq.n	80051ea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800519c:	605a      	str	r2, [r3, #4]
}
 800519e:	e024      	b.n	80051ea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10e      	bne.n	80051c6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	11db      	asrs	r3, r3, #7
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f003 0306 	and.w	r3, r3, #6
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	f063 030f 	orn	r3, r3, #15
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	611a      	str	r2, [r3, #16]
}
 80051c4:	e011      	b.n	80051ea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d10d      	bne.n	80051ea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	11db      	asrs	r3, r3, #7
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f003 0306 	and.w	r3, r3, #6
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f063 030e 	orn	r3, r3, #14
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	611a      	str	r2, [r3, #16]
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	b2da      	uxtb	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <I2C_Master_ADD10+0x26>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005218:	2b00      	cmp	r3, #0
 800521a:	d108      	bne.n	800522e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00c      	beq.n	800523e <I2C_Master_ADD10+0x48>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523c:	605a      	str	r2, [r3, #4]
  }
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800524a:	b480      	push	{r7}
 800524c:	b091      	sub	sp, #68	; 0x44
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005258:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b22      	cmp	r3, #34	; 0x22
 8005272:	f040 8169 	bne.w	8005548 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10f      	bne.n	800529e <I2C_Master_ADDR+0x54>
 800527e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005282:	2b40      	cmp	r3, #64	; 0x40
 8005284:	d10b      	bne.n	800529e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005286:	2300      	movs	r3, #0
 8005288:	633b      	str	r3, [r7, #48]	; 0x30
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	633b      	str	r3, [r7, #48]	; 0x30
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	633b      	str	r3, [r7, #48]	; 0x30
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	e160      	b.n	8005560 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d11d      	bne.n	80052e2 <I2C_Master_ADDR+0x98>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052ae:	d118      	bne.n	80052e2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b0:	2300      	movs	r3, #0
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	651a      	str	r2, [r3, #80]	; 0x50
 80052e0:	e13e      	b.n	8005560 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d113      	bne.n	8005314 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ec:	2300      	movs	r3, #0
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	e115      	b.n	8005540 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b01      	cmp	r3, #1
 800531c:	f040 808a 	bne.w	8005434 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005322:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005326:	d137      	bne.n	8005398 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005336:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005346:	d113      	bne.n	8005370 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005356:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005358:	2300      	movs	r3, #0
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	e0e7      	b.n	8005540 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005370:	2300      	movs	r3, #0
 8005372:	623b      	str	r3, [r7, #32]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	623b      	str	r3, [r7, #32]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	623b      	str	r3, [r7, #32]
 8005384:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e0d3      	b.n	8005540 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	2b08      	cmp	r3, #8
 800539c:	d02e      	beq.n	80053fc <I2C_Master_ADDR+0x1b2>
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d02b      	beq.n	80053fc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80053a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a6:	2b12      	cmp	r3, #18
 80053a8:	d102      	bne.n	80053b0 <I2C_Master_ADDR+0x166>
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d125      	bne.n	80053fc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80053b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d00e      	beq.n	80053d4 <I2C_Master_ADDR+0x18a>
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d00b      	beq.n	80053d4 <I2C_Master_ADDR+0x18a>
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d008      	beq.n	80053d4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	e007      	b.n	80053e4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053e2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e4:	2300      	movs	r3, #0
 80053e6:	61fb      	str	r3, [r7, #28]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	e0a1      	b.n	8005540 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800540c:	2300      	movs	r3, #0
 800540e:	61bb      	str	r3, [r7, #24]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e085      	b.n	8005540 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d14d      	bne.n	80054da <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	2b04      	cmp	r3, #4
 8005442:	d016      	beq.n	8005472 <I2C_Master_ADDR+0x228>
 8005444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005446:	2b02      	cmp	r3, #2
 8005448:	d013      	beq.n	8005472 <I2C_Master_ADDR+0x228>
 800544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544c:	2b10      	cmp	r3, #16
 800544e:	d010      	beq.n	8005472 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e007      	b.n	8005482 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005480:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005490:	d117      	bne.n	80054c2 <I2C_Master_ADDR+0x278>
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005498:	d00b      	beq.n	80054b2 <I2C_Master_ADDR+0x268>
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	2b01      	cmp	r3, #1
 800549e:	d008      	beq.n	80054b2 <I2C_Master_ADDR+0x268>
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d005      	beq.n	80054b2 <I2C_Master_ADDR+0x268>
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	d002      	beq.n	80054b2 <I2C_Master_ADDR+0x268>
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d107      	bne.n	80054c2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	e032      	b.n	8005540 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054e8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f8:	d117      	bne.n	800552a <I2C_Master_ADDR+0x2e0>
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005500:	d00b      	beq.n	800551a <I2C_Master_ADDR+0x2d0>
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	2b01      	cmp	r3, #1
 8005506:	d008      	beq.n	800551a <I2C_Master_ADDR+0x2d0>
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	2b08      	cmp	r3, #8
 800550c:	d005      	beq.n	800551a <I2C_Master_ADDR+0x2d0>
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	2b10      	cmp	r3, #16
 8005512:	d002      	beq.n	800551a <I2C_Master_ADDR+0x2d0>
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	2b20      	cmp	r3, #32
 8005518:	d107      	bne.n	800552a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005528:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	613b      	str	r3, [r7, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005546:	e00b      	b.n	8005560 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
}
 800555e:	e7ff      	b.n	8005560 <I2C_Master_ADDR+0x316>
 8005560:	bf00      	nop
 8005562:	3744      	adds	r7, #68	; 0x44
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d02b      	beq.n	80055de <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	781a      	ldrb	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d114      	bne.n	80055de <I2C_SlaveTransmit_TXE+0x72>
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b29      	cmp	r3, #41	; 0x29
 80055b8:	d111      	bne.n	80055de <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2221      	movs	r2, #33	; 0x21
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2228      	movs	r2, #40	; 0x28
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff f9e7 	bl	80049ac <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d011      	beq.n	800561c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	781a      	ldrb	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005636:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d02c      	beq.n	800569c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d114      	bne.n	800569c <I2C_SlaveReceive_RXNE+0x74>
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	2b2a      	cmp	r3, #42	; 0x2a
 8005676:	d111      	bne.n	800569c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005686:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2222      	movs	r2, #34	; 0x22
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2228      	movs	r2, #40	; 0x28
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff f992 	bl	80049c0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d012      	beq.n	80056dc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005702:	2b28      	cmp	r3, #40	; 0x28
 8005704:	d125      	bne.n	8005752 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005714:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005720:	2301      	movs	r3, #1
 8005722:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d103      	bne.n	8005736 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	81bb      	strh	r3, [r7, #12]
 8005734:	e002      	b.n	800573c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005744:	89ba      	ldrh	r2, [r7, #12]
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff f942 	bl	80049d4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005750:	e00e      	b.n	8005770 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005752:	2300      	movs	r3, #0
 8005754:	60bb      	str	r3, [r7, #8]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	60bb      	str	r3, [r7, #8]
 8005766:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005770:	bf00      	nop
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005786:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005796:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005798:	2300      	movs	r3, #0
 800579a:	60bb      	str	r3, [r7, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	60bb      	str	r3, [r7, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d4:	d172      	bne.n	80058bc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	2b22      	cmp	r3, #34	; 0x22
 80057da:	d002      	beq.n	80057e2 <I2C_Slave_STOPF+0x6a>
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	2b2a      	cmp	r3, #42	; 0x2a
 80057e0:	d135      	bne.n	800584e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f043 0204 	orr.w	r2, r3, #4
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005814:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe f884 	bl	8003928 <HAL_DMA_GetState>
 8005820:	4603      	mov	r3, r0
 8005822:	2b01      	cmp	r3, #1
 8005824:	d049      	beq.n	80058ba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	4a69      	ldr	r2, [pc, #420]	; (80059d0 <I2C_Slave_STOPF+0x258>)
 800582c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	4618      	mov	r0, r3
 8005834:	f7fd fecc 	bl	80035d0 <HAL_DMA_Abort_IT>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d03d      	beq.n	80058ba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005848:	4610      	mov	r0, r2
 800584a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800584c:	e035      	b.n	80058ba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	b29a      	uxth	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d005      	beq.n	8005872 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f043 0204 	orr.w	r2, r3, #4
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005880:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005886:	4618      	mov	r0, r3
 8005888:	f7fe f84e 	bl	8003928 <HAL_DMA_GetState>
 800588c:	4603      	mov	r3, r0
 800588e:	2b01      	cmp	r3, #1
 8005890:	d014      	beq.n	80058bc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005896:	4a4e      	ldr	r2, [pc, #312]	; (80059d0 <I2C_Slave_STOPF+0x258>)
 8005898:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fd fe96 	bl	80035d0 <HAL_DMA_Abort_IT>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d008      	beq.n	80058bc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058b4:	4610      	mov	r0, r2
 80058b6:	4798      	blx	r3
 80058b8:	e000      	b.n	80058bc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058ba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d03e      	beq.n	8005944 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d112      	bne.n	80058fa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b40      	cmp	r3, #64	; 0x40
 8005906:	d112      	bne.n	800592e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691a      	ldr	r2, [r3, #16]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d005      	beq.n	8005944 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	f043 0204 	orr.w	r2, r3, #4
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f8b3 	bl	8005ab8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005952:	e039      	b.n	80059c8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	2b2a      	cmp	r3, #42	; 0x2a
 8005958:	d109      	bne.n	800596e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2228      	movs	r2, #40	; 0x28
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff f829 	bl	80049c0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b28      	cmp	r3, #40	; 0x28
 8005978:	d111      	bne.n	800599e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <I2C_Slave_STOPF+0x25c>)
 800597e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2220      	movs	r2, #32
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff f82a 	bl	80049f0 <HAL_I2C_ListenCpltCallback>
}
 800599c:	e014      	b.n	80059c8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	2b22      	cmp	r3, #34	; 0x22
 80059a4:	d002      	beq.n	80059ac <I2C_Slave_STOPF+0x234>
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	2b22      	cmp	r3, #34	; 0x22
 80059aa:	d10d      	bne.n	80059c8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fe fffc 	bl	80049c0 <HAL_I2C_SlaveRxCpltCallback>
}
 80059c8:	bf00      	nop
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	08005e21 	.word	0x08005e21
 80059d4:	ffff0000 	.word	0xffff0000

080059d8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d002      	beq.n	80059fa <I2C_Slave_AF+0x22>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d129      	bne.n	8005a4e <I2C_Slave_AF+0x76>
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
 80059fc:	2b28      	cmp	r3, #40	; 0x28
 80059fe:	d126      	bne.n	8005a4e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a2c      	ldr	r2, [pc, #176]	; (8005ab4 <I2C_Slave_AF+0xdc>)
 8005a04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a14:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a1e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fe ffd2 	bl	80049f0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005a4c:	e02e      	b.n	8005aac <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	2b21      	cmp	r3, #33	; 0x21
 8005a52:	d126      	bne.n	8005aa2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a17      	ldr	r2, [pc, #92]	; (8005ab4 <I2C_Slave_AF+0xdc>)
 8005a58:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2221      	movs	r2, #33	; 0x21
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a7e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a88:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a98:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fe ff86 	bl	80049ac <HAL_I2C_SlaveTxCpltCallback>
}
 8005aa0:	e004      	b.n	8005aac <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aaa:	615a      	str	r2, [r3, #20]
}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	ffff0000 	.word	0xffff0000

08005ab8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ace:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	2b10      	cmp	r3, #16
 8005ad4:	d002      	beq.n	8005adc <I2C_ITError+0x24>
 8005ad6:	7bbb      	ldrb	r3, [r7, #14]
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d10a      	bne.n	8005af2 <I2C_ITError+0x3a>
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	2b22      	cmp	r3, #34	; 0x22
 8005ae0:	d107      	bne.n	8005af2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005af0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005af8:	2b28      	cmp	r3, #40	; 0x28
 8005afa:	d107      	bne.n	8005b0c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2228      	movs	r2, #40	; 0x28
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b0a:	e015      	b.n	8005b38 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b1a:	d00a      	beq.n	8005b32 <I2C_ITError+0x7a>
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	2b60      	cmp	r3, #96	; 0x60
 8005b20:	d007      	beq.n	8005b32 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b46:	d162      	bne.n	8005c0e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b56:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d020      	beq.n	8005ba8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6a:	4a6a      	ldr	r2, [pc, #424]	; (8005d14 <I2C_ITError+0x25c>)
 8005b6c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fd fd2c 	bl	80035d0 <HAL_DMA_Abort_IT>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8089 	beq.w	8005c92 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4798      	blx	r3
 8005ba6:	e074      	b.n	8005c92 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bac:	4a59      	ldr	r2, [pc, #356]	; (8005d14 <I2C_ITError+0x25c>)
 8005bae:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fd fd0b 	bl	80035d0 <HAL_DMA_Abort_IT>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d068      	beq.n	8005c92 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	d10b      	bne.n	8005be6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0201 	bic.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
 8005c0c:	e041      	b.n	8005c92 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b60      	cmp	r3, #96	; 0x60
 8005c18:	d125      	bne.n	8005c66 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c32:	2b40      	cmp	r3, #64	; 0x40
 8005c34:	d10b      	bne.n	8005c4e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0201 	bic.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fe feee 	bl	8004a40 <HAL_I2C_AbortCpltCallback>
 8005c64:	e015      	b.n	8005c92 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b40      	cmp	r3, #64	; 0x40
 8005c72:	d10b      	bne.n	8005c8c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7fe fecd 	bl	8004a2c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10e      	bne.n	8005cc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d109      	bne.n	8005cc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d104      	bne.n	8005cc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d007      	beq.n	8005cd0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d113      	bne.n	8005d0c <I2C_ITError+0x254>
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	2b28      	cmp	r3, #40	; 0x28
 8005ce8:	d110      	bne.n	8005d0c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a0a      	ldr	r2, [pc, #40]	; (8005d18 <I2C_ITError+0x260>)
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fe fe72 	bl	80049f0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	08005e21 	.word	0x08005e21
 8005d18:	ffff0000 	.word	0xffff0000

08005d1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af02      	add	r7, sp, #8
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	607a      	str	r2, [r7, #4]
 8005d26:	603b      	str	r3, [r7, #0]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d006      	beq.n	8005d46 <I2C_MasterRequestWrite+0x2a>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d003      	beq.n	8005d46 <I2C_MasterRequestWrite+0x2a>
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d44:	d108      	bne.n	8005d58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	e00b      	b.n	8005d70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5c:	2b12      	cmp	r3, #18
 8005d5e:	d107      	bne.n	8005d70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f8f7 	bl	8005f70 <I2C_WaitOnFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00d      	beq.n	8005da4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d96:	d103      	bne.n	8005da0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e035      	b.n	8005e10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dac:	d108      	bne.n	8005dc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dae:	897b      	ldrh	r3, [r7, #10]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005dbc:	611a      	str	r2, [r3, #16]
 8005dbe:	e01b      	b.n	8005df8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005dc0:	897b      	ldrh	r3, [r7, #10]
 8005dc2:	11db      	asrs	r3, r3, #7
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f003 0306 	and.w	r3, r3, #6
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	f063 030f 	orn	r3, r3, #15
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	490e      	ldr	r1, [pc, #56]	; (8005e18 <I2C_MasterRequestWrite+0xfc>)
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f91d 	bl	800601e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e010      	b.n	8005e10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dee:	897b      	ldrh	r3, [r7, #10]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	4907      	ldr	r1, [pc, #28]	; (8005e1c <I2C_MasterRequestWrite+0x100>)
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f90d 	bl	800601e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	00010008 	.word	0x00010008
 8005e1c:	00010002 	.word	0x00010002

08005e20 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e38:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e3a:	4b4b      	ldr	r3, [pc, #300]	; (8005f68 <I2C_DMAAbort+0x148>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	08db      	lsrs	r3, r3, #3
 8005e40:	4a4a      	ldr	r2, [pc, #296]	; (8005f6c <I2C_DMAAbort+0x14c>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	0a1a      	lsrs	r2, r3, #8
 8005e48:	4613      	mov	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	00da      	lsls	r2, r3, #3
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f043 0220 	orr.w	r2, r3, #32
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005e66:	e00a      	b.n	8005e7e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e7c:	d0ea      	beq.n	8005e54 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0201 	bic.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b60      	cmp	r3, #96	; 0x60
 8005eee:	d10e      	bne.n	8005f0e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2200      	movs	r2, #0
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f06:	6978      	ldr	r0, [r7, #20]
 8005f08:	f7fe fd9a 	bl	8004a40 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f0c:	e027      	b.n	8005f5e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f0e:	7cfb      	ldrb	r3, [r7, #19]
 8005f10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f14:	2b28      	cmp	r3, #40	; 0x28
 8005f16:	d117      	bne.n	8005f48 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2228      	movs	r2, #40	; 0x28
 8005f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f46:	e007      	b.n	8005f58 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f58:	6978      	ldr	r0, [r7, #20]
 8005f5a:	f7fe fd67 	bl	8004a2c <HAL_I2C_ErrorCallback>
}
 8005f5e:	bf00      	nop
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000000 	.word	0x20000000
 8005f6c:	14f8b589 	.word	0x14f8b589

08005f70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f80:	e025      	b.n	8005fce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d021      	beq.n	8005fce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f8a:	f7fc fb5d 	bl	8002648 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d302      	bcc.n	8005fa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d116      	bne.n	8005fce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f043 0220 	orr.w	r2, r3, #32
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e023      	b.n	8006016 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	0c1b      	lsrs	r3, r3, #16
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d10d      	bne.n	8005ff4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	43da      	mvns	r2, r3
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bf0c      	ite	eq
 8005fea:	2301      	moveq	r3, #1
 8005fec:	2300      	movne	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	e00c      	b.n	800600e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	43da      	mvns	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4013      	ands	r3, r2
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	bf0c      	ite	eq
 8006006:	2301      	moveq	r3, #1
 8006008:	2300      	movne	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	461a      	mov	r2, r3
 800600e:	79fb      	ldrb	r3, [r7, #7]
 8006010:	429a      	cmp	r2, r3
 8006012:	d0b6      	beq.n	8005f82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	607a      	str	r2, [r7, #4]
 800602a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800602c:	e051      	b.n	80060d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800603c:	d123      	bne.n	8006086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800604c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006056:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	f043 0204 	orr.w	r2, r3, #4
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e046      	b.n	8006114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d021      	beq.n	80060d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608e:	f7fc fadb 	bl	8002648 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	429a      	cmp	r2, r3
 800609c:	d302      	bcc.n	80060a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d116      	bne.n	80060d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	f043 0220 	orr.w	r2, r3, #32
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e020      	b.n	8006114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	0c1b      	lsrs	r3, r3, #16
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d10c      	bne.n	80060f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	43da      	mvns	r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4013      	ands	r3, r2
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	bf14      	ite	ne
 80060ee:	2301      	movne	r3, #1
 80060f0:	2300      	moveq	r3, #0
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	e00b      	b.n	800610e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	43da      	mvns	r2, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	4013      	ands	r3, r2
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	bf14      	ite	ne
 8006108:	2301      	movne	r3, #1
 800610a:	2300      	moveq	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d18d      	bne.n	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006128:	e02d      	b.n	8006186 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f8aa 	bl	8006284 <I2C_IsAcknowledgeFailed>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e02d      	b.n	8006196 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d021      	beq.n	8006186 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006142:	f7fc fa81 	bl	8002648 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	429a      	cmp	r2, r3
 8006150:	d302      	bcc.n	8006158 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d116      	bne.n	8006186 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2220      	movs	r2, #32
 8006162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	f043 0220 	orr.w	r2, r3, #32
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e007      	b.n	8006196 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006190:	2b80      	cmp	r3, #128	; 0x80
 8006192:	d1ca      	bne.n	800612a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	60f8      	str	r0, [r7, #12]
 80061a6:	60b9      	str	r1, [r7, #8]
 80061a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061aa:	e02d      	b.n	8006208 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 f869 	bl	8006284 <I2C_IsAcknowledgeFailed>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e02d      	b.n	8006218 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c2:	d021      	beq.n	8006208 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c4:	f7fc fa40 	bl	8002648 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d302      	bcc.n	80061da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d116      	bne.n	8006208 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	f043 0220 	orr.w	r2, r3, #32
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e007      	b.n	8006218 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b04      	cmp	r3, #4
 8006214:	d1ca      	bne.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800622c:	4b13      	ldr	r3, [pc, #76]	; (800627c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	08db      	lsrs	r3, r3, #3
 8006232:	4a13      	ldr	r2, [pc, #76]	; (8006280 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006234:	fba2 2303 	umull	r2, r3, r2, r3
 8006238:	0a1a      	lsrs	r2, r3, #8
 800623a:	4613      	mov	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3b01      	subs	r3, #1
 8006246:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d107      	bne.n	800625e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	f043 0220 	orr.w	r2, r3, #32
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e008      	b.n	8006270 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800626c:	d0e9      	beq.n	8006242 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	20000000 	.word	0x20000000
 8006280:	14f8b589 	.word	0x14f8b589

08006284 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629a:	d11b      	bne.n	80062d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	f043 0204 	orr.w	r2, r3, #4
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e000      	b.n	80062d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ee:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80062f2:	d103      	bne.n	80062fc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80062fa:	e007      	b.n	800630c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006304:	d102      	bne.n	800630c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2208      	movs	r2, #8
 800630a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0cc      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800632c:	4b68      	ldr	r3, [pc, #416]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d90c      	bls.n	8006354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633a:	4b65      	ldr	r3, [pc, #404]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006342:	4b63      	ldr	r3, [pc, #396]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	429a      	cmp	r2, r3
 800634e:	d001      	beq.n	8006354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e0b8      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d020      	beq.n	80063a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b00      	cmp	r3, #0
 800636a:	d005      	beq.n	8006378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800636c:	4b59      	ldr	r3, [pc, #356]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	4a58      	ldr	r2, [pc, #352]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006384:	4b53      	ldr	r3, [pc, #332]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	4a52      	ldr	r2, [pc, #328]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800638e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006390:	4b50      	ldr	r3, [pc, #320]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	494d      	ldr	r1, [pc, #308]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d044      	beq.n	8006438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d107      	bne.n	80063c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b6:	4b47      	ldr	r3, [pc, #284]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d119      	bne.n	80063f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e07f      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d003      	beq.n	80063d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d107      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063d6:	4b3f      	ldr	r3, [pc, #252]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d109      	bne.n	80063f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e06f      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e6:	4b3b      	ldr	r3, [pc, #236]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e067      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063f6:	4b37      	ldr	r3, [pc, #220]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f023 0203 	bic.w	r2, r3, #3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	4934      	ldr	r1, [pc, #208]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006404:	4313      	orrs	r3, r2
 8006406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006408:	f7fc f91e 	bl	8002648 <HAL_GetTick>
 800640c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640e:	e00a      	b.n	8006426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006410:	f7fc f91a 	bl	8002648 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	f241 3288 	movw	r2, #5000	; 0x1388
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e04f      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006426:	4b2b      	ldr	r3, [pc, #172]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 020c 	and.w	r2, r3, #12
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	429a      	cmp	r2, r3
 8006436:	d1eb      	bne.n	8006410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006438:	4b25      	ldr	r3, [pc, #148]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d20c      	bcs.n	8006460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006446:	4b22      	ldr	r3, [pc, #136]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800644e:	4b20      	ldr	r3, [pc, #128]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d001      	beq.n	8006460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e032      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	d008      	beq.n	800647e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800646c:	4b19      	ldr	r3, [pc, #100]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	4916      	ldr	r1, [pc, #88]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800647a:	4313      	orrs	r3, r2
 800647c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800648a:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	490e      	ldr	r1, [pc, #56]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800649a:	4313      	orrs	r3, r2
 800649c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800649e:	f000 fbb1 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 80064a2:	4602      	mov	r2, r0
 80064a4:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	091b      	lsrs	r3, r3, #4
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	490a      	ldr	r1, [pc, #40]	; (80064d8 <HAL_RCC_ClockConfig+0x1c0>)
 80064b0:	5ccb      	ldrb	r3, [r1, r3]
 80064b2:	fa22 f303 	lsr.w	r3, r2, r3
 80064b6:	4a09      	ldr	r2, [pc, #36]	; (80064dc <HAL_RCC_ClockConfig+0x1c4>)
 80064b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064ba:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <HAL_RCC_ClockConfig+0x1c8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fb ff12 	bl	80022e8 <HAL_InitTick>

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	40023c00 	.word	0x40023c00
 80064d4:	40023800 	.word	0x40023800
 80064d8:	08010b68 	.word	0x08010b68
 80064dc:	20000000 	.word	0x20000000
 80064e0:	20000004 	.word	0x20000004

080064e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064e8:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80064ea:	681b      	ldr	r3, [r3, #0]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	20000000 	.word	0x20000000

080064fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006500:	f7ff fff0 	bl	80064e4 <HAL_RCC_GetHCLKFreq>
 8006504:	4602      	mov	r2, r0
 8006506:	4b05      	ldr	r3, [pc, #20]	; (800651c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	0a9b      	lsrs	r3, r3, #10
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	4903      	ldr	r1, [pc, #12]	; (8006520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006512:	5ccb      	ldrb	r3, [r1, r3]
 8006514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006518:	4618      	mov	r0, r3
 800651a:	bd80      	pop	{r7, pc}
 800651c:	40023800 	.word	0x40023800
 8006520:	08010b78 	.word	0x08010b78

08006524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006528:	f7ff ffdc 	bl	80064e4 <HAL_RCC_GetHCLKFreq>
 800652c:	4602      	mov	r2, r0
 800652e:	4b05      	ldr	r3, [pc, #20]	; (8006544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	0b5b      	lsrs	r3, r3, #13
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	4903      	ldr	r1, [pc, #12]	; (8006548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800653a:	5ccb      	ldrb	r3, [r1, r3]
 800653c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006540:	4618      	mov	r0, r3
 8006542:	bd80      	pop	{r7, pc}
 8006544:	40023800 	.word	0x40023800
 8006548:	08010b78 	.word	0x08010b78

0800654c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	220f      	movs	r2, #15
 800655a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800655c:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <HAL_RCC_GetClockConfig+0x5c>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0203 	and.w	r2, r3, #3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006568:	4b0f      	ldr	r3, [pc, #60]	; (80065a8 <HAL_RCC_GetClockConfig+0x5c>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006574:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006580:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	08db      	lsrs	r3, r3, #3
 8006586:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800658e:	4b07      	ldr	r3, [pc, #28]	; (80065ac <HAL_RCC_GetClockConfig+0x60>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 020f 	and.w	r2, r3, #15
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	601a      	str	r2, [r3, #0]
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40023800 	.word	0x40023800
 80065ac:	40023c00 	.word	0x40023c00

080065b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08c      	sub	sp, #48	; 0x30
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d010      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80065e8:	4b6f      	ldr	r3, [pc, #444]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ee:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f6:	496c      	ldr	r1, [pc, #432]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006606:	2301      	movs	r3, #1
 8006608:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d010      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006616:	4b64      	ldr	r3, [pc, #400]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800661c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006624:	4960      	ldr	r1, [pc, #384]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006626:	4313      	orrs	r3, r2
 8006628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006634:	2301      	movs	r3, #1
 8006636:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d017      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006644:	4b58      	ldr	r3, [pc, #352]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800664a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	4955      	ldr	r1, [pc, #340]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006654:	4313      	orrs	r3, r2
 8006656:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006662:	d101      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006664:	2301      	movs	r3, #1
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006670:	2301      	movs	r3, #1
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d017      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006680:	4b49      	ldr	r3, [pc, #292]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006686:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668e:	4946      	ldr	r1, [pc, #280]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006690:	4313      	orrs	r3, r2
 8006692:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800669e:	d101      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80066a0:	2301      	movs	r3, #1
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80066ac:	2301      	movs	r3, #1
 80066ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 808a 	beq.w	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066be:	2300      	movs	r3, #0
 80066c0:	60bb      	str	r3, [r7, #8]
 80066c2:	4b39      	ldr	r3, [pc, #228]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	4a38      	ldr	r2, [pc, #224]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066cc:	6413      	str	r3, [r2, #64]	; 0x40
 80066ce:	4b36      	ldr	r3, [pc, #216]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d6:	60bb      	str	r3, [r7, #8]
 80066d8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80066da:	4b34      	ldr	r3, [pc, #208]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a33      	ldr	r2, [pc, #204]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80066e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066e6:	f7fb ffaf 	bl	8002648 <HAL_GetTick>
 80066ea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80066ec:	e008      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80066ee:	f7fb ffab 	bl	8002648 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d901      	bls.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e278      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006700:	4b2a      	ldr	r3, [pc, #168]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0f0      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800670c:	4b26      	ldr	r3, [pc, #152]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800670e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006714:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d02f      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006724:	6a3a      	ldr	r2, [r7, #32]
 8006726:	429a      	cmp	r2, r3
 8006728:	d028      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800672a:	4b1f      	ldr	r3, [pc, #124]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006732:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006734:	4b1e      	ldr	r3, [pc, #120]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006736:	2201      	movs	r2, #1
 8006738:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800673a:	4b1d      	ldr	r3, [pc, #116]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006740:	4a19      	ldr	r2, [pc, #100]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006746:	4b18      	ldr	r3, [pc, #96]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b01      	cmp	r3, #1
 8006750:	d114      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006752:	f7fb ff79 	bl	8002648 <HAL_GetTick>
 8006756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006758:	e00a      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800675a:	f7fb ff75 	bl	8002648 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	f241 3288 	movw	r2, #5000	; 0x1388
 8006768:	4293      	cmp	r3, r2
 800676a:	d901      	bls.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e240      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006770:	4b0d      	ldr	r3, [pc, #52]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0ee      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006788:	d114      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800678a:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800679a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679e:	4902      	ldr	r1, [pc, #8]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	608b      	str	r3, [r1, #8]
 80067a4:	e00c      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80067a6:	bf00      	nop
 80067a8:	40023800 	.word	0x40023800
 80067ac:	40007000 	.word	0x40007000
 80067b0:	42470e40 	.word	0x42470e40
 80067b4:	4b4a      	ldr	r3, [pc, #296]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	4a49      	ldr	r2, [pc, #292]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80067be:	6093      	str	r3, [r2, #8]
 80067c0:	4b47      	ldr	r3, [pc, #284]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067cc:	4944      	ldr	r1, [pc, #272]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0310 	and.w	r3, r3, #16
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d004      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80067e4:	4b3f      	ldr	r3, [pc, #252]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80067e6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00a      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80067f4:	4b3a      	ldr	r3, [pc, #232]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006802:	4937      	ldr	r1, [pc, #220]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006804:	4313      	orrs	r3, r2
 8006806:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006816:	4b32      	ldr	r3, [pc, #200]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800681c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006824:	492e      	ldr	r1, [pc, #184]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006826:	4313      	orrs	r3, r2
 8006828:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d011      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006838:	4b29      	ldr	r3, [pc, #164]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800683a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800683e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006846:	4926      	ldr	r1, [pc, #152]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006848:	4313      	orrs	r3, r2
 800684a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006852:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006856:	d101      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006858:	2301      	movs	r3, #1
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00a      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006868:	4b1d      	ldr	r3, [pc, #116]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800686a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800686e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006876:	491a      	ldr	r1, [pc, #104]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006878:	4313      	orrs	r3, r2
 800687a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006886:	2b00      	cmp	r3, #0
 8006888:	d011      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800688a:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800688c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006890:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006898:	4911      	ldr	r1, [pc, #68]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800689a:	4313      	orrs	r3, r2
 800689c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a8:	d101      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80068aa:	2301      	movs	r3, #1
 80068ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d005      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068bc:	f040 80ff 	bne.w	8006abe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068c0:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068c6:	f7fb febf 	bl	8002648 <HAL_GetTick>
 80068ca:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068cc:	e00e      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068ce:	f7fb febb 	bl	8002648 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d907      	bls.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e188      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80068e0:	40023800 	.word	0x40023800
 80068e4:	424711e0 	.word	0x424711e0
 80068e8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068ec:	4b7e      	ldr	r3, [pc, #504]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1ea      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	2b00      	cmp	r3, #0
 800690a:	d009      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006914:	2b00      	cmp	r3, #0
 8006916:	d028      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d124      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006920:	4b71      	ldr	r3, [pc, #452]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006926:	0c1b      	lsrs	r3, r3, #16
 8006928:	f003 0303 	and.w	r3, r3, #3
 800692c:	3301      	adds	r3, #1
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006932:	4b6d      	ldr	r3, [pc, #436]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006938:	0e1b      	lsrs	r3, r3, #24
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	019b      	lsls	r3, r3, #6
 800694a:	431a      	orrs	r2, r3
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	085b      	lsrs	r3, r3, #1
 8006950:	3b01      	subs	r3, #1
 8006952:	041b      	lsls	r3, r3, #16
 8006954:	431a      	orrs	r2, r3
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	061b      	lsls	r3, r3, #24
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	071b      	lsls	r3, r3, #28
 8006962:	4961      	ldr	r1, [pc, #388]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006964:	4313      	orrs	r3, r2
 8006966:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0304 	and.w	r3, r3, #4
 8006972:	2b00      	cmp	r3, #0
 8006974:	d004      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800697e:	d00a      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006988:	2b00      	cmp	r3, #0
 800698a:	d035      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006994:	d130      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006996:	4b54      	ldr	r3, [pc, #336]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800699c:	0c1b      	lsrs	r3, r3, #16
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	3301      	adds	r3, #1
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069a8:	4b4f      	ldr	r3, [pc, #316]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ae:	0f1b      	lsrs	r3, r3, #28
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	019b      	lsls	r3, r3, #6
 80069c0:	431a      	orrs	r2, r3
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	085b      	lsrs	r3, r3, #1
 80069c6:	3b01      	subs	r3, #1
 80069c8:	041b      	lsls	r3, r3, #16
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	061b      	lsls	r3, r3, #24
 80069d2:	431a      	orrs	r2, r3
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	071b      	lsls	r3, r3, #28
 80069d8:	4943      	ldr	r1, [pc, #268]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069e0:	4b41      	ldr	r3, [pc, #260]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069e6:	f023 021f 	bic.w	r2, r3, #31
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ee:	3b01      	subs	r3, #1
 80069f0:	493d      	ldr	r1, [pc, #244]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d029      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a0c:	d124      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006a0e:	4b36      	ldr	r3, [pc, #216]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a14:	0c1b      	lsrs	r3, r3, #16
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a20:	4b31      	ldr	r3, [pc, #196]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a26:	0f1b      	lsrs	r3, r3, #28
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	019b      	lsls	r3, r3, #6
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	085b      	lsrs	r3, r3, #1
 8006a40:	3b01      	subs	r3, #1
 8006a42:	041b      	lsls	r3, r3, #16
 8006a44:	431a      	orrs	r2, r3
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	061b      	lsls	r3, r3, #24
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	071b      	lsls	r3, r3, #28
 8006a50:	4925      	ldr	r1, [pc, #148]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d016      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	019b      	lsls	r3, r3, #6
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	085b      	lsrs	r3, r3, #1
 8006a76:	3b01      	subs	r3, #1
 8006a78:	041b      	lsls	r3, r3, #16
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	061b      	lsls	r3, r3, #24
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	071b      	lsls	r3, r3, #28
 8006a8a:	4917      	ldr	r1, [pc, #92]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a92:	4b16      	ldr	r3, [pc, #88]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a98:	f7fb fdd6 	bl	8002648 <HAL_GetTick>
 8006a9c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006aa0:	f7fb fdd2 	bl	8002648 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e09f      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0f0      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	f040 8095 	bne.w	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006acc:	f7fb fdbc 	bl	8002648 <HAL_GetTick>
 8006ad0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ad2:	e00f      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006ad4:	f7fb fdb8 	bl	8002648 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d908      	bls.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e085      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006ae6:	bf00      	nop
 8006ae8:	40023800 	.word	0x40023800
 8006aec:	42470068 	.word	0x42470068
 8006af0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006af4:	4b41      	ldr	r3, [pc, #260]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b00:	d0e8      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0304 	and.w	r3, r3, #4
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d009      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d02b      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d127      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006b2a:	4b34      	ldr	r3, [pc, #208]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	0c1b      	lsrs	r3, r3, #16
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	3301      	adds	r3, #1
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699a      	ldr	r2, [r3, #24]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	019b      	lsls	r3, r3, #6
 8006b46:	431a      	orrs	r2, r3
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	085b      	lsrs	r3, r3, #1
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	041b      	lsls	r3, r3, #16
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	061b      	lsls	r3, r3, #24
 8006b58:	4928      	ldr	r1, [pc, #160]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b60:	4b26      	ldr	r3, [pc, #152]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b66:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	021b      	lsls	r3, r3, #8
 8006b72:	4922      	ldr	r1, [pc, #136]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01d      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b8e:	d118      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b90:	4b1a      	ldr	r3, [pc, #104]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b96:	0e1b      	lsrs	r3, r3, #24
 8006b98:	f003 030f 	and.w	r3, r3, #15
 8006b9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699a      	ldr	r2, [r3, #24]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	019b      	lsls	r3, r3, #6
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	085b      	lsrs	r3, r3, #1
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	041b      	lsls	r3, r3, #16
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	061b      	lsls	r3, r3, #24
 8006bba:	4910      	ldr	r1, [pc, #64]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006bc2:	4b0f      	ldr	r3, [pc, #60]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bc8:	f7fb fd3e 	bl	8002648 <HAL_GetTick>
 8006bcc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bce:	e008      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006bd0:	f7fb fd3a 	bl	8002648 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e007      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006be2:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bee:	d1ef      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3730      	adds	r7, #48	; 0x30
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40023800 	.word	0x40023800
 8006c00:	42470070 	.word	0x42470070

08006c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c08:	b0ae      	sub	sp, #184	; 0xb8
 8006c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c2a:	4bcb      	ldr	r3, [pc, #812]	; (8006f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 030c 	and.w	r3, r3, #12
 8006c32:	2b0c      	cmp	r3, #12
 8006c34:	f200 8206 	bhi.w	8007044 <HAL_RCC_GetSysClockFreq+0x440>
 8006c38:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c75 	.word	0x08006c75
 8006c44:	08007045 	.word	0x08007045
 8006c48:	08007045 	.word	0x08007045
 8006c4c:	08007045 	.word	0x08007045
 8006c50:	08006c7d 	.word	0x08006c7d
 8006c54:	08007045 	.word	0x08007045
 8006c58:	08007045 	.word	0x08007045
 8006c5c:	08007045 	.word	0x08007045
 8006c60:	08006c85 	.word	0x08006c85
 8006c64:	08007045 	.word	0x08007045
 8006c68:	08007045 	.word	0x08007045
 8006c6c:	08007045 	.word	0x08007045
 8006c70:	08006e75 	.word	0x08006e75
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c74:	4bb9      	ldr	r3, [pc, #740]	; (8006f5c <HAL_RCC_GetSysClockFreq+0x358>)
 8006c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006c7a:	e1e7      	b.n	800704c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c7c:	4bb8      	ldr	r3, [pc, #736]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006c82:	e1e3      	b.n	800704c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c84:	4bb4      	ldr	r3, [pc, #720]	; (8006f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c90:	4bb1      	ldr	r3, [pc, #708]	; (8006f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d071      	beq.n	8006d80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c9c:	4bae      	ldr	r3, [pc, #696]	; (8006f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	099b      	lsrs	r3, r3, #6
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ca8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	462b      	mov	r3, r5
 8006cc6:	f04f 0000 	mov.w	r0, #0
 8006cca:	f04f 0100 	mov.w	r1, #0
 8006cce:	0159      	lsls	r1, r3, #5
 8006cd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cd4:	0150      	lsls	r0, r2, #5
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4621      	mov	r1, r4
 8006cdc:	1a51      	subs	r1, r2, r1
 8006cde:	6439      	str	r1, [r7, #64]	; 0x40
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce8:	f04f 0200 	mov.w	r2, #0
 8006cec:	f04f 0300 	mov.w	r3, #0
 8006cf0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	018b      	lsls	r3, r1, #6
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cfe:	4641      	mov	r1, r8
 8006d00:	018a      	lsls	r2, r1, #6
 8006d02:	4641      	mov	r1, r8
 8006d04:	1a51      	subs	r1, r2, r1
 8006d06:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d08:	4649      	mov	r1, r9
 8006d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8006d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	00cb      	lsls	r3, r1, #3
 8006d20:	4641      	mov	r1, r8
 8006d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d26:	4641      	mov	r1, r8
 8006d28:	00ca      	lsls	r2, r1, #3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4622      	mov	r2, r4
 8006d32:	189b      	adds	r3, r3, r2
 8006d34:	633b      	str	r3, [r7, #48]	; 0x30
 8006d36:	462b      	mov	r3, r5
 8006d38:	460a      	mov	r2, r1
 8006d3a:	eb42 0303 	adc.w	r3, r2, r3
 8006d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	024b      	lsls	r3, r1, #9
 8006d50:	4621      	mov	r1, r4
 8006d52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d56:	4621      	mov	r1, r4
 8006d58:	024a      	lsls	r2, r1, #9
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006d70:	f7f9 ff3a 	bl	8000be8 <__aeabi_uldivmod>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4613      	mov	r3, r2
 8006d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d7e:	e067      	b.n	8006e50 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d80:	4b75      	ldr	r3, [pc, #468]	; (8006f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	099b      	lsrs	r3, r3, #6
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d8c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006da2:	4622      	mov	r2, r4
 8006da4:	462b      	mov	r3, r5
 8006da6:	f04f 0000 	mov.w	r0, #0
 8006daa:	f04f 0100 	mov.w	r1, #0
 8006dae:	0159      	lsls	r1, r3, #5
 8006db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006db4:	0150      	lsls	r0, r2, #5
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4621      	mov	r1, r4
 8006dbc:	1a51      	subs	r1, r2, r1
 8006dbe:	62b9      	str	r1, [r7, #40]	; 0x28
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8006dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	018b      	lsls	r3, r1, #6
 8006dd8:	4641      	mov	r1, r8
 8006dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dde:	4641      	mov	r1, r8
 8006de0:	018a      	lsls	r2, r1, #6
 8006de2:	4641      	mov	r1, r8
 8006de4:	ebb2 0a01 	subs.w	sl, r2, r1
 8006de8:	4649      	mov	r1, r9
 8006dea:	eb63 0b01 	sbc.w	fp, r3, r1
 8006dee:	f04f 0200 	mov.w	r2, #0
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006dfa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006dfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e02:	4692      	mov	sl, r2
 8006e04:	469b      	mov	fp, r3
 8006e06:	4623      	mov	r3, r4
 8006e08:	eb1a 0303 	adds.w	r3, sl, r3
 8006e0c:	623b      	str	r3, [r7, #32]
 8006e0e:	462b      	mov	r3, r5
 8006e10:	eb4b 0303 	adc.w	r3, fp, r3
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
 8006e16:	f04f 0200 	mov.w	r2, #0
 8006e1a:	f04f 0300 	mov.w	r3, #0
 8006e1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006e22:	4629      	mov	r1, r5
 8006e24:	028b      	lsls	r3, r1, #10
 8006e26:	4621      	mov	r1, r4
 8006e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	028a      	lsls	r2, r1, #10
 8006e30:	4610      	mov	r0, r2
 8006e32:	4619      	mov	r1, r3
 8006e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e38:	2200      	movs	r2, #0
 8006e3a:	673b      	str	r3, [r7, #112]	; 0x70
 8006e3c:	677a      	str	r2, [r7, #116]	; 0x74
 8006e3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006e42:	f7f9 fed1 	bl	8000be8 <__aeabi_uldivmod>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e50:	4b41      	ldr	r3, [pc, #260]	; (8006f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	0c1b      	lsrs	r3, r3, #16
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006e72:	e0eb      	b.n	800704c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e74:	4b38      	ldr	r3, [pc, #224]	; (8006f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e80:	4b35      	ldr	r3, [pc, #212]	; (8006f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d06b      	beq.n	8006f64 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e8c:	4b32      	ldr	r3, [pc, #200]	; (8006f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	099b      	lsrs	r3, r3, #6
 8006e92:	2200      	movs	r2, #0
 8006e94:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	667b      	str	r3, [r7, #100]	; 0x64
 8006ea4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006ea8:	4622      	mov	r2, r4
 8006eaa:	462b      	mov	r3, r5
 8006eac:	f04f 0000 	mov.w	r0, #0
 8006eb0:	f04f 0100 	mov.w	r1, #0
 8006eb4:	0159      	lsls	r1, r3, #5
 8006eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006eba:	0150      	lsls	r0, r2, #5
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	1a51      	subs	r1, r2, r1
 8006ec4:	61b9      	str	r1, [r7, #24]
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	eb63 0301 	sbc.w	r3, r3, r1
 8006ecc:	61fb      	str	r3, [r7, #28]
 8006ece:	f04f 0200 	mov.w	r2, #0
 8006ed2:	f04f 0300 	mov.w	r3, #0
 8006ed6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006eda:	4659      	mov	r1, fp
 8006edc:	018b      	lsls	r3, r1, #6
 8006ede:	4651      	mov	r1, sl
 8006ee0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ee4:	4651      	mov	r1, sl
 8006ee6:	018a      	lsls	r2, r1, #6
 8006ee8:	4651      	mov	r1, sl
 8006eea:	ebb2 0801 	subs.w	r8, r2, r1
 8006eee:	4659      	mov	r1, fp
 8006ef0:	eb63 0901 	sbc.w	r9, r3, r1
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	f04f 0300 	mov.w	r3, #0
 8006efc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f08:	4690      	mov	r8, r2
 8006f0a:	4699      	mov	r9, r3
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	eb18 0303 	adds.w	r3, r8, r3
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	462b      	mov	r3, r5
 8006f16:	eb49 0303 	adc.w	r3, r9, r3
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	f04f 0200 	mov.w	r2, #0
 8006f20:	f04f 0300 	mov.w	r3, #0
 8006f24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006f28:	4629      	mov	r1, r5
 8006f2a:	024b      	lsls	r3, r1, #9
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f32:	4621      	mov	r1, r4
 8006f34:	024a      	lsls	r2, r1, #9
 8006f36:	4610      	mov	r0, r2
 8006f38:	4619      	mov	r1, r3
 8006f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f3e:	2200      	movs	r2, #0
 8006f40:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f42:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006f44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f48:	f7f9 fe4e 	bl	8000be8 <__aeabi_uldivmod>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4613      	mov	r3, r2
 8006f52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f56:	e065      	b.n	8007024 <HAL_RCC_GetSysClockFreq+0x420>
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	00f42400 	.word	0x00f42400
 8006f60:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f64:	4b3d      	ldr	r3, [pc, #244]	; (800705c <HAL_RCC_GetSysClockFreq+0x458>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	099b      	lsrs	r3, r3, #6
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	4611      	mov	r1, r2
 8006f70:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f74:	653b      	str	r3, [r7, #80]	; 0x50
 8006f76:	2300      	movs	r3, #0
 8006f78:	657b      	str	r3, [r7, #84]	; 0x54
 8006f7a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006f7e:	4642      	mov	r2, r8
 8006f80:	464b      	mov	r3, r9
 8006f82:	f04f 0000 	mov.w	r0, #0
 8006f86:	f04f 0100 	mov.w	r1, #0
 8006f8a:	0159      	lsls	r1, r3, #5
 8006f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f90:	0150      	lsls	r0, r2, #5
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	4641      	mov	r1, r8
 8006f98:	1a51      	subs	r1, r2, r1
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	f04f 0300 	mov.w	r3, #0
 8006fac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006fb0:	4659      	mov	r1, fp
 8006fb2:	018b      	lsls	r3, r1, #6
 8006fb4:	4651      	mov	r1, sl
 8006fb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006fba:	4651      	mov	r1, sl
 8006fbc:	018a      	lsls	r2, r1, #6
 8006fbe:	4651      	mov	r1, sl
 8006fc0:	1a54      	subs	r4, r2, r1
 8006fc2:	4659      	mov	r1, fp
 8006fc4:	eb63 0501 	sbc.w	r5, r3, r1
 8006fc8:	f04f 0200 	mov.w	r2, #0
 8006fcc:	f04f 0300 	mov.w	r3, #0
 8006fd0:	00eb      	lsls	r3, r5, #3
 8006fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fd6:	00e2      	lsls	r2, r4, #3
 8006fd8:	4614      	mov	r4, r2
 8006fda:	461d      	mov	r5, r3
 8006fdc:	4643      	mov	r3, r8
 8006fde:	18e3      	adds	r3, r4, r3
 8006fe0:	603b      	str	r3, [r7, #0]
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	eb45 0303 	adc.w	r3, r5, r3
 8006fe8:	607b      	str	r3, [r7, #4]
 8006fea:	f04f 0200 	mov.w	r2, #0
 8006fee:	f04f 0300 	mov.w	r3, #0
 8006ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	028b      	lsls	r3, r1, #10
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007000:	4621      	mov	r1, r4
 8007002:	028a      	lsls	r2, r1, #10
 8007004:	4610      	mov	r0, r2
 8007006:	4619      	mov	r1, r3
 8007008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800700c:	2200      	movs	r2, #0
 800700e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007010:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007012:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007016:	f7f9 fde7 	bl	8000be8 <__aeabi_uldivmod>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4613      	mov	r3, r2
 8007020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007024:	4b0d      	ldr	r3, [pc, #52]	; (800705c <HAL_RCC_GetSysClockFreq+0x458>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	0f1b      	lsrs	r3, r3, #28
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800703a:	fbb2 f3f3 	udiv	r3, r2, r3
 800703e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007042:	e003      	b.n	800704c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007044:	4b06      	ldr	r3, [pc, #24]	; (8007060 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800704a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800704c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007050:	4618      	mov	r0, r3
 8007052:	37b8      	adds	r7, #184	; 0xb8
 8007054:	46bd      	mov	sp, r7
 8007056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800705a:	bf00      	nop
 800705c:	40023800 	.word	0x40023800
 8007060:	00f42400 	.word	0x00f42400

08007064 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e28d      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 8083 	beq.w	800718a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007084:	4b94      	ldr	r3, [pc, #592]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f003 030c 	and.w	r3, r3, #12
 800708c:	2b04      	cmp	r3, #4
 800708e:	d019      	beq.n	80070c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007090:	4b91      	ldr	r3, [pc, #580]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007098:	2b08      	cmp	r3, #8
 800709a:	d106      	bne.n	80070aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800709c:	4b8e      	ldr	r3, [pc, #568]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070a8:	d00c      	beq.n	80070c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070aa:	4b8b      	ldr	r3, [pc, #556]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80070b2:	2b0c      	cmp	r3, #12
 80070b4:	d112      	bne.n	80070dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070b6:	4b88      	ldr	r3, [pc, #544]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070c2:	d10b      	bne.n	80070dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070c4:	4b84      	ldr	r3, [pc, #528]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d05b      	beq.n	8007188 <HAL_RCC_OscConfig+0x124>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d157      	bne.n	8007188 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e25a      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e4:	d106      	bne.n	80070f4 <HAL_RCC_OscConfig+0x90>
 80070e6:	4b7c      	ldr	r3, [pc, #496]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a7b      	ldr	r2, [pc, #492]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 80070ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	e01d      	b.n	8007130 <HAL_RCC_OscConfig+0xcc>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070fc:	d10c      	bne.n	8007118 <HAL_RCC_OscConfig+0xb4>
 80070fe:	4b76      	ldr	r3, [pc, #472]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a75      	ldr	r2, [pc, #468]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 8007104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	4b73      	ldr	r3, [pc, #460]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a72      	ldr	r2, [pc, #456]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 8007110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	e00b      	b.n	8007130 <HAL_RCC_OscConfig+0xcc>
 8007118:	4b6f      	ldr	r3, [pc, #444]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a6e      	ldr	r2, [pc, #440]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 800711e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	4b6c      	ldr	r3, [pc, #432]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a6b      	ldr	r2, [pc, #428]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 800712a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800712e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d013      	beq.n	8007160 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007138:	f7fb fa86 	bl	8002648 <HAL_GetTick>
 800713c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007140:	f7fb fa82 	bl	8002648 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b64      	cmp	r3, #100	; 0x64
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e21f      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007152:	4b61      	ldr	r3, [pc, #388]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0f0      	beq.n	8007140 <HAL_RCC_OscConfig+0xdc>
 800715e:	e014      	b.n	800718a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007160:	f7fb fa72 	bl	8002648 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007168:	f7fb fa6e 	bl	8002648 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b64      	cmp	r3, #100	; 0x64
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e20b      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800717a:	4b57      	ldr	r3, [pc, #348]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1f0      	bne.n	8007168 <HAL_RCC_OscConfig+0x104>
 8007186:	e000      	b.n	800718a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d06f      	beq.n	8007276 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007196:	4b50      	ldr	r3, [pc, #320]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f003 030c 	and.w	r3, r3, #12
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d017      	beq.n	80071d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80071a2:	4b4d      	ldr	r3, [pc, #308]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80071aa:	2b08      	cmp	r3, #8
 80071ac:	d105      	bne.n	80071ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80071ae:	4b4a      	ldr	r3, [pc, #296]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00b      	beq.n	80071d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071ba:	4b47      	ldr	r3, [pc, #284]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80071c2:	2b0c      	cmp	r3, #12
 80071c4:	d11c      	bne.n	8007200 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071c6:	4b44      	ldr	r3, [pc, #272]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d116      	bne.n	8007200 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071d2:	4b41      	ldr	r3, [pc, #260]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <HAL_RCC_OscConfig+0x186>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d001      	beq.n	80071ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e1d3      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ea:	4b3b      	ldr	r3, [pc, #236]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	4937      	ldr	r1, [pc, #220]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071fe:	e03a      	b.n	8007276 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d020      	beq.n	800724a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007208:	4b34      	ldr	r3, [pc, #208]	; (80072dc <HAL_RCC_OscConfig+0x278>)
 800720a:	2201      	movs	r2, #1
 800720c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720e:	f7fb fa1b 	bl	8002648 <HAL_GetTick>
 8007212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007214:	e008      	b.n	8007228 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007216:	f7fb fa17 	bl	8002648 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d901      	bls.n	8007228 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e1b4      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007228:	4b2b      	ldr	r3, [pc, #172]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0f0      	beq.n	8007216 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007234:	4b28      	ldr	r3, [pc, #160]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	4925      	ldr	r1, [pc, #148]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 8007244:	4313      	orrs	r3, r2
 8007246:	600b      	str	r3, [r1, #0]
 8007248:	e015      	b.n	8007276 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800724a:	4b24      	ldr	r3, [pc, #144]	; (80072dc <HAL_RCC_OscConfig+0x278>)
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007250:	f7fb f9fa 	bl	8002648 <HAL_GetTick>
 8007254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007256:	e008      	b.n	800726a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007258:	f7fb f9f6 	bl	8002648 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b02      	cmp	r3, #2
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e193      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800726a:	4b1b      	ldr	r3, [pc, #108]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1f0      	bne.n	8007258 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b00      	cmp	r3, #0
 8007280:	d036      	beq.n	80072f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d016      	beq.n	80072b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800728a:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <HAL_RCC_OscConfig+0x27c>)
 800728c:	2201      	movs	r2, #1
 800728e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007290:	f7fb f9da 	bl	8002648 <HAL_GetTick>
 8007294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007298:	f7fb f9d6 	bl	8002648 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e173      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072aa:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <HAL_RCC_OscConfig+0x274>)
 80072ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f0      	beq.n	8007298 <HAL_RCC_OscConfig+0x234>
 80072b6:	e01b      	b.n	80072f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072b8:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <HAL_RCC_OscConfig+0x27c>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072be:	f7fb f9c3 	bl	8002648 <HAL_GetTick>
 80072c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072c4:	e00e      	b.n	80072e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072c6:	f7fb f9bf 	bl	8002648 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d907      	bls.n	80072e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e15c      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
 80072d8:	40023800 	.word	0x40023800
 80072dc:	42470000 	.word	0x42470000
 80072e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072e4:	4b8a      	ldr	r3, [pc, #552]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 80072e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1ea      	bne.n	80072c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 8097 	beq.w	800742c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072fe:	2300      	movs	r3, #0
 8007300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007302:	4b83      	ldr	r3, [pc, #524]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10f      	bne.n	800732e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800730e:	2300      	movs	r3, #0
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	4b7f      	ldr	r3, [pc, #508]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	4a7e      	ldr	r2, [pc, #504]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 8007318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800731c:	6413      	str	r3, [r2, #64]	; 0x40
 800731e:	4b7c      	ldr	r3, [pc, #496]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007326:	60bb      	str	r3, [r7, #8]
 8007328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800732a:	2301      	movs	r3, #1
 800732c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800732e:	4b79      	ldr	r3, [pc, #484]	; (8007514 <HAL_RCC_OscConfig+0x4b0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007336:	2b00      	cmp	r3, #0
 8007338:	d118      	bne.n	800736c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800733a:	4b76      	ldr	r3, [pc, #472]	; (8007514 <HAL_RCC_OscConfig+0x4b0>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a75      	ldr	r2, [pc, #468]	; (8007514 <HAL_RCC_OscConfig+0x4b0>)
 8007340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007346:	f7fb f97f 	bl	8002648 <HAL_GetTick>
 800734a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800734c:	e008      	b.n	8007360 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800734e:	f7fb f97b 	bl	8002648 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d901      	bls.n	8007360 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e118      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007360:	4b6c      	ldr	r3, [pc, #432]	; (8007514 <HAL_RCC_OscConfig+0x4b0>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0f0      	beq.n	800734e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d106      	bne.n	8007382 <HAL_RCC_OscConfig+0x31e>
 8007374:	4b66      	ldr	r3, [pc, #408]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 8007376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007378:	4a65      	ldr	r2, [pc, #404]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 800737a:	f043 0301 	orr.w	r3, r3, #1
 800737e:	6713      	str	r3, [r2, #112]	; 0x70
 8007380:	e01c      	b.n	80073bc <HAL_RCC_OscConfig+0x358>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2b05      	cmp	r3, #5
 8007388:	d10c      	bne.n	80073a4 <HAL_RCC_OscConfig+0x340>
 800738a:	4b61      	ldr	r3, [pc, #388]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 800738c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738e:	4a60      	ldr	r2, [pc, #384]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 8007390:	f043 0304 	orr.w	r3, r3, #4
 8007394:	6713      	str	r3, [r2, #112]	; 0x70
 8007396:	4b5e      	ldr	r3, [pc, #376]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 8007398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800739a:	4a5d      	ldr	r2, [pc, #372]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 800739c:	f043 0301 	orr.w	r3, r3, #1
 80073a0:	6713      	str	r3, [r2, #112]	; 0x70
 80073a2:	e00b      	b.n	80073bc <HAL_RCC_OscConfig+0x358>
 80073a4:	4b5a      	ldr	r3, [pc, #360]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 80073a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a8:	4a59      	ldr	r2, [pc, #356]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 80073aa:	f023 0301 	bic.w	r3, r3, #1
 80073ae:	6713      	str	r3, [r2, #112]	; 0x70
 80073b0:	4b57      	ldr	r3, [pc, #348]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 80073b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b4:	4a56      	ldr	r2, [pc, #344]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 80073b6:	f023 0304 	bic.w	r3, r3, #4
 80073ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d015      	beq.n	80073f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c4:	f7fb f940 	bl	8002648 <HAL_GetTick>
 80073c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ca:	e00a      	b.n	80073e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073cc:	f7fb f93c 	bl	8002648 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073da:	4293      	cmp	r3, r2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e0d7      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073e2:	4b4b      	ldr	r3, [pc, #300]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 80073e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0ee      	beq.n	80073cc <HAL_RCC_OscConfig+0x368>
 80073ee:	e014      	b.n	800741a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f0:	f7fb f92a 	bl	8002648 <HAL_GetTick>
 80073f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073f6:	e00a      	b.n	800740e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073f8:	f7fb f926 	bl	8002648 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	f241 3288 	movw	r2, #5000	; 0x1388
 8007406:	4293      	cmp	r3, r2
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e0c1      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800740e:	4b40      	ldr	r3, [pc, #256]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1ee      	bne.n	80073f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800741a:	7dfb      	ldrb	r3, [r7, #23]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d105      	bne.n	800742c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007420:	4b3b      	ldr	r3, [pc, #236]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 8007422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007424:	4a3a      	ldr	r2, [pc, #232]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 8007426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800742a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 80ad 	beq.w	8007590 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007436:	4b36      	ldr	r3, [pc, #216]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f003 030c 	and.w	r3, r3, #12
 800743e:	2b08      	cmp	r3, #8
 8007440:	d060      	beq.n	8007504 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	2b02      	cmp	r3, #2
 8007448:	d145      	bne.n	80074d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800744a:	4b33      	ldr	r3, [pc, #204]	; (8007518 <HAL_RCC_OscConfig+0x4b4>)
 800744c:	2200      	movs	r2, #0
 800744e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007450:	f7fb f8fa 	bl	8002648 <HAL_GetTick>
 8007454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007456:	e008      	b.n	800746a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007458:	f7fb f8f6 	bl	8002648 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	2b02      	cmp	r3, #2
 8007464:	d901      	bls.n	800746a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e093      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800746a:	4b29      	ldr	r3, [pc, #164]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1f0      	bne.n	8007458 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	69da      	ldr	r2, [r3, #28]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	019b      	lsls	r3, r3, #6
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748c:	085b      	lsrs	r3, r3, #1
 800748e:	3b01      	subs	r3, #1
 8007490:	041b      	lsls	r3, r3, #16
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	061b      	lsls	r3, r3, #24
 800749a:	431a      	orrs	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a0:	071b      	lsls	r3, r3, #28
 80074a2:	491b      	ldr	r1, [pc, #108]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074a8:	4b1b      	ldr	r3, [pc, #108]	; (8007518 <HAL_RCC_OscConfig+0x4b4>)
 80074aa:	2201      	movs	r2, #1
 80074ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ae:	f7fb f8cb 	bl	8002648 <HAL_GetTick>
 80074b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074b4:	e008      	b.n	80074c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074b6:	f7fb f8c7 	bl	8002648 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e064      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074c8:	4b11      	ldr	r3, [pc, #68]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0f0      	beq.n	80074b6 <HAL_RCC_OscConfig+0x452>
 80074d4:	e05c      	b.n	8007590 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074d6:	4b10      	ldr	r3, [pc, #64]	; (8007518 <HAL_RCC_OscConfig+0x4b4>)
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074dc:	f7fb f8b4 	bl	8002648 <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074e2:	e008      	b.n	80074f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074e4:	f7fb f8b0 	bl	8002648 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e04d      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074f6:	4b06      	ldr	r3, [pc, #24]	; (8007510 <HAL_RCC_OscConfig+0x4ac>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1f0      	bne.n	80074e4 <HAL_RCC_OscConfig+0x480>
 8007502:	e045      	b.n	8007590 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d107      	bne.n	800751c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e040      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
 8007510:	40023800 	.word	0x40023800
 8007514:	40007000 	.word	0x40007000
 8007518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800751c:	4b1f      	ldr	r3, [pc, #124]	; (800759c <HAL_RCC_OscConfig+0x538>)
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d030      	beq.n	800758c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007534:	429a      	cmp	r2, r3
 8007536:	d129      	bne.n	800758c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007542:	429a      	cmp	r2, r3
 8007544:	d122      	bne.n	800758c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800754c:	4013      	ands	r3, r2
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007554:	4293      	cmp	r3, r2
 8007556:	d119      	bne.n	800758c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007562:	085b      	lsrs	r3, r3, #1
 8007564:	3b01      	subs	r3, #1
 8007566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007568:	429a      	cmp	r2, r3
 800756a:	d10f      	bne.n	800758c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007578:	429a      	cmp	r2, r3
 800757a:	d107      	bne.n	800758c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007588:	429a      	cmp	r2, r3
 800758a:	d001      	beq.n	8007590 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e000      	b.n	8007592 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	40023800 	.word	0x40023800

080075a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e066      	b.n	8007684 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	7f5b      	ldrb	r3, [r3, #29]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d105      	bne.n	80075cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7fa fd66 	bl	8002098 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	22ca      	movs	r2, #202	; 0xca
 80075d8:	625a      	str	r2, [r3, #36]	; 0x24
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2253      	movs	r2, #83	; 0x53
 80075e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fb6f 	bl	8007cc6 <RTC_EnterInitMode>
 80075e8:	4603      	mov	r3, r0
 80075ea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d12c      	bne.n	800764c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6812      	ldr	r2, [r2, #0]
 80075fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007604:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6899      	ldr	r1, [r3, #8]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	431a      	orrs	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	431a      	orrs	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	430a      	orrs	r2, r1
 8007622:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	68d2      	ldr	r2, [r2, #12]
 800762c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6919      	ldr	r1, [r3, #16]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	041a      	lsls	r2, r3, #16
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fb76 	bl	8007d34 <RTC_ExitInitMode>
 8007648:	4603      	mov	r3, r0
 800764a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d113      	bne.n	800767a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007660:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699a      	ldr	r2, [r3, #24]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	22ff      	movs	r2, #255	; 0xff
 8007680:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007682:	7bfb      	ldrb	r3, [r7, #15]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800768c:	b590      	push	{r4, r7, lr}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	7f1b      	ldrb	r3, [r3, #28]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d101      	bne.n	80076a8 <HAL_RTC_SetTime+0x1c>
 80076a4:	2302      	movs	r3, #2
 80076a6:	e087      	b.n	80077b8 <HAL_RTC_SetTime+0x12c>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2201      	movs	r2, #1
 80076ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2202      	movs	r2, #2
 80076b2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d126      	bne.n	8007708 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d102      	bne.n	80076ce <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2200      	movs	r2, #0
 80076cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fb53 	bl	8007d7e <RTC_ByteToBcd2>
 80076d8:	4603      	mov	r3, r0
 80076da:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	785b      	ldrb	r3, [r3, #1]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 fb4c 	bl	8007d7e <RTC_ByteToBcd2>
 80076e6:	4603      	mov	r3, r0
 80076e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80076ea:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	789b      	ldrb	r3, [r3, #2]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 fb44 	bl	8007d7e <RTC_ByteToBcd2>
 80076f6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80076f8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	78db      	ldrb	r3, [r3, #3]
 8007700:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007702:	4313      	orrs	r3, r2
 8007704:	617b      	str	r3, [r7, #20]
 8007706:	e018      	b.n	800773a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007712:	2b00      	cmp	r3, #0
 8007714:	d102      	bne.n	800771c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2200      	movs	r2, #0
 800771a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	785b      	ldrb	r3, [r3, #1]
 8007726:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007728:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800772e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	78db      	ldrb	r3, [r3, #3]
 8007734:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007736:	4313      	orrs	r3, r2
 8007738:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	22ca      	movs	r2, #202	; 0xca
 8007740:	625a      	str	r2, [r3, #36]	; 0x24
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2253      	movs	r2, #83	; 0x53
 8007748:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fabb 	bl	8007cc6 <RTC_EnterInitMode>
 8007750:	4603      	mov	r3, r0
 8007752:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007754:	7cfb      	ldrb	r3, [r7, #19]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d120      	bne.n	800779c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007764:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007768:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007778:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6899      	ldr	r1, [r3, #8]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	431a      	orrs	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 face 	bl	8007d34 <RTC_ExitInitMode>
 8007798:	4603      	mov	r3, r0
 800779a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800779c:	7cfb      	ldrb	r3, [r7, #19]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d102      	bne.n	80077a8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	22ff      	movs	r2, #255	; 0xff
 80077ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	771a      	strb	r2, [r3, #28]

  return status;
 80077b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	371c      	adds	r7, #28
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd90      	pop	{r4, r7, pc}

080077c0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80077f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80077f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	0c1b      	lsrs	r3, r3, #16
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007802:	b2da      	uxtb	r2, r3
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	0a1b      	lsrs	r3, r3, #8
 800780c:	b2db      	uxtb	r3, r3
 800780e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007812:	b2da      	uxtb	r2, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	b2db      	uxtb	r3, r3
 800781c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007820:	b2da      	uxtb	r2, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	0d9b      	lsrs	r3, r3, #22
 800782a:	b2db      	uxtb	r3, r3
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	b2da      	uxtb	r2, r3
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d11a      	bne.n	8007872 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	4618      	mov	r0, r3
 8007842:	f000 fab9 	bl	8007db8 <RTC_Bcd2ToByte>
 8007846:	4603      	mov	r3, r0
 8007848:	461a      	mov	r2, r3
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	785b      	ldrb	r3, [r3, #1]
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fab0 	bl	8007db8 <RTC_Bcd2ToByte>
 8007858:	4603      	mov	r3, r0
 800785a:	461a      	mov	r2, r3
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	789b      	ldrb	r3, [r3, #2]
 8007864:	4618      	mov	r0, r3
 8007866:	f000 faa7 	bl	8007db8 <RTC_Bcd2ToByte>
 800786a:	4603      	mov	r3, r0
 800786c:	461a      	mov	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800787c:	b590      	push	{r4, r7, lr}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	7f1b      	ldrb	r3, [r3, #28]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_RTC_SetDate+0x1c>
 8007894:	2302      	movs	r3, #2
 8007896:	e071      	b.n	800797c <HAL_RTC_SetDate+0x100>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2202      	movs	r2, #2
 80078a2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10e      	bne.n	80078c8 <HAL_RTC_SetDate+0x4c>
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	785b      	ldrb	r3, [r3, #1]
 80078ae:	f003 0310 	and.w	r3, r3, #16
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	f023 0310 	bic.w	r3, r3, #16
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	330a      	adds	r3, #10
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d11c      	bne.n	8007908 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	78db      	ldrb	r3, [r3, #3]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 fa53 	bl	8007d7e <RTC_ByteToBcd2>
 80078d8:	4603      	mov	r3, r0
 80078da:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	785b      	ldrb	r3, [r3, #1]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 fa4c 	bl	8007d7e <RTC_ByteToBcd2>
 80078e6:	4603      	mov	r3, r0
 80078e8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80078ea:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	789b      	ldrb	r3, [r3, #2]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 fa44 	bl	8007d7e <RTC_ByteToBcd2>
 80078f6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80078f8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	e00e      	b.n	8007926 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	78db      	ldrb	r3, [r3, #3]
 800790c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007914:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800791a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	22ca      	movs	r2, #202	; 0xca
 800792c:	625a      	str	r2, [r3, #36]	; 0x24
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2253      	movs	r2, #83	; 0x53
 8007934:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 f9c5 	bl	8007cc6 <RTC_EnterInitMode>
 800793c:	4603      	mov	r3, r0
 800793e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007940:	7cfb      	ldrb	r3, [r7, #19]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10c      	bne.n	8007960 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007950:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007954:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f9ec 	bl	8007d34 <RTC_ExitInitMode>
 800795c:	4603      	mov	r3, r0
 800795e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007960:	7cfb      	ldrb	r3, [r7, #19]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d102      	bne.n	800796c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2201      	movs	r2, #1
 800796a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	22ff      	movs	r2, #255	; 0xff
 8007972:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	771a      	strb	r2, [r3, #28]

  return status;
 800797a:	7cfb      	ldrb	r3, [r7, #19]
}
 800797c:	4618      	mov	r0, r3
 800797e:	371c      	adds	r7, #28
 8007980:	46bd      	mov	sp, r7
 8007982:	bd90      	pop	{r4, r7, pc}

08007984 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800799e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80079a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	0c1b      	lsrs	r3, r3, #16
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	0a1b      	lsrs	r3, r3, #8
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	f003 031f 	and.w	r3, r3, #31
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	0b5b      	lsrs	r3, r3, #13
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d11a      	bne.n	8007a18 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	78db      	ldrb	r3, [r3, #3]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 f9e6 	bl	8007db8 <RTC_Bcd2ToByte>
 80079ec:	4603      	mov	r3, r0
 80079ee:	461a      	mov	r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 f9dd 	bl	8007db8 <RTC_Bcd2ToByte>
 80079fe:	4603      	mov	r3, r0
 8007a00:	461a      	mov	r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	789b      	ldrb	r3, [r3, #2]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 f9d4 	bl	8007db8 <RTC_Bcd2ToByte>
 8007a10:	4603      	mov	r3, r0
 8007a12:	461a      	mov	r2, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007a22:	b590      	push	{r4, r7, lr}
 8007a24:	b089      	sub	sp, #36	; 0x24
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	7f1b      	ldrb	r3, [r3, #28]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d101      	bne.n	8007a46 <HAL_RTC_SetAlarm+0x24>
 8007a42:	2302      	movs	r3, #2
 8007a44:	e113      	b.n	8007c6e <HAL_RTC_SetAlarm+0x24c>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d137      	bne.n	8007ac8 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d102      	bne.n	8007a6c <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 f984 	bl	8007d7e <RTC_ByteToBcd2>
 8007a76:	4603      	mov	r3, r0
 8007a78:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 f97d 	bl	8007d7e <RTC_ByteToBcd2>
 8007a84:	4603      	mov	r3, r0
 8007a86:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007a88:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	789b      	ldrb	r3, [r3, #2]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 f975 	bl	8007d7e <RTC_ByteToBcd2>
 8007a94:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007a96:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	78db      	ldrb	r3, [r3, #3]
 8007a9e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007aa0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 f967 	bl	8007d7e <RTC_ByteToBcd2>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007ab4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007abc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	61fb      	str	r3, [r7, #28]
 8007ac6:	e023      	b.n	8007b10 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d102      	bne.n	8007adc <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	785b      	ldrb	r3, [r3, #1]
 8007ae6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007ae8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007aee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	78db      	ldrb	r3, [r3, #3]
 8007af4:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007af6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007afe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007b00:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007b06:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	22ca      	movs	r2, #202	; 0xca
 8007b22:	625a      	str	r2, [r3, #36]	; 0x24
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2253      	movs	r2, #83	; 0x53
 8007b2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b34:	d148      	bne.n	8007bc8 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b44:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689a      	ldr	r2, [r3, #8]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b54:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007b66:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b68:	f7fa fd6e 	bl	8002648 <HAL_GetTick>
 8007b6c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007b6e:	e013      	b.n	8007b98 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b70:	f7fa fd6a 	bl	8002648 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b7e:	d90b      	bls.n	8007b98 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	22ff      	movs	r2, #255	; 0xff
 8007b86:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e06a      	b.n	8007c6e <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0e4      	beq.n	8007b70 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bc4:	609a      	str	r2, [r3, #8]
 8007bc6:	e047      	b.n	8007c58 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007bd6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689a      	ldr	r2, [r3, #8]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007be6:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007bf8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bfa:	f7fa fd25 	bl	8002648 <HAL_GetTick>
 8007bfe:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007c00:	e013      	b.n	8007c2a <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c02:	f7fa fd21 	bl	8002648 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c10:	d90b      	bls.n	8007c2a <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	22ff      	movs	r2, #255	; 0xff
 8007c18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2203      	movs	r2, #3
 8007c1e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e021      	b.n	8007c6e <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0e4      	beq.n	8007c02 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c56:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	22ff      	movs	r2, #255	; 0xff
 8007c5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2201      	movs	r2, #1
 8007c64:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3724      	adds	r7, #36	; 0x24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd90      	pop	{r4, r7, pc}

08007c76 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c90:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c92:	f7fa fcd9 	bl	8002648 <HAL_GetTick>
 8007c96:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c98:	e009      	b.n	8007cae <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c9a:	f7fa fcd5 	bl	8002648 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ca8:	d901      	bls.n	8007cae <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e007      	b.n	8007cbe <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0ee      	beq.n	8007c9a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d122      	bne.n	8007d2a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cf2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007cf4:	f7fa fca8 	bl	8002648 <HAL_GetTick>
 8007cf8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007cfa:	e00c      	b.n	8007d16 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007cfc:	f7fa fca4 	bl	8002648 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d0a:	d904      	bls.n	8007d16 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2204      	movs	r2, #4
 8007d10:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d102      	bne.n	8007d2a <RTC_EnterInitMode+0x64>
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d1e8      	bne.n	8007cfc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d4e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 0320 	and.w	r3, r3, #32
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff ff89 	bl	8007c76 <HAL_RTC_WaitForSynchro>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d004      	beq.n	8007d74 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b085      	sub	sp, #20
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	4603      	mov	r3, r0
 8007d86:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007d8c:	e005      	b.n	8007d9a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	3301      	adds	r3, #1
 8007d92:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007d94:	79fb      	ldrb	r3, [r7, #7]
 8007d96:	3b0a      	subs	r3, #10
 8007d98:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	2b09      	cmp	r3, #9
 8007d9e:	d8f6      	bhi.n	8007d8e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
 8007da2:	011b      	lsls	r3, r3, #4
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	79fb      	ldrb	r3, [r7, #7]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	b2db      	uxtb	r3, r3
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	091b      	lsrs	r3, r3, #4
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	461a      	mov	r2, r3
 8007dce:	0092      	lsls	r2, r2, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007dd6:	79fb      	ldrb	r3, [r7, #7]
 8007dd8:	f003 030f 	and.w	r3, r3, #15
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	4413      	add	r3, r2
 8007de2:	b2db      	uxtb	r3, r3
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e07b      	b.n	8007efa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d108      	bne.n	8007e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e12:	d009      	beq.n	8007e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	61da      	str	r2, [r3, #28]
 8007e1a:	e005      	b.n	8007e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d106      	bne.n	8007e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7fa f952 	bl	80020ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e70:	431a      	orrs	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	431a      	orrs	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eac:	ea42 0103 	orr.w	r1, r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	0c1b      	lsrs	r3, r3, #16
 8007ec6:	f003 0104 	and.w	r1, r3, #4
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	f003 0210 	and.w	r2, r3, #16
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b088      	sub	sp, #32
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	603b      	str	r3, [r7, #0]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d101      	bne.n	8007f24 <HAL_SPI_Transmit+0x22>
 8007f20:	2302      	movs	r3, #2
 8007f22:	e126      	b.n	8008172 <HAL_SPI_Transmit+0x270>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f2c:	f7fa fb8c 	bl	8002648 <HAL_GetTick>
 8007f30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f32:	88fb      	ldrh	r3, [r7, #6]
 8007f34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d002      	beq.n	8007f48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f42:	2302      	movs	r3, #2
 8007f44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f46:	e10b      	b.n	8008160 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <HAL_SPI_Transmit+0x52>
 8007f4e:	88fb      	ldrh	r3, [r7, #6]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d102      	bne.n	8007f5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f58:	e102      	b.n	8008160 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	88fa      	ldrh	r2, [r7, #6]
 8007f72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	88fa      	ldrh	r2, [r7, #6]
 8007f78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fa0:	d10f      	bne.n	8007fc2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fcc:	2b40      	cmp	r3, #64	; 0x40
 8007fce:	d007      	beq.n	8007fe0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fe8:	d14b      	bne.n	8008082 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <HAL_SPI_Transmit+0xf6>
 8007ff2:	8afb      	ldrh	r3, [r7, #22]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d13e      	bne.n	8008076 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffc:	881a      	ldrh	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008008:	1c9a      	adds	r2, r3, #2
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008012:	b29b      	uxth	r3, r3
 8008014:	3b01      	subs	r3, #1
 8008016:	b29a      	uxth	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800801c:	e02b      	b.n	8008076 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f003 0302 	and.w	r3, r3, #2
 8008028:	2b02      	cmp	r3, #2
 800802a:	d112      	bne.n	8008052 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008030:	881a      	ldrh	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803c:	1c9a      	adds	r2, r3, #2
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008046:	b29b      	uxth	r3, r3
 8008048:	3b01      	subs	r3, #1
 800804a:	b29a      	uxth	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008050:	e011      	b.n	8008076 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008052:	f7fa faf9 	bl	8002648 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	429a      	cmp	r2, r3
 8008060:	d803      	bhi.n	800806a <HAL_SPI_Transmit+0x168>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008068:	d102      	bne.n	8008070 <HAL_SPI_Transmit+0x16e>
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d102      	bne.n	8008076 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008074:	e074      	b.n	8008160 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800807a:	b29b      	uxth	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1ce      	bne.n	800801e <HAL_SPI_Transmit+0x11c>
 8008080:	e04c      	b.n	800811c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <HAL_SPI_Transmit+0x18e>
 800808a:	8afb      	ldrh	r3, [r7, #22]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d140      	bne.n	8008112 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	330c      	adds	r3, #12
 800809a:	7812      	ldrb	r2, [r2, #0]
 800809c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a2:	1c5a      	adds	r2, r3, #1
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080b6:	e02c      	b.n	8008112 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d113      	bne.n	80080ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	330c      	adds	r3, #12
 80080d0:	7812      	ldrb	r2, [r2, #0]
 80080d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	3b01      	subs	r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80080ec:	e011      	b.n	8008112 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080ee:	f7fa faab 	bl	8002648 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d803      	bhi.n	8008106 <HAL_SPI_Transmit+0x204>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008104:	d102      	bne.n	800810c <HAL_SPI_Transmit+0x20a>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d102      	bne.n	8008112 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008110:	e026      	b.n	8008160 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008116:	b29b      	uxth	r3, r3
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1cd      	bne.n	80080b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800811c:	69ba      	ldr	r2, [r7, #24]
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 fa55 	bl	80085d0 <SPI_EndRxTxTransaction>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2220      	movs	r2, #32
 8008130:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800813a:	2300      	movs	r3, #0
 800813c:	613b      	str	r3, [r7, #16]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	613b      	str	r3, [r7, #16]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	613b      	str	r3, [r7, #16]
 800814e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	77fb      	strb	r3, [r7, #31]
 800815c:	e000      	b.n	8008160 <HAL_SPI_Transmit+0x25e>
  }

error:
 800815e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008170:	7ffb      	ldrb	r3, [r7, #31]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3720      	adds	r7, #32
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b08c      	sub	sp, #48	; 0x30
 800817e:	af00      	add	r7, sp, #0
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	607a      	str	r2, [r7, #4]
 8008186:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008188:	2301      	movs	r3, #1
 800818a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <HAL_SPI_TransmitReceive+0x26>
 800819c:	2302      	movs	r3, #2
 800819e:	e18a      	b.n	80084b6 <HAL_SPI_TransmitReceive+0x33c>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081a8:	f7fa fa4e 	bl	8002648 <HAL_GetTick>
 80081ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80081be:	887b      	ldrh	r3, [r7, #2]
 80081c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d00f      	beq.n	80081ea <HAL_SPI_TransmitReceive+0x70>
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081d0:	d107      	bne.n	80081e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d103      	bne.n	80081e2 <HAL_SPI_TransmitReceive+0x68>
 80081da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d003      	beq.n	80081ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80081e2:	2302      	movs	r3, #2
 80081e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80081e8:	e15b      	b.n	80084a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <HAL_SPI_TransmitReceive+0x82>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <HAL_SPI_TransmitReceive+0x82>
 80081f6:	887b      	ldrh	r3, [r7, #2]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d103      	bne.n	8008204 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008202:	e14e      	b.n	80084a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b04      	cmp	r3, #4
 800820e:	d003      	beq.n	8008218 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2205      	movs	r2, #5
 8008214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	887a      	ldrh	r2, [r7, #2]
 8008228:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	887a      	ldrh	r2, [r7, #2]
 800822e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	887a      	ldrh	r2, [r7, #2]
 800823a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	887a      	ldrh	r2, [r7, #2]
 8008240:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008258:	2b40      	cmp	r3, #64	; 0x40
 800825a:	d007      	beq.n	800826c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800826a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008274:	d178      	bne.n	8008368 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <HAL_SPI_TransmitReceive+0x10a>
 800827e:	8b7b      	ldrh	r3, [r7, #26]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d166      	bne.n	8008352 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008288:	881a      	ldrh	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008294:	1c9a      	adds	r2, r3, #2
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800829e:	b29b      	uxth	r3, r3
 80082a0:	3b01      	subs	r3, #1
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082a8:	e053      	b.n	8008352 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f003 0302 	and.w	r3, r3, #2
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d11b      	bne.n	80082f0 <HAL_SPI_TransmitReceive+0x176>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082bc:	b29b      	uxth	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d016      	beq.n	80082f0 <HAL_SPI_TransmitReceive+0x176>
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d113      	bne.n	80082f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082cc:	881a      	ldrh	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d8:	1c9a      	adds	r2, r3, #2
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	3b01      	subs	r3, #1
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d119      	bne.n	8008332 <HAL_SPI_TransmitReceive+0x1b8>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008302:	b29b      	uxth	r3, r3
 8008304:	2b00      	cmp	r3, #0
 8008306:	d014      	beq.n	8008332 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008312:	b292      	uxth	r2, r2
 8008314:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831a:	1c9a      	adds	r2, r3, #2
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008324:	b29b      	uxth	r3, r3
 8008326:	3b01      	subs	r3, #1
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800832e:	2301      	movs	r3, #1
 8008330:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008332:	f7fa f989 	bl	8002648 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800833e:	429a      	cmp	r2, r3
 8008340:	d807      	bhi.n	8008352 <HAL_SPI_TransmitReceive+0x1d8>
 8008342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008348:	d003      	beq.n	8008352 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008350:	e0a7      	b.n	80084a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008356:	b29b      	uxth	r3, r3
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1a6      	bne.n	80082aa <HAL_SPI_TransmitReceive+0x130>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008360:	b29b      	uxth	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1a1      	bne.n	80082aa <HAL_SPI_TransmitReceive+0x130>
 8008366:	e07c      	b.n	8008462 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <HAL_SPI_TransmitReceive+0x1fc>
 8008370:	8b7b      	ldrh	r3, [r7, #26]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d16b      	bne.n	800844e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	330c      	adds	r3, #12
 8008380:	7812      	ldrb	r2, [r2, #0]
 8008382:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008392:	b29b      	uxth	r3, r3
 8008394:	3b01      	subs	r3, #1
 8008396:	b29a      	uxth	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800839c:	e057      	b.n	800844e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d11c      	bne.n	80083e6 <HAL_SPI_TransmitReceive+0x26c>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d017      	beq.n	80083e6 <HAL_SPI_TransmitReceive+0x26c>
 80083b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d114      	bne.n	80083e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	330c      	adds	r3, #12
 80083c6:	7812      	ldrb	r2, [r2, #0]
 80083c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3b01      	subs	r3, #1
 80083dc:	b29a      	uxth	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d119      	bne.n	8008428 <HAL_SPI_TransmitReceive+0x2ae>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d014      	beq.n	8008428 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008408:	b2d2      	uxtb	r2, r2
 800840a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	1c5a      	adds	r2, r3, #1
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800841a:	b29b      	uxth	r3, r3
 800841c:	3b01      	subs	r3, #1
 800841e:	b29a      	uxth	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008424:	2301      	movs	r3, #1
 8008426:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008428:	f7fa f90e 	bl	8002648 <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008434:	429a      	cmp	r2, r3
 8008436:	d803      	bhi.n	8008440 <HAL_SPI_TransmitReceive+0x2c6>
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843e:	d102      	bne.n	8008446 <HAL_SPI_TransmitReceive+0x2cc>
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	2b00      	cmp	r3, #0
 8008444:	d103      	bne.n	800844e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800844c:	e029      	b.n	80084a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008452:	b29b      	uxth	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1a2      	bne.n	800839e <HAL_SPI_TransmitReceive+0x224>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800845c:	b29b      	uxth	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d19d      	bne.n	800839e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008464:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 f8b2 	bl	80085d0 <SPI_EndRxTxTransaction>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d006      	beq.n	8008480 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2220      	movs	r2, #32
 800847c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800847e:	e010      	b.n	80084a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10b      	bne.n	80084a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008488:	2300      	movs	r3, #0
 800848a:	617b      	str	r3, [r7, #20]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	617b      	str	r3, [r7, #20]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	617b      	str	r3, [r7, #20]
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	e000      	b.n	80084a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80084a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80084b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3730      	adds	r7, #48	; 0x30
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b088      	sub	sp, #32
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	4613      	mov	r3, r2
 80084ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084d0:	f7fa f8ba 	bl	8002648 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	1a9b      	subs	r3, r3, r2
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	4413      	add	r3, r2
 80084de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80084e0:	f7fa f8b2 	bl	8002648 <HAL_GetTick>
 80084e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80084e6:	4b39      	ldr	r3, [pc, #228]	; (80085cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	015b      	lsls	r3, r3, #5
 80084ec:	0d1b      	lsrs	r3, r3, #20
 80084ee:	69fa      	ldr	r2, [r7, #28]
 80084f0:	fb02 f303 	mul.w	r3, r2, r3
 80084f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084f6:	e054      	b.n	80085a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fe:	d050      	beq.n	80085a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008500:	f7fa f8a2 	bl	8002648 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	429a      	cmp	r2, r3
 800850e:	d902      	bls.n	8008516 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d13d      	bne.n	8008592 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008524:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800852e:	d111      	bne.n	8008554 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008538:	d004      	beq.n	8008544 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008542:	d107      	bne.n	8008554 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008552:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800855c:	d10f      	bne.n	800857e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800857c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e017      	b.n	80085c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	3b01      	subs	r3, #1
 80085a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	4013      	ands	r3, r2
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	bf0c      	ite	eq
 80085b2:	2301      	moveq	r3, #1
 80085b4:	2300      	movne	r3, #0
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	461a      	mov	r2, r3
 80085ba:	79fb      	ldrb	r3, [r7, #7]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d19b      	bne.n	80084f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3720      	adds	r7, #32
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20000000 	.word	0x20000000

080085d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b088      	sub	sp, #32
 80085d4:	af02      	add	r7, sp, #8
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80085dc:	4b1b      	ldr	r3, [pc, #108]	; (800864c <SPI_EndRxTxTransaction+0x7c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a1b      	ldr	r2, [pc, #108]	; (8008650 <SPI_EndRxTxTransaction+0x80>)
 80085e2:	fba2 2303 	umull	r2, r3, r2, r3
 80085e6:	0d5b      	lsrs	r3, r3, #21
 80085e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085ec:	fb02 f303 	mul.w	r3, r2, r3
 80085f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085fa:	d112      	bne.n	8008622 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2200      	movs	r2, #0
 8008604:	2180      	movs	r1, #128	; 0x80
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f7ff ff5a 	bl	80084c0 <SPI_WaitFlagStateUntilTimeout>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d016      	beq.n	8008640 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008616:	f043 0220 	orr.w	r2, r3, #32
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e00f      	b.n	8008642 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00a      	beq.n	800863e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	3b01      	subs	r3, #1
 800862c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008638:	2b80      	cmp	r3, #128	; 0x80
 800863a:	d0f2      	beq.n	8008622 <SPI_EndRxTxTransaction+0x52>
 800863c:	e000      	b.n	8008640 <SPI_EndRxTxTransaction+0x70>
        break;
 800863e:	bf00      	nop
  }

  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20000000 	.word	0x20000000
 8008650:	165e9f81 	.word	0x165e9f81

08008654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e041      	b.n	80086ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d106      	bne.n	8008680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7f9 fdae 	bl	80021dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3304      	adds	r3, #4
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f000 fa96 	bl	8008bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b01      	cmp	r3, #1
 8008706:	d001      	beq.n	800870c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e04e      	b.n	80087aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68da      	ldr	r2, [r3, #12]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f042 0201 	orr.w	r2, r2, #1
 8008722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a23      	ldr	r2, [pc, #140]	; (80087b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d022      	beq.n	8008774 <HAL_TIM_Base_Start_IT+0x80>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008736:	d01d      	beq.n	8008774 <HAL_TIM_Base_Start_IT+0x80>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a1f      	ldr	r2, [pc, #124]	; (80087bc <HAL_TIM_Base_Start_IT+0xc8>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d018      	beq.n	8008774 <HAL_TIM_Base_Start_IT+0x80>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a1e      	ldr	r2, [pc, #120]	; (80087c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d013      	beq.n	8008774 <HAL_TIM_Base_Start_IT+0x80>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a1c      	ldr	r2, [pc, #112]	; (80087c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d00e      	beq.n	8008774 <HAL_TIM_Base_Start_IT+0x80>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a1b      	ldr	r2, [pc, #108]	; (80087c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d009      	beq.n	8008774 <HAL_TIM_Base_Start_IT+0x80>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a19      	ldr	r2, [pc, #100]	; (80087cc <HAL_TIM_Base_Start_IT+0xd8>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d004      	beq.n	8008774 <HAL_TIM_Base_Start_IT+0x80>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a18      	ldr	r2, [pc, #96]	; (80087d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d111      	bne.n	8008798 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f003 0307 	and.w	r3, r3, #7
 800877e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2b06      	cmp	r3, #6
 8008784:	d010      	beq.n	80087a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f042 0201 	orr.w	r2, r2, #1
 8008794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008796:	e007      	b.n	80087a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0201 	orr.w	r2, r2, #1
 80087a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	40010000 	.word	0x40010000
 80087bc:	40000400 	.word	0x40000400
 80087c0:	40000800 	.word	0x40000800
 80087c4:	40000c00 	.word	0x40000c00
 80087c8:	40010400 	.word	0x40010400
 80087cc:	40014000 	.word	0x40014000
 80087d0:	40001800 	.word	0x40001800

080087d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d122      	bne.n	8008830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d11b      	bne.n	8008830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f06f 0202 	mvn.w	r2, #2
 8008800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	f003 0303 	and.w	r3, r3, #3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f9b5 	bl	8008b86 <HAL_TIM_IC_CaptureCallback>
 800881c:	e005      	b.n	800882a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f9a7 	bl	8008b72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f9b8 	bl	8008b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	f003 0304 	and.w	r3, r3, #4
 800883a:	2b04      	cmp	r3, #4
 800883c:	d122      	bne.n	8008884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b04      	cmp	r3, #4
 800884a:	d11b      	bne.n	8008884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f06f 0204 	mvn.w	r2, #4
 8008854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2202      	movs	r2, #2
 800885a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f98b 	bl	8008b86 <HAL_TIM_IC_CaptureCallback>
 8008870:	e005      	b.n	800887e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f97d 	bl	8008b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f98e 	bl	8008b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b08      	cmp	r3, #8
 8008890:	d122      	bne.n	80088d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f003 0308 	and.w	r3, r3, #8
 800889c:	2b08      	cmp	r3, #8
 800889e:	d11b      	bne.n	80088d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f06f 0208 	mvn.w	r2, #8
 80088a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2204      	movs	r2, #4
 80088ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f961 	bl	8008b86 <HAL_TIM_IC_CaptureCallback>
 80088c4:	e005      	b.n	80088d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f953 	bl	8008b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f964 	bl	8008b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	f003 0310 	and.w	r3, r3, #16
 80088e2:	2b10      	cmp	r3, #16
 80088e4:	d122      	bne.n	800892c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f003 0310 	and.w	r3, r3, #16
 80088f0:	2b10      	cmp	r3, #16
 80088f2:	d11b      	bne.n	800892c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0210 	mvn.w	r2, #16
 80088fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2208      	movs	r2, #8
 8008902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f937 	bl	8008b86 <HAL_TIM_IC_CaptureCallback>
 8008918:	e005      	b.n	8008926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f929 	bl	8008b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f93a 	bl	8008b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b01      	cmp	r3, #1
 8008938:	d10e      	bne.n	8008958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b01      	cmp	r3, #1
 8008946:	d107      	bne.n	8008958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f06f 0201 	mvn.w	r2, #1
 8008950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7f9 fa5a 	bl	8001e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008962:	2b80      	cmp	r3, #128	; 0x80
 8008964:	d10e      	bne.n	8008984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008970:	2b80      	cmp	r3, #128	; 0x80
 8008972:	d107      	bne.n	8008984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800897c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fae0 	bl	8008f44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898e:	2b40      	cmp	r3, #64	; 0x40
 8008990:	d10e      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899c:	2b40      	cmp	r3, #64	; 0x40
 800899e:	d107      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f8ff 	bl	8008bae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b20      	cmp	r3, #32
 80089bc:	d10e      	bne.n	80089dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f003 0320 	and.w	r3, r3, #32
 80089c8:	2b20      	cmp	r3, #32
 80089ca:	d107      	bne.n	80089dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f06f 0220 	mvn.w	r2, #32
 80089d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 faaa 	bl	8008f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d101      	bne.n	8008a00 <HAL_TIM_ConfigClockSource+0x1c>
 80089fc:	2302      	movs	r3, #2
 80089fe:	e0b4      	b.n	8008b6a <HAL_TIM_ConfigClockSource+0x186>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a38:	d03e      	beq.n	8008ab8 <HAL_TIM_ConfigClockSource+0xd4>
 8008a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a3e:	f200 8087 	bhi.w	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a46:	f000 8086 	beq.w	8008b56 <HAL_TIM_ConfigClockSource+0x172>
 8008a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4e:	d87f      	bhi.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a50:	2b70      	cmp	r3, #112	; 0x70
 8008a52:	d01a      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0xa6>
 8008a54:	2b70      	cmp	r3, #112	; 0x70
 8008a56:	d87b      	bhi.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a58:	2b60      	cmp	r3, #96	; 0x60
 8008a5a:	d050      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x11a>
 8008a5c:	2b60      	cmp	r3, #96	; 0x60
 8008a5e:	d877      	bhi.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a60:	2b50      	cmp	r3, #80	; 0x50
 8008a62:	d03c      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0xfa>
 8008a64:	2b50      	cmp	r3, #80	; 0x50
 8008a66:	d873      	bhi.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a68:	2b40      	cmp	r3, #64	; 0x40
 8008a6a:	d058      	beq.n	8008b1e <HAL_TIM_ConfigClockSource+0x13a>
 8008a6c:	2b40      	cmp	r3, #64	; 0x40
 8008a6e:	d86f      	bhi.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a70:	2b30      	cmp	r3, #48	; 0x30
 8008a72:	d064      	beq.n	8008b3e <HAL_TIM_ConfigClockSource+0x15a>
 8008a74:	2b30      	cmp	r3, #48	; 0x30
 8008a76:	d86b      	bhi.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a78:	2b20      	cmp	r3, #32
 8008a7a:	d060      	beq.n	8008b3e <HAL_TIM_ConfigClockSource+0x15a>
 8008a7c:	2b20      	cmp	r3, #32
 8008a7e:	d867      	bhi.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d05c      	beq.n	8008b3e <HAL_TIM_ConfigClockSource+0x15a>
 8008a84:	2b10      	cmp	r3, #16
 8008a86:	d05a      	beq.n	8008b3e <HAL_TIM_ConfigClockSource+0x15a>
 8008a88:	e062      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6818      	ldr	r0, [r3, #0]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	6899      	ldr	r1, [r3, #8]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f000 f9ad 	bl	8008df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008aac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	609a      	str	r2, [r3, #8]
      break;
 8008ab6:	e04f      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6818      	ldr	r0, [r3, #0]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	6899      	ldr	r1, [r3, #8]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f000 f996 	bl	8008df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689a      	ldr	r2, [r3, #8]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ada:	609a      	str	r2, [r3, #8]
      break;
 8008adc:	e03c      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	6859      	ldr	r1, [r3, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f000 f90a 	bl	8008d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2150      	movs	r1, #80	; 0x50
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 f963 	bl	8008dc2 <TIM_ITRx_SetConfig>
      break;
 8008afc:	e02c      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6818      	ldr	r0, [r3, #0]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	6859      	ldr	r1, [r3, #4]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	f000 f929 	bl	8008d62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2160      	movs	r1, #96	; 0x60
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 f953 	bl	8008dc2 <TIM_ITRx_SetConfig>
      break;
 8008b1c:	e01c      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6818      	ldr	r0, [r3, #0]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	6859      	ldr	r1, [r3, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f000 f8ea 	bl	8008d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2140      	movs	r1, #64	; 0x40
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 f943 	bl	8008dc2 <TIM_ITRx_SetConfig>
      break;
 8008b3c:	e00c      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4619      	mov	r1, r3
 8008b48:	4610      	mov	r0, r2
 8008b4a:	f000 f93a 	bl	8008dc2 <TIM_ITRx_SetConfig>
      break;
 8008b4e:	e003      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	73fb      	strb	r3, [r7, #15]
      break;
 8008b54:	e000      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b7a:	bf00      	nop
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b8e:	bf00      	nop
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ba2:	bf00      	nop
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bb6:	bf00      	nop
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
	...

08008bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a40      	ldr	r2, [pc, #256]	; (8008cd8 <TIM_Base_SetConfig+0x114>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d013      	beq.n	8008c04 <TIM_Base_SetConfig+0x40>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be2:	d00f      	beq.n	8008c04 <TIM_Base_SetConfig+0x40>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a3d      	ldr	r2, [pc, #244]	; (8008cdc <TIM_Base_SetConfig+0x118>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d00b      	beq.n	8008c04 <TIM_Base_SetConfig+0x40>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a3c      	ldr	r2, [pc, #240]	; (8008ce0 <TIM_Base_SetConfig+0x11c>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d007      	beq.n	8008c04 <TIM_Base_SetConfig+0x40>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a3b      	ldr	r2, [pc, #236]	; (8008ce4 <TIM_Base_SetConfig+0x120>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d003      	beq.n	8008c04 <TIM_Base_SetConfig+0x40>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a3a      	ldr	r2, [pc, #232]	; (8008ce8 <TIM_Base_SetConfig+0x124>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d108      	bne.n	8008c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a2f      	ldr	r2, [pc, #188]	; (8008cd8 <TIM_Base_SetConfig+0x114>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d02b      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c24:	d027      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a2c      	ldr	r2, [pc, #176]	; (8008cdc <TIM_Base_SetConfig+0x118>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d023      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a2b      	ldr	r2, [pc, #172]	; (8008ce0 <TIM_Base_SetConfig+0x11c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d01f      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a2a      	ldr	r2, [pc, #168]	; (8008ce4 <TIM_Base_SetConfig+0x120>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d01b      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a29      	ldr	r2, [pc, #164]	; (8008ce8 <TIM_Base_SetConfig+0x124>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d017      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a28      	ldr	r2, [pc, #160]	; (8008cec <TIM_Base_SetConfig+0x128>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d013      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a27      	ldr	r2, [pc, #156]	; (8008cf0 <TIM_Base_SetConfig+0x12c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d00f      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a26      	ldr	r2, [pc, #152]	; (8008cf4 <TIM_Base_SetConfig+0x130>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d00b      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a25      	ldr	r2, [pc, #148]	; (8008cf8 <TIM_Base_SetConfig+0x134>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d007      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a24      	ldr	r2, [pc, #144]	; (8008cfc <TIM_Base_SetConfig+0x138>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d003      	beq.n	8008c76 <TIM_Base_SetConfig+0xb2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a23      	ldr	r2, [pc, #140]	; (8008d00 <TIM_Base_SetConfig+0x13c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d108      	bne.n	8008c88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a0a      	ldr	r2, [pc, #40]	; (8008cd8 <TIM_Base_SetConfig+0x114>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d003      	beq.n	8008cbc <TIM_Base_SetConfig+0xf8>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a0c      	ldr	r2, [pc, #48]	; (8008ce8 <TIM_Base_SetConfig+0x124>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d103      	bne.n	8008cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	691a      	ldr	r2, [r3, #16]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	615a      	str	r2, [r3, #20]
}
 8008cca:	bf00      	nop
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	40010000 	.word	0x40010000
 8008cdc:	40000400 	.word	0x40000400
 8008ce0:	40000800 	.word	0x40000800
 8008ce4:	40000c00 	.word	0x40000c00
 8008ce8:	40010400 	.word	0x40010400
 8008cec:	40014000 	.word	0x40014000
 8008cf0:	40014400 	.word	0x40014400
 8008cf4:	40014800 	.word	0x40014800
 8008cf8:	40001800 	.word	0x40001800
 8008cfc:	40001c00 	.word	0x40001c00
 8008d00:	40002000 	.word	0x40002000

08008d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b087      	sub	sp, #28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a1b      	ldr	r3, [r3, #32]
 8008d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	f023 0201 	bic.w	r2, r3, #1
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	011b      	lsls	r3, r3, #4
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f023 030a 	bic.w	r3, r3, #10
 8008d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	621a      	str	r2, [r3, #32]
}
 8008d56:	bf00      	nop
 8008d58:	371c      	adds	r7, #28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b087      	sub	sp, #28
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	f023 0210 	bic.w	r2, r3, #16
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	031b      	lsls	r3, r3, #12
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	011b      	lsls	r3, r3, #4
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	621a      	str	r2, [r3, #32]
}
 8008db6:	bf00      	nop
 8008db8:	371c      	adds	r7, #28
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b085      	sub	sp, #20
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	f043 0307 	orr.w	r3, r3, #7
 8008de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	609a      	str	r2, [r3, #8]
}
 8008dec:	bf00      	nop
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
 8008e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	021a      	lsls	r2, r3, #8
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	431a      	orrs	r2, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	609a      	str	r2, [r3, #8]
}
 8008e2c:	bf00      	nop
 8008e2e:	371c      	adds	r7, #28
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d101      	bne.n	8008e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	e05a      	b.n	8008f06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a21      	ldr	r2, [pc, #132]	; (8008f14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d022      	beq.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e9c:	d01d      	beq.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a1d      	ldr	r2, [pc, #116]	; (8008f18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d018      	beq.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a1b      	ldr	r2, [pc, #108]	; (8008f1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d013      	beq.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a1a      	ldr	r2, [pc, #104]	; (8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d00e      	beq.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a18      	ldr	r2, [pc, #96]	; (8008f24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d009      	beq.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a17      	ldr	r2, [pc, #92]	; (8008f28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d004      	beq.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a15      	ldr	r2, [pc, #84]	; (8008f2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d10c      	bne.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	40010000 	.word	0x40010000
 8008f18:	40000400 	.word	0x40000400
 8008f1c:	40000800 	.word	0x40000800
 8008f20:	40000c00 	.word	0x40000c00
 8008f24:	40010400 	.word	0x40010400
 8008f28:	40014000 	.word	0x40014000
 8008f2c:	40001800 	.word	0x40001800

08008f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d101      	bne.n	8008f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e03f      	b.n	8008fea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d106      	bne.n	8008f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7f9 f96a 	bl	8002258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2224      	movs	r2, #36	; 0x24
 8008f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68da      	ldr	r2, [r3, #12]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f929 	bl	80091f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	691a      	ldr	r2, [r3, #16]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	695a      	ldr	r2, [r3, #20]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68da      	ldr	r2, [r3, #12]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2220      	movs	r2, #32
 8008fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b08a      	sub	sp, #40	; 0x28
 8008ff6:	af02      	add	r7, sp, #8
 8008ff8:	60f8      	str	r0, [r7, #12]
 8008ffa:	60b9      	str	r1, [r7, #8]
 8008ffc:	603b      	str	r3, [r7, #0]
 8008ffe:	4613      	mov	r3, r2
 8009000:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009002:	2300      	movs	r3, #0
 8009004:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b20      	cmp	r3, #32
 8009010:	d17c      	bne.n	800910c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <HAL_UART_Transmit+0x2c>
 8009018:	88fb      	ldrh	r3, [r7, #6]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e075      	b.n	800910e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009028:	2b01      	cmp	r3, #1
 800902a:	d101      	bne.n	8009030 <HAL_UART_Transmit+0x3e>
 800902c:	2302      	movs	r3, #2
 800902e:	e06e      	b.n	800910e <HAL_UART_Transmit+0x11c>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2221      	movs	r2, #33	; 0x21
 8009042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009046:	f7f9 faff 	bl	8002648 <HAL_GetTick>
 800904a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	88fa      	ldrh	r2, [r7, #6]
 8009050:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	88fa      	ldrh	r2, [r7, #6]
 8009056:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009060:	d108      	bne.n	8009074 <HAL_UART_Transmit+0x82>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d104      	bne.n	8009074 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800906a:	2300      	movs	r3, #0
 800906c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	61bb      	str	r3, [r7, #24]
 8009072:	e003      	b.n	800907c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009078:	2300      	movs	r3, #0
 800907a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009084:	e02a      	b.n	80090dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2200      	movs	r2, #0
 800908e:	2180      	movs	r1, #128	; 0x80
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 f840 	bl	8009116 <UART_WaitOnFlagUntilTimeout>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e036      	b.n	800910e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10b      	bne.n	80090be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	461a      	mov	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	3302      	adds	r3, #2
 80090ba:	61bb      	str	r3, [r7, #24]
 80090bc:	e007      	b.n	80090ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	781a      	ldrb	r2, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	3301      	adds	r3, #1
 80090cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	3b01      	subs	r3, #1
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1cf      	bne.n	8009086 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2200      	movs	r2, #0
 80090ee:	2140      	movs	r1, #64	; 0x40
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 f810 	bl	8009116 <UART_WaitOnFlagUntilTimeout>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80090fc:	2303      	movs	r3, #3
 80090fe:	e006      	b.n	800910e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2220      	movs	r2, #32
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	e000      	b.n	800910e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800910c:	2302      	movs	r3, #2
  }
}
 800910e:	4618      	mov	r0, r3
 8009110:	3720      	adds	r7, #32
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b090      	sub	sp, #64	; 0x40
 800911a:	af00      	add	r7, sp, #0
 800911c:	60f8      	str	r0, [r7, #12]
 800911e:	60b9      	str	r1, [r7, #8]
 8009120:	603b      	str	r3, [r7, #0]
 8009122:	4613      	mov	r3, r2
 8009124:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009126:	e050      	b.n	80091ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800912a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912e:	d04c      	beq.n	80091ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009132:	2b00      	cmp	r3, #0
 8009134:	d007      	beq.n	8009146 <UART_WaitOnFlagUntilTimeout+0x30>
 8009136:	f7f9 fa87 	bl	8002648 <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009142:	429a      	cmp	r2, r3
 8009144:	d241      	bcs.n	80091ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	330c      	adds	r3, #12
 800914c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009150:	e853 3f00 	ldrex	r3, [r3]
 8009154:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800915c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	330c      	adds	r3, #12
 8009164:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009166:	637a      	str	r2, [r7, #52]	; 0x34
 8009168:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800916c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e5      	bne.n	8009146 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3314      	adds	r3, #20
 8009180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	e853 3f00 	ldrex	r3, [r3]
 8009188:	613b      	str	r3, [r7, #16]
   return(result);
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	f023 0301 	bic.w	r3, r3, #1
 8009190:	63bb      	str	r3, [r7, #56]	; 0x38
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3314      	adds	r3, #20
 8009198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800919a:	623a      	str	r2, [r7, #32]
 800919c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	69f9      	ldr	r1, [r7, #28]
 80091a0:	6a3a      	ldr	r2, [r7, #32]
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e5      	bne.n	800917a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2220      	movs	r2, #32
 80091ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e00f      	b.n	80091ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	4013      	ands	r3, r2
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	bf0c      	ite	eq
 80091da:	2301      	moveq	r3, #1
 80091dc:	2300      	movne	r3, #0
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	461a      	mov	r2, r3
 80091e2:	79fb      	ldrb	r3, [r7, #7]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d09f      	beq.n	8009128 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3740      	adds	r7, #64	; 0x40
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091f8:	b0c0      	sub	sp, #256	; 0x100
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800920c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009210:	68d9      	ldr	r1, [r3, #12]
 8009212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	ea40 0301 	orr.w	r3, r0, r1
 800921c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800921e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009222:	689a      	ldr	r2, [r3, #8]
 8009224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	431a      	orrs	r2, r3
 800922c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	431a      	orrs	r2, r3
 8009234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	4313      	orrs	r3, r2
 800923c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800924c:	f021 010c 	bic.w	r1, r1, #12
 8009250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800925a:	430b      	orrs	r3, r1
 800925c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800925e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800926a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800926e:	6999      	ldr	r1, [r3, #24]
 8009270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	ea40 0301 	orr.w	r3, r0, r1
 800927a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800927c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	4b8f      	ldr	r3, [pc, #572]	; (80094c0 <UART_SetConfig+0x2cc>)
 8009284:	429a      	cmp	r2, r3
 8009286:	d005      	beq.n	8009294 <UART_SetConfig+0xa0>
 8009288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	4b8d      	ldr	r3, [pc, #564]	; (80094c4 <UART_SetConfig+0x2d0>)
 8009290:	429a      	cmp	r2, r3
 8009292:	d104      	bne.n	800929e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009294:	f7fd f946 	bl	8006524 <HAL_RCC_GetPCLK2Freq>
 8009298:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800929c:	e003      	b.n	80092a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800929e:	f7fd f92d 	bl	80064fc <HAL_RCC_GetPCLK1Freq>
 80092a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092aa:	69db      	ldr	r3, [r3, #28]
 80092ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092b0:	f040 810c 	bne.w	80094cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092b8:	2200      	movs	r2, #0
 80092ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80092be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80092c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80092c6:	4622      	mov	r2, r4
 80092c8:	462b      	mov	r3, r5
 80092ca:	1891      	adds	r1, r2, r2
 80092cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80092ce:	415b      	adcs	r3, r3
 80092d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80092d6:	4621      	mov	r1, r4
 80092d8:	eb12 0801 	adds.w	r8, r2, r1
 80092dc:	4629      	mov	r1, r5
 80092de:	eb43 0901 	adc.w	r9, r3, r1
 80092e2:	f04f 0200 	mov.w	r2, #0
 80092e6:	f04f 0300 	mov.w	r3, #0
 80092ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092f6:	4690      	mov	r8, r2
 80092f8:	4699      	mov	r9, r3
 80092fa:	4623      	mov	r3, r4
 80092fc:	eb18 0303 	adds.w	r3, r8, r3
 8009300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009304:	462b      	mov	r3, r5
 8009306:	eb49 0303 	adc.w	r3, r9, r3
 800930a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800930e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800931a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800931e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009322:	460b      	mov	r3, r1
 8009324:	18db      	adds	r3, r3, r3
 8009326:	653b      	str	r3, [r7, #80]	; 0x50
 8009328:	4613      	mov	r3, r2
 800932a:	eb42 0303 	adc.w	r3, r2, r3
 800932e:	657b      	str	r3, [r7, #84]	; 0x54
 8009330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009338:	f7f7 fc56 	bl	8000be8 <__aeabi_uldivmod>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4b61      	ldr	r3, [pc, #388]	; (80094c8 <UART_SetConfig+0x2d4>)
 8009342:	fba3 2302 	umull	r2, r3, r3, r2
 8009346:	095b      	lsrs	r3, r3, #5
 8009348:	011c      	lsls	r4, r3, #4
 800934a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800934e:	2200      	movs	r2, #0
 8009350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009354:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800935c:	4642      	mov	r2, r8
 800935e:	464b      	mov	r3, r9
 8009360:	1891      	adds	r1, r2, r2
 8009362:	64b9      	str	r1, [r7, #72]	; 0x48
 8009364:	415b      	adcs	r3, r3
 8009366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800936c:	4641      	mov	r1, r8
 800936e:	eb12 0a01 	adds.w	sl, r2, r1
 8009372:	4649      	mov	r1, r9
 8009374:	eb43 0b01 	adc.w	fp, r3, r1
 8009378:	f04f 0200 	mov.w	r2, #0
 800937c:	f04f 0300 	mov.w	r3, #0
 8009380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800938c:	4692      	mov	sl, r2
 800938e:	469b      	mov	fp, r3
 8009390:	4643      	mov	r3, r8
 8009392:	eb1a 0303 	adds.w	r3, sl, r3
 8009396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800939a:	464b      	mov	r3, r9
 800939c:	eb4b 0303 	adc.w	r3, fp, r3
 80093a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80093a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80093b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80093b8:	460b      	mov	r3, r1
 80093ba:	18db      	adds	r3, r3, r3
 80093bc:	643b      	str	r3, [r7, #64]	; 0x40
 80093be:	4613      	mov	r3, r2
 80093c0:	eb42 0303 	adc.w	r3, r2, r3
 80093c4:	647b      	str	r3, [r7, #68]	; 0x44
 80093c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80093ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80093ce:	f7f7 fc0b 	bl	8000be8 <__aeabi_uldivmod>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4611      	mov	r1, r2
 80093d8:	4b3b      	ldr	r3, [pc, #236]	; (80094c8 <UART_SetConfig+0x2d4>)
 80093da:	fba3 2301 	umull	r2, r3, r3, r1
 80093de:	095b      	lsrs	r3, r3, #5
 80093e0:	2264      	movs	r2, #100	; 0x64
 80093e2:	fb02 f303 	mul.w	r3, r2, r3
 80093e6:	1acb      	subs	r3, r1, r3
 80093e8:	00db      	lsls	r3, r3, #3
 80093ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80093ee:	4b36      	ldr	r3, [pc, #216]	; (80094c8 <UART_SetConfig+0x2d4>)
 80093f0:	fba3 2302 	umull	r2, r3, r3, r2
 80093f4:	095b      	lsrs	r3, r3, #5
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80093fc:	441c      	add	r4, r3
 80093fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009402:	2200      	movs	r2, #0
 8009404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009408:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800940c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009410:	4642      	mov	r2, r8
 8009412:	464b      	mov	r3, r9
 8009414:	1891      	adds	r1, r2, r2
 8009416:	63b9      	str	r1, [r7, #56]	; 0x38
 8009418:	415b      	adcs	r3, r3
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800941c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009420:	4641      	mov	r1, r8
 8009422:	1851      	adds	r1, r2, r1
 8009424:	6339      	str	r1, [r7, #48]	; 0x30
 8009426:	4649      	mov	r1, r9
 8009428:	414b      	adcs	r3, r1
 800942a:	637b      	str	r3, [r7, #52]	; 0x34
 800942c:	f04f 0200 	mov.w	r2, #0
 8009430:	f04f 0300 	mov.w	r3, #0
 8009434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009438:	4659      	mov	r1, fp
 800943a:	00cb      	lsls	r3, r1, #3
 800943c:	4651      	mov	r1, sl
 800943e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009442:	4651      	mov	r1, sl
 8009444:	00ca      	lsls	r2, r1, #3
 8009446:	4610      	mov	r0, r2
 8009448:	4619      	mov	r1, r3
 800944a:	4603      	mov	r3, r0
 800944c:	4642      	mov	r2, r8
 800944e:	189b      	adds	r3, r3, r2
 8009450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009454:	464b      	mov	r3, r9
 8009456:	460a      	mov	r2, r1
 8009458:	eb42 0303 	adc.w	r3, r2, r3
 800945c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800946c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009474:	460b      	mov	r3, r1
 8009476:	18db      	adds	r3, r3, r3
 8009478:	62bb      	str	r3, [r7, #40]	; 0x28
 800947a:	4613      	mov	r3, r2
 800947c:	eb42 0303 	adc.w	r3, r2, r3
 8009480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800948a:	f7f7 fbad 	bl	8000be8 <__aeabi_uldivmod>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4b0d      	ldr	r3, [pc, #52]	; (80094c8 <UART_SetConfig+0x2d4>)
 8009494:	fba3 1302 	umull	r1, r3, r3, r2
 8009498:	095b      	lsrs	r3, r3, #5
 800949a:	2164      	movs	r1, #100	; 0x64
 800949c:	fb01 f303 	mul.w	r3, r1, r3
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	3332      	adds	r3, #50	; 0x32
 80094a6:	4a08      	ldr	r2, [pc, #32]	; (80094c8 <UART_SetConfig+0x2d4>)
 80094a8:	fba2 2303 	umull	r2, r3, r2, r3
 80094ac:	095b      	lsrs	r3, r3, #5
 80094ae:	f003 0207 	and.w	r2, r3, #7
 80094b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4422      	add	r2, r4
 80094ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80094bc:	e106      	b.n	80096cc <UART_SetConfig+0x4d8>
 80094be:	bf00      	nop
 80094c0:	40011000 	.word	0x40011000
 80094c4:	40011400 	.word	0x40011400
 80094c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094d0:	2200      	movs	r2, #0
 80094d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80094d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80094da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80094de:	4642      	mov	r2, r8
 80094e0:	464b      	mov	r3, r9
 80094e2:	1891      	adds	r1, r2, r2
 80094e4:	6239      	str	r1, [r7, #32]
 80094e6:	415b      	adcs	r3, r3
 80094e8:	627b      	str	r3, [r7, #36]	; 0x24
 80094ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80094ee:	4641      	mov	r1, r8
 80094f0:	1854      	adds	r4, r2, r1
 80094f2:	4649      	mov	r1, r9
 80094f4:	eb43 0501 	adc.w	r5, r3, r1
 80094f8:	f04f 0200 	mov.w	r2, #0
 80094fc:	f04f 0300 	mov.w	r3, #0
 8009500:	00eb      	lsls	r3, r5, #3
 8009502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009506:	00e2      	lsls	r2, r4, #3
 8009508:	4614      	mov	r4, r2
 800950a:	461d      	mov	r5, r3
 800950c:	4643      	mov	r3, r8
 800950e:	18e3      	adds	r3, r4, r3
 8009510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009514:	464b      	mov	r3, r9
 8009516:	eb45 0303 	adc.w	r3, r5, r3
 800951a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800951e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800952a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800952e:	f04f 0200 	mov.w	r2, #0
 8009532:	f04f 0300 	mov.w	r3, #0
 8009536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800953a:	4629      	mov	r1, r5
 800953c:	008b      	lsls	r3, r1, #2
 800953e:	4621      	mov	r1, r4
 8009540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009544:	4621      	mov	r1, r4
 8009546:	008a      	lsls	r2, r1, #2
 8009548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800954c:	f7f7 fb4c 	bl	8000be8 <__aeabi_uldivmod>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4b60      	ldr	r3, [pc, #384]	; (80096d8 <UART_SetConfig+0x4e4>)
 8009556:	fba3 2302 	umull	r2, r3, r3, r2
 800955a:	095b      	lsrs	r3, r3, #5
 800955c:	011c      	lsls	r4, r3, #4
 800955e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009562:	2200      	movs	r2, #0
 8009564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009568:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800956c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009570:	4642      	mov	r2, r8
 8009572:	464b      	mov	r3, r9
 8009574:	1891      	adds	r1, r2, r2
 8009576:	61b9      	str	r1, [r7, #24]
 8009578:	415b      	adcs	r3, r3
 800957a:	61fb      	str	r3, [r7, #28]
 800957c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009580:	4641      	mov	r1, r8
 8009582:	1851      	adds	r1, r2, r1
 8009584:	6139      	str	r1, [r7, #16]
 8009586:	4649      	mov	r1, r9
 8009588:	414b      	adcs	r3, r1
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	f04f 0200 	mov.w	r2, #0
 8009590:	f04f 0300 	mov.w	r3, #0
 8009594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009598:	4659      	mov	r1, fp
 800959a:	00cb      	lsls	r3, r1, #3
 800959c:	4651      	mov	r1, sl
 800959e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095a2:	4651      	mov	r1, sl
 80095a4:	00ca      	lsls	r2, r1, #3
 80095a6:	4610      	mov	r0, r2
 80095a8:	4619      	mov	r1, r3
 80095aa:	4603      	mov	r3, r0
 80095ac:	4642      	mov	r2, r8
 80095ae:	189b      	adds	r3, r3, r2
 80095b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095b4:	464b      	mov	r3, r9
 80095b6:	460a      	mov	r2, r1
 80095b8:	eb42 0303 	adc.w	r3, r2, r3
 80095bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80095ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095cc:	f04f 0200 	mov.w	r2, #0
 80095d0:	f04f 0300 	mov.w	r3, #0
 80095d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80095d8:	4649      	mov	r1, r9
 80095da:	008b      	lsls	r3, r1, #2
 80095dc:	4641      	mov	r1, r8
 80095de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095e2:	4641      	mov	r1, r8
 80095e4:	008a      	lsls	r2, r1, #2
 80095e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80095ea:	f7f7 fafd 	bl	8000be8 <__aeabi_uldivmod>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	4611      	mov	r1, r2
 80095f4:	4b38      	ldr	r3, [pc, #224]	; (80096d8 <UART_SetConfig+0x4e4>)
 80095f6:	fba3 2301 	umull	r2, r3, r3, r1
 80095fa:	095b      	lsrs	r3, r3, #5
 80095fc:	2264      	movs	r2, #100	; 0x64
 80095fe:	fb02 f303 	mul.w	r3, r2, r3
 8009602:	1acb      	subs	r3, r1, r3
 8009604:	011b      	lsls	r3, r3, #4
 8009606:	3332      	adds	r3, #50	; 0x32
 8009608:	4a33      	ldr	r2, [pc, #204]	; (80096d8 <UART_SetConfig+0x4e4>)
 800960a:	fba2 2303 	umull	r2, r3, r2, r3
 800960e:	095b      	lsrs	r3, r3, #5
 8009610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009614:	441c      	add	r4, r3
 8009616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800961a:	2200      	movs	r2, #0
 800961c:	673b      	str	r3, [r7, #112]	; 0x70
 800961e:	677a      	str	r2, [r7, #116]	; 0x74
 8009620:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009624:	4642      	mov	r2, r8
 8009626:	464b      	mov	r3, r9
 8009628:	1891      	adds	r1, r2, r2
 800962a:	60b9      	str	r1, [r7, #8]
 800962c:	415b      	adcs	r3, r3
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009634:	4641      	mov	r1, r8
 8009636:	1851      	adds	r1, r2, r1
 8009638:	6039      	str	r1, [r7, #0]
 800963a:	4649      	mov	r1, r9
 800963c:	414b      	adcs	r3, r1
 800963e:	607b      	str	r3, [r7, #4]
 8009640:	f04f 0200 	mov.w	r2, #0
 8009644:	f04f 0300 	mov.w	r3, #0
 8009648:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800964c:	4659      	mov	r1, fp
 800964e:	00cb      	lsls	r3, r1, #3
 8009650:	4651      	mov	r1, sl
 8009652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009656:	4651      	mov	r1, sl
 8009658:	00ca      	lsls	r2, r1, #3
 800965a:	4610      	mov	r0, r2
 800965c:	4619      	mov	r1, r3
 800965e:	4603      	mov	r3, r0
 8009660:	4642      	mov	r2, r8
 8009662:	189b      	adds	r3, r3, r2
 8009664:	66bb      	str	r3, [r7, #104]	; 0x68
 8009666:	464b      	mov	r3, r9
 8009668:	460a      	mov	r2, r1
 800966a:	eb42 0303 	adc.w	r3, r2, r3
 800966e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	663b      	str	r3, [r7, #96]	; 0x60
 800967a:	667a      	str	r2, [r7, #100]	; 0x64
 800967c:	f04f 0200 	mov.w	r2, #0
 8009680:	f04f 0300 	mov.w	r3, #0
 8009684:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009688:	4649      	mov	r1, r9
 800968a:	008b      	lsls	r3, r1, #2
 800968c:	4641      	mov	r1, r8
 800968e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009692:	4641      	mov	r1, r8
 8009694:	008a      	lsls	r2, r1, #2
 8009696:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800969a:	f7f7 faa5 	bl	8000be8 <__aeabi_uldivmod>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <UART_SetConfig+0x4e4>)
 80096a4:	fba3 1302 	umull	r1, r3, r3, r2
 80096a8:	095b      	lsrs	r3, r3, #5
 80096aa:	2164      	movs	r1, #100	; 0x64
 80096ac:	fb01 f303 	mul.w	r3, r1, r3
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	3332      	adds	r3, #50	; 0x32
 80096b6:	4a08      	ldr	r2, [pc, #32]	; (80096d8 <UART_SetConfig+0x4e4>)
 80096b8:	fba2 2303 	umull	r2, r3, r2, r3
 80096bc:	095b      	lsrs	r3, r3, #5
 80096be:	f003 020f 	and.w	r2, r3, #15
 80096c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4422      	add	r2, r4
 80096ca:	609a      	str	r2, [r3, #8]
}
 80096cc:	bf00      	nop
 80096ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80096d2:	46bd      	mov	sp, r7
 80096d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096d8:	51eb851f 	.word	0x51eb851f

080096dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80096e0:	4904      	ldr	r1, [pc, #16]	; (80096f4 <MX_FATFS_Init+0x18>)
 80096e2:	4805      	ldr	r0, [pc, #20]	; (80096f8 <MX_FATFS_Init+0x1c>)
 80096e4:	f000 f926 	bl	8009934 <FATFS_LinkDriver>
 80096e8:	4603      	mov	r3, r0
 80096ea:	461a      	mov	r2, r3
 80096ec:	4b03      	ldr	r3, [pc, #12]	; (80096fc <MX_FATFS_Init+0x20>)
 80096ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80096f0:	bf00      	nop
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	20000a20 	.word	0x20000a20
 80096f8:	2000000c 	.word	0x2000000c
 80096fc:	20000a1c 	.word	0x20000a1c

08009700 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800970a:	79fb      	ldrb	r3, [r7, #7]
 800970c:	4618      	mov	r0, r3
 800970e:	f003 ff59 	bl	800d5c4 <SD_disk_initialize>
 8009712:	4603      	mov	r3, r0
 8009714:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	4603      	mov	r3, r0
 8009726:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8009728:	79fb      	ldrb	r3, [r7, #7]
 800972a:	4618      	mov	r0, r3
 800972c:	f004 f830 	bl	800d790 <SD_disk_status>
 8009730:	4603      	mov	r3, r0
 8009732:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009734:	4618      	mov	r0, r3
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	60b9      	str	r1, [r7, #8]
 8009744:	607a      	str	r2, [r7, #4]
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800974c:	7bf8      	ldrb	r0, [r7, #15]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	68b9      	ldr	r1, [r7, #8]
 8009754:	f004 f832 	bl	800d7bc <SD_disk_read>
 8009758:	4603      	mov	r3, r0
 800975a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	60b9      	str	r1, [r7, #8]
 800976c:	607a      	str	r2, [r7, #4]
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8009774:	7bf8      	ldrb	r0, [r7, #15]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	68b9      	ldr	r1, [r7, #8]
 800977c:	f004 f888 	bl	800d890 <SD_disk_write>
 8009780:	4603      	mov	r3, r0
 8009782:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	603a      	str	r2, [r7, #0]
 8009796:	71fb      	strb	r3, [r7, #7]
 8009798:	460b      	mov	r3, r1
 800979a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	79b9      	ldrb	r1, [r7, #6]
 80097a0:	683a      	ldr	r2, [r7, #0]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f004 f8f8 	bl	800d998 <SD_disk_ioctl>
 80097a8:	4603      	mov	r3, r0
 80097aa:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80097b4:	b480      	push	{r7}
 80097b6:	af00      	add	r7, sp, #0
	return 1;
 80097b8:	2301      	movs	r3, #1
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <_kill>:

int _kill(int pid, int sig)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80097ce:	f005 f831 	bl	800e834 <__errno>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2216      	movs	r2, #22
 80097d6:	601a      	str	r2, [r3, #0]
	return -1;
 80097d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <_exit>:

void _exit (int status)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80097ec:	f04f 31ff 	mov.w	r1, #4294967295
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff ffe7 	bl	80097c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80097f6:	e7fe      	b.n	80097f6 <_exit+0x12>

080097f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009804:	2300      	movs	r3, #0
 8009806:	617b      	str	r3, [r7, #20]
 8009808:	e00a      	b.n	8009820 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800980a:	f3af 8000 	nop.w
 800980e:	4601      	mov	r1, r0
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	1c5a      	adds	r2, r3, #1
 8009814:	60ba      	str	r2, [r7, #8]
 8009816:	b2ca      	uxtb	r2, r1
 8009818:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	3301      	adds	r3, #1
 800981e:	617b      	str	r3, [r7, #20]
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	429a      	cmp	r2, r3
 8009826:	dbf0      	blt.n	800980a <_read+0x12>
	}

return len;
 8009828:	687b      	ldr	r3, [r7, #4]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3718      	adds	r7, #24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <_close>:
	}
	return len;
}

int _close(int file)
{
 8009832:	b480      	push	{r7}
 8009834:	b083      	sub	sp, #12
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
	return -1;
 800983a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800983e:	4618      	mov	r0, r3
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800985a:	605a      	str	r2, [r3, #4]
	return 0;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <_isatty>:

int _isatty(int file)
{
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
	return 1;
 8009872:	2301      	movs	r3, #1
}
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
	return 0;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
	...

0800989c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	4613      	mov	r3, r2
 80098a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80098aa:	2301      	movs	r3, #1
 80098ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80098b2:	4b1f      	ldr	r3, [pc, #124]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098b4:	7a5b      	ldrb	r3, [r3, #9]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d131      	bne.n	8009920 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80098bc:	4b1c      	ldr	r3, [pc, #112]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098be:	7a5b      	ldrb	r3, [r3, #9]
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	461a      	mov	r2, r3
 80098c4:	4b1a      	ldr	r3, [pc, #104]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098c6:	2100      	movs	r1, #0
 80098c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80098ca:	4b19      	ldr	r3, [pc, #100]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098cc:	7a5b      	ldrb	r3, [r3, #9]
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	4a17      	ldr	r2, [pc, #92]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80098da:	4b15      	ldr	r3, [pc, #84]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098dc:	7a5b      	ldrb	r3, [r3, #9]
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	461a      	mov	r2, r3
 80098e2:	4b13      	ldr	r3, [pc, #76]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098e4:	4413      	add	r3, r2
 80098e6:	79fa      	ldrb	r2, [r7, #7]
 80098e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80098ea:	4b11      	ldr	r3, [pc, #68]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098ec:	7a5b      	ldrb	r3, [r3, #9]
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	b2d1      	uxtb	r1, r2
 80098f4:	4a0e      	ldr	r2, [pc, #56]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098f6:	7251      	strb	r1, [r2, #9]
 80098f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80098fa:	7dbb      	ldrb	r3, [r7, #22]
 80098fc:	3330      	adds	r3, #48	; 0x30
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	3301      	adds	r3, #1
 8009908:	223a      	movs	r2, #58	; 0x3a
 800990a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	3302      	adds	r3, #2
 8009910:	222f      	movs	r2, #47	; 0x2f
 8009912:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	3303      	adds	r3, #3
 8009918:	2200      	movs	r2, #0
 800991a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800991c:	2300      	movs	r3, #0
 800991e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009920:	7dfb      	ldrb	r3, [r7, #23]
}
 8009922:	4618      	mov	r0, r3
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	20000a24 	.word	0x20000a24

08009934 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800993e:	2200      	movs	r2, #0
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7ff ffaa 	bl	800989c <FATFS_LinkDriverEx>
 8009948:	4603      	mov	r3, r0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
	...

08009954 <__NVIC_SetPriority>:
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	4603      	mov	r3, r0
 800995c:	6039      	str	r1, [r7, #0]
 800995e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009964:	2b00      	cmp	r3, #0
 8009966:	db0a      	blt.n	800997e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	b2da      	uxtb	r2, r3
 800996c:	490c      	ldr	r1, [pc, #48]	; (80099a0 <__NVIC_SetPriority+0x4c>)
 800996e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009972:	0112      	lsls	r2, r2, #4
 8009974:	b2d2      	uxtb	r2, r2
 8009976:	440b      	add	r3, r1
 8009978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800997c:	e00a      	b.n	8009994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	b2da      	uxtb	r2, r3
 8009982:	4908      	ldr	r1, [pc, #32]	; (80099a4 <__NVIC_SetPriority+0x50>)
 8009984:	79fb      	ldrb	r3, [r7, #7]
 8009986:	f003 030f 	and.w	r3, r3, #15
 800998a:	3b04      	subs	r3, #4
 800998c:	0112      	lsls	r2, r2, #4
 800998e:	b2d2      	uxtb	r2, r2
 8009990:	440b      	add	r3, r1
 8009992:	761a      	strb	r2, [r3, #24]
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	e000e100 	.word	0xe000e100
 80099a4:	e000ed00 	.word	0xe000ed00

080099a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80099a8:	b580      	push	{r7, lr}
 80099aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80099ac:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <SysTick_Handler+0x1c>)
 80099ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80099b0:	f001 ffca 	bl	800b948 <xTaskGetSchedulerState>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d001      	beq.n	80099be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80099ba:	f002 ff0d 	bl	800c7d8 <xPortSysTickHandler>
  }
}
 80099be:	bf00      	nop
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	e000e010 	.word	0xe000e010

080099c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80099c8:	b580      	push	{r7, lr}
 80099ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80099cc:	2100      	movs	r1, #0
 80099ce:	f06f 0004 	mvn.w	r0, #4
 80099d2:	f7ff ffbf 	bl	8009954 <__NVIC_SetPriority>
#endif
}
 80099d6:	bf00      	nop
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099e2:	f3ef 8305 	mrs	r3, IPSR
 80099e6:	603b      	str	r3, [r7, #0]
  return(result);
 80099e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d003      	beq.n	80099f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80099ee:	f06f 0305 	mvn.w	r3, #5
 80099f2:	607b      	str	r3, [r7, #4]
 80099f4:	e00c      	b.n	8009a10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80099f6:	4b0a      	ldr	r3, [pc, #40]	; (8009a20 <osKernelInitialize+0x44>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d105      	bne.n	8009a0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80099fe:	4b08      	ldr	r3, [pc, #32]	; (8009a20 <osKernelInitialize+0x44>)
 8009a00:	2201      	movs	r2, #1
 8009a02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	607b      	str	r3, [r7, #4]
 8009a08:	e002      	b.n	8009a10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a10:	687b      	ldr	r3, [r7, #4]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	370c      	adds	r7, #12
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	20000a30 	.word	0x20000a30

08009a24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a2a:	f3ef 8305 	mrs	r3, IPSR
 8009a2e:	603b      	str	r3, [r7, #0]
  return(result);
 8009a30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009a36:	f06f 0305 	mvn.w	r3, #5
 8009a3a:	607b      	str	r3, [r7, #4]
 8009a3c:	e010      	b.n	8009a60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009a3e:	4b0b      	ldr	r3, [pc, #44]	; (8009a6c <osKernelStart+0x48>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d109      	bne.n	8009a5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009a46:	f7ff ffbf 	bl	80099c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009a4a:	4b08      	ldr	r3, [pc, #32]	; (8009a6c <osKernelStart+0x48>)
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009a50:	f001 fa9e 	bl	800af90 <vTaskStartScheduler>
      stat = osOK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	607b      	str	r3, [r7, #4]
 8009a58:	e002      	b.n	8009a60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a60:	687b      	ldr	r3, [r7, #4]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20000a30 	.word	0x20000a30

08009a70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08e      	sub	sp, #56	; 0x38
 8009a74:	af04      	add	r7, sp, #16
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a80:	f3ef 8305 	mrs	r3, IPSR
 8009a84:	617b      	str	r3, [r7, #20]
  return(result);
 8009a86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d17e      	bne.n	8009b8a <osThreadNew+0x11a>
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d07b      	beq.n	8009b8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009a92:	2380      	movs	r3, #128	; 0x80
 8009a94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009a96:	2318      	movs	r3, #24
 8009a98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d045      	beq.n	8009b36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <osThreadNew+0x48>
        name = attr->name;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d008      	beq.n	8009ade <osThreadNew+0x6e>
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	2b38      	cmp	r3, #56	; 0x38
 8009ad0:	d805      	bhi.n	8009ade <osThreadNew+0x6e>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <osThreadNew+0x72>
        return (NULL);
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e054      	b.n	8009b8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	695b      	ldr	r3, [r3, #20]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	089b      	lsrs	r3, r3, #2
 8009af0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00e      	beq.n	8009b18 <osThreadNew+0xa8>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	2baf      	cmp	r3, #175	; 0xaf
 8009b00:	d90a      	bls.n	8009b18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d006      	beq.n	8009b18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d002      	beq.n	8009b18 <osThreadNew+0xa8>
        mem = 1;
 8009b12:	2301      	movs	r3, #1
 8009b14:	61bb      	str	r3, [r7, #24]
 8009b16:	e010      	b.n	8009b3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10c      	bne.n	8009b3a <osThreadNew+0xca>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d108      	bne.n	8009b3a <osThreadNew+0xca>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d104      	bne.n	8009b3a <osThreadNew+0xca>
          mem = 0;
 8009b30:	2300      	movs	r3, #0
 8009b32:	61bb      	str	r3, [r7, #24]
 8009b34:	e001      	b.n	8009b3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d110      	bne.n	8009b62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b48:	9202      	str	r2, [sp, #8]
 8009b4a:	9301      	str	r3, [sp, #4]
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	6a3a      	ldr	r2, [r7, #32]
 8009b54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f001 f828 	bl	800abac <xTaskCreateStatic>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	613b      	str	r3, [r7, #16]
 8009b60:	e013      	b.n	8009b8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d110      	bne.n	8009b8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009b68:	6a3b      	ldr	r3, [r7, #32]
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	f107 0310 	add.w	r3, r7, #16
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f001 f873 	bl	800ac66 <xTaskCreate>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d001      	beq.n	8009b8a <osThreadNew+0x11a>
            hTask = NULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009b8a:	693b      	ldr	r3, [r7, #16]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3728      	adds	r7, #40	; 0x28
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b9c:	f3ef 8305 	mrs	r3, IPSR
 8009ba0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ba2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <osDelay+0x1c>
    stat = osErrorISR;
 8009ba8:	f06f 0305 	mvn.w	r3, #5
 8009bac:	60fb      	str	r3, [r7, #12]
 8009bae:	e007      	b.n	8009bc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f001 f9b4 	bl	800af28 <vTaskDelay>
    }
  }

  return (stat);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
	...

08009bcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	4a07      	ldr	r2, [pc, #28]	; (8009bf8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009bdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	4a06      	ldr	r2, [pc, #24]	; (8009bfc <vApplicationGetIdleTaskMemory+0x30>)
 8009be2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2280      	movs	r2, #128	; 0x80
 8009be8:	601a      	str	r2, [r3, #0]
}
 8009bea:	bf00      	nop
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	20000a34 	.word	0x20000a34
 8009bfc:	20000ae4 	.word	0x20000ae4

08009c00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	4a07      	ldr	r2, [pc, #28]	; (8009c2c <vApplicationGetTimerTaskMemory+0x2c>)
 8009c10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	4a06      	ldr	r2, [pc, #24]	; (8009c30 <vApplicationGetTimerTaskMemory+0x30>)
 8009c16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c1e:	601a      	str	r2, [r3, #0]
}
 8009c20:	bf00      	nop
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	20000ce4 	.word	0x20000ce4
 8009c30:	20000d94 	.word	0x20000d94

08009c34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f103 0208 	add.w	r2, r3, #8
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f103 0208 	add.w	r2, r3, #8
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f103 0208 	add.w	r2, r3, #8
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c82:	bf00      	nop
 8009c84:	370c      	adds	r7, #12
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b085      	sub	sp, #20
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	1c5a      	adds	r2, r3, #1
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	601a      	str	r2, [r3, #0]
}
 8009cca:	bf00      	nop
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b085      	sub	sp, #20
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cec:	d103      	bne.n	8009cf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	e00c      	b.n	8009d10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	3308      	adds	r3, #8
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	e002      	b.n	8009d04 <vListInsert+0x2e>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d2f6      	bcs.n	8009cfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	601a      	str	r2, [r3, #0]
}
 8009d3c:	bf00      	nop
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	6892      	ldr	r2, [r2, #8]
 8009d5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	6852      	ldr	r2, [r2, #4]
 8009d68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d103      	bne.n	8009d7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	689a      	ldr	r2, [r3, #8]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	1e5a      	subs	r2, r3, #1
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10a      	bne.n	8009dc6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009dc2:	bf00      	nop
 8009dc4:	e7fe      	b.n	8009dc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009dc6:	f002 fc75 	bl	800c6b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dd2:	68f9      	ldr	r1, [r7, #12]
 8009dd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009dd6:	fb01 f303 	mul.w	r3, r1, r3
 8009dda:	441a      	add	r2, r3
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df6:	3b01      	subs	r3, #1
 8009df8:	68f9      	ldr	r1, [r7, #12]
 8009dfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009dfc:	fb01 f303 	mul.w	r3, r1, r3
 8009e00:	441a      	add	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	22ff      	movs	r2, #255	; 0xff
 8009e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	22ff      	movs	r2, #255	; 0xff
 8009e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d114      	bne.n	8009e46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d01a      	beq.n	8009e5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3310      	adds	r3, #16
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f001 fba1 	bl	800b570 <xTaskRemoveFromEventList>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d012      	beq.n	8009e5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e34:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <xQueueGenericReset+0xcc>)
 8009e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	e009      	b.n	8009e5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3310      	adds	r3, #16
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7ff fef2 	bl	8009c34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	3324      	adds	r3, #36	; 0x24
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff feed 	bl	8009c34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e5a:	f002 fc5b 	bl	800c714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e5e:	2301      	movs	r3, #1
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	e000ed04 	.word	0xe000ed04

08009e6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b08e      	sub	sp, #56	; 0x38
 8009e70:	af02      	add	r7, sp, #8
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
 8009e78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10a      	bne.n	8009e96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e92:	bf00      	nop
 8009e94:	e7fe      	b.n	8009e94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10a      	bne.n	8009eb2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009eae:	bf00      	nop
 8009eb0:	e7fe      	b.n	8009eb0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <xQueueGenericCreateStatic+0x52>
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <xQueueGenericCreateStatic+0x56>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e000      	b.n	8009ec4 <xQueueGenericCreateStatic+0x58>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10a      	bne.n	8009ede <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	623b      	str	r3, [r7, #32]
}
 8009eda:	bf00      	nop
 8009edc:	e7fe      	b.n	8009edc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d102      	bne.n	8009eea <xQueueGenericCreateStatic+0x7e>
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d101      	bne.n	8009eee <xQueueGenericCreateStatic+0x82>
 8009eea:	2301      	movs	r3, #1
 8009eec:	e000      	b.n	8009ef0 <xQueueGenericCreateStatic+0x84>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10a      	bne.n	8009f0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	61fb      	str	r3, [r7, #28]
}
 8009f06:	bf00      	nop
 8009f08:	e7fe      	b.n	8009f08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f0a:	2350      	movs	r3, #80	; 0x50
 8009f0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	2b50      	cmp	r3, #80	; 0x50
 8009f12:	d00a      	beq.n	8009f2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	61bb      	str	r3, [r7, #24]
}
 8009f26:	bf00      	nop
 8009f28:	e7fe      	b.n	8009f28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00d      	beq.n	8009f52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	4613      	mov	r3, r2
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	68b9      	ldr	r1, [r7, #8]
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f000 f83f 	bl	8009fd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3730      	adds	r7, #48	; 0x30
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08a      	sub	sp, #40	; 0x28
 8009f60:	af02      	add	r7, sp, #8
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	4613      	mov	r3, r2
 8009f68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10a      	bne.n	8009f86 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	613b      	str	r3, [r7, #16]
}
 8009f82:	bf00      	nop
 8009f84:	e7fe      	b.n	8009f84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	fb02 f303 	mul.w	r3, r2, r3
 8009f8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	3350      	adds	r3, #80	; 0x50
 8009f94:	4618      	mov	r0, r3
 8009f96:	f002 fcaf 	bl	800c8f8 <pvPortMalloc>
 8009f9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d011      	beq.n	8009fc6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	3350      	adds	r3, #80	; 0x50
 8009faa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fb4:	79fa      	ldrb	r2, [r7, #7]
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	68b9      	ldr	r1, [r7, #8]
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 f805 	bl	8009fd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fc6:	69bb      	ldr	r3, [r7, #24]
	}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3720      	adds	r7, #32
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d103      	bne.n	8009fec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	69ba      	ldr	r2, [r7, #24]
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	e002      	b.n	8009ff2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ffe:	2101      	movs	r1, #1
 800a000:	69b8      	ldr	r0, [r7, #24]
 800a002:	f7ff fecb 	bl	8009d9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	78fa      	ldrb	r2, [r7, #3]
 800a00a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a00e:	bf00      	nop
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a016:	b580      	push	{r7, lr}
 800a018:	b082      	sub	sp, #8
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00e      	beq.n	800a042 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a036:	2300      	movs	r3, #0
 800a038:	2200      	movs	r2, #0
 800a03a:	2100      	movs	r1, #0
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 f81d 	bl	800a07c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a042:	bf00      	nop
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b086      	sub	sp, #24
 800a04e:	af00      	add	r7, sp, #0
 800a050:	4603      	mov	r3, r0
 800a052:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a054:	2301      	movs	r3, #1
 800a056:	617b      	str	r3, [r7, #20]
 800a058:	2300      	movs	r3, #0
 800a05a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a05c:	79fb      	ldrb	r3, [r7, #7]
 800a05e:	461a      	mov	r2, r3
 800a060:	6939      	ldr	r1, [r7, #16]
 800a062:	6978      	ldr	r0, [r7, #20]
 800a064:	f7ff ff7a 	bl	8009f5c <xQueueGenericCreate>
 800a068:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f7ff ffd3 	bl	800a016 <prvInitialiseMutex>

		return xNewQueue;
 800a070:	68fb      	ldr	r3, [r7, #12]
	}
 800a072:	4618      	mov	r0, r3
 800a074:	3718      	adds	r7, #24
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
	...

0800a07c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b08e      	sub	sp, #56	; 0x38
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
 800a088:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a08a:	2300      	movs	r3, #0
 800a08c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <xQueueGenericSend+0x32>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a0aa:	bf00      	nop
 800a0ac:	e7fe      	b.n	800a0ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d103      	bne.n	800a0bc <xQueueGenericSend+0x40>
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <xQueueGenericSend+0x44>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e000      	b.n	800a0c2 <xQueueGenericSend+0x46>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10a      	bne.n	800a0dc <xQueueGenericSend+0x60>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0d8:	bf00      	nop
 800a0da:	e7fe      	b.n	800a0da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d103      	bne.n	800a0ea <xQueueGenericSend+0x6e>
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d101      	bne.n	800a0ee <xQueueGenericSend+0x72>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e000      	b.n	800a0f0 <xQueueGenericSend+0x74>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10a      	bne.n	800a10a <xQueueGenericSend+0x8e>
	__asm volatile
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	623b      	str	r3, [r7, #32]
}
 800a106:	bf00      	nop
 800a108:	e7fe      	b.n	800a108 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a10a:	f001 fc1d 	bl	800b948 <xTaskGetSchedulerState>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d102      	bne.n	800a11a <xQueueGenericSend+0x9e>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d101      	bne.n	800a11e <xQueueGenericSend+0xa2>
 800a11a:	2301      	movs	r3, #1
 800a11c:	e000      	b.n	800a120 <xQueueGenericSend+0xa4>
 800a11e:	2300      	movs	r3, #0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10a      	bne.n	800a13a <xQueueGenericSend+0xbe>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	61fb      	str	r3, [r7, #28]
}
 800a136:	bf00      	nop
 800a138:	e7fe      	b.n	800a138 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a13a:	f002 fabb 	bl	800c6b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a146:	429a      	cmp	r2, r3
 800a148:	d302      	bcc.n	800a150 <xQueueGenericSend+0xd4>
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d129      	bne.n	800a1a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a150:	683a      	ldr	r2, [r7, #0]
 800a152:	68b9      	ldr	r1, [r7, #8]
 800a154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a156:	f000 fbbb 	bl	800a8d0 <prvCopyDataToQueue>
 800a15a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a160:	2b00      	cmp	r3, #0
 800a162:	d010      	beq.n	800a186 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a166:	3324      	adds	r3, #36	; 0x24
 800a168:	4618      	mov	r0, r3
 800a16a:	f001 fa01 	bl	800b570 <xTaskRemoveFromEventList>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d013      	beq.n	800a19c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a174:	4b3f      	ldr	r3, [pc, #252]	; (800a274 <xQueueGenericSend+0x1f8>)
 800a176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	e00a      	b.n	800a19c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d007      	beq.n	800a19c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a18c:	4b39      	ldr	r3, [pc, #228]	; (800a274 <xQueueGenericSend+0x1f8>)
 800a18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a19c:	f002 faba 	bl	800c714 <vPortExitCritical>
				return pdPASS;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e063      	b.n	800a26c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d103      	bne.n	800a1b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1aa:	f002 fab3 	bl	800c714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	e05c      	b.n	800a26c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d106      	bne.n	800a1c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1b8:	f107 0314 	add.w	r3, r7, #20
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f001 fa3d 	bl	800b63c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1c6:	f002 faa5 	bl	800c714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1ca:	f000 ff53 	bl	800b074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1ce:	f002 fa71 	bl	800c6b4 <vPortEnterCritical>
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1d8:	b25b      	sxtb	r3, r3
 800a1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1de:	d103      	bne.n	800a1e8 <xQueueGenericSend+0x16c>
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1ee:	b25b      	sxtb	r3, r3
 800a1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f4:	d103      	bne.n	800a1fe <xQueueGenericSend+0x182>
 800a1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1fe:	f002 fa89 	bl	800c714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a202:	1d3a      	adds	r2, r7, #4
 800a204:	f107 0314 	add.w	r3, r7, #20
 800a208:	4611      	mov	r1, r2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f001 fa2c 	bl	800b668 <xTaskCheckForTimeOut>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d124      	bne.n	800a260 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a216:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a218:	f000 fc52 	bl	800aac0 <prvIsQueueFull>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d018      	beq.n	800a254 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a224:	3310      	adds	r3, #16
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	4611      	mov	r1, r2
 800a22a:	4618      	mov	r0, r3
 800a22c:	f001 f950 	bl	800b4d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a232:	f000 fbdd 	bl	800a9f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a236:	f000 ff63 	bl	800b100 <xTaskResumeAll>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f47f af7c 	bne.w	800a13a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a242:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <xQueueGenericSend+0x1f8>)
 800a244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a248:	601a      	str	r2, [r3, #0]
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	e772      	b.n	800a13a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a256:	f000 fbcb 	bl	800a9f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a25a:	f000 ff51 	bl	800b100 <xTaskResumeAll>
 800a25e:	e76c      	b.n	800a13a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a262:	f000 fbc5 	bl	800a9f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a266:	f000 ff4b 	bl	800b100 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a26a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3738      	adds	r7, #56	; 0x38
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	e000ed04 	.word	0xe000ed04

0800a278 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b090      	sub	sp, #64	; 0x40
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
 800a284:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10a      	bne.n	800a2a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2a2:	bf00      	nop
 800a2a4:	e7fe      	b.n	800a2a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d103      	bne.n	800a2b4 <xQueueGenericSendFromISR+0x3c>
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <xQueueGenericSendFromISR+0x40>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e000      	b.n	800a2ba <xQueueGenericSendFromISR+0x42>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10a      	bne.n	800a2d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2d0:	bf00      	nop
 800a2d2:	e7fe      	b.n	800a2d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d103      	bne.n	800a2e2 <xQueueGenericSendFromISR+0x6a>
 800a2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d101      	bne.n	800a2e6 <xQueueGenericSendFromISR+0x6e>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e000      	b.n	800a2e8 <xQueueGenericSendFromISR+0x70>
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10a      	bne.n	800a302 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	623b      	str	r3, [r7, #32]
}
 800a2fe:	bf00      	nop
 800a300:	e7fe      	b.n	800a300 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a302:	f002 fab9 	bl	800c878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a306:	f3ef 8211 	mrs	r2, BASEPRI
 800a30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	61fa      	str	r2, [r7, #28]
 800a31c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a31e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a320:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d302      	bcc.n	800a334 <xQueueGenericSendFromISR+0xbc>
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b02      	cmp	r3, #2
 800a332:	d12f      	bne.n	800a394 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a342:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	68b9      	ldr	r1, [r7, #8]
 800a348:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a34a:	f000 fac1 	bl	800a8d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a34e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a356:	d112      	bne.n	800a37e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d016      	beq.n	800a38e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a362:	3324      	adds	r3, #36	; 0x24
 800a364:	4618      	mov	r0, r3
 800a366:	f001 f903 	bl	800b570 <xTaskRemoveFromEventList>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00e      	beq.n	800a38e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00b      	beq.n	800a38e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	601a      	str	r2, [r3, #0]
 800a37c:	e007      	b.n	800a38e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a37e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a382:	3301      	adds	r3, #1
 800a384:	b2db      	uxtb	r3, r3
 800a386:	b25a      	sxtb	r2, r3
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a38e:	2301      	movs	r3, #1
 800a390:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a392:	e001      	b.n	800a398 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a394:	2300      	movs	r3, #0
 800a396:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a3a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3740      	adds	r7, #64	; 0x40
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b08e      	sub	sp, #56	; 0x38
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10a      	bne.n	800a3d8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	623b      	str	r3, [r7, #32]
}
 800a3d4:	bf00      	nop
 800a3d6:	e7fe      	b.n	800a3d6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00a      	beq.n	800a3f6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e4:	f383 8811 	msr	BASEPRI, r3
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	61fb      	str	r3, [r7, #28]
}
 800a3f2:	bf00      	nop
 800a3f4:	e7fe      	b.n	800a3f4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d103      	bne.n	800a406 <xQueueGiveFromISR+0x58>
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <xQueueGiveFromISR+0x5c>
 800a406:	2301      	movs	r3, #1
 800a408:	e000      	b.n	800a40c <xQueueGiveFromISR+0x5e>
 800a40a:	2300      	movs	r3, #0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10a      	bne.n	800a426 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	61bb      	str	r3, [r7, #24]
}
 800a422:	bf00      	nop
 800a424:	e7fe      	b.n	800a424 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a426:	f002 fa27 	bl	800c878 <vPortValidateInterruptPriority>
	__asm volatile
 800a42a:	f3ef 8211 	mrs	r2, BASEPRI
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	617a      	str	r2, [r7, #20]
 800a440:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a442:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a444:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a452:	429a      	cmp	r2, r3
 800a454:	d22b      	bcs.n	800a4ae <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a45c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a466:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a468:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a470:	d112      	bne.n	800a498 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a476:	2b00      	cmp	r3, #0
 800a478:	d016      	beq.n	800a4a8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47c:	3324      	adds	r3, #36	; 0x24
 800a47e:	4618      	mov	r0, r3
 800a480:	f001 f876 	bl	800b570 <xTaskRemoveFromEventList>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00e      	beq.n	800a4a8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00b      	beq.n	800a4a8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	2201      	movs	r2, #1
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	e007      	b.n	800a4a8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a49c:	3301      	adds	r3, #1
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	b25a      	sxtb	r2, r3
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	637b      	str	r3, [r7, #52]	; 0x34
 800a4ac:	e001      	b.n	800a4b2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	637b      	str	r3, [r7, #52]	; 0x34
 800a4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f383 8811 	msr	BASEPRI, r3
}
 800a4bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3738      	adds	r7, #56	; 0x38
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08c      	sub	sp, #48	; 0x30
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10a      	bne.n	800a4f8 <xQueueReceive+0x30>
	__asm volatile
 800a4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	623b      	str	r3, [r7, #32]
}
 800a4f4:	bf00      	nop
 800a4f6:	e7fe      	b.n	800a4f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d103      	bne.n	800a506 <xQueueReceive+0x3e>
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a502:	2b00      	cmp	r3, #0
 800a504:	d101      	bne.n	800a50a <xQueueReceive+0x42>
 800a506:	2301      	movs	r3, #1
 800a508:	e000      	b.n	800a50c <xQueueReceive+0x44>
 800a50a:	2300      	movs	r3, #0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <xQueueReceive+0x5e>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	61fb      	str	r3, [r7, #28]
}
 800a522:	bf00      	nop
 800a524:	e7fe      	b.n	800a524 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a526:	f001 fa0f 	bl	800b948 <xTaskGetSchedulerState>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d102      	bne.n	800a536 <xQueueReceive+0x6e>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <xQueueReceive+0x72>
 800a536:	2301      	movs	r3, #1
 800a538:	e000      	b.n	800a53c <xQueueReceive+0x74>
 800a53a:	2300      	movs	r3, #0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10a      	bne.n	800a556 <xQueueReceive+0x8e>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	61bb      	str	r3, [r7, #24]
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a556:	f002 f8ad 	bl	800c6b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	2b00      	cmp	r3, #0
 800a564:	d01f      	beq.n	800a5a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a566:	68b9      	ldr	r1, [r7, #8]
 800a568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a56a:	f000 fa1b 	bl	800a9a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a570:	1e5a      	subs	r2, r3, #1
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00f      	beq.n	800a59e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	3310      	adds	r3, #16
 800a582:	4618      	mov	r0, r3
 800a584:	f000 fff4 	bl	800b570 <xTaskRemoveFromEventList>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d007      	beq.n	800a59e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a58e:	4b3d      	ldr	r3, [pc, #244]	; (800a684 <xQueueReceive+0x1bc>)
 800a590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a59e:	f002 f8b9 	bl	800c714 <vPortExitCritical>
				return pdPASS;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e069      	b.n	800a67a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d103      	bne.n	800a5b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5ac:	f002 f8b2 	bl	800c714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	e062      	b.n	800a67a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d106      	bne.n	800a5c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5ba:	f107 0310 	add.w	r3, r7, #16
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f001 f83c 	bl	800b63c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5c8:	f002 f8a4 	bl	800c714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5cc:	f000 fd52 	bl	800b074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5d0:	f002 f870 	bl	800c6b4 <vPortEnterCritical>
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5da:	b25b      	sxtb	r3, r3
 800a5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e0:	d103      	bne.n	800a5ea <xQueueReceive+0x122>
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5f0:	b25b      	sxtb	r3, r3
 800a5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f6:	d103      	bne.n	800a600 <xQueueReceive+0x138>
 800a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a600:	f002 f888 	bl	800c714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a604:	1d3a      	adds	r2, r7, #4
 800a606:	f107 0310 	add.w	r3, r7, #16
 800a60a:	4611      	mov	r1, r2
 800a60c:	4618      	mov	r0, r3
 800a60e:	f001 f82b 	bl	800b668 <xTaskCheckForTimeOut>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d123      	bne.n	800a660 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a61a:	f000 fa3b 	bl	800aa94 <prvIsQueueEmpty>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d017      	beq.n	800a654 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	3324      	adds	r3, #36	; 0x24
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	4611      	mov	r1, r2
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 ff4f 	bl	800b4d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a634:	f000 f9dc 	bl	800a9f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a638:	f000 fd62 	bl	800b100 <xTaskResumeAll>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d189      	bne.n	800a556 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a642:	4b10      	ldr	r3, [pc, #64]	; (800a684 <xQueueReceive+0x1bc>)
 800a644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	e780      	b.n	800a556 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a656:	f000 f9cb 	bl	800a9f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a65a:	f000 fd51 	bl	800b100 <xTaskResumeAll>
 800a65e:	e77a      	b.n	800a556 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a662:	f000 f9c5 	bl	800a9f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a666:	f000 fd4b 	bl	800b100 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a66a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a66c:	f000 fa12 	bl	800aa94 <prvIsQueueEmpty>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	f43f af6f 	beq.w	800a556 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a678:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3730      	adds	r7, #48	; 0x30
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	e000ed04 	.word	0xe000ed04

0800a688 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08e      	sub	sp, #56	; 0x38
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a692:	2300      	movs	r3, #0
 800a694:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a69a:	2300      	movs	r3, #0
 800a69c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10a      	bne.n	800a6ba <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	623b      	str	r3, [r7, #32]
}
 800a6b6:	bf00      	nop
 800a6b8:	e7fe      	b.n	800a6b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00a      	beq.n	800a6d8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	61fb      	str	r3, [r7, #28]
}
 800a6d4:	bf00      	nop
 800a6d6:	e7fe      	b.n	800a6d6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6d8:	f001 f936 	bl	800b948 <xTaskGetSchedulerState>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d102      	bne.n	800a6e8 <xQueueSemaphoreTake+0x60>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d101      	bne.n	800a6ec <xQueueSemaphoreTake+0x64>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e000      	b.n	800a6ee <xQueueSemaphoreTake+0x66>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10a      	bne.n	800a708 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	61bb      	str	r3, [r7, #24]
}
 800a704:	bf00      	nop
 800a706:	e7fe      	b.n	800a706 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a708:	f001 ffd4 	bl	800c6b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a710:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	2b00      	cmp	r3, #0
 800a716:	d024      	beq.n	800a762 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	1e5a      	subs	r2, r3, #1
 800a71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d104      	bne.n	800a732 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a728:	f001 fa84 	bl	800bc34 <pvTaskIncrementMutexHeldCount>
 800a72c:	4602      	mov	r2, r0
 800a72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a730:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00f      	beq.n	800a75a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73c:	3310      	adds	r3, #16
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 ff16 	bl	800b570 <xTaskRemoveFromEventList>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d007      	beq.n	800a75a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a74a:	4b54      	ldr	r3, [pc, #336]	; (800a89c <xQueueSemaphoreTake+0x214>)
 800a74c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a75a:	f001 ffdb 	bl	800c714 <vPortExitCritical>
				return pdPASS;
 800a75e:	2301      	movs	r3, #1
 800a760:	e097      	b.n	800a892 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d111      	bne.n	800a78c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00a      	beq.n	800a784 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	617b      	str	r3, [r7, #20]
}
 800a780:	bf00      	nop
 800a782:	e7fe      	b.n	800a782 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a784:	f001 ffc6 	bl	800c714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a788:	2300      	movs	r3, #0
 800a78a:	e082      	b.n	800a892 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d106      	bne.n	800a7a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a792:	f107 030c 	add.w	r3, r7, #12
 800a796:	4618      	mov	r0, r3
 800a798:	f000 ff50 	bl	800b63c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a79c:	2301      	movs	r3, #1
 800a79e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7a0:	f001 ffb8 	bl	800c714 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7a4:	f000 fc66 	bl	800b074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7a8:	f001 ff84 	bl	800c6b4 <vPortEnterCritical>
 800a7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7b2:	b25b      	sxtb	r3, r3
 800a7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b8:	d103      	bne.n	800a7c2 <xQueueSemaphoreTake+0x13a>
 800a7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7c8:	b25b      	sxtb	r3, r3
 800a7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ce:	d103      	bne.n	800a7d8 <xQueueSemaphoreTake+0x150>
 800a7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7d8:	f001 ff9c 	bl	800c714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7dc:	463a      	mov	r2, r7
 800a7de:	f107 030c 	add.w	r3, r7, #12
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 ff3f 	bl	800b668 <xTaskCheckForTimeOut>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d132      	bne.n	800a856 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7f2:	f000 f94f 	bl	800aa94 <prvIsQueueEmpty>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d026      	beq.n	800a84a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d109      	bne.n	800a818 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a804:	f001 ff56 	bl	800c6b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f001 f8b9 	bl	800b984 <xTaskPriorityInherit>
 800a812:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a814:	f001 ff7e 	bl	800c714 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81a:	3324      	adds	r3, #36	; 0x24
 800a81c:	683a      	ldr	r2, [r7, #0]
 800a81e:	4611      	mov	r1, r2
 800a820:	4618      	mov	r0, r3
 800a822:	f000 fe55 	bl	800b4d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a828:	f000 f8e2 	bl	800a9f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a82c:	f000 fc68 	bl	800b100 <xTaskResumeAll>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	f47f af68 	bne.w	800a708 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a838:	4b18      	ldr	r3, [pc, #96]	; (800a89c <xQueueSemaphoreTake+0x214>)
 800a83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a83e:	601a      	str	r2, [r3, #0]
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	e75e      	b.n	800a708 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a84a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a84c:	f000 f8d0 	bl	800a9f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a850:	f000 fc56 	bl	800b100 <xTaskResumeAll>
 800a854:	e758      	b.n	800a708 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a858:	f000 f8ca 	bl	800a9f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a85c:	f000 fc50 	bl	800b100 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a860:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a862:	f000 f917 	bl	800aa94 <prvIsQueueEmpty>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f43f af4d 	beq.w	800a708 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00d      	beq.n	800a890 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a874:	f001 ff1e 	bl	800c6b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a87a:	f000 f811 	bl	800a8a0 <prvGetDisinheritPriorityAfterTimeout>
 800a87e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a886:	4618      	mov	r0, r3
 800a888:	f001 f952 	bl	800bb30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a88c:	f001 ff42 	bl	800c714 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a890:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a892:	4618      	mov	r0, r3
 800a894:	3738      	adds	r7, #56	; 0x38
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	e000ed04 	.word	0xe000ed04

0800a8a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d006      	beq.n	800a8be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	e001      	b.n	800a8c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
	}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10d      	bne.n	800a90a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d14d      	bne.n	800a992 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f001 f8aa 	bl	800ba54 <xTaskPriorityDisinherit>
 800a900:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	609a      	str	r2, [r3, #8]
 800a908:	e043      	b.n	800a992 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d119      	bne.n	800a944 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6858      	ldr	r0, [r3, #4]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a918:	461a      	mov	r2, r3
 800a91a:	68b9      	ldr	r1, [r7, #8]
 800a91c:	f003 ffb6 	bl	800e88c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	685a      	ldr	r2, [r3, #4]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a928:	441a      	add	r2, r3
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	429a      	cmp	r2, r3
 800a938:	d32b      	bcc.n	800a992 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	605a      	str	r2, [r3, #4]
 800a942:	e026      	b.n	800a992 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	68d8      	ldr	r0, [r3, #12]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94c:	461a      	mov	r2, r3
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	f003 ff9c 	bl	800e88c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	68da      	ldr	r2, [r3, #12]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95c:	425b      	negs	r3, r3
 800a95e:	441a      	add	r2, r3
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	68da      	ldr	r2, [r3, #12]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d207      	bcs.n	800a980 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	689a      	ldr	r2, [r3, #8]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a978:	425b      	negs	r3, r3
 800a97a:	441a      	add	r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b02      	cmp	r3, #2
 800a984:	d105      	bne.n	800a992 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	3b01      	subs	r3, #1
 800a990:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	1c5a      	adds	r2, r3, #1
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a99a:	697b      	ldr	r3, [r7, #20]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3718      	adds	r7, #24
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d018      	beq.n	800a9e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	68da      	ldr	r2, [r3, #12]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9be:	441a      	add	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68da      	ldr	r2, [r3, #12]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d303      	bcc.n	800a9d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68d9      	ldr	r1, [r3, #12]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	6838      	ldr	r0, [r7, #0]
 800a9e4:	f003 ff52 	bl	800e88c <memcpy>
	}
}
 800a9e8:	bf00      	nop
 800a9ea:	3708      	adds	r7, #8
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a9f8:	f001 fe5c 	bl	800c6b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa04:	e011      	b.n	800aa2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d012      	beq.n	800aa34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	3324      	adds	r3, #36	; 0x24
 800aa12:	4618      	mov	r0, r3
 800aa14:	f000 fdac 	bl	800b570 <xTaskRemoveFromEventList>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa1e:	f000 fe85 	bl	800b72c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
 800aa24:	3b01      	subs	r3, #1
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	dce9      	bgt.n	800aa06 <prvUnlockQueue+0x16>
 800aa32:	e000      	b.n	800aa36 <prvUnlockQueue+0x46>
					break;
 800aa34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	22ff      	movs	r2, #255	; 0xff
 800aa3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aa3e:	f001 fe69 	bl	800c714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa42:	f001 fe37 	bl	800c6b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa4e:	e011      	b.n	800aa74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d012      	beq.n	800aa7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3310      	adds	r3, #16
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f000 fd87 	bl	800b570 <xTaskRemoveFromEventList>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa68:	f000 fe60 	bl	800b72c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	dce9      	bgt.n	800aa50 <prvUnlockQueue+0x60>
 800aa7c:	e000      	b.n	800aa80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	22ff      	movs	r2, #255	; 0xff
 800aa84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa88:	f001 fe44 	bl	800c714 <vPortExitCritical>
}
 800aa8c:	bf00      	nop
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa9c:	f001 fe0a 	bl	800c6b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d102      	bne.n	800aaae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	e001      	b.n	800aab2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aaae:	2300      	movs	r3, #0
 800aab0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aab2:	f001 fe2f 	bl	800c714 <vPortExitCritical>

	return xReturn;
 800aab6:	68fb      	ldr	r3, [r7, #12]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aac8:	f001 fdf4 	bl	800c6b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d102      	bne.n	800aade <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aad8:	2301      	movs	r3, #1
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	e001      	b.n	800aae2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aade:	2300      	movs	r3, #0
 800aae0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aae2:	f001 fe17 	bl	800c714 <vPortExitCritical>

	return xReturn;
 800aae6:	68fb      	ldr	r3, [r7, #12]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aafa:	2300      	movs	r3, #0
 800aafc:	60fb      	str	r3, [r7, #12]
 800aafe:	e014      	b.n	800ab2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab00:	4a0f      	ldr	r2, [pc, #60]	; (800ab40 <vQueueAddToRegistry+0x50>)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10b      	bne.n	800ab24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab0c:	490c      	ldr	r1, [pc, #48]	; (800ab40 <vQueueAddToRegistry+0x50>)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab16:	4a0a      	ldr	r2, [pc, #40]	; (800ab40 <vQueueAddToRegistry+0x50>)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	00db      	lsls	r3, r3, #3
 800ab1c:	4413      	add	r3, r2
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab22:	e006      	b.n	800ab32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	3301      	adds	r3, #1
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b07      	cmp	r3, #7
 800ab2e:	d9e7      	bls.n	800ab00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab30:	bf00      	nop
 800ab32:	bf00      	nop
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	20001194 	.word	0x20001194

0800ab44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab54:	f001 fdae 	bl	800c6b4 <vPortEnterCritical>
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab5e:	b25b      	sxtb	r3, r3
 800ab60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab64:	d103      	bne.n	800ab6e <vQueueWaitForMessageRestricted+0x2a>
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab74:	b25b      	sxtb	r3, r3
 800ab76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7a:	d103      	bne.n	800ab84 <vQueueWaitForMessageRestricted+0x40>
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab84:	f001 fdc6 	bl	800c714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d106      	bne.n	800ab9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	3324      	adds	r3, #36	; 0x24
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	68b9      	ldr	r1, [r7, #8]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f000 fcbd 	bl	800b518 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab9e:	6978      	ldr	r0, [r7, #20]
 800aba0:	f7ff ff26 	bl	800a9f0 <prvUnlockQueue>
	}
 800aba4:	bf00      	nop
 800aba6:	3718      	adds	r7, #24
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800abac:	b580      	push	{r7, lr}
 800abae:	b08e      	sub	sp, #56	; 0x38
 800abb0:	af04      	add	r7, sp, #16
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
 800abb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800abba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10a      	bne.n	800abd6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	623b      	str	r3, [r7, #32]
}
 800abd2:	bf00      	nop
 800abd4:	e7fe      	b.n	800abd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800abd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10a      	bne.n	800abf2 <xTaskCreateStatic+0x46>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	61fb      	str	r3, [r7, #28]
}
 800abee:	bf00      	nop
 800abf0:	e7fe      	b.n	800abf0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800abf2:	23b0      	movs	r3, #176	; 0xb0
 800abf4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	2bb0      	cmp	r3, #176	; 0xb0
 800abfa:	d00a      	beq.n	800ac12 <xTaskCreateStatic+0x66>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	61bb      	str	r3, [r7, #24]
}
 800ac0e:	bf00      	nop
 800ac10:	e7fe      	b.n	800ac10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d01e      	beq.n	800ac58 <xTaskCreateStatic+0xac>
 800ac1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d01b      	beq.n	800ac58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	2202      	movs	r2, #2
 800ac2e:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac32:	2300      	movs	r3, #0
 800ac34:	9303      	str	r3, [sp, #12]
 800ac36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac38:	9302      	str	r3, [sp, #8]
 800ac3a:	f107 0314 	add.w	r3, r7, #20
 800ac3e:	9301      	str	r3, [sp, #4]
 800ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f000 f850 	bl	800acf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac52:	f000 f8f9 	bl	800ae48 <prvAddNewTaskToReadyList>
 800ac56:	e001      	b.n	800ac5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac5c:	697b      	ldr	r3, [r7, #20]
	}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3728      	adds	r7, #40	; 0x28
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b08c      	sub	sp, #48	; 0x30
 800ac6a:	af04      	add	r7, sp, #16
 800ac6c:	60f8      	str	r0, [r7, #12]
 800ac6e:	60b9      	str	r1, [r7, #8]
 800ac70:	603b      	str	r3, [r7, #0]
 800ac72:	4613      	mov	r3, r2
 800ac74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac76:	88fb      	ldrh	r3, [r7, #6]
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f001 fe3c 	bl	800c8f8 <pvPortMalloc>
 800ac80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00e      	beq.n	800aca6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac88:	20b0      	movs	r0, #176	; 0xb0
 800ac8a:	f001 fe35 	bl	800c8f8 <pvPortMalloc>
 800ac8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d003      	beq.n	800ac9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	697a      	ldr	r2, [r7, #20]
 800ac9a:	631a      	str	r2, [r3, #48]	; 0x30
 800ac9c:	e005      	b.n	800acaa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac9e:	6978      	ldr	r0, [r7, #20]
 800aca0:	f001 fef6 	bl	800ca90 <vPortFree>
 800aca4:	e001      	b.n	800acaa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aca6:	2300      	movs	r3, #0
 800aca8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d017      	beq.n	800ace0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800acb8:	88fa      	ldrh	r2, [r7, #6]
 800acba:	2300      	movs	r3, #0
 800acbc:	9303      	str	r3, [sp, #12]
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	9302      	str	r3, [sp, #8]
 800acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc4:	9301      	str	r3, [sp, #4]
 800acc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc8:	9300      	str	r3, [sp, #0]
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	68b9      	ldr	r1, [r7, #8]
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	f000 f80e 	bl	800acf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acd4:	69f8      	ldr	r0, [r7, #28]
 800acd6:	f000 f8b7 	bl	800ae48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800acda:	2301      	movs	r3, #1
 800acdc:	61bb      	str	r3, [r7, #24]
 800acde:	e002      	b.n	800ace6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ace0:	f04f 33ff 	mov.w	r3, #4294967295
 800ace4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ace6:	69bb      	ldr	r3, [r7, #24]
	}
 800ace8:	4618      	mov	r0, r3
 800acea:	3720      	adds	r7, #32
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b088      	sub	sp, #32
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800acfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	461a      	mov	r2, r3
 800ad08:	21a5      	movs	r1, #165	; 0xa5
 800ad0a:	f003 fcea 	bl	800e6e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	f023 0307 	bic.w	r3, r3, #7
 800ad26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	f003 0307 	and.w	r3, r3, #7
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00a      	beq.n	800ad48 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ad32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad36:	f383 8811 	msr	BASEPRI, r3
 800ad3a:	f3bf 8f6f 	isb	sy
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	617b      	str	r3, [r7, #20]
}
 800ad44:	bf00      	nop
 800ad46:	e7fe      	b.n	800ad46 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800ad48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4a:	69ba      	ldr	r2, [r7, #24]
 800ad4c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d01f      	beq.n	800ad94 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad54:	2300      	movs	r3, #0
 800ad56:	61fb      	str	r3, [r7, #28]
 800ad58:	e012      	b.n	800ad80 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	4413      	add	r3, r2
 800ad60:	7819      	ldrb	r1, [r3, #0]
 800ad62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	4413      	add	r3, r2
 800ad68:	3334      	adds	r3, #52	; 0x34
 800ad6a:	460a      	mov	r2, r1
 800ad6c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	4413      	add	r3, r2
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d006      	beq.n	800ad88 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	61fb      	str	r3, [r7, #28]
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	2b0f      	cmp	r3, #15
 800ad84:	d9e9      	bls.n	800ad5a <prvInitialiseNewTask+0x6a>
 800ad86:	e000      	b.n	800ad8a <prvInitialiseNewTask+0x9a>
			{
				break;
 800ad88:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad92:	e003      	b.n	800ad9c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad96:	2200      	movs	r2, #0
 800ad98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9e:	2b37      	cmp	r3, #55	; 0x37
 800ada0:	d901      	bls.n	800ada6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ada2:	2337      	movs	r3, #55	; 0x37
 800ada4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adaa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800adac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adb0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	2200      	movs	r2, #0
 800adb6:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800adb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adba:	3304      	adds	r3, #4
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7fe ff59 	bl	8009c74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc4:	3318      	adds	r3, #24
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7fe ff54 	bl	8009c74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800add0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800add2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800add8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adda:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ade0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ade2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade4:	2200      	movs	r2, #0
 800ade6:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adea:	2200      	movs	r2, #0
 800adec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800adf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800adf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfa:	335c      	adds	r3, #92	; 0x5c
 800adfc:	224c      	movs	r2, #76	; 0x4c
 800adfe:	2100      	movs	r1, #0
 800ae00:	4618      	mov	r0, r3
 800ae02:	f003 fc6e 	bl	800e6e2 <memset>
 800ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae08:	4a0c      	ldr	r2, [pc, #48]	; (800ae3c <prvInitialiseNewTask+0x14c>)
 800ae0a:	661a      	str	r2, [r3, #96]	; 0x60
 800ae0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0e:	4a0c      	ldr	r2, [pc, #48]	; (800ae40 <prvInitialiseNewTask+0x150>)
 800ae10:	665a      	str	r2, [r3, #100]	; 0x64
 800ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae14:	4a0b      	ldr	r2, [pc, #44]	; (800ae44 <prvInitialiseNewTask+0x154>)
 800ae16:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae18:	683a      	ldr	r2, [r7, #0]
 800ae1a:	68f9      	ldr	r1, [r7, #12]
 800ae1c:	69b8      	ldr	r0, [r7, #24]
 800ae1e:	f001 fb1b 	bl	800c458 <pxPortInitialiseStack>
 800ae22:	4602      	mov	r2, r0
 800ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae34:	bf00      	nop
 800ae36:	3720      	adds	r7, #32
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	20005838 	.word	0x20005838
 800ae40:	200058a0 	.word	0x200058a0
 800ae44:	20005908 	.word	0x20005908

0800ae48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae50:	f001 fc30 	bl	800c6b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae54:	4b2d      	ldr	r3, [pc, #180]	; (800af0c <prvAddNewTaskToReadyList+0xc4>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	4a2c      	ldr	r2, [pc, #176]	; (800af0c <prvAddNewTaskToReadyList+0xc4>)
 800ae5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae5e:	4b2c      	ldr	r3, [pc, #176]	; (800af10 <prvAddNewTaskToReadyList+0xc8>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d109      	bne.n	800ae7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae66:	4a2a      	ldr	r2, [pc, #168]	; (800af10 <prvAddNewTaskToReadyList+0xc8>)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae6c:	4b27      	ldr	r3, [pc, #156]	; (800af0c <prvAddNewTaskToReadyList+0xc4>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d110      	bne.n	800ae96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae74:	f000 fca6 	bl	800b7c4 <prvInitialiseTaskLists>
 800ae78:	e00d      	b.n	800ae96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae7a:	4b26      	ldr	r3, [pc, #152]	; (800af14 <prvAddNewTaskToReadyList+0xcc>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d109      	bne.n	800ae96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae82:	4b23      	ldr	r3, [pc, #140]	; (800af10 <prvAddNewTaskToReadyList+0xc8>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d802      	bhi.n	800ae96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae90:	4a1f      	ldr	r2, [pc, #124]	; (800af10 <prvAddNewTaskToReadyList+0xc8>)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae96:	4b20      	ldr	r3, [pc, #128]	; (800af18 <prvAddNewTaskToReadyList+0xd0>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	4a1e      	ldr	r2, [pc, #120]	; (800af18 <prvAddNewTaskToReadyList+0xd0>)
 800ae9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aea0:	4b1d      	ldr	r3, [pc, #116]	; (800af18 <prvAddNewTaskToReadyList+0xd0>)
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeac:	4b1b      	ldr	r3, [pc, #108]	; (800af1c <prvAddNewTaskToReadyList+0xd4>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d903      	bls.n	800aebc <prvAddNewTaskToReadyList+0x74>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb8:	4a18      	ldr	r2, [pc, #96]	; (800af1c <prvAddNewTaskToReadyList+0xd4>)
 800aeba:	6013      	str	r3, [r2, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec0:	4613      	mov	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	4413      	add	r3, r2
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4a15      	ldr	r2, [pc, #84]	; (800af20 <prvAddNewTaskToReadyList+0xd8>)
 800aeca:	441a      	add	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	3304      	adds	r3, #4
 800aed0:	4619      	mov	r1, r3
 800aed2:	4610      	mov	r0, r2
 800aed4:	f7fe fedb 	bl	8009c8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aed8:	f001 fc1c 	bl	800c714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aedc:	4b0d      	ldr	r3, [pc, #52]	; (800af14 <prvAddNewTaskToReadyList+0xcc>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00e      	beq.n	800af02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aee4:	4b0a      	ldr	r3, [pc, #40]	; (800af10 <prvAddNewTaskToReadyList+0xc8>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d207      	bcs.n	800af02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aef2:	4b0c      	ldr	r3, [pc, #48]	; (800af24 <prvAddNewTaskToReadyList+0xdc>)
 800aef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af02:	bf00      	nop
 800af04:	3708      	adds	r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	200016a8 	.word	0x200016a8
 800af10:	200011d4 	.word	0x200011d4
 800af14:	200016b4 	.word	0x200016b4
 800af18:	200016c4 	.word	0x200016c4
 800af1c:	200016b0 	.word	0x200016b0
 800af20:	200011d8 	.word	0x200011d8
 800af24:	e000ed04 	.word	0xe000ed04

0800af28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af30:	2300      	movs	r3, #0
 800af32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d017      	beq.n	800af6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af3a:	4b13      	ldr	r3, [pc, #76]	; (800af88 <vTaskDelay+0x60>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00a      	beq.n	800af58 <vTaskDelay+0x30>
	__asm volatile
 800af42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af46:	f383 8811 	msr	BASEPRI, r3
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	60bb      	str	r3, [r7, #8]
}
 800af54:	bf00      	nop
 800af56:	e7fe      	b.n	800af56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af58:	f000 f88c 	bl	800b074 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af5c:	2100      	movs	r1, #0
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fe7c 	bl	800bc5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af64:	f000 f8cc 	bl	800b100 <xTaskResumeAll>
 800af68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d107      	bne.n	800af80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800af70:	4b06      	ldr	r3, [pc, #24]	; (800af8c <vTaskDelay+0x64>)
 800af72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af76:	601a      	str	r2, [r3, #0]
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af80:	bf00      	nop
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	200016d0 	.word	0x200016d0
 800af8c:	e000ed04 	.word	0xe000ed04

0800af90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b08a      	sub	sp, #40	; 0x28
 800af94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af96:	2300      	movs	r3, #0
 800af98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af9a:	2300      	movs	r3, #0
 800af9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af9e:	463a      	mov	r2, r7
 800afa0:	1d39      	adds	r1, r7, #4
 800afa2:	f107 0308 	add.w	r3, r7, #8
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7fe fe10 	bl	8009bcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800afac:	6839      	ldr	r1, [r7, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	9202      	str	r2, [sp, #8]
 800afb4:	9301      	str	r3, [sp, #4]
 800afb6:	2300      	movs	r3, #0
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	2300      	movs	r3, #0
 800afbc:	460a      	mov	r2, r1
 800afbe:	4925      	ldr	r1, [pc, #148]	; (800b054 <vTaskStartScheduler+0xc4>)
 800afc0:	4825      	ldr	r0, [pc, #148]	; (800b058 <vTaskStartScheduler+0xc8>)
 800afc2:	f7ff fdf3 	bl	800abac <xTaskCreateStatic>
 800afc6:	4603      	mov	r3, r0
 800afc8:	4a24      	ldr	r2, [pc, #144]	; (800b05c <vTaskStartScheduler+0xcc>)
 800afca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800afcc:	4b23      	ldr	r3, [pc, #140]	; (800b05c <vTaskStartScheduler+0xcc>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800afd4:	2301      	movs	r3, #1
 800afd6:	617b      	str	r3, [r7, #20]
 800afd8:	e001      	b.n	800afde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800afda:	2300      	movs	r3, #0
 800afdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d102      	bne.n	800afea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800afe4:	f000 fe8e 	bl	800bd04 <xTimerCreateTimerTask>
 800afe8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d11d      	bne.n	800b02c <vTaskStartScheduler+0x9c>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	613b      	str	r3, [r7, #16]
}
 800b002:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b004:	4b16      	ldr	r3, [pc, #88]	; (800b060 <vTaskStartScheduler+0xd0>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	335c      	adds	r3, #92	; 0x5c
 800b00a:	4a16      	ldr	r2, [pc, #88]	; (800b064 <vTaskStartScheduler+0xd4>)
 800b00c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b00e:	4b16      	ldr	r3, [pc, #88]	; (800b068 <vTaskStartScheduler+0xd8>)
 800b010:	f04f 32ff 	mov.w	r2, #4294967295
 800b014:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b016:	4b15      	ldr	r3, [pc, #84]	; (800b06c <vTaskStartScheduler+0xdc>)
 800b018:	2201      	movs	r2, #1
 800b01a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b01c:	4b14      	ldr	r3, [pc, #80]	; (800b070 <vTaskStartScheduler+0xe0>)
 800b01e:	2200      	movs	r2, #0
 800b020:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b022:	f7f5 ff5f 	bl	8000ee4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b026:	f001 faa3 	bl	800c570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b02a:	e00e      	b.n	800b04a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b032:	d10a      	bne.n	800b04a <vTaskStartScheduler+0xba>
	__asm volatile
 800b034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	60fb      	str	r3, [r7, #12]
}
 800b046:	bf00      	nop
 800b048:	e7fe      	b.n	800b048 <vTaskStartScheduler+0xb8>
}
 800b04a:	bf00      	nop
 800b04c:	3718      	adds	r7, #24
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	08010b04 	.word	0x08010b04
 800b058:	0800b745 	.word	0x0800b745
 800b05c:	200016cc 	.word	0x200016cc
 800b060:	200011d4 	.word	0x200011d4
 800b064:	20000088 	.word	0x20000088
 800b068:	200016c8 	.word	0x200016c8
 800b06c:	200016b4 	.word	0x200016b4
 800b070:	200016ac 	.word	0x200016ac

0800b074 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b074:	b480      	push	{r7}
 800b076:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b078:	4b04      	ldr	r3, [pc, #16]	; (800b08c <vTaskSuspendAll+0x18>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3301      	adds	r3, #1
 800b07e:	4a03      	ldr	r2, [pc, #12]	; (800b08c <vTaskSuspendAll+0x18>)
 800b080:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b082:	bf00      	nop
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr
 800b08c:	200016d0 	.word	0x200016d0

0800b090 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800b096:	2300      	movs	r3, #0
 800b098:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800b09a:	4b14      	ldr	r3, [pc, #80]	; (800b0ec <prvGetExpectedIdleTime+0x5c>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800b0a6:	4b12      	ldr	r3, [pc, #72]	; (800b0f0 <prvGetExpectedIdleTime+0x60>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d002      	beq.n	800b0b6 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	607b      	str	r3, [r7, #4]
 800b0b4:	e012      	b.n	800b0dc <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800b0b6:	4b0f      	ldr	r3, [pc, #60]	; (800b0f4 <prvGetExpectedIdleTime+0x64>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d902      	bls.n	800b0c4 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	607b      	str	r3, [r7, #4]
 800b0c2:	e00b      	b.n	800b0dc <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d002      	beq.n	800b0d0 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	607b      	str	r3, [r7, #4]
 800b0ce:	e005      	b.n	800b0dc <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800b0d0:	4b09      	ldr	r3, [pc, #36]	; (800b0f8 <prvGetExpectedIdleTime+0x68>)
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	4b09      	ldr	r3, [pc, #36]	; (800b0fc <prvGetExpectedIdleTime+0x6c>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800b0dc:	687b      	ldr	r3, [r7, #4]
	}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	370c      	adds	r7, #12
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	200016b0 	.word	0x200016b0
 800b0f0:	200011d4 	.word	0x200011d4
 800b0f4:	200011d8 	.word	0x200011d8
 800b0f8:	200016c8 	.word	0x200016c8
 800b0fc:	200016ac 	.word	0x200016ac

0800b100 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b106:	2300      	movs	r3, #0
 800b108:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b10a:	2300      	movs	r3, #0
 800b10c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b10e:	4b42      	ldr	r3, [pc, #264]	; (800b218 <xTaskResumeAll+0x118>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10a      	bne.n	800b12c <xTaskResumeAll+0x2c>
	__asm volatile
 800b116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11a:	f383 8811 	msr	BASEPRI, r3
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	603b      	str	r3, [r7, #0]
}
 800b128:	bf00      	nop
 800b12a:	e7fe      	b.n	800b12a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b12c:	f001 fac2 	bl	800c6b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b130:	4b39      	ldr	r3, [pc, #228]	; (800b218 <xTaskResumeAll+0x118>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	3b01      	subs	r3, #1
 800b136:	4a38      	ldr	r2, [pc, #224]	; (800b218 <xTaskResumeAll+0x118>)
 800b138:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b13a:	4b37      	ldr	r3, [pc, #220]	; (800b218 <xTaskResumeAll+0x118>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d162      	bne.n	800b208 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b142:	4b36      	ldr	r3, [pc, #216]	; (800b21c <xTaskResumeAll+0x11c>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d05e      	beq.n	800b208 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b14a:	e02f      	b.n	800b1ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b14c:	4b34      	ldr	r3, [pc, #208]	; (800b220 <xTaskResumeAll+0x120>)
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	3318      	adds	r3, #24
 800b158:	4618      	mov	r0, r3
 800b15a:	f7fe fdf5 	bl	8009d48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	3304      	adds	r3, #4
 800b162:	4618      	mov	r0, r3
 800b164:	f7fe fdf0 	bl	8009d48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b16c:	4b2d      	ldr	r3, [pc, #180]	; (800b224 <xTaskResumeAll+0x124>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	429a      	cmp	r2, r3
 800b172:	d903      	bls.n	800b17c <xTaskResumeAll+0x7c>
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b178:	4a2a      	ldr	r2, [pc, #168]	; (800b224 <xTaskResumeAll+0x124>)
 800b17a:	6013      	str	r3, [r2, #0]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b180:	4613      	mov	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4413      	add	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4a27      	ldr	r2, [pc, #156]	; (800b228 <xTaskResumeAll+0x128>)
 800b18a:	441a      	add	r2, r3
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3304      	adds	r3, #4
 800b190:	4619      	mov	r1, r3
 800b192:	4610      	mov	r0, r2
 800b194:	f7fe fd7b 	bl	8009c8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b19c:	4b23      	ldr	r3, [pc, #140]	; (800b22c <xTaskResumeAll+0x12c>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d302      	bcc.n	800b1ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b1a6:	4b22      	ldr	r3, [pc, #136]	; (800b230 <xTaskResumeAll+0x130>)
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1ac:	4b1c      	ldr	r3, [pc, #112]	; (800b220 <xTaskResumeAll+0x120>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1cb      	bne.n	800b14c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d001      	beq.n	800b1be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b1ba:	f000 fba5 	bl	800b908 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b1be:	4b1d      	ldr	r3, [pc, #116]	; (800b234 <xTaskResumeAll+0x134>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d010      	beq.n	800b1ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b1ca:	f000 f847 	bl	800b25c <xTaskIncrementTick>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b1d4:	4b16      	ldr	r3, [pc, #88]	; (800b230 <xTaskResumeAll+0x130>)
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1f1      	bne.n	800b1ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b1e6:	4b13      	ldr	r3, [pc, #76]	; (800b234 <xTaskResumeAll+0x134>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b1ec:	4b10      	ldr	r3, [pc, #64]	; (800b230 <xTaskResumeAll+0x130>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d009      	beq.n	800b208 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b1f8:	4b0f      	ldr	r3, [pc, #60]	; (800b238 <xTaskResumeAll+0x138>)
 800b1fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1fe:	601a      	str	r2, [r3, #0]
 800b200:	f3bf 8f4f 	dsb	sy
 800b204:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b208:	f001 fa84 	bl	800c714 <vPortExitCritical>

	return xAlreadyYielded;
 800b20c:	68bb      	ldr	r3, [r7, #8]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	200016d0 	.word	0x200016d0
 800b21c:	200016a8 	.word	0x200016a8
 800b220:	20001668 	.word	0x20001668
 800b224:	200016b0 	.word	0x200016b0
 800b228:	200011d8 	.word	0x200011d8
 800b22c:	200011d4 	.word	0x200011d4
 800b230:	200016bc 	.word	0x200016bc
 800b234:	200016b8 	.word	0x200016b8
 800b238:	e000ed04 	.word	0xe000ed04

0800b23c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b242:	4b05      	ldr	r3, [pc, #20]	; (800b258 <xTaskGetTickCount+0x1c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b248:	687b      	ldr	r3, [r7, #4]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	370c      	adds	r7, #12
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	200016ac 	.word	0x200016ac

0800b25c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b086      	sub	sp, #24
 800b260:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b262:	2300      	movs	r3, #0
 800b264:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b266:	4b4f      	ldr	r3, [pc, #316]	; (800b3a4 <xTaskIncrementTick+0x148>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f040 808f 	bne.w	800b38e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b270:	4b4d      	ldr	r3, [pc, #308]	; (800b3a8 <xTaskIncrementTick+0x14c>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3301      	adds	r3, #1
 800b276:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b278:	4a4b      	ldr	r2, [pc, #300]	; (800b3a8 <xTaskIncrementTick+0x14c>)
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d120      	bne.n	800b2c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b284:	4b49      	ldr	r3, [pc, #292]	; (800b3ac <xTaskIncrementTick+0x150>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00a      	beq.n	800b2a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	603b      	str	r3, [r7, #0]
}
 800b2a0:	bf00      	nop
 800b2a2:	e7fe      	b.n	800b2a2 <xTaskIncrementTick+0x46>
 800b2a4:	4b41      	ldr	r3, [pc, #260]	; (800b3ac <xTaskIncrementTick+0x150>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	60fb      	str	r3, [r7, #12]
 800b2aa:	4b41      	ldr	r3, [pc, #260]	; (800b3b0 <xTaskIncrementTick+0x154>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a3f      	ldr	r2, [pc, #252]	; (800b3ac <xTaskIncrementTick+0x150>)
 800b2b0:	6013      	str	r3, [r2, #0]
 800b2b2:	4a3f      	ldr	r2, [pc, #252]	; (800b3b0 <xTaskIncrementTick+0x154>)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	4b3e      	ldr	r3, [pc, #248]	; (800b3b4 <xTaskIncrementTick+0x158>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	4a3d      	ldr	r2, [pc, #244]	; (800b3b4 <xTaskIncrementTick+0x158>)
 800b2c0:	6013      	str	r3, [r2, #0]
 800b2c2:	f000 fb21 	bl	800b908 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b2c6:	4b3c      	ldr	r3, [pc, #240]	; (800b3b8 <xTaskIncrementTick+0x15c>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	693a      	ldr	r2, [r7, #16]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d349      	bcc.n	800b364 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2d0:	4b36      	ldr	r3, [pc, #216]	; (800b3ac <xTaskIncrementTick+0x150>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d104      	bne.n	800b2e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2da:	4b37      	ldr	r3, [pc, #220]	; (800b3b8 <xTaskIncrementTick+0x15c>)
 800b2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e0:	601a      	str	r2, [r3, #0]
					break;
 800b2e2:	e03f      	b.n	800b364 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2e4:	4b31      	ldr	r3, [pc, #196]	; (800b3ac <xTaskIncrementTick+0x150>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b2f4:	693a      	ldr	r2, [r7, #16]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d203      	bcs.n	800b304 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b2fc:	4a2e      	ldr	r2, [pc, #184]	; (800b3b8 <xTaskIncrementTick+0x15c>)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b302:	e02f      	b.n	800b364 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	3304      	adds	r3, #4
 800b308:	4618      	mov	r0, r3
 800b30a:	f7fe fd1d 	bl	8009d48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b312:	2b00      	cmp	r3, #0
 800b314:	d004      	beq.n	800b320 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	3318      	adds	r3, #24
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe fd14 	bl	8009d48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b324:	4b25      	ldr	r3, [pc, #148]	; (800b3bc <xTaskIncrementTick+0x160>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d903      	bls.n	800b334 <xTaskIncrementTick+0xd8>
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b330:	4a22      	ldr	r2, [pc, #136]	; (800b3bc <xTaskIncrementTick+0x160>)
 800b332:	6013      	str	r3, [r2, #0]
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b338:	4613      	mov	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4a1f      	ldr	r2, [pc, #124]	; (800b3c0 <xTaskIncrementTick+0x164>)
 800b342:	441a      	add	r2, r3
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	3304      	adds	r3, #4
 800b348:	4619      	mov	r1, r3
 800b34a:	4610      	mov	r0, r2
 800b34c:	f7fe fc9f 	bl	8009c8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b354:	4b1b      	ldr	r3, [pc, #108]	; (800b3c4 <xTaskIncrementTick+0x168>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d3b8      	bcc.n	800b2d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b35e:	2301      	movs	r3, #1
 800b360:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b362:	e7b5      	b.n	800b2d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b364:	4b17      	ldr	r3, [pc, #92]	; (800b3c4 <xTaskIncrementTick+0x168>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b36a:	4915      	ldr	r1, [pc, #84]	; (800b3c0 <xTaskIncrementTick+0x164>)
 800b36c:	4613      	mov	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	440b      	add	r3, r1
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d901      	bls.n	800b380 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b37c:	2301      	movs	r3, #1
 800b37e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b380:	4b11      	ldr	r3, [pc, #68]	; (800b3c8 <xTaskIncrementTick+0x16c>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d007      	beq.n	800b398 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b388:	2301      	movs	r3, #1
 800b38a:	617b      	str	r3, [r7, #20]
 800b38c:	e004      	b.n	800b398 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b38e:	4b0f      	ldr	r3, [pc, #60]	; (800b3cc <xTaskIncrementTick+0x170>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	3301      	adds	r3, #1
 800b394:	4a0d      	ldr	r2, [pc, #52]	; (800b3cc <xTaskIncrementTick+0x170>)
 800b396:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b398:	697b      	ldr	r3, [r7, #20]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	200016d0 	.word	0x200016d0
 800b3a8:	200016ac 	.word	0x200016ac
 800b3ac:	20001660 	.word	0x20001660
 800b3b0:	20001664 	.word	0x20001664
 800b3b4:	200016c0 	.word	0x200016c0
 800b3b8:	200016c8 	.word	0x200016c8
 800b3bc:	200016b0 	.word	0x200016b0
 800b3c0:	200011d8 	.word	0x200011d8
 800b3c4:	200011d4 	.word	0x200011d4
 800b3c8:	200016bc 	.word	0x200016bc
 800b3cc:	200016b8 	.word	0x200016b8

0800b3d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b3d6:	4b36      	ldr	r3, [pc, #216]	; (800b4b0 <vTaskSwitchContext+0xe0>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d003      	beq.n	800b3e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b3de:	4b35      	ldr	r3, [pc, #212]	; (800b4b4 <vTaskSwitchContext+0xe4>)
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b3e4:	e05f      	b.n	800b4a6 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800b3e6:	4b33      	ldr	r3, [pc, #204]	; (800b4b4 <vTaskSwitchContext+0xe4>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b3ec:	f7f5 fd84 	bl	8000ef8 <getRunTimeCounterValue>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	4a31      	ldr	r2, [pc, #196]	; (800b4b8 <vTaskSwitchContext+0xe8>)
 800b3f4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b3f6:	4b30      	ldr	r3, [pc, #192]	; (800b4b8 <vTaskSwitchContext+0xe8>)
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	4b30      	ldr	r3, [pc, #192]	; (800b4bc <vTaskSwitchContext+0xec>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d909      	bls.n	800b416 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b402:	4b2f      	ldr	r3, [pc, #188]	; (800b4c0 <vTaskSwitchContext+0xf0>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800b408:	4a2b      	ldr	r2, [pc, #172]	; (800b4b8 <vTaskSwitchContext+0xe8>)
 800b40a:	6810      	ldr	r0, [r2, #0]
 800b40c:	4a2b      	ldr	r2, [pc, #172]	; (800b4bc <vTaskSwitchContext+0xec>)
 800b40e:	6812      	ldr	r2, [r2, #0]
 800b410:	1a82      	subs	r2, r0, r2
 800b412:	440a      	add	r2, r1
 800b414:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b416:	4b28      	ldr	r3, [pc, #160]	; (800b4b8 <vTaskSwitchContext+0xe8>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a28      	ldr	r2, [pc, #160]	; (800b4bc <vTaskSwitchContext+0xec>)
 800b41c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b41e:	4b29      	ldr	r3, [pc, #164]	; (800b4c4 <vTaskSwitchContext+0xf4>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	e010      	b.n	800b448 <vTaskSwitchContext+0x78>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d10a      	bne.n	800b442 <vTaskSwitchContext+0x72>
	__asm volatile
 800b42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b430:	f383 8811 	msr	BASEPRI, r3
 800b434:	f3bf 8f6f 	isb	sy
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	607b      	str	r3, [r7, #4]
}
 800b43e:	bf00      	nop
 800b440:	e7fe      	b.n	800b440 <vTaskSwitchContext+0x70>
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	3b01      	subs	r3, #1
 800b446:	60fb      	str	r3, [r7, #12]
 800b448:	491f      	ldr	r1, [pc, #124]	; (800b4c8 <vTaskSwitchContext+0xf8>)
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	4613      	mov	r3, r2
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	4413      	add	r3, r2
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	440b      	add	r3, r1
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d0e4      	beq.n	800b426 <vTaskSwitchContext+0x56>
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	4613      	mov	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4413      	add	r3, r2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	4a18      	ldr	r2, [pc, #96]	; (800b4c8 <vTaskSwitchContext+0xf8>)
 800b468:	4413      	add	r3, r2
 800b46a:	60bb      	str	r3, [r7, #8]
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	685a      	ldr	r2, [r3, #4]
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	605a      	str	r2, [r3, #4]
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	3308      	adds	r3, #8
 800b47e:	429a      	cmp	r2, r3
 800b480:	d104      	bne.n	800b48c <vTaskSwitchContext+0xbc>
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	685a      	ldr	r2, [r3, #4]
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	605a      	str	r2, [r3, #4]
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	4a0b      	ldr	r2, [pc, #44]	; (800b4c0 <vTaskSwitchContext+0xf0>)
 800b494:	6013      	str	r3, [r2, #0]
 800b496:	4a0b      	ldr	r2, [pc, #44]	; (800b4c4 <vTaskSwitchContext+0xf4>)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b49c:	4b08      	ldr	r3, [pc, #32]	; (800b4c0 <vTaskSwitchContext+0xf0>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	335c      	adds	r3, #92	; 0x5c
 800b4a2:	4a0a      	ldr	r2, [pc, #40]	; (800b4cc <vTaskSwitchContext+0xfc>)
 800b4a4:	6013      	str	r3, [r2, #0]
}
 800b4a6:	bf00      	nop
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	200016d0 	.word	0x200016d0
 800b4b4:	200016bc 	.word	0x200016bc
 800b4b8:	200016d8 	.word	0x200016d8
 800b4bc:	200016d4 	.word	0x200016d4
 800b4c0:	200011d4 	.word	0x200011d4
 800b4c4:	200016b0 	.word	0x200016b0
 800b4c8:	200011d8 	.word	0x200011d8
 800b4cc:	20000088 	.word	0x20000088

0800b4d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10a      	bne.n	800b4f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	60fb      	str	r3, [r7, #12]
}
 800b4f2:	bf00      	nop
 800b4f4:	e7fe      	b.n	800b4f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4f6:	4b07      	ldr	r3, [pc, #28]	; (800b514 <vTaskPlaceOnEventList+0x44>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3318      	adds	r3, #24
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f7fe fbe9 	bl	8009cd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b504:	2101      	movs	r1, #1
 800b506:	6838      	ldr	r0, [r7, #0]
 800b508:	f000 fba8 	bl	800bc5c <prvAddCurrentTaskToDelayedList>
}
 800b50c:	bf00      	nop
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	200011d4 	.word	0x200011d4

0800b518 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10a      	bne.n	800b540 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52e:	f383 8811 	msr	BASEPRI, r3
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	f3bf 8f4f 	dsb	sy
 800b53a:	617b      	str	r3, [r7, #20]
}
 800b53c:	bf00      	nop
 800b53e:	e7fe      	b.n	800b53e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b540:	4b0a      	ldr	r3, [pc, #40]	; (800b56c <vTaskPlaceOnEventListRestricted+0x54>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	3318      	adds	r3, #24
 800b546:	4619      	mov	r1, r3
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f7fe fba0 	bl	8009c8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d002      	beq.n	800b55a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b554:	f04f 33ff 	mov.w	r3, #4294967295
 800b558:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b55a:	6879      	ldr	r1, [r7, #4]
 800b55c:	68b8      	ldr	r0, [r7, #8]
 800b55e:	f000 fb7d 	bl	800bc5c <prvAddCurrentTaskToDelayedList>
	}
 800b562:	bf00      	nop
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	200011d4 	.word	0x200011d4

0800b570 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10a      	bne.n	800b59c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58a:	f383 8811 	msr	BASEPRI, r3
 800b58e:	f3bf 8f6f 	isb	sy
 800b592:	f3bf 8f4f 	dsb	sy
 800b596:	60fb      	str	r3, [r7, #12]
}
 800b598:	bf00      	nop
 800b59a:	e7fe      	b.n	800b59a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	3318      	adds	r3, #24
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fe fbd1 	bl	8009d48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5a6:	4b1f      	ldr	r3, [pc, #124]	; (800b624 <xTaskRemoveFromEventList+0xb4>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d11f      	bne.n	800b5ee <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fe fbc8 	bl	8009d48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5bc:	4b1a      	ldr	r3, [pc, #104]	; (800b628 <xTaskRemoveFromEventList+0xb8>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d903      	bls.n	800b5cc <xTaskRemoveFromEventList+0x5c>
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c8:	4a17      	ldr	r2, [pc, #92]	; (800b628 <xTaskRemoveFromEventList+0xb8>)
 800b5ca:	6013      	str	r3, [r2, #0]
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4a14      	ldr	r2, [pc, #80]	; (800b62c <xTaskRemoveFromEventList+0xbc>)
 800b5da:	441a      	add	r2, r3
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	3304      	adds	r3, #4
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	f7fe fb53 	bl	8009c8e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800b5e8:	f000 f98e 	bl	800b908 <prvResetNextTaskUnblockTime>
 800b5ec:	e005      	b.n	800b5fa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	3318      	adds	r3, #24
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	480e      	ldr	r0, [pc, #56]	; (800b630 <xTaskRemoveFromEventList+0xc0>)
 800b5f6:	f7fe fb4a 	bl	8009c8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fe:	4b0d      	ldr	r3, [pc, #52]	; (800b634 <xTaskRemoveFromEventList+0xc4>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b604:	429a      	cmp	r2, r3
 800b606:	d905      	bls.n	800b614 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b608:	2301      	movs	r3, #1
 800b60a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b60c:	4b0a      	ldr	r3, [pc, #40]	; (800b638 <xTaskRemoveFromEventList+0xc8>)
 800b60e:	2201      	movs	r2, #1
 800b610:	601a      	str	r2, [r3, #0]
 800b612:	e001      	b.n	800b618 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b614:	2300      	movs	r3, #0
 800b616:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b618:	697b      	ldr	r3, [r7, #20]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3718      	adds	r7, #24
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	200016d0 	.word	0x200016d0
 800b628:	200016b0 	.word	0x200016b0
 800b62c:	200011d8 	.word	0x200011d8
 800b630:	20001668 	.word	0x20001668
 800b634:	200011d4 	.word	0x200011d4
 800b638:	200016bc 	.word	0x200016bc

0800b63c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b644:	4b06      	ldr	r3, [pc, #24]	; (800b660 <vTaskInternalSetTimeOutState+0x24>)
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b64c:	4b05      	ldr	r3, [pc, #20]	; (800b664 <vTaskInternalSetTimeOutState+0x28>)
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	605a      	str	r2, [r3, #4]
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	200016c0 	.word	0x200016c0
 800b664:	200016ac 	.word	0x200016ac

0800b668 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b088      	sub	sp, #32
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d10a      	bne.n	800b68e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67c:	f383 8811 	msr	BASEPRI, r3
 800b680:	f3bf 8f6f 	isb	sy
 800b684:	f3bf 8f4f 	dsb	sy
 800b688:	613b      	str	r3, [r7, #16]
}
 800b68a:	bf00      	nop
 800b68c:	e7fe      	b.n	800b68c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10a      	bne.n	800b6aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	60fb      	str	r3, [r7, #12]
}
 800b6a6:	bf00      	nop
 800b6a8:	e7fe      	b.n	800b6a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b6aa:	f001 f803 	bl	800c6b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6ae:	4b1d      	ldr	r3, [pc, #116]	; (800b724 <xTaskCheckForTimeOut+0xbc>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	69ba      	ldr	r2, [r7, #24]
 800b6ba:	1ad3      	subs	r3, r2, r3
 800b6bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c6:	d102      	bne.n	800b6ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	61fb      	str	r3, [r7, #28]
 800b6cc:	e023      	b.n	800b716 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	4b15      	ldr	r3, [pc, #84]	; (800b728 <xTaskCheckForTimeOut+0xc0>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d007      	beq.n	800b6ea <xTaskCheckForTimeOut+0x82>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	69ba      	ldr	r2, [r7, #24]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d302      	bcc.n	800b6ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	61fb      	str	r3, [r7, #28]
 800b6e8:	e015      	b.n	800b716 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d20b      	bcs.n	800b70c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	1ad2      	subs	r2, r2, r3
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f7ff ff9b 	bl	800b63c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b706:	2300      	movs	r3, #0
 800b708:	61fb      	str	r3, [r7, #28]
 800b70a:	e004      	b.n	800b716 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	2200      	movs	r2, #0
 800b710:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b712:	2301      	movs	r3, #1
 800b714:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b716:	f000 fffd 	bl	800c714 <vPortExitCritical>

	return xReturn;
 800b71a:	69fb      	ldr	r3, [r7, #28]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3720      	adds	r7, #32
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	200016ac 	.word	0x200016ac
 800b728:	200016c0 	.word	0x200016c0

0800b72c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b72c:	b480      	push	{r7}
 800b72e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b730:	4b03      	ldr	r3, [pc, #12]	; (800b740 <vTaskMissedYield+0x14>)
 800b732:	2201      	movs	r2, #1
 800b734:	601a      	str	r2, [r3, #0]
}
 800b736:	bf00      	nop
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr
 800b740:	200016bc 	.word	0x200016bc

0800b744 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b74c:	f000 f87a 	bl	800b844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b750:	4b18      	ldr	r3, [pc, #96]	; (800b7b4 <prvIdleTask+0x70>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b01      	cmp	r3, #1
 800b756:	d907      	bls.n	800b768 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b758:	4b17      	ldr	r3, [pc, #92]	; (800b7b8 <prvIdleTask+0x74>)
 800b75a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b75e:	601a      	str	r2, [r3, #0]
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800b768:	f7ff fc92 	bl	800b090 <prvGetExpectedIdleTime>
 800b76c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d9eb      	bls.n	800b74c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800b774:	f7ff fc7e 	bl	800b074 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800b778:	4b10      	ldr	r3, [pc, #64]	; (800b7bc <prvIdleTask+0x78>)
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	4b10      	ldr	r3, [pc, #64]	; (800b7c0 <prvIdleTask+0x7c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	429a      	cmp	r2, r3
 800b782:	d20a      	bcs.n	800b79a <prvIdleTask+0x56>
	__asm volatile
 800b784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b788:	f383 8811 	msr	BASEPRI, r3
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f3bf 8f4f 	dsb	sy
 800b794:	60bb      	str	r3, [r7, #8]
}
 800b796:	bf00      	nop
 800b798:	e7fe      	b.n	800b798 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800b79a:	f7ff fc79 	bl	800b090 <prvGetExpectedIdleTime>
 800b79e:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d902      	bls.n	800b7ac <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	f7f5 fbb2 	bl	8000f10 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800b7ac:	f7ff fca8 	bl	800b100 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800b7b0:	e7cc      	b.n	800b74c <prvIdleTask+0x8>
 800b7b2:	bf00      	nop
 800b7b4:	200011d8 	.word	0x200011d8
 800b7b8:	e000ed04 	.word	0xe000ed04
 800b7bc:	200016c8 	.word	0x200016c8
 800b7c0:	200016ac 	.word	0x200016ac

0800b7c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	607b      	str	r3, [r7, #4]
 800b7ce:	e00c      	b.n	800b7ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4413      	add	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	4a12      	ldr	r2, [pc, #72]	; (800b824 <prvInitialiseTaskLists+0x60>)
 800b7dc:	4413      	add	r3, r2
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fe fa28 	bl	8009c34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	607b      	str	r3, [r7, #4]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b37      	cmp	r3, #55	; 0x37
 800b7ee:	d9ef      	bls.n	800b7d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7f0:	480d      	ldr	r0, [pc, #52]	; (800b828 <prvInitialiseTaskLists+0x64>)
 800b7f2:	f7fe fa1f 	bl	8009c34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7f6:	480d      	ldr	r0, [pc, #52]	; (800b82c <prvInitialiseTaskLists+0x68>)
 800b7f8:	f7fe fa1c 	bl	8009c34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7fc:	480c      	ldr	r0, [pc, #48]	; (800b830 <prvInitialiseTaskLists+0x6c>)
 800b7fe:	f7fe fa19 	bl	8009c34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b802:	480c      	ldr	r0, [pc, #48]	; (800b834 <prvInitialiseTaskLists+0x70>)
 800b804:	f7fe fa16 	bl	8009c34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b808:	480b      	ldr	r0, [pc, #44]	; (800b838 <prvInitialiseTaskLists+0x74>)
 800b80a:	f7fe fa13 	bl	8009c34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b80e:	4b0b      	ldr	r3, [pc, #44]	; (800b83c <prvInitialiseTaskLists+0x78>)
 800b810:	4a05      	ldr	r2, [pc, #20]	; (800b828 <prvInitialiseTaskLists+0x64>)
 800b812:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b814:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <prvInitialiseTaskLists+0x7c>)
 800b816:	4a05      	ldr	r2, [pc, #20]	; (800b82c <prvInitialiseTaskLists+0x68>)
 800b818:	601a      	str	r2, [r3, #0]
}
 800b81a:	bf00      	nop
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	200011d8 	.word	0x200011d8
 800b828:	20001638 	.word	0x20001638
 800b82c:	2000164c 	.word	0x2000164c
 800b830:	20001668 	.word	0x20001668
 800b834:	2000167c 	.word	0x2000167c
 800b838:	20001694 	.word	0x20001694
 800b83c:	20001660 	.word	0x20001660
 800b840:	20001664 	.word	0x20001664

0800b844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b84a:	e019      	b.n	800b880 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b84c:	f000 ff32 	bl	800c6b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b850:	4b10      	ldr	r3, [pc, #64]	; (800b894 <prvCheckTasksWaitingTermination+0x50>)
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	3304      	adds	r3, #4
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7fe fa73 	bl	8009d48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b862:	4b0d      	ldr	r3, [pc, #52]	; (800b898 <prvCheckTasksWaitingTermination+0x54>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	3b01      	subs	r3, #1
 800b868:	4a0b      	ldr	r2, [pc, #44]	; (800b898 <prvCheckTasksWaitingTermination+0x54>)
 800b86a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b86c:	4b0b      	ldr	r3, [pc, #44]	; (800b89c <prvCheckTasksWaitingTermination+0x58>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3b01      	subs	r3, #1
 800b872:	4a0a      	ldr	r2, [pc, #40]	; (800b89c <prvCheckTasksWaitingTermination+0x58>)
 800b874:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b876:	f000 ff4d 	bl	800c714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f810 	bl	800b8a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b880:	4b06      	ldr	r3, [pc, #24]	; (800b89c <prvCheckTasksWaitingTermination+0x58>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1e1      	bne.n	800b84c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b888:	bf00      	nop
 800b88a:	bf00      	nop
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	2000167c 	.word	0x2000167c
 800b898:	200016a8 	.word	0x200016a8
 800b89c:	20001690 	.word	0x20001690

0800b8a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	335c      	adds	r3, #92	; 0x5c
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f002 ff35 	bl	800e71c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d108      	bne.n	800b8ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f001 f8e5 	bl	800ca90 <vPortFree>
				vPortFree( pxTCB );
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f001 f8e2 	bl	800ca90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b8cc:	e018      	b.n	800b900 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d103      	bne.n	800b8e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f001 f8d9 	bl	800ca90 <vPortFree>
	}
 800b8de:	e00f      	b.n	800b900 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	d00a      	beq.n	800b900 <prvDeleteTCB+0x60>
	__asm volatile
 800b8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ee:	f383 8811 	msr	BASEPRI, r3
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	f3bf 8f4f 	dsb	sy
 800b8fa:	60fb      	str	r3, [r7, #12]
}
 800b8fc:	bf00      	nop
 800b8fe:	e7fe      	b.n	800b8fe <prvDeleteTCB+0x5e>
	}
 800b900:	bf00      	nop
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b90e:	4b0c      	ldr	r3, [pc, #48]	; (800b940 <prvResetNextTaskUnblockTime+0x38>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d104      	bne.n	800b922 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b918:	4b0a      	ldr	r3, [pc, #40]	; (800b944 <prvResetNextTaskUnblockTime+0x3c>)
 800b91a:	f04f 32ff 	mov.w	r2, #4294967295
 800b91e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b920:	e008      	b.n	800b934 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b922:	4b07      	ldr	r3, [pc, #28]	; (800b940 <prvResetNextTaskUnblockTime+0x38>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	4a04      	ldr	r2, [pc, #16]	; (800b944 <prvResetNextTaskUnblockTime+0x3c>)
 800b932:	6013      	str	r3, [r2, #0]
}
 800b934:	bf00      	nop
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	20001660 	.word	0x20001660
 800b944:	200016c8 	.word	0x200016c8

0800b948 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b94e:	4b0b      	ldr	r3, [pc, #44]	; (800b97c <xTaskGetSchedulerState+0x34>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d102      	bne.n	800b95c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b956:	2301      	movs	r3, #1
 800b958:	607b      	str	r3, [r7, #4]
 800b95a:	e008      	b.n	800b96e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b95c:	4b08      	ldr	r3, [pc, #32]	; (800b980 <xTaskGetSchedulerState+0x38>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d102      	bne.n	800b96a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b964:	2302      	movs	r3, #2
 800b966:	607b      	str	r3, [r7, #4]
 800b968:	e001      	b.n	800b96e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b96a:	2300      	movs	r3, #0
 800b96c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b96e:	687b      	ldr	r3, [r7, #4]
	}
 800b970:	4618      	mov	r0, r3
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	200016b4 	.word	0x200016b4
 800b980:	200016d0 	.word	0x200016d0

0800b984 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b990:	2300      	movs	r3, #0
 800b992:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d051      	beq.n	800ba3e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b99e:	4b2a      	ldr	r3, [pc, #168]	; (800ba48 <xTaskPriorityInherit+0xc4>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d241      	bcs.n	800ba2c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	699b      	ldr	r3, [r3, #24]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	db06      	blt.n	800b9be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9b0:	4b25      	ldr	r3, [pc, #148]	; (800ba48 <xTaskPriorityInherit+0xc4>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	6959      	ldr	r1, [r3, #20]
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4413      	add	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4a1f      	ldr	r2, [pc, #124]	; (800ba4c <xTaskPriorityInherit+0xc8>)
 800b9d0:	4413      	add	r3, r2
 800b9d2:	4299      	cmp	r1, r3
 800b9d4:	d122      	bne.n	800ba1c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	3304      	adds	r3, #4
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7fe f9b4 	bl	8009d48 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9e0:	4b19      	ldr	r3, [pc, #100]	; (800ba48 <xTaskPriorityInherit+0xc4>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ee:	4b18      	ldr	r3, [pc, #96]	; (800ba50 <xTaskPriorityInherit+0xcc>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d903      	bls.n	800b9fe <xTaskPriorityInherit+0x7a>
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fa:	4a15      	ldr	r2, [pc, #84]	; (800ba50 <xTaskPriorityInherit+0xcc>)
 800b9fc:	6013      	str	r3, [r2, #0]
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba02:	4613      	mov	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	4413      	add	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4a10      	ldr	r2, [pc, #64]	; (800ba4c <xTaskPriorityInherit+0xc8>)
 800ba0c:	441a      	add	r2, r3
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	3304      	adds	r3, #4
 800ba12:	4619      	mov	r1, r3
 800ba14:	4610      	mov	r0, r2
 800ba16:	f7fe f93a 	bl	8009c8e <vListInsertEnd>
 800ba1a:	e004      	b.n	800ba26 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba1c:	4b0a      	ldr	r3, [pc, #40]	; (800ba48 <xTaskPriorityInherit+0xc4>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ba26:	2301      	movs	r3, #1
 800ba28:	60fb      	str	r3, [r7, #12]
 800ba2a:	e008      	b.n	800ba3e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba30:	4b05      	ldr	r3, [pc, #20]	; (800ba48 <xTaskPriorityInherit+0xc4>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d201      	bcs.n	800ba3e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
	}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3710      	adds	r7, #16
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	200011d4 	.word	0x200011d4
 800ba4c:	200011d8 	.word	0x200011d8
 800ba50:	200016b0 	.word	0x200016b0

0800ba54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba60:	2300      	movs	r3, #0
 800ba62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d056      	beq.n	800bb18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba6a:	4b2e      	ldr	r3, [pc, #184]	; (800bb24 <xTaskPriorityDisinherit+0xd0>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	693a      	ldr	r2, [r7, #16]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d00a      	beq.n	800ba8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ba74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba78:	f383 8811 	msr	BASEPRI, r3
 800ba7c:	f3bf 8f6f 	isb	sy
 800ba80:	f3bf 8f4f 	dsb	sy
 800ba84:	60fb      	str	r3, [r7, #12]
}
 800ba86:	bf00      	nop
 800ba88:	e7fe      	b.n	800ba88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10a      	bne.n	800baa8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ba92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba96:	f383 8811 	msr	BASEPRI, r3
 800ba9a:	f3bf 8f6f 	isb	sy
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	60bb      	str	r3, [r7, #8]
}
 800baa4:	bf00      	nop
 800baa6:	e7fe      	b.n	800baa6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baac:	1e5a      	subs	r2, r3, #1
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baba:	429a      	cmp	r2, r3
 800babc:	d02c      	beq.n	800bb18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d128      	bne.n	800bb18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	3304      	adds	r3, #4
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fe f93c 	bl	8009d48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800badc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae8:	4b0f      	ldr	r3, [pc, #60]	; (800bb28 <xTaskPriorityDisinherit+0xd4>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	429a      	cmp	r2, r3
 800baee:	d903      	bls.n	800baf8 <xTaskPriorityDisinherit+0xa4>
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf4:	4a0c      	ldr	r2, [pc, #48]	; (800bb28 <xTaskPriorityDisinherit+0xd4>)
 800baf6:	6013      	str	r3, [r2, #0]
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafc:	4613      	mov	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	4413      	add	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4a09      	ldr	r2, [pc, #36]	; (800bb2c <xTaskPriorityDisinherit+0xd8>)
 800bb06:	441a      	add	r2, r3
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	4610      	mov	r0, r2
 800bb10:	f7fe f8bd 	bl	8009c8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb14:	2301      	movs	r3, #1
 800bb16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb18:	697b      	ldr	r3, [r7, #20]
	}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3718      	adds	r7, #24
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	200011d4 	.word	0x200011d4
 800bb28:	200016b0 	.word	0x200016b0
 800bb2c:	200011d8 	.word	0x200011d8

0800bb30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b088      	sub	sp, #32
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d06a      	beq.n	800bc1e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10a      	bne.n	800bb66 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	60fb      	str	r3, [r7, #12]
}
 800bb62:	bf00      	nop
 800bb64:	e7fe      	b.n	800bb64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d902      	bls.n	800bb76 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	61fb      	str	r3, [r7, #28]
 800bb74:	e002      	b.n	800bb7c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb7a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb80:	69fa      	ldr	r2, [r7, #28]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d04b      	beq.n	800bc1e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d146      	bne.n	800bc1e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bb90:	4b25      	ldr	r3, [pc, #148]	; (800bc28 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	69ba      	ldr	r2, [r7, #24]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d10a      	bne.n	800bbb0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	60bb      	str	r3, [r7, #8]
}
 800bbac:	bf00      	nop
 800bbae:	e7fe      	b.n	800bbae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	69fa      	ldr	r2, [r7, #28]
 800bbba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	db04      	blt.n	800bbce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbca:	69bb      	ldr	r3, [r7, #24]
 800bbcc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	6959      	ldr	r1, [r3, #20]
 800bbd2:	693a      	ldr	r2, [r7, #16]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4a13      	ldr	r2, [pc, #76]	; (800bc2c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bbde:	4413      	add	r3, r2
 800bbe0:	4299      	cmp	r1, r3
 800bbe2:	d11c      	bne.n	800bc1e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fe f8ad 	bl	8009d48 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf2:	4b0f      	ldr	r3, [pc, #60]	; (800bc30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d903      	bls.n	800bc02 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfe:	4a0c      	ldr	r2, [pc, #48]	; (800bc30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bc00:	6013      	str	r3, [r2, #0]
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc06:	4613      	mov	r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4413      	add	r3, r2
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	4a07      	ldr	r2, [pc, #28]	; (800bc2c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bc10:	441a      	add	r2, r3
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	3304      	adds	r3, #4
 800bc16:	4619      	mov	r1, r3
 800bc18:	4610      	mov	r0, r2
 800bc1a:	f7fe f838 	bl	8009c8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc1e:	bf00      	nop
 800bc20:	3720      	adds	r7, #32
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	200011d4 	.word	0x200011d4
 800bc2c:	200011d8 	.word	0x200011d8
 800bc30:	200016b0 	.word	0x200016b0

0800bc34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bc34:	b480      	push	{r7}
 800bc36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bc38:	4b07      	ldr	r3, [pc, #28]	; (800bc58 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d004      	beq.n	800bc4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bc40:	4b05      	ldr	r3, [pc, #20]	; (800bc58 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc46:	3201      	adds	r2, #1
 800bc48:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800bc4a:	4b03      	ldr	r3, [pc, #12]	; (800bc58 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
	}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	200011d4 	.word	0x200011d4

0800bc5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc66:	4b21      	ldr	r3, [pc, #132]	; (800bcec <prvAddCurrentTaskToDelayedList+0x90>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc6c:	4b20      	ldr	r3, [pc, #128]	; (800bcf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	3304      	adds	r3, #4
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fe f868 	bl	8009d48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc7e:	d10a      	bne.n	800bc96 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d007      	beq.n	800bc96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc86:	4b1a      	ldr	r3, [pc, #104]	; (800bcf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	3304      	adds	r3, #4
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	4819      	ldr	r0, [pc, #100]	; (800bcf4 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc90:	f7fd fffd 	bl	8009c8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc94:	e026      	b.n	800bce4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc9e:	4b14      	ldr	r3, [pc, #80]	; (800bcf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68ba      	ldr	r2, [r7, #8]
 800bca4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d209      	bcs.n	800bcc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcae:	4b12      	ldr	r3, [pc, #72]	; (800bcf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	4b0f      	ldr	r3, [pc, #60]	; (800bcf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3304      	adds	r3, #4
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4610      	mov	r0, r2
 800bcbc:	f7fe f80b 	bl	8009cd6 <vListInsert>
}
 800bcc0:	e010      	b.n	800bce4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcc2:	4b0e      	ldr	r3, [pc, #56]	; (800bcfc <prvAddCurrentTaskToDelayedList+0xa0>)
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	4b0a      	ldr	r3, [pc, #40]	; (800bcf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3304      	adds	r3, #4
 800bccc:	4619      	mov	r1, r3
 800bcce:	4610      	mov	r0, r2
 800bcd0:	f7fe f801 	bl	8009cd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bcd4:	4b0a      	ldr	r3, [pc, #40]	; (800bd00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	68ba      	ldr	r2, [r7, #8]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d202      	bcs.n	800bce4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bcde:	4a08      	ldr	r2, [pc, #32]	; (800bd00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	6013      	str	r3, [r2, #0]
}
 800bce4:	bf00      	nop
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	200016ac 	.word	0x200016ac
 800bcf0:	200011d4 	.word	0x200011d4
 800bcf4:	20001694 	.word	0x20001694
 800bcf8:	20001664 	.word	0x20001664
 800bcfc:	20001660 	.word	0x20001660
 800bd00:	200016c8 	.word	0x200016c8

0800bd04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b08a      	sub	sp, #40	; 0x28
 800bd08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd0e:	f000 fb63 	bl	800c3d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd12:	4b1c      	ldr	r3, [pc, #112]	; (800bd84 <xTimerCreateTimerTask+0x80>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d021      	beq.n	800bd5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd22:	1d3a      	adds	r2, r7, #4
 800bd24:	f107 0108 	add.w	r1, r7, #8
 800bd28:	f107 030c 	add.w	r3, r7, #12
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7fd ff67 	bl	8009c00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd32:	6879      	ldr	r1, [r7, #4]
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	9202      	str	r2, [sp, #8]
 800bd3a:	9301      	str	r3, [sp, #4]
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	2300      	movs	r3, #0
 800bd42:	460a      	mov	r2, r1
 800bd44:	4910      	ldr	r1, [pc, #64]	; (800bd88 <xTimerCreateTimerTask+0x84>)
 800bd46:	4811      	ldr	r0, [pc, #68]	; (800bd8c <xTimerCreateTimerTask+0x88>)
 800bd48:	f7fe ff30 	bl	800abac <xTaskCreateStatic>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	4a10      	ldr	r2, [pc, #64]	; (800bd90 <xTimerCreateTimerTask+0x8c>)
 800bd50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd52:	4b0f      	ldr	r3, [pc, #60]	; (800bd90 <xTimerCreateTimerTask+0x8c>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d001      	beq.n	800bd5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10a      	bne.n	800bd7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	613b      	str	r3, [r7, #16]
}
 800bd76:	bf00      	nop
 800bd78:	e7fe      	b.n	800bd78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd7a:	697b      	ldr	r3, [r7, #20]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3718      	adds	r7, #24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	2000170c 	.word	0x2000170c
 800bd88:	08010b34 	.word	0x08010b34
 800bd8c:	0800bf81 	.word	0x0800bf81
 800bd90:	20001710 	.word	0x20001710

0800bd94 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b088      	sub	sp, #32
 800bd98:	af02      	add	r7, sp, #8
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
 800bda0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800bda2:	202c      	movs	r0, #44	; 0x2c
 800bda4:	f000 fda8 	bl	800c8f8 <pvPortMalloc>
 800bda8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d00d      	beq.n	800bdcc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	9301      	str	r3, [sp, #4]
 800bdbc:	6a3b      	ldr	r3, [r7, #32]
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	68b9      	ldr	r1, [r7, #8]
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f000 f805 	bl	800bdd6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800bdcc:	697b      	ldr	r3, [r7, #20]
	}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3718      	adds	r7, #24
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b086      	sub	sp, #24
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	60b9      	str	r1, [r7, #8]
 800bde0:	607a      	str	r2, [r7, #4]
 800bde2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10a      	bne.n	800be00 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800bdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdee:	f383 8811 	msr	BASEPRI, r3
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	617b      	str	r3, [r7, #20]
}
 800bdfc:	bf00      	nop
 800bdfe:	e7fe      	b.n	800bdfe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800be00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be02:	2b00      	cmp	r3, #0
 800be04:	d01e      	beq.n	800be44 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800be06:	f000 fae7 	bl	800c3d8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800be10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800be16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be18:	683a      	ldr	r2, [r7, #0]
 800be1a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800be1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1e:	6a3a      	ldr	r2, [r7, #32]
 800be20:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800be22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be24:	3304      	adds	r3, #4
 800be26:	4618      	mov	r0, r3
 800be28:	f7fd ff24 	bl	8009c74 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d008      	beq.n	800be44 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800be32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be38:	f043 0304 	orr.w	r3, r3, #4
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800be44:	bf00      	nop
 800be46:	3718      	adds	r7, #24
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b08a      	sub	sp, #40	; 0x28
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
 800be58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800be5a:	2300      	movs	r3, #0
 800be5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d10a      	bne.n	800be7a <xTimerGenericCommand+0x2e>
	__asm volatile
 800be64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	623b      	str	r3, [r7, #32]
}
 800be76:	bf00      	nop
 800be78:	e7fe      	b.n	800be78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800be7a:	4b1a      	ldr	r3, [pc, #104]	; (800bee4 <xTimerGenericCommand+0x98>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d02a      	beq.n	800bed8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2b05      	cmp	r3, #5
 800be92:	dc18      	bgt.n	800bec6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800be94:	f7ff fd58 	bl	800b948 <xTaskGetSchedulerState>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d109      	bne.n	800beb2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800be9e:	4b11      	ldr	r3, [pc, #68]	; (800bee4 <xTimerGenericCommand+0x98>)
 800bea0:	6818      	ldr	r0, [r3, #0]
 800bea2:	f107 0110 	add.w	r1, r7, #16
 800bea6:	2300      	movs	r3, #0
 800bea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beaa:	f7fe f8e7 	bl	800a07c <xQueueGenericSend>
 800beae:	6278      	str	r0, [r7, #36]	; 0x24
 800beb0:	e012      	b.n	800bed8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800beb2:	4b0c      	ldr	r3, [pc, #48]	; (800bee4 <xTimerGenericCommand+0x98>)
 800beb4:	6818      	ldr	r0, [r3, #0]
 800beb6:	f107 0110 	add.w	r1, r7, #16
 800beba:	2300      	movs	r3, #0
 800bebc:	2200      	movs	r2, #0
 800bebe:	f7fe f8dd 	bl	800a07c <xQueueGenericSend>
 800bec2:	6278      	str	r0, [r7, #36]	; 0x24
 800bec4:	e008      	b.n	800bed8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bec6:	4b07      	ldr	r3, [pc, #28]	; (800bee4 <xTimerGenericCommand+0x98>)
 800bec8:	6818      	ldr	r0, [r3, #0]
 800beca:	f107 0110 	add.w	r1, r7, #16
 800bece:	2300      	movs	r3, #0
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	f7fe f9d1 	bl	800a278 <xQueueGenericSendFromISR>
 800bed6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3728      	adds	r7, #40	; 0x28
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	2000170c 	.word	0x2000170c

0800bee8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b088      	sub	sp, #32
 800beec:	af02      	add	r7, sp, #8
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bef2:	4b22      	ldr	r3, [pc, #136]	; (800bf7c <prvProcessExpiredTimer+0x94>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	3304      	adds	r3, #4
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7fd ff21 	bl	8009d48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf0c:	f003 0304 	and.w	r3, r3, #4
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d022      	beq.n	800bf5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	699a      	ldr	r2, [r3, #24]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	18d1      	adds	r1, r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	683a      	ldr	r2, [r7, #0]
 800bf20:	6978      	ldr	r0, [r7, #20]
 800bf22:	f000 f8d1 	bl	800c0c8 <prvInsertTimerInActiveList>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d01f      	beq.n	800bf6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	2300      	movs	r3, #0
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	2100      	movs	r1, #0
 800bf36:	6978      	ldr	r0, [r7, #20]
 800bf38:	f7ff ff88 	bl	800be4c <xTimerGenericCommand>
 800bf3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d113      	bne.n	800bf6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	60fb      	str	r3, [r7, #12]
}
 800bf56:	bf00      	nop
 800bf58:	e7fe      	b.n	800bf58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf60:	f023 0301 	bic.w	r3, r3, #1
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	6a1b      	ldr	r3, [r3, #32]
 800bf70:	6978      	ldr	r0, [r7, #20]
 800bf72:	4798      	blx	r3
}
 800bf74:	bf00      	nop
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	20001704 	.word	0x20001704

0800bf80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf88:	f107 0308 	add.w	r3, r7, #8
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 f857 	bl	800c040 <prvGetNextExpireTime>
 800bf92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	4619      	mov	r1, r3
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f000 f803 	bl	800bfa4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bf9e:	f000 f8d5 	bl	800c14c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bfa2:	e7f1      	b.n	800bf88 <prvTimerTask+0x8>

0800bfa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bfae:	f7ff f861 	bl	800b074 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bfb2:	f107 0308 	add.w	r3, r7, #8
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f000 f866 	bl	800c088 <prvSampleTimeNow>
 800bfbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d130      	bne.n	800c026 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10a      	bne.n	800bfe0 <prvProcessTimerOrBlockTask+0x3c>
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d806      	bhi.n	800bfe0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bfd2:	f7ff f895 	bl	800b100 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bfd6:	68f9      	ldr	r1, [r7, #12]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f7ff ff85 	bl	800bee8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bfde:	e024      	b.n	800c02a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d008      	beq.n	800bff8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bfe6:	4b13      	ldr	r3, [pc, #76]	; (800c034 <prvProcessTimerOrBlockTask+0x90>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d101      	bne.n	800bff4 <prvProcessTimerOrBlockTask+0x50>
 800bff0:	2301      	movs	r3, #1
 800bff2:	e000      	b.n	800bff6 <prvProcessTimerOrBlockTask+0x52>
 800bff4:	2300      	movs	r3, #0
 800bff6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bff8:	4b0f      	ldr	r3, [pc, #60]	; (800c038 <prvProcessTimerOrBlockTask+0x94>)
 800bffa:	6818      	ldr	r0, [r3, #0]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	1ad3      	subs	r3, r2, r3
 800c002:	683a      	ldr	r2, [r7, #0]
 800c004:	4619      	mov	r1, r3
 800c006:	f7fe fd9d 	bl	800ab44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c00a:	f7ff f879 	bl	800b100 <xTaskResumeAll>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10a      	bne.n	800c02a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c014:	4b09      	ldr	r3, [pc, #36]	; (800c03c <prvProcessTimerOrBlockTask+0x98>)
 800c016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01a:	601a      	str	r2, [r3, #0]
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	f3bf 8f6f 	isb	sy
}
 800c024:	e001      	b.n	800c02a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c026:	f7ff f86b 	bl	800b100 <xTaskResumeAll>
}
 800c02a:	bf00      	nop
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	20001708 	.word	0x20001708
 800c038:	2000170c 	.word	0x2000170c
 800c03c:	e000ed04 	.word	0xe000ed04

0800c040 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c048:	4b0e      	ldr	r3, [pc, #56]	; (800c084 <prvGetNextExpireTime+0x44>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <prvGetNextExpireTime+0x16>
 800c052:	2201      	movs	r2, #1
 800c054:	e000      	b.n	800c058 <prvGetNextExpireTime+0x18>
 800c056:	2200      	movs	r2, #0
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d105      	bne.n	800c070 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c064:	4b07      	ldr	r3, [pc, #28]	; (800c084 <prvGetNextExpireTime+0x44>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	60fb      	str	r3, [r7, #12]
 800c06e:	e001      	b.n	800c074 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c070:	2300      	movs	r3, #0
 800c072:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c074:	68fb      	ldr	r3, [r7, #12]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	20001704 	.word	0x20001704

0800c088 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c090:	f7ff f8d4 	bl	800b23c <xTaskGetTickCount>
 800c094:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c096:	4b0b      	ldr	r3, [pc, #44]	; (800c0c4 <prvSampleTimeNow+0x3c>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d205      	bcs.n	800c0ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c0a0:	f000 f936 	bl	800c310 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	601a      	str	r2, [r3, #0]
 800c0aa:	e002      	b.n	800c0b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c0b2:	4a04      	ldr	r2, [pc, #16]	; (800c0c4 <prvSampleTimeNow+0x3c>)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3710      	adds	r7, #16
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	20001714 	.word	0x20001714

0800c0c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b086      	sub	sp, #24
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]
 800c0d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d812      	bhi.n	800c114 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	1ad2      	subs	r2, r2, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d302      	bcc.n	800c102 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	617b      	str	r3, [r7, #20]
 800c100:	e01b      	b.n	800c13a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c102:	4b10      	ldr	r3, [pc, #64]	; (800c144 <prvInsertTimerInActiveList+0x7c>)
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	3304      	adds	r3, #4
 800c10a:	4619      	mov	r1, r3
 800c10c:	4610      	mov	r0, r2
 800c10e:	f7fd fde2 	bl	8009cd6 <vListInsert>
 800c112:	e012      	b.n	800c13a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d206      	bcs.n	800c12a <prvInsertTimerInActiveList+0x62>
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	429a      	cmp	r2, r3
 800c122:	d302      	bcc.n	800c12a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c124:	2301      	movs	r3, #1
 800c126:	617b      	str	r3, [r7, #20]
 800c128:	e007      	b.n	800c13a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c12a:	4b07      	ldr	r3, [pc, #28]	; (800c148 <prvInsertTimerInActiveList+0x80>)
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3304      	adds	r3, #4
 800c132:	4619      	mov	r1, r3
 800c134:	4610      	mov	r0, r2
 800c136:	f7fd fdce 	bl	8009cd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c13a:	697b      	ldr	r3, [r7, #20]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3718      	adds	r7, #24
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	20001708 	.word	0x20001708
 800c148:	20001704 	.word	0x20001704

0800c14c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b08e      	sub	sp, #56	; 0x38
 800c150:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c152:	e0ca      	b.n	800c2ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	da18      	bge.n	800c18c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c15a:	1d3b      	adds	r3, r7, #4
 800c15c:	3304      	adds	r3, #4
 800c15e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10a      	bne.n	800c17c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	61fb      	str	r3, [r7, #28]
}
 800c178:	bf00      	nop
 800c17a:	e7fe      	b.n	800c17a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c182:	6850      	ldr	r0, [r2, #4]
 800c184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c186:	6892      	ldr	r2, [r2, #8]
 800c188:	4611      	mov	r1, r2
 800c18a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f2c0 80ab 	blt.w	800c2ea <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19a:	695b      	ldr	r3, [r3, #20]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d004      	beq.n	800c1aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7fd fdcf 	bl	8009d48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1aa:	463b      	mov	r3, r7
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7ff ff6b 	bl	800c088 <prvSampleTimeNow>
 800c1b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b09      	cmp	r3, #9
 800c1b8:	f200 8096 	bhi.w	800c2e8 <prvProcessReceivedCommands+0x19c>
 800c1bc:	a201      	add	r2, pc, #4	; (adr r2, 800c1c4 <prvProcessReceivedCommands+0x78>)
 800c1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c2:	bf00      	nop
 800c1c4:	0800c1ed 	.word	0x0800c1ed
 800c1c8:	0800c1ed 	.word	0x0800c1ed
 800c1cc:	0800c1ed 	.word	0x0800c1ed
 800c1d0:	0800c261 	.word	0x0800c261
 800c1d4:	0800c275 	.word	0x0800c275
 800c1d8:	0800c2bf 	.word	0x0800c2bf
 800c1dc:	0800c1ed 	.word	0x0800c1ed
 800c1e0:	0800c1ed 	.word	0x0800c1ed
 800c1e4:	0800c261 	.word	0x0800c261
 800c1e8:	0800c275 	.word	0x0800c275
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1f2:	f043 0301 	orr.w	r3, r3, #1
 800c1f6:	b2da      	uxtb	r2, r3
 800c1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	18d1      	adds	r1, r2, r3
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c20a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c20c:	f7ff ff5c 	bl	800c0c8 <prvInsertTimerInActiveList>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d069      	beq.n	800c2ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c218:	6a1b      	ldr	r3, [r3, #32]
 800c21a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c21c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c224:	f003 0304 	and.w	r3, r3, #4
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d05e      	beq.n	800c2ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c230:	699b      	ldr	r3, [r3, #24]
 800c232:	441a      	add	r2, r3
 800c234:	2300      	movs	r3, #0
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	2300      	movs	r3, #0
 800c23a:	2100      	movs	r1, #0
 800c23c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c23e:	f7ff fe05 	bl	800be4c <xTimerGenericCommand>
 800c242:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c244:	6a3b      	ldr	r3, [r7, #32]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d14f      	bne.n	800c2ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24e:	f383 8811 	msr	BASEPRI, r3
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	61bb      	str	r3, [r7, #24]
}
 800c25c:	bf00      	nop
 800c25e:	e7fe      	b.n	800c25e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c266:	f023 0301 	bic.w	r3, r3, #1
 800c26a:	b2da      	uxtb	r2, r3
 800c26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c272:	e03a      	b.n	800c2ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c27a:	f043 0301 	orr.w	r3, r3, #1
 800c27e:	b2da      	uxtb	r2, r3
 800c280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28e:	699b      	ldr	r3, [r3, #24]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d10a      	bne.n	800c2aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c298:	f383 8811 	msr	BASEPRI, r3
 800c29c:	f3bf 8f6f 	isb	sy
 800c2a0:	f3bf 8f4f 	dsb	sy
 800c2a4:	617b      	str	r3, [r7, #20]
}
 800c2a6:	bf00      	nop
 800c2a8:	e7fe      	b.n	800c2a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ac:	699a      	ldr	r2, [r3, #24]
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b0:	18d1      	adds	r1, r2, r3
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2b8:	f7ff ff06 	bl	800c0c8 <prvInsertTimerInActiveList>
					break;
 800c2bc:	e015      	b.n	800c2ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2c4:	f003 0302 	and.w	r3, r3, #2
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d103      	bne.n	800c2d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c2cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ce:	f000 fbdf 	bl	800ca90 <vPortFree>
 800c2d2:	e00a      	b.n	800c2ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2da:	f023 0301 	bic.w	r3, r3, #1
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c2e6:	e000      	b.n	800c2ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c2e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2ea:	4b08      	ldr	r3, [pc, #32]	; (800c30c <prvProcessReceivedCommands+0x1c0>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	1d39      	adds	r1, r7, #4
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7fe f8e8 	bl	800a4c8 <xQueueReceive>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	f47f af2a 	bne.w	800c154 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c300:	bf00      	nop
 800c302:	bf00      	nop
 800c304:	3730      	adds	r7, #48	; 0x30
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	2000170c 	.word	0x2000170c

0800c310 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b088      	sub	sp, #32
 800c314:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c316:	e048      	b.n	800c3aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c318:	4b2d      	ldr	r3, [pc, #180]	; (800c3d0 <prvSwitchTimerLists+0xc0>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c322:	4b2b      	ldr	r3, [pc, #172]	; (800c3d0 <prvSwitchTimerLists+0xc0>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	3304      	adds	r3, #4
 800c330:	4618      	mov	r0, r3
 800c332:	f7fd fd09 	bl	8009d48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c344:	f003 0304 	and.w	r3, r3, #4
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d02e      	beq.n	800c3aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	699b      	ldr	r3, [r3, #24]
 800c350:	693a      	ldr	r2, [r7, #16]
 800c352:	4413      	add	r3, r2
 800c354:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d90e      	bls.n	800c37c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	68ba      	ldr	r2, [r7, #8]
 800c362:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c36a:	4b19      	ldr	r3, [pc, #100]	; (800c3d0 <prvSwitchTimerLists+0xc0>)
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3304      	adds	r3, #4
 800c372:	4619      	mov	r1, r3
 800c374:	4610      	mov	r0, r2
 800c376:	f7fd fcae 	bl	8009cd6 <vListInsert>
 800c37a:	e016      	b.n	800c3aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c37c:	2300      	movs	r3, #0
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	2300      	movs	r3, #0
 800c382:	693a      	ldr	r2, [r7, #16]
 800c384:	2100      	movs	r1, #0
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f7ff fd60 	bl	800be4c <xTimerGenericCommand>
 800c38c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d10a      	bne.n	800c3aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c398:	f383 8811 	msr	BASEPRI, r3
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	603b      	str	r3, [r7, #0]
}
 800c3a6:	bf00      	nop
 800c3a8:	e7fe      	b.n	800c3a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3aa:	4b09      	ldr	r3, [pc, #36]	; (800c3d0 <prvSwitchTimerLists+0xc0>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1b1      	bne.n	800c318 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c3b4:	4b06      	ldr	r3, [pc, #24]	; (800c3d0 <prvSwitchTimerLists+0xc0>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c3ba:	4b06      	ldr	r3, [pc, #24]	; (800c3d4 <prvSwitchTimerLists+0xc4>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a04      	ldr	r2, [pc, #16]	; (800c3d0 <prvSwitchTimerLists+0xc0>)
 800c3c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c3c2:	4a04      	ldr	r2, [pc, #16]	; (800c3d4 <prvSwitchTimerLists+0xc4>)
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	6013      	str	r3, [r2, #0]
}
 800c3c8:	bf00      	nop
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	20001704 	.word	0x20001704
 800c3d4:	20001708 	.word	0x20001708

0800c3d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c3de:	f000 f969 	bl	800c6b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c3e2:	4b15      	ldr	r3, [pc, #84]	; (800c438 <prvCheckForValidListAndQueue+0x60>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d120      	bne.n	800c42c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c3ea:	4814      	ldr	r0, [pc, #80]	; (800c43c <prvCheckForValidListAndQueue+0x64>)
 800c3ec:	f7fd fc22 	bl	8009c34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c3f0:	4813      	ldr	r0, [pc, #76]	; (800c440 <prvCheckForValidListAndQueue+0x68>)
 800c3f2:	f7fd fc1f 	bl	8009c34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c3f6:	4b13      	ldr	r3, [pc, #76]	; (800c444 <prvCheckForValidListAndQueue+0x6c>)
 800c3f8:	4a10      	ldr	r2, [pc, #64]	; (800c43c <prvCheckForValidListAndQueue+0x64>)
 800c3fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c3fc:	4b12      	ldr	r3, [pc, #72]	; (800c448 <prvCheckForValidListAndQueue+0x70>)
 800c3fe:	4a10      	ldr	r2, [pc, #64]	; (800c440 <prvCheckForValidListAndQueue+0x68>)
 800c400:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c402:	2300      	movs	r3, #0
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	4b11      	ldr	r3, [pc, #68]	; (800c44c <prvCheckForValidListAndQueue+0x74>)
 800c408:	4a11      	ldr	r2, [pc, #68]	; (800c450 <prvCheckForValidListAndQueue+0x78>)
 800c40a:	2110      	movs	r1, #16
 800c40c:	200a      	movs	r0, #10
 800c40e:	f7fd fd2d 	bl	8009e6c <xQueueGenericCreateStatic>
 800c412:	4603      	mov	r3, r0
 800c414:	4a08      	ldr	r2, [pc, #32]	; (800c438 <prvCheckForValidListAndQueue+0x60>)
 800c416:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c418:	4b07      	ldr	r3, [pc, #28]	; (800c438 <prvCheckForValidListAndQueue+0x60>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d005      	beq.n	800c42c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c420:	4b05      	ldr	r3, [pc, #20]	; (800c438 <prvCheckForValidListAndQueue+0x60>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	490b      	ldr	r1, [pc, #44]	; (800c454 <prvCheckForValidListAndQueue+0x7c>)
 800c426:	4618      	mov	r0, r3
 800c428:	f7fe fb62 	bl	800aaf0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c42c:	f000 f972 	bl	800c714 <vPortExitCritical>
}
 800c430:	bf00      	nop
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	2000170c 	.word	0x2000170c
 800c43c:	200016dc 	.word	0x200016dc
 800c440:	200016f0 	.word	0x200016f0
 800c444:	20001704 	.word	0x20001704
 800c448:	20001708 	.word	0x20001708
 800c44c:	200017b8 	.word	0x200017b8
 800c450:	20001718 	.word	0x20001718
 800c454:	08010b3c 	.word	0x08010b3c

0800c458 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	3b04      	subs	r3, #4
 800c468:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	3b04      	subs	r3, #4
 800c476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	f023 0201 	bic.w	r2, r3, #1
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	3b04      	subs	r3, #4
 800c486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c488:	4a0c      	ldr	r2, [pc, #48]	; (800c4bc <pxPortInitialiseStack+0x64>)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	3b14      	subs	r3, #20
 800c492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	3b04      	subs	r3, #4
 800c49e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f06f 0202 	mvn.w	r2, #2
 800c4a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3b20      	subs	r3, #32
 800c4ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	0800c4c1 	.word	0x0800c4c1

0800c4c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c4ca:	4b12      	ldr	r3, [pc, #72]	; (800c514 <prvTaskExitError+0x54>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d2:	d00a      	beq.n	800c4ea <prvTaskExitError+0x2a>
	__asm volatile
 800c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	60fb      	str	r3, [r7, #12]
}
 800c4e6:	bf00      	nop
 800c4e8:	e7fe      	b.n	800c4e8 <prvTaskExitError+0x28>
	__asm volatile
 800c4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	60bb      	str	r3, [r7, #8]
}
 800c4fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c4fe:	bf00      	nop
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d0fc      	beq.n	800c500 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c506:	bf00      	nop
 800c508:	bf00      	nop
 800c50a:	3714      	adds	r7, #20
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr
 800c514:	20000020 	.word	0x20000020
	...

0800c520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c520:	4b07      	ldr	r3, [pc, #28]	; (800c540 <pxCurrentTCBConst2>)
 800c522:	6819      	ldr	r1, [r3, #0]
 800c524:	6808      	ldr	r0, [r1, #0]
 800c526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52a:	f380 8809 	msr	PSP, r0
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f04f 0000 	mov.w	r0, #0
 800c536:	f380 8811 	msr	BASEPRI, r0
 800c53a:	4770      	bx	lr
 800c53c:	f3af 8000 	nop.w

0800c540 <pxCurrentTCBConst2>:
 800c540:	200011d4 	.word	0x200011d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c544:	bf00      	nop
 800c546:	bf00      	nop

0800c548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c548:	4808      	ldr	r0, [pc, #32]	; (800c56c <prvPortStartFirstTask+0x24>)
 800c54a:	6800      	ldr	r0, [r0, #0]
 800c54c:	6800      	ldr	r0, [r0, #0]
 800c54e:	f380 8808 	msr	MSP, r0
 800c552:	f04f 0000 	mov.w	r0, #0
 800c556:	f380 8814 	msr	CONTROL, r0
 800c55a:	b662      	cpsie	i
 800c55c:	b661      	cpsie	f
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	df00      	svc	0
 800c568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c56a:	bf00      	nop
 800c56c:	e000ed08 	.word	0xe000ed08

0800c570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c576:	4b46      	ldr	r3, [pc, #280]	; (800c690 <xPortStartScheduler+0x120>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a46      	ldr	r2, [pc, #280]	; (800c694 <xPortStartScheduler+0x124>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d10a      	bne.n	800c596 <xPortStartScheduler+0x26>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	613b      	str	r3, [r7, #16]
}
 800c592:	bf00      	nop
 800c594:	e7fe      	b.n	800c594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c596:	4b3e      	ldr	r3, [pc, #248]	; (800c690 <xPortStartScheduler+0x120>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a3f      	ldr	r2, [pc, #252]	; (800c698 <xPortStartScheduler+0x128>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d10a      	bne.n	800c5b6 <xPortStartScheduler+0x46>
	__asm volatile
 800c5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 800c5a8:	f3bf 8f6f 	isb	sy
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	60fb      	str	r3, [r7, #12]
}
 800c5b2:	bf00      	nop
 800c5b4:	e7fe      	b.n	800c5b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c5b6:	4b39      	ldr	r3, [pc, #228]	; (800c69c <xPortStartScheduler+0x12c>)
 800c5b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	22ff      	movs	r2, #255	; 0xff
 800c5c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c5d0:	78fb      	ldrb	r3, [r7, #3]
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	4b31      	ldr	r3, [pc, #196]	; (800c6a0 <xPortStartScheduler+0x130>)
 800c5dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c5de:	4b31      	ldr	r3, [pc, #196]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c5e0:	2207      	movs	r2, #7
 800c5e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5e4:	e009      	b.n	800c5fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c5e6:	4b2f      	ldr	r3, [pc, #188]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	4a2d      	ldr	r2, [pc, #180]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c5ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5f0:	78fb      	ldrb	r3, [r7, #3]
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	005b      	lsls	r3, r3, #1
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5fa:	78fb      	ldrb	r3, [r7, #3]
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c602:	2b80      	cmp	r3, #128	; 0x80
 800c604:	d0ef      	beq.n	800c5e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c606:	4b27      	ldr	r3, [pc, #156]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f1c3 0307 	rsb	r3, r3, #7
 800c60e:	2b04      	cmp	r3, #4
 800c610:	d00a      	beq.n	800c628 <xPortStartScheduler+0xb8>
	__asm volatile
 800c612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	60bb      	str	r3, [r7, #8]
}
 800c624:	bf00      	nop
 800c626:	e7fe      	b.n	800c626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c628:	4b1e      	ldr	r3, [pc, #120]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	021b      	lsls	r3, r3, #8
 800c62e:	4a1d      	ldr	r2, [pc, #116]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c632:	4b1c      	ldr	r3, [pc, #112]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c63a:	4a1a      	ldr	r2, [pc, #104]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c63c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	b2da      	uxtb	r2, r3
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c646:	4b18      	ldr	r3, [pc, #96]	; (800c6a8 <xPortStartScheduler+0x138>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a17      	ldr	r2, [pc, #92]	; (800c6a8 <xPortStartScheduler+0x138>)
 800c64c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c652:	4b15      	ldr	r3, [pc, #84]	; (800c6a8 <xPortStartScheduler+0x138>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a14      	ldr	r2, [pc, #80]	; (800c6a8 <xPortStartScheduler+0x138>)
 800c658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c65c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c65e:	f000 f8dd 	bl	800c81c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c662:	4b12      	ldr	r3, [pc, #72]	; (800c6ac <xPortStartScheduler+0x13c>)
 800c664:	2200      	movs	r2, #0
 800c666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c668:	f000 f8fc 	bl	800c864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c66c:	4b10      	ldr	r3, [pc, #64]	; (800c6b0 <xPortStartScheduler+0x140>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a0f      	ldr	r2, [pc, #60]	; (800c6b0 <xPortStartScheduler+0x140>)
 800c672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c678:	f7ff ff66 	bl	800c548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c67c:	f7fe fea8 	bl	800b3d0 <vTaskSwitchContext>
	prvTaskExitError();
 800c680:	f7ff ff1e 	bl	800c4c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	3718      	adds	r7, #24
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	e000ed00 	.word	0xe000ed00
 800c694:	410fc271 	.word	0x410fc271
 800c698:	410fc270 	.word	0x410fc270
 800c69c:	e000e400 	.word	0xe000e400
 800c6a0:	20001808 	.word	0x20001808
 800c6a4:	2000180c 	.word	0x2000180c
 800c6a8:	e000ed20 	.word	0xe000ed20
 800c6ac:	20000020 	.word	0x20000020
 800c6b0:	e000ef34 	.word	0xe000ef34

0800c6b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
	__asm volatile
 800c6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6be:	f383 8811 	msr	BASEPRI, r3
 800c6c2:	f3bf 8f6f 	isb	sy
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	607b      	str	r3, [r7, #4]
}
 800c6cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c6ce:	4b0f      	ldr	r3, [pc, #60]	; (800c70c <vPortEnterCritical+0x58>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	4a0d      	ldr	r2, [pc, #52]	; (800c70c <vPortEnterCritical+0x58>)
 800c6d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c6d8:	4b0c      	ldr	r3, [pc, #48]	; (800c70c <vPortEnterCritical+0x58>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d10f      	bne.n	800c700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6e0:	4b0b      	ldr	r3, [pc, #44]	; (800c710 <vPortEnterCritical+0x5c>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00a      	beq.n	800c700 <vPortEnterCritical+0x4c>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	603b      	str	r3, [r7, #0]
}
 800c6fc:	bf00      	nop
 800c6fe:	e7fe      	b.n	800c6fe <vPortEnterCritical+0x4a>
	}
}
 800c700:	bf00      	nop
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr
 800c70c:	20000020 	.word	0x20000020
 800c710:	e000ed04 	.word	0xe000ed04

0800c714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c71a:	4b12      	ldr	r3, [pc, #72]	; (800c764 <vPortExitCritical+0x50>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10a      	bne.n	800c738 <vPortExitCritical+0x24>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	607b      	str	r3, [r7, #4]
}
 800c734:	bf00      	nop
 800c736:	e7fe      	b.n	800c736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c738:	4b0a      	ldr	r3, [pc, #40]	; (800c764 <vPortExitCritical+0x50>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3b01      	subs	r3, #1
 800c73e:	4a09      	ldr	r2, [pc, #36]	; (800c764 <vPortExitCritical+0x50>)
 800c740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c742:	4b08      	ldr	r3, [pc, #32]	; (800c764 <vPortExitCritical+0x50>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d105      	bne.n	800c756 <vPortExitCritical+0x42>
 800c74a:	2300      	movs	r3, #0
 800c74c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	f383 8811 	msr	BASEPRI, r3
}
 800c754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c756:	bf00      	nop
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	20000020 	.word	0x20000020
	...

0800c770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c770:	f3ef 8009 	mrs	r0, PSP
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	4b15      	ldr	r3, [pc, #84]	; (800c7d0 <pxCurrentTCBConst>)
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	f01e 0f10 	tst.w	lr, #16
 800c780:	bf08      	it	eq
 800c782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78a:	6010      	str	r0, [r2, #0]
 800c78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c790:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c794:	f380 8811 	msr	BASEPRI, r0
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f7fe fe16 	bl	800b3d0 <vTaskSwitchContext>
 800c7a4:	f04f 0000 	mov.w	r0, #0
 800c7a8:	f380 8811 	msr	BASEPRI, r0
 800c7ac:	bc09      	pop	{r0, r3}
 800c7ae:	6819      	ldr	r1, [r3, #0]
 800c7b0:	6808      	ldr	r0, [r1, #0]
 800c7b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b6:	f01e 0f10 	tst.w	lr, #16
 800c7ba:	bf08      	it	eq
 800c7bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c7c0:	f380 8809 	msr	PSP, r0
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	f3af 8000 	nop.w

0800c7d0 <pxCurrentTCBConst>:
 800c7d0:	200011d4 	.word	0x200011d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c7d4:	bf00      	nop
 800c7d6:	bf00      	nop

0800c7d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	607b      	str	r3, [r7, #4]
}
 800c7f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7f2:	f7fe fd33 	bl	800b25c <xTaskIncrementTick>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7fc:	4b06      	ldr	r3, [pc, #24]	; (800c818 <xPortSysTickHandler+0x40>)
 800c7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	2300      	movs	r3, #0
 800c806:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	f383 8811 	msr	BASEPRI, r3
}
 800c80e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c810:	bf00      	nop
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	e000ed04 	.word	0xe000ed04

0800c81c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c81c:	b480      	push	{r7}
 800c81e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c820:	4b0b      	ldr	r3, [pc, #44]	; (800c850 <vPortSetupTimerInterrupt+0x34>)
 800c822:	2200      	movs	r2, #0
 800c824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c826:	4b0b      	ldr	r3, [pc, #44]	; (800c854 <vPortSetupTimerInterrupt+0x38>)
 800c828:	2200      	movs	r2, #0
 800c82a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c82c:	4b0a      	ldr	r3, [pc, #40]	; (800c858 <vPortSetupTimerInterrupt+0x3c>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a0a      	ldr	r2, [pc, #40]	; (800c85c <vPortSetupTimerInterrupt+0x40>)
 800c832:	fba2 2303 	umull	r2, r3, r2, r3
 800c836:	099b      	lsrs	r3, r3, #6
 800c838:	4a09      	ldr	r2, [pc, #36]	; (800c860 <vPortSetupTimerInterrupt+0x44>)
 800c83a:	3b01      	subs	r3, #1
 800c83c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c83e:	4b04      	ldr	r3, [pc, #16]	; (800c850 <vPortSetupTimerInterrupt+0x34>)
 800c840:	2207      	movs	r2, #7
 800c842:	601a      	str	r2, [r3, #0]
}
 800c844:	bf00      	nop
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	e000e010 	.word	0xe000e010
 800c854:	e000e018 	.word	0xe000e018
 800c858:	20000000 	.word	0x20000000
 800c85c:	10624dd3 	.word	0x10624dd3
 800c860:	e000e014 	.word	0xe000e014

0800c864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c874 <vPortEnableVFP+0x10>
 800c868:	6801      	ldr	r1, [r0, #0]
 800c86a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c86e:	6001      	str	r1, [r0, #0]
 800c870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c872:	bf00      	nop
 800c874:	e000ed88 	.word	0xe000ed88

0800c878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c87e:	f3ef 8305 	mrs	r3, IPSR
 800c882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2b0f      	cmp	r3, #15
 800c888:	d914      	bls.n	800c8b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c88a:	4a17      	ldr	r2, [pc, #92]	; (800c8e8 <vPortValidateInterruptPriority+0x70>)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	4413      	add	r3, r2
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c894:	4b15      	ldr	r3, [pc, #84]	; (800c8ec <vPortValidateInterruptPriority+0x74>)
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	7afa      	ldrb	r2, [r7, #11]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d20a      	bcs.n	800c8b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	607b      	str	r3, [r7, #4]
}
 800c8b0:	bf00      	nop
 800c8b2:	e7fe      	b.n	800c8b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c8b4:	4b0e      	ldr	r3, [pc, #56]	; (800c8f0 <vPortValidateInterruptPriority+0x78>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c8bc:	4b0d      	ldr	r3, [pc, #52]	; (800c8f4 <vPortValidateInterruptPriority+0x7c>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d90a      	bls.n	800c8da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	603b      	str	r3, [r7, #0]
}
 800c8d6:	bf00      	nop
 800c8d8:	e7fe      	b.n	800c8d8 <vPortValidateInterruptPriority+0x60>
	}
 800c8da:	bf00      	nop
 800c8dc:	3714      	adds	r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	e000e3f0 	.word	0xe000e3f0
 800c8ec:	20001808 	.word	0x20001808
 800c8f0:	e000ed0c 	.word	0xe000ed0c
 800c8f4:	2000180c 	.word	0x2000180c

0800c8f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b08a      	sub	sp, #40	; 0x28
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c900:	2300      	movs	r3, #0
 800c902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c904:	f7fe fbb6 	bl	800b074 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c908:	4b5b      	ldr	r3, [pc, #364]	; (800ca78 <pvPortMalloc+0x180>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d101      	bne.n	800c914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c910:	f000 f920 	bl	800cb54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c914:	4b59      	ldr	r3, [pc, #356]	; (800ca7c <pvPortMalloc+0x184>)
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	4013      	ands	r3, r2
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f040 8093 	bne.w	800ca48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d01d      	beq.n	800c964 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c928:	2208      	movs	r2, #8
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4413      	add	r3, r2
 800c92e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f003 0307 	and.w	r3, r3, #7
 800c936:	2b00      	cmp	r3, #0
 800c938:	d014      	beq.n	800c964 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f023 0307 	bic.w	r3, r3, #7
 800c940:	3308      	adds	r3, #8
 800c942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f003 0307 	and.w	r3, r3, #7
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00a      	beq.n	800c964 <pvPortMalloc+0x6c>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	617b      	str	r3, [r7, #20]
}
 800c960:	bf00      	nop
 800c962:	e7fe      	b.n	800c962 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d06e      	beq.n	800ca48 <pvPortMalloc+0x150>
 800c96a:	4b45      	ldr	r3, [pc, #276]	; (800ca80 <pvPortMalloc+0x188>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	429a      	cmp	r2, r3
 800c972:	d869      	bhi.n	800ca48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c974:	4b43      	ldr	r3, [pc, #268]	; (800ca84 <pvPortMalloc+0x18c>)
 800c976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c978:	4b42      	ldr	r3, [pc, #264]	; (800ca84 <pvPortMalloc+0x18c>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c97e:	e004      	b.n	800c98a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	429a      	cmp	r2, r3
 800c992:	d903      	bls.n	800c99c <pvPortMalloc+0xa4>
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1f1      	bne.n	800c980 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c99c:	4b36      	ldr	r3, [pc, #216]	; (800ca78 <pvPortMalloc+0x180>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d050      	beq.n	800ca48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c9a6:	6a3b      	ldr	r3, [r7, #32]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2208      	movs	r2, #8
 800c9ac:	4413      	add	r3, r2
 800c9ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	6a3b      	ldr	r3, [r7, #32]
 800c9b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	1ad2      	subs	r2, r2, r3
 800c9c0:	2308      	movs	r3, #8
 800c9c2:	005b      	lsls	r3, r3, #1
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d91f      	bls.n	800ca08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	f003 0307 	and.w	r3, r3, #7
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00a      	beq.n	800c9f0 <pvPortMalloc+0xf8>
	__asm volatile
 800c9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	613b      	str	r3, [r7, #16]
}
 800c9ec:	bf00      	nop
 800c9ee:	e7fe      	b.n	800c9ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	1ad2      	subs	r2, r2, r3
 800c9f8:	69bb      	ldr	r3, [r7, #24]
 800c9fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca02:	69b8      	ldr	r0, [r7, #24]
 800ca04:	f000 f908 	bl	800cc18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca08:	4b1d      	ldr	r3, [pc, #116]	; (800ca80 <pvPortMalloc+0x188>)
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	1ad3      	subs	r3, r2, r3
 800ca12:	4a1b      	ldr	r2, [pc, #108]	; (800ca80 <pvPortMalloc+0x188>)
 800ca14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca16:	4b1a      	ldr	r3, [pc, #104]	; (800ca80 <pvPortMalloc+0x188>)
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	4b1b      	ldr	r3, [pc, #108]	; (800ca88 <pvPortMalloc+0x190>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d203      	bcs.n	800ca2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca22:	4b17      	ldr	r3, [pc, #92]	; (800ca80 <pvPortMalloc+0x188>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a18      	ldr	r2, [pc, #96]	; (800ca88 <pvPortMalloc+0x190>)
 800ca28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2c:	685a      	ldr	r2, [r3, #4]
 800ca2e:	4b13      	ldr	r3, [pc, #76]	; (800ca7c <pvPortMalloc+0x184>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	431a      	orrs	r2, r3
 800ca34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca3e:	4b13      	ldr	r3, [pc, #76]	; (800ca8c <pvPortMalloc+0x194>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	3301      	adds	r3, #1
 800ca44:	4a11      	ldr	r2, [pc, #68]	; (800ca8c <pvPortMalloc+0x194>)
 800ca46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca48:	f7fe fb5a 	bl	800b100 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	f003 0307 	and.w	r3, r3, #7
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00a      	beq.n	800ca6c <pvPortMalloc+0x174>
	__asm volatile
 800ca56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	60fb      	str	r3, [r7, #12]
}
 800ca68:	bf00      	nop
 800ca6a:	e7fe      	b.n	800ca6a <pvPortMalloc+0x172>
	return pvReturn;
 800ca6c:	69fb      	ldr	r3, [r7, #28]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3728      	adds	r7, #40	; 0x28
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	20005418 	.word	0x20005418
 800ca7c:	2000542c 	.word	0x2000542c
 800ca80:	2000541c 	.word	0x2000541c
 800ca84:	20005410 	.word	0x20005410
 800ca88:	20005420 	.word	0x20005420
 800ca8c:	20005424 	.word	0x20005424

0800ca90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b086      	sub	sp, #24
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d04d      	beq.n	800cb3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800caa2:	2308      	movs	r3, #8
 800caa4:	425b      	negs	r3, r3
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	4413      	add	r3, r2
 800caaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	4b24      	ldr	r3, [pc, #144]	; (800cb48 <vPortFree+0xb8>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4013      	ands	r3, r2
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10a      	bne.n	800cad4 <vPortFree+0x44>
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	60fb      	str	r3, [r7, #12]
}
 800cad0:	bf00      	nop
 800cad2:	e7fe      	b.n	800cad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00a      	beq.n	800caf2 <vPortFree+0x62>
	__asm volatile
 800cadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae0:	f383 8811 	msr	BASEPRI, r3
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	60bb      	str	r3, [r7, #8]
}
 800caee:	bf00      	nop
 800caf0:	e7fe      	b.n	800caf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	685a      	ldr	r2, [r3, #4]
 800caf6:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <vPortFree+0xb8>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4013      	ands	r3, r2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d01e      	beq.n	800cb3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d11a      	bne.n	800cb3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	4b0e      	ldr	r3, [pc, #56]	; (800cb48 <vPortFree+0xb8>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	43db      	mvns	r3, r3
 800cb12:	401a      	ands	r2, r3
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb18:	f7fe faac 	bl	800b074 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	685a      	ldr	r2, [r3, #4]
 800cb20:	4b0a      	ldr	r3, [pc, #40]	; (800cb4c <vPortFree+0xbc>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4413      	add	r3, r2
 800cb26:	4a09      	ldr	r2, [pc, #36]	; (800cb4c <vPortFree+0xbc>)
 800cb28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb2a:	6938      	ldr	r0, [r7, #16]
 800cb2c:	f000 f874 	bl	800cc18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cb30:	4b07      	ldr	r3, [pc, #28]	; (800cb50 <vPortFree+0xc0>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3301      	adds	r3, #1
 800cb36:	4a06      	ldr	r2, [pc, #24]	; (800cb50 <vPortFree+0xc0>)
 800cb38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb3a:	f7fe fae1 	bl	800b100 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb3e:	bf00      	nop
 800cb40:	3718      	adds	r7, #24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	2000542c 	.word	0x2000542c
 800cb4c:	2000541c 	.word	0x2000541c
 800cb50:	20005428 	.word	0x20005428

0800cb54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cb5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb60:	4b27      	ldr	r3, [pc, #156]	; (800cc00 <prvHeapInit+0xac>)
 800cb62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f003 0307 	and.w	r3, r3, #7
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00c      	beq.n	800cb88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	3307      	adds	r3, #7
 800cb72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f023 0307 	bic.w	r3, r3, #7
 800cb7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	1ad3      	subs	r3, r2, r3
 800cb82:	4a1f      	ldr	r2, [pc, #124]	; (800cc00 <prvHeapInit+0xac>)
 800cb84:	4413      	add	r3, r2
 800cb86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb8c:	4a1d      	ldr	r2, [pc, #116]	; (800cc04 <prvHeapInit+0xb0>)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb92:	4b1c      	ldr	r3, [pc, #112]	; (800cc04 <prvHeapInit+0xb0>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cba0:	2208      	movs	r2, #8
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	1a9b      	subs	r3, r3, r2
 800cba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f023 0307 	bic.w	r3, r3, #7
 800cbae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	4a15      	ldr	r2, [pc, #84]	; (800cc08 <prvHeapInit+0xb4>)
 800cbb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cbb6:	4b14      	ldr	r3, [pc, #80]	; (800cc08 <prvHeapInit+0xb4>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cbbe:	4b12      	ldr	r3, [pc, #72]	; (800cc08 <prvHeapInit+0xb4>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	1ad2      	subs	r2, r2, r3
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cbd4:	4b0c      	ldr	r3, [pc, #48]	; (800cc08 <prvHeapInit+0xb4>)
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	4a0a      	ldr	r2, [pc, #40]	; (800cc0c <prvHeapInit+0xb8>)
 800cbe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	4a09      	ldr	r2, [pc, #36]	; (800cc10 <prvHeapInit+0xbc>)
 800cbea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbec:	4b09      	ldr	r3, [pc, #36]	; (800cc14 <prvHeapInit+0xc0>)
 800cbee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cbf2:	601a      	str	r2, [r3, #0]
}
 800cbf4:	bf00      	nop
 800cbf6:	3714      	adds	r7, #20
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr
 800cc00:	20001810 	.word	0x20001810
 800cc04:	20005410 	.word	0x20005410
 800cc08:	20005418 	.word	0x20005418
 800cc0c:	20005420 	.word	0x20005420
 800cc10:	2000541c 	.word	0x2000541c
 800cc14:	2000542c 	.word	0x2000542c

0800cc18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc20:	4b28      	ldr	r3, [pc, #160]	; (800ccc4 <prvInsertBlockIntoFreeList+0xac>)
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	e002      	b.n	800cc2c <prvInsertBlockIntoFreeList+0x14>
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	60fb      	str	r3, [r7, #12]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d8f7      	bhi.n	800cc26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	4413      	add	r3, r2
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d108      	bne.n	800cc5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	441a      	add	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	68ba      	ldr	r2, [r7, #8]
 800cc64:	441a      	add	r2, r3
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d118      	bne.n	800cca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	4b15      	ldr	r3, [pc, #84]	; (800ccc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d00d      	beq.n	800cc96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	685a      	ldr	r2, [r3, #4]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	441a      	add	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	e008      	b.n	800cca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc96:	4b0c      	ldr	r3, [pc, #48]	; (800ccc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	601a      	str	r2, [r3, #0]
 800cc9e:	e003      	b.n	800cca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d002      	beq.n	800ccb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccb6:	bf00      	nop
 800ccb8:	3714      	adds	r7, #20
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	20005410 	.word	0x20005410
 800ccc8:	20005418 	.word	0x20005418

0800cccc <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800ccd2:	f000 fa29 	bl	800d128 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800ccd6:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ccda:	2201      	movs	r2, #1
 800ccdc:	2178      	movs	r1, #120	; 0x78
 800ccde:	485b      	ldr	r0, [pc, #364]	; (800ce4c <SSD1306_Init+0x180>)
 800cce0:	f7f7 fb30 	bl	8004344 <HAL_I2C_IsDeviceReady>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d001      	beq.n	800ccee <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800ccea:	2300      	movs	r3, #0
 800ccec:	e0a9      	b.n	800ce42 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800ccee:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800ccf2:	607b      	str	r3, [r7, #4]
	while(p>0)
 800ccf4:	e002      	b.n	800ccfc <SSD1306_Init+0x30>
		p--;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	607b      	str	r3, [r7, #4]
	while(p>0)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1f9      	bne.n	800ccf6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800cd02:	22ae      	movs	r2, #174	; 0xae
 800cd04:	2100      	movs	r1, #0
 800cd06:	2078      	movs	r0, #120	; 0x78
 800cd08:	f000 fa8a 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800cd0c:	2220      	movs	r2, #32
 800cd0e:	2100      	movs	r1, #0
 800cd10:	2078      	movs	r0, #120	; 0x78
 800cd12:	f000 fa85 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800cd16:	2210      	movs	r2, #16
 800cd18:	2100      	movs	r1, #0
 800cd1a:	2078      	movs	r0, #120	; 0x78
 800cd1c:	f000 fa80 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800cd20:	22b0      	movs	r2, #176	; 0xb0
 800cd22:	2100      	movs	r1, #0
 800cd24:	2078      	movs	r0, #120	; 0x78
 800cd26:	f000 fa7b 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800cd2a:	22c8      	movs	r2, #200	; 0xc8
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	2078      	movs	r0, #120	; 0x78
 800cd30:	f000 fa76 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800cd34:	2200      	movs	r2, #0
 800cd36:	2100      	movs	r1, #0
 800cd38:	2078      	movs	r0, #120	; 0x78
 800cd3a:	f000 fa71 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800cd3e:	2210      	movs	r2, #16
 800cd40:	2100      	movs	r1, #0
 800cd42:	2078      	movs	r0, #120	; 0x78
 800cd44:	f000 fa6c 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800cd48:	2240      	movs	r2, #64	; 0x40
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	2078      	movs	r0, #120	; 0x78
 800cd4e:	f000 fa67 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800cd52:	2281      	movs	r2, #129	; 0x81
 800cd54:	2100      	movs	r1, #0
 800cd56:	2078      	movs	r0, #120	; 0x78
 800cd58:	f000 fa62 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800cd5c:	22ff      	movs	r2, #255	; 0xff
 800cd5e:	2100      	movs	r1, #0
 800cd60:	2078      	movs	r0, #120	; 0x78
 800cd62:	f000 fa5d 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800cd66:	22a1      	movs	r2, #161	; 0xa1
 800cd68:	2100      	movs	r1, #0
 800cd6a:	2078      	movs	r0, #120	; 0x78
 800cd6c:	f000 fa58 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800cd70:	22a6      	movs	r2, #166	; 0xa6
 800cd72:	2100      	movs	r1, #0
 800cd74:	2078      	movs	r0, #120	; 0x78
 800cd76:	f000 fa53 	bl	800d220 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800cd7a:	22a8      	movs	r2, #168	; 0xa8
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	2078      	movs	r0, #120	; 0x78
 800cd80:	f000 fa4e 	bl	800d220 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 800cd84:	223f      	movs	r2, #63	; 0x3f
 800cd86:	2100      	movs	r1, #0
 800cd88:	2078      	movs	r0, #120	; 0x78
 800cd8a:	f000 fa49 	bl	800d220 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800cd8e:	22a4      	movs	r2, #164	; 0xa4
 800cd90:	2100      	movs	r1, #0
 800cd92:	2078      	movs	r0, #120	; 0x78
 800cd94:	f000 fa44 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800cd98:	22d3      	movs	r2, #211	; 0xd3
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	2078      	movs	r0, #120	; 0x78
 800cd9e:	f000 fa3f 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800cda2:	2200      	movs	r2, #0
 800cda4:	2100      	movs	r1, #0
 800cda6:	2078      	movs	r0, #120	; 0x78
 800cda8:	f000 fa3a 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800cdac:	22d5      	movs	r2, #213	; 0xd5
 800cdae:	2100      	movs	r1, #0
 800cdb0:	2078      	movs	r0, #120	; 0x78
 800cdb2:	f000 fa35 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800cdb6:	22f0      	movs	r2, #240	; 0xf0
 800cdb8:	2100      	movs	r1, #0
 800cdba:	2078      	movs	r0, #120	; 0x78
 800cdbc:	f000 fa30 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800cdc0:	22d9      	movs	r2, #217	; 0xd9
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	2078      	movs	r0, #120	; 0x78
 800cdc6:	f000 fa2b 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800cdca:	2222      	movs	r2, #34	; 0x22
 800cdcc:	2100      	movs	r1, #0
 800cdce:	2078      	movs	r0, #120	; 0x78
 800cdd0:	f000 fa26 	bl	800d220 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800cdd4:	22da      	movs	r2, #218	; 0xda
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	2078      	movs	r0, #120	; 0x78
 800cdda:	f000 fa21 	bl	800d220 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 800cdde:	2212      	movs	r2, #18
 800cde0:	2100      	movs	r1, #0
 800cde2:	2078      	movs	r0, #120	; 0x78
 800cde4:	f000 fa1c 	bl	800d220 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800cde8:	22db      	movs	r2, #219	; 0xdb
 800cdea:	2100      	movs	r1, #0
 800cdec:	2078      	movs	r0, #120	; 0x78
 800cdee:	f000 fa17 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800cdf2:	2220      	movs	r2, #32
 800cdf4:	2100      	movs	r1, #0
 800cdf6:	2078      	movs	r0, #120	; 0x78
 800cdf8:	f000 fa12 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800cdfc:	228d      	movs	r2, #141	; 0x8d
 800cdfe:	2100      	movs	r1, #0
 800ce00:	2078      	movs	r0, #120	; 0x78
 800ce02:	f000 fa0d 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800ce06:	2214      	movs	r2, #20
 800ce08:	2100      	movs	r1, #0
 800ce0a:	2078      	movs	r0, #120	; 0x78
 800ce0c:	f000 fa08 	bl	800d220 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800ce10:	22af      	movs	r2, #175	; 0xaf
 800ce12:	2100      	movs	r1, #0
 800ce14:	2078      	movs	r0, #120	; 0x78
 800ce16:	f000 fa03 	bl	800d220 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800ce1a:	222e      	movs	r2, #46	; 0x2e
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	2078      	movs	r0, #120	; 0x78
 800ce20:	f000 f9fe 	bl	800d220 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800ce24:	2000      	movs	r0, #0
 800ce26:	f000 f843 	bl	800ceb0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800ce2a:	f000 f813 	bl	800ce54 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800ce2e:	4b08      	ldr	r3, [pc, #32]	; (800ce50 <SSD1306_Init+0x184>)
 800ce30:	2200      	movs	r2, #0
 800ce32:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800ce34:	4b06      	ldr	r3, [pc, #24]	; (800ce50 <SSD1306_Init+0x184>)
 800ce36:	2200      	movs	r2, #0
 800ce38:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800ce3a:	4b05      	ldr	r3, [pc, #20]	; (800ce50 <SSD1306_Init+0x184>)
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800ce40:	2301      	movs	r3, #1
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3708      	adds	r7, #8
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	200004cc 	.word	0x200004cc
 800ce50:	20005830 	.word	0x20005830

0800ce54 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	71fb      	strb	r3, [r7, #7]
 800ce5e:	e01d      	b.n	800ce9c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800ce60:	79fb      	ldrb	r3, [r7, #7]
 800ce62:	3b50      	subs	r3, #80	; 0x50
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	461a      	mov	r2, r3
 800ce68:	2100      	movs	r1, #0
 800ce6a:	2078      	movs	r0, #120	; 0x78
 800ce6c:	f000 f9d8 	bl	800d220 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800ce70:	2200      	movs	r2, #0
 800ce72:	2100      	movs	r1, #0
 800ce74:	2078      	movs	r0, #120	; 0x78
 800ce76:	f000 f9d3 	bl	800d220 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800ce7a:	2210      	movs	r2, #16
 800ce7c:	2100      	movs	r1, #0
 800ce7e:	2078      	movs	r0, #120	; 0x78
 800ce80:	f000 f9ce 	bl	800d220 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800ce84:	79fb      	ldrb	r3, [r7, #7]
 800ce86:	01db      	lsls	r3, r3, #7
 800ce88:	4a08      	ldr	r2, [pc, #32]	; (800ceac <SSD1306_UpdateScreen+0x58>)
 800ce8a:	441a      	add	r2, r3
 800ce8c:	2380      	movs	r3, #128	; 0x80
 800ce8e:	2140      	movs	r1, #64	; 0x40
 800ce90:	2078      	movs	r0, #120	; 0x78
 800ce92:	f000 f95f 	bl	800d154 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800ce96:	79fb      	ldrb	r3, [r7, #7]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	71fb      	strb	r3, [r7, #7]
 800ce9c:	79fb      	ldrb	r3, [r7, #7]
 800ce9e:	2b07      	cmp	r3, #7
 800cea0:	d9de      	bls.n	800ce60 <SSD1306_UpdateScreen+0xc>
	}
}
 800cea2:	bf00      	nop
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	20005430 	.word	0x20005430

0800ceb0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800ceba:	79fb      	ldrb	r3, [r7, #7]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d101      	bne.n	800cec4 <SSD1306_Fill+0x14>
 800cec0:	2300      	movs	r3, #0
 800cec2:	e000      	b.n	800cec6 <SSD1306_Fill+0x16>
 800cec4:	23ff      	movs	r3, #255	; 0xff
 800cec6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ceca:	4619      	mov	r1, r3
 800cecc:	4803      	ldr	r0, [pc, #12]	; (800cedc <SSD1306_Fill+0x2c>)
 800cece:	f001 fc08 	bl	800e6e2 <memset>
}
 800ced2:	bf00      	nop
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	20005430 	.word	0x20005430

0800cee0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	4603      	mov	r3, r0
 800cee8:	80fb      	strh	r3, [r7, #6]
 800ceea:	460b      	mov	r3, r1
 800ceec:	80bb      	strh	r3, [r7, #4]
 800ceee:	4613      	mov	r3, r2
 800cef0:	70fb      	strb	r3, [r7, #3]
	if (
 800cef2:	88fb      	ldrh	r3, [r7, #6]
 800cef4:	2b7f      	cmp	r3, #127	; 0x7f
 800cef6:	d848      	bhi.n	800cf8a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800cef8:	88bb      	ldrh	r3, [r7, #4]
 800cefa:	2b3f      	cmp	r3, #63	; 0x3f
 800cefc:	d845      	bhi.n	800cf8a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800cefe:	4b26      	ldr	r3, [pc, #152]	; (800cf98 <SSD1306_DrawPixel+0xb8>)
 800cf00:	791b      	ldrb	r3, [r3, #4]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d006      	beq.n	800cf14 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800cf06:	78fb      	ldrb	r3, [r7, #3]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	bf0c      	ite	eq
 800cf0c:	2301      	moveq	r3, #1
 800cf0e:	2300      	movne	r3, #0
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800cf14:	78fb      	ldrb	r3, [r7, #3]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d11a      	bne.n	800cf50 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800cf1a:	88fa      	ldrh	r2, [r7, #6]
 800cf1c:	88bb      	ldrh	r3, [r7, #4]
 800cf1e:	08db      	lsrs	r3, r3, #3
 800cf20:	b298      	uxth	r0, r3
 800cf22:	4603      	mov	r3, r0
 800cf24:	01db      	lsls	r3, r3, #7
 800cf26:	4413      	add	r3, r2
 800cf28:	4a1c      	ldr	r2, [pc, #112]	; (800cf9c <SSD1306_DrawPixel+0xbc>)
 800cf2a:	5cd3      	ldrb	r3, [r2, r3]
 800cf2c:	b25a      	sxtb	r2, r3
 800cf2e:	88bb      	ldrh	r3, [r7, #4]
 800cf30:	f003 0307 	and.w	r3, r3, #7
 800cf34:	2101      	movs	r1, #1
 800cf36:	fa01 f303 	lsl.w	r3, r1, r3
 800cf3a:	b25b      	sxtb	r3, r3
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	b259      	sxtb	r1, r3
 800cf40:	88fa      	ldrh	r2, [r7, #6]
 800cf42:	4603      	mov	r3, r0
 800cf44:	01db      	lsls	r3, r3, #7
 800cf46:	4413      	add	r3, r2
 800cf48:	b2c9      	uxtb	r1, r1
 800cf4a:	4a14      	ldr	r2, [pc, #80]	; (800cf9c <SSD1306_DrawPixel+0xbc>)
 800cf4c:	54d1      	strb	r1, [r2, r3]
 800cf4e:	e01d      	b.n	800cf8c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800cf50:	88fa      	ldrh	r2, [r7, #6]
 800cf52:	88bb      	ldrh	r3, [r7, #4]
 800cf54:	08db      	lsrs	r3, r3, #3
 800cf56:	b298      	uxth	r0, r3
 800cf58:	4603      	mov	r3, r0
 800cf5a:	01db      	lsls	r3, r3, #7
 800cf5c:	4413      	add	r3, r2
 800cf5e:	4a0f      	ldr	r2, [pc, #60]	; (800cf9c <SSD1306_DrawPixel+0xbc>)
 800cf60:	5cd3      	ldrb	r3, [r2, r3]
 800cf62:	b25a      	sxtb	r2, r3
 800cf64:	88bb      	ldrh	r3, [r7, #4]
 800cf66:	f003 0307 	and.w	r3, r3, #7
 800cf6a:	2101      	movs	r1, #1
 800cf6c:	fa01 f303 	lsl.w	r3, r1, r3
 800cf70:	b25b      	sxtb	r3, r3
 800cf72:	43db      	mvns	r3, r3
 800cf74:	b25b      	sxtb	r3, r3
 800cf76:	4013      	ands	r3, r2
 800cf78:	b259      	sxtb	r1, r3
 800cf7a:	88fa      	ldrh	r2, [r7, #6]
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	01db      	lsls	r3, r3, #7
 800cf80:	4413      	add	r3, r2
 800cf82:	b2c9      	uxtb	r1, r1
 800cf84:	4a05      	ldr	r2, [pc, #20]	; (800cf9c <SSD1306_DrawPixel+0xbc>)
 800cf86:	54d1      	strb	r1, [r2, r3]
 800cf88:	e000      	b.n	800cf8c <SSD1306_DrawPixel+0xac>
		return;
 800cf8a:	bf00      	nop
	}
}
 800cf8c:	370c      	adds	r7, #12
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	20005830 	.word	0x20005830
 800cf9c:	20005430 	.word	0x20005430

0800cfa0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	460a      	mov	r2, r1
 800cfaa:	80fb      	strh	r3, [r7, #6]
 800cfac:	4613      	mov	r3, r2
 800cfae:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800cfb0:	4a05      	ldr	r2, [pc, #20]	; (800cfc8 <SSD1306_GotoXY+0x28>)
 800cfb2:	88fb      	ldrh	r3, [r7, #6]
 800cfb4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800cfb6:	4a04      	ldr	r2, [pc, #16]	; (800cfc8 <SSD1306_GotoXY+0x28>)
 800cfb8:	88bb      	ldrh	r3, [r7, #4]
 800cfba:	8053      	strh	r3, [r2, #2]
}
 800cfbc:	bf00      	nop
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr
 800cfc8:	20005830 	.word	0x20005830

0800cfcc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b086      	sub	sp, #24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	6039      	str	r1, [r7, #0]
 800cfd6:	71fb      	strb	r3, [r7, #7]
 800cfd8:	4613      	mov	r3, r2
 800cfda:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800cfdc:	4b3a      	ldr	r3, [pc, #232]	; (800d0c8 <SSD1306_Putc+0xfc>)
 800cfde:	881b      	ldrh	r3, [r3, #0]
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	4413      	add	r3, r2
	if (
 800cfe8:	2b7f      	cmp	r3, #127	; 0x7f
 800cfea:	dc07      	bgt.n	800cffc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800cfec:	4b36      	ldr	r3, [pc, #216]	; (800d0c8 <SSD1306_Putc+0xfc>)
 800cfee:	885b      	ldrh	r3, [r3, #2]
 800cff0:	461a      	mov	r2, r3
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	785b      	ldrb	r3, [r3, #1]
 800cff6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800cff8:	2b3f      	cmp	r3, #63	; 0x3f
 800cffa:	dd01      	ble.n	800d000 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800cffc:	2300      	movs	r3, #0
 800cffe:	e05e      	b.n	800d0be <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800d000:	2300      	movs	r3, #0
 800d002:	617b      	str	r3, [r7, #20]
 800d004:	e04b      	b.n	800d09e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	685a      	ldr	r2, [r3, #4]
 800d00a:	79fb      	ldrb	r3, [r7, #7]
 800d00c:	3b20      	subs	r3, #32
 800d00e:	6839      	ldr	r1, [r7, #0]
 800d010:	7849      	ldrb	r1, [r1, #1]
 800d012:	fb01 f303 	mul.w	r3, r1, r3
 800d016:	4619      	mov	r1, r3
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	440b      	add	r3, r1
 800d01c:	005b      	lsls	r3, r3, #1
 800d01e:	4413      	add	r3, r2
 800d020:	881b      	ldrh	r3, [r3, #0]
 800d022:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800d024:	2300      	movs	r3, #0
 800d026:	613b      	str	r3, [r7, #16]
 800d028:	e030      	b.n	800d08c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	fa02 f303 	lsl.w	r3, r2, r3
 800d032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d036:	2b00      	cmp	r3, #0
 800d038:	d010      	beq.n	800d05c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800d03a:	4b23      	ldr	r3, [pc, #140]	; (800d0c8 <SSD1306_Putc+0xfc>)
 800d03c:	881a      	ldrh	r2, [r3, #0]
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	b29b      	uxth	r3, r3
 800d042:	4413      	add	r3, r2
 800d044:	b298      	uxth	r0, r3
 800d046:	4b20      	ldr	r3, [pc, #128]	; (800d0c8 <SSD1306_Putc+0xfc>)
 800d048:	885a      	ldrh	r2, [r3, #2]
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	4413      	add	r3, r2
 800d050:	b29b      	uxth	r3, r3
 800d052:	79ba      	ldrb	r2, [r7, #6]
 800d054:	4619      	mov	r1, r3
 800d056:	f7ff ff43 	bl	800cee0 <SSD1306_DrawPixel>
 800d05a:	e014      	b.n	800d086 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800d05c:	4b1a      	ldr	r3, [pc, #104]	; (800d0c8 <SSD1306_Putc+0xfc>)
 800d05e:	881a      	ldrh	r2, [r3, #0]
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	b29b      	uxth	r3, r3
 800d064:	4413      	add	r3, r2
 800d066:	b298      	uxth	r0, r3
 800d068:	4b17      	ldr	r3, [pc, #92]	; (800d0c8 <SSD1306_Putc+0xfc>)
 800d06a:	885a      	ldrh	r2, [r3, #2]
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	b29b      	uxth	r3, r3
 800d070:	4413      	add	r3, r2
 800d072:	b299      	uxth	r1, r3
 800d074:	79bb      	ldrb	r3, [r7, #6]
 800d076:	2b00      	cmp	r3, #0
 800d078:	bf0c      	ite	eq
 800d07a:	2301      	moveq	r3, #1
 800d07c:	2300      	movne	r3, #0
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	461a      	mov	r2, r3
 800d082:	f7ff ff2d 	bl	800cee0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	3301      	adds	r3, #1
 800d08a:	613b      	str	r3, [r7, #16]
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	461a      	mov	r2, r3
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	4293      	cmp	r3, r2
 800d096:	d3c8      	bcc.n	800d02a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	3301      	adds	r3, #1
 800d09c:	617b      	str	r3, [r7, #20]
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	785b      	ldrb	r3, [r3, #1]
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d3ad      	bcc.n	800d006 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800d0aa:	4b07      	ldr	r3, [pc, #28]	; (800d0c8 <SSD1306_Putc+0xfc>)
 800d0ac:	881a      	ldrh	r2, [r3, #0]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	4413      	add	r3, r2
 800d0b6:	b29a      	uxth	r2, r3
 800d0b8:	4b03      	ldr	r3, [pc, #12]	; (800d0c8 <SSD1306_Putc+0xfc>)
 800d0ba:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800d0bc:	79fb      	ldrb	r3, [r7, #7]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3718      	adds	r7, #24
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	20005830 	.word	0x20005830

0800d0cc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	60b9      	str	r1, [r7, #8]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800d0da:	e012      	b.n	800d102 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	79fa      	ldrb	r2, [r7, #7]
 800d0e2:	68b9      	ldr	r1, [r7, #8]
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7ff ff71 	bl	800cfcc <SSD1306_Putc>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d002      	beq.n	800d0fc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	e008      	b.n	800d10e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	3301      	adds	r3, #1
 800d100:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d1e8      	bne.n	800d0dc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	781b      	ldrb	r3, [r3, #0]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800d11a:	2000      	movs	r0, #0
 800d11c:	f7ff fec8 	bl	800ceb0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800d120:	f7ff fe98 	bl	800ce54 <SSD1306_UpdateScreen>
}
 800d124:	bf00      	nop
 800d126:	bd80      	pop	{r7, pc}

0800d128 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800d12e:	4b08      	ldr	r3, [pc, #32]	; (800d150 <ssd1306_I2C_Init+0x28>)
 800d130:	607b      	str	r3, [r7, #4]
	while(p>0)
 800d132:	e002      	b.n	800d13a <ssd1306_I2C_Init+0x12>
		p--;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	3b01      	subs	r3, #1
 800d138:	607b      	str	r3, [r7, #4]
	while(p>0)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d1f9      	bne.n	800d134 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800d140:	bf00      	nop
 800d142:	bf00      	nop
 800d144:	370c      	adds	r7, #12
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	0003d090 	.word	0x0003d090

0800d154 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800d154:	b590      	push	{r4, r7, lr}
 800d156:	b0c7      	sub	sp, #284	; 0x11c
 800d158:	af02      	add	r7, sp, #8
 800d15a:	4604      	mov	r4, r0
 800d15c:	4608      	mov	r0, r1
 800d15e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800d162:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800d166:	600a      	str	r2, [r1, #0]
 800d168:	4619      	mov	r1, r3
 800d16a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d16e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800d172:	4622      	mov	r2, r4
 800d174:	701a      	strb	r2, [r3, #0]
 800d176:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d17a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800d17e:	4602      	mov	r2, r0
 800d180:	701a      	strb	r2, [r3, #0]
 800d182:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d186:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d18a:	460a      	mov	r2, r1
 800d18c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800d18e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d196:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d19a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800d19e:	7812      	ldrb	r2, [r2, #0]
 800d1a0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800d1a8:	e015      	b.n	800d1d6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800d1aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800d1ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d1b2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800d1b6:	6812      	ldr	r2, [r2, #0]
 800d1b8:	441a      	add	r2, r3
 800d1ba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800d1be:	3301      	adds	r3, #1
 800d1c0:	7811      	ldrb	r1, [r2, #0]
 800d1c2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d1c6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d1ca:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800d1cc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800d1d6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800d1e0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800d1e4:	8812      	ldrh	r2, [r2, #0]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d8df      	bhi.n	800d1aa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 800d1ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d1ee:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	b299      	uxth	r1, r3
 800d1f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d1fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d1fe:	881b      	ldrh	r3, [r3, #0]
 800d200:	3301      	adds	r3, #1
 800d202:	b29b      	uxth	r3, r3
 800d204:	f107 020c 	add.w	r2, r7, #12
 800d208:	200a      	movs	r0, #10
 800d20a:	9000      	str	r0, [sp, #0]
 800d20c:	4803      	ldr	r0, [pc, #12]	; (800d21c <ssd1306_I2C_WriteMulti+0xc8>)
 800d20e:	f7f6 ff9b 	bl	8004148 <HAL_I2C_Master_Transmit>
}
 800d212:	bf00      	nop
 800d214:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd90      	pop	{r4, r7, pc}
 800d21c:	200004cc 	.word	0x200004cc

0800d220 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af02      	add	r7, sp, #8
 800d226:	4603      	mov	r3, r0
 800d228:	71fb      	strb	r3, [r7, #7]
 800d22a:	460b      	mov	r3, r1
 800d22c:	71bb      	strb	r3, [r7, #6]
 800d22e:	4613      	mov	r3, r2
 800d230:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800d232:	79bb      	ldrb	r3, [r7, #6]
 800d234:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800d236:	797b      	ldrb	r3, [r7, #5]
 800d238:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 800d23a:	79fb      	ldrb	r3, [r7, #7]
 800d23c:	b299      	uxth	r1, r3
 800d23e:	f107 020c 	add.w	r2, r7, #12
 800d242:	230a      	movs	r3, #10
 800d244:	9300      	str	r3, [sp, #0]
 800d246:	2302      	movs	r3, #2
 800d248:	4803      	ldr	r0, [pc, #12]	; (800d258 <ssd1306_I2C_Write+0x38>)
 800d24a:	f7f6 ff7d 	bl	8004148 <HAL_I2C_Master_Transmit>
}
 800d24e:	bf00      	nop
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	200004cc 	.word	0x200004cc

0800d25c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800d260:	2200      	movs	r2, #0
 800d262:	2108      	movs	r1, #8
 800d264:	4803      	ldr	r0, [pc, #12]	; (800d274 <SELECT+0x18>)
 800d266:	f7f6 fdf9 	bl	8003e5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800d26a:	2001      	movs	r0, #1
 800d26c:	f7f5 f9f8 	bl	8002660 <HAL_Delay>
}
 800d270:	bf00      	nop
 800d272:	bd80      	pop	{r7, pc}
 800d274:	40020800 	.word	0x40020800

0800d278 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800d27c:	2201      	movs	r2, #1
 800d27e:	2108      	movs	r1, #8
 800d280:	4803      	ldr	r0, [pc, #12]	; (800d290 <DESELECT+0x18>)
 800d282:	f7f6 fdeb 	bl	8003e5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800d286:	2001      	movs	r0, #1
 800d288:	f7f5 f9ea 	bl	8002660 <HAL_Delay>
}
 800d28c:	bf00      	nop
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	40020800 	.word	0x40020800

0800d294 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	4603      	mov	r3, r0
 800d29c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800d29e:	bf00      	nop
 800d2a0:	4b08      	ldr	r3, [pc, #32]	; (800d2c4 <SPI_TxByte+0x30>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	f003 0302 	and.w	r3, r3, #2
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d1f8      	bne.n	800d2a0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800d2ae:	1df9      	adds	r1, r7, #7
 800d2b0:	2364      	movs	r3, #100	; 0x64
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	4803      	ldr	r0, [pc, #12]	; (800d2c4 <SPI_TxByte+0x30>)
 800d2b6:	f7fa fe24 	bl	8007f02 <HAL_SPI_Transmit>
}
 800d2ba:	bf00      	nop
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	20000540 	.word	0x20000540

0800d2c8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800d2d4:	bf00      	nop
 800d2d6:	4b08      	ldr	r3, [pc, #32]	; (800d2f8 <SPI_TxBuffer+0x30>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	f003 0302 	and.w	r3, r3, #2
 800d2e0:	2b02      	cmp	r3, #2
 800d2e2:	d1f8      	bne.n	800d2d6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800d2e4:	887a      	ldrh	r2, [r7, #2]
 800d2e6:	2364      	movs	r3, #100	; 0x64
 800d2e8:	6879      	ldr	r1, [r7, #4]
 800d2ea:	4803      	ldr	r0, [pc, #12]	; (800d2f8 <SPI_TxBuffer+0x30>)
 800d2ec:	f7fa fe09 	bl	8007f02 <HAL_SPI_Transmit>
}
 800d2f0:	bf00      	nop
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	20000540 	.word	0x20000540

0800d2fc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800d302:	23ff      	movs	r3, #255	; 0xff
 800d304:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800d306:	bf00      	nop
 800d308:	4b09      	ldr	r3, [pc, #36]	; (800d330 <SPI_RxByte+0x34>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	f003 0302 	and.w	r3, r3, #2
 800d312:	2b02      	cmp	r3, #2
 800d314:	d1f8      	bne.n	800d308 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800d316:	1dba      	adds	r2, r7, #6
 800d318:	1df9      	adds	r1, r7, #7
 800d31a:	2364      	movs	r3, #100	; 0x64
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	2301      	movs	r3, #1
 800d320:	4803      	ldr	r0, [pc, #12]	; (800d330 <SPI_RxByte+0x34>)
 800d322:	f7fa ff2a 	bl	800817a <HAL_SPI_TransmitReceive>

	return data;
 800d326:	79bb      	ldrb	r3, [r7, #6]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3708      	adds	r7, #8
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	20000540 	.word	0x20000540

0800d334 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800d33c:	f7ff ffde 	bl	800d2fc <SPI_RxByte>
 800d340:	4603      	mov	r3, r0
 800d342:	461a      	mov	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	701a      	strb	r2, [r3, #0]
}
 800d348:	bf00      	nop
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800d356:	4b0a      	ldr	r3, [pc, #40]	; (800d380 <SD_ReadyWait+0x30>)
 800d358:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d35c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800d35e:	f7ff ffcd 	bl	800d2fc <SPI_RxByte>
 800d362:	4603      	mov	r3, r0
 800d364:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800d366:	79fb      	ldrb	r3, [r7, #7]
 800d368:	2bff      	cmp	r3, #255	; 0xff
 800d36a:	d003      	beq.n	800d374 <SD_ReadyWait+0x24>
 800d36c:	4b04      	ldr	r3, [pc, #16]	; (800d380 <SD_ReadyWait+0x30>)
 800d36e:	881b      	ldrh	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1f4      	bne.n	800d35e <SD_ReadyWait+0xe>

	return res;
 800d374:	79fb      	ldrb	r3, [r7, #7]
}
 800d376:	4618      	mov	r0, r3
 800d378:	3708      	adds	r7, #8
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	20000a12 	.word	0x20000a12

0800d384 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800d38a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800d38e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800d390:	f7ff ff72 	bl	800d278 <DESELECT>
	for(int i = 0; i < 10; i++)
 800d394:	2300      	movs	r3, #0
 800d396:	60bb      	str	r3, [r7, #8]
 800d398:	e005      	b.n	800d3a6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800d39a:	20ff      	movs	r0, #255	; 0xff
 800d39c:	f7ff ff7a 	bl	800d294 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	60bb      	str	r3, [r7, #8]
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	2b09      	cmp	r3, #9
 800d3aa:	ddf6      	ble.n	800d39a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800d3ac:	f7ff ff56 	bl	800d25c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800d3b0:	2340      	movs	r3, #64	; 0x40
 800d3b2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800d3c4:	2395      	movs	r3, #149	; 0x95
 800d3c6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800d3c8:	463b      	mov	r3, r7
 800d3ca:	2106      	movs	r1, #6
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7ff ff7b 	bl	800d2c8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800d3d2:	e002      	b.n	800d3da <SD_PowerOn+0x56>
	{
		cnt--;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800d3da:	f7ff ff8f 	bl	800d2fc <SPI_RxByte>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d002      	beq.n	800d3ea <SD_PowerOn+0x66>
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d1f4      	bne.n	800d3d4 <SD_PowerOn+0x50>
	}

	DESELECT();
 800d3ea:	f7ff ff45 	bl	800d278 <DESELECT>
	SPI_TxByte(0XFF);
 800d3ee:	20ff      	movs	r0, #255	; 0xff
 800d3f0:	f7ff ff50 	bl	800d294 <SPI_TxByte>

	PowerFlag = 1;
 800d3f4:	4b03      	ldr	r3, [pc, #12]	; (800d404 <SD_PowerOn+0x80>)
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	701a      	strb	r2, [r3, #0]
}
 800d3fa:	bf00      	nop
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	20005837 	.word	0x20005837

0800d408 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800d408:	b480      	push	{r7}
 800d40a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800d40c:	4b03      	ldr	r3, [pc, #12]	; (800d41c <SD_PowerOff+0x14>)
 800d40e:	2200      	movs	r2, #0
 800d410:	701a      	strb	r2, [r3, #0]
}
 800d412:	bf00      	nop
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr
 800d41c:	20005837 	.word	0x20005837

0800d420 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800d420:	b480      	push	{r7}
 800d422:	af00      	add	r7, sp, #0
	return PowerFlag;
 800d424:	4b03      	ldr	r3, [pc, #12]	; (800d434 <SD_CheckPower+0x14>)
 800d426:	781b      	ldrb	r3, [r3, #0]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr
 800d432:	bf00      	nop
 800d434:	20005837 	.word	0x20005837

0800d438 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800d442:	4b13      	ldr	r3, [pc, #76]	; (800d490 <SD_RxDataBlock+0x58>)
 800d444:	22c8      	movs	r2, #200	; 0xc8
 800d446:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800d448:	f7ff ff58 	bl	800d2fc <SPI_RxByte>
 800d44c:	4603      	mov	r3, r0
 800d44e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800d450:	7bfb      	ldrb	r3, [r7, #15]
 800d452:	2bff      	cmp	r3, #255	; 0xff
 800d454:	d103      	bne.n	800d45e <SD_RxDataBlock+0x26>
 800d456:	4b0e      	ldr	r3, [pc, #56]	; (800d490 <SD_RxDataBlock+0x58>)
 800d458:	881b      	ldrh	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1f4      	bne.n	800d448 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800d45e:	7bfb      	ldrb	r3, [r7, #15]
 800d460:	2bfe      	cmp	r3, #254	; 0xfe
 800d462:	d001      	beq.n	800d468 <SD_RxDataBlock+0x30>
 800d464:	2300      	movs	r3, #0
 800d466:	e00f      	b.n	800d488 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	607a      	str	r2, [r7, #4]
 800d46e:	4618      	mov	r0, r3
 800d470:	f7ff ff60 	bl	800d334 <SPI_RxBytePtr>
	} while(len--);
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	1e5a      	subs	r2, r3, #1
 800d478:	603a      	str	r2, [r7, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d1f4      	bne.n	800d468 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800d47e:	f7ff ff3d 	bl	800d2fc <SPI_RxByte>
	SPI_RxByte();
 800d482:	f7ff ff3b 	bl	800d2fc <SPI_RxByte>

	return TRUE;
 800d486:	2301      	movs	r3, #1
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	20000a11 	.word	0x20000a11

0800d494 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	460b      	mov	r3, r1
 800d49e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800d4a4:	f7ff ff54 	bl	800d350 <SD_ReadyWait>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2bff      	cmp	r3, #255	; 0xff
 800d4ac:	d001      	beq.n	800d4b2 <SD_TxDataBlock+0x1e>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	e02f      	b.n	800d512 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800d4b2:	78fb      	ldrb	r3, [r7, #3]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7ff feed 	bl	800d294 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800d4ba:	78fb      	ldrb	r3, [r7, #3]
 800d4bc:	2bfd      	cmp	r3, #253	; 0xfd
 800d4be:	d020      	beq.n	800d502 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800d4c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7ff feff 	bl	800d2c8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800d4ca:	f7ff ff17 	bl	800d2fc <SPI_RxByte>
		SPI_RxByte();
 800d4ce:	f7ff ff15 	bl	800d2fc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800d4d2:	e00b      	b.n	800d4ec <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800d4d4:	f7ff ff12 	bl	800d2fc <SPI_RxByte>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800d4dc:	7bfb      	ldrb	r3, [r7, #15]
 800d4de:	f003 031f 	and.w	r3, r3, #31
 800d4e2:	2b05      	cmp	r3, #5
 800d4e4:	d006      	beq.n	800d4f4 <SD_TxDataBlock+0x60>
			i++;
 800d4e6:	7bbb      	ldrb	r3, [r7, #14]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800d4ec:	7bbb      	ldrb	r3, [r7, #14]
 800d4ee:	2b40      	cmp	r3, #64	; 0x40
 800d4f0:	d9f0      	bls.n	800d4d4 <SD_TxDataBlock+0x40>
 800d4f2:	e000      	b.n	800d4f6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800d4f4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800d4f6:	bf00      	nop
 800d4f8:	f7ff ff00 	bl	800d2fc <SPI_RxByte>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d0fa      	beq.n	800d4f8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800d502:	7bfb      	ldrb	r3, [r7, #15]
 800d504:	f003 031f 	and.w	r3, r3, #31
 800d508:	2b05      	cmp	r3, #5
 800d50a:	d101      	bne.n	800d510 <SD_TxDataBlock+0x7c>
 800d50c:	2301      	movs	r3, #1
 800d50e:	e000      	b.n	800d512 <SD_TxDataBlock+0x7e>

	return FALSE;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b084      	sub	sp, #16
 800d51e:	af00      	add	r7, sp, #0
 800d520:	4603      	mov	r3, r0
 800d522:	6039      	str	r1, [r7, #0]
 800d524:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800d526:	f7ff ff13 	bl	800d350 <SD_ReadyWait>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2bff      	cmp	r3, #255	; 0xff
 800d52e:	d001      	beq.n	800d534 <SD_SendCmd+0x1a>
 800d530:	23ff      	movs	r3, #255	; 0xff
 800d532:	e042      	b.n	800d5ba <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800d534:	79fb      	ldrb	r3, [r7, #7]
 800d536:	4618      	mov	r0, r3
 800d538:	f7ff feac 	bl	800d294 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	0e1b      	lsrs	r3, r3, #24
 800d540:	b2db      	uxtb	r3, r3
 800d542:	4618      	mov	r0, r3
 800d544:	f7ff fea6 	bl	800d294 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	0c1b      	lsrs	r3, r3, #16
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	4618      	mov	r0, r3
 800d550:	f7ff fea0 	bl	800d294 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	0a1b      	lsrs	r3, r3, #8
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7ff fe9a 	bl	800d294 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	b2db      	uxtb	r3, r3
 800d564:	4618      	mov	r0, r3
 800d566:	f7ff fe95 	bl	800d294 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800d56a:	79fb      	ldrb	r3, [r7, #7]
 800d56c:	2b40      	cmp	r3, #64	; 0x40
 800d56e:	d102      	bne.n	800d576 <SD_SendCmd+0x5c>
 800d570:	2395      	movs	r3, #149	; 0x95
 800d572:	73fb      	strb	r3, [r7, #15]
 800d574:	e007      	b.n	800d586 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800d576:	79fb      	ldrb	r3, [r7, #7]
 800d578:	2b48      	cmp	r3, #72	; 0x48
 800d57a:	d102      	bne.n	800d582 <SD_SendCmd+0x68>
 800d57c:	2387      	movs	r3, #135	; 0x87
 800d57e:	73fb      	strb	r3, [r7, #15]
 800d580:	e001      	b.n	800d586 <SD_SendCmd+0x6c>
	else crc = 1;
 800d582:	2301      	movs	r3, #1
 800d584:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800d586:	7bfb      	ldrb	r3, [r7, #15]
 800d588:	4618      	mov	r0, r3
 800d58a:	f7ff fe83 	bl	800d294 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800d58e:	79fb      	ldrb	r3, [r7, #7]
 800d590:	2b4c      	cmp	r3, #76	; 0x4c
 800d592:	d101      	bne.n	800d598 <SD_SendCmd+0x7e>
 800d594:	f7ff feb2 	bl	800d2fc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800d598:	230a      	movs	r3, #10
 800d59a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800d59c:	f7ff feae 	bl	800d2fc <SPI_RxByte>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800d5a4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	da05      	bge.n	800d5b8 <SD_SendCmd+0x9e>
 800d5ac:	7bbb      	ldrb	r3, [r7, #14]
 800d5ae:	3b01      	subs	r3, #1
 800d5b0:	73bb      	strb	r3, [r7, #14]
 800d5b2:	7bbb      	ldrb	r3, [r7, #14]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d1f1      	bne.n	800d59c <SD_SendCmd+0x82>

	return res;
 800d5b8:	7b7b      	ldrb	r3, [r7, #13]
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
	...

0800d5c4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800d5c4:	b590      	push	{r4, r7, lr}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800d5ce:	79fb      	ldrb	r3, [r7, #7]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d001      	beq.n	800d5d8 <SD_disk_initialize+0x14>
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e0d1      	b.n	800d77c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800d5d8:	4b6a      	ldr	r3, [pc, #424]	; (800d784 <SD_disk_initialize+0x1c0>)
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	f003 0302 	and.w	r3, r3, #2
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d003      	beq.n	800d5ee <SD_disk_initialize+0x2a>
 800d5e6:	4b67      	ldr	r3, [pc, #412]	; (800d784 <SD_disk_initialize+0x1c0>)
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	e0c6      	b.n	800d77c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800d5ee:	f7ff fec9 	bl	800d384 <SD_PowerOn>

	/* slave select */
	SELECT();
 800d5f2:	f7ff fe33 	bl	800d25c <SELECT>

	/* check disk type */
	type = 0;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	2040      	movs	r0, #64	; 0x40
 800d5fe:	f7ff ff8c 	bl	800d51a <SD_SendCmd>
 800d602:	4603      	mov	r3, r0
 800d604:	2b01      	cmp	r3, #1
 800d606:	f040 80a1 	bne.w	800d74c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800d60a:	4b5f      	ldr	r3, [pc, #380]	; (800d788 <SD_disk_initialize+0x1c4>)
 800d60c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d610:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800d612:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d616:	2048      	movs	r0, #72	; 0x48
 800d618:	f7ff ff7f 	bl	800d51a <SD_SendCmd>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d155      	bne.n	800d6ce <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800d622:	2300      	movs	r3, #0
 800d624:	73fb      	strb	r3, [r7, #15]
 800d626:	e00c      	b.n	800d642 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800d628:	7bfc      	ldrb	r4, [r7, #15]
 800d62a:	f7ff fe67 	bl	800d2fc <SPI_RxByte>
 800d62e:	4603      	mov	r3, r0
 800d630:	461a      	mov	r2, r3
 800d632:	f104 0310 	add.w	r3, r4, #16
 800d636:	443b      	add	r3, r7
 800d638:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
 800d63e:	3301      	adds	r3, #1
 800d640:	73fb      	strb	r3, [r7, #15]
 800d642:	7bfb      	ldrb	r3, [r7, #15]
 800d644:	2b03      	cmp	r3, #3
 800d646:	d9ef      	bls.n	800d628 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800d648:	7abb      	ldrb	r3, [r7, #10]
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d17e      	bne.n	800d74c <SD_disk_initialize+0x188>
 800d64e:	7afb      	ldrb	r3, [r7, #11]
 800d650:	2baa      	cmp	r3, #170	; 0xaa
 800d652:	d17b      	bne.n	800d74c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800d654:	2100      	movs	r1, #0
 800d656:	2077      	movs	r0, #119	; 0x77
 800d658:	f7ff ff5f 	bl	800d51a <SD_SendCmd>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d807      	bhi.n	800d672 <SD_disk_initialize+0xae>
 800d662:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d666:	2069      	movs	r0, #105	; 0x69
 800d668:	f7ff ff57 	bl	800d51a <SD_SendCmd>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d004      	beq.n	800d67c <SD_disk_initialize+0xb8>
				} while (Timer1);
 800d672:	4b45      	ldr	r3, [pc, #276]	; (800d788 <SD_disk_initialize+0x1c4>)
 800d674:	881b      	ldrh	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1ec      	bne.n	800d654 <SD_disk_initialize+0x90>
 800d67a:	e000      	b.n	800d67e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800d67c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800d67e:	4b42      	ldr	r3, [pc, #264]	; (800d788 <SD_disk_initialize+0x1c4>)
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d062      	beq.n	800d74c <SD_disk_initialize+0x188>
 800d686:	2100      	movs	r1, #0
 800d688:	207a      	movs	r0, #122	; 0x7a
 800d68a:	f7ff ff46 	bl	800d51a <SD_SendCmd>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d15b      	bne.n	800d74c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800d694:	2300      	movs	r3, #0
 800d696:	73fb      	strb	r3, [r7, #15]
 800d698:	e00c      	b.n	800d6b4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800d69a:	7bfc      	ldrb	r4, [r7, #15]
 800d69c:	f7ff fe2e 	bl	800d2fc <SPI_RxByte>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	f104 0310 	add.w	r3, r4, #16
 800d6a8:	443b      	add	r3, r7
 800d6aa:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800d6ae:	7bfb      	ldrb	r3, [r7, #15]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	73fb      	strb	r3, [r7, #15]
 800d6b4:	7bfb      	ldrb	r3, [r7, #15]
 800d6b6:	2b03      	cmp	r3, #3
 800d6b8:	d9ef      	bls.n	800d69a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800d6ba:	7a3b      	ldrb	r3, [r7, #8]
 800d6bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d001      	beq.n	800d6c8 <SD_disk_initialize+0x104>
 800d6c4:	230c      	movs	r3, #12
 800d6c6:	e000      	b.n	800d6ca <SD_disk_initialize+0x106>
 800d6c8:	2304      	movs	r3, #4
 800d6ca:	73bb      	strb	r3, [r7, #14]
 800d6cc:	e03e      	b.n	800d74c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	2077      	movs	r0, #119	; 0x77
 800d6d2:	f7ff ff22 	bl	800d51a <SD_SendCmd>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d808      	bhi.n	800d6ee <SD_disk_initialize+0x12a>
 800d6dc:	2100      	movs	r1, #0
 800d6de:	2069      	movs	r0, #105	; 0x69
 800d6e0:	f7ff ff1b 	bl	800d51a <SD_SendCmd>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d801      	bhi.n	800d6ee <SD_disk_initialize+0x12a>
 800d6ea:	2302      	movs	r3, #2
 800d6ec:	e000      	b.n	800d6f0 <SD_disk_initialize+0x12c>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800d6f2:	7bbb      	ldrb	r3, [r7, #14]
 800d6f4:	2b02      	cmp	r3, #2
 800d6f6:	d10e      	bne.n	800d716 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800d6f8:	2100      	movs	r1, #0
 800d6fa:	2077      	movs	r0, #119	; 0x77
 800d6fc:	f7ff ff0d 	bl	800d51a <SD_SendCmd>
 800d700:	4603      	mov	r3, r0
 800d702:	2b01      	cmp	r3, #1
 800d704:	d80e      	bhi.n	800d724 <SD_disk_initialize+0x160>
 800d706:	2100      	movs	r1, #0
 800d708:	2069      	movs	r0, #105	; 0x69
 800d70a:	f7ff ff06 	bl	800d51a <SD_SendCmd>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d107      	bne.n	800d724 <SD_disk_initialize+0x160>
 800d714:	e00c      	b.n	800d730 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800d716:	2100      	movs	r1, #0
 800d718:	2041      	movs	r0, #65	; 0x41
 800d71a:	f7ff fefe 	bl	800d51a <SD_SendCmd>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d004      	beq.n	800d72e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800d724:	4b18      	ldr	r3, [pc, #96]	; (800d788 <SD_disk_initialize+0x1c4>)
 800d726:	881b      	ldrh	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d1e2      	bne.n	800d6f2 <SD_disk_initialize+0x12e>
 800d72c:	e000      	b.n	800d730 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800d72e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800d730:	4b15      	ldr	r3, [pc, #84]	; (800d788 <SD_disk_initialize+0x1c4>)
 800d732:	881b      	ldrh	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d007      	beq.n	800d748 <SD_disk_initialize+0x184>
 800d738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d73c:	2050      	movs	r0, #80	; 0x50
 800d73e:	f7ff feec 	bl	800d51a <SD_SendCmd>
 800d742:	4603      	mov	r3, r0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <SD_disk_initialize+0x188>
 800d748:	2300      	movs	r3, #0
 800d74a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800d74c:	4a0f      	ldr	r2, [pc, #60]	; (800d78c <SD_disk_initialize+0x1c8>)
 800d74e:	7bbb      	ldrb	r3, [r7, #14]
 800d750:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800d752:	f7ff fd91 	bl	800d278 <DESELECT>
	SPI_RxByte();
 800d756:	f7ff fdd1 	bl	800d2fc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800d75a:	7bbb      	ldrb	r3, [r7, #14]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d008      	beq.n	800d772 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800d760:	4b08      	ldr	r3, [pc, #32]	; (800d784 <SD_disk_initialize+0x1c0>)
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	b2db      	uxtb	r3, r3
 800d766:	f023 0301 	bic.w	r3, r3, #1
 800d76a:	b2da      	uxtb	r2, r3
 800d76c:	4b05      	ldr	r3, [pc, #20]	; (800d784 <SD_disk_initialize+0x1c0>)
 800d76e:	701a      	strb	r2, [r3, #0]
 800d770:	e001      	b.n	800d776 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800d772:	f7ff fe49 	bl	800d408 <SD_PowerOff>
	}

	return Stat;
 800d776:	4b03      	ldr	r3, [pc, #12]	; (800d784 <SD_disk_initialize+0x1c0>)
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	b2db      	uxtb	r3, r3
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3714      	adds	r7, #20
 800d780:	46bd      	mov	sp, r7
 800d782:	bd90      	pop	{r4, r7, pc}
 800d784:	2000002c 	.word	0x2000002c
 800d788:	20000a11 	.word	0x20000a11
 800d78c:	20005836 	.word	0x20005836

0800d790 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	4603      	mov	r3, r0
 800d798:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800d79a:	79fb      	ldrb	r3, [r7, #7]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d001      	beq.n	800d7a4 <SD_disk_status+0x14>
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e002      	b.n	800d7aa <SD_disk_status+0x1a>
	return Stat;
 800d7a4:	4b04      	ldr	r3, [pc, #16]	; (800d7b8 <SD_disk_status+0x28>)
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	b2db      	uxtb	r3, r3
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	370c      	adds	r7, #12
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	2000002c 	.word	0x2000002c

0800d7bc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b084      	sub	sp, #16
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	607a      	str	r2, [r7, #4]
 800d7c6:	603b      	str	r3, [r7, #0]
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d102      	bne.n	800d7d8 <SD_disk_read+0x1c>
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d101      	bne.n	800d7dc <SD_disk_read+0x20>
 800d7d8:	2304      	movs	r3, #4
 800d7da:	e051      	b.n	800d880 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d7dc:	4b2a      	ldr	r3, [pc, #168]	; (800d888 <SD_disk_read+0xcc>)
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	f003 0301 	and.w	r3, r3, #1
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d001      	beq.n	800d7ee <SD_disk_read+0x32>
 800d7ea:	2303      	movs	r3, #3
 800d7ec:	e048      	b.n	800d880 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800d7ee:	4b27      	ldr	r3, [pc, #156]	; (800d88c <SD_disk_read+0xd0>)
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	f003 0304 	and.w	r3, r3, #4
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d102      	bne.n	800d800 <SD_disk_read+0x44>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	025b      	lsls	r3, r3, #9
 800d7fe:	607b      	str	r3, [r7, #4]

	SELECT();
 800d800:	f7ff fd2c 	bl	800d25c <SELECT>

	if (count == 1)
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	2b01      	cmp	r3, #1
 800d808:	d111      	bne.n	800d82e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800d80a:	6879      	ldr	r1, [r7, #4]
 800d80c:	2051      	movs	r0, #81	; 0x51
 800d80e:	f7ff fe84 	bl	800d51a <SD_SendCmd>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d129      	bne.n	800d86c <SD_disk_read+0xb0>
 800d818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d81c:	68b8      	ldr	r0, [r7, #8]
 800d81e:	f7ff fe0b 	bl	800d438 <SD_RxDataBlock>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d021      	beq.n	800d86c <SD_disk_read+0xb0>
 800d828:	2300      	movs	r3, #0
 800d82a:	603b      	str	r3, [r7, #0]
 800d82c:	e01e      	b.n	800d86c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800d82e:	6879      	ldr	r1, [r7, #4]
 800d830:	2052      	movs	r0, #82	; 0x52
 800d832:	f7ff fe72 	bl	800d51a <SD_SendCmd>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d117      	bne.n	800d86c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800d83c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d840:	68b8      	ldr	r0, [r7, #8]
 800d842:	f7ff fdf9 	bl	800d438 <SD_RxDataBlock>
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00a      	beq.n	800d862 <SD_disk_read+0xa6>
				buff += 512;
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d852:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	3b01      	subs	r3, #1
 800d858:	603b      	str	r3, [r7, #0]
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1ed      	bne.n	800d83c <SD_disk_read+0x80>
 800d860:	e000      	b.n	800d864 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800d862:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800d864:	2100      	movs	r1, #0
 800d866:	204c      	movs	r0, #76	; 0x4c
 800d868:	f7ff fe57 	bl	800d51a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800d86c:	f7ff fd04 	bl	800d278 <DESELECT>
	SPI_RxByte();
 800d870:	f7ff fd44 	bl	800d2fc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	bf14      	ite	ne
 800d87a:	2301      	movne	r3, #1
 800d87c:	2300      	moveq	r3, #0
 800d87e:	b2db      	uxtb	r3, r3
}
 800d880:	4618      	mov	r0, r3
 800d882:	3710      	adds	r7, #16
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	2000002c 	.word	0x2000002c
 800d88c:	20005836 	.word	0x20005836

0800d890 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	60b9      	str	r1, [r7, #8]
 800d898:	607a      	str	r2, [r7, #4]
 800d89a:	603b      	str	r3, [r7, #0]
 800d89c:	4603      	mov	r3, r0
 800d89e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800d8a0:	7bfb      	ldrb	r3, [r7, #15]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d102      	bne.n	800d8ac <SD_disk_write+0x1c>
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d101      	bne.n	800d8b0 <SD_disk_write+0x20>
 800d8ac:	2304      	movs	r3, #4
 800d8ae:	e06b      	b.n	800d988 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d8b0:	4b37      	ldr	r3, [pc, #220]	; (800d990 <SD_disk_write+0x100>)
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	f003 0301 	and.w	r3, r3, #1
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d001      	beq.n	800d8c2 <SD_disk_write+0x32>
 800d8be:	2303      	movs	r3, #3
 800d8c0:	e062      	b.n	800d988 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800d8c2:	4b33      	ldr	r3, [pc, #204]	; (800d990 <SD_disk_write+0x100>)
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	f003 0304 	and.w	r3, r3, #4
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d001      	beq.n	800d8d4 <SD_disk_write+0x44>
 800d8d0:	2302      	movs	r3, #2
 800d8d2:	e059      	b.n	800d988 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800d8d4:	4b2f      	ldr	r3, [pc, #188]	; (800d994 <SD_disk_write+0x104>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	f003 0304 	and.w	r3, r3, #4
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d102      	bne.n	800d8e6 <SD_disk_write+0x56>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	025b      	lsls	r3, r3, #9
 800d8e4:	607b      	str	r3, [r7, #4]

	SELECT();
 800d8e6:	f7ff fcb9 	bl	800d25c <SELECT>

	if (count == 1)
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d110      	bne.n	800d912 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800d8f0:	6879      	ldr	r1, [r7, #4]
 800d8f2:	2058      	movs	r0, #88	; 0x58
 800d8f4:	f7ff fe11 	bl	800d51a <SD_SendCmd>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d13a      	bne.n	800d974 <SD_disk_write+0xe4>
 800d8fe:	21fe      	movs	r1, #254	; 0xfe
 800d900:	68b8      	ldr	r0, [r7, #8]
 800d902:	f7ff fdc7 	bl	800d494 <SD_TxDataBlock>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d033      	beq.n	800d974 <SD_disk_write+0xe4>
			count = 0;
 800d90c:	2300      	movs	r3, #0
 800d90e:	603b      	str	r3, [r7, #0]
 800d910:	e030      	b.n	800d974 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800d912:	4b20      	ldr	r3, [pc, #128]	; (800d994 <SD_disk_write+0x104>)
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	f003 0302 	and.w	r3, r3, #2
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d007      	beq.n	800d92e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800d91e:	2100      	movs	r1, #0
 800d920:	2077      	movs	r0, #119	; 0x77
 800d922:	f7ff fdfa 	bl	800d51a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800d926:	6839      	ldr	r1, [r7, #0]
 800d928:	2057      	movs	r0, #87	; 0x57
 800d92a:	f7ff fdf6 	bl	800d51a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800d92e:	6879      	ldr	r1, [r7, #4]
 800d930:	2059      	movs	r0, #89	; 0x59
 800d932:	f7ff fdf2 	bl	800d51a <SD_SendCmd>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d11b      	bne.n	800d974 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800d93c:	21fc      	movs	r1, #252	; 0xfc
 800d93e:	68b8      	ldr	r0, [r7, #8]
 800d940:	f7ff fda8 	bl	800d494 <SD_TxDataBlock>
 800d944:	4603      	mov	r3, r0
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00a      	beq.n	800d960 <SD_disk_write+0xd0>
				buff += 512;
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d950:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	3b01      	subs	r3, #1
 800d956:	603b      	str	r3, [r7, #0]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1ee      	bne.n	800d93c <SD_disk_write+0xac>
 800d95e:	e000      	b.n	800d962 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800d960:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800d962:	21fd      	movs	r1, #253	; 0xfd
 800d964:	2000      	movs	r0, #0
 800d966:	f7ff fd95 	bl	800d494 <SD_TxDataBlock>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d101      	bne.n	800d974 <SD_disk_write+0xe4>
			{
				count = 1;
 800d970:	2301      	movs	r3, #1
 800d972:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800d974:	f7ff fc80 	bl	800d278 <DESELECT>
	SPI_RxByte();
 800d978:	f7ff fcc0 	bl	800d2fc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	bf14      	ite	ne
 800d982:	2301      	movne	r3, #1
 800d984:	2300      	moveq	r3, #0
 800d986:	b2db      	uxtb	r3, r3
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	2000002c 	.word	0x2000002c
 800d994:	20005836 	.word	0x20005836

0800d998 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800d998:	b590      	push	{r4, r7, lr}
 800d99a:	b08b      	sub	sp, #44	; 0x2c
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	4603      	mov	r3, r0
 800d9a0:	603a      	str	r2, [r7, #0]
 800d9a2:	71fb      	strb	r3, [r7, #7]
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800d9ac:	79fb      	ldrb	r3, [r7, #7]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d001      	beq.n	800d9b6 <SD_disk_ioctl+0x1e>
 800d9b2:	2304      	movs	r3, #4
 800d9b4:	e115      	b.n	800dbe2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800d9bc:	79bb      	ldrb	r3, [r7, #6]
 800d9be:	2b05      	cmp	r3, #5
 800d9c0:	d124      	bne.n	800da0c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800d9c2:	6a3b      	ldr	r3, [r7, #32]
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	2b02      	cmp	r3, #2
 800d9c8:	d012      	beq.n	800d9f0 <SD_disk_ioctl+0x58>
 800d9ca:	2b02      	cmp	r3, #2
 800d9cc:	dc1a      	bgt.n	800da04 <SD_disk_ioctl+0x6c>
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d002      	beq.n	800d9d8 <SD_disk_ioctl+0x40>
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d006      	beq.n	800d9e4 <SD_disk_ioctl+0x4c>
 800d9d6:	e015      	b.n	800da04 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800d9d8:	f7ff fd16 	bl	800d408 <SD_PowerOff>
			res = RES_OK;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800d9e2:	e0fc      	b.n	800dbde <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800d9e4:	f7ff fcce 	bl	800d384 <SD_PowerOn>
			res = RES_OK;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800d9ee:	e0f6      	b.n	800dbde <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800d9f0:	6a3b      	ldr	r3, [r7, #32]
 800d9f2:	1c5c      	adds	r4, r3, #1
 800d9f4:	f7ff fd14 	bl	800d420 <SD_CheckPower>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800da02:	e0ec      	b.n	800dbde <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800da04:	2304      	movs	r3, #4
 800da06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da0a:	e0e8      	b.n	800dbde <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800da0c:	4b77      	ldr	r3, [pc, #476]	; (800dbec <SD_disk_ioctl+0x254>)
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	b2db      	uxtb	r3, r3
 800da12:	f003 0301 	and.w	r3, r3, #1
 800da16:	2b00      	cmp	r3, #0
 800da18:	d001      	beq.n	800da1e <SD_disk_ioctl+0x86>
 800da1a:	2303      	movs	r3, #3
 800da1c:	e0e1      	b.n	800dbe2 <SD_disk_ioctl+0x24a>

		SELECT();
 800da1e:	f7ff fc1d 	bl	800d25c <SELECT>

		switch (ctrl)
 800da22:	79bb      	ldrb	r3, [r7, #6]
 800da24:	2b0d      	cmp	r3, #13
 800da26:	f200 80cb 	bhi.w	800dbc0 <SD_disk_ioctl+0x228>
 800da2a:	a201      	add	r2, pc, #4	; (adr r2, 800da30 <SD_disk_ioctl+0x98>)
 800da2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da30:	0800db2b 	.word	0x0800db2b
 800da34:	0800da69 	.word	0x0800da69
 800da38:	0800db1b 	.word	0x0800db1b
 800da3c:	0800dbc1 	.word	0x0800dbc1
 800da40:	0800dbc1 	.word	0x0800dbc1
 800da44:	0800dbc1 	.word	0x0800dbc1
 800da48:	0800dbc1 	.word	0x0800dbc1
 800da4c:	0800dbc1 	.word	0x0800dbc1
 800da50:	0800dbc1 	.word	0x0800dbc1
 800da54:	0800dbc1 	.word	0x0800dbc1
 800da58:	0800dbc1 	.word	0x0800dbc1
 800da5c:	0800db3d 	.word	0x0800db3d
 800da60:	0800db61 	.word	0x0800db61
 800da64:	0800db85 	.word	0x0800db85
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800da68:	2100      	movs	r1, #0
 800da6a:	2049      	movs	r0, #73	; 0x49
 800da6c:	f7ff fd55 	bl	800d51a <SD_SendCmd>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	f040 80a8 	bne.w	800dbc8 <SD_disk_ioctl+0x230>
 800da78:	f107 030c 	add.w	r3, r7, #12
 800da7c:	2110      	movs	r1, #16
 800da7e:	4618      	mov	r0, r3
 800da80:	f7ff fcda 	bl	800d438 <SD_RxDataBlock>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	f000 809e 	beq.w	800dbc8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800da8c:	7b3b      	ldrb	r3, [r7, #12]
 800da8e:	099b      	lsrs	r3, r3, #6
 800da90:	b2db      	uxtb	r3, r3
 800da92:	2b01      	cmp	r3, #1
 800da94:	d10e      	bne.n	800dab4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800da96:	7d7b      	ldrb	r3, [r7, #21]
 800da98:	b29a      	uxth	r2, r3
 800da9a:	7d3b      	ldrb	r3, [r7, #20]
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	021b      	lsls	r3, r3, #8
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	4413      	add	r3, r2
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	3301      	adds	r3, #1
 800daa8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800daaa:	8bfb      	ldrh	r3, [r7, #30]
 800daac:	029a      	lsls	r2, r3, #10
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	601a      	str	r2, [r3, #0]
 800dab2:	e02e      	b.n	800db12 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800dab4:	7c7b      	ldrb	r3, [r7, #17]
 800dab6:	f003 030f 	and.w	r3, r3, #15
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	7dbb      	ldrb	r3, [r7, #22]
 800dabe:	09db      	lsrs	r3, r3, #7
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	4413      	add	r3, r2
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	7d7b      	ldrb	r3, [r7, #21]
 800dac8:	005b      	lsls	r3, r3, #1
 800daca:	b2db      	uxtb	r3, r3
 800dacc:	f003 0306 	and.w	r3, r3, #6
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	4413      	add	r3, r2
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	3302      	adds	r3, #2
 800dad8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800dadc:	7d3b      	ldrb	r3, [r7, #20]
 800dade:	099b      	lsrs	r3, r3, #6
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	7cfb      	ldrb	r3, [r7, #19]
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	b29b      	uxth	r3, r3
 800daec:	4413      	add	r3, r2
 800daee:	b29a      	uxth	r2, r3
 800daf0:	7cbb      	ldrb	r3, [r7, #18]
 800daf2:	029b      	lsls	r3, r3, #10
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	4413      	add	r3, r2
 800dafe:	b29b      	uxth	r3, r3
 800db00:	3301      	adds	r3, #1
 800db02:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800db04:	8bfa      	ldrh	r2, [r7, #30]
 800db06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db0a:	3b09      	subs	r3, #9
 800db0c:	409a      	lsls	r2, r3
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800db12:	2300      	movs	r3, #0
 800db14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800db18:	e056      	b.n	800dbc8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db20:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800db28:	e055      	b.n	800dbd6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800db2a:	f7ff fc11 	bl	800d350 <SD_ReadyWait>
 800db2e:	4603      	mov	r3, r0
 800db30:	2bff      	cmp	r3, #255	; 0xff
 800db32:	d14b      	bne.n	800dbcc <SD_disk_ioctl+0x234>
 800db34:	2300      	movs	r3, #0
 800db36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800db3a:	e047      	b.n	800dbcc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800db3c:	2100      	movs	r1, #0
 800db3e:	2049      	movs	r0, #73	; 0x49
 800db40:	f7ff fceb 	bl	800d51a <SD_SendCmd>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d142      	bne.n	800dbd0 <SD_disk_ioctl+0x238>
 800db4a:	2110      	movs	r1, #16
 800db4c:	6a38      	ldr	r0, [r7, #32]
 800db4e:	f7ff fc73 	bl	800d438 <SD_RxDataBlock>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d03b      	beq.n	800dbd0 <SD_disk_ioctl+0x238>
 800db58:	2300      	movs	r3, #0
 800db5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800db5e:	e037      	b.n	800dbd0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800db60:	2100      	movs	r1, #0
 800db62:	204a      	movs	r0, #74	; 0x4a
 800db64:	f7ff fcd9 	bl	800d51a <SD_SendCmd>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d132      	bne.n	800dbd4 <SD_disk_ioctl+0x23c>
 800db6e:	2110      	movs	r1, #16
 800db70:	6a38      	ldr	r0, [r7, #32]
 800db72:	f7ff fc61 	bl	800d438 <SD_RxDataBlock>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d02b      	beq.n	800dbd4 <SD_disk_ioctl+0x23c>
 800db7c:	2300      	movs	r3, #0
 800db7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800db82:	e027      	b.n	800dbd4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800db84:	2100      	movs	r1, #0
 800db86:	207a      	movs	r0, #122	; 0x7a
 800db88:	f7ff fcc7 	bl	800d51a <SD_SendCmd>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d116      	bne.n	800dbc0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800db92:	2300      	movs	r3, #0
 800db94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db98:	e00b      	b.n	800dbb2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800db9a:	6a3c      	ldr	r4, [r7, #32]
 800db9c:	1c63      	adds	r3, r4, #1
 800db9e:	623b      	str	r3, [r7, #32]
 800dba0:	f7ff fbac 	bl	800d2fc <SPI_RxByte>
 800dba4:	4603      	mov	r3, r0
 800dba6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800dba8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbac:	3301      	adds	r3, #1
 800dbae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dbb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbb6:	2b03      	cmp	r3, #3
 800dbb8:	d9ef      	bls.n	800db9a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800dbc0:	2304      	movs	r3, #4
 800dbc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dbc6:	e006      	b.n	800dbd6 <SD_disk_ioctl+0x23e>
			break;
 800dbc8:	bf00      	nop
 800dbca:	e004      	b.n	800dbd6 <SD_disk_ioctl+0x23e>
			break;
 800dbcc:	bf00      	nop
 800dbce:	e002      	b.n	800dbd6 <SD_disk_ioctl+0x23e>
			break;
 800dbd0:	bf00      	nop
 800dbd2:	e000      	b.n	800dbd6 <SD_disk_ioctl+0x23e>
			break;
 800dbd4:	bf00      	nop
		}

		DESELECT();
 800dbd6:	f7ff fb4f 	bl	800d278 <DESELECT>
		SPI_RxByte();
 800dbda:	f7ff fb8f 	bl	800d2fc <SPI_RxByte>
	}

	return res;
 800dbde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	372c      	adds	r7, #44	; 0x2c
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd90      	pop	{r4, r7, pc}
 800dbea:	bf00      	nop
 800dbec:	2000002c 	.word	0x2000002c

0800dbf0 <__cvt>:
 800dbf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbf4:	ec55 4b10 	vmov	r4, r5, d0
 800dbf8:	2d00      	cmp	r5, #0
 800dbfa:	460e      	mov	r6, r1
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	462b      	mov	r3, r5
 800dc00:	bfbb      	ittet	lt
 800dc02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dc06:	461d      	movlt	r5, r3
 800dc08:	2300      	movge	r3, #0
 800dc0a:	232d      	movlt	r3, #45	; 0x2d
 800dc0c:	700b      	strb	r3, [r1, #0]
 800dc0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dc14:	4691      	mov	r9, r2
 800dc16:	f023 0820 	bic.w	r8, r3, #32
 800dc1a:	bfbc      	itt	lt
 800dc1c:	4622      	movlt	r2, r4
 800dc1e:	4614      	movlt	r4, r2
 800dc20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dc24:	d005      	beq.n	800dc32 <__cvt+0x42>
 800dc26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dc2a:	d100      	bne.n	800dc2e <__cvt+0x3e>
 800dc2c:	3601      	adds	r6, #1
 800dc2e:	2102      	movs	r1, #2
 800dc30:	e000      	b.n	800dc34 <__cvt+0x44>
 800dc32:	2103      	movs	r1, #3
 800dc34:	ab03      	add	r3, sp, #12
 800dc36:	9301      	str	r3, [sp, #4]
 800dc38:	ab02      	add	r3, sp, #8
 800dc3a:	9300      	str	r3, [sp, #0]
 800dc3c:	ec45 4b10 	vmov	d0, r4, r5
 800dc40:	4653      	mov	r3, sl
 800dc42:	4632      	mov	r2, r6
 800dc44:	f000 feb8 	bl	800e9b8 <_dtoa_r>
 800dc48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dc4c:	4607      	mov	r7, r0
 800dc4e:	d102      	bne.n	800dc56 <__cvt+0x66>
 800dc50:	f019 0f01 	tst.w	r9, #1
 800dc54:	d022      	beq.n	800dc9c <__cvt+0xac>
 800dc56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dc5a:	eb07 0906 	add.w	r9, r7, r6
 800dc5e:	d110      	bne.n	800dc82 <__cvt+0x92>
 800dc60:	783b      	ldrb	r3, [r7, #0]
 800dc62:	2b30      	cmp	r3, #48	; 0x30
 800dc64:	d10a      	bne.n	800dc7c <__cvt+0x8c>
 800dc66:	2200      	movs	r2, #0
 800dc68:	2300      	movs	r3, #0
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	4629      	mov	r1, r5
 800dc6e:	f7f2 ff4b 	bl	8000b08 <__aeabi_dcmpeq>
 800dc72:	b918      	cbnz	r0, 800dc7c <__cvt+0x8c>
 800dc74:	f1c6 0601 	rsb	r6, r6, #1
 800dc78:	f8ca 6000 	str.w	r6, [sl]
 800dc7c:	f8da 3000 	ldr.w	r3, [sl]
 800dc80:	4499      	add	r9, r3
 800dc82:	2200      	movs	r2, #0
 800dc84:	2300      	movs	r3, #0
 800dc86:	4620      	mov	r0, r4
 800dc88:	4629      	mov	r1, r5
 800dc8a:	f7f2 ff3d 	bl	8000b08 <__aeabi_dcmpeq>
 800dc8e:	b108      	cbz	r0, 800dc94 <__cvt+0xa4>
 800dc90:	f8cd 900c 	str.w	r9, [sp, #12]
 800dc94:	2230      	movs	r2, #48	; 0x30
 800dc96:	9b03      	ldr	r3, [sp, #12]
 800dc98:	454b      	cmp	r3, r9
 800dc9a:	d307      	bcc.n	800dcac <__cvt+0xbc>
 800dc9c:	9b03      	ldr	r3, [sp, #12]
 800dc9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dca0:	1bdb      	subs	r3, r3, r7
 800dca2:	4638      	mov	r0, r7
 800dca4:	6013      	str	r3, [r2, #0]
 800dca6:	b004      	add	sp, #16
 800dca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcac:	1c59      	adds	r1, r3, #1
 800dcae:	9103      	str	r1, [sp, #12]
 800dcb0:	701a      	strb	r2, [r3, #0]
 800dcb2:	e7f0      	b.n	800dc96 <__cvt+0xa6>

0800dcb4 <__exponent>:
 800dcb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2900      	cmp	r1, #0
 800dcba:	bfb8      	it	lt
 800dcbc:	4249      	neglt	r1, r1
 800dcbe:	f803 2b02 	strb.w	r2, [r3], #2
 800dcc2:	bfb4      	ite	lt
 800dcc4:	222d      	movlt	r2, #45	; 0x2d
 800dcc6:	222b      	movge	r2, #43	; 0x2b
 800dcc8:	2909      	cmp	r1, #9
 800dcca:	7042      	strb	r2, [r0, #1]
 800dccc:	dd2a      	ble.n	800dd24 <__exponent+0x70>
 800dcce:	f10d 0207 	add.w	r2, sp, #7
 800dcd2:	4617      	mov	r7, r2
 800dcd4:	260a      	movs	r6, #10
 800dcd6:	4694      	mov	ip, r2
 800dcd8:	fb91 f5f6 	sdiv	r5, r1, r6
 800dcdc:	fb06 1415 	mls	r4, r6, r5, r1
 800dce0:	3430      	adds	r4, #48	; 0x30
 800dce2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800dce6:	460c      	mov	r4, r1
 800dce8:	2c63      	cmp	r4, #99	; 0x63
 800dcea:	f102 32ff 	add.w	r2, r2, #4294967295
 800dcee:	4629      	mov	r1, r5
 800dcf0:	dcf1      	bgt.n	800dcd6 <__exponent+0x22>
 800dcf2:	3130      	adds	r1, #48	; 0x30
 800dcf4:	f1ac 0402 	sub.w	r4, ip, #2
 800dcf8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dcfc:	1c41      	adds	r1, r0, #1
 800dcfe:	4622      	mov	r2, r4
 800dd00:	42ba      	cmp	r2, r7
 800dd02:	d30a      	bcc.n	800dd1a <__exponent+0x66>
 800dd04:	f10d 0209 	add.w	r2, sp, #9
 800dd08:	eba2 020c 	sub.w	r2, r2, ip
 800dd0c:	42bc      	cmp	r4, r7
 800dd0e:	bf88      	it	hi
 800dd10:	2200      	movhi	r2, #0
 800dd12:	4413      	add	r3, r2
 800dd14:	1a18      	subs	r0, r3, r0
 800dd16:	b003      	add	sp, #12
 800dd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd1a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dd1e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800dd22:	e7ed      	b.n	800dd00 <__exponent+0x4c>
 800dd24:	2330      	movs	r3, #48	; 0x30
 800dd26:	3130      	adds	r1, #48	; 0x30
 800dd28:	7083      	strb	r3, [r0, #2]
 800dd2a:	70c1      	strb	r1, [r0, #3]
 800dd2c:	1d03      	adds	r3, r0, #4
 800dd2e:	e7f1      	b.n	800dd14 <__exponent+0x60>

0800dd30 <_printf_float>:
 800dd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd34:	ed2d 8b02 	vpush	{d8}
 800dd38:	b08d      	sub	sp, #52	; 0x34
 800dd3a:	460c      	mov	r4, r1
 800dd3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dd40:	4616      	mov	r6, r2
 800dd42:	461f      	mov	r7, r3
 800dd44:	4605      	mov	r5, r0
 800dd46:	f000 fcd5 	bl	800e6f4 <_localeconv_r>
 800dd4a:	f8d0 a000 	ldr.w	sl, [r0]
 800dd4e:	4650      	mov	r0, sl
 800dd50:	f7f2 faae 	bl	80002b0 <strlen>
 800dd54:	2300      	movs	r3, #0
 800dd56:	930a      	str	r3, [sp, #40]	; 0x28
 800dd58:	6823      	ldr	r3, [r4, #0]
 800dd5a:	9305      	str	r3, [sp, #20]
 800dd5c:	f8d8 3000 	ldr.w	r3, [r8]
 800dd60:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dd64:	3307      	adds	r3, #7
 800dd66:	f023 0307 	bic.w	r3, r3, #7
 800dd6a:	f103 0208 	add.w	r2, r3, #8
 800dd6e:	f8c8 2000 	str.w	r2, [r8]
 800dd72:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dd7a:	9307      	str	r3, [sp, #28]
 800dd7c:	f8cd 8018 	str.w	r8, [sp, #24]
 800dd80:	ee08 0a10 	vmov	s16, r0
 800dd84:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800dd88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd8c:	4b9e      	ldr	r3, [pc, #632]	; (800e008 <_printf_float+0x2d8>)
 800dd8e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd92:	f7f2 feeb 	bl	8000b6c <__aeabi_dcmpun>
 800dd96:	bb88      	cbnz	r0, 800ddfc <_printf_float+0xcc>
 800dd98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd9c:	4b9a      	ldr	r3, [pc, #616]	; (800e008 <_printf_float+0x2d8>)
 800dd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800dda2:	f7f2 fec5 	bl	8000b30 <__aeabi_dcmple>
 800dda6:	bb48      	cbnz	r0, 800ddfc <_printf_float+0xcc>
 800dda8:	2200      	movs	r2, #0
 800ddaa:	2300      	movs	r3, #0
 800ddac:	4640      	mov	r0, r8
 800ddae:	4649      	mov	r1, r9
 800ddb0:	f7f2 feb4 	bl	8000b1c <__aeabi_dcmplt>
 800ddb4:	b110      	cbz	r0, 800ddbc <_printf_float+0x8c>
 800ddb6:	232d      	movs	r3, #45	; 0x2d
 800ddb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddbc:	4a93      	ldr	r2, [pc, #588]	; (800e00c <_printf_float+0x2dc>)
 800ddbe:	4b94      	ldr	r3, [pc, #592]	; (800e010 <_printf_float+0x2e0>)
 800ddc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ddc4:	bf94      	ite	ls
 800ddc6:	4690      	movls	r8, r2
 800ddc8:	4698      	movhi	r8, r3
 800ddca:	2303      	movs	r3, #3
 800ddcc:	6123      	str	r3, [r4, #16]
 800ddce:	9b05      	ldr	r3, [sp, #20]
 800ddd0:	f023 0304 	bic.w	r3, r3, #4
 800ddd4:	6023      	str	r3, [r4, #0]
 800ddd6:	f04f 0900 	mov.w	r9, #0
 800ddda:	9700      	str	r7, [sp, #0]
 800dddc:	4633      	mov	r3, r6
 800ddde:	aa0b      	add	r2, sp, #44	; 0x2c
 800dde0:	4621      	mov	r1, r4
 800dde2:	4628      	mov	r0, r5
 800dde4:	f000 f9da 	bl	800e19c <_printf_common>
 800dde8:	3001      	adds	r0, #1
 800ddea:	f040 8090 	bne.w	800df0e <_printf_float+0x1de>
 800ddee:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf2:	b00d      	add	sp, #52	; 0x34
 800ddf4:	ecbd 8b02 	vpop	{d8}
 800ddf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddfc:	4642      	mov	r2, r8
 800ddfe:	464b      	mov	r3, r9
 800de00:	4640      	mov	r0, r8
 800de02:	4649      	mov	r1, r9
 800de04:	f7f2 feb2 	bl	8000b6c <__aeabi_dcmpun>
 800de08:	b140      	cbz	r0, 800de1c <_printf_float+0xec>
 800de0a:	464b      	mov	r3, r9
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	bfbc      	itt	lt
 800de10:	232d      	movlt	r3, #45	; 0x2d
 800de12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800de16:	4a7f      	ldr	r2, [pc, #508]	; (800e014 <_printf_float+0x2e4>)
 800de18:	4b7f      	ldr	r3, [pc, #508]	; (800e018 <_printf_float+0x2e8>)
 800de1a:	e7d1      	b.n	800ddc0 <_printf_float+0x90>
 800de1c:	6863      	ldr	r3, [r4, #4]
 800de1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800de22:	9206      	str	r2, [sp, #24]
 800de24:	1c5a      	adds	r2, r3, #1
 800de26:	d13f      	bne.n	800dea8 <_printf_float+0x178>
 800de28:	2306      	movs	r3, #6
 800de2a:	6063      	str	r3, [r4, #4]
 800de2c:	9b05      	ldr	r3, [sp, #20]
 800de2e:	6861      	ldr	r1, [r4, #4]
 800de30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800de34:	2300      	movs	r3, #0
 800de36:	9303      	str	r3, [sp, #12]
 800de38:	ab0a      	add	r3, sp, #40	; 0x28
 800de3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800de3e:	ab09      	add	r3, sp, #36	; 0x24
 800de40:	ec49 8b10 	vmov	d0, r8, r9
 800de44:	9300      	str	r3, [sp, #0]
 800de46:	6022      	str	r2, [r4, #0]
 800de48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800de4c:	4628      	mov	r0, r5
 800de4e:	f7ff fecf 	bl	800dbf0 <__cvt>
 800de52:	9b06      	ldr	r3, [sp, #24]
 800de54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de56:	2b47      	cmp	r3, #71	; 0x47
 800de58:	4680      	mov	r8, r0
 800de5a:	d108      	bne.n	800de6e <_printf_float+0x13e>
 800de5c:	1cc8      	adds	r0, r1, #3
 800de5e:	db02      	blt.n	800de66 <_printf_float+0x136>
 800de60:	6863      	ldr	r3, [r4, #4]
 800de62:	4299      	cmp	r1, r3
 800de64:	dd41      	ble.n	800deea <_printf_float+0x1ba>
 800de66:	f1ab 0302 	sub.w	r3, fp, #2
 800de6a:	fa5f fb83 	uxtb.w	fp, r3
 800de6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800de72:	d820      	bhi.n	800deb6 <_printf_float+0x186>
 800de74:	3901      	subs	r1, #1
 800de76:	465a      	mov	r2, fp
 800de78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800de7c:	9109      	str	r1, [sp, #36]	; 0x24
 800de7e:	f7ff ff19 	bl	800dcb4 <__exponent>
 800de82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de84:	1813      	adds	r3, r2, r0
 800de86:	2a01      	cmp	r2, #1
 800de88:	4681      	mov	r9, r0
 800de8a:	6123      	str	r3, [r4, #16]
 800de8c:	dc02      	bgt.n	800de94 <_printf_float+0x164>
 800de8e:	6822      	ldr	r2, [r4, #0]
 800de90:	07d2      	lsls	r2, r2, #31
 800de92:	d501      	bpl.n	800de98 <_printf_float+0x168>
 800de94:	3301      	adds	r3, #1
 800de96:	6123      	str	r3, [r4, #16]
 800de98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d09c      	beq.n	800ddda <_printf_float+0xaa>
 800dea0:	232d      	movs	r3, #45	; 0x2d
 800dea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dea6:	e798      	b.n	800ddda <_printf_float+0xaa>
 800dea8:	9a06      	ldr	r2, [sp, #24]
 800deaa:	2a47      	cmp	r2, #71	; 0x47
 800deac:	d1be      	bne.n	800de2c <_printf_float+0xfc>
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1bc      	bne.n	800de2c <_printf_float+0xfc>
 800deb2:	2301      	movs	r3, #1
 800deb4:	e7b9      	b.n	800de2a <_printf_float+0xfa>
 800deb6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800deba:	d118      	bne.n	800deee <_printf_float+0x1be>
 800debc:	2900      	cmp	r1, #0
 800debe:	6863      	ldr	r3, [r4, #4]
 800dec0:	dd0b      	ble.n	800deda <_printf_float+0x1aa>
 800dec2:	6121      	str	r1, [r4, #16]
 800dec4:	b913      	cbnz	r3, 800decc <_printf_float+0x19c>
 800dec6:	6822      	ldr	r2, [r4, #0]
 800dec8:	07d0      	lsls	r0, r2, #31
 800deca:	d502      	bpl.n	800ded2 <_printf_float+0x1a2>
 800decc:	3301      	adds	r3, #1
 800dece:	440b      	add	r3, r1
 800ded0:	6123      	str	r3, [r4, #16]
 800ded2:	65a1      	str	r1, [r4, #88]	; 0x58
 800ded4:	f04f 0900 	mov.w	r9, #0
 800ded8:	e7de      	b.n	800de98 <_printf_float+0x168>
 800deda:	b913      	cbnz	r3, 800dee2 <_printf_float+0x1b2>
 800dedc:	6822      	ldr	r2, [r4, #0]
 800dede:	07d2      	lsls	r2, r2, #31
 800dee0:	d501      	bpl.n	800dee6 <_printf_float+0x1b6>
 800dee2:	3302      	adds	r3, #2
 800dee4:	e7f4      	b.n	800ded0 <_printf_float+0x1a0>
 800dee6:	2301      	movs	r3, #1
 800dee8:	e7f2      	b.n	800ded0 <_printf_float+0x1a0>
 800deea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800deee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800def0:	4299      	cmp	r1, r3
 800def2:	db05      	blt.n	800df00 <_printf_float+0x1d0>
 800def4:	6823      	ldr	r3, [r4, #0]
 800def6:	6121      	str	r1, [r4, #16]
 800def8:	07d8      	lsls	r0, r3, #31
 800defa:	d5ea      	bpl.n	800ded2 <_printf_float+0x1a2>
 800defc:	1c4b      	adds	r3, r1, #1
 800defe:	e7e7      	b.n	800ded0 <_printf_float+0x1a0>
 800df00:	2900      	cmp	r1, #0
 800df02:	bfd4      	ite	le
 800df04:	f1c1 0202 	rsble	r2, r1, #2
 800df08:	2201      	movgt	r2, #1
 800df0a:	4413      	add	r3, r2
 800df0c:	e7e0      	b.n	800ded0 <_printf_float+0x1a0>
 800df0e:	6823      	ldr	r3, [r4, #0]
 800df10:	055a      	lsls	r2, r3, #21
 800df12:	d407      	bmi.n	800df24 <_printf_float+0x1f4>
 800df14:	6923      	ldr	r3, [r4, #16]
 800df16:	4642      	mov	r2, r8
 800df18:	4631      	mov	r1, r6
 800df1a:	4628      	mov	r0, r5
 800df1c:	47b8      	blx	r7
 800df1e:	3001      	adds	r0, #1
 800df20:	d12c      	bne.n	800df7c <_printf_float+0x24c>
 800df22:	e764      	b.n	800ddee <_printf_float+0xbe>
 800df24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800df28:	f240 80e0 	bls.w	800e0ec <_printf_float+0x3bc>
 800df2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df30:	2200      	movs	r2, #0
 800df32:	2300      	movs	r3, #0
 800df34:	f7f2 fde8 	bl	8000b08 <__aeabi_dcmpeq>
 800df38:	2800      	cmp	r0, #0
 800df3a:	d034      	beq.n	800dfa6 <_printf_float+0x276>
 800df3c:	4a37      	ldr	r2, [pc, #220]	; (800e01c <_printf_float+0x2ec>)
 800df3e:	2301      	movs	r3, #1
 800df40:	4631      	mov	r1, r6
 800df42:	4628      	mov	r0, r5
 800df44:	47b8      	blx	r7
 800df46:	3001      	adds	r0, #1
 800df48:	f43f af51 	beq.w	800ddee <_printf_float+0xbe>
 800df4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df50:	429a      	cmp	r2, r3
 800df52:	db02      	blt.n	800df5a <_printf_float+0x22a>
 800df54:	6823      	ldr	r3, [r4, #0]
 800df56:	07d8      	lsls	r0, r3, #31
 800df58:	d510      	bpl.n	800df7c <_printf_float+0x24c>
 800df5a:	ee18 3a10 	vmov	r3, s16
 800df5e:	4652      	mov	r2, sl
 800df60:	4631      	mov	r1, r6
 800df62:	4628      	mov	r0, r5
 800df64:	47b8      	blx	r7
 800df66:	3001      	adds	r0, #1
 800df68:	f43f af41 	beq.w	800ddee <_printf_float+0xbe>
 800df6c:	f04f 0800 	mov.w	r8, #0
 800df70:	f104 091a 	add.w	r9, r4, #26
 800df74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df76:	3b01      	subs	r3, #1
 800df78:	4543      	cmp	r3, r8
 800df7a:	dc09      	bgt.n	800df90 <_printf_float+0x260>
 800df7c:	6823      	ldr	r3, [r4, #0]
 800df7e:	079b      	lsls	r3, r3, #30
 800df80:	f100 8107 	bmi.w	800e192 <_printf_float+0x462>
 800df84:	68e0      	ldr	r0, [r4, #12]
 800df86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df88:	4298      	cmp	r0, r3
 800df8a:	bfb8      	it	lt
 800df8c:	4618      	movlt	r0, r3
 800df8e:	e730      	b.n	800ddf2 <_printf_float+0xc2>
 800df90:	2301      	movs	r3, #1
 800df92:	464a      	mov	r2, r9
 800df94:	4631      	mov	r1, r6
 800df96:	4628      	mov	r0, r5
 800df98:	47b8      	blx	r7
 800df9a:	3001      	adds	r0, #1
 800df9c:	f43f af27 	beq.w	800ddee <_printf_float+0xbe>
 800dfa0:	f108 0801 	add.w	r8, r8, #1
 800dfa4:	e7e6      	b.n	800df74 <_printf_float+0x244>
 800dfa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	dc39      	bgt.n	800e020 <_printf_float+0x2f0>
 800dfac:	4a1b      	ldr	r2, [pc, #108]	; (800e01c <_printf_float+0x2ec>)
 800dfae:	2301      	movs	r3, #1
 800dfb0:	4631      	mov	r1, r6
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	47b8      	blx	r7
 800dfb6:	3001      	adds	r0, #1
 800dfb8:	f43f af19 	beq.w	800ddee <_printf_float+0xbe>
 800dfbc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	d102      	bne.n	800dfca <_printf_float+0x29a>
 800dfc4:	6823      	ldr	r3, [r4, #0]
 800dfc6:	07d9      	lsls	r1, r3, #31
 800dfc8:	d5d8      	bpl.n	800df7c <_printf_float+0x24c>
 800dfca:	ee18 3a10 	vmov	r3, s16
 800dfce:	4652      	mov	r2, sl
 800dfd0:	4631      	mov	r1, r6
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	47b8      	blx	r7
 800dfd6:	3001      	adds	r0, #1
 800dfd8:	f43f af09 	beq.w	800ddee <_printf_float+0xbe>
 800dfdc:	f04f 0900 	mov.w	r9, #0
 800dfe0:	f104 0a1a 	add.w	sl, r4, #26
 800dfe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfe6:	425b      	negs	r3, r3
 800dfe8:	454b      	cmp	r3, r9
 800dfea:	dc01      	bgt.n	800dff0 <_printf_float+0x2c0>
 800dfec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfee:	e792      	b.n	800df16 <_printf_float+0x1e6>
 800dff0:	2301      	movs	r3, #1
 800dff2:	4652      	mov	r2, sl
 800dff4:	4631      	mov	r1, r6
 800dff6:	4628      	mov	r0, r5
 800dff8:	47b8      	blx	r7
 800dffa:	3001      	adds	r0, #1
 800dffc:	f43f aef7 	beq.w	800ddee <_printf_float+0xbe>
 800e000:	f109 0901 	add.w	r9, r9, #1
 800e004:	e7ee      	b.n	800dfe4 <_printf_float+0x2b4>
 800e006:	bf00      	nop
 800e008:	7fefffff 	.word	0x7fefffff
 800e00c:	080112f4 	.word	0x080112f4
 800e010:	080112f8 	.word	0x080112f8
 800e014:	080112fc 	.word	0x080112fc
 800e018:	08011300 	.word	0x08011300
 800e01c:	08011304 	.word	0x08011304
 800e020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e022:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e024:	429a      	cmp	r2, r3
 800e026:	bfa8      	it	ge
 800e028:	461a      	movge	r2, r3
 800e02a:	2a00      	cmp	r2, #0
 800e02c:	4691      	mov	r9, r2
 800e02e:	dc37      	bgt.n	800e0a0 <_printf_float+0x370>
 800e030:	f04f 0b00 	mov.w	fp, #0
 800e034:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e038:	f104 021a 	add.w	r2, r4, #26
 800e03c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e03e:	9305      	str	r3, [sp, #20]
 800e040:	eba3 0309 	sub.w	r3, r3, r9
 800e044:	455b      	cmp	r3, fp
 800e046:	dc33      	bgt.n	800e0b0 <_printf_float+0x380>
 800e048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e04c:	429a      	cmp	r2, r3
 800e04e:	db3b      	blt.n	800e0c8 <_printf_float+0x398>
 800e050:	6823      	ldr	r3, [r4, #0]
 800e052:	07da      	lsls	r2, r3, #31
 800e054:	d438      	bmi.n	800e0c8 <_printf_float+0x398>
 800e056:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e05a:	eba2 0903 	sub.w	r9, r2, r3
 800e05e:	9b05      	ldr	r3, [sp, #20]
 800e060:	1ad2      	subs	r2, r2, r3
 800e062:	4591      	cmp	r9, r2
 800e064:	bfa8      	it	ge
 800e066:	4691      	movge	r9, r2
 800e068:	f1b9 0f00 	cmp.w	r9, #0
 800e06c:	dc35      	bgt.n	800e0da <_printf_float+0x3aa>
 800e06e:	f04f 0800 	mov.w	r8, #0
 800e072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e076:	f104 0a1a 	add.w	sl, r4, #26
 800e07a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e07e:	1a9b      	subs	r3, r3, r2
 800e080:	eba3 0309 	sub.w	r3, r3, r9
 800e084:	4543      	cmp	r3, r8
 800e086:	f77f af79 	ble.w	800df7c <_printf_float+0x24c>
 800e08a:	2301      	movs	r3, #1
 800e08c:	4652      	mov	r2, sl
 800e08e:	4631      	mov	r1, r6
 800e090:	4628      	mov	r0, r5
 800e092:	47b8      	blx	r7
 800e094:	3001      	adds	r0, #1
 800e096:	f43f aeaa 	beq.w	800ddee <_printf_float+0xbe>
 800e09a:	f108 0801 	add.w	r8, r8, #1
 800e09e:	e7ec      	b.n	800e07a <_printf_float+0x34a>
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	4631      	mov	r1, r6
 800e0a4:	4642      	mov	r2, r8
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	47b8      	blx	r7
 800e0aa:	3001      	adds	r0, #1
 800e0ac:	d1c0      	bne.n	800e030 <_printf_float+0x300>
 800e0ae:	e69e      	b.n	800ddee <_printf_float+0xbe>
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	4631      	mov	r1, r6
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	9205      	str	r2, [sp, #20]
 800e0b8:	47b8      	blx	r7
 800e0ba:	3001      	adds	r0, #1
 800e0bc:	f43f ae97 	beq.w	800ddee <_printf_float+0xbe>
 800e0c0:	9a05      	ldr	r2, [sp, #20]
 800e0c2:	f10b 0b01 	add.w	fp, fp, #1
 800e0c6:	e7b9      	b.n	800e03c <_printf_float+0x30c>
 800e0c8:	ee18 3a10 	vmov	r3, s16
 800e0cc:	4652      	mov	r2, sl
 800e0ce:	4631      	mov	r1, r6
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	47b8      	blx	r7
 800e0d4:	3001      	adds	r0, #1
 800e0d6:	d1be      	bne.n	800e056 <_printf_float+0x326>
 800e0d8:	e689      	b.n	800ddee <_printf_float+0xbe>
 800e0da:	9a05      	ldr	r2, [sp, #20]
 800e0dc:	464b      	mov	r3, r9
 800e0de:	4442      	add	r2, r8
 800e0e0:	4631      	mov	r1, r6
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	47b8      	blx	r7
 800e0e6:	3001      	adds	r0, #1
 800e0e8:	d1c1      	bne.n	800e06e <_printf_float+0x33e>
 800e0ea:	e680      	b.n	800ddee <_printf_float+0xbe>
 800e0ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0ee:	2a01      	cmp	r2, #1
 800e0f0:	dc01      	bgt.n	800e0f6 <_printf_float+0x3c6>
 800e0f2:	07db      	lsls	r3, r3, #31
 800e0f4:	d53a      	bpl.n	800e16c <_printf_float+0x43c>
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	4642      	mov	r2, r8
 800e0fa:	4631      	mov	r1, r6
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	47b8      	blx	r7
 800e100:	3001      	adds	r0, #1
 800e102:	f43f ae74 	beq.w	800ddee <_printf_float+0xbe>
 800e106:	ee18 3a10 	vmov	r3, s16
 800e10a:	4652      	mov	r2, sl
 800e10c:	4631      	mov	r1, r6
 800e10e:	4628      	mov	r0, r5
 800e110:	47b8      	blx	r7
 800e112:	3001      	adds	r0, #1
 800e114:	f43f ae6b 	beq.w	800ddee <_printf_float+0xbe>
 800e118:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e11c:	2200      	movs	r2, #0
 800e11e:	2300      	movs	r3, #0
 800e120:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e124:	f7f2 fcf0 	bl	8000b08 <__aeabi_dcmpeq>
 800e128:	b9d8      	cbnz	r0, 800e162 <_printf_float+0x432>
 800e12a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e12e:	f108 0201 	add.w	r2, r8, #1
 800e132:	4631      	mov	r1, r6
 800e134:	4628      	mov	r0, r5
 800e136:	47b8      	blx	r7
 800e138:	3001      	adds	r0, #1
 800e13a:	d10e      	bne.n	800e15a <_printf_float+0x42a>
 800e13c:	e657      	b.n	800ddee <_printf_float+0xbe>
 800e13e:	2301      	movs	r3, #1
 800e140:	4652      	mov	r2, sl
 800e142:	4631      	mov	r1, r6
 800e144:	4628      	mov	r0, r5
 800e146:	47b8      	blx	r7
 800e148:	3001      	adds	r0, #1
 800e14a:	f43f ae50 	beq.w	800ddee <_printf_float+0xbe>
 800e14e:	f108 0801 	add.w	r8, r8, #1
 800e152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e154:	3b01      	subs	r3, #1
 800e156:	4543      	cmp	r3, r8
 800e158:	dcf1      	bgt.n	800e13e <_printf_float+0x40e>
 800e15a:	464b      	mov	r3, r9
 800e15c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e160:	e6da      	b.n	800df18 <_printf_float+0x1e8>
 800e162:	f04f 0800 	mov.w	r8, #0
 800e166:	f104 0a1a 	add.w	sl, r4, #26
 800e16a:	e7f2      	b.n	800e152 <_printf_float+0x422>
 800e16c:	2301      	movs	r3, #1
 800e16e:	4642      	mov	r2, r8
 800e170:	e7df      	b.n	800e132 <_printf_float+0x402>
 800e172:	2301      	movs	r3, #1
 800e174:	464a      	mov	r2, r9
 800e176:	4631      	mov	r1, r6
 800e178:	4628      	mov	r0, r5
 800e17a:	47b8      	blx	r7
 800e17c:	3001      	adds	r0, #1
 800e17e:	f43f ae36 	beq.w	800ddee <_printf_float+0xbe>
 800e182:	f108 0801 	add.w	r8, r8, #1
 800e186:	68e3      	ldr	r3, [r4, #12]
 800e188:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e18a:	1a5b      	subs	r3, r3, r1
 800e18c:	4543      	cmp	r3, r8
 800e18e:	dcf0      	bgt.n	800e172 <_printf_float+0x442>
 800e190:	e6f8      	b.n	800df84 <_printf_float+0x254>
 800e192:	f04f 0800 	mov.w	r8, #0
 800e196:	f104 0919 	add.w	r9, r4, #25
 800e19a:	e7f4      	b.n	800e186 <_printf_float+0x456>

0800e19c <_printf_common>:
 800e19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1a0:	4616      	mov	r6, r2
 800e1a2:	4699      	mov	r9, r3
 800e1a4:	688a      	ldr	r2, [r1, #8]
 800e1a6:	690b      	ldr	r3, [r1, #16]
 800e1a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	bfb8      	it	lt
 800e1b0:	4613      	movlt	r3, r2
 800e1b2:	6033      	str	r3, [r6, #0]
 800e1b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e1b8:	4607      	mov	r7, r0
 800e1ba:	460c      	mov	r4, r1
 800e1bc:	b10a      	cbz	r2, 800e1c2 <_printf_common+0x26>
 800e1be:	3301      	adds	r3, #1
 800e1c0:	6033      	str	r3, [r6, #0]
 800e1c2:	6823      	ldr	r3, [r4, #0]
 800e1c4:	0699      	lsls	r1, r3, #26
 800e1c6:	bf42      	ittt	mi
 800e1c8:	6833      	ldrmi	r3, [r6, #0]
 800e1ca:	3302      	addmi	r3, #2
 800e1cc:	6033      	strmi	r3, [r6, #0]
 800e1ce:	6825      	ldr	r5, [r4, #0]
 800e1d0:	f015 0506 	ands.w	r5, r5, #6
 800e1d4:	d106      	bne.n	800e1e4 <_printf_common+0x48>
 800e1d6:	f104 0a19 	add.w	sl, r4, #25
 800e1da:	68e3      	ldr	r3, [r4, #12]
 800e1dc:	6832      	ldr	r2, [r6, #0]
 800e1de:	1a9b      	subs	r3, r3, r2
 800e1e0:	42ab      	cmp	r3, r5
 800e1e2:	dc26      	bgt.n	800e232 <_printf_common+0x96>
 800e1e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e1e8:	1e13      	subs	r3, r2, #0
 800e1ea:	6822      	ldr	r2, [r4, #0]
 800e1ec:	bf18      	it	ne
 800e1ee:	2301      	movne	r3, #1
 800e1f0:	0692      	lsls	r2, r2, #26
 800e1f2:	d42b      	bmi.n	800e24c <_printf_common+0xb0>
 800e1f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1f8:	4649      	mov	r1, r9
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	47c0      	blx	r8
 800e1fe:	3001      	adds	r0, #1
 800e200:	d01e      	beq.n	800e240 <_printf_common+0xa4>
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	6922      	ldr	r2, [r4, #16]
 800e206:	f003 0306 	and.w	r3, r3, #6
 800e20a:	2b04      	cmp	r3, #4
 800e20c:	bf02      	ittt	eq
 800e20e:	68e5      	ldreq	r5, [r4, #12]
 800e210:	6833      	ldreq	r3, [r6, #0]
 800e212:	1aed      	subeq	r5, r5, r3
 800e214:	68a3      	ldr	r3, [r4, #8]
 800e216:	bf0c      	ite	eq
 800e218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e21c:	2500      	movne	r5, #0
 800e21e:	4293      	cmp	r3, r2
 800e220:	bfc4      	itt	gt
 800e222:	1a9b      	subgt	r3, r3, r2
 800e224:	18ed      	addgt	r5, r5, r3
 800e226:	2600      	movs	r6, #0
 800e228:	341a      	adds	r4, #26
 800e22a:	42b5      	cmp	r5, r6
 800e22c:	d11a      	bne.n	800e264 <_printf_common+0xc8>
 800e22e:	2000      	movs	r0, #0
 800e230:	e008      	b.n	800e244 <_printf_common+0xa8>
 800e232:	2301      	movs	r3, #1
 800e234:	4652      	mov	r2, sl
 800e236:	4649      	mov	r1, r9
 800e238:	4638      	mov	r0, r7
 800e23a:	47c0      	blx	r8
 800e23c:	3001      	adds	r0, #1
 800e23e:	d103      	bne.n	800e248 <_printf_common+0xac>
 800e240:	f04f 30ff 	mov.w	r0, #4294967295
 800e244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e248:	3501      	adds	r5, #1
 800e24a:	e7c6      	b.n	800e1da <_printf_common+0x3e>
 800e24c:	18e1      	adds	r1, r4, r3
 800e24e:	1c5a      	adds	r2, r3, #1
 800e250:	2030      	movs	r0, #48	; 0x30
 800e252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e256:	4422      	add	r2, r4
 800e258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e25c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e260:	3302      	adds	r3, #2
 800e262:	e7c7      	b.n	800e1f4 <_printf_common+0x58>
 800e264:	2301      	movs	r3, #1
 800e266:	4622      	mov	r2, r4
 800e268:	4649      	mov	r1, r9
 800e26a:	4638      	mov	r0, r7
 800e26c:	47c0      	blx	r8
 800e26e:	3001      	adds	r0, #1
 800e270:	d0e6      	beq.n	800e240 <_printf_common+0xa4>
 800e272:	3601      	adds	r6, #1
 800e274:	e7d9      	b.n	800e22a <_printf_common+0x8e>
	...

0800e278 <_printf_i>:
 800e278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e27c:	7e0f      	ldrb	r7, [r1, #24]
 800e27e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e280:	2f78      	cmp	r7, #120	; 0x78
 800e282:	4691      	mov	r9, r2
 800e284:	4680      	mov	r8, r0
 800e286:	460c      	mov	r4, r1
 800e288:	469a      	mov	sl, r3
 800e28a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e28e:	d807      	bhi.n	800e2a0 <_printf_i+0x28>
 800e290:	2f62      	cmp	r7, #98	; 0x62
 800e292:	d80a      	bhi.n	800e2aa <_printf_i+0x32>
 800e294:	2f00      	cmp	r7, #0
 800e296:	f000 80d4 	beq.w	800e442 <_printf_i+0x1ca>
 800e29a:	2f58      	cmp	r7, #88	; 0x58
 800e29c:	f000 80c0 	beq.w	800e420 <_printf_i+0x1a8>
 800e2a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e2a8:	e03a      	b.n	800e320 <_printf_i+0xa8>
 800e2aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e2ae:	2b15      	cmp	r3, #21
 800e2b0:	d8f6      	bhi.n	800e2a0 <_printf_i+0x28>
 800e2b2:	a101      	add	r1, pc, #4	; (adr r1, 800e2b8 <_printf_i+0x40>)
 800e2b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e2b8:	0800e311 	.word	0x0800e311
 800e2bc:	0800e325 	.word	0x0800e325
 800e2c0:	0800e2a1 	.word	0x0800e2a1
 800e2c4:	0800e2a1 	.word	0x0800e2a1
 800e2c8:	0800e2a1 	.word	0x0800e2a1
 800e2cc:	0800e2a1 	.word	0x0800e2a1
 800e2d0:	0800e325 	.word	0x0800e325
 800e2d4:	0800e2a1 	.word	0x0800e2a1
 800e2d8:	0800e2a1 	.word	0x0800e2a1
 800e2dc:	0800e2a1 	.word	0x0800e2a1
 800e2e0:	0800e2a1 	.word	0x0800e2a1
 800e2e4:	0800e429 	.word	0x0800e429
 800e2e8:	0800e351 	.word	0x0800e351
 800e2ec:	0800e3e3 	.word	0x0800e3e3
 800e2f0:	0800e2a1 	.word	0x0800e2a1
 800e2f4:	0800e2a1 	.word	0x0800e2a1
 800e2f8:	0800e44b 	.word	0x0800e44b
 800e2fc:	0800e2a1 	.word	0x0800e2a1
 800e300:	0800e351 	.word	0x0800e351
 800e304:	0800e2a1 	.word	0x0800e2a1
 800e308:	0800e2a1 	.word	0x0800e2a1
 800e30c:	0800e3eb 	.word	0x0800e3eb
 800e310:	682b      	ldr	r3, [r5, #0]
 800e312:	1d1a      	adds	r2, r3, #4
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	602a      	str	r2, [r5, #0]
 800e318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e31c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e320:	2301      	movs	r3, #1
 800e322:	e09f      	b.n	800e464 <_printf_i+0x1ec>
 800e324:	6820      	ldr	r0, [r4, #0]
 800e326:	682b      	ldr	r3, [r5, #0]
 800e328:	0607      	lsls	r7, r0, #24
 800e32a:	f103 0104 	add.w	r1, r3, #4
 800e32e:	6029      	str	r1, [r5, #0]
 800e330:	d501      	bpl.n	800e336 <_printf_i+0xbe>
 800e332:	681e      	ldr	r6, [r3, #0]
 800e334:	e003      	b.n	800e33e <_printf_i+0xc6>
 800e336:	0646      	lsls	r6, r0, #25
 800e338:	d5fb      	bpl.n	800e332 <_printf_i+0xba>
 800e33a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e33e:	2e00      	cmp	r6, #0
 800e340:	da03      	bge.n	800e34a <_printf_i+0xd2>
 800e342:	232d      	movs	r3, #45	; 0x2d
 800e344:	4276      	negs	r6, r6
 800e346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e34a:	485a      	ldr	r0, [pc, #360]	; (800e4b4 <_printf_i+0x23c>)
 800e34c:	230a      	movs	r3, #10
 800e34e:	e012      	b.n	800e376 <_printf_i+0xfe>
 800e350:	682b      	ldr	r3, [r5, #0]
 800e352:	6820      	ldr	r0, [r4, #0]
 800e354:	1d19      	adds	r1, r3, #4
 800e356:	6029      	str	r1, [r5, #0]
 800e358:	0605      	lsls	r5, r0, #24
 800e35a:	d501      	bpl.n	800e360 <_printf_i+0xe8>
 800e35c:	681e      	ldr	r6, [r3, #0]
 800e35e:	e002      	b.n	800e366 <_printf_i+0xee>
 800e360:	0641      	lsls	r1, r0, #25
 800e362:	d5fb      	bpl.n	800e35c <_printf_i+0xe4>
 800e364:	881e      	ldrh	r6, [r3, #0]
 800e366:	4853      	ldr	r0, [pc, #332]	; (800e4b4 <_printf_i+0x23c>)
 800e368:	2f6f      	cmp	r7, #111	; 0x6f
 800e36a:	bf0c      	ite	eq
 800e36c:	2308      	moveq	r3, #8
 800e36e:	230a      	movne	r3, #10
 800e370:	2100      	movs	r1, #0
 800e372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e376:	6865      	ldr	r5, [r4, #4]
 800e378:	60a5      	str	r5, [r4, #8]
 800e37a:	2d00      	cmp	r5, #0
 800e37c:	bfa2      	ittt	ge
 800e37e:	6821      	ldrge	r1, [r4, #0]
 800e380:	f021 0104 	bicge.w	r1, r1, #4
 800e384:	6021      	strge	r1, [r4, #0]
 800e386:	b90e      	cbnz	r6, 800e38c <_printf_i+0x114>
 800e388:	2d00      	cmp	r5, #0
 800e38a:	d04b      	beq.n	800e424 <_printf_i+0x1ac>
 800e38c:	4615      	mov	r5, r2
 800e38e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e392:	fb03 6711 	mls	r7, r3, r1, r6
 800e396:	5dc7      	ldrb	r7, [r0, r7]
 800e398:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e39c:	4637      	mov	r7, r6
 800e39e:	42bb      	cmp	r3, r7
 800e3a0:	460e      	mov	r6, r1
 800e3a2:	d9f4      	bls.n	800e38e <_printf_i+0x116>
 800e3a4:	2b08      	cmp	r3, #8
 800e3a6:	d10b      	bne.n	800e3c0 <_printf_i+0x148>
 800e3a8:	6823      	ldr	r3, [r4, #0]
 800e3aa:	07de      	lsls	r6, r3, #31
 800e3ac:	d508      	bpl.n	800e3c0 <_printf_i+0x148>
 800e3ae:	6923      	ldr	r3, [r4, #16]
 800e3b0:	6861      	ldr	r1, [r4, #4]
 800e3b2:	4299      	cmp	r1, r3
 800e3b4:	bfde      	ittt	le
 800e3b6:	2330      	movle	r3, #48	; 0x30
 800e3b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e3bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e3c0:	1b52      	subs	r2, r2, r5
 800e3c2:	6122      	str	r2, [r4, #16]
 800e3c4:	f8cd a000 	str.w	sl, [sp]
 800e3c8:	464b      	mov	r3, r9
 800e3ca:	aa03      	add	r2, sp, #12
 800e3cc:	4621      	mov	r1, r4
 800e3ce:	4640      	mov	r0, r8
 800e3d0:	f7ff fee4 	bl	800e19c <_printf_common>
 800e3d4:	3001      	adds	r0, #1
 800e3d6:	d14a      	bne.n	800e46e <_printf_i+0x1f6>
 800e3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3dc:	b004      	add	sp, #16
 800e3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3e2:	6823      	ldr	r3, [r4, #0]
 800e3e4:	f043 0320 	orr.w	r3, r3, #32
 800e3e8:	6023      	str	r3, [r4, #0]
 800e3ea:	4833      	ldr	r0, [pc, #204]	; (800e4b8 <_printf_i+0x240>)
 800e3ec:	2778      	movs	r7, #120	; 0x78
 800e3ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e3f2:	6823      	ldr	r3, [r4, #0]
 800e3f4:	6829      	ldr	r1, [r5, #0]
 800e3f6:	061f      	lsls	r7, r3, #24
 800e3f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800e3fc:	d402      	bmi.n	800e404 <_printf_i+0x18c>
 800e3fe:	065f      	lsls	r7, r3, #25
 800e400:	bf48      	it	mi
 800e402:	b2b6      	uxthmi	r6, r6
 800e404:	07df      	lsls	r7, r3, #31
 800e406:	bf48      	it	mi
 800e408:	f043 0320 	orrmi.w	r3, r3, #32
 800e40c:	6029      	str	r1, [r5, #0]
 800e40e:	bf48      	it	mi
 800e410:	6023      	strmi	r3, [r4, #0]
 800e412:	b91e      	cbnz	r6, 800e41c <_printf_i+0x1a4>
 800e414:	6823      	ldr	r3, [r4, #0]
 800e416:	f023 0320 	bic.w	r3, r3, #32
 800e41a:	6023      	str	r3, [r4, #0]
 800e41c:	2310      	movs	r3, #16
 800e41e:	e7a7      	b.n	800e370 <_printf_i+0xf8>
 800e420:	4824      	ldr	r0, [pc, #144]	; (800e4b4 <_printf_i+0x23c>)
 800e422:	e7e4      	b.n	800e3ee <_printf_i+0x176>
 800e424:	4615      	mov	r5, r2
 800e426:	e7bd      	b.n	800e3a4 <_printf_i+0x12c>
 800e428:	682b      	ldr	r3, [r5, #0]
 800e42a:	6826      	ldr	r6, [r4, #0]
 800e42c:	6961      	ldr	r1, [r4, #20]
 800e42e:	1d18      	adds	r0, r3, #4
 800e430:	6028      	str	r0, [r5, #0]
 800e432:	0635      	lsls	r5, r6, #24
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	d501      	bpl.n	800e43c <_printf_i+0x1c4>
 800e438:	6019      	str	r1, [r3, #0]
 800e43a:	e002      	b.n	800e442 <_printf_i+0x1ca>
 800e43c:	0670      	lsls	r0, r6, #25
 800e43e:	d5fb      	bpl.n	800e438 <_printf_i+0x1c0>
 800e440:	8019      	strh	r1, [r3, #0]
 800e442:	2300      	movs	r3, #0
 800e444:	6123      	str	r3, [r4, #16]
 800e446:	4615      	mov	r5, r2
 800e448:	e7bc      	b.n	800e3c4 <_printf_i+0x14c>
 800e44a:	682b      	ldr	r3, [r5, #0]
 800e44c:	1d1a      	adds	r2, r3, #4
 800e44e:	602a      	str	r2, [r5, #0]
 800e450:	681d      	ldr	r5, [r3, #0]
 800e452:	6862      	ldr	r2, [r4, #4]
 800e454:	2100      	movs	r1, #0
 800e456:	4628      	mov	r0, r5
 800e458:	f7f1 feda 	bl	8000210 <memchr>
 800e45c:	b108      	cbz	r0, 800e462 <_printf_i+0x1ea>
 800e45e:	1b40      	subs	r0, r0, r5
 800e460:	6060      	str	r0, [r4, #4]
 800e462:	6863      	ldr	r3, [r4, #4]
 800e464:	6123      	str	r3, [r4, #16]
 800e466:	2300      	movs	r3, #0
 800e468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e46c:	e7aa      	b.n	800e3c4 <_printf_i+0x14c>
 800e46e:	6923      	ldr	r3, [r4, #16]
 800e470:	462a      	mov	r2, r5
 800e472:	4649      	mov	r1, r9
 800e474:	4640      	mov	r0, r8
 800e476:	47d0      	blx	sl
 800e478:	3001      	adds	r0, #1
 800e47a:	d0ad      	beq.n	800e3d8 <_printf_i+0x160>
 800e47c:	6823      	ldr	r3, [r4, #0]
 800e47e:	079b      	lsls	r3, r3, #30
 800e480:	d413      	bmi.n	800e4aa <_printf_i+0x232>
 800e482:	68e0      	ldr	r0, [r4, #12]
 800e484:	9b03      	ldr	r3, [sp, #12]
 800e486:	4298      	cmp	r0, r3
 800e488:	bfb8      	it	lt
 800e48a:	4618      	movlt	r0, r3
 800e48c:	e7a6      	b.n	800e3dc <_printf_i+0x164>
 800e48e:	2301      	movs	r3, #1
 800e490:	4632      	mov	r2, r6
 800e492:	4649      	mov	r1, r9
 800e494:	4640      	mov	r0, r8
 800e496:	47d0      	blx	sl
 800e498:	3001      	adds	r0, #1
 800e49a:	d09d      	beq.n	800e3d8 <_printf_i+0x160>
 800e49c:	3501      	adds	r5, #1
 800e49e:	68e3      	ldr	r3, [r4, #12]
 800e4a0:	9903      	ldr	r1, [sp, #12]
 800e4a2:	1a5b      	subs	r3, r3, r1
 800e4a4:	42ab      	cmp	r3, r5
 800e4a6:	dcf2      	bgt.n	800e48e <_printf_i+0x216>
 800e4a8:	e7eb      	b.n	800e482 <_printf_i+0x20a>
 800e4aa:	2500      	movs	r5, #0
 800e4ac:	f104 0619 	add.w	r6, r4, #25
 800e4b0:	e7f5      	b.n	800e49e <_printf_i+0x226>
 800e4b2:	bf00      	nop
 800e4b4:	08011306 	.word	0x08011306
 800e4b8:	08011317 	.word	0x08011317

0800e4bc <std>:
 800e4bc:	2300      	movs	r3, #0
 800e4be:	b510      	push	{r4, lr}
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	e9c0 3300 	strd	r3, r3, [r0]
 800e4c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4ca:	6083      	str	r3, [r0, #8]
 800e4cc:	8181      	strh	r1, [r0, #12]
 800e4ce:	6643      	str	r3, [r0, #100]	; 0x64
 800e4d0:	81c2      	strh	r2, [r0, #14]
 800e4d2:	6183      	str	r3, [r0, #24]
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	2208      	movs	r2, #8
 800e4d8:	305c      	adds	r0, #92	; 0x5c
 800e4da:	f000 f902 	bl	800e6e2 <memset>
 800e4de:	4b05      	ldr	r3, [pc, #20]	; (800e4f4 <std+0x38>)
 800e4e0:	6263      	str	r3, [r4, #36]	; 0x24
 800e4e2:	4b05      	ldr	r3, [pc, #20]	; (800e4f8 <std+0x3c>)
 800e4e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4e6:	4b05      	ldr	r3, [pc, #20]	; (800e4fc <std+0x40>)
 800e4e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4ea:	4b05      	ldr	r3, [pc, #20]	; (800e500 <std+0x44>)
 800e4ec:	6224      	str	r4, [r4, #32]
 800e4ee:	6323      	str	r3, [r4, #48]	; 0x30
 800e4f0:	bd10      	pop	{r4, pc}
 800e4f2:	bf00      	nop
 800e4f4:	0800e65d 	.word	0x0800e65d
 800e4f8:	0800e67f 	.word	0x0800e67f
 800e4fc:	0800e6b7 	.word	0x0800e6b7
 800e500:	0800e6db 	.word	0x0800e6db

0800e504 <stdio_exit_handler>:
 800e504:	4a02      	ldr	r2, [pc, #8]	; (800e510 <stdio_exit_handler+0xc>)
 800e506:	4903      	ldr	r1, [pc, #12]	; (800e514 <stdio_exit_handler+0x10>)
 800e508:	4803      	ldr	r0, [pc, #12]	; (800e518 <stdio_exit_handler+0x14>)
 800e50a:	f000 b869 	b.w	800e5e0 <_fwalk_sglue>
 800e50e:	bf00      	nop
 800e510:	20000030 	.word	0x20000030
 800e514:	08010251 	.word	0x08010251
 800e518:	2000003c 	.word	0x2000003c

0800e51c <cleanup_stdio>:
 800e51c:	6841      	ldr	r1, [r0, #4]
 800e51e:	4b0c      	ldr	r3, [pc, #48]	; (800e550 <cleanup_stdio+0x34>)
 800e520:	4299      	cmp	r1, r3
 800e522:	b510      	push	{r4, lr}
 800e524:	4604      	mov	r4, r0
 800e526:	d001      	beq.n	800e52c <cleanup_stdio+0x10>
 800e528:	f001 fe92 	bl	8010250 <_fflush_r>
 800e52c:	68a1      	ldr	r1, [r4, #8]
 800e52e:	4b09      	ldr	r3, [pc, #36]	; (800e554 <cleanup_stdio+0x38>)
 800e530:	4299      	cmp	r1, r3
 800e532:	d002      	beq.n	800e53a <cleanup_stdio+0x1e>
 800e534:	4620      	mov	r0, r4
 800e536:	f001 fe8b 	bl	8010250 <_fflush_r>
 800e53a:	68e1      	ldr	r1, [r4, #12]
 800e53c:	4b06      	ldr	r3, [pc, #24]	; (800e558 <cleanup_stdio+0x3c>)
 800e53e:	4299      	cmp	r1, r3
 800e540:	d004      	beq.n	800e54c <cleanup_stdio+0x30>
 800e542:	4620      	mov	r0, r4
 800e544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e548:	f001 be82 	b.w	8010250 <_fflush_r>
 800e54c:	bd10      	pop	{r4, pc}
 800e54e:	bf00      	nop
 800e550:	20005838 	.word	0x20005838
 800e554:	200058a0 	.word	0x200058a0
 800e558:	20005908 	.word	0x20005908

0800e55c <global_stdio_init.part.0>:
 800e55c:	b510      	push	{r4, lr}
 800e55e:	4b0b      	ldr	r3, [pc, #44]	; (800e58c <global_stdio_init.part.0+0x30>)
 800e560:	4c0b      	ldr	r4, [pc, #44]	; (800e590 <global_stdio_init.part.0+0x34>)
 800e562:	4a0c      	ldr	r2, [pc, #48]	; (800e594 <global_stdio_init.part.0+0x38>)
 800e564:	601a      	str	r2, [r3, #0]
 800e566:	4620      	mov	r0, r4
 800e568:	2200      	movs	r2, #0
 800e56a:	2104      	movs	r1, #4
 800e56c:	f7ff ffa6 	bl	800e4bc <std>
 800e570:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e574:	2201      	movs	r2, #1
 800e576:	2109      	movs	r1, #9
 800e578:	f7ff ffa0 	bl	800e4bc <std>
 800e57c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e580:	2202      	movs	r2, #2
 800e582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e586:	2112      	movs	r1, #18
 800e588:	f7ff bf98 	b.w	800e4bc <std>
 800e58c:	20005970 	.word	0x20005970
 800e590:	20005838 	.word	0x20005838
 800e594:	0800e505 	.word	0x0800e505

0800e598 <__sfp_lock_acquire>:
 800e598:	4801      	ldr	r0, [pc, #4]	; (800e5a0 <__sfp_lock_acquire+0x8>)
 800e59a:	f000 b975 	b.w	800e888 <__retarget_lock_acquire_recursive>
 800e59e:	bf00      	nop
 800e5a0:	20005979 	.word	0x20005979

0800e5a4 <__sfp_lock_release>:
 800e5a4:	4801      	ldr	r0, [pc, #4]	; (800e5ac <__sfp_lock_release+0x8>)
 800e5a6:	f000 b970 	b.w	800e88a <__retarget_lock_release_recursive>
 800e5aa:	bf00      	nop
 800e5ac:	20005979 	.word	0x20005979

0800e5b0 <__sinit>:
 800e5b0:	b510      	push	{r4, lr}
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	f7ff fff0 	bl	800e598 <__sfp_lock_acquire>
 800e5b8:	6a23      	ldr	r3, [r4, #32]
 800e5ba:	b11b      	cbz	r3, 800e5c4 <__sinit+0x14>
 800e5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5c0:	f7ff bff0 	b.w	800e5a4 <__sfp_lock_release>
 800e5c4:	4b04      	ldr	r3, [pc, #16]	; (800e5d8 <__sinit+0x28>)
 800e5c6:	6223      	str	r3, [r4, #32]
 800e5c8:	4b04      	ldr	r3, [pc, #16]	; (800e5dc <__sinit+0x2c>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d1f5      	bne.n	800e5bc <__sinit+0xc>
 800e5d0:	f7ff ffc4 	bl	800e55c <global_stdio_init.part.0>
 800e5d4:	e7f2      	b.n	800e5bc <__sinit+0xc>
 800e5d6:	bf00      	nop
 800e5d8:	0800e51d 	.word	0x0800e51d
 800e5dc:	20005970 	.word	0x20005970

0800e5e0 <_fwalk_sglue>:
 800e5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5e4:	4607      	mov	r7, r0
 800e5e6:	4688      	mov	r8, r1
 800e5e8:	4614      	mov	r4, r2
 800e5ea:	2600      	movs	r6, #0
 800e5ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5f0:	f1b9 0901 	subs.w	r9, r9, #1
 800e5f4:	d505      	bpl.n	800e602 <_fwalk_sglue+0x22>
 800e5f6:	6824      	ldr	r4, [r4, #0]
 800e5f8:	2c00      	cmp	r4, #0
 800e5fa:	d1f7      	bne.n	800e5ec <_fwalk_sglue+0xc>
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e602:	89ab      	ldrh	r3, [r5, #12]
 800e604:	2b01      	cmp	r3, #1
 800e606:	d907      	bls.n	800e618 <_fwalk_sglue+0x38>
 800e608:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e60c:	3301      	adds	r3, #1
 800e60e:	d003      	beq.n	800e618 <_fwalk_sglue+0x38>
 800e610:	4629      	mov	r1, r5
 800e612:	4638      	mov	r0, r7
 800e614:	47c0      	blx	r8
 800e616:	4306      	orrs	r6, r0
 800e618:	3568      	adds	r5, #104	; 0x68
 800e61a:	e7e9      	b.n	800e5f0 <_fwalk_sglue+0x10>

0800e61c <siprintf>:
 800e61c:	b40e      	push	{r1, r2, r3}
 800e61e:	b500      	push	{lr}
 800e620:	b09c      	sub	sp, #112	; 0x70
 800e622:	ab1d      	add	r3, sp, #116	; 0x74
 800e624:	9002      	str	r0, [sp, #8]
 800e626:	9006      	str	r0, [sp, #24]
 800e628:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e62c:	4809      	ldr	r0, [pc, #36]	; (800e654 <siprintf+0x38>)
 800e62e:	9107      	str	r1, [sp, #28]
 800e630:	9104      	str	r1, [sp, #16]
 800e632:	4909      	ldr	r1, [pc, #36]	; (800e658 <siprintf+0x3c>)
 800e634:	f853 2b04 	ldr.w	r2, [r3], #4
 800e638:	9105      	str	r1, [sp, #20]
 800e63a:	6800      	ldr	r0, [r0, #0]
 800e63c:	9301      	str	r3, [sp, #4]
 800e63e:	a902      	add	r1, sp, #8
 800e640:	f001 fc82 	bl	800ff48 <_svfiprintf_r>
 800e644:	9b02      	ldr	r3, [sp, #8]
 800e646:	2200      	movs	r2, #0
 800e648:	701a      	strb	r2, [r3, #0]
 800e64a:	b01c      	add	sp, #112	; 0x70
 800e64c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e650:	b003      	add	sp, #12
 800e652:	4770      	bx	lr
 800e654:	20000088 	.word	0x20000088
 800e658:	ffff0208 	.word	0xffff0208

0800e65c <__sread>:
 800e65c:	b510      	push	{r4, lr}
 800e65e:	460c      	mov	r4, r1
 800e660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e664:	f000 f8c2 	bl	800e7ec <_read_r>
 800e668:	2800      	cmp	r0, #0
 800e66a:	bfab      	itete	ge
 800e66c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e66e:	89a3      	ldrhlt	r3, [r4, #12]
 800e670:	181b      	addge	r3, r3, r0
 800e672:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e676:	bfac      	ite	ge
 800e678:	6563      	strge	r3, [r4, #84]	; 0x54
 800e67a:	81a3      	strhlt	r3, [r4, #12]
 800e67c:	bd10      	pop	{r4, pc}

0800e67e <__swrite>:
 800e67e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e682:	461f      	mov	r7, r3
 800e684:	898b      	ldrh	r3, [r1, #12]
 800e686:	05db      	lsls	r3, r3, #23
 800e688:	4605      	mov	r5, r0
 800e68a:	460c      	mov	r4, r1
 800e68c:	4616      	mov	r6, r2
 800e68e:	d505      	bpl.n	800e69c <__swrite+0x1e>
 800e690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e694:	2302      	movs	r3, #2
 800e696:	2200      	movs	r2, #0
 800e698:	f000 f896 	bl	800e7c8 <_lseek_r>
 800e69c:	89a3      	ldrh	r3, [r4, #12]
 800e69e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e6a6:	81a3      	strh	r3, [r4, #12]
 800e6a8:	4632      	mov	r2, r6
 800e6aa:	463b      	mov	r3, r7
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b2:	f000 b8ad 	b.w	800e810 <_write_r>

0800e6b6 <__sseek>:
 800e6b6:	b510      	push	{r4, lr}
 800e6b8:	460c      	mov	r4, r1
 800e6ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6be:	f000 f883 	bl	800e7c8 <_lseek_r>
 800e6c2:	1c43      	adds	r3, r0, #1
 800e6c4:	89a3      	ldrh	r3, [r4, #12]
 800e6c6:	bf15      	itete	ne
 800e6c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e6ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e6ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e6d2:	81a3      	strheq	r3, [r4, #12]
 800e6d4:	bf18      	it	ne
 800e6d6:	81a3      	strhne	r3, [r4, #12]
 800e6d8:	bd10      	pop	{r4, pc}

0800e6da <__sclose>:
 800e6da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6de:	f000 b80d 	b.w	800e6fc <_close_r>

0800e6e2 <memset>:
 800e6e2:	4402      	add	r2, r0
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d100      	bne.n	800e6ec <memset+0xa>
 800e6ea:	4770      	bx	lr
 800e6ec:	f803 1b01 	strb.w	r1, [r3], #1
 800e6f0:	e7f9      	b.n	800e6e6 <memset+0x4>
	...

0800e6f4 <_localeconv_r>:
 800e6f4:	4800      	ldr	r0, [pc, #0]	; (800e6f8 <_localeconv_r+0x4>)
 800e6f6:	4770      	bx	lr
 800e6f8:	2000017c 	.word	0x2000017c

0800e6fc <_close_r>:
 800e6fc:	b538      	push	{r3, r4, r5, lr}
 800e6fe:	4d06      	ldr	r5, [pc, #24]	; (800e718 <_close_r+0x1c>)
 800e700:	2300      	movs	r3, #0
 800e702:	4604      	mov	r4, r0
 800e704:	4608      	mov	r0, r1
 800e706:	602b      	str	r3, [r5, #0]
 800e708:	f7fb f893 	bl	8009832 <_close>
 800e70c:	1c43      	adds	r3, r0, #1
 800e70e:	d102      	bne.n	800e716 <_close_r+0x1a>
 800e710:	682b      	ldr	r3, [r5, #0]
 800e712:	b103      	cbz	r3, 800e716 <_close_r+0x1a>
 800e714:	6023      	str	r3, [r4, #0]
 800e716:	bd38      	pop	{r3, r4, r5, pc}
 800e718:	20005974 	.word	0x20005974

0800e71c <_reclaim_reent>:
 800e71c:	4b29      	ldr	r3, [pc, #164]	; (800e7c4 <_reclaim_reent+0xa8>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	4283      	cmp	r3, r0
 800e722:	b570      	push	{r4, r5, r6, lr}
 800e724:	4604      	mov	r4, r0
 800e726:	d04b      	beq.n	800e7c0 <_reclaim_reent+0xa4>
 800e728:	69c3      	ldr	r3, [r0, #28]
 800e72a:	b143      	cbz	r3, 800e73e <_reclaim_reent+0x22>
 800e72c:	68db      	ldr	r3, [r3, #12]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d144      	bne.n	800e7bc <_reclaim_reent+0xa0>
 800e732:	69e3      	ldr	r3, [r4, #28]
 800e734:	6819      	ldr	r1, [r3, #0]
 800e736:	b111      	cbz	r1, 800e73e <_reclaim_reent+0x22>
 800e738:	4620      	mov	r0, r4
 800e73a:	f000 ff2f 	bl	800f59c <_free_r>
 800e73e:	6961      	ldr	r1, [r4, #20]
 800e740:	b111      	cbz	r1, 800e748 <_reclaim_reent+0x2c>
 800e742:	4620      	mov	r0, r4
 800e744:	f000 ff2a 	bl	800f59c <_free_r>
 800e748:	69e1      	ldr	r1, [r4, #28]
 800e74a:	b111      	cbz	r1, 800e752 <_reclaim_reent+0x36>
 800e74c:	4620      	mov	r0, r4
 800e74e:	f000 ff25 	bl	800f59c <_free_r>
 800e752:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e754:	b111      	cbz	r1, 800e75c <_reclaim_reent+0x40>
 800e756:	4620      	mov	r0, r4
 800e758:	f000 ff20 	bl	800f59c <_free_r>
 800e75c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e75e:	b111      	cbz	r1, 800e766 <_reclaim_reent+0x4a>
 800e760:	4620      	mov	r0, r4
 800e762:	f000 ff1b 	bl	800f59c <_free_r>
 800e766:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e768:	b111      	cbz	r1, 800e770 <_reclaim_reent+0x54>
 800e76a:	4620      	mov	r0, r4
 800e76c:	f000 ff16 	bl	800f59c <_free_r>
 800e770:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e772:	b111      	cbz	r1, 800e77a <_reclaim_reent+0x5e>
 800e774:	4620      	mov	r0, r4
 800e776:	f000 ff11 	bl	800f59c <_free_r>
 800e77a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e77c:	b111      	cbz	r1, 800e784 <_reclaim_reent+0x68>
 800e77e:	4620      	mov	r0, r4
 800e780:	f000 ff0c 	bl	800f59c <_free_r>
 800e784:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e786:	b111      	cbz	r1, 800e78e <_reclaim_reent+0x72>
 800e788:	4620      	mov	r0, r4
 800e78a:	f000 ff07 	bl	800f59c <_free_r>
 800e78e:	6a23      	ldr	r3, [r4, #32]
 800e790:	b1b3      	cbz	r3, 800e7c0 <_reclaim_reent+0xa4>
 800e792:	4620      	mov	r0, r4
 800e794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e798:	4718      	bx	r3
 800e79a:	5949      	ldr	r1, [r1, r5]
 800e79c:	b941      	cbnz	r1, 800e7b0 <_reclaim_reent+0x94>
 800e79e:	3504      	adds	r5, #4
 800e7a0:	69e3      	ldr	r3, [r4, #28]
 800e7a2:	2d80      	cmp	r5, #128	; 0x80
 800e7a4:	68d9      	ldr	r1, [r3, #12]
 800e7a6:	d1f8      	bne.n	800e79a <_reclaim_reent+0x7e>
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	f000 fef7 	bl	800f59c <_free_r>
 800e7ae:	e7c0      	b.n	800e732 <_reclaim_reent+0x16>
 800e7b0:	680e      	ldr	r6, [r1, #0]
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f000 fef2 	bl	800f59c <_free_r>
 800e7b8:	4631      	mov	r1, r6
 800e7ba:	e7ef      	b.n	800e79c <_reclaim_reent+0x80>
 800e7bc:	2500      	movs	r5, #0
 800e7be:	e7ef      	b.n	800e7a0 <_reclaim_reent+0x84>
 800e7c0:	bd70      	pop	{r4, r5, r6, pc}
 800e7c2:	bf00      	nop
 800e7c4:	20000088 	.word	0x20000088

0800e7c8 <_lseek_r>:
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	4d07      	ldr	r5, [pc, #28]	; (800e7e8 <_lseek_r+0x20>)
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	4608      	mov	r0, r1
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	602a      	str	r2, [r5, #0]
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	f7fb f852 	bl	8009880 <_lseek>
 800e7dc:	1c43      	adds	r3, r0, #1
 800e7de:	d102      	bne.n	800e7e6 <_lseek_r+0x1e>
 800e7e0:	682b      	ldr	r3, [r5, #0]
 800e7e2:	b103      	cbz	r3, 800e7e6 <_lseek_r+0x1e>
 800e7e4:	6023      	str	r3, [r4, #0]
 800e7e6:	bd38      	pop	{r3, r4, r5, pc}
 800e7e8:	20005974 	.word	0x20005974

0800e7ec <_read_r>:
 800e7ec:	b538      	push	{r3, r4, r5, lr}
 800e7ee:	4d07      	ldr	r5, [pc, #28]	; (800e80c <_read_r+0x20>)
 800e7f0:	4604      	mov	r4, r0
 800e7f2:	4608      	mov	r0, r1
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	602a      	str	r2, [r5, #0]
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	f7fa fffc 	bl	80097f8 <_read>
 800e800:	1c43      	adds	r3, r0, #1
 800e802:	d102      	bne.n	800e80a <_read_r+0x1e>
 800e804:	682b      	ldr	r3, [r5, #0]
 800e806:	b103      	cbz	r3, 800e80a <_read_r+0x1e>
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	bd38      	pop	{r3, r4, r5, pc}
 800e80c:	20005974 	.word	0x20005974

0800e810 <_write_r>:
 800e810:	b538      	push	{r3, r4, r5, lr}
 800e812:	4d07      	ldr	r5, [pc, #28]	; (800e830 <_write_r+0x20>)
 800e814:	4604      	mov	r4, r0
 800e816:	4608      	mov	r0, r1
 800e818:	4611      	mov	r1, r2
 800e81a:	2200      	movs	r2, #0
 800e81c:	602a      	str	r2, [r5, #0]
 800e81e:	461a      	mov	r2, r3
 800e820:	f7f2 fb80 	bl	8000f24 <_write>
 800e824:	1c43      	adds	r3, r0, #1
 800e826:	d102      	bne.n	800e82e <_write_r+0x1e>
 800e828:	682b      	ldr	r3, [r5, #0]
 800e82a:	b103      	cbz	r3, 800e82e <_write_r+0x1e>
 800e82c:	6023      	str	r3, [r4, #0]
 800e82e:	bd38      	pop	{r3, r4, r5, pc}
 800e830:	20005974 	.word	0x20005974

0800e834 <__errno>:
 800e834:	4b01      	ldr	r3, [pc, #4]	; (800e83c <__errno+0x8>)
 800e836:	6818      	ldr	r0, [r3, #0]
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop
 800e83c:	20000088 	.word	0x20000088

0800e840 <__libc_init_array>:
 800e840:	b570      	push	{r4, r5, r6, lr}
 800e842:	4d0d      	ldr	r5, [pc, #52]	; (800e878 <__libc_init_array+0x38>)
 800e844:	4c0d      	ldr	r4, [pc, #52]	; (800e87c <__libc_init_array+0x3c>)
 800e846:	1b64      	subs	r4, r4, r5
 800e848:	10a4      	asrs	r4, r4, #2
 800e84a:	2600      	movs	r6, #0
 800e84c:	42a6      	cmp	r6, r4
 800e84e:	d109      	bne.n	800e864 <__libc_init_array+0x24>
 800e850:	4d0b      	ldr	r5, [pc, #44]	; (800e880 <__libc_init_array+0x40>)
 800e852:	4c0c      	ldr	r4, [pc, #48]	; (800e884 <__libc_init_array+0x44>)
 800e854:	f002 f892 	bl	801097c <_init>
 800e858:	1b64      	subs	r4, r4, r5
 800e85a:	10a4      	asrs	r4, r4, #2
 800e85c:	2600      	movs	r6, #0
 800e85e:	42a6      	cmp	r6, r4
 800e860:	d105      	bne.n	800e86e <__libc_init_array+0x2e>
 800e862:	bd70      	pop	{r4, r5, r6, pc}
 800e864:	f855 3b04 	ldr.w	r3, [r5], #4
 800e868:	4798      	blx	r3
 800e86a:	3601      	adds	r6, #1
 800e86c:	e7ee      	b.n	800e84c <__libc_init_array+0xc>
 800e86e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e872:	4798      	blx	r3
 800e874:	3601      	adds	r6, #1
 800e876:	e7f2      	b.n	800e85e <__libc_init_array+0x1e>
 800e878:	0801166c 	.word	0x0801166c
 800e87c:	0801166c 	.word	0x0801166c
 800e880:	0801166c 	.word	0x0801166c
 800e884:	08011670 	.word	0x08011670

0800e888 <__retarget_lock_acquire_recursive>:
 800e888:	4770      	bx	lr

0800e88a <__retarget_lock_release_recursive>:
 800e88a:	4770      	bx	lr

0800e88c <memcpy>:
 800e88c:	440a      	add	r2, r1
 800e88e:	4291      	cmp	r1, r2
 800e890:	f100 33ff 	add.w	r3, r0, #4294967295
 800e894:	d100      	bne.n	800e898 <memcpy+0xc>
 800e896:	4770      	bx	lr
 800e898:	b510      	push	{r4, lr}
 800e89a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e89e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8a2:	4291      	cmp	r1, r2
 800e8a4:	d1f9      	bne.n	800e89a <memcpy+0xe>
 800e8a6:	bd10      	pop	{r4, pc}

0800e8a8 <quorem>:
 800e8a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ac:	6903      	ldr	r3, [r0, #16]
 800e8ae:	690c      	ldr	r4, [r1, #16]
 800e8b0:	42a3      	cmp	r3, r4
 800e8b2:	4607      	mov	r7, r0
 800e8b4:	db7e      	blt.n	800e9b4 <quorem+0x10c>
 800e8b6:	3c01      	subs	r4, #1
 800e8b8:	f101 0814 	add.w	r8, r1, #20
 800e8bc:	f100 0514 	add.w	r5, r0, #20
 800e8c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e8c4:	9301      	str	r3, [sp, #4]
 800e8c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e8ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e8d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e8da:	fbb2 f6f3 	udiv	r6, r2, r3
 800e8de:	d331      	bcc.n	800e944 <quorem+0x9c>
 800e8e0:	f04f 0e00 	mov.w	lr, #0
 800e8e4:	4640      	mov	r0, r8
 800e8e6:	46ac      	mov	ip, r5
 800e8e8:	46f2      	mov	sl, lr
 800e8ea:	f850 2b04 	ldr.w	r2, [r0], #4
 800e8ee:	b293      	uxth	r3, r2
 800e8f0:	fb06 e303 	mla	r3, r6, r3, lr
 800e8f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e8f8:	0c1a      	lsrs	r2, r3, #16
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	ebaa 0303 	sub.w	r3, sl, r3
 800e900:	f8dc a000 	ldr.w	sl, [ip]
 800e904:	fa13 f38a 	uxtah	r3, r3, sl
 800e908:	fb06 220e 	mla	r2, r6, lr, r2
 800e90c:	9300      	str	r3, [sp, #0]
 800e90e:	9b00      	ldr	r3, [sp, #0]
 800e910:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e914:	b292      	uxth	r2, r2
 800e916:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e91a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e91e:	f8bd 3000 	ldrh.w	r3, [sp]
 800e922:	4581      	cmp	r9, r0
 800e924:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e928:	f84c 3b04 	str.w	r3, [ip], #4
 800e92c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e930:	d2db      	bcs.n	800e8ea <quorem+0x42>
 800e932:	f855 300b 	ldr.w	r3, [r5, fp]
 800e936:	b92b      	cbnz	r3, 800e944 <quorem+0x9c>
 800e938:	9b01      	ldr	r3, [sp, #4]
 800e93a:	3b04      	subs	r3, #4
 800e93c:	429d      	cmp	r5, r3
 800e93e:	461a      	mov	r2, r3
 800e940:	d32c      	bcc.n	800e99c <quorem+0xf4>
 800e942:	613c      	str	r4, [r7, #16]
 800e944:	4638      	mov	r0, r7
 800e946:	f001 f9a5 	bl	800fc94 <__mcmp>
 800e94a:	2800      	cmp	r0, #0
 800e94c:	db22      	blt.n	800e994 <quorem+0xec>
 800e94e:	3601      	adds	r6, #1
 800e950:	4629      	mov	r1, r5
 800e952:	2000      	movs	r0, #0
 800e954:	f858 2b04 	ldr.w	r2, [r8], #4
 800e958:	f8d1 c000 	ldr.w	ip, [r1]
 800e95c:	b293      	uxth	r3, r2
 800e95e:	1ac3      	subs	r3, r0, r3
 800e960:	0c12      	lsrs	r2, r2, #16
 800e962:	fa13 f38c 	uxtah	r3, r3, ip
 800e966:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e96a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e96e:	b29b      	uxth	r3, r3
 800e970:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e974:	45c1      	cmp	r9, r8
 800e976:	f841 3b04 	str.w	r3, [r1], #4
 800e97a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e97e:	d2e9      	bcs.n	800e954 <quorem+0xac>
 800e980:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e984:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e988:	b922      	cbnz	r2, 800e994 <quorem+0xec>
 800e98a:	3b04      	subs	r3, #4
 800e98c:	429d      	cmp	r5, r3
 800e98e:	461a      	mov	r2, r3
 800e990:	d30a      	bcc.n	800e9a8 <quorem+0x100>
 800e992:	613c      	str	r4, [r7, #16]
 800e994:	4630      	mov	r0, r6
 800e996:	b003      	add	sp, #12
 800e998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e99c:	6812      	ldr	r2, [r2, #0]
 800e99e:	3b04      	subs	r3, #4
 800e9a0:	2a00      	cmp	r2, #0
 800e9a2:	d1ce      	bne.n	800e942 <quorem+0x9a>
 800e9a4:	3c01      	subs	r4, #1
 800e9a6:	e7c9      	b.n	800e93c <quorem+0x94>
 800e9a8:	6812      	ldr	r2, [r2, #0]
 800e9aa:	3b04      	subs	r3, #4
 800e9ac:	2a00      	cmp	r2, #0
 800e9ae:	d1f0      	bne.n	800e992 <quorem+0xea>
 800e9b0:	3c01      	subs	r4, #1
 800e9b2:	e7eb      	b.n	800e98c <quorem+0xe4>
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	e7ee      	b.n	800e996 <quorem+0xee>

0800e9b8 <_dtoa_r>:
 800e9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9bc:	ed2d 8b04 	vpush	{d8-d9}
 800e9c0:	69c5      	ldr	r5, [r0, #28]
 800e9c2:	b093      	sub	sp, #76	; 0x4c
 800e9c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e9c8:	ec57 6b10 	vmov	r6, r7, d0
 800e9cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e9d0:	9107      	str	r1, [sp, #28]
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	920a      	str	r2, [sp, #40]	; 0x28
 800e9d6:	930d      	str	r3, [sp, #52]	; 0x34
 800e9d8:	b975      	cbnz	r5, 800e9f8 <_dtoa_r+0x40>
 800e9da:	2010      	movs	r0, #16
 800e9dc:	f000 fe2a 	bl	800f634 <malloc>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	61e0      	str	r0, [r4, #28]
 800e9e4:	b920      	cbnz	r0, 800e9f0 <_dtoa_r+0x38>
 800e9e6:	4bae      	ldr	r3, [pc, #696]	; (800eca0 <_dtoa_r+0x2e8>)
 800e9e8:	21ef      	movs	r1, #239	; 0xef
 800e9ea:	48ae      	ldr	r0, [pc, #696]	; (800eca4 <_dtoa_r+0x2ec>)
 800e9ec:	f001 fc82 	bl	80102f4 <__assert_func>
 800e9f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e9f4:	6005      	str	r5, [r0, #0]
 800e9f6:	60c5      	str	r5, [r0, #12]
 800e9f8:	69e3      	ldr	r3, [r4, #28]
 800e9fa:	6819      	ldr	r1, [r3, #0]
 800e9fc:	b151      	cbz	r1, 800ea14 <_dtoa_r+0x5c>
 800e9fe:	685a      	ldr	r2, [r3, #4]
 800ea00:	604a      	str	r2, [r1, #4]
 800ea02:	2301      	movs	r3, #1
 800ea04:	4093      	lsls	r3, r2
 800ea06:	608b      	str	r3, [r1, #8]
 800ea08:	4620      	mov	r0, r4
 800ea0a:	f000 ff07 	bl	800f81c <_Bfree>
 800ea0e:	69e3      	ldr	r3, [r4, #28]
 800ea10:	2200      	movs	r2, #0
 800ea12:	601a      	str	r2, [r3, #0]
 800ea14:	1e3b      	subs	r3, r7, #0
 800ea16:	bfbb      	ittet	lt
 800ea18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ea1c:	9303      	strlt	r3, [sp, #12]
 800ea1e:	2300      	movge	r3, #0
 800ea20:	2201      	movlt	r2, #1
 800ea22:	bfac      	ite	ge
 800ea24:	f8c8 3000 	strge.w	r3, [r8]
 800ea28:	f8c8 2000 	strlt.w	r2, [r8]
 800ea2c:	4b9e      	ldr	r3, [pc, #632]	; (800eca8 <_dtoa_r+0x2f0>)
 800ea2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ea32:	ea33 0308 	bics.w	r3, r3, r8
 800ea36:	d11b      	bne.n	800ea70 <_dtoa_r+0xb8>
 800ea38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea3a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ea3e:	6013      	str	r3, [r2, #0]
 800ea40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ea44:	4333      	orrs	r3, r6
 800ea46:	f000 8593 	beq.w	800f570 <_dtoa_r+0xbb8>
 800ea4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea4c:	b963      	cbnz	r3, 800ea68 <_dtoa_r+0xb0>
 800ea4e:	4b97      	ldr	r3, [pc, #604]	; (800ecac <_dtoa_r+0x2f4>)
 800ea50:	e027      	b.n	800eaa2 <_dtoa_r+0xea>
 800ea52:	4b97      	ldr	r3, [pc, #604]	; (800ecb0 <_dtoa_r+0x2f8>)
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	3308      	adds	r3, #8
 800ea58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ea5a:	6013      	str	r3, [r2, #0]
 800ea5c:	9800      	ldr	r0, [sp, #0]
 800ea5e:	b013      	add	sp, #76	; 0x4c
 800ea60:	ecbd 8b04 	vpop	{d8-d9}
 800ea64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea68:	4b90      	ldr	r3, [pc, #576]	; (800ecac <_dtoa_r+0x2f4>)
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	3303      	adds	r3, #3
 800ea6e:	e7f3      	b.n	800ea58 <_dtoa_r+0xa0>
 800ea70:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea74:	2200      	movs	r2, #0
 800ea76:	ec51 0b17 	vmov	r0, r1, d7
 800ea7a:	eeb0 8a47 	vmov.f32	s16, s14
 800ea7e:	eef0 8a67 	vmov.f32	s17, s15
 800ea82:	2300      	movs	r3, #0
 800ea84:	f7f2 f840 	bl	8000b08 <__aeabi_dcmpeq>
 800ea88:	4681      	mov	r9, r0
 800ea8a:	b160      	cbz	r0, 800eaa6 <_dtoa_r+0xee>
 800ea8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea8e:	2301      	movs	r3, #1
 800ea90:	6013      	str	r3, [r2, #0]
 800ea92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	f000 8568 	beq.w	800f56a <_dtoa_r+0xbb2>
 800ea9a:	4b86      	ldr	r3, [pc, #536]	; (800ecb4 <_dtoa_r+0x2fc>)
 800ea9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ea9e:	6013      	str	r3, [r2, #0]
 800eaa0:	3b01      	subs	r3, #1
 800eaa2:	9300      	str	r3, [sp, #0]
 800eaa4:	e7da      	b.n	800ea5c <_dtoa_r+0xa4>
 800eaa6:	aa10      	add	r2, sp, #64	; 0x40
 800eaa8:	a911      	add	r1, sp, #68	; 0x44
 800eaaa:	4620      	mov	r0, r4
 800eaac:	eeb0 0a48 	vmov.f32	s0, s16
 800eab0:	eef0 0a68 	vmov.f32	s1, s17
 800eab4:	f001 f994 	bl	800fde0 <__d2b>
 800eab8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800eabc:	4682      	mov	sl, r0
 800eabe:	2d00      	cmp	r5, #0
 800eac0:	d07f      	beq.n	800ebc2 <_dtoa_r+0x20a>
 800eac2:	ee18 3a90 	vmov	r3, s17
 800eac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eaca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800eace:	ec51 0b18 	vmov	r0, r1, d8
 800ead2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ead6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800eada:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800eade:	4619      	mov	r1, r3
 800eae0:	2200      	movs	r2, #0
 800eae2:	4b75      	ldr	r3, [pc, #468]	; (800ecb8 <_dtoa_r+0x300>)
 800eae4:	f7f1 fbf0 	bl	80002c8 <__aeabi_dsub>
 800eae8:	a367      	add	r3, pc, #412	; (adr r3, 800ec88 <_dtoa_r+0x2d0>)
 800eaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaee:	f7f1 fda3 	bl	8000638 <__aeabi_dmul>
 800eaf2:	a367      	add	r3, pc, #412	; (adr r3, 800ec90 <_dtoa_r+0x2d8>)
 800eaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf8:	f7f1 fbe8 	bl	80002cc <__adddf3>
 800eafc:	4606      	mov	r6, r0
 800eafe:	4628      	mov	r0, r5
 800eb00:	460f      	mov	r7, r1
 800eb02:	f7f1 fd2f 	bl	8000564 <__aeabi_i2d>
 800eb06:	a364      	add	r3, pc, #400	; (adr r3, 800ec98 <_dtoa_r+0x2e0>)
 800eb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0c:	f7f1 fd94 	bl	8000638 <__aeabi_dmul>
 800eb10:	4602      	mov	r2, r0
 800eb12:	460b      	mov	r3, r1
 800eb14:	4630      	mov	r0, r6
 800eb16:	4639      	mov	r1, r7
 800eb18:	f7f1 fbd8 	bl	80002cc <__adddf3>
 800eb1c:	4606      	mov	r6, r0
 800eb1e:	460f      	mov	r7, r1
 800eb20:	f7f2 f83a 	bl	8000b98 <__aeabi_d2iz>
 800eb24:	2200      	movs	r2, #0
 800eb26:	4683      	mov	fp, r0
 800eb28:	2300      	movs	r3, #0
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	4639      	mov	r1, r7
 800eb2e:	f7f1 fff5 	bl	8000b1c <__aeabi_dcmplt>
 800eb32:	b148      	cbz	r0, 800eb48 <_dtoa_r+0x190>
 800eb34:	4658      	mov	r0, fp
 800eb36:	f7f1 fd15 	bl	8000564 <__aeabi_i2d>
 800eb3a:	4632      	mov	r2, r6
 800eb3c:	463b      	mov	r3, r7
 800eb3e:	f7f1 ffe3 	bl	8000b08 <__aeabi_dcmpeq>
 800eb42:	b908      	cbnz	r0, 800eb48 <_dtoa_r+0x190>
 800eb44:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb48:	f1bb 0f16 	cmp.w	fp, #22
 800eb4c:	d857      	bhi.n	800ebfe <_dtoa_r+0x246>
 800eb4e:	4b5b      	ldr	r3, [pc, #364]	; (800ecbc <_dtoa_r+0x304>)
 800eb50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb58:	ec51 0b18 	vmov	r0, r1, d8
 800eb5c:	f7f1 ffde 	bl	8000b1c <__aeabi_dcmplt>
 800eb60:	2800      	cmp	r0, #0
 800eb62:	d04e      	beq.n	800ec02 <_dtoa_r+0x24a>
 800eb64:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb68:	2300      	movs	r3, #0
 800eb6a:	930c      	str	r3, [sp, #48]	; 0x30
 800eb6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb6e:	1b5b      	subs	r3, r3, r5
 800eb70:	1e5a      	subs	r2, r3, #1
 800eb72:	bf45      	ittet	mi
 800eb74:	f1c3 0301 	rsbmi	r3, r3, #1
 800eb78:	9305      	strmi	r3, [sp, #20]
 800eb7a:	2300      	movpl	r3, #0
 800eb7c:	2300      	movmi	r3, #0
 800eb7e:	9206      	str	r2, [sp, #24]
 800eb80:	bf54      	ite	pl
 800eb82:	9305      	strpl	r3, [sp, #20]
 800eb84:	9306      	strmi	r3, [sp, #24]
 800eb86:	f1bb 0f00 	cmp.w	fp, #0
 800eb8a:	db3c      	blt.n	800ec06 <_dtoa_r+0x24e>
 800eb8c:	9b06      	ldr	r3, [sp, #24]
 800eb8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800eb92:	445b      	add	r3, fp
 800eb94:	9306      	str	r3, [sp, #24]
 800eb96:	2300      	movs	r3, #0
 800eb98:	9308      	str	r3, [sp, #32]
 800eb9a:	9b07      	ldr	r3, [sp, #28]
 800eb9c:	2b09      	cmp	r3, #9
 800eb9e:	d868      	bhi.n	800ec72 <_dtoa_r+0x2ba>
 800eba0:	2b05      	cmp	r3, #5
 800eba2:	bfc4      	itt	gt
 800eba4:	3b04      	subgt	r3, #4
 800eba6:	9307      	strgt	r3, [sp, #28]
 800eba8:	9b07      	ldr	r3, [sp, #28]
 800ebaa:	f1a3 0302 	sub.w	r3, r3, #2
 800ebae:	bfcc      	ite	gt
 800ebb0:	2500      	movgt	r5, #0
 800ebb2:	2501      	movle	r5, #1
 800ebb4:	2b03      	cmp	r3, #3
 800ebb6:	f200 8085 	bhi.w	800ecc4 <_dtoa_r+0x30c>
 800ebba:	e8df f003 	tbb	[pc, r3]
 800ebbe:	3b2e      	.short	0x3b2e
 800ebc0:	5839      	.short	0x5839
 800ebc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ebc6:	441d      	add	r5, r3
 800ebc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ebcc:	2b20      	cmp	r3, #32
 800ebce:	bfc1      	itttt	gt
 800ebd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ebd4:	fa08 f803 	lslgt.w	r8, r8, r3
 800ebd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ebdc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ebe0:	bfd6      	itet	le
 800ebe2:	f1c3 0320 	rsble	r3, r3, #32
 800ebe6:	ea48 0003 	orrgt.w	r0, r8, r3
 800ebea:	fa06 f003 	lslle.w	r0, r6, r3
 800ebee:	f7f1 fca9 	bl	8000544 <__aeabi_ui2d>
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ebf8:	3d01      	subs	r5, #1
 800ebfa:	920e      	str	r2, [sp, #56]	; 0x38
 800ebfc:	e76f      	b.n	800eade <_dtoa_r+0x126>
 800ebfe:	2301      	movs	r3, #1
 800ec00:	e7b3      	b.n	800eb6a <_dtoa_r+0x1b2>
 800ec02:	900c      	str	r0, [sp, #48]	; 0x30
 800ec04:	e7b2      	b.n	800eb6c <_dtoa_r+0x1b4>
 800ec06:	9b05      	ldr	r3, [sp, #20]
 800ec08:	eba3 030b 	sub.w	r3, r3, fp
 800ec0c:	9305      	str	r3, [sp, #20]
 800ec0e:	f1cb 0300 	rsb	r3, fp, #0
 800ec12:	9308      	str	r3, [sp, #32]
 800ec14:	2300      	movs	r3, #0
 800ec16:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec18:	e7bf      	b.n	800eb9a <_dtoa_r+0x1e2>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	dc52      	bgt.n	800ecca <_dtoa_r+0x312>
 800ec24:	2301      	movs	r3, #1
 800ec26:	9301      	str	r3, [sp, #4]
 800ec28:	9304      	str	r3, [sp, #16]
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	920a      	str	r2, [sp, #40]	; 0x28
 800ec2e:	e00b      	b.n	800ec48 <_dtoa_r+0x290>
 800ec30:	2301      	movs	r3, #1
 800ec32:	e7f3      	b.n	800ec1c <_dtoa_r+0x264>
 800ec34:	2300      	movs	r3, #0
 800ec36:	9309      	str	r3, [sp, #36]	; 0x24
 800ec38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec3a:	445b      	add	r3, fp
 800ec3c:	9301      	str	r3, [sp, #4]
 800ec3e:	3301      	adds	r3, #1
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	9304      	str	r3, [sp, #16]
 800ec44:	bfb8      	it	lt
 800ec46:	2301      	movlt	r3, #1
 800ec48:	69e0      	ldr	r0, [r4, #28]
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	2204      	movs	r2, #4
 800ec4e:	f102 0614 	add.w	r6, r2, #20
 800ec52:	429e      	cmp	r6, r3
 800ec54:	d93d      	bls.n	800ecd2 <_dtoa_r+0x31a>
 800ec56:	6041      	str	r1, [r0, #4]
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f000 fd9f 	bl	800f79c <_Balloc>
 800ec5e:	9000      	str	r0, [sp, #0]
 800ec60:	2800      	cmp	r0, #0
 800ec62:	d139      	bne.n	800ecd8 <_dtoa_r+0x320>
 800ec64:	4b16      	ldr	r3, [pc, #88]	; (800ecc0 <_dtoa_r+0x308>)
 800ec66:	4602      	mov	r2, r0
 800ec68:	f240 11af 	movw	r1, #431	; 0x1af
 800ec6c:	e6bd      	b.n	800e9ea <_dtoa_r+0x32>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e7e1      	b.n	800ec36 <_dtoa_r+0x27e>
 800ec72:	2501      	movs	r5, #1
 800ec74:	2300      	movs	r3, #0
 800ec76:	9307      	str	r3, [sp, #28]
 800ec78:	9509      	str	r5, [sp, #36]	; 0x24
 800ec7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec7e:	9301      	str	r3, [sp, #4]
 800ec80:	9304      	str	r3, [sp, #16]
 800ec82:	2200      	movs	r2, #0
 800ec84:	2312      	movs	r3, #18
 800ec86:	e7d1      	b.n	800ec2c <_dtoa_r+0x274>
 800ec88:	636f4361 	.word	0x636f4361
 800ec8c:	3fd287a7 	.word	0x3fd287a7
 800ec90:	8b60c8b3 	.word	0x8b60c8b3
 800ec94:	3fc68a28 	.word	0x3fc68a28
 800ec98:	509f79fb 	.word	0x509f79fb
 800ec9c:	3fd34413 	.word	0x3fd34413
 800eca0:	08011335 	.word	0x08011335
 800eca4:	0801134c 	.word	0x0801134c
 800eca8:	7ff00000 	.word	0x7ff00000
 800ecac:	08011331 	.word	0x08011331
 800ecb0:	08011328 	.word	0x08011328
 800ecb4:	08011305 	.word	0x08011305
 800ecb8:	3ff80000 	.word	0x3ff80000
 800ecbc:	08011438 	.word	0x08011438
 800ecc0:	080113a4 	.word	0x080113a4
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	9309      	str	r3, [sp, #36]	; 0x24
 800ecc8:	e7d7      	b.n	800ec7a <_dtoa_r+0x2c2>
 800ecca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eccc:	9301      	str	r3, [sp, #4]
 800ecce:	9304      	str	r3, [sp, #16]
 800ecd0:	e7ba      	b.n	800ec48 <_dtoa_r+0x290>
 800ecd2:	3101      	adds	r1, #1
 800ecd4:	0052      	lsls	r2, r2, #1
 800ecd6:	e7ba      	b.n	800ec4e <_dtoa_r+0x296>
 800ecd8:	69e3      	ldr	r3, [r4, #28]
 800ecda:	9a00      	ldr	r2, [sp, #0]
 800ecdc:	601a      	str	r2, [r3, #0]
 800ecde:	9b04      	ldr	r3, [sp, #16]
 800ece0:	2b0e      	cmp	r3, #14
 800ece2:	f200 80a8 	bhi.w	800ee36 <_dtoa_r+0x47e>
 800ece6:	2d00      	cmp	r5, #0
 800ece8:	f000 80a5 	beq.w	800ee36 <_dtoa_r+0x47e>
 800ecec:	f1bb 0f00 	cmp.w	fp, #0
 800ecf0:	dd38      	ble.n	800ed64 <_dtoa_r+0x3ac>
 800ecf2:	4bc0      	ldr	r3, [pc, #768]	; (800eff4 <_dtoa_r+0x63c>)
 800ecf4:	f00b 020f 	and.w	r2, fp, #15
 800ecf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ed00:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ed04:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ed08:	d019      	beq.n	800ed3e <_dtoa_r+0x386>
 800ed0a:	4bbb      	ldr	r3, [pc, #748]	; (800eff8 <_dtoa_r+0x640>)
 800ed0c:	ec51 0b18 	vmov	r0, r1, d8
 800ed10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed14:	f7f1 fdba 	bl	800088c <__aeabi_ddiv>
 800ed18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed1c:	f008 080f 	and.w	r8, r8, #15
 800ed20:	2503      	movs	r5, #3
 800ed22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800eff8 <_dtoa_r+0x640>
 800ed26:	f1b8 0f00 	cmp.w	r8, #0
 800ed2a:	d10a      	bne.n	800ed42 <_dtoa_r+0x38a>
 800ed2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed30:	4632      	mov	r2, r6
 800ed32:	463b      	mov	r3, r7
 800ed34:	f7f1 fdaa 	bl	800088c <__aeabi_ddiv>
 800ed38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed3c:	e02b      	b.n	800ed96 <_dtoa_r+0x3de>
 800ed3e:	2502      	movs	r5, #2
 800ed40:	e7ef      	b.n	800ed22 <_dtoa_r+0x36a>
 800ed42:	f018 0f01 	tst.w	r8, #1
 800ed46:	d008      	beq.n	800ed5a <_dtoa_r+0x3a2>
 800ed48:	4630      	mov	r0, r6
 800ed4a:	4639      	mov	r1, r7
 800ed4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ed50:	f7f1 fc72 	bl	8000638 <__aeabi_dmul>
 800ed54:	3501      	adds	r5, #1
 800ed56:	4606      	mov	r6, r0
 800ed58:	460f      	mov	r7, r1
 800ed5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ed5e:	f109 0908 	add.w	r9, r9, #8
 800ed62:	e7e0      	b.n	800ed26 <_dtoa_r+0x36e>
 800ed64:	f000 809f 	beq.w	800eea6 <_dtoa_r+0x4ee>
 800ed68:	f1cb 0600 	rsb	r6, fp, #0
 800ed6c:	4ba1      	ldr	r3, [pc, #644]	; (800eff4 <_dtoa_r+0x63c>)
 800ed6e:	4fa2      	ldr	r7, [pc, #648]	; (800eff8 <_dtoa_r+0x640>)
 800ed70:	f006 020f 	and.w	r2, r6, #15
 800ed74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7c:	ec51 0b18 	vmov	r0, r1, d8
 800ed80:	f7f1 fc5a 	bl	8000638 <__aeabi_dmul>
 800ed84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed88:	1136      	asrs	r6, r6, #4
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	2502      	movs	r5, #2
 800ed8e:	2e00      	cmp	r6, #0
 800ed90:	d17e      	bne.n	800ee90 <_dtoa_r+0x4d8>
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1d0      	bne.n	800ed38 <_dtoa_r+0x380>
 800ed96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f000 8084 	beq.w	800eeaa <_dtoa_r+0x4f2>
 800eda2:	4b96      	ldr	r3, [pc, #600]	; (800effc <_dtoa_r+0x644>)
 800eda4:	2200      	movs	r2, #0
 800eda6:	4640      	mov	r0, r8
 800eda8:	4649      	mov	r1, r9
 800edaa:	f7f1 feb7 	bl	8000b1c <__aeabi_dcmplt>
 800edae:	2800      	cmp	r0, #0
 800edb0:	d07b      	beq.n	800eeaa <_dtoa_r+0x4f2>
 800edb2:	9b04      	ldr	r3, [sp, #16]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d078      	beq.n	800eeaa <_dtoa_r+0x4f2>
 800edb8:	9b01      	ldr	r3, [sp, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	dd39      	ble.n	800ee32 <_dtoa_r+0x47a>
 800edbe:	4b90      	ldr	r3, [pc, #576]	; (800f000 <_dtoa_r+0x648>)
 800edc0:	2200      	movs	r2, #0
 800edc2:	4640      	mov	r0, r8
 800edc4:	4649      	mov	r1, r9
 800edc6:	f7f1 fc37 	bl	8000638 <__aeabi_dmul>
 800edca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edce:	9e01      	ldr	r6, [sp, #4]
 800edd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800edd4:	3501      	adds	r5, #1
 800edd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800edda:	4628      	mov	r0, r5
 800eddc:	f7f1 fbc2 	bl	8000564 <__aeabi_i2d>
 800ede0:	4642      	mov	r2, r8
 800ede2:	464b      	mov	r3, r9
 800ede4:	f7f1 fc28 	bl	8000638 <__aeabi_dmul>
 800ede8:	4b86      	ldr	r3, [pc, #536]	; (800f004 <_dtoa_r+0x64c>)
 800edea:	2200      	movs	r2, #0
 800edec:	f7f1 fa6e 	bl	80002cc <__adddf3>
 800edf0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800edf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edf8:	9303      	str	r3, [sp, #12]
 800edfa:	2e00      	cmp	r6, #0
 800edfc:	d158      	bne.n	800eeb0 <_dtoa_r+0x4f8>
 800edfe:	4b82      	ldr	r3, [pc, #520]	; (800f008 <_dtoa_r+0x650>)
 800ee00:	2200      	movs	r2, #0
 800ee02:	4640      	mov	r0, r8
 800ee04:	4649      	mov	r1, r9
 800ee06:	f7f1 fa5f 	bl	80002c8 <__aeabi_dsub>
 800ee0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee0e:	4680      	mov	r8, r0
 800ee10:	4689      	mov	r9, r1
 800ee12:	f7f1 fea1 	bl	8000b58 <__aeabi_dcmpgt>
 800ee16:	2800      	cmp	r0, #0
 800ee18:	f040 8296 	bne.w	800f348 <_dtoa_r+0x990>
 800ee1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ee20:	4640      	mov	r0, r8
 800ee22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee26:	4649      	mov	r1, r9
 800ee28:	f7f1 fe78 	bl	8000b1c <__aeabi_dcmplt>
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	f040 8289 	bne.w	800f344 <_dtoa_r+0x98c>
 800ee32:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ee36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	f2c0 814e 	blt.w	800f0da <_dtoa_r+0x722>
 800ee3e:	f1bb 0f0e 	cmp.w	fp, #14
 800ee42:	f300 814a 	bgt.w	800f0da <_dtoa_r+0x722>
 800ee46:	4b6b      	ldr	r3, [pc, #428]	; (800eff4 <_dtoa_r+0x63c>)
 800ee48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ee4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	f280 80dc 	bge.w	800f010 <_dtoa_r+0x658>
 800ee58:	9b04      	ldr	r3, [sp, #16]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	f300 80d8 	bgt.w	800f010 <_dtoa_r+0x658>
 800ee60:	f040 826f 	bne.w	800f342 <_dtoa_r+0x98a>
 800ee64:	4b68      	ldr	r3, [pc, #416]	; (800f008 <_dtoa_r+0x650>)
 800ee66:	2200      	movs	r2, #0
 800ee68:	4640      	mov	r0, r8
 800ee6a:	4649      	mov	r1, r9
 800ee6c:	f7f1 fbe4 	bl	8000638 <__aeabi_dmul>
 800ee70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee74:	f7f1 fe66 	bl	8000b44 <__aeabi_dcmpge>
 800ee78:	9e04      	ldr	r6, [sp, #16]
 800ee7a:	4637      	mov	r7, r6
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	f040 8245 	bne.w	800f30c <_dtoa_r+0x954>
 800ee82:	9d00      	ldr	r5, [sp, #0]
 800ee84:	2331      	movs	r3, #49	; 0x31
 800ee86:	f805 3b01 	strb.w	r3, [r5], #1
 800ee8a:	f10b 0b01 	add.w	fp, fp, #1
 800ee8e:	e241      	b.n	800f314 <_dtoa_r+0x95c>
 800ee90:	07f2      	lsls	r2, r6, #31
 800ee92:	d505      	bpl.n	800eea0 <_dtoa_r+0x4e8>
 800ee94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee98:	f7f1 fbce 	bl	8000638 <__aeabi_dmul>
 800ee9c:	3501      	adds	r5, #1
 800ee9e:	2301      	movs	r3, #1
 800eea0:	1076      	asrs	r6, r6, #1
 800eea2:	3708      	adds	r7, #8
 800eea4:	e773      	b.n	800ed8e <_dtoa_r+0x3d6>
 800eea6:	2502      	movs	r5, #2
 800eea8:	e775      	b.n	800ed96 <_dtoa_r+0x3de>
 800eeaa:	9e04      	ldr	r6, [sp, #16]
 800eeac:	465f      	mov	r7, fp
 800eeae:	e792      	b.n	800edd6 <_dtoa_r+0x41e>
 800eeb0:	9900      	ldr	r1, [sp, #0]
 800eeb2:	4b50      	ldr	r3, [pc, #320]	; (800eff4 <_dtoa_r+0x63c>)
 800eeb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eeb8:	4431      	add	r1, r6
 800eeba:	9102      	str	r1, [sp, #8]
 800eebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eebe:	eeb0 9a47 	vmov.f32	s18, s14
 800eec2:	eef0 9a67 	vmov.f32	s19, s15
 800eec6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800eeca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eece:	2900      	cmp	r1, #0
 800eed0:	d044      	beq.n	800ef5c <_dtoa_r+0x5a4>
 800eed2:	494e      	ldr	r1, [pc, #312]	; (800f00c <_dtoa_r+0x654>)
 800eed4:	2000      	movs	r0, #0
 800eed6:	f7f1 fcd9 	bl	800088c <__aeabi_ddiv>
 800eeda:	ec53 2b19 	vmov	r2, r3, d9
 800eede:	f7f1 f9f3 	bl	80002c8 <__aeabi_dsub>
 800eee2:	9d00      	ldr	r5, [sp, #0]
 800eee4:	ec41 0b19 	vmov	d9, r0, r1
 800eee8:	4649      	mov	r1, r9
 800eeea:	4640      	mov	r0, r8
 800eeec:	f7f1 fe54 	bl	8000b98 <__aeabi_d2iz>
 800eef0:	4606      	mov	r6, r0
 800eef2:	f7f1 fb37 	bl	8000564 <__aeabi_i2d>
 800eef6:	4602      	mov	r2, r0
 800eef8:	460b      	mov	r3, r1
 800eefa:	4640      	mov	r0, r8
 800eefc:	4649      	mov	r1, r9
 800eefe:	f7f1 f9e3 	bl	80002c8 <__aeabi_dsub>
 800ef02:	3630      	adds	r6, #48	; 0x30
 800ef04:	f805 6b01 	strb.w	r6, [r5], #1
 800ef08:	ec53 2b19 	vmov	r2, r3, d9
 800ef0c:	4680      	mov	r8, r0
 800ef0e:	4689      	mov	r9, r1
 800ef10:	f7f1 fe04 	bl	8000b1c <__aeabi_dcmplt>
 800ef14:	2800      	cmp	r0, #0
 800ef16:	d164      	bne.n	800efe2 <_dtoa_r+0x62a>
 800ef18:	4642      	mov	r2, r8
 800ef1a:	464b      	mov	r3, r9
 800ef1c:	4937      	ldr	r1, [pc, #220]	; (800effc <_dtoa_r+0x644>)
 800ef1e:	2000      	movs	r0, #0
 800ef20:	f7f1 f9d2 	bl	80002c8 <__aeabi_dsub>
 800ef24:	ec53 2b19 	vmov	r2, r3, d9
 800ef28:	f7f1 fdf8 	bl	8000b1c <__aeabi_dcmplt>
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	f040 80b6 	bne.w	800f09e <_dtoa_r+0x6e6>
 800ef32:	9b02      	ldr	r3, [sp, #8]
 800ef34:	429d      	cmp	r5, r3
 800ef36:	f43f af7c 	beq.w	800ee32 <_dtoa_r+0x47a>
 800ef3a:	4b31      	ldr	r3, [pc, #196]	; (800f000 <_dtoa_r+0x648>)
 800ef3c:	ec51 0b19 	vmov	r0, r1, d9
 800ef40:	2200      	movs	r2, #0
 800ef42:	f7f1 fb79 	bl	8000638 <__aeabi_dmul>
 800ef46:	4b2e      	ldr	r3, [pc, #184]	; (800f000 <_dtoa_r+0x648>)
 800ef48:	ec41 0b19 	vmov	d9, r0, r1
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	4640      	mov	r0, r8
 800ef50:	4649      	mov	r1, r9
 800ef52:	f7f1 fb71 	bl	8000638 <__aeabi_dmul>
 800ef56:	4680      	mov	r8, r0
 800ef58:	4689      	mov	r9, r1
 800ef5a:	e7c5      	b.n	800eee8 <_dtoa_r+0x530>
 800ef5c:	ec51 0b17 	vmov	r0, r1, d7
 800ef60:	f7f1 fb6a 	bl	8000638 <__aeabi_dmul>
 800ef64:	9b02      	ldr	r3, [sp, #8]
 800ef66:	9d00      	ldr	r5, [sp, #0]
 800ef68:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef6a:	ec41 0b19 	vmov	d9, r0, r1
 800ef6e:	4649      	mov	r1, r9
 800ef70:	4640      	mov	r0, r8
 800ef72:	f7f1 fe11 	bl	8000b98 <__aeabi_d2iz>
 800ef76:	4606      	mov	r6, r0
 800ef78:	f7f1 faf4 	bl	8000564 <__aeabi_i2d>
 800ef7c:	3630      	adds	r6, #48	; 0x30
 800ef7e:	4602      	mov	r2, r0
 800ef80:	460b      	mov	r3, r1
 800ef82:	4640      	mov	r0, r8
 800ef84:	4649      	mov	r1, r9
 800ef86:	f7f1 f99f 	bl	80002c8 <__aeabi_dsub>
 800ef8a:	f805 6b01 	strb.w	r6, [r5], #1
 800ef8e:	9b02      	ldr	r3, [sp, #8]
 800ef90:	429d      	cmp	r5, r3
 800ef92:	4680      	mov	r8, r0
 800ef94:	4689      	mov	r9, r1
 800ef96:	f04f 0200 	mov.w	r2, #0
 800ef9a:	d124      	bne.n	800efe6 <_dtoa_r+0x62e>
 800ef9c:	4b1b      	ldr	r3, [pc, #108]	; (800f00c <_dtoa_r+0x654>)
 800ef9e:	ec51 0b19 	vmov	r0, r1, d9
 800efa2:	f7f1 f993 	bl	80002cc <__adddf3>
 800efa6:	4602      	mov	r2, r0
 800efa8:	460b      	mov	r3, r1
 800efaa:	4640      	mov	r0, r8
 800efac:	4649      	mov	r1, r9
 800efae:	f7f1 fdd3 	bl	8000b58 <__aeabi_dcmpgt>
 800efb2:	2800      	cmp	r0, #0
 800efb4:	d173      	bne.n	800f09e <_dtoa_r+0x6e6>
 800efb6:	ec53 2b19 	vmov	r2, r3, d9
 800efba:	4914      	ldr	r1, [pc, #80]	; (800f00c <_dtoa_r+0x654>)
 800efbc:	2000      	movs	r0, #0
 800efbe:	f7f1 f983 	bl	80002c8 <__aeabi_dsub>
 800efc2:	4602      	mov	r2, r0
 800efc4:	460b      	mov	r3, r1
 800efc6:	4640      	mov	r0, r8
 800efc8:	4649      	mov	r1, r9
 800efca:	f7f1 fda7 	bl	8000b1c <__aeabi_dcmplt>
 800efce:	2800      	cmp	r0, #0
 800efd0:	f43f af2f 	beq.w	800ee32 <_dtoa_r+0x47a>
 800efd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800efd6:	1e6b      	subs	r3, r5, #1
 800efd8:	930f      	str	r3, [sp, #60]	; 0x3c
 800efda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800efde:	2b30      	cmp	r3, #48	; 0x30
 800efe0:	d0f8      	beq.n	800efd4 <_dtoa_r+0x61c>
 800efe2:	46bb      	mov	fp, r7
 800efe4:	e04a      	b.n	800f07c <_dtoa_r+0x6c4>
 800efe6:	4b06      	ldr	r3, [pc, #24]	; (800f000 <_dtoa_r+0x648>)
 800efe8:	f7f1 fb26 	bl	8000638 <__aeabi_dmul>
 800efec:	4680      	mov	r8, r0
 800efee:	4689      	mov	r9, r1
 800eff0:	e7bd      	b.n	800ef6e <_dtoa_r+0x5b6>
 800eff2:	bf00      	nop
 800eff4:	08011438 	.word	0x08011438
 800eff8:	08011410 	.word	0x08011410
 800effc:	3ff00000 	.word	0x3ff00000
 800f000:	40240000 	.word	0x40240000
 800f004:	401c0000 	.word	0x401c0000
 800f008:	40140000 	.word	0x40140000
 800f00c:	3fe00000 	.word	0x3fe00000
 800f010:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f014:	9d00      	ldr	r5, [sp, #0]
 800f016:	4642      	mov	r2, r8
 800f018:	464b      	mov	r3, r9
 800f01a:	4630      	mov	r0, r6
 800f01c:	4639      	mov	r1, r7
 800f01e:	f7f1 fc35 	bl	800088c <__aeabi_ddiv>
 800f022:	f7f1 fdb9 	bl	8000b98 <__aeabi_d2iz>
 800f026:	9001      	str	r0, [sp, #4]
 800f028:	f7f1 fa9c 	bl	8000564 <__aeabi_i2d>
 800f02c:	4642      	mov	r2, r8
 800f02e:	464b      	mov	r3, r9
 800f030:	f7f1 fb02 	bl	8000638 <__aeabi_dmul>
 800f034:	4602      	mov	r2, r0
 800f036:	460b      	mov	r3, r1
 800f038:	4630      	mov	r0, r6
 800f03a:	4639      	mov	r1, r7
 800f03c:	f7f1 f944 	bl	80002c8 <__aeabi_dsub>
 800f040:	9e01      	ldr	r6, [sp, #4]
 800f042:	9f04      	ldr	r7, [sp, #16]
 800f044:	3630      	adds	r6, #48	; 0x30
 800f046:	f805 6b01 	strb.w	r6, [r5], #1
 800f04a:	9e00      	ldr	r6, [sp, #0]
 800f04c:	1bae      	subs	r6, r5, r6
 800f04e:	42b7      	cmp	r7, r6
 800f050:	4602      	mov	r2, r0
 800f052:	460b      	mov	r3, r1
 800f054:	d134      	bne.n	800f0c0 <_dtoa_r+0x708>
 800f056:	f7f1 f939 	bl	80002cc <__adddf3>
 800f05a:	4642      	mov	r2, r8
 800f05c:	464b      	mov	r3, r9
 800f05e:	4606      	mov	r6, r0
 800f060:	460f      	mov	r7, r1
 800f062:	f7f1 fd79 	bl	8000b58 <__aeabi_dcmpgt>
 800f066:	b9c8      	cbnz	r0, 800f09c <_dtoa_r+0x6e4>
 800f068:	4642      	mov	r2, r8
 800f06a:	464b      	mov	r3, r9
 800f06c:	4630      	mov	r0, r6
 800f06e:	4639      	mov	r1, r7
 800f070:	f7f1 fd4a 	bl	8000b08 <__aeabi_dcmpeq>
 800f074:	b110      	cbz	r0, 800f07c <_dtoa_r+0x6c4>
 800f076:	9b01      	ldr	r3, [sp, #4]
 800f078:	07db      	lsls	r3, r3, #31
 800f07a:	d40f      	bmi.n	800f09c <_dtoa_r+0x6e4>
 800f07c:	4651      	mov	r1, sl
 800f07e:	4620      	mov	r0, r4
 800f080:	f000 fbcc 	bl	800f81c <_Bfree>
 800f084:	2300      	movs	r3, #0
 800f086:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f088:	702b      	strb	r3, [r5, #0]
 800f08a:	f10b 0301 	add.w	r3, fp, #1
 800f08e:	6013      	str	r3, [r2, #0]
 800f090:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f092:	2b00      	cmp	r3, #0
 800f094:	f43f ace2 	beq.w	800ea5c <_dtoa_r+0xa4>
 800f098:	601d      	str	r5, [r3, #0]
 800f09a:	e4df      	b.n	800ea5c <_dtoa_r+0xa4>
 800f09c:	465f      	mov	r7, fp
 800f09e:	462b      	mov	r3, r5
 800f0a0:	461d      	mov	r5, r3
 800f0a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0a6:	2a39      	cmp	r2, #57	; 0x39
 800f0a8:	d106      	bne.n	800f0b8 <_dtoa_r+0x700>
 800f0aa:	9a00      	ldr	r2, [sp, #0]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d1f7      	bne.n	800f0a0 <_dtoa_r+0x6e8>
 800f0b0:	9900      	ldr	r1, [sp, #0]
 800f0b2:	2230      	movs	r2, #48	; 0x30
 800f0b4:	3701      	adds	r7, #1
 800f0b6:	700a      	strb	r2, [r1, #0]
 800f0b8:	781a      	ldrb	r2, [r3, #0]
 800f0ba:	3201      	adds	r2, #1
 800f0bc:	701a      	strb	r2, [r3, #0]
 800f0be:	e790      	b.n	800efe2 <_dtoa_r+0x62a>
 800f0c0:	4ba3      	ldr	r3, [pc, #652]	; (800f350 <_dtoa_r+0x998>)
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f7f1 fab8 	bl	8000638 <__aeabi_dmul>
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	4606      	mov	r6, r0
 800f0ce:	460f      	mov	r7, r1
 800f0d0:	f7f1 fd1a 	bl	8000b08 <__aeabi_dcmpeq>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	d09e      	beq.n	800f016 <_dtoa_r+0x65e>
 800f0d8:	e7d0      	b.n	800f07c <_dtoa_r+0x6c4>
 800f0da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0dc:	2a00      	cmp	r2, #0
 800f0de:	f000 80ca 	beq.w	800f276 <_dtoa_r+0x8be>
 800f0e2:	9a07      	ldr	r2, [sp, #28]
 800f0e4:	2a01      	cmp	r2, #1
 800f0e6:	f300 80ad 	bgt.w	800f244 <_dtoa_r+0x88c>
 800f0ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0ec:	2a00      	cmp	r2, #0
 800f0ee:	f000 80a5 	beq.w	800f23c <_dtoa_r+0x884>
 800f0f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f0f6:	9e08      	ldr	r6, [sp, #32]
 800f0f8:	9d05      	ldr	r5, [sp, #20]
 800f0fa:	9a05      	ldr	r2, [sp, #20]
 800f0fc:	441a      	add	r2, r3
 800f0fe:	9205      	str	r2, [sp, #20]
 800f100:	9a06      	ldr	r2, [sp, #24]
 800f102:	2101      	movs	r1, #1
 800f104:	441a      	add	r2, r3
 800f106:	4620      	mov	r0, r4
 800f108:	9206      	str	r2, [sp, #24]
 800f10a:	f000 fc3d 	bl	800f988 <__i2b>
 800f10e:	4607      	mov	r7, r0
 800f110:	b165      	cbz	r5, 800f12c <_dtoa_r+0x774>
 800f112:	9b06      	ldr	r3, [sp, #24]
 800f114:	2b00      	cmp	r3, #0
 800f116:	dd09      	ble.n	800f12c <_dtoa_r+0x774>
 800f118:	42ab      	cmp	r3, r5
 800f11a:	9a05      	ldr	r2, [sp, #20]
 800f11c:	bfa8      	it	ge
 800f11e:	462b      	movge	r3, r5
 800f120:	1ad2      	subs	r2, r2, r3
 800f122:	9205      	str	r2, [sp, #20]
 800f124:	9a06      	ldr	r2, [sp, #24]
 800f126:	1aed      	subs	r5, r5, r3
 800f128:	1ad3      	subs	r3, r2, r3
 800f12a:	9306      	str	r3, [sp, #24]
 800f12c:	9b08      	ldr	r3, [sp, #32]
 800f12e:	b1f3      	cbz	r3, 800f16e <_dtoa_r+0x7b6>
 800f130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f132:	2b00      	cmp	r3, #0
 800f134:	f000 80a3 	beq.w	800f27e <_dtoa_r+0x8c6>
 800f138:	2e00      	cmp	r6, #0
 800f13a:	dd10      	ble.n	800f15e <_dtoa_r+0x7a6>
 800f13c:	4639      	mov	r1, r7
 800f13e:	4632      	mov	r2, r6
 800f140:	4620      	mov	r0, r4
 800f142:	f000 fce1 	bl	800fb08 <__pow5mult>
 800f146:	4652      	mov	r2, sl
 800f148:	4601      	mov	r1, r0
 800f14a:	4607      	mov	r7, r0
 800f14c:	4620      	mov	r0, r4
 800f14e:	f000 fc31 	bl	800f9b4 <__multiply>
 800f152:	4651      	mov	r1, sl
 800f154:	4680      	mov	r8, r0
 800f156:	4620      	mov	r0, r4
 800f158:	f000 fb60 	bl	800f81c <_Bfree>
 800f15c:	46c2      	mov	sl, r8
 800f15e:	9b08      	ldr	r3, [sp, #32]
 800f160:	1b9a      	subs	r2, r3, r6
 800f162:	d004      	beq.n	800f16e <_dtoa_r+0x7b6>
 800f164:	4651      	mov	r1, sl
 800f166:	4620      	mov	r0, r4
 800f168:	f000 fcce 	bl	800fb08 <__pow5mult>
 800f16c:	4682      	mov	sl, r0
 800f16e:	2101      	movs	r1, #1
 800f170:	4620      	mov	r0, r4
 800f172:	f000 fc09 	bl	800f988 <__i2b>
 800f176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f178:	2b00      	cmp	r3, #0
 800f17a:	4606      	mov	r6, r0
 800f17c:	f340 8081 	ble.w	800f282 <_dtoa_r+0x8ca>
 800f180:	461a      	mov	r2, r3
 800f182:	4601      	mov	r1, r0
 800f184:	4620      	mov	r0, r4
 800f186:	f000 fcbf 	bl	800fb08 <__pow5mult>
 800f18a:	9b07      	ldr	r3, [sp, #28]
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	4606      	mov	r6, r0
 800f190:	dd7a      	ble.n	800f288 <_dtoa_r+0x8d0>
 800f192:	f04f 0800 	mov.w	r8, #0
 800f196:	6933      	ldr	r3, [r6, #16]
 800f198:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f19c:	6918      	ldr	r0, [r3, #16]
 800f19e:	f000 fba5 	bl	800f8ec <__hi0bits>
 800f1a2:	f1c0 0020 	rsb	r0, r0, #32
 800f1a6:	9b06      	ldr	r3, [sp, #24]
 800f1a8:	4418      	add	r0, r3
 800f1aa:	f010 001f 	ands.w	r0, r0, #31
 800f1ae:	f000 8094 	beq.w	800f2da <_dtoa_r+0x922>
 800f1b2:	f1c0 0320 	rsb	r3, r0, #32
 800f1b6:	2b04      	cmp	r3, #4
 800f1b8:	f340 8085 	ble.w	800f2c6 <_dtoa_r+0x90e>
 800f1bc:	9b05      	ldr	r3, [sp, #20]
 800f1be:	f1c0 001c 	rsb	r0, r0, #28
 800f1c2:	4403      	add	r3, r0
 800f1c4:	9305      	str	r3, [sp, #20]
 800f1c6:	9b06      	ldr	r3, [sp, #24]
 800f1c8:	4403      	add	r3, r0
 800f1ca:	4405      	add	r5, r0
 800f1cc:	9306      	str	r3, [sp, #24]
 800f1ce:	9b05      	ldr	r3, [sp, #20]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	dd05      	ble.n	800f1e0 <_dtoa_r+0x828>
 800f1d4:	4651      	mov	r1, sl
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	4620      	mov	r0, r4
 800f1da:	f000 fcef 	bl	800fbbc <__lshift>
 800f1de:	4682      	mov	sl, r0
 800f1e0:	9b06      	ldr	r3, [sp, #24]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	dd05      	ble.n	800f1f2 <_dtoa_r+0x83a>
 800f1e6:	4631      	mov	r1, r6
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	4620      	mov	r0, r4
 800f1ec:	f000 fce6 	bl	800fbbc <__lshift>
 800f1f0:	4606      	mov	r6, r0
 800f1f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d072      	beq.n	800f2de <_dtoa_r+0x926>
 800f1f8:	4631      	mov	r1, r6
 800f1fa:	4650      	mov	r0, sl
 800f1fc:	f000 fd4a 	bl	800fc94 <__mcmp>
 800f200:	2800      	cmp	r0, #0
 800f202:	da6c      	bge.n	800f2de <_dtoa_r+0x926>
 800f204:	2300      	movs	r3, #0
 800f206:	4651      	mov	r1, sl
 800f208:	220a      	movs	r2, #10
 800f20a:	4620      	mov	r0, r4
 800f20c:	f000 fb28 	bl	800f860 <__multadd>
 800f210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f212:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f216:	4682      	mov	sl, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	f000 81b0 	beq.w	800f57e <_dtoa_r+0xbc6>
 800f21e:	2300      	movs	r3, #0
 800f220:	4639      	mov	r1, r7
 800f222:	220a      	movs	r2, #10
 800f224:	4620      	mov	r0, r4
 800f226:	f000 fb1b 	bl	800f860 <__multadd>
 800f22a:	9b01      	ldr	r3, [sp, #4]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	4607      	mov	r7, r0
 800f230:	f300 8096 	bgt.w	800f360 <_dtoa_r+0x9a8>
 800f234:	9b07      	ldr	r3, [sp, #28]
 800f236:	2b02      	cmp	r3, #2
 800f238:	dc59      	bgt.n	800f2ee <_dtoa_r+0x936>
 800f23a:	e091      	b.n	800f360 <_dtoa_r+0x9a8>
 800f23c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f23e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f242:	e758      	b.n	800f0f6 <_dtoa_r+0x73e>
 800f244:	9b04      	ldr	r3, [sp, #16]
 800f246:	1e5e      	subs	r6, r3, #1
 800f248:	9b08      	ldr	r3, [sp, #32]
 800f24a:	42b3      	cmp	r3, r6
 800f24c:	bfbf      	itttt	lt
 800f24e:	9b08      	ldrlt	r3, [sp, #32]
 800f250:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f252:	9608      	strlt	r6, [sp, #32]
 800f254:	1af3      	sublt	r3, r6, r3
 800f256:	bfb4      	ite	lt
 800f258:	18d2      	addlt	r2, r2, r3
 800f25a:	1b9e      	subge	r6, r3, r6
 800f25c:	9b04      	ldr	r3, [sp, #16]
 800f25e:	bfbc      	itt	lt
 800f260:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f262:	2600      	movlt	r6, #0
 800f264:	2b00      	cmp	r3, #0
 800f266:	bfb7      	itett	lt
 800f268:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f26c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f270:	1a9d      	sublt	r5, r3, r2
 800f272:	2300      	movlt	r3, #0
 800f274:	e741      	b.n	800f0fa <_dtoa_r+0x742>
 800f276:	9e08      	ldr	r6, [sp, #32]
 800f278:	9d05      	ldr	r5, [sp, #20]
 800f27a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f27c:	e748      	b.n	800f110 <_dtoa_r+0x758>
 800f27e:	9a08      	ldr	r2, [sp, #32]
 800f280:	e770      	b.n	800f164 <_dtoa_r+0x7ac>
 800f282:	9b07      	ldr	r3, [sp, #28]
 800f284:	2b01      	cmp	r3, #1
 800f286:	dc19      	bgt.n	800f2bc <_dtoa_r+0x904>
 800f288:	9b02      	ldr	r3, [sp, #8]
 800f28a:	b9bb      	cbnz	r3, 800f2bc <_dtoa_r+0x904>
 800f28c:	9b03      	ldr	r3, [sp, #12]
 800f28e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f292:	b99b      	cbnz	r3, 800f2bc <_dtoa_r+0x904>
 800f294:	9b03      	ldr	r3, [sp, #12]
 800f296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f29a:	0d1b      	lsrs	r3, r3, #20
 800f29c:	051b      	lsls	r3, r3, #20
 800f29e:	b183      	cbz	r3, 800f2c2 <_dtoa_r+0x90a>
 800f2a0:	9b05      	ldr	r3, [sp, #20]
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	9305      	str	r3, [sp, #20]
 800f2a6:	9b06      	ldr	r3, [sp, #24]
 800f2a8:	3301      	adds	r3, #1
 800f2aa:	9306      	str	r3, [sp, #24]
 800f2ac:	f04f 0801 	mov.w	r8, #1
 800f2b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	f47f af6f 	bne.w	800f196 <_dtoa_r+0x7de>
 800f2b8:	2001      	movs	r0, #1
 800f2ba:	e774      	b.n	800f1a6 <_dtoa_r+0x7ee>
 800f2bc:	f04f 0800 	mov.w	r8, #0
 800f2c0:	e7f6      	b.n	800f2b0 <_dtoa_r+0x8f8>
 800f2c2:	4698      	mov	r8, r3
 800f2c4:	e7f4      	b.n	800f2b0 <_dtoa_r+0x8f8>
 800f2c6:	d082      	beq.n	800f1ce <_dtoa_r+0x816>
 800f2c8:	9a05      	ldr	r2, [sp, #20]
 800f2ca:	331c      	adds	r3, #28
 800f2cc:	441a      	add	r2, r3
 800f2ce:	9205      	str	r2, [sp, #20]
 800f2d0:	9a06      	ldr	r2, [sp, #24]
 800f2d2:	441a      	add	r2, r3
 800f2d4:	441d      	add	r5, r3
 800f2d6:	9206      	str	r2, [sp, #24]
 800f2d8:	e779      	b.n	800f1ce <_dtoa_r+0x816>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	e7f4      	b.n	800f2c8 <_dtoa_r+0x910>
 800f2de:	9b04      	ldr	r3, [sp, #16]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	dc37      	bgt.n	800f354 <_dtoa_r+0x99c>
 800f2e4:	9b07      	ldr	r3, [sp, #28]
 800f2e6:	2b02      	cmp	r3, #2
 800f2e8:	dd34      	ble.n	800f354 <_dtoa_r+0x99c>
 800f2ea:	9b04      	ldr	r3, [sp, #16]
 800f2ec:	9301      	str	r3, [sp, #4]
 800f2ee:	9b01      	ldr	r3, [sp, #4]
 800f2f0:	b963      	cbnz	r3, 800f30c <_dtoa_r+0x954>
 800f2f2:	4631      	mov	r1, r6
 800f2f4:	2205      	movs	r2, #5
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f000 fab2 	bl	800f860 <__multadd>
 800f2fc:	4601      	mov	r1, r0
 800f2fe:	4606      	mov	r6, r0
 800f300:	4650      	mov	r0, sl
 800f302:	f000 fcc7 	bl	800fc94 <__mcmp>
 800f306:	2800      	cmp	r0, #0
 800f308:	f73f adbb 	bgt.w	800ee82 <_dtoa_r+0x4ca>
 800f30c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f30e:	9d00      	ldr	r5, [sp, #0]
 800f310:	ea6f 0b03 	mvn.w	fp, r3
 800f314:	f04f 0800 	mov.w	r8, #0
 800f318:	4631      	mov	r1, r6
 800f31a:	4620      	mov	r0, r4
 800f31c:	f000 fa7e 	bl	800f81c <_Bfree>
 800f320:	2f00      	cmp	r7, #0
 800f322:	f43f aeab 	beq.w	800f07c <_dtoa_r+0x6c4>
 800f326:	f1b8 0f00 	cmp.w	r8, #0
 800f32a:	d005      	beq.n	800f338 <_dtoa_r+0x980>
 800f32c:	45b8      	cmp	r8, r7
 800f32e:	d003      	beq.n	800f338 <_dtoa_r+0x980>
 800f330:	4641      	mov	r1, r8
 800f332:	4620      	mov	r0, r4
 800f334:	f000 fa72 	bl	800f81c <_Bfree>
 800f338:	4639      	mov	r1, r7
 800f33a:	4620      	mov	r0, r4
 800f33c:	f000 fa6e 	bl	800f81c <_Bfree>
 800f340:	e69c      	b.n	800f07c <_dtoa_r+0x6c4>
 800f342:	2600      	movs	r6, #0
 800f344:	4637      	mov	r7, r6
 800f346:	e7e1      	b.n	800f30c <_dtoa_r+0x954>
 800f348:	46bb      	mov	fp, r7
 800f34a:	4637      	mov	r7, r6
 800f34c:	e599      	b.n	800ee82 <_dtoa_r+0x4ca>
 800f34e:	bf00      	nop
 800f350:	40240000 	.word	0x40240000
 800f354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f356:	2b00      	cmp	r3, #0
 800f358:	f000 80c8 	beq.w	800f4ec <_dtoa_r+0xb34>
 800f35c:	9b04      	ldr	r3, [sp, #16]
 800f35e:	9301      	str	r3, [sp, #4]
 800f360:	2d00      	cmp	r5, #0
 800f362:	dd05      	ble.n	800f370 <_dtoa_r+0x9b8>
 800f364:	4639      	mov	r1, r7
 800f366:	462a      	mov	r2, r5
 800f368:	4620      	mov	r0, r4
 800f36a:	f000 fc27 	bl	800fbbc <__lshift>
 800f36e:	4607      	mov	r7, r0
 800f370:	f1b8 0f00 	cmp.w	r8, #0
 800f374:	d05b      	beq.n	800f42e <_dtoa_r+0xa76>
 800f376:	6879      	ldr	r1, [r7, #4]
 800f378:	4620      	mov	r0, r4
 800f37a:	f000 fa0f 	bl	800f79c <_Balloc>
 800f37e:	4605      	mov	r5, r0
 800f380:	b928      	cbnz	r0, 800f38e <_dtoa_r+0x9d6>
 800f382:	4b83      	ldr	r3, [pc, #524]	; (800f590 <_dtoa_r+0xbd8>)
 800f384:	4602      	mov	r2, r0
 800f386:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f38a:	f7ff bb2e 	b.w	800e9ea <_dtoa_r+0x32>
 800f38e:	693a      	ldr	r2, [r7, #16]
 800f390:	3202      	adds	r2, #2
 800f392:	0092      	lsls	r2, r2, #2
 800f394:	f107 010c 	add.w	r1, r7, #12
 800f398:	300c      	adds	r0, #12
 800f39a:	f7ff fa77 	bl	800e88c <memcpy>
 800f39e:	2201      	movs	r2, #1
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	4620      	mov	r0, r4
 800f3a4:	f000 fc0a 	bl	800fbbc <__lshift>
 800f3a8:	9b00      	ldr	r3, [sp, #0]
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	9304      	str	r3, [sp, #16]
 800f3ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3b2:	4413      	add	r3, r2
 800f3b4:	9308      	str	r3, [sp, #32]
 800f3b6:	9b02      	ldr	r3, [sp, #8]
 800f3b8:	f003 0301 	and.w	r3, r3, #1
 800f3bc:	46b8      	mov	r8, r7
 800f3be:	9306      	str	r3, [sp, #24]
 800f3c0:	4607      	mov	r7, r0
 800f3c2:	9b04      	ldr	r3, [sp, #16]
 800f3c4:	4631      	mov	r1, r6
 800f3c6:	3b01      	subs	r3, #1
 800f3c8:	4650      	mov	r0, sl
 800f3ca:	9301      	str	r3, [sp, #4]
 800f3cc:	f7ff fa6c 	bl	800e8a8 <quorem>
 800f3d0:	4641      	mov	r1, r8
 800f3d2:	9002      	str	r0, [sp, #8]
 800f3d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f3d8:	4650      	mov	r0, sl
 800f3da:	f000 fc5b 	bl	800fc94 <__mcmp>
 800f3de:	463a      	mov	r2, r7
 800f3e0:	9005      	str	r0, [sp, #20]
 800f3e2:	4631      	mov	r1, r6
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	f000 fc71 	bl	800fccc <__mdiff>
 800f3ea:	68c2      	ldr	r2, [r0, #12]
 800f3ec:	4605      	mov	r5, r0
 800f3ee:	bb02      	cbnz	r2, 800f432 <_dtoa_r+0xa7a>
 800f3f0:	4601      	mov	r1, r0
 800f3f2:	4650      	mov	r0, sl
 800f3f4:	f000 fc4e 	bl	800fc94 <__mcmp>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	9209      	str	r2, [sp, #36]	; 0x24
 800f400:	f000 fa0c 	bl	800f81c <_Bfree>
 800f404:	9b07      	ldr	r3, [sp, #28]
 800f406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f408:	9d04      	ldr	r5, [sp, #16]
 800f40a:	ea43 0102 	orr.w	r1, r3, r2
 800f40e:	9b06      	ldr	r3, [sp, #24]
 800f410:	4319      	orrs	r1, r3
 800f412:	d110      	bne.n	800f436 <_dtoa_r+0xa7e>
 800f414:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f418:	d029      	beq.n	800f46e <_dtoa_r+0xab6>
 800f41a:	9b05      	ldr	r3, [sp, #20]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	dd02      	ble.n	800f426 <_dtoa_r+0xa6e>
 800f420:	9b02      	ldr	r3, [sp, #8]
 800f422:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f426:	9b01      	ldr	r3, [sp, #4]
 800f428:	f883 9000 	strb.w	r9, [r3]
 800f42c:	e774      	b.n	800f318 <_dtoa_r+0x960>
 800f42e:	4638      	mov	r0, r7
 800f430:	e7ba      	b.n	800f3a8 <_dtoa_r+0x9f0>
 800f432:	2201      	movs	r2, #1
 800f434:	e7e1      	b.n	800f3fa <_dtoa_r+0xa42>
 800f436:	9b05      	ldr	r3, [sp, #20]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	db04      	blt.n	800f446 <_dtoa_r+0xa8e>
 800f43c:	9907      	ldr	r1, [sp, #28]
 800f43e:	430b      	orrs	r3, r1
 800f440:	9906      	ldr	r1, [sp, #24]
 800f442:	430b      	orrs	r3, r1
 800f444:	d120      	bne.n	800f488 <_dtoa_r+0xad0>
 800f446:	2a00      	cmp	r2, #0
 800f448:	dded      	ble.n	800f426 <_dtoa_r+0xa6e>
 800f44a:	4651      	mov	r1, sl
 800f44c:	2201      	movs	r2, #1
 800f44e:	4620      	mov	r0, r4
 800f450:	f000 fbb4 	bl	800fbbc <__lshift>
 800f454:	4631      	mov	r1, r6
 800f456:	4682      	mov	sl, r0
 800f458:	f000 fc1c 	bl	800fc94 <__mcmp>
 800f45c:	2800      	cmp	r0, #0
 800f45e:	dc03      	bgt.n	800f468 <_dtoa_r+0xab0>
 800f460:	d1e1      	bne.n	800f426 <_dtoa_r+0xa6e>
 800f462:	f019 0f01 	tst.w	r9, #1
 800f466:	d0de      	beq.n	800f426 <_dtoa_r+0xa6e>
 800f468:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f46c:	d1d8      	bne.n	800f420 <_dtoa_r+0xa68>
 800f46e:	9a01      	ldr	r2, [sp, #4]
 800f470:	2339      	movs	r3, #57	; 0x39
 800f472:	7013      	strb	r3, [r2, #0]
 800f474:	462b      	mov	r3, r5
 800f476:	461d      	mov	r5, r3
 800f478:	3b01      	subs	r3, #1
 800f47a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f47e:	2a39      	cmp	r2, #57	; 0x39
 800f480:	d06c      	beq.n	800f55c <_dtoa_r+0xba4>
 800f482:	3201      	adds	r2, #1
 800f484:	701a      	strb	r2, [r3, #0]
 800f486:	e747      	b.n	800f318 <_dtoa_r+0x960>
 800f488:	2a00      	cmp	r2, #0
 800f48a:	dd07      	ble.n	800f49c <_dtoa_r+0xae4>
 800f48c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f490:	d0ed      	beq.n	800f46e <_dtoa_r+0xab6>
 800f492:	9a01      	ldr	r2, [sp, #4]
 800f494:	f109 0301 	add.w	r3, r9, #1
 800f498:	7013      	strb	r3, [r2, #0]
 800f49a:	e73d      	b.n	800f318 <_dtoa_r+0x960>
 800f49c:	9b04      	ldr	r3, [sp, #16]
 800f49e:	9a08      	ldr	r2, [sp, #32]
 800f4a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d043      	beq.n	800f530 <_dtoa_r+0xb78>
 800f4a8:	4651      	mov	r1, sl
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	220a      	movs	r2, #10
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	f000 f9d6 	bl	800f860 <__multadd>
 800f4b4:	45b8      	cmp	r8, r7
 800f4b6:	4682      	mov	sl, r0
 800f4b8:	f04f 0300 	mov.w	r3, #0
 800f4bc:	f04f 020a 	mov.w	r2, #10
 800f4c0:	4641      	mov	r1, r8
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	d107      	bne.n	800f4d6 <_dtoa_r+0xb1e>
 800f4c6:	f000 f9cb 	bl	800f860 <__multadd>
 800f4ca:	4680      	mov	r8, r0
 800f4cc:	4607      	mov	r7, r0
 800f4ce:	9b04      	ldr	r3, [sp, #16]
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	9304      	str	r3, [sp, #16]
 800f4d4:	e775      	b.n	800f3c2 <_dtoa_r+0xa0a>
 800f4d6:	f000 f9c3 	bl	800f860 <__multadd>
 800f4da:	4639      	mov	r1, r7
 800f4dc:	4680      	mov	r8, r0
 800f4de:	2300      	movs	r3, #0
 800f4e0:	220a      	movs	r2, #10
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f000 f9bc 	bl	800f860 <__multadd>
 800f4e8:	4607      	mov	r7, r0
 800f4ea:	e7f0      	b.n	800f4ce <_dtoa_r+0xb16>
 800f4ec:	9b04      	ldr	r3, [sp, #16]
 800f4ee:	9301      	str	r3, [sp, #4]
 800f4f0:	9d00      	ldr	r5, [sp, #0]
 800f4f2:	4631      	mov	r1, r6
 800f4f4:	4650      	mov	r0, sl
 800f4f6:	f7ff f9d7 	bl	800e8a8 <quorem>
 800f4fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f4fe:	9b00      	ldr	r3, [sp, #0]
 800f500:	f805 9b01 	strb.w	r9, [r5], #1
 800f504:	1aea      	subs	r2, r5, r3
 800f506:	9b01      	ldr	r3, [sp, #4]
 800f508:	4293      	cmp	r3, r2
 800f50a:	dd07      	ble.n	800f51c <_dtoa_r+0xb64>
 800f50c:	4651      	mov	r1, sl
 800f50e:	2300      	movs	r3, #0
 800f510:	220a      	movs	r2, #10
 800f512:	4620      	mov	r0, r4
 800f514:	f000 f9a4 	bl	800f860 <__multadd>
 800f518:	4682      	mov	sl, r0
 800f51a:	e7ea      	b.n	800f4f2 <_dtoa_r+0xb3a>
 800f51c:	9b01      	ldr	r3, [sp, #4]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	bfc8      	it	gt
 800f522:	461d      	movgt	r5, r3
 800f524:	9b00      	ldr	r3, [sp, #0]
 800f526:	bfd8      	it	le
 800f528:	2501      	movle	r5, #1
 800f52a:	441d      	add	r5, r3
 800f52c:	f04f 0800 	mov.w	r8, #0
 800f530:	4651      	mov	r1, sl
 800f532:	2201      	movs	r2, #1
 800f534:	4620      	mov	r0, r4
 800f536:	f000 fb41 	bl	800fbbc <__lshift>
 800f53a:	4631      	mov	r1, r6
 800f53c:	4682      	mov	sl, r0
 800f53e:	f000 fba9 	bl	800fc94 <__mcmp>
 800f542:	2800      	cmp	r0, #0
 800f544:	dc96      	bgt.n	800f474 <_dtoa_r+0xabc>
 800f546:	d102      	bne.n	800f54e <_dtoa_r+0xb96>
 800f548:	f019 0f01 	tst.w	r9, #1
 800f54c:	d192      	bne.n	800f474 <_dtoa_r+0xabc>
 800f54e:	462b      	mov	r3, r5
 800f550:	461d      	mov	r5, r3
 800f552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f556:	2a30      	cmp	r2, #48	; 0x30
 800f558:	d0fa      	beq.n	800f550 <_dtoa_r+0xb98>
 800f55a:	e6dd      	b.n	800f318 <_dtoa_r+0x960>
 800f55c:	9a00      	ldr	r2, [sp, #0]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d189      	bne.n	800f476 <_dtoa_r+0xabe>
 800f562:	f10b 0b01 	add.w	fp, fp, #1
 800f566:	2331      	movs	r3, #49	; 0x31
 800f568:	e796      	b.n	800f498 <_dtoa_r+0xae0>
 800f56a:	4b0a      	ldr	r3, [pc, #40]	; (800f594 <_dtoa_r+0xbdc>)
 800f56c:	f7ff ba99 	b.w	800eaa2 <_dtoa_r+0xea>
 800f570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f572:	2b00      	cmp	r3, #0
 800f574:	f47f aa6d 	bne.w	800ea52 <_dtoa_r+0x9a>
 800f578:	4b07      	ldr	r3, [pc, #28]	; (800f598 <_dtoa_r+0xbe0>)
 800f57a:	f7ff ba92 	b.w	800eaa2 <_dtoa_r+0xea>
 800f57e:	9b01      	ldr	r3, [sp, #4]
 800f580:	2b00      	cmp	r3, #0
 800f582:	dcb5      	bgt.n	800f4f0 <_dtoa_r+0xb38>
 800f584:	9b07      	ldr	r3, [sp, #28]
 800f586:	2b02      	cmp	r3, #2
 800f588:	f73f aeb1 	bgt.w	800f2ee <_dtoa_r+0x936>
 800f58c:	e7b0      	b.n	800f4f0 <_dtoa_r+0xb38>
 800f58e:	bf00      	nop
 800f590:	080113a4 	.word	0x080113a4
 800f594:	08011304 	.word	0x08011304
 800f598:	08011328 	.word	0x08011328

0800f59c <_free_r>:
 800f59c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f59e:	2900      	cmp	r1, #0
 800f5a0:	d044      	beq.n	800f62c <_free_r+0x90>
 800f5a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5a6:	9001      	str	r0, [sp, #4]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f1a1 0404 	sub.w	r4, r1, #4
 800f5ae:	bfb8      	it	lt
 800f5b0:	18e4      	addlt	r4, r4, r3
 800f5b2:	f000 f8e7 	bl	800f784 <__malloc_lock>
 800f5b6:	4a1e      	ldr	r2, [pc, #120]	; (800f630 <_free_r+0x94>)
 800f5b8:	9801      	ldr	r0, [sp, #4]
 800f5ba:	6813      	ldr	r3, [r2, #0]
 800f5bc:	b933      	cbnz	r3, 800f5cc <_free_r+0x30>
 800f5be:	6063      	str	r3, [r4, #4]
 800f5c0:	6014      	str	r4, [r2, #0]
 800f5c2:	b003      	add	sp, #12
 800f5c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5c8:	f000 b8e2 	b.w	800f790 <__malloc_unlock>
 800f5cc:	42a3      	cmp	r3, r4
 800f5ce:	d908      	bls.n	800f5e2 <_free_r+0x46>
 800f5d0:	6825      	ldr	r5, [r4, #0]
 800f5d2:	1961      	adds	r1, r4, r5
 800f5d4:	428b      	cmp	r3, r1
 800f5d6:	bf01      	itttt	eq
 800f5d8:	6819      	ldreq	r1, [r3, #0]
 800f5da:	685b      	ldreq	r3, [r3, #4]
 800f5dc:	1949      	addeq	r1, r1, r5
 800f5de:	6021      	streq	r1, [r4, #0]
 800f5e0:	e7ed      	b.n	800f5be <_free_r+0x22>
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	b10b      	cbz	r3, 800f5ec <_free_r+0x50>
 800f5e8:	42a3      	cmp	r3, r4
 800f5ea:	d9fa      	bls.n	800f5e2 <_free_r+0x46>
 800f5ec:	6811      	ldr	r1, [r2, #0]
 800f5ee:	1855      	adds	r5, r2, r1
 800f5f0:	42a5      	cmp	r5, r4
 800f5f2:	d10b      	bne.n	800f60c <_free_r+0x70>
 800f5f4:	6824      	ldr	r4, [r4, #0]
 800f5f6:	4421      	add	r1, r4
 800f5f8:	1854      	adds	r4, r2, r1
 800f5fa:	42a3      	cmp	r3, r4
 800f5fc:	6011      	str	r1, [r2, #0]
 800f5fe:	d1e0      	bne.n	800f5c2 <_free_r+0x26>
 800f600:	681c      	ldr	r4, [r3, #0]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	6053      	str	r3, [r2, #4]
 800f606:	440c      	add	r4, r1
 800f608:	6014      	str	r4, [r2, #0]
 800f60a:	e7da      	b.n	800f5c2 <_free_r+0x26>
 800f60c:	d902      	bls.n	800f614 <_free_r+0x78>
 800f60e:	230c      	movs	r3, #12
 800f610:	6003      	str	r3, [r0, #0]
 800f612:	e7d6      	b.n	800f5c2 <_free_r+0x26>
 800f614:	6825      	ldr	r5, [r4, #0]
 800f616:	1961      	adds	r1, r4, r5
 800f618:	428b      	cmp	r3, r1
 800f61a:	bf04      	itt	eq
 800f61c:	6819      	ldreq	r1, [r3, #0]
 800f61e:	685b      	ldreq	r3, [r3, #4]
 800f620:	6063      	str	r3, [r4, #4]
 800f622:	bf04      	itt	eq
 800f624:	1949      	addeq	r1, r1, r5
 800f626:	6021      	streq	r1, [r4, #0]
 800f628:	6054      	str	r4, [r2, #4]
 800f62a:	e7ca      	b.n	800f5c2 <_free_r+0x26>
 800f62c:	b003      	add	sp, #12
 800f62e:	bd30      	pop	{r4, r5, pc}
 800f630:	2000597c 	.word	0x2000597c

0800f634 <malloc>:
 800f634:	4b02      	ldr	r3, [pc, #8]	; (800f640 <malloc+0xc>)
 800f636:	4601      	mov	r1, r0
 800f638:	6818      	ldr	r0, [r3, #0]
 800f63a:	f000 b823 	b.w	800f684 <_malloc_r>
 800f63e:	bf00      	nop
 800f640:	20000088 	.word	0x20000088

0800f644 <sbrk_aligned>:
 800f644:	b570      	push	{r4, r5, r6, lr}
 800f646:	4e0e      	ldr	r6, [pc, #56]	; (800f680 <sbrk_aligned+0x3c>)
 800f648:	460c      	mov	r4, r1
 800f64a:	6831      	ldr	r1, [r6, #0]
 800f64c:	4605      	mov	r5, r0
 800f64e:	b911      	cbnz	r1, 800f656 <sbrk_aligned+0x12>
 800f650:	f000 fe40 	bl	80102d4 <_sbrk_r>
 800f654:	6030      	str	r0, [r6, #0]
 800f656:	4621      	mov	r1, r4
 800f658:	4628      	mov	r0, r5
 800f65a:	f000 fe3b 	bl	80102d4 <_sbrk_r>
 800f65e:	1c43      	adds	r3, r0, #1
 800f660:	d00a      	beq.n	800f678 <sbrk_aligned+0x34>
 800f662:	1cc4      	adds	r4, r0, #3
 800f664:	f024 0403 	bic.w	r4, r4, #3
 800f668:	42a0      	cmp	r0, r4
 800f66a:	d007      	beq.n	800f67c <sbrk_aligned+0x38>
 800f66c:	1a21      	subs	r1, r4, r0
 800f66e:	4628      	mov	r0, r5
 800f670:	f000 fe30 	bl	80102d4 <_sbrk_r>
 800f674:	3001      	adds	r0, #1
 800f676:	d101      	bne.n	800f67c <sbrk_aligned+0x38>
 800f678:	f04f 34ff 	mov.w	r4, #4294967295
 800f67c:	4620      	mov	r0, r4
 800f67e:	bd70      	pop	{r4, r5, r6, pc}
 800f680:	20005980 	.word	0x20005980

0800f684 <_malloc_r>:
 800f684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f688:	1ccd      	adds	r5, r1, #3
 800f68a:	f025 0503 	bic.w	r5, r5, #3
 800f68e:	3508      	adds	r5, #8
 800f690:	2d0c      	cmp	r5, #12
 800f692:	bf38      	it	cc
 800f694:	250c      	movcc	r5, #12
 800f696:	2d00      	cmp	r5, #0
 800f698:	4607      	mov	r7, r0
 800f69a:	db01      	blt.n	800f6a0 <_malloc_r+0x1c>
 800f69c:	42a9      	cmp	r1, r5
 800f69e:	d905      	bls.n	800f6ac <_malloc_r+0x28>
 800f6a0:	230c      	movs	r3, #12
 800f6a2:	603b      	str	r3, [r7, #0]
 800f6a4:	2600      	movs	r6, #0
 800f6a6:	4630      	mov	r0, r6
 800f6a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f780 <_malloc_r+0xfc>
 800f6b0:	f000 f868 	bl	800f784 <__malloc_lock>
 800f6b4:	f8d8 3000 	ldr.w	r3, [r8]
 800f6b8:	461c      	mov	r4, r3
 800f6ba:	bb5c      	cbnz	r4, 800f714 <_malloc_r+0x90>
 800f6bc:	4629      	mov	r1, r5
 800f6be:	4638      	mov	r0, r7
 800f6c0:	f7ff ffc0 	bl	800f644 <sbrk_aligned>
 800f6c4:	1c43      	adds	r3, r0, #1
 800f6c6:	4604      	mov	r4, r0
 800f6c8:	d155      	bne.n	800f776 <_malloc_r+0xf2>
 800f6ca:	f8d8 4000 	ldr.w	r4, [r8]
 800f6ce:	4626      	mov	r6, r4
 800f6d0:	2e00      	cmp	r6, #0
 800f6d2:	d145      	bne.n	800f760 <_malloc_r+0xdc>
 800f6d4:	2c00      	cmp	r4, #0
 800f6d6:	d048      	beq.n	800f76a <_malloc_r+0xe6>
 800f6d8:	6823      	ldr	r3, [r4, #0]
 800f6da:	4631      	mov	r1, r6
 800f6dc:	4638      	mov	r0, r7
 800f6de:	eb04 0903 	add.w	r9, r4, r3
 800f6e2:	f000 fdf7 	bl	80102d4 <_sbrk_r>
 800f6e6:	4581      	cmp	r9, r0
 800f6e8:	d13f      	bne.n	800f76a <_malloc_r+0xe6>
 800f6ea:	6821      	ldr	r1, [r4, #0]
 800f6ec:	1a6d      	subs	r5, r5, r1
 800f6ee:	4629      	mov	r1, r5
 800f6f0:	4638      	mov	r0, r7
 800f6f2:	f7ff ffa7 	bl	800f644 <sbrk_aligned>
 800f6f6:	3001      	adds	r0, #1
 800f6f8:	d037      	beq.n	800f76a <_malloc_r+0xe6>
 800f6fa:	6823      	ldr	r3, [r4, #0]
 800f6fc:	442b      	add	r3, r5
 800f6fe:	6023      	str	r3, [r4, #0]
 800f700:	f8d8 3000 	ldr.w	r3, [r8]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d038      	beq.n	800f77a <_malloc_r+0xf6>
 800f708:	685a      	ldr	r2, [r3, #4]
 800f70a:	42a2      	cmp	r2, r4
 800f70c:	d12b      	bne.n	800f766 <_malloc_r+0xe2>
 800f70e:	2200      	movs	r2, #0
 800f710:	605a      	str	r2, [r3, #4]
 800f712:	e00f      	b.n	800f734 <_malloc_r+0xb0>
 800f714:	6822      	ldr	r2, [r4, #0]
 800f716:	1b52      	subs	r2, r2, r5
 800f718:	d41f      	bmi.n	800f75a <_malloc_r+0xd6>
 800f71a:	2a0b      	cmp	r2, #11
 800f71c:	d917      	bls.n	800f74e <_malloc_r+0xca>
 800f71e:	1961      	adds	r1, r4, r5
 800f720:	42a3      	cmp	r3, r4
 800f722:	6025      	str	r5, [r4, #0]
 800f724:	bf18      	it	ne
 800f726:	6059      	strne	r1, [r3, #4]
 800f728:	6863      	ldr	r3, [r4, #4]
 800f72a:	bf08      	it	eq
 800f72c:	f8c8 1000 	streq.w	r1, [r8]
 800f730:	5162      	str	r2, [r4, r5]
 800f732:	604b      	str	r3, [r1, #4]
 800f734:	4638      	mov	r0, r7
 800f736:	f104 060b 	add.w	r6, r4, #11
 800f73a:	f000 f829 	bl	800f790 <__malloc_unlock>
 800f73e:	f026 0607 	bic.w	r6, r6, #7
 800f742:	1d23      	adds	r3, r4, #4
 800f744:	1af2      	subs	r2, r6, r3
 800f746:	d0ae      	beq.n	800f6a6 <_malloc_r+0x22>
 800f748:	1b9b      	subs	r3, r3, r6
 800f74a:	50a3      	str	r3, [r4, r2]
 800f74c:	e7ab      	b.n	800f6a6 <_malloc_r+0x22>
 800f74e:	42a3      	cmp	r3, r4
 800f750:	6862      	ldr	r2, [r4, #4]
 800f752:	d1dd      	bne.n	800f710 <_malloc_r+0x8c>
 800f754:	f8c8 2000 	str.w	r2, [r8]
 800f758:	e7ec      	b.n	800f734 <_malloc_r+0xb0>
 800f75a:	4623      	mov	r3, r4
 800f75c:	6864      	ldr	r4, [r4, #4]
 800f75e:	e7ac      	b.n	800f6ba <_malloc_r+0x36>
 800f760:	4634      	mov	r4, r6
 800f762:	6876      	ldr	r6, [r6, #4]
 800f764:	e7b4      	b.n	800f6d0 <_malloc_r+0x4c>
 800f766:	4613      	mov	r3, r2
 800f768:	e7cc      	b.n	800f704 <_malloc_r+0x80>
 800f76a:	230c      	movs	r3, #12
 800f76c:	603b      	str	r3, [r7, #0]
 800f76e:	4638      	mov	r0, r7
 800f770:	f000 f80e 	bl	800f790 <__malloc_unlock>
 800f774:	e797      	b.n	800f6a6 <_malloc_r+0x22>
 800f776:	6025      	str	r5, [r4, #0]
 800f778:	e7dc      	b.n	800f734 <_malloc_r+0xb0>
 800f77a:	605b      	str	r3, [r3, #4]
 800f77c:	deff      	udf	#255	; 0xff
 800f77e:	bf00      	nop
 800f780:	2000597c 	.word	0x2000597c

0800f784 <__malloc_lock>:
 800f784:	4801      	ldr	r0, [pc, #4]	; (800f78c <__malloc_lock+0x8>)
 800f786:	f7ff b87f 	b.w	800e888 <__retarget_lock_acquire_recursive>
 800f78a:	bf00      	nop
 800f78c:	20005978 	.word	0x20005978

0800f790 <__malloc_unlock>:
 800f790:	4801      	ldr	r0, [pc, #4]	; (800f798 <__malloc_unlock+0x8>)
 800f792:	f7ff b87a 	b.w	800e88a <__retarget_lock_release_recursive>
 800f796:	bf00      	nop
 800f798:	20005978 	.word	0x20005978

0800f79c <_Balloc>:
 800f79c:	b570      	push	{r4, r5, r6, lr}
 800f79e:	69c6      	ldr	r6, [r0, #28]
 800f7a0:	4604      	mov	r4, r0
 800f7a2:	460d      	mov	r5, r1
 800f7a4:	b976      	cbnz	r6, 800f7c4 <_Balloc+0x28>
 800f7a6:	2010      	movs	r0, #16
 800f7a8:	f7ff ff44 	bl	800f634 <malloc>
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	61e0      	str	r0, [r4, #28]
 800f7b0:	b920      	cbnz	r0, 800f7bc <_Balloc+0x20>
 800f7b2:	4b18      	ldr	r3, [pc, #96]	; (800f814 <_Balloc+0x78>)
 800f7b4:	4818      	ldr	r0, [pc, #96]	; (800f818 <_Balloc+0x7c>)
 800f7b6:	216b      	movs	r1, #107	; 0x6b
 800f7b8:	f000 fd9c 	bl	80102f4 <__assert_func>
 800f7bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7c0:	6006      	str	r6, [r0, #0]
 800f7c2:	60c6      	str	r6, [r0, #12]
 800f7c4:	69e6      	ldr	r6, [r4, #28]
 800f7c6:	68f3      	ldr	r3, [r6, #12]
 800f7c8:	b183      	cbz	r3, 800f7ec <_Balloc+0x50>
 800f7ca:	69e3      	ldr	r3, [r4, #28]
 800f7cc:	68db      	ldr	r3, [r3, #12]
 800f7ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f7d2:	b9b8      	cbnz	r0, 800f804 <_Balloc+0x68>
 800f7d4:	2101      	movs	r1, #1
 800f7d6:	fa01 f605 	lsl.w	r6, r1, r5
 800f7da:	1d72      	adds	r2, r6, #5
 800f7dc:	0092      	lsls	r2, r2, #2
 800f7de:	4620      	mov	r0, r4
 800f7e0:	f000 fda6 	bl	8010330 <_calloc_r>
 800f7e4:	b160      	cbz	r0, 800f800 <_Balloc+0x64>
 800f7e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f7ea:	e00e      	b.n	800f80a <_Balloc+0x6e>
 800f7ec:	2221      	movs	r2, #33	; 0x21
 800f7ee:	2104      	movs	r1, #4
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	f000 fd9d 	bl	8010330 <_calloc_r>
 800f7f6:	69e3      	ldr	r3, [r4, #28]
 800f7f8:	60f0      	str	r0, [r6, #12]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d1e4      	bne.n	800f7ca <_Balloc+0x2e>
 800f800:	2000      	movs	r0, #0
 800f802:	bd70      	pop	{r4, r5, r6, pc}
 800f804:	6802      	ldr	r2, [r0, #0]
 800f806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f80a:	2300      	movs	r3, #0
 800f80c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f810:	e7f7      	b.n	800f802 <_Balloc+0x66>
 800f812:	bf00      	nop
 800f814:	08011335 	.word	0x08011335
 800f818:	080113b5 	.word	0x080113b5

0800f81c <_Bfree>:
 800f81c:	b570      	push	{r4, r5, r6, lr}
 800f81e:	69c6      	ldr	r6, [r0, #28]
 800f820:	4605      	mov	r5, r0
 800f822:	460c      	mov	r4, r1
 800f824:	b976      	cbnz	r6, 800f844 <_Bfree+0x28>
 800f826:	2010      	movs	r0, #16
 800f828:	f7ff ff04 	bl	800f634 <malloc>
 800f82c:	4602      	mov	r2, r0
 800f82e:	61e8      	str	r0, [r5, #28]
 800f830:	b920      	cbnz	r0, 800f83c <_Bfree+0x20>
 800f832:	4b09      	ldr	r3, [pc, #36]	; (800f858 <_Bfree+0x3c>)
 800f834:	4809      	ldr	r0, [pc, #36]	; (800f85c <_Bfree+0x40>)
 800f836:	218f      	movs	r1, #143	; 0x8f
 800f838:	f000 fd5c 	bl	80102f4 <__assert_func>
 800f83c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f840:	6006      	str	r6, [r0, #0]
 800f842:	60c6      	str	r6, [r0, #12]
 800f844:	b13c      	cbz	r4, 800f856 <_Bfree+0x3a>
 800f846:	69eb      	ldr	r3, [r5, #28]
 800f848:	6862      	ldr	r2, [r4, #4]
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f850:	6021      	str	r1, [r4, #0]
 800f852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f856:	bd70      	pop	{r4, r5, r6, pc}
 800f858:	08011335 	.word	0x08011335
 800f85c:	080113b5 	.word	0x080113b5

0800f860 <__multadd>:
 800f860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f864:	690d      	ldr	r5, [r1, #16]
 800f866:	4607      	mov	r7, r0
 800f868:	460c      	mov	r4, r1
 800f86a:	461e      	mov	r6, r3
 800f86c:	f101 0c14 	add.w	ip, r1, #20
 800f870:	2000      	movs	r0, #0
 800f872:	f8dc 3000 	ldr.w	r3, [ip]
 800f876:	b299      	uxth	r1, r3
 800f878:	fb02 6101 	mla	r1, r2, r1, r6
 800f87c:	0c1e      	lsrs	r6, r3, #16
 800f87e:	0c0b      	lsrs	r3, r1, #16
 800f880:	fb02 3306 	mla	r3, r2, r6, r3
 800f884:	b289      	uxth	r1, r1
 800f886:	3001      	adds	r0, #1
 800f888:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f88c:	4285      	cmp	r5, r0
 800f88e:	f84c 1b04 	str.w	r1, [ip], #4
 800f892:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f896:	dcec      	bgt.n	800f872 <__multadd+0x12>
 800f898:	b30e      	cbz	r6, 800f8de <__multadd+0x7e>
 800f89a:	68a3      	ldr	r3, [r4, #8]
 800f89c:	42ab      	cmp	r3, r5
 800f89e:	dc19      	bgt.n	800f8d4 <__multadd+0x74>
 800f8a0:	6861      	ldr	r1, [r4, #4]
 800f8a2:	4638      	mov	r0, r7
 800f8a4:	3101      	adds	r1, #1
 800f8a6:	f7ff ff79 	bl	800f79c <_Balloc>
 800f8aa:	4680      	mov	r8, r0
 800f8ac:	b928      	cbnz	r0, 800f8ba <__multadd+0x5a>
 800f8ae:	4602      	mov	r2, r0
 800f8b0:	4b0c      	ldr	r3, [pc, #48]	; (800f8e4 <__multadd+0x84>)
 800f8b2:	480d      	ldr	r0, [pc, #52]	; (800f8e8 <__multadd+0x88>)
 800f8b4:	21ba      	movs	r1, #186	; 0xba
 800f8b6:	f000 fd1d 	bl	80102f4 <__assert_func>
 800f8ba:	6922      	ldr	r2, [r4, #16]
 800f8bc:	3202      	adds	r2, #2
 800f8be:	f104 010c 	add.w	r1, r4, #12
 800f8c2:	0092      	lsls	r2, r2, #2
 800f8c4:	300c      	adds	r0, #12
 800f8c6:	f7fe ffe1 	bl	800e88c <memcpy>
 800f8ca:	4621      	mov	r1, r4
 800f8cc:	4638      	mov	r0, r7
 800f8ce:	f7ff ffa5 	bl	800f81c <_Bfree>
 800f8d2:	4644      	mov	r4, r8
 800f8d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f8d8:	3501      	adds	r5, #1
 800f8da:	615e      	str	r6, [r3, #20]
 800f8dc:	6125      	str	r5, [r4, #16]
 800f8de:	4620      	mov	r0, r4
 800f8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e4:	080113a4 	.word	0x080113a4
 800f8e8:	080113b5 	.word	0x080113b5

0800f8ec <__hi0bits>:
 800f8ec:	0c03      	lsrs	r3, r0, #16
 800f8ee:	041b      	lsls	r3, r3, #16
 800f8f0:	b9d3      	cbnz	r3, 800f928 <__hi0bits+0x3c>
 800f8f2:	0400      	lsls	r0, r0, #16
 800f8f4:	2310      	movs	r3, #16
 800f8f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f8fa:	bf04      	itt	eq
 800f8fc:	0200      	lsleq	r0, r0, #8
 800f8fe:	3308      	addeq	r3, #8
 800f900:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f904:	bf04      	itt	eq
 800f906:	0100      	lsleq	r0, r0, #4
 800f908:	3304      	addeq	r3, #4
 800f90a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f90e:	bf04      	itt	eq
 800f910:	0080      	lsleq	r0, r0, #2
 800f912:	3302      	addeq	r3, #2
 800f914:	2800      	cmp	r0, #0
 800f916:	db05      	blt.n	800f924 <__hi0bits+0x38>
 800f918:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f91c:	f103 0301 	add.w	r3, r3, #1
 800f920:	bf08      	it	eq
 800f922:	2320      	moveq	r3, #32
 800f924:	4618      	mov	r0, r3
 800f926:	4770      	bx	lr
 800f928:	2300      	movs	r3, #0
 800f92a:	e7e4      	b.n	800f8f6 <__hi0bits+0xa>

0800f92c <__lo0bits>:
 800f92c:	6803      	ldr	r3, [r0, #0]
 800f92e:	f013 0207 	ands.w	r2, r3, #7
 800f932:	d00c      	beq.n	800f94e <__lo0bits+0x22>
 800f934:	07d9      	lsls	r1, r3, #31
 800f936:	d422      	bmi.n	800f97e <__lo0bits+0x52>
 800f938:	079a      	lsls	r2, r3, #30
 800f93a:	bf49      	itett	mi
 800f93c:	085b      	lsrmi	r3, r3, #1
 800f93e:	089b      	lsrpl	r3, r3, #2
 800f940:	6003      	strmi	r3, [r0, #0]
 800f942:	2201      	movmi	r2, #1
 800f944:	bf5c      	itt	pl
 800f946:	6003      	strpl	r3, [r0, #0]
 800f948:	2202      	movpl	r2, #2
 800f94a:	4610      	mov	r0, r2
 800f94c:	4770      	bx	lr
 800f94e:	b299      	uxth	r1, r3
 800f950:	b909      	cbnz	r1, 800f956 <__lo0bits+0x2a>
 800f952:	0c1b      	lsrs	r3, r3, #16
 800f954:	2210      	movs	r2, #16
 800f956:	b2d9      	uxtb	r1, r3
 800f958:	b909      	cbnz	r1, 800f95e <__lo0bits+0x32>
 800f95a:	3208      	adds	r2, #8
 800f95c:	0a1b      	lsrs	r3, r3, #8
 800f95e:	0719      	lsls	r1, r3, #28
 800f960:	bf04      	itt	eq
 800f962:	091b      	lsreq	r3, r3, #4
 800f964:	3204      	addeq	r2, #4
 800f966:	0799      	lsls	r1, r3, #30
 800f968:	bf04      	itt	eq
 800f96a:	089b      	lsreq	r3, r3, #2
 800f96c:	3202      	addeq	r2, #2
 800f96e:	07d9      	lsls	r1, r3, #31
 800f970:	d403      	bmi.n	800f97a <__lo0bits+0x4e>
 800f972:	085b      	lsrs	r3, r3, #1
 800f974:	f102 0201 	add.w	r2, r2, #1
 800f978:	d003      	beq.n	800f982 <__lo0bits+0x56>
 800f97a:	6003      	str	r3, [r0, #0]
 800f97c:	e7e5      	b.n	800f94a <__lo0bits+0x1e>
 800f97e:	2200      	movs	r2, #0
 800f980:	e7e3      	b.n	800f94a <__lo0bits+0x1e>
 800f982:	2220      	movs	r2, #32
 800f984:	e7e1      	b.n	800f94a <__lo0bits+0x1e>
	...

0800f988 <__i2b>:
 800f988:	b510      	push	{r4, lr}
 800f98a:	460c      	mov	r4, r1
 800f98c:	2101      	movs	r1, #1
 800f98e:	f7ff ff05 	bl	800f79c <_Balloc>
 800f992:	4602      	mov	r2, r0
 800f994:	b928      	cbnz	r0, 800f9a2 <__i2b+0x1a>
 800f996:	4b05      	ldr	r3, [pc, #20]	; (800f9ac <__i2b+0x24>)
 800f998:	4805      	ldr	r0, [pc, #20]	; (800f9b0 <__i2b+0x28>)
 800f99a:	f240 1145 	movw	r1, #325	; 0x145
 800f99e:	f000 fca9 	bl	80102f4 <__assert_func>
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	6144      	str	r4, [r0, #20]
 800f9a6:	6103      	str	r3, [r0, #16]
 800f9a8:	bd10      	pop	{r4, pc}
 800f9aa:	bf00      	nop
 800f9ac:	080113a4 	.word	0x080113a4
 800f9b0:	080113b5 	.word	0x080113b5

0800f9b4 <__multiply>:
 800f9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b8:	4691      	mov	r9, r2
 800f9ba:	690a      	ldr	r2, [r1, #16]
 800f9bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	bfb8      	it	lt
 800f9c4:	460b      	movlt	r3, r1
 800f9c6:	460c      	mov	r4, r1
 800f9c8:	bfbc      	itt	lt
 800f9ca:	464c      	movlt	r4, r9
 800f9cc:	4699      	movlt	r9, r3
 800f9ce:	6927      	ldr	r7, [r4, #16]
 800f9d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f9d4:	68a3      	ldr	r3, [r4, #8]
 800f9d6:	6861      	ldr	r1, [r4, #4]
 800f9d8:	eb07 060a 	add.w	r6, r7, sl
 800f9dc:	42b3      	cmp	r3, r6
 800f9de:	b085      	sub	sp, #20
 800f9e0:	bfb8      	it	lt
 800f9e2:	3101      	addlt	r1, #1
 800f9e4:	f7ff feda 	bl	800f79c <_Balloc>
 800f9e8:	b930      	cbnz	r0, 800f9f8 <__multiply+0x44>
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	4b44      	ldr	r3, [pc, #272]	; (800fb00 <__multiply+0x14c>)
 800f9ee:	4845      	ldr	r0, [pc, #276]	; (800fb04 <__multiply+0x150>)
 800f9f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f9f4:	f000 fc7e 	bl	80102f4 <__assert_func>
 800f9f8:	f100 0514 	add.w	r5, r0, #20
 800f9fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa00:	462b      	mov	r3, r5
 800fa02:	2200      	movs	r2, #0
 800fa04:	4543      	cmp	r3, r8
 800fa06:	d321      	bcc.n	800fa4c <__multiply+0x98>
 800fa08:	f104 0314 	add.w	r3, r4, #20
 800fa0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fa10:	f109 0314 	add.w	r3, r9, #20
 800fa14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fa18:	9202      	str	r2, [sp, #8]
 800fa1a:	1b3a      	subs	r2, r7, r4
 800fa1c:	3a15      	subs	r2, #21
 800fa1e:	f022 0203 	bic.w	r2, r2, #3
 800fa22:	3204      	adds	r2, #4
 800fa24:	f104 0115 	add.w	r1, r4, #21
 800fa28:	428f      	cmp	r7, r1
 800fa2a:	bf38      	it	cc
 800fa2c:	2204      	movcc	r2, #4
 800fa2e:	9201      	str	r2, [sp, #4]
 800fa30:	9a02      	ldr	r2, [sp, #8]
 800fa32:	9303      	str	r3, [sp, #12]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d80c      	bhi.n	800fa52 <__multiply+0x9e>
 800fa38:	2e00      	cmp	r6, #0
 800fa3a:	dd03      	ble.n	800fa44 <__multiply+0x90>
 800fa3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d05b      	beq.n	800fafc <__multiply+0x148>
 800fa44:	6106      	str	r6, [r0, #16]
 800fa46:	b005      	add	sp, #20
 800fa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa4c:	f843 2b04 	str.w	r2, [r3], #4
 800fa50:	e7d8      	b.n	800fa04 <__multiply+0x50>
 800fa52:	f8b3 a000 	ldrh.w	sl, [r3]
 800fa56:	f1ba 0f00 	cmp.w	sl, #0
 800fa5a:	d024      	beq.n	800faa6 <__multiply+0xf2>
 800fa5c:	f104 0e14 	add.w	lr, r4, #20
 800fa60:	46a9      	mov	r9, r5
 800fa62:	f04f 0c00 	mov.w	ip, #0
 800fa66:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fa6a:	f8d9 1000 	ldr.w	r1, [r9]
 800fa6e:	fa1f fb82 	uxth.w	fp, r2
 800fa72:	b289      	uxth	r1, r1
 800fa74:	fb0a 110b 	mla	r1, sl, fp, r1
 800fa78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fa7c:	f8d9 2000 	ldr.w	r2, [r9]
 800fa80:	4461      	add	r1, ip
 800fa82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa86:	fb0a c20b 	mla	r2, sl, fp, ip
 800fa8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fa8e:	b289      	uxth	r1, r1
 800fa90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fa94:	4577      	cmp	r7, lr
 800fa96:	f849 1b04 	str.w	r1, [r9], #4
 800fa9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa9e:	d8e2      	bhi.n	800fa66 <__multiply+0xb2>
 800faa0:	9a01      	ldr	r2, [sp, #4]
 800faa2:	f845 c002 	str.w	ip, [r5, r2]
 800faa6:	9a03      	ldr	r2, [sp, #12]
 800faa8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800faac:	3304      	adds	r3, #4
 800faae:	f1b9 0f00 	cmp.w	r9, #0
 800fab2:	d021      	beq.n	800faf8 <__multiply+0x144>
 800fab4:	6829      	ldr	r1, [r5, #0]
 800fab6:	f104 0c14 	add.w	ip, r4, #20
 800faba:	46ae      	mov	lr, r5
 800fabc:	f04f 0a00 	mov.w	sl, #0
 800fac0:	f8bc b000 	ldrh.w	fp, [ip]
 800fac4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fac8:	fb09 220b 	mla	r2, r9, fp, r2
 800facc:	4452      	add	r2, sl
 800face:	b289      	uxth	r1, r1
 800fad0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fad4:	f84e 1b04 	str.w	r1, [lr], #4
 800fad8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fadc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fae0:	f8be 1000 	ldrh.w	r1, [lr]
 800fae4:	fb09 110a 	mla	r1, r9, sl, r1
 800fae8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800faec:	4567      	cmp	r7, ip
 800faee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800faf2:	d8e5      	bhi.n	800fac0 <__multiply+0x10c>
 800faf4:	9a01      	ldr	r2, [sp, #4]
 800faf6:	50a9      	str	r1, [r5, r2]
 800faf8:	3504      	adds	r5, #4
 800fafa:	e799      	b.n	800fa30 <__multiply+0x7c>
 800fafc:	3e01      	subs	r6, #1
 800fafe:	e79b      	b.n	800fa38 <__multiply+0x84>
 800fb00:	080113a4 	.word	0x080113a4
 800fb04:	080113b5 	.word	0x080113b5

0800fb08 <__pow5mult>:
 800fb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb0c:	4615      	mov	r5, r2
 800fb0e:	f012 0203 	ands.w	r2, r2, #3
 800fb12:	4606      	mov	r6, r0
 800fb14:	460f      	mov	r7, r1
 800fb16:	d007      	beq.n	800fb28 <__pow5mult+0x20>
 800fb18:	4c25      	ldr	r4, [pc, #148]	; (800fbb0 <__pow5mult+0xa8>)
 800fb1a:	3a01      	subs	r2, #1
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb22:	f7ff fe9d 	bl	800f860 <__multadd>
 800fb26:	4607      	mov	r7, r0
 800fb28:	10ad      	asrs	r5, r5, #2
 800fb2a:	d03d      	beq.n	800fba8 <__pow5mult+0xa0>
 800fb2c:	69f4      	ldr	r4, [r6, #28]
 800fb2e:	b97c      	cbnz	r4, 800fb50 <__pow5mult+0x48>
 800fb30:	2010      	movs	r0, #16
 800fb32:	f7ff fd7f 	bl	800f634 <malloc>
 800fb36:	4602      	mov	r2, r0
 800fb38:	61f0      	str	r0, [r6, #28]
 800fb3a:	b928      	cbnz	r0, 800fb48 <__pow5mult+0x40>
 800fb3c:	4b1d      	ldr	r3, [pc, #116]	; (800fbb4 <__pow5mult+0xac>)
 800fb3e:	481e      	ldr	r0, [pc, #120]	; (800fbb8 <__pow5mult+0xb0>)
 800fb40:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fb44:	f000 fbd6 	bl	80102f4 <__assert_func>
 800fb48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb4c:	6004      	str	r4, [r0, #0]
 800fb4e:	60c4      	str	r4, [r0, #12]
 800fb50:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fb54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb58:	b94c      	cbnz	r4, 800fb6e <__pow5mult+0x66>
 800fb5a:	f240 2171 	movw	r1, #625	; 0x271
 800fb5e:	4630      	mov	r0, r6
 800fb60:	f7ff ff12 	bl	800f988 <__i2b>
 800fb64:	2300      	movs	r3, #0
 800fb66:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb6a:	4604      	mov	r4, r0
 800fb6c:	6003      	str	r3, [r0, #0]
 800fb6e:	f04f 0900 	mov.w	r9, #0
 800fb72:	07eb      	lsls	r3, r5, #31
 800fb74:	d50a      	bpl.n	800fb8c <__pow5mult+0x84>
 800fb76:	4639      	mov	r1, r7
 800fb78:	4622      	mov	r2, r4
 800fb7a:	4630      	mov	r0, r6
 800fb7c:	f7ff ff1a 	bl	800f9b4 <__multiply>
 800fb80:	4639      	mov	r1, r7
 800fb82:	4680      	mov	r8, r0
 800fb84:	4630      	mov	r0, r6
 800fb86:	f7ff fe49 	bl	800f81c <_Bfree>
 800fb8a:	4647      	mov	r7, r8
 800fb8c:	106d      	asrs	r5, r5, #1
 800fb8e:	d00b      	beq.n	800fba8 <__pow5mult+0xa0>
 800fb90:	6820      	ldr	r0, [r4, #0]
 800fb92:	b938      	cbnz	r0, 800fba4 <__pow5mult+0x9c>
 800fb94:	4622      	mov	r2, r4
 800fb96:	4621      	mov	r1, r4
 800fb98:	4630      	mov	r0, r6
 800fb9a:	f7ff ff0b 	bl	800f9b4 <__multiply>
 800fb9e:	6020      	str	r0, [r4, #0]
 800fba0:	f8c0 9000 	str.w	r9, [r0]
 800fba4:	4604      	mov	r4, r0
 800fba6:	e7e4      	b.n	800fb72 <__pow5mult+0x6a>
 800fba8:	4638      	mov	r0, r7
 800fbaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbae:	bf00      	nop
 800fbb0:	08011500 	.word	0x08011500
 800fbb4:	08011335 	.word	0x08011335
 800fbb8:	080113b5 	.word	0x080113b5

0800fbbc <__lshift>:
 800fbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbc0:	460c      	mov	r4, r1
 800fbc2:	6849      	ldr	r1, [r1, #4]
 800fbc4:	6923      	ldr	r3, [r4, #16]
 800fbc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fbca:	68a3      	ldr	r3, [r4, #8]
 800fbcc:	4607      	mov	r7, r0
 800fbce:	4691      	mov	r9, r2
 800fbd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fbd4:	f108 0601 	add.w	r6, r8, #1
 800fbd8:	42b3      	cmp	r3, r6
 800fbda:	db0b      	blt.n	800fbf4 <__lshift+0x38>
 800fbdc:	4638      	mov	r0, r7
 800fbde:	f7ff fddd 	bl	800f79c <_Balloc>
 800fbe2:	4605      	mov	r5, r0
 800fbe4:	b948      	cbnz	r0, 800fbfa <__lshift+0x3e>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	4b28      	ldr	r3, [pc, #160]	; (800fc8c <__lshift+0xd0>)
 800fbea:	4829      	ldr	r0, [pc, #164]	; (800fc90 <__lshift+0xd4>)
 800fbec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fbf0:	f000 fb80 	bl	80102f4 <__assert_func>
 800fbf4:	3101      	adds	r1, #1
 800fbf6:	005b      	lsls	r3, r3, #1
 800fbf8:	e7ee      	b.n	800fbd8 <__lshift+0x1c>
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	f100 0114 	add.w	r1, r0, #20
 800fc00:	f100 0210 	add.w	r2, r0, #16
 800fc04:	4618      	mov	r0, r3
 800fc06:	4553      	cmp	r3, sl
 800fc08:	db33      	blt.n	800fc72 <__lshift+0xb6>
 800fc0a:	6920      	ldr	r0, [r4, #16]
 800fc0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc10:	f104 0314 	add.w	r3, r4, #20
 800fc14:	f019 091f 	ands.w	r9, r9, #31
 800fc18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fc20:	d02b      	beq.n	800fc7a <__lshift+0xbe>
 800fc22:	f1c9 0e20 	rsb	lr, r9, #32
 800fc26:	468a      	mov	sl, r1
 800fc28:	2200      	movs	r2, #0
 800fc2a:	6818      	ldr	r0, [r3, #0]
 800fc2c:	fa00 f009 	lsl.w	r0, r0, r9
 800fc30:	4310      	orrs	r0, r2
 800fc32:	f84a 0b04 	str.w	r0, [sl], #4
 800fc36:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc3a:	459c      	cmp	ip, r3
 800fc3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800fc40:	d8f3      	bhi.n	800fc2a <__lshift+0x6e>
 800fc42:	ebac 0304 	sub.w	r3, ip, r4
 800fc46:	3b15      	subs	r3, #21
 800fc48:	f023 0303 	bic.w	r3, r3, #3
 800fc4c:	3304      	adds	r3, #4
 800fc4e:	f104 0015 	add.w	r0, r4, #21
 800fc52:	4584      	cmp	ip, r0
 800fc54:	bf38      	it	cc
 800fc56:	2304      	movcc	r3, #4
 800fc58:	50ca      	str	r2, [r1, r3]
 800fc5a:	b10a      	cbz	r2, 800fc60 <__lshift+0xa4>
 800fc5c:	f108 0602 	add.w	r6, r8, #2
 800fc60:	3e01      	subs	r6, #1
 800fc62:	4638      	mov	r0, r7
 800fc64:	612e      	str	r6, [r5, #16]
 800fc66:	4621      	mov	r1, r4
 800fc68:	f7ff fdd8 	bl	800f81c <_Bfree>
 800fc6c:	4628      	mov	r0, r5
 800fc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc72:	f842 0f04 	str.w	r0, [r2, #4]!
 800fc76:	3301      	adds	r3, #1
 800fc78:	e7c5      	b.n	800fc06 <__lshift+0x4a>
 800fc7a:	3904      	subs	r1, #4
 800fc7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc80:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc84:	459c      	cmp	ip, r3
 800fc86:	d8f9      	bhi.n	800fc7c <__lshift+0xc0>
 800fc88:	e7ea      	b.n	800fc60 <__lshift+0xa4>
 800fc8a:	bf00      	nop
 800fc8c:	080113a4 	.word	0x080113a4
 800fc90:	080113b5 	.word	0x080113b5

0800fc94 <__mcmp>:
 800fc94:	b530      	push	{r4, r5, lr}
 800fc96:	6902      	ldr	r2, [r0, #16]
 800fc98:	690c      	ldr	r4, [r1, #16]
 800fc9a:	1b12      	subs	r2, r2, r4
 800fc9c:	d10e      	bne.n	800fcbc <__mcmp+0x28>
 800fc9e:	f100 0314 	add.w	r3, r0, #20
 800fca2:	3114      	adds	r1, #20
 800fca4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fca8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fcac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fcb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fcb4:	42a5      	cmp	r5, r4
 800fcb6:	d003      	beq.n	800fcc0 <__mcmp+0x2c>
 800fcb8:	d305      	bcc.n	800fcc6 <__mcmp+0x32>
 800fcba:	2201      	movs	r2, #1
 800fcbc:	4610      	mov	r0, r2
 800fcbe:	bd30      	pop	{r4, r5, pc}
 800fcc0:	4283      	cmp	r3, r0
 800fcc2:	d3f3      	bcc.n	800fcac <__mcmp+0x18>
 800fcc4:	e7fa      	b.n	800fcbc <__mcmp+0x28>
 800fcc6:	f04f 32ff 	mov.w	r2, #4294967295
 800fcca:	e7f7      	b.n	800fcbc <__mcmp+0x28>

0800fccc <__mdiff>:
 800fccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd0:	460c      	mov	r4, r1
 800fcd2:	4606      	mov	r6, r0
 800fcd4:	4611      	mov	r1, r2
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	4690      	mov	r8, r2
 800fcda:	f7ff ffdb 	bl	800fc94 <__mcmp>
 800fcde:	1e05      	subs	r5, r0, #0
 800fce0:	d110      	bne.n	800fd04 <__mdiff+0x38>
 800fce2:	4629      	mov	r1, r5
 800fce4:	4630      	mov	r0, r6
 800fce6:	f7ff fd59 	bl	800f79c <_Balloc>
 800fcea:	b930      	cbnz	r0, 800fcfa <__mdiff+0x2e>
 800fcec:	4b3a      	ldr	r3, [pc, #232]	; (800fdd8 <__mdiff+0x10c>)
 800fcee:	4602      	mov	r2, r0
 800fcf0:	f240 2137 	movw	r1, #567	; 0x237
 800fcf4:	4839      	ldr	r0, [pc, #228]	; (800fddc <__mdiff+0x110>)
 800fcf6:	f000 fafd 	bl	80102f4 <__assert_func>
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd04:	bfa4      	itt	ge
 800fd06:	4643      	movge	r3, r8
 800fd08:	46a0      	movge	r8, r4
 800fd0a:	4630      	mov	r0, r6
 800fd0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fd10:	bfa6      	itte	ge
 800fd12:	461c      	movge	r4, r3
 800fd14:	2500      	movge	r5, #0
 800fd16:	2501      	movlt	r5, #1
 800fd18:	f7ff fd40 	bl	800f79c <_Balloc>
 800fd1c:	b920      	cbnz	r0, 800fd28 <__mdiff+0x5c>
 800fd1e:	4b2e      	ldr	r3, [pc, #184]	; (800fdd8 <__mdiff+0x10c>)
 800fd20:	4602      	mov	r2, r0
 800fd22:	f240 2145 	movw	r1, #581	; 0x245
 800fd26:	e7e5      	b.n	800fcf4 <__mdiff+0x28>
 800fd28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fd2c:	6926      	ldr	r6, [r4, #16]
 800fd2e:	60c5      	str	r5, [r0, #12]
 800fd30:	f104 0914 	add.w	r9, r4, #20
 800fd34:	f108 0514 	add.w	r5, r8, #20
 800fd38:	f100 0e14 	add.w	lr, r0, #20
 800fd3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fd40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fd44:	f108 0210 	add.w	r2, r8, #16
 800fd48:	46f2      	mov	sl, lr
 800fd4a:	2100      	movs	r1, #0
 800fd4c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fd54:	fa11 f88b 	uxtah	r8, r1, fp
 800fd58:	b299      	uxth	r1, r3
 800fd5a:	0c1b      	lsrs	r3, r3, #16
 800fd5c:	eba8 0801 	sub.w	r8, r8, r1
 800fd60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fd64:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fd68:	fa1f f888 	uxth.w	r8, r8
 800fd6c:	1419      	asrs	r1, r3, #16
 800fd6e:	454e      	cmp	r6, r9
 800fd70:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fd74:	f84a 3b04 	str.w	r3, [sl], #4
 800fd78:	d8e8      	bhi.n	800fd4c <__mdiff+0x80>
 800fd7a:	1b33      	subs	r3, r6, r4
 800fd7c:	3b15      	subs	r3, #21
 800fd7e:	f023 0303 	bic.w	r3, r3, #3
 800fd82:	3304      	adds	r3, #4
 800fd84:	3415      	adds	r4, #21
 800fd86:	42a6      	cmp	r6, r4
 800fd88:	bf38      	it	cc
 800fd8a:	2304      	movcc	r3, #4
 800fd8c:	441d      	add	r5, r3
 800fd8e:	4473      	add	r3, lr
 800fd90:	469e      	mov	lr, r3
 800fd92:	462e      	mov	r6, r5
 800fd94:	4566      	cmp	r6, ip
 800fd96:	d30e      	bcc.n	800fdb6 <__mdiff+0xea>
 800fd98:	f10c 0203 	add.w	r2, ip, #3
 800fd9c:	1b52      	subs	r2, r2, r5
 800fd9e:	f022 0203 	bic.w	r2, r2, #3
 800fda2:	3d03      	subs	r5, #3
 800fda4:	45ac      	cmp	ip, r5
 800fda6:	bf38      	it	cc
 800fda8:	2200      	movcc	r2, #0
 800fdaa:	4413      	add	r3, r2
 800fdac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fdb0:	b17a      	cbz	r2, 800fdd2 <__mdiff+0x106>
 800fdb2:	6107      	str	r7, [r0, #16]
 800fdb4:	e7a4      	b.n	800fd00 <__mdiff+0x34>
 800fdb6:	f856 8b04 	ldr.w	r8, [r6], #4
 800fdba:	fa11 f288 	uxtah	r2, r1, r8
 800fdbe:	1414      	asrs	r4, r2, #16
 800fdc0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fdc4:	b292      	uxth	r2, r2
 800fdc6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fdca:	f84e 2b04 	str.w	r2, [lr], #4
 800fdce:	1421      	asrs	r1, r4, #16
 800fdd0:	e7e0      	b.n	800fd94 <__mdiff+0xc8>
 800fdd2:	3f01      	subs	r7, #1
 800fdd4:	e7ea      	b.n	800fdac <__mdiff+0xe0>
 800fdd6:	bf00      	nop
 800fdd8:	080113a4 	.word	0x080113a4
 800fddc:	080113b5 	.word	0x080113b5

0800fde0 <__d2b>:
 800fde0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fde4:	460f      	mov	r7, r1
 800fde6:	2101      	movs	r1, #1
 800fde8:	ec59 8b10 	vmov	r8, r9, d0
 800fdec:	4616      	mov	r6, r2
 800fdee:	f7ff fcd5 	bl	800f79c <_Balloc>
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	b930      	cbnz	r0, 800fe04 <__d2b+0x24>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	4b24      	ldr	r3, [pc, #144]	; (800fe8c <__d2b+0xac>)
 800fdfa:	4825      	ldr	r0, [pc, #148]	; (800fe90 <__d2b+0xb0>)
 800fdfc:	f240 310f 	movw	r1, #783	; 0x30f
 800fe00:	f000 fa78 	bl	80102f4 <__assert_func>
 800fe04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fe08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fe0c:	bb2d      	cbnz	r5, 800fe5a <__d2b+0x7a>
 800fe0e:	9301      	str	r3, [sp, #4]
 800fe10:	f1b8 0300 	subs.w	r3, r8, #0
 800fe14:	d026      	beq.n	800fe64 <__d2b+0x84>
 800fe16:	4668      	mov	r0, sp
 800fe18:	9300      	str	r3, [sp, #0]
 800fe1a:	f7ff fd87 	bl	800f92c <__lo0bits>
 800fe1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fe22:	b1e8      	cbz	r0, 800fe60 <__d2b+0x80>
 800fe24:	f1c0 0320 	rsb	r3, r0, #32
 800fe28:	fa02 f303 	lsl.w	r3, r2, r3
 800fe2c:	430b      	orrs	r3, r1
 800fe2e:	40c2      	lsrs	r2, r0
 800fe30:	6163      	str	r3, [r4, #20]
 800fe32:	9201      	str	r2, [sp, #4]
 800fe34:	9b01      	ldr	r3, [sp, #4]
 800fe36:	61a3      	str	r3, [r4, #24]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	bf14      	ite	ne
 800fe3c:	2202      	movne	r2, #2
 800fe3e:	2201      	moveq	r2, #1
 800fe40:	6122      	str	r2, [r4, #16]
 800fe42:	b1bd      	cbz	r5, 800fe74 <__d2b+0x94>
 800fe44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe48:	4405      	add	r5, r0
 800fe4a:	603d      	str	r5, [r7, #0]
 800fe4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe50:	6030      	str	r0, [r6, #0]
 800fe52:	4620      	mov	r0, r4
 800fe54:	b003      	add	sp, #12
 800fe56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe5e:	e7d6      	b.n	800fe0e <__d2b+0x2e>
 800fe60:	6161      	str	r1, [r4, #20]
 800fe62:	e7e7      	b.n	800fe34 <__d2b+0x54>
 800fe64:	a801      	add	r0, sp, #4
 800fe66:	f7ff fd61 	bl	800f92c <__lo0bits>
 800fe6a:	9b01      	ldr	r3, [sp, #4]
 800fe6c:	6163      	str	r3, [r4, #20]
 800fe6e:	3020      	adds	r0, #32
 800fe70:	2201      	movs	r2, #1
 800fe72:	e7e5      	b.n	800fe40 <__d2b+0x60>
 800fe74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe7c:	6038      	str	r0, [r7, #0]
 800fe7e:	6918      	ldr	r0, [r3, #16]
 800fe80:	f7ff fd34 	bl	800f8ec <__hi0bits>
 800fe84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe88:	e7e2      	b.n	800fe50 <__d2b+0x70>
 800fe8a:	bf00      	nop
 800fe8c:	080113a4 	.word	0x080113a4
 800fe90:	080113b5 	.word	0x080113b5

0800fe94 <__ssputs_r>:
 800fe94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe98:	688e      	ldr	r6, [r1, #8]
 800fe9a:	461f      	mov	r7, r3
 800fe9c:	42be      	cmp	r6, r7
 800fe9e:	680b      	ldr	r3, [r1, #0]
 800fea0:	4682      	mov	sl, r0
 800fea2:	460c      	mov	r4, r1
 800fea4:	4690      	mov	r8, r2
 800fea6:	d82c      	bhi.n	800ff02 <__ssputs_r+0x6e>
 800fea8:	898a      	ldrh	r2, [r1, #12]
 800feaa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800feae:	d026      	beq.n	800fefe <__ssputs_r+0x6a>
 800feb0:	6965      	ldr	r5, [r4, #20]
 800feb2:	6909      	ldr	r1, [r1, #16]
 800feb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800feb8:	eba3 0901 	sub.w	r9, r3, r1
 800febc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fec0:	1c7b      	adds	r3, r7, #1
 800fec2:	444b      	add	r3, r9
 800fec4:	106d      	asrs	r5, r5, #1
 800fec6:	429d      	cmp	r5, r3
 800fec8:	bf38      	it	cc
 800feca:	461d      	movcc	r5, r3
 800fecc:	0553      	lsls	r3, r2, #21
 800fece:	d527      	bpl.n	800ff20 <__ssputs_r+0x8c>
 800fed0:	4629      	mov	r1, r5
 800fed2:	f7ff fbd7 	bl	800f684 <_malloc_r>
 800fed6:	4606      	mov	r6, r0
 800fed8:	b360      	cbz	r0, 800ff34 <__ssputs_r+0xa0>
 800feda:	6921      	ldr	r1, [r4, #16]
 800fedc:	464a      	mov	r2, r9
 800fede:	f7fe fcd5 	bl	800e88c <memcpy>
 800fee2:	89a3      	ldrh	r3, [r4, #12]
 800fee4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800feec:	81a3      	strh	r3, [r4, #12]
 800feee:	6126      	str	r6, [r4, #16]
 800fef0:	6165      	str	r5, [r4, #20]
 800fef2:	444e      	add	r6, r9
 800fef4:	eba5 0509 	sub.w	r5, r5, r9
 800fef8:	6026      	str	r6, [r4, #0]
 800fefa:	60a5      	str	r5, [r4, #8]
 800fefc:	463e      	mov	r6, r7
 800fefe:	42be      	cmp	r6, r7
 800ff00:	d900      	bls.n	800ff04 <__ssputs_r+0x70>
 800ff02:	463e      	mov	r6, r7
 800ff04:	6820      	ldr	r0, [r4, #0]
 800ff06:	4632      	mov	r2, r6
 800ff08:	4641      	mov	r1, r8
 800ff0a:	f000 f9c9 	bl	80102a0 <memmove>
 800ff0e:	68a3      	ldr	r3, [r4, #8]
 800ff10:	1b9b      	subs	r3, r3, r6
 800ff12:	60a3      	str	r3, [r4, #8]
 800ff14:	6823      	ldr	r3, [r4, #0]
 800ff16:	4433      	add	r3, r6
 800ff18:	6023      	str	r3, [r4, #0]
 800ff1a:	2000      	movs	r0, #0
 800ff1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff20:	462a      	mov	r2, r5
 800ff22:	f000 fa2d 	bl	8010380 <_realloc_r>
 800ff26:	4606      	mov	r6, r0
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	d1e0      	bne.n	800feee <__ssputs_r+0x5a>
 800ff2c:	6921      	ldr	r1, [r4, #16]
 800ff2e:	4650      	mov	r0, sl
 800ff30:	f7ff fb34 	bl	800f59c <_free_r>
 800ff34:	230c      	movs	r3, #12
 800ff36:	f8ca 3000 	str.w	r3, [sl]
 800ff3a:	89a3      	ldrh	r3, [r4, #12]
 800ff3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff40:	81a3      	strh	r3, [r4, #12]
 800ff42:	f04f 30ff 	mov.w	r0, #4294967295
 800ff46:	e7e9      	b.n	800ff1c <__ssputs_r+0x88>

0800ff48 <_svfiprintf_r>:
 800ff48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff4c:	4698      	mov	r8, r3
 800ff4e:	898b      	ldrh	r3, [r1, #12]
 800ff50:	061b      	lsls	r3, r3, #24
 800ff52:	b09d      	sub	sp, #116	; 0x74
 800ff54:	4607      	mov	r7, r0
 800ff56:	460d      	mov	r5, r1
 800ff58:	4614      	mov	r4, r2
 800ff5a:	d50e      	bpl.n	800ff7a <_svfiprintf_r+0x32>
 800ff5c:	690b      	ldr	r3, [r1, #16]
 800ff5e:	b963      	cbnz	r3, 800ff7a <_svfiprintf_r+0x32>
 800ff60:	2140      	movs	r1, #64	; 0x40
 800ff62:	f7ff fb8f 	bl	800f684 <_malloc_r>
 800ff66:	6028      	str	r0, [r5, #0]
 800ff68:	6128      	str	r0, [r5, #16]
 800ff6a:	b920      	cbnz	r0, 800ff76 <_svfiprintf_r+0x2e>
 800ff6c:	230c      	movs	r3, #12
 800ff6e:	603b      	str	r3, [r7, #0]
 800ff70:	f04f 30ff 	mov.w	r0, #4294967295
 800ff74:	e0d0      	b.n	8010118 <_svfiprintf_r+0x1d0>
 800ff76:	2340      	movs	r3, #64	; 0x40
 800ff78:	616b      	str	r3, [r5, #20]
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff7e:	2320      	movs	r3, #32
 800ff80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff84:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff88:	2330      	movs	r3, #48	; 0x30
 800ff8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010130 <_svfiprintf_r+0x1e8>
 800ff8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff92:	f04f 0901 	mov.w	r9, #1
 800ff96:	4623      	mov	r3, r4
 800ff98:	469a      	mov	sl, r3
 800ff9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff9e:	b10a      	cbz	r2, 800ffa4 <_svfiprintf_r+0x5c>
 800ffa0:	2a25      	cmp	r2, #37	; 0x25
 800ffa2:	d1f9      	bne.n	800ff98 <_svfiprintf_r+0x50>
 800ffa4:	ebba 0b04 	subs.w	fp, sl, r4
 800ffa8:	d00b      	beq.n	800ffc2 <_svfiprintf_r+0x7a>
 800ffaa:	465b      	mov	r3, fp
 800ffac:	4622      	mov	r2, r4
 800ffae:	4629      	mov	r1, r5
 800ffb0:	4638      	mov	r0, r7
 800ffb2:	f7ff ff6f 	bl	800fe94 <__ssputs_r>
 800ffb6:	3001      	adds	r0, #1
 800ffb8:	f000 80a9 	beq.w	801010e <_svfiprintf_r+0x1c6>
 800ffbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffbe:	445a      	add	r2, fp
 800ffc0:	9209      	str	r2, [sp, #36]	; 0x24
 800ffc2:	f89a 3000 	ldrb.w	r3, [sl]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	f000 80a1 	beq.w	801010e <_svfiprintf_r+0x1c6>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	f04f 32ff 	mov.w	r2, #4294967295
 800ffd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffd6:	f10a 0a01 	add.w	sl, sl, #1
 800ffda:	9304      	str	r3, [sp, #16]
 800ffdc:	9307      	str	r3, [sp, #28]
 800ffde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ffe2:	931a      	str	r3, [sp, #104]	; 0x68
 800ffe4:	4654      	mov	r4, sl
 800ffe6:	2205      	movs	r2, #5
 800ffe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffec:	4850      	ldr	r0, [pc, #320]	; (8010130 <_svfiprintf_r+0x1e8>)
 800ffee:	f7f0 f90f 	bl	8000210 <memchr>
 800fff2:	9a04      	ldr	r2, [sp, #16]
 800fff4:	b9d8      	cbnz	r0, 801002e <_svfiprintf_r+0xe6>
 800fff6:	06d0      	lsls	r0, r2, #27
 800fff8:	bf44      	itt	mi
 800fffa:	2320      	movmi	r3, #32
 800fffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010000:	0711      	lsls	r1, r2, #28
 8010002:	bf44      	itt	mi
 8010004:	232b      	movmi	r3, #43	; 0x2b
 8010006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801000a:	f89a 3000 	ldrb.w	r3, [sl]
 801000e:	2b2a      	cmp	r3, #42	; 0x2a
 8010010:	d015      	beq.n	801003e <_svfiprintf_r+0xf6>
 8010012:	9a07      	ldr	r2, [sp, #28]
 8010014:	4654      	mov	r4, sl
 8010016:	2000      	movs	r0, #0
 8010018:	f04f 0c0a 	mov.w	ip, #10
 801001c:	4621      	mov	r1, r4
 801001e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010022:	3b30      	subs	r3, #48	; 0x30
 8010024:	2b09      	cmp	r3, #9
 8010026:	d94d      	bls.n	80100c4 <_svfiprintf_r+0x17c>
 8010028:	b1b0      	cbz	r0, 8010058 <_svfiprintf_r+0x110>
 801002a:	9207      	str	r2, [sp, #28]
 801002c:	e014      	b.n	8010058 <_svfiprintf_r+0x110>
 801002e:	eba0 0308 	sub.w	r3, r0, r8
 8010032:	fa09 f303 	lsl.w	r3, r9, r3
 8010036:	4313      	orrs	r3, r2
 8010038:	9304      	str	r3, [sp, #16]
 801003a:	46a2      	mov	sl, r4
 801003c:	e7d2      	b.n	800ffe4 <_svfiprintf_r+0x9c>
 801003e:	9b03      	ldr	r3, [sp, #12]
 8010040:	1d19      	adds	r1, r3, #4
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	9103      	str	r1, [sp, #12]
 8010046:	2b00      	cmp	r3, #0
 8010048:	bfbb      	ittet	lt
 801004a:	425b      	neglt	r3, r3
 801004c:	f042 0202 	orrlt.w	r2, r2, #2
 8010050:	9307      	strge	r3, [sp, #28]
 8010052:	9307      	strlt	r3, [sp, #28]
 8010054:	bfb8      	it	lt
 8010056:	9204      	strlt	r2, [sp, #16]
 8010058:	7823      	ldrb	r3, [r4, #0]
 801005a:	2b2e      	cmp	r3, #46	; 0x2e
 801005c:	d10c      	bne.n	8010078 <_svfiprintf_r+0x130>
 801005e:	7863      	ldrb	r3, [r4, #1]
 8010060:	2b2a      	cmp	r3, #42	; 0x2a
 8010062:	d134      	bne.n	80100ce <_svfiprintf_r+0x186>
 8010064:	9b03      	ldr	r3, [sp, #12]
 8010066:	1d1a      	adds	r2, r3, #4
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	9203      	str	r2, [sp, #12]
 801006c:	2b00      	cmp	r3, #0
 801006e:	bfb8      	it	lt
 8010070:	f04f 33ff 	movlt.w	r3, #4294967295
 8010074:	3402      	adds	r4, #2
 8010076:	9305      	str	r3, [sp, #20]
 8010078:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010140 <_svfiprintf_r+0x1f8>
 801007c:	7821      	ldrb	r1, [r4, #0]
 801007e:	2203      	movs	r2, #3
 8010080:	4650      	mov	r0, sl
 8010082:	f7f0 f8c5 	bl	8000210 <memchr>
 8010086:	b138      	cbz	r0, 8010098 <_svfiprintf_r+0x150>
 8010088:	9b04      	ldr	r3, [sp, #16]
 801008a:	eba0 000a 	sub.w	r0, r0, sl
 801008e:	2240      	movs	r2, #64	; 0x40
 8010090:	4082      	lsls	r2, r0
 8010092:	4313      	orrs	r3, r2
 8010094:	3401      	adds	r4, #1
 8010096:	9304      	str	r3, [sp, #16]
 8010098:	f814 1b01 	ldrb.w	r1, [r4], #1
 801009c:	4825      	ldr	r0, [pc, #148]	; (8010134 <_svfiprintf_r+0x1ec>)
 801009e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100a2:	2206      	movs	r2, #6
 80100a4:	f7f0 f8b4 	bl	8000210 <memchr>
 80100a8:	2800      	cmp	r0, #0
 80100aa:	d038      	beq.n	801011e <_svfiprintf_r+0x1d6>
 80100ac:	4b22      	ldr	r3, [pc, #136]	; (8010138 <_svfiprintf_r+0x1f0>)
 80100ae:	bb1b      	cbnz	r3, 80100f8 <_svfiprintf_r+0x1b0>
 80100b0:	9b03      	ldr	r3, [sp, #12]
 80100b2:	3307      	adds	r3, #7
 80100b4:	f023 0307 	bic.w	r3, r3, #7
 80100b8:	3308      	adds	r3, #8
 80100ba:	9303      	str	r3, [sp, #12]
 80100bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100be:	4433      	add	r3, r6
 80100c0:	9309      	str	r3, [sp, #36]	; 0x24
 80100c2:	e768      	b.n	800ff96 <_svfiprintf_r+0x4e>
 80100c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80100c8:	460c      	mov	r4, r1
 80100ca:	2001      	movs	r0, #1
 80100cc:	e7a6      	b.n	801001c <_svfiprintf_r+0xd4>
 80100ce:	2300      	movs	r3, #0
 80100d0:	3401      	adds	r4, #1
 80100d2:	9305      	str	r3, [sp, #20]
 80100d4:	4619      	mov	r1, r3
 80100d6:	f04f 0c0a 	mov.w	ip, #10
 80100da:	4620      	mov	r0, r4
 80100dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100e0:	3a30      	subs	r2, #48	; 0x30
 80100e2:	2a09      	cmp	r2, #9
 80100e4:	d903      	bls.n	80100ee <_svfiprintf_r+0x1a6>
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d0c6      	beq.n	8010078 <_svfiprintf_r+0x130>
 80100ea:	9105      	str	r1, [sp, #20]
 80100ec:	e7c4      	b.n	8010078 <_svfiprintf_r+0x130>
 80100ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80100f2:	4604      	mov	r4, r0
 80100f4:	2301      	movs	r3, #1
 80100f6:	e7f0      	b.n	80100da <_svfiprintf_r+0x192>
 80100f8:	ab03      	add	r3, sp, #12
 80100fa:	9300      	str	r3, [sp, #0]
 80100fc:	462a      	mov	r2, r5
 80100fe:	4b0f      	ldr	r3, [pc, #60]	; (801013c <_svfiprintf_r+0x1f4>)
 8010100:	a904      	add	r1, sp, #16
 8010102:	4638      	mov	r0, r7
 8010104:	f7fd fe14 	bl	800dd30 <_printf_float>
 8010108:	1c42      	adds	r2, r0, #1
 801010a:	4606      	mov	r6, r0
 801010c:	d1d6      	bne.n	80100bc <_svfiprintf_r+0x174>
 801010e:	89ab      	ldrh	r3, [r5, #12]
 8010110:	065b      	lsls	r3, r3, #25
 8010112:	f53f af2d 	bmi.w	800ff70 <_svfiprintf_r+0x28>
 8010116:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010118:	b01d      	add	sp, #116	; 0x74
 801011a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801011e:	ab03      	add	r3, sp, #12
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	462a      	mov	r2, r5
 8010124:	4b05      	ldr	r3, [pc, #20]	; (801013c <_svfiprintf_r+0x1f4>)
 8010126:	a904      	add	r1, sp, #16
 8010128:	4638      	mov	r0, r7
 801012a:	f7fe f8a5 	bl	800e278 <_printf_i>
 801012e:	e7eb      	b.n	8010108 <_svfiprintf_r+0x1c0>
 8010130:	0801150c 	.word	0x0801150c
 8010134:	08011516 	.word	0x08011516
 8010138:	0800dd31 	.word	0x0800dd31
 801013c:	0800fe95 	.word	0x0800fe95
 8010140:	08011512 	.word	0x08011512

08010144 <__sflush_r>:
 8010144:	898a      	ldrh	r2, [r1, #12]
 8010146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801014a:	4605      	mov	r5, r0
 801014c:	0710      	lsls	r0, r2, #28
 801014e:	460c      	mov	r4, r1
 8010150:	d458      	bmi.n	8010204 <__sflush_r+0xc0>
 8010152:	684b      	ldr	r3, [r1, #4]
 8010154:	2b00      	cmp	r3, #0
 8010156:	dc05      	bgt.n	8010164 <__sflush_r+0x20>
 8010158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801015a:	2b00      	cmp	r3, #0
 801015c:	dc02      	bgt.n	8010164 <__sflush_r+0x20>
 801015e:	2000      	movs	r0, #0
 8010160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010166:	2e00      	cmp	r6, #0
 8010168:	d0f9      	beq.n	801015e <__sflush_r+0x1a>
 801016a:	2300      	movs	r3, #0
 801016c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010170:	682f      	ldr	r7, [r5, #0]
 8010172:	6a21      	ldr	r1, [r4, #32]
 8010174:	602b      	str	r3, [r5, #0]
 8010176:	d032      	beq.n	80101de <__sflush_r+0x9a>
 8010178:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801017a:	89a3      	ldrh	r3, [r4, #12]
 801017c:	075a      	lsls	r2, r3, #29
 801017e:	d505      	bpl.n	801018c <__sflush_r+0x48>
 8010180:	6863      	ldr	r3, [r4, #4]
 8010182:	1ac0      	subs	r0, r0, r3
 8010184:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010186:	b10b      	cbz	r3, 801018c <__sflush_r+0x48>
 8010188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801018a:	1ac0      	subs	r0, r0, r3
 801018c:	2300      	movs	r3, #0
 801018e:	4602      	mov	r2, r0
 8010190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010192:	6a21      	ldr	r1, [r4, #32]
 8010194:	4628      	mov	r0, r5
 8010196:	47b0      	blx	r6
 8010198:	1c43      	adds	r3, r0, #1
 801019a:	89a3      	ldrh	r3, [r4, #12]
 801019c:	d106      	bne.n	80101ac <__sflush_r+0x68>
 801019e:	6829      	ldr	r1, [r5, #0]
 80101a0:	291d      	cmp	r1, #29
 80101a2:	d82b      	bhi.n	80101fc <__sflush_r+0xb8>
 80101a4:	4a29      	ldr	r2, [pc, #164]	; (801024c <__sflush_r+0x108>)
 80101a6:	410a      	asrs	r2, r1
 80101a8:	07d6      	lsls	r6, r2, #31
 80101aa:	d427      	bmi.n	80101fc <__sflush_r+0xb8>
 80101ac:	2200      	movs	r2, #0
 80101ae:	6062      	str	r2, [r4, #4]
 80101b0:	04d9      	lsls	r1, r3, #19
 80101b2:	6922      	ldr	r2, [r4, #16]
 80101b4:	6022      	str	r2, [r4, #0]
 80101b6:	d504      	bpl.n	80101c2 <__sflush_r+0x7e>
 80101b8:	1c42      	adds	r2, r0, #1
 80101ba:	d101      	bne.n	80101c0 <__sflush_r+0x7c>
 80101bc:	682b      	ldr	r3, [r5, #0]
 80101be:	b903      	cbnz	r3, 80101c2 <__sflush_r+0x7e>
 80101c0:	6560      	str	r0, [r4, #84]	; 0x54
 80101c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101c4:	602f      	str	r7, [r5, #0]
 80101c6:	2900      	cmp	r1, #0
 80101c8:	d0c9      	beq.n	801015e <__sflush_r+0x1a>
 80101ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101ce:	4299      	cmp	r1, r3
 80101d0:	d002      	beq.n	80101d8 <__sflush_r+0x94>
 80101d2:	4628      	mov	r0, r5
 80101d4:	f7ff f9e2 	bl	800f59c <_free_r>
 80101d8:	2000      	movs	r0, #0
 80101da:	6360      	str	r0, [r4, #52]	; 0x34
 80101dc:	e7c0      	b.n	8010160 <__sflush_r+0x1c>
 80101de:	2301      	movs	r3, #1
 80101e0:	4628      	mov	r0, r5
 80101e2:	47b0      	blx	r6
 80101e4:	1c41      	adds	r1, r0, #1
 80101e6:	d1c8      	bne.n	801017a <__sflush_r+0x36>
 80101e8:	682b      	ldr	r3, [r5, #0]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d0c5      	beq.n	801017a <__sflush_r+0x36>
 80101ee:	2b1d      	cmp	r3, #29
 80101f0:	d001      	beq.n	80101f6 <__sflush_r+0xb2>
 80101f2:	2b16      	cmp	r3, #22
 80101f4:	d101      	bne.n	80101fa <__sflush_r+0xb6>
 80101f6:	602f      	str	r7, [r5, #0]
 80101f8:	e7b1      	b.n	801015e <__sflush_r+0x1a>
 80101fa:	89a3      	ldrh	r3, [r4, #12]
 80101fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010200:	81a3      	strh	r3, [r4, #12]
 8010202:	e7ad      	b.n	8010160 <__sflush_r+0x1c>
 8010204:	690f      	ldr	r7, [r1, #16]
 8010206:	2f00      	cmp	r7, #0
 8010208:	d0a9      	beq.n	801015e <__sflush_r+0x1a>
 801020a:	0793      	lsls	r3, r2, #30
 801020c:	680e      	ldr	r6, [r1, #0]
 801020e:	bf08      	it	eq
 8010210:	694b      	ldreq	r3, [r1, #20]
 8010212:	600f      	str	r7, [r1, #0]
 8010214:	bf18      	it	ne
 8010216:	2300      	movne	r3, #0
 8010218:	eba6 0807 	sub.w	r8, r6, r7
 801021c:	608b      	str	r3, [r1, #8]
 801021e:	f1b8 0f00 	cmp.w	r8, #0
 8010222:	dd9c      	ble.n	801015e <__sflush_r+0x1a>
 8010224:	6a21      	ldr	r1, [r4, #32]
 8010226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010228:	4643      	mov	r3, r8
 801022a:	463a      	mov	r2, r7
 801022c:	4628      	mov	r0, r5
 801022e:	47b0      	blx	r6
 8010230:	2800      	cmp	r0, #0
 8010232:	dc06      	bgt.n	8010242 <__sflush_r+0xfe>
 8010234:	89a3      	ldrh	r3, [r4, #12]
 8010236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801023a:	81a3      	strh	r3, [r4, #12]
 801023c:	f04f 30ff 	mov.w	r0, #4294967295
 8010240:	e78e      	b.n	8010160 <__sflush_r+0x1c>
 8010242:	4407      	add	r7, r0
 8010244:	eba8 0800 	sub.w	r8, r8, r0
 8010248:	e7e9      	b.n	801021e <__sflush_r+0xda>
 801024a:	bf00      	nop
 801024c:	dfbffffe 	.word	0xdfbffffe

08010250 <_fflush_r>:
 8010250:	b538      	push	{r3, r4, r5, lr}
 8010252:	690b      	ldr	r3, [r1, #16]
 8010254:	4605      	mov	r5, r0
 8010256:	460c      	mov	r4, r1
 8010258:	b913      	cbnz	r3, 8010260 <_fflush_r+0x10>
 801025a:	2500      	movs	r5, #0
 801025c:	4628      	mov	r0, r5
 801025e:	bd38      	pop	{r3, r4, r5, pc}
 8010260:	b118      	cbz	r0, 801026a <_fflush_r+0x1a>
 8010262:	6a03      	ldr	r3, [r0, #32]
 8010264:	b90b      	cbnz	r3, 801026a <_fflush_r+0x1a>
 8010266:	f7fe f9a3 	bl	800e5b0 <__sinit>
 801026a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d0f3      	beq.n	801025a <_fflush_r+0xa>
 8010272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010274:	07d0      	lsls	r0, r2, #31
 8010276:	d404      	bmi.n	8010282 <_fflush_r+0x32>
 8010278:	0599      	lsls	r1, r3, #22
 801027a:	d402      	bmi.n	8010282 <_fflush_r+0x32>
 801027c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801027e:	f7fe fb03 	bl	800e888 <__retarget_lock_acquire_recursive>
 8010282:	4628      	mov	r0, r5
 8010284:	4621      	mov	r1, r4
 8010286:	f7ff ff5d 	bl	8010144 <__sflush_r>
 801028a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801028c:	07da      	lsls	r2, r3, #31
 801028e:	4605      	mov	r5, r0
 8010290:	d4e4      	bmi.n	801025c <_fflush_r+0xc>
 8010292:	89a3      	ldrh	r3, [r4, #12]
 8010294:	059b      	lsls	r3, r3, #22
 8010296:	d4e1      	bmi.n	801025c <_fflush_r+0xc>
 8010298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801029a:	f7fe faf6 	bl	800e88a <__retarget_lock_release_recursive>
 801029e:	e7dd      	b.n	801025c <_fflush_r+0xc>

080102a0 <memmove>:
 80102a0:	4288      	cmp	r0, r1
 80102a2:	b510      	push	{r4, lr}
 80102a4:	eb01 0402 	add.w	r4, r1, r2
 80102a8:	d902      	bls.n	80102b0 <memmove+0x10>
 80102aa:	4284      	cmp	r4, r0
 80102ac:	4623      	mov	r3, r4
 80102ae:	d807      	bhi.n	80102c0 <memmove+0x20>
 80102b0:	1e43      	subs	r3, r0, #1
 80102b2:	42a1      	cmp	r1, r4
 80102b4:	d008      	beq.n	80102c8 <memmove+0x28>
 80102b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80102be:	e7f8      	b.n	80102b2 <memmove+0x12>
 80102c0:	4402      	add	r2, r0
 80102c2:	4601      	mov	r1, r0
 80102c4:	428a      	cmp	r2, r1
 80102c6:	d100      	bne.n	80102ca <memmove+0x2a>
 80102c8:	bd10      	pop	{r4, pc}
 80102ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80102ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80102d2:	e7f7      	b.n	80102c4 <memmove+0x24>

080102d4 <_sbrk_r>:
 80102d4:	b538      	push	{r3, r4, r5, lr}
 80102d6:	4d06      	ldr	r5, [pc, #24]	; (80102f0 <_sbrk_r+0x1c>)
 80102d8:	2300      	movs	r3, #0
 80102da:	4604      	mov	r4, r0
 80102dc:	4608      	mov	r0, r1
 80102de:	602b      	str	r3, [r5, #0]
 80102e0:	f7f2 f90a 	bl	80024f8 <_sbrk>
 80102e4:	1c43      	adds	r3, r0, #1
 80102e6:	d102      	bne.n	80102ee <_sbrk_r+0x1a>
 80102e8:	682b      	ldr	r3, [r5, #0]
 80102ea:	b103      	cbz	r3, 80102ee <_sbrk_r+0x1a>
 80102ec:	6023      	str	r3, [r4, #0]
 80102ee:	bd38      	pop	{r3, r4, r5, pc}
 80102f0:	20005974 	.word	0x20005974

080102f4 <__assert_func>:
 80102f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102f6:	4614      	mov	r4, r2
 80102f8:	461a      	mov	r2, r3
 80102fa:	4b09      	ldr	r3, [pc, #36]	; (8010320 <__assert_func+0x2c>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	4605      	mov	r5, r0
 8010300:	68d8      	ldr	r0, [r3, #12]
 8010302:	b14c      	cbz	r4, 8010318 <__assert_func+0x24>
 8010304:	4b07      	ldr	r3, [pc, #28]	; (8010324 <__assert_func+0x30>)
 8010306:	9100      	str	r1, [sp, #0]
 8010308:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801030c:	4906      	ldr	r1, [pc, #24]	; (8010328 <__assert_func+0x34>)
 801030e:	462b      	mov	r3, r5
 8010310:	f000 f872 	bl	80103f8 <fiprintf>
 8010314:	f000 f882 	bl	801041c <abort>
 8010318:	4b04      	ldr	r3, [pc, #16]	; (801032c <__assert_func+0x38>)
 801031a:	461c      	mov	r4, r3
 801031c:	e7f3      	b.n	8010306 <__assert_func+0x12>
 801031e:	bf00      	nop
 8010320:	20000088 	.word	0x20000088
 8010324:	08011527 	.word	0x08011527
 8010328:	08011534 	.word	0x08011534
 801032c:	08011562 	.word	0x08011562

08010330 <_calloc_r>:
 8010330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010332:	fba1 2402 	umull	r2, r4, r1, r2
 8010336:	b94c      	cbnz	r4, 801034c <_calloc_r+0x1c>
 8010338:	4611      	mov	r1, r2
 801033a:	9201      	str	r2, [sp, #4]
 801033c:	f7ff f9a2 	bl	800f684 <_malloc_r>
 8010340:	9a01      	ldr	r2, [sp, #4]
 8010342:	4605      	mov	r5, r0
 8010344:	b930      	cbnz	r0, 8010354 <_calloc_r+0x24>
 8010346:	4628      	mov	r0, r5
 8010348:	b003      	add	sp, #12
 801034a:	bd30      	pop	{r4, r5, pc}
 801034c:	220c      	movs	r2, #12
 801034e:	6002      	str	r2, [r0, #0]
 8010350:	2500      	movs	r5, #0
 8010352:	e7f8      	b.n	8010346 <_calloc_r+0x16>
 8010354:	4621      	mov	r1, r4
 8010356:	f7fe f9c4 	bl	800e6e2 <memset>
 801035a:	e7f4      	b.n	8010346 <_calloc_r+0x16>

0801035c <__ascii_mbtowc>:
 801035c:	b082      	sub	sp, #8
 801035e:	b901      	cbnz	r1, 8010362 <__ascii_mbtowc+0x6>
 8010360:	a901      	add	r1, sp, #4
 8010362:	b142      	cbz	r2, 8010376 <__ascii_mbtowc+0x1a>
 8010364:	b14b      	cbz	r3, 801037a <__ascii_mbtowc+0x1e>
 8010366:	7813      	ldrb	r3, [r2, #0]
 8010368:	600b      	str	r3, [r1, #0]
 801036a:	7812      	ldrb	r2, [r2, #0]
 801036c:	1e10      	subs	r0, r2, #0
 801036e:	bf18      	it	ne
 8010370:	2001      	movne	r0, #1
 8010372:	b002      	add	sp, #8
 8010374:	4770      	bx	lr
 8010376:	4610      	mov	r0, r2
 8010378:	e7fb      	b.n	8010372 <__ascii_mbtowc+0x16>
 801037a:	f06f 0001 	mvn.w	r0, #1
 801037e:	e7f8      	b.n	8010372 <__ascii_mbtowc+0x16>

08010380 <_realloc_r>:
 8010380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010384:	4680      	mov	r8, r0
 8010386:	4614      	mov	r4, r2
 8010388:	460e      	mov	r6, r1
 801038a:	b921      	cbnz	r1, 8010396 <_realloc_r+0x16>
 801038c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010390:	4611      	mov	r1, r2
 8010392:	f7ff b977 	b.w	800f684 <_malloc_r>
 8010396:	b92a      	cbnz	r2, 80103a4 <_realloc_r+0x24>
 8010398:	f7ff f900 	bl	800f59c <_free_r>
 801039c:	4625      	mov	r5, r4
 801039e:	4628      	mov	r0, r5
 80103a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103a4:	f000 f841 	bl	801042a <_malloc_usable_size_r>
 80103a8:	4284      	cmp	r4, r0
 80103aa:	4607      	mov	r7, r0
 80103ac:	d802      	bhi.n	80103b4 <_realloc_r+0x34>
 80103ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80103b2:	d812      	bhi.n	80103da <_realloc_r+0x5a>
 80103b4:	4621      	mov	r1, r4
 80103b6:	4640      	mov	r0, r8
 80103b8:	f7ff f964 	bl	800f684 <_malloc_r>
 80103bc:	4605      	mov	r5, r0
 80103be:	2800      	cmp	r0, #0
 80103c0:	d0ed      	beq.n	801039e <_realloc_r+0x1e>
 80103c2:	42bc      	cmp	r4, r7
 80103c4:	4622      	mov	r2, r4
 80103c6:	4631      	mov	r1, r6
 80103c8:	bf28      	it	cs
 80103ca:	463a      	movcs	r2, r7
 80103cc:	f7fe fa5e 	bl	800e88c <memcpy>
 80103d0:	4631      	mov	r1, r6
 80103d2:	4640      	mov	r0, r8
 80103d4:	f7ff f8e2 	bl	800f59c <_free_r>
 80103d8:	e7e1      	b.n	801039e <_realloc_r+0x1e>
 80103da:	4635      	mov	r5, r6
 80103dc:	e7df      	b.n	801039e <_realloc_r+0x1e>

080103de <__ascii_wctomb>:
 80103de:	b149      	cbz	r1, 80103f4 <__ascii_wctomb+0x16>
 80103e0:	2aff      	cmp	r2, #255	; 0xff
 80103e2:	bf85      	ittet	hi
 80103e4:	238a      	movhi	r3, #138	; 0x8a
 80103e6:	6003      	strhi	r3, [r0, #0]
 80103e8:	700a      	strbls	r2, [r1, #0]
 80103ea:	f04f 30ff 	movhi.w	r0, #4294967295
 80103ee:	bf98      	it	ls
 80103f0:	2001      	movls	r0, #1
 80103f2:	4770      	bx	lr
 80103f4:	4608      	mov	r0, r1
 80103f6:	4770      	bx	lr

080103f8 <fiprintf>:
 80103f8:	b40e      	push	{r1, r2, r3}
 80103fa:	b503      	push	{r0, r1, lr}
 80103fc:	4601      	mov	r1, r0
 80103fe:	ab03      	add	r3, sp, #12
 8010400:	4805      	ldr	r0, [pc, #20]	; (8010418 <fiprintf+0x20>)
 8010402:	f853 2b04 	ldr.w	r2, [r3], #4
 8010406:	6800      	ldr	r0, [r0, #0]
 8010408:	9301      	str	r3, [sp, #4]
 801040a:	f000 f83f 	bl	801048c <_vfiprintf_r>
 801040e:	b002      	add	sp, #8
 8010410:	f85d eb04 	ldr.w	lr, [sp], #4
 8010414:	b003      	add	sp, #12
 8010416:	4770      	bx	lr
 8010418:	20000088 	.word	0x20000088

0801041c <abort>:
 801041c:	b508      	push	{r3, lr}
 801041e:	2006      	movs	r0, #6
 8010420:	f000 fa0c 	bl	801083c <raise>
 8010424:	2001      	movs	r0, #1
 8010426:	f7f9 f9dd 	bl	80097e4 <_exit>

0801042a <_malloc_usable_size_r>:
 801042a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801042e:	1f18      	subs	r0, r3, #4
 8010430:	2b00      	cmp	r3, #0
 8010432:	bfbc      	itt	lt
 8010434:	580b      	ldrlt	r3, [r1, r0]
 8010436:	18c0      	addlt	r0, r0, r3
 8010438:	4770      	bx	lr

0801043a <__sfputc_r>:
 801043a:	6893      	ldr	r3, [r2, #8]
 801043c:	3b01      	subs	r3, #1
 801043e:	2b00      	cmp	r3, #0
 8010440:	b410      	push	{r4}
 8010442:	6093      	str	r3, [r2, #8]
 8010444:	da08      	bge.n	8010458 <__sfputc_r+0x1e>
 8010446:	6994      	ldr	r4, [r2, #24]
 8010448:	42a3      	cmp	r3, r4
 801044a:	db01      	blt.n	8010450 <__sfputc_r+0x16>
 801044c:	290a      	cmp	r1, #10
 801044e:	d103      	bne.n	8010458 <__sfputc_r+0x1e>
 8010450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010454:	f000 b934 	b.w	80106c0 <__swbuf_r>
 8010458:	6813      	ldr	r3, [r2, #0]
 801045a:	1c58      	adds	r0, r3, #1
 801045c:	6010      	str	r0, [r2, #0]
 801045e:	7019      	strb	r1, [r3, #0]
 8010460:	4608      	mov	r0, r1
 8010462:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010466:	4770      	bx	lr

08010468 <__sfputs_r>:
 8010468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046a:	4606      	mov	r6, r0
 801046c:	460f      	mov	r7, r1
 801046e:	4614      	mov	r4, r2
 8010470:	18d5      	adds	r5, r2, r3
 8010472:	42ac      	cmp	r4, r5
 8010474:	d101      	bne.n	801047a <__sfputs_r+0x12>
 8010476:	2000      	movs	r0, #0
 8010478:	e007      	b.n	801048a <__sfputs_r+0x22>
 801047a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801047e:	463a      	mov	r2, r7
 8010480:	4630      	mov	r0, r6
 8010482:	f7ff ffda 	bl	801043a <__sfputc_r>
 8010486:	1c43      	adds	r3, r0, #1
 8010488:	d1f3      	bne.n	8010472 <__sfputs_r+0xa>
 801048a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801048c <_vfiprintf_r>:
 801048c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010490:	460d      	mov	r5, r1
 8010492:	b09d      	sub	sp, #116	; 0x74
 8010494:	4614      	mov	r4, r2
 8010496:	4698      	mov	r8, r3
 8010498:	4606      	mov	r6, r0
 801049a:	b118      	cbz	r0, 80104a4 <_vfiprintf_r+0x18>
 801049c:	6a03      	ldr	r3, [r0, #32]
 801049e:	b90b      	cbnz	r3, 80104a4 <_vfiprintf_r+0x18>
 80104a0:	f7fe f886 	bl	800e5b0 <__sinit>
 80104a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104a6:	07d9      	lsls	r1, r3, #31
 80104a8:	d405      	bmi.n	80104b6 <_vfiprintf_r+0x2a>
 80104aa:	89ab      	ldrh	r3, [r5, #12]
 80104ac:	059a      	lsls	r2, r3, #22
 80104ae:	d402      	bmi.n	80104b6 <_vfiprintf_r+0x2a>
 80104b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104b2:	f7fe f9e9 	bl	800e888 <__retarget_lock_acquire_recursive>
 80104b6:	89ab      	ldrh	r3, [r5, #12]
 80104b8:	071b      	lsls	r3, r3, #28
 80104ba:	d501      	bpl.n	80104c0 <_vfiprintf_r+0x34>
 80104bc:	692b      	ldr	r3, [r5, #16]
 80104be:	b99b      	cbnz	r3, 80104e8 <_vfiprintf_r+0x5c>
 80104c0:	4629      	mov	r1, r5
 80104c2:	4630      	mov	r0, r6
 80104c4:	f000 f93a 	bl	801073c <__swsetup_r>
 80104c8:	b170      	cbz	r0, 80104e8 <_vfiprintf_r+0x5c>
 80104ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104cc:	07dc      	lsls	r4, r3, #31
 80104ce:	d504      	bpl.n	80104da <_vfiprintf_r+0x4e>
 80104d0:	f04f 30ff 	mov.w	r0, #4294967295
 80104d4:	b01d      	add	sp, #116	; 0x74
 80104d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104da:	89ab      	ldrh	r3, [r5, #12]
 80104dc:	0598      	lsls	r0, r3, #22
 80104de:	d4f7      	bmi.n	80104d0 <_vfiprintf_r+0x44>
 80104e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104e2:	f7fe f9d2 	bl	800e88a <__retarget_lock_release_recursive>
 80104e6:	e7f3      	b.n	80104d0 <_vfiprintf_r+0x44>
 80104e8:	2300      	movs	r3, #0
 80104ea:	9309      	str	r3, [sp, #36]	; 0x24
 80104ec:	2320      	movs	r3, #32
 80104ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80104f6:	2330      	movs	r3, #48	; 0x30
 80104f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80106ac <_vfiprintf_r+0x220>
 80104fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010500:	f04f 0901 	mov.w	r9, #1
 8010504:	4623      	mov	r3, r4
 8010506:	469a      	mov	sl, r3
 8010508:	f813 2b01 	ldrb.w	r2, [r3], #1
 801050c:	b10a      	cbz	r2, 8010512 <_vfiprintf_r+0x86>
 801050e:	2a25      	cmp	r2, #37	; 0x25
 8010510:	d1f9      	bne.n	8010506 <_vfiprintf_r+0x7a>
 8010512:	ebba 0b04 	subs.w	fp, sl, r4
 8010516:	d00b      	beq.n	8010530 <_vfiprintf_r+0xa4>
 8010518:	465b      	mov	r3, fp
 801051a:	4622      	mov	r2, r4
 801051c:	4629      	mov	r1, r5
 801051e:	4630      	mov	r0, r6
 8010520:	f7ff ffa2 	bl	8010468 <__sfputs_r>
 8010524:	3001      	adds	r0, #1
 8010526:	f000 80a9 	beq.w	801067c <_vfiprintf_r+0x1f0>
 801052a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801052c:	445a      	add	r2, fp
 801052e:	9209      	str	r2, [sp, #36]	; 0x24
 8010530:	f89a 3000 	ldrb.w	r3, [sl]
 8010534:	2b00      	cmp	r3, #0
 8010536:	f000 80a1 	beq.w	801067c <_vfiprintf_r+0x1f0>
 801053a:	2300      	movs	r3, #0
 801053c:	f04f 32ff 	mov.w	r2, #4294967295
 8010540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010544:	f10a 0a01 	add.w	sl, sl, #1
 8010548:	9304      	str	r3, [sp, #16]
 801054a:	9307      	str	r3, [sp, #28]
 801054c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010550:	931a      	str	r3, [sp, #104]	; 0x68
 8010552:	4654      	mov	r4, sl
 8010554:	2205      	movs	r2, #5
 8010556:	f814 1b01 	ldrb.w	r1, [r4], #1
 801055a:	4854      	ldr	r0, [pc, #336]	; (80106ac <_vfiprintf_r+0x220>)
 801055c:	f7ef fe58 	bl	8000210 <memchr>
 8010560:	9a04      	ldr	r2, [sp, #16]
 8010562:	b9d8      	cbnz	r0, 801059c <_vfiprintf_r+0x110>
 8010564:	06d1      	lsls	r1, r2, #27
 8010566:	bf44      	itt	mi
 8010568:	2320      	movmi	r3, #32
 801056a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801056e:	0713      	lsls	r3, r2, #28
 8010570:	bf44      	itt	mi
 8010572:	232b      	movmi	r3, #43	; 0x2b
 8010574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010578:	f89a 3000 	ldrb.w	r3, [sl]
 801057c:	2b2a      	cmp	r3, #42	; 0x2a
 801057e:	d015      	beq.n	80105ac <_vfiprintf_r+0x120>
 8010580:	9a07      	ldr	r2, [sp, #28]
 8010582:	4654      	mov	r4, sl
 8010584:	2000      	movs	r0, #0
 8010586:	f04f 0c0a 	mov.w	ip, #10
 801058a:	4621      	mov	r1, r4
 801058c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010590:	3b30      	subs	r3, #48	; 0x30
 8010592:	2b09      	cmp	r3, #9
 8010594:	d94d      	bls.n	8010632 <_vfiprintf_r+0x1a6>
 8010596:	b1b0      	cbz	r0, 80105c6 <_vfiprintf_r+0x13a>
 8010598:	9207      	str	r2, [sp, #28]
 801059a:	e014      	b.n	80105c6 <_vfiprintf_r+0x13a>
 801059c:	eba0 0308 	sub.w	r3, r0, r8
 80105a0:	fa09 f303 	lsl.w	r3, r9, r3
 80105a4:	4313      	orrs	r3, r2
 80105a6:	9304      	str	r3, [sp, #16]
 80105a8:	46a2      	mov	sl, r4
 80105aa:	e7d2      	b.n	8010552 <_vfiprintf_r+0xc6>
 80105ac:	9b03      	ldr	r3, [sp, #12]
 80105ae:	1d19      	adds	r1, r3, #4
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	9103      	str	r1, [sp, #12]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	bfbb      	ittet	lt
 80105b8:	425b      	neglt	r3, r3
 80105ba:	f042 0202 	orrlt.w	r2, r2, #2
 80105be:	9307      	strge	r3, [sp, #28]
 80105c0:	9307      	strlt	r3, [sp, #28]
 80105c2:	bfb8      	it	lt
 80105c4:	9204      	strlt	r2, [sp, #16]
 80105c6:	7823      	ldrb	r3, [r4, #0]
 80105c8:	2b2e      	cmp	r3, #46	; 0x2e
 80105ca:	d10c      	bne.n	80105e6 <_vfiprintf_r+0x15a>
 80105cc:	7863      	ldrb	r3, [r4, #1]
 80105ce:	2b2a      	cmp	r3, #42	; 0x2a
 80105d0:	d134      	bne.n	801063c <_vfiprintf_r+0x1b0>
 80105d2:	9b03      	ldr	r3, [sp, #12]
 80105d4:	1d1a      	adds	r2, r3, #4
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	9203      	str	r2, [sp, #12]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	bfb8      	it	lt
 80105de:	f04f 33ff 	movlt.w	r3, #4294967295
 80105e2:	3402      	adds	r4, #2
 80105e4:	9305      	str	r3, [sp, #20]
 80105e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80106bc <_vfiprintf_r+0x230>
 80105ea:	7821      	ldrb	r1, [r4, #0]
 80105ec:	2203      	movs	r2, #3
 80105ee:	4650      	mov	r0, sl
 80105f0:	f7ef fe0e 	bl	8000210 <memchr>
 80105f4:	b138      	cbz	r0, 8010606 <_vfiprintf_r+0x17a>
 80105f6:	9b04      	ldr	r3, [sp, #16]
 80105f8:	eba0 000a 	sub.w	r0, r0, sl
 80105fc:	2240      	movs	r2, #64	; 0x40
 80105fe:	4082      	lsls	r2, r0
 8010600:	4313      	orrs	r3, r2
 8010602:	3401      	adds	r4, #1
 8010604:	9304      	str	r3, [sp, #16]
 8010606:	f814 1b01 	ldrb.w	r1, [r4], #1
 801060a:	4829      	ldr	r0, [pc, #164]	; (80106b0 <_vfiprintf_r+0x224>)
 801060c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010610:	2206      	movs	r2, #6
 8010612:	f7ef fdfd 	bl	8000210 <memchr>
 8010616:	2800      	cmp	r0, #0
 8010618:	d03f      	beq.n	801069a <_vfiprintf_r+0x20e>
 801061a:	4b26      	ldr	r3, [pc, #152]	; (80106b4 <_vfiprintf_r+0x228>)
 801061c:	bb1b      	cbnz	r3, 8010666 <_vfiprintf_r+0x1da>
 801061e:	9b03      	ldr	r3, [sp, #12]
 8010620:	3307      	adds	r3, #7
 8010622:	f023 0307 	bic.w	r3, r3, #7
 8010626:	3308      	adds	r3, #8
 8010628:	9303      	str	r3, [sp, #12]
 801062a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801062c:	443b      	add	r3, r7
 801062e:	9309      	str	r3, [sp, #36]	; 0x24
 8010630:	e768      	b.n	8010504 <_vfiprintf_r+0x78>
 8010632:	fb0c 3202 	mla	r2, ip, r2, r3
 8010636:	460c      	mov	r4, r1
 8010638:	2001      	movs	r0, #1
 801063a:	e7a6      	b.n	801058a <_vfiprintf_r+0xfe>
 801063c:	2300      	movs	r3, #0
 801063e:	3401      	adds	r4, #1
 8010640:	9305      	str	r3, [sp, #20]
 8010642:	4619      	mov	r1, r3
 8010644:	f04f 0c0a 	mov.w	ip, #10
 8010648:	4620      	mov	r0, r4
 801064a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801064e:	3a30      	subs	r2, #48	; 0x30
 8010650:	2a09      	cmp	r2, #9
 8010652:	d903      	bls.n	801065c <_vfiprintf_r+0x1d0>
 8010654:	2b00      	cmp	r3, #0
 8010656:	d0c6      	beq.n	80105e6 <_vfiprintf_r+0x15a>
 8010658:	9105      	str	r1, [sp, #20]
 801065a:	e7c4      	b.n	80105e6 <_vfiprintf_r+0x15a>
 801065c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010660:	4604      	mov	r4, r0
 8010662:	2301      	movs	r3, #1
 8010664:	e7f0      	b.n	8010648 <_vfiprintf_r+0x1bc>
 8010666:	ab03      	add	r3, sp, #12
 8010668:	9300      	str	r3, [sp, #0]
 801066a:	462a      	mov	r2, r5
 801066c:	4b12      	ldr	r3, [pc, #72]	; (80106b8 <_vfiprintf_r+0x22c>)
 801066e:	a904      	add	r1, sp, #16
 8010670:	4630      	mov	r0, r6
 8010672:	f7fd fb5d 	bl	800dd30 <_printf_float>
 8010676:	4607      	mov	r7, r0
 8010678:	1c78      	adds	r0, r7, #1
 801067a:	d1d6      	bne.n	801062a <_vfiprintf_r+0x19e>
 801067c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801067e:	07d9      	lsls	r1, r3, #31
 8010680:	d405      	bmi.n	801068e <_vfiprintf_r+0x202>
 8010682:	89ab      	ldrh	r3, [r5, #12]
 8010684:	059a      	lsls	r2, r3, #22
 8010686:	d402      	bmi.n	801068e <_vfiprintf_r+0x202>
 8010688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801068a:	f7fe f8fe 	bl	800e88a <__retarget_lock_release_recursive>
 801068e:	89ab      	ldrh	r3, [r5, #12]
 8010690:	065b      	lsls	r3, r3, #25
 8010692:	f53f af1d 	bmi.w	80104d0 <_vfiprintf_r+0x44>
 8010696:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010698:	e71c      	b.n	80104d4 <_vfiprintf_r+0x48>
 801069a:	ab03      	add	r3, sp, #12
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	462a      	mov	r2, r5
 80106a0:	4b05      	ldr	r3, [pc, #20]	; (80106b8 <_vfiprintf_r+0x22c>)
 80106a2:	a904      	add	r1, sp, #16
 80106a4:	4630      	mov	r0, r6
 80106a6:	f7fd fde7 	bl	800e278 <_printf_i>
 80106aa:	e7e4      	b.n	8010676 <_vfiprintf_r+0x1ea>
 80106ac:	0801150c 	.word	0x0801150c
 80106b0:	08011516 	.word	0x08011516
 80106b4:	0800dd31 	.word	0x0800dd31
 80106b8:	08010469 	.word	0x08010469
 80106bc:	08011512 	.word	0x08011512

080106c0 <__swbuf_r>:
 80106c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106c2:	460e      	mov	r6, r1
 80106c4:	4614      	mov	r4, r2
 80106c6:	4605      	mov	r5, r0
 80106c8:	b118      	cbz	r0, 80106d2 <__swbuf_r+0x12>
 80106ca:	6a03      	ldr	r3, [r0, #32]
 80106cc:	b90b      	cbnz	r3, 80106d2 <__swbuf_r+0x12>
 80106ce:	f7fd ff6f 	bl	800e5b0 <__sinit>
 80106d2:	69a3      	ldr	r3, [r4, #24]
 80106d4:	60a3      	str	r3, [r4, #8]
 80106d6:	89a3      	ldrh	r3, [r4, #12]
 80106d8:	071a      	lsls	r2, r3, #28
 80106da:	d525      	bpl.n	8010728 <__swbuf_r+0x68>
 80106dc:	6923      	ldr	r3, [r4, #16]
 80106de:	b31b      	cbz	r3, 8010728 <__swbuf_r+0x68>
 80106e0:	6823      	ldr	r3, [r4, #0]
 80106e2:	6922      	ldr	r2, [r4, #16]
 80106e4:	1a98      	subs	r0, r3, r2
 80106e6:	6963      	ldr	r3, [r4, #20]
 80106e8:	b2f6      	uxtb	r6, r6
 80106ea:	4283      	cmp	r3, r0
 80106ec:	4637      	mov	r7, r6
 80106ee:	dc04      	bgt.n	80106fa <__swbuf_r+0x3a>
 80106f0:	4621      	mov	r1, r4
 80106f2:	4628      	mov	r0, r5
 80106f4:	f7ff fdac 	bl	8010250 <_fflush_r>
 80106f8:	b9e0      	cbnz	r0, 8010734 <__swbuf_r+0x74>
 80106fa:	68a3      	ldr	r3, [r4, #8]
 80106fc:	3b01      	subs	r3, #1
 80106fe:	60a3      	str	r3, [r4, #8]
 8010700:	6823      	ldr	r3, [r4, #0]
 8010702:	1c5a      	adds	r2, r3, #1
 8010704:	6022      	str	r2, [r4, #0]
 8010706:	701e      	strb	r6, [r3, #0]
 8010708:	6962      	ldr	r2, [r4, #20]
 801070a:	1c43      	adds	r3, r0, #1
 801070c:	429a      	cmp	r2, r3
 801070e:	d004      	beq.n	801071a <__swbuf_r+0x5a>
 8010710:	89a3      	ldrh	r3, [r4, #12]
 8010712:	07db      	lsls	r3, r3, #31
 8010714:	d506      	bpl.n	8010724 <__swbuf_r+0x64>
 8010716:	2e0a      	cmp	r6, #10
 8010718:	d104      	bne.n	8010724 <__swbuf_r+0x64>
 801071a:	4621      	mov	r1, r4
 801071c:	4628      	mov	r0, r5
 801071e:	f7ff fd97 	bl	8010250 <_fflush_r>
 8010722:	b938      	cbnz	r0, 8010734 <__swbuf_r+0x74>
 8010724:	4638      	mov	r0, r7
 8010726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010728:	4621      	mov	r1, r4
 801072a:	4628      	mov	r0, r5
 801072c:	f000 f806 	bl	801073c <__swsetup_r>
 8010730:	2800      	cmp	r0, #0
 8010732:	d0d5      	beq.n	80106e0 <__swbuf_r+0x20>
 8010734:	f04f 37ff 	mov.w	r7, #4294967295
 8010738:	e7f4      	b.n	8010724 <__swbuf_r+0x64>
	...

0801073c <__swsetup_r>:
 801073c:	b538      	push	{r3, r4, r5, lr}
 801073e:	4b2a      	ldr	r3, [pc, #168]	; (80107e8 <__swsetup_r+0xac>)
 8010740:	4605      	mov	r5, r0
 8010742:	6818      	ldr	r0, [r3, #0]
 8010744:	460c      	mov	r4, r1
 8010746:	b118      	cbz	r0, 8010750 <__swsetup_r+0x14>
 8010748:	6a03      	ldr	r3, [r0, #32]
 801074a:	b90b      	cbnz	r3, 8010750 <__swsetup_r+0x14>
 801074c:	f7fd ff30 	bl	800e5b0 <__sinit>
 8010750:	89a3      	ldrh	r3, [r4, #12]
 8010752:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010756:	0718      	lsls	r0, r3, #28
 8010758:	d422      	bmi.n	80107a0 <__swsetup_r+0x64>
 801075a:	06d9      	lsls	r1, r3, #27
 801075c:	d407      	bmi.n	801076e <__swsetup_r+0x32>
 801075e:	2309      	movs	r3, #9
 8010760:	602b      	str	r3, [r5, #0]
 8010762:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010766:	81a3      	strh	r3, [r4, #12]
 8010768:	f04f 30ff 	mov.w	r0, #4294967295
 801076c:	e034      	b.n	80107d8 <__swsetup_r+0x9c>
 801076e:	0758      	lsls	r0, r3, #29
 8010770:	d512      	bpl.n	8010798 <__swsetup_r+0x5c>
 8010772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010774:	b141      	cbz	r1, 8010788 <__swsetup_r+0x4c>
 8010776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801077a:	4299      	cmp	r1, r3
 801077c:	d002      	beq.n	8010784 <__swsetup_r+0x48>
 801077e:	4628      	mov	r0, r5
 8010780:	f7fe ff0c 	bl	800f59c <_free_r>
 8010784:	2300      	movs	r3, #0
 8010786:	6363      	str	r3, [r4, #52]	; 0x34
 8010788:	89a3      	ldrh	r3, [r4, #12]
 801078a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801078e:	81a3      	strh	r3, [r4, #12]
 8010790:	2300      	movs	r3, #0
 8010792:	6063      	str	r3, [r4, #4]
 8010794:	6923      	ldr	r3, [r4, #16]
 8010796:	6023      	str	r3, [r4, #0]
 8010798:	89a3      	ldrh	r3, [r4, #12]
 801079a:	f043 0308 	orr.w	r3, r3, #8
 801079e:	81a3      	strh	r3, [r4, #12]
 80107a0:	6923      	ldr	r3, [r4, #16]
 80107a2:	b94b      	cbnz	r3, 80107b8 <__swsetup_r+0x7c>
 80107a4:	89a3      	ldrh	r3, [r4, #12]
 80107a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80107aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107ae:	d003      	beq.n	80107b8 <__swsetup_r+0x7c>
 80107b0:	4621      	mov	r1, r4
 80107b2:	4628      	mov	r0, r5
 80107b4:	f000 f884 	bl	80108c0 <__smakebuf_r>
 80107b8:	89a0      	ldrh	r0, [r4, #12]
 80107ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107be:	f010 0301 	ands.w	r3, r0, #1
 80107c2:	d00a      	beq.n	80107da <__swsetup_r+0x9e>
 80107c4:	2300      	movs	r3, #0
 80107c6:	60a3      	str	r3, [r4, #8]
 80107c8:	6963      	ldr	r3, [r4, #20]
 80107ca:	425b      	negs	r3, r3
 80107cc:	61a3      	str	r3, [r4, #24]
 80107ce:	6923      	ldr	r3, [r4, #16]
 80107d0:	b943      	cbnz	r3, 80107e4 <__swsetup_r+0xa8>
 80107d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80107d6:	d1c4      	bne.n	8010762 <__swsetup_r+0x26>
 80107d8:	bd38      	pop	{r3, r4, r5, pc}
 80107da:	0781      	lsls	r1, r0, #30
 80107dc:	bf58      	it	pl
 80107de:	6963      	ldrpl	r3, [r4, #20]
 80107e0:	60a3      	str	r3, [r4, #8]
 80107e2:	e7f4      	b.n	80107ce <__swsetup_r+0x92>
 80107e4:	2000      	movs	r0, #0
 80107e6:	e7f7      	b.n	80107d8 <__swsetup_r+0x9c>
 80107e8:	20000088 	.word	0x20000088

080107ec <_raise_r>:
 80107ec:	291f      	cmp	r1, #31
 80107ee:	b538      	push	{r3, r4, r5, lr}
 80107f0:	4604      	mov	r4, r0
 80107f2:	460d      	mov	r5, r1
 80107f4:	d904      	bls.n	8010800 <_raise_r+0x14>
 80107f6:	2316      	movs	r3, #22
 80107f8:	6003      	str	r3, [r0, #0]
 80107fa:	f04f 30ff 	mov.w	r0, #4294967295
 80107fe:	bd38      	pop	{r3, r4, r5, pc}
 8010800:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010802:	b112      	cbz	r2, 801080a <_raise_r+0x1e>
 8010804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010808:	b94b      	cbnz	r3, 801081e <_raise_r+0x32>
 801080a:	4620      	mov	r0, r4
 801080c:	f000 f830 	bl	8010870 <_getpid_r>
 8010810:	462a      	mov	r2, r5
 8010812:	4601      	mov	r1, r0
 8010814:	4620      	mov	r0, r4
 8010816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801081a:	f000 b817 	b.w	801084c <_kill_r>
 801081e:	2b01      	cmp	r3, #1
 8010820:	d00a      	beq.n	8010838 <_raise_r+0x4c>
 8010822:	1c59      	adds	r1, r3, #1
 8010824:	d103      	bne.n	801082e <_raise_r+0x42>
 8010826:	2316      	movs	r3, #22
 8010828:	6003      	str	r3, [r0, #0]
 801082a:	2001      	movs	r0, #1
 801082c:	e7e7      	b.n	80107fe <_raise_r+0x12>
 801082e:	2400      	movs	r4, #0
 8010830:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010834:	4628      	mov	r0, r5
 8010836:	4798      	blx	r3
 8010838:	2000      	movs	r0, #0
 801083a:	e7e0      	b.n	80107fe <_raise_r+0x12>

0801083c <raise>:
 801083c:	4b02      	ldr	r3, [pc, #8]	; (8010848 <raise+0xc>)
 801083e:	4601      	mov	r1, r0
 8010840:	6818      	ldr	r0, [r3, #0]
 8010842:	f7ff bfd3 	b.w	80107ec <_raise_r>
 8010846:	bf00      	nop
 8010848:	20000088 	.word	0x20000088

0801084c <_kill_r>:
 801084c:	b538      	push	{r3, r4, r5, lr}
 801084e:	4d07      	ldr	r5, [pc, #28]	; (801086c <_kill_r+0x20>)
 8010850:	2300      	movs	r3, #0
 8010852:	4604      	mov	r4, r0
 8010854:	4608      	mov	r0, r1
 8010856:	4611      	mov	r1, r2
 8010858:	602b      	str	r3, [r5, #0]
 801085a:	f7f8 ffb3 	bl	80097c4 <_kill>
 801085e:	1c43      	adds	r3, r0, #1
 8010860:	d102      	bne.n	8010868 <_kill_r+0x1c>
 8010862:	682b      	ldr	r3, [r5, #0]
 8010864:	b103      	cbz	r3, 8010868 <_kill_r+0x1c>
 8010866:	6023      	str	r3, [r4, #0]
 8010868:	bd38      	pop	{r3, r4, r5, pc}
 801086a:	bf00      	nop
 801086c:	20005974 	.word	0x20005974

08010870 <_getpid_r>:
 8010870:	f7f8 bfa0 	b.w	80097b4 <_getpid>

08010874 <__swhatbuf_r>:
 8010874:	b570      	push	{r4, r5, r6, lr}
 8010876:	460c      	mov	r4, r1
 8010878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801087c:	2900      	cmp	r1, #0
 801087e:	b096      	sub	sp, #88	; 0x58
 8010880:	4615      	mov	r5, r2
 8010882:	461e      	mov	r6, r3
 8010884:	da0d      	bge.n	80108a2 <__swhatbuf_r+0x2e>
 8010886:	89a3      	ldrh	r3, [r4, #12]
 8010888:	f013 0f80 	tst.w	r3, #128	; 0x80
 801088c:	f04f 0100 	mov.w	r1, #0
 8010890:	bf0c      	ite	eq
 8010892:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010896:	2340      	movne	r3, #64	; 0x40
 8010898:	2000      	movs	r0, #0
 801089a:	6031      	str	r1, [r6, #0]
 801089c:	602b      	str	r3, [r5, #0]
 801089e:	b016      	add	sp, #88	; 0x58
 80108a0:	bd70      	pop	{r4, r5, r6, pc}
 80108a2:	466a      	mov	r2, sp
 80108a4:	f000 f848 	bl	8010938 <_fstat_r>
 80108a8:	2800      	cmp	r0, #0
 80108aa:	dbec      	blt.n	8010886 <__swhatbuf_r+0x12>
 80108ac:	9901      	ldr	r1, [sp, #4]
 80108ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80108b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80108b6:	4259      	negs	r1, r3
 80108b8:	4159      	adcs	r1, r3
 80108ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108be:	e7eb      	b.n	8010898 <__swhatbuf_r+0x24>

080108c0 <__smakebuf_r>:
 80108c0:	898b      	ldrh	r3, [r1, #12]
 80108c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80108c4:	079d      	lsls	r5, r3, #30
 80108c6:	4606      	mov	r6, r0
 80108c8:	460c      	mov	r4, r1
 80108ca:	d507      	bpl.n	80108dc <__smakebuf_r+0x1c>
 80108cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80108d0:	6023      	str	r3, [r4, #0]
 80108d2:	6123      	str	r3, [r4, #16]
 80108d4:	2301      	movs	r3, #1
 80108d6:	6163      	str	r3, [r4, #20]
 80108d8:	b002      	add	sp, #8
 80108da:	bd70      	pop	{r4, r5, r6, pc}
 80108dc:	ab01      	add	r3, sp, #4
 80108de:	466a      	mov	r2, sp
 80108e0:	f7ff ffc8 	bl	8010874 <__swhatbuf_r>
 80108e4:	9900      	ldr	r1, [sp, #0]
 80108e6:	4605      	mov	r5, r0
 80108e8:	4630      	mov	r0, r6
 80108ea:	f7fe fecb 	bl	800f684 <_malloc_r>
 80108ee:	b948      	cbnz	r0, 8010904 <__smakebuf_r+0x44>
 80108f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108f4:	059a      	lsls	r2, r3, #22
 80108f6:	d4ef      	bmi.n	80108d8 <__smakebuf_r+0x18>
 80108f8:	f023 0303 	bic.w	r3, r3, #3
 80108fc:	f043 0302 	orr.w	r3, r3, #2
 8010900:	81a3      	strh	r3, [r4, #12]
 8010902:	e7e3      	b.n	80108cc <__smakebuf_r+0xc>
 8010904:	89a3      	ldrh	r3, [r4, #12]
 8010906:	6020      	str	r0, [r4, #0]
 8010908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801090c:	81a3      	strh	r3, [r4, #12]
 801090e:	9b00      	ldr	r3, [sp, #0]
 8010910:	6163      	str	r3, [r4, #20]
 8010912:	9b01      	ldr	r3, [sp, #4]
 8010914:	6120      	str	r0, [r4, #16]
 8010916:	b15b      	cbz	r3, 8010930 <__smakebuf_r+0x70>
 8010918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801091c:	4630      	mov	r0, r6
 801091e:	f000 f81d 	bl	801095c <_isatty_r>
 8010922:	b128      	cbz	r0, 8010930 <__smakebuf_r+0x70>
 8010924:	89a3      	ldrh	r3, [r4, #12]
 8010926:	f023 0303 	bic.w	r3, r3, #3
 801092a:	f043 0301 	orr.w	r3, r3, #1
 801092e:	81a3      	strh	r3, [r4, #12]
 8010930:	89a3      	ldrh	r3, [r4, #12]
 8010932:	431d      	orrs	r5, r3
 8010934:	81a5      	strh	r5, [r4, #12]
 8010936:	e7cf      	b.n	80108d8 <__smakebuf_r+0x18>

08010938 <_fstat_r>:
 8010938:	b538      	push	{r3, r4, r5, lr}
 801093a:	4d07      	ldr	r5, [pc, #28]	; (8010958 <_fstat_r+0x20>)
 801093c:	2300      	movs	r3, #0
 801093e:	4604      	mov	r4, r0
 8010940:	4608      	mov	r0, r1
 8010942:	4611      	mov	r1, r2
 8010944:	602b      	str	r3, [r5, #0]
 8010946:	f7f8 ff80 	bl	800984a <_fstat>
 801094a:	1c43      	adds	r3, r0, #1
 801094c:	d102      	bne.n	8010954 <_fstat_r+0x1c>
 801094e:	682b      	ldr	r3, [r5, #0]
 8010950:	b103      	cbz	r3, 8010954 <_fstat_r+0x1c>
 8010952:	6023      	str	r3, [r4, #0]
 8010954:	bd38      	pop	{r3, r4, r5, pc}
 8010956:	bf00      	nop
 8010958:	20005974 	.word	0x20005974

0801095c <_isatty_r>:
 801095c:	b538      	push	{r3, r4, r5, lr}
 801095e:	4d06      	ldr	r5, [pc, #24]	; (8010978 <_isatty_r+0x1c>)
 8010960:	2300      	movs	r3, #0
 8010962:	4604      	mov	r4, r0
 8010964:	4608      	mov	r0, r1
 8010966:	602b      	str	r3, [r5, #0]
 8010968:	f7f8 ff7f 	bl	800986a <_isatty>
 801096c:	1c43      	adds	r3, r0, #1
 801096e:	d102      	bne.n	8010976 <_isatty_r+0x1a>
 8010970:	682b      	ldr	r3, [r5, #0]
 8010972:	b103      	cbz	r3, 8010976 <_isatty_r+0x1a>
 8010974:	6023      	str	r3, [r4, #0]
 8010976:	bd38      	pop	{r3, r4, r5, pc}
 8010978:	20005974 	.word	0x20005974

0801097c <_init>:
 801097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801097e:	bf00      	nop
 8010980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010982:	bc08      	pop	{r3}
 8010984:	469e      	mov	lr, r3
 8010986:	4770      	bx	lr

08010988 <_fini>:
 8010988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801098a:	bf00      	nop
 801098c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801098e:	bc08      	pop	{r3}
 8010990:	469e      	mov	lr, r3
 8010992:	4770      	bx	lr
