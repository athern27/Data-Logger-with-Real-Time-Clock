
RTOS_project_segger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016034  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000258c  08016208  08016208  00026208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018794  08018794  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08018794  08018794  00028794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801879c  0801879c  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801879c  0801879c  0002879c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080187a0  080187a0  000287a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080187a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009da8  20000204  080189a8  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20009fac  080189a8  00039fac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d578  00000000  00000000  00030277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005efe  00000000  00000000  0005d7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000026d8  00000000  00000000  000636f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e52  00000000  00000000  00065dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c932  00000000  00000000  00067c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000347c3  00000000  00000000  0009454c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc85b  00000000  00000000  000c8d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b664  00000000  00000000  001c556c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001d0bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080161ec 	.word	0x080161ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	080161ec 	.word	0x080161ec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
extern TIM_HandleTypeDef htim11;
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <configureTimerForRunTimeStats+0x10>)
 8000eea:	f007 fc87 	bl	80087fc <HAL_TIM_Base_Start_IT>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20002898 	.word	0x20002898

08000ef8 <getRunTimeCounterValue>:
extern volatile unsigned long ulHighFrequencyTimerTicks;

__weak unsigned long getRunTimeCounterValue(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <getRunTimeCounterValue+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20002994 	.word	0x20002994

08000f10 <vPortSuppressTicksAndSleep>:
/* USER CODE END 1 */

/* USER CODE BEGIN VPORT_SUPPORT_TICKS_AND_SLEEP */
__weak void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  // Generated when configUSE_TICKLESS_IDLE == 2.
  // Function called in tasks.c (in portTASK_FUNCTION).
  // TO BE COMPLETED or TO BE REPLACED by a user one, overriding that weak one.
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_write>:
#define ADC_RESOLUTION 4095
#define ADC_SAMPLES 100

extern UART_HandleTypeDef huart2;

int _write(int fd, char *ptr, int len){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d002      	beq.n	8000f3c <_write+0x18>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d111      	bne.n	8000f60 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <_write+0x48>)
 8000f48:	f008 f8d7 	bl	80090fa <HAL_UART_Transmit>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <_write+0x36>
            return len;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	e004      	b.n	8000f64 <_write+0x40>
        else
            return -1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e001      	b.n	8000f64 <_write+0x40>
    }
    return -1;
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200028e0 	.word	0x200028e0

08000f70 <process_adc_buffer>:

// Process half a buffer full of data
static inline void process_adc_buffer(uint16_t *buffer){
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    uint32_t sum1 = 0, sum2 = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < ADC_SAMPLES; ++i) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e016      	b.n	8000fb4 <process_adc_buffer+0x44>
        sum1 += buffer[i * 2];
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	4413      	add	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]
        sum2 += buffer[1 + i * 2];
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4413      	add	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < ADC_SAMPLES; ++i) {
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b63      	cmp	r3, #99	; 0x63
 8000fb8:	dde5      	ble.n	8000f86 <process_adc_buffer+0x16>
    }

    vref_avg = sum2 / ADC_SAMPLES;
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4a30      	ldr	r2, [pc, #192]	; (8001080 <process_adc_buffer+0x110>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <process_adc_buffer+0x114>)
 8000fc8:	801a      	strh	r2, [r3, #0]
    temp_avg = sum1 / ADC_SAMPLES;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	4a2c      	ldr	r2, [pc, #176]	; (8001080 <process_adc_buffer+0x110>)
 8000fce:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <process_adc_buffer+0x118>)
 8000fd8:	801a      	strh	r2, [r3, #0]

    // VDDA can be calculated based on the measured vref and the calibration data
    vdda = (float) VREFINT_CAL_VREF * (float) *VREFINT_CAL_ADDR / vref_avg / 1000;
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <process_adc_buffer+0x11c>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001090 <process_adc_buffer+0x120>
 8000fea:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <process_adc_buffer+0x114>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ffe:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001094 <process_adc_buffer+0x124>
 8001002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <process_adc_buffer+0x128>)
 8001008:	edc3 7a00 	vstr	s15, [r3]

    // Knowing vdda and the resolution of adc - the actual voltage can be calculated
    vref = (float) vdda / ADC_RESOLUTION * vref_avg;
 800100c:	4b22      	ldr	r3, [pc, #136]	; (8001098 <process_adc_buffer+0x128>)
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	eddf 6a22 	vldr	s13, [pc, #136]	; 800109c <process_adc_buffer+0x12c>
 8001016:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <process_adc_buffer+0x114>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <process_adc_buffer+0x130>)
 800102c:	edc3 7a00 	vstr	s15, [r3]
    //vref = __LL_ADC_CALC_VREFANALOG_VOLTAGE(vref_avg, ADC_RESOLUTION_12B);

    temp = (float) ( (float)( (float)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP) / (float)(*TEMPSENSOR_CAL2_ADDR - *TEMPSENSOR_CAL1_ADDR)) * (temp_avg - *TEMPSENSOR_CAL1_ADDR) + TEMPSENSOR_CAL1_TEMP);
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <process_adc_buffer+0x134>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <process_adc_buffer+0x138>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001044:	eddf 6a19 	vldr	s13, [pc, #100]	; 80010ac <process_adc_buffer+0x13c>
 8001048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <process_adc_buffer+0x118>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <process_adc_buffer+0x138>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001064:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001068:	ee77 7a87 	vadd.f32	s15, s15, s14
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <process_adc_buffer+0x140>)
 800106e:	edc3 7a00 	vstr	s15, [r3]
    //temp = __LL_ADC_CALC_TEMPERATURE(vref, temp_avg, ADC_RESOLUTION_12B);
}
 8001072:	bf00      	nop
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	51eb851f 	.word	0x51eb851f
 8001084:	20000224 	.word	0x20000224
 8001088:	20000226 	.word	0x20000226
 800108c:	1fff7a2a 	.word	0x1fff7a2a
 8001090:	454e4000 	.word	0x454e4000
 8001094:	447a0000 	.word	0x447a0000
 8001098:	20000228 	.word	0x20000228
 800109c:	457ff000 	.word	0x457ff000
 80010a0:	2000022c 	.word	0x2000022c
 80010a4:	1fff7a2e 	.word	0x1fff7a2e
 80010a8:	1fff7a2c 	.word	0x1fff7a2c
 80010ac:	42a00000 	.word	0x42a00000
 80010b0:	20000230 	.word	0x20000230

080010b4 <buffclear>:
	int i=0;
	while(*buf++!='\0'){
	i++;}
	return i;
}
void buffclear(char*string){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff f8f7 	bl	80002b0 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	72fb      	strb	r3, [r7, #11]
	for(int i=0;i<len;i++){
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e007      	b.n	80010dc <buffclear+0x28>
		string[i]='\0';
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<len;i++){
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3301      	adds	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dbf3      	blt.n	80010cc <buffclear+0x18>
	}
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <send_uart>:

void send_uart(char*string){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff f8d9 	bl	80002b0 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, len, 2000);
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	b29a      	uxth	r2, r3
 8001106:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <send_uart+0x30>)
 800110e:	f007 fff4 	bl	80090fa <HAL_UART_Transmit>
	buffclear(string);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffce 	bl	80010b4 <buffclear>
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200028e0 	.word	0x200028e0

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112a:	f001 fadb 	bl	80026e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112e:	f000 f8bf 	bl	80012b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001132:	f000 fb8d 	bl	8001850 <MX_GPIO_Init>
  MX_DMA_Init();
 8001136:	f000 fb6b 	bl	8001810 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800113a:	f000 fb3f 	bl	80017bc <MX_USART2_UART_Init>
  MX_RTC_Init();
 800113e:	f000 fa09 	bl	8001554 <MX_RTC_Init>
  MX_SPI2_Init();
 8001142:	f000 fa93 	bl	800166c <MX_SPI2_Init>
  MX_FATFS_Init();
 8001146:	f008 fb4d 	bl	80097e4 <MX_FATFS_Init>
  MX_ADC1_Init();
 800114a:	f000 f921 	bl	8001390 <MX_ADC1_Init>
  MX_ADC2_Init();
 800114e:	f000 f981 	bl	8001454 <MX_ADC2_Init>
  MX_I2C1_Init();
 8001152:	f000 f9d1 	bl	80014f8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001156:	f000 fabf 	bl	80016d8 <MX_TIM3_Init>
  MX_TIM11_Init();
 800115a:	f000 fb0b 	bl	8001774 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800115e:	f00b fdcb 	bl	800ccf8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  MutexOne = xSemaphoreCreateMutex();
 8001162:	2001      	movs	r0, #1
 8001164:	f00c fa4f 	bl	800d606 <xQueueCreateMutex>
 8001168:	4603      	mov	r3, r0
 800116a:	4a37      	ldr	r2, [pc, #220]	; (8001248 <main+0x124>)
 800116c:	6013      	str	r3, [r2, #0]
  binarySemaphoreISR = xSemaphoreCreateBinary();
 800116e:	2203      	movs	r2, #3
 8001170:	2100      	movs	r1, #0
 8001172:	2001      	movs	r0, #1
 8001174:	f00c f9ca 	bl	800d50c <xQueueGenericCreate>
 8001178:	4603      	mov	r3, r0
 800117a:	4a34      	ldr	r2, [pc, #208]	; (800124c <main+0x128>)
 800117c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  buttonPressTimer = xTimerCreate("ButtonPressTimer", pdMS_TO_TICKS(150), pdTRUE, NULL, vTimerCallback);
 800117e:	4b34      	ldr	r3, [pc, #208]	; (8001250 <main+0x12c>)
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	2201      	movs	r2, #1
 8001186:	2196      	movs	r1, #150	; 0x96
 8001188:	4832      	ldr	r0, [pc, #200]	; (8001254 <main+0x130>)
 800118a:	f00e fbbb 	bl	800f904 <xTimerCreate>
 800118e:	4603      	mov	r3, r0
 8001190:	4a31      	ldr	r2, [pc, #196]	; (8001258 <main+0x134>)
 8001192:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idleTask */
  idleTaskHandle = osThreadNew(StartDefaultTask, NULL, &idleTask_attributes);
 8001194:	4a31      	ldr	r2, [pc, #196]	; (800125c <main+0x138>)
 8001196:	2100      	movs	r1, #0
 8001198:	4831      	ldr	r0, [pc, #196]	; (8001260 <main+0x13c>)
 800119a:	f00b fdf7 	bl	800cd8c <osThreadNew>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a30      	ldr	r2, [pc, #192]	; (8001264 <main+0x140>)
 80011a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(vUARTtask,"UART_Task", 128, NULL, 1, &UART_Handle);// at 256-Stack Size HELP doesn't prints on OLED SCREEN. ONLY GOD KNOWS WHY!!
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <main+0x144>)
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	2301      	movs	r3, #1
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2300      	movs	r3, #0
 80011ae:	2280      	movs	r2, #128	; 0x80
 80011b0:	492e      	ldr	r1, [pc, #184]	; (800126c <main+0x148>)
 80011b2:	482f      	ldr	r0, [pc, #188]	; (8001270 <main+0x14c>)
 80011b4:	f00d fa4b 	bl	800e64e <xTaskCreate>
  xTaskCreate(vRCWLtask,"RCWL_Tsk", 512, NULL, 2, &RCWL_Handle);
 80011b8:	4b2e      	ldr	r3, [pc, #184]	; (8001274 <main+0x150>)
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	2302      	movs	r3, #2
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2300      	movs	r3, #0
 80011c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c6:	492c      	ldr	r1, [pc, #176]	; (8001278 <main+0x154>)
 80011c8:	482c      	ldr	r0, [pc, #176]	; (800127c <main+0x158>)
 80011ca:	f00d fa40 	bl	800e64e <xTaskCreate>
  xTaskCreate(vMQ135task,"MQ135_Task", 512, NULL, 2, &MQ135_Handle);
 80011ce:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <main+0x15c>)
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	2302      	movs	r3, #2
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011dc:	4929      	ldr	r1, [pc, #164]	; (8001284 <main+0x160>)
 80011de:	482a      	ldr	r0, [pc, #168]	; (8001288 <main+0x164>)
 80011e0:	f00d fa35 	bl	800e64e <xTaskCreate>
  xTaskCreate(vInternalTemptask,"Temp_Task", 512, NULL, 2, &InternalTemp_Handle);
 80011e4:	4b29      	ldr	r3, [pc, #164]	; (800128c <main+0x168>)
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	2302      	movs	r3, #2
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2300      	movs	r3, #0
 80011ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f2:	4927      	ldr	r1, [pc, #156]	; (8001290 <main+0x16c>)
 80011f4:	4827      	ldr	r0, [pc, #156]	; (8001294 <main+0x170>)
 80011f6:	f00d fa2a 	bl	800e64e <xTaskCreate>
  xTaskCreate(vRTCtask,"RTC_Task", 512, NULL, 2, &RTC_Handle);///////
 80011fa:	4b27      	ldr	r3, [pc, #156]	; (8001298 <main+0x174>)
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	2302      	movs	r3, #2
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2300      	movs	r3, #0
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	4924      	ldr	r1, [pc, #144]	; (800129c <main+0x178>)
 800120a:	4825      	ldr	r0, [pc, #148]	; (80012a0 <main+0x17c>)
 800120c:	f00d fa1f 	bl	800e64e <xTaskCreate>
  xTaskCreate(vSwitchtask,"Switch_Task", 1024, NULL, 3, &Switch_Handle);
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <main+0x180>)
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	2303      	movs	r3, #3
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2300      	movs	r3, #0
 800121a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121e:	4922      	ldr	r1, [pc, #136]	; (80012a8 <main+0x184>)
 8001220:	4822      	ldr	r0, [pc, #136]	; (80012ac <main+0x188>)
 8001222:	f00d fa14 	bl	800e64e <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  SEGGER_SYSVIEW_Conf();
 8001226:	f010 fb09 	bl	801183c <SEGGER_SYSVIEW_Conf>
  vSetVarulMaxPRIGROUPValue();
 800122a:	f00f f925 	bl	8010478 <vSetVarulMaxPRIGROUPValue>
  SEGGER_SYSVIEW_Start();
 800122e:	f011 fac7 	bl	80127c0 <SEGGER_SYSVIEW_Start>


  SDCard_Init();
 8001232:	f000 fba3 	bl	800197c <SDCard_Init>
  MX_FREERTOS_Init();
 8001236:	f000 fbc3 	bl	80019c0 <MX_FREERTOS_Init>
  SSD1306_Init();
 800123a:	f00f fb5f 	bl	80108fc <SSD1306_Init>
  SSD1306_Clear();
 800123e:	f00f fd82 	bl	8010d46 <SSD1306_Clear>

  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001242:	f00b fd7d 	bl	800cd40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001246:	e7fe      	b.n	8001246 <main+0x122>
 8001248:	20002940 	.word	0x20002940
 800124c:	20002944 	.word	0x20002944
 8001250:	08001e35 	.word	0x08001e35
 8001254:	08016214 	.word	0x08016214
 8001258:	20002948 	.word	0x20002948
 800125c:	080164d8 	.word	0x080164d8
 8001260:	08001f11 	.word	0x08001f11
 8001264:	20002924 	.word	0x20002924
 8001268:	20002930 	.word	0x20002930
 800126c:	08016228 	.word	0x08016228
 8001270:	08001aa1 	.word	0x08001aa1
 8001274:	20002928 	.word	0x20002928
 8001278:	08016234 	.word	0x08016234
 800127c:	08001c45 	.word	0x08001c45
 8001280:	20002934 	.word	0x20002934
 8001284:	08016240 	.word	0x08016240
 8001288:	08001db1 	.word	0x08001db1
 800128c:	20002938 	.word	0x20002938
 8001290:	0801624c 	.word	0x0801624c
 8001294:	08001bb9 	.word	0x08001bb9
 8001298:	2000292c 	.word	0x2000292c
 800129c:	08016258 	.word	0x08016258
 80012a0:	08001cc9 	.word	0x08001cc9
 80012a4:	2000293c 	.word	0x2000293c
 80012a8:	08016264 	.word	0x08016264
 80012ac:	08001aad 	.word	0x08001aad

080012b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b094      	sub	sp, #80	; 0x50
 80012b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	2234      	movs	r2, #52	; 0x34
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f012 fe47 	bl	8013f52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <SystemClock_Config+0xd8>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	4a2a      	ldr	r2, [pc, #168]	; (8001388 <SystemClock_Config+0xd8>)
 80012de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e2:	6413      	str	r3, [r2, #64]	; 0x40
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <SystemClock_Config+0xd8>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012f0:	2300      	movs	r3, #0
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <SystemClock_Config+0xdc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012fc:	4a23      	ldr	r2, [pc, #140]	; (800138c <SystemClock_Config+0xdc>)
 80012fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <SystemClock_Config+0xdc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001310:	230a      	movs	r3, #10
 8001312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001314:	2301      	movs	r3, #1
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131c:	2310      	movs	r3, #16
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001320:	2301      	movs	r3, #1
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001324:	2302      	movs	r3, #2
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001328:	2300      	movs	r3, #0
 800132a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800132c:	2308      	movs	r3, #8
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001330:	2354      	movs	r3, #84	; 0x54
 8001332:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001334:	2302      	movs	r3, #2
 8001336:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001338:	2302      	movs	r3, #2
 800133a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800133c:	2302      	movs	r3, #2
 800133e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4618      	mov	r0, r3
 8001346:	f005 ff11 	bl	800716c <HAL_RCC_OscConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001350:	f000 fe14 	bl	8001f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001354:	230f      	movs	r3, #15
 8001356:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001358:	2302      	movs	r3, #2
 800135a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001364:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	2102      	movs	r1, #2
 8001370:	4618      	mov	r0, r3
 8001372:	f005 f855 	bl	8006420 <HAL_RCC_ClockConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800137c:	f000 fdfe 	bl	8001f7c <Error_Handler>
  }
}
 8001380:	bf00      	nop
 8001382:	3750      	adds	r7, #80	; 0x50
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	40007000 	.word	0x40007000

08001390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013a2:	4b29      	ldr	r3, [pc, #164]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013a4:	4a29      	ldr	r2, [pc, #164]	; (800144c <MX_ADC1_Init+0xbc>)
 80013a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f4:	4814      	ldr	r0, [pc, #80]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013f6:	f001 f9db 	bl	80027b0 <HAL_ADC_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001400:	f000 fdbc 	bl	8001f7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_ADC1_Init+0xc0>)
 8001406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001408:	2301      	movs	r3, #1
 800140a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800140c:	2307      	movs	r3, #7
 800140e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <MX_ADC1_Init+0xb8>)
 8001416:	f001 fcc7 	bl	8002da8 <HAL_ADC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001420:	f000 fdac 	bl	8001f7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001424:	2311      	movs	r3, #17
 8001426:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001428:	2302      	movs	r3, #2
 800142a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_ADC1_Init+0xb8>)
 8001432:	f001 fcb9 	bl	8002da8 <HAL_ADC_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800143c:	f000 fd9e 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20002694 	.word	0x20002694
 800144c:	40012000 	.word	0x40012000
 8001450:	10000012 	.word	0x10000012

08001454 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800145a:	463b      	mov	r3, r7
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001466:	4b21      	ldr	r3, [pc, #132]	; (80014ec <MX_ADC2_Init+0x98>)
 8001468:	4a21      	ldr	r2, [pc, #132]	; (80014f0 <MX_ADC2_Init+0x9c>)
 800146a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <MX_ADC2_Init+0x98>)
 800146e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001472:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <MX_ADC2_Init+0x98>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_ADC2_Init+0x98>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_ADC2_Init+0x98>)
 8001482:	2200      	movs	r2, #0
 8001484:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <MX_ADC2_Init+0x98>)
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_ADC2_Init+0x98>)
 8001490:	2200      	movs	r2, #0
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_ADC2_Init+0x98>)
 8001496:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <MX_ADC2_Init+0xa0>)
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_ADC2_Init+0x98>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_ADC2_Init+0x98>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_ADC2_Init+0x98>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_ADC2_Init+0x98>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_ADC2_Init+0x98>)
 80014b6:	f001 f97b 	bl	80027b0 <HAL_ADC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80014c0:	f000 fd5c 	bl	8001f7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80014cc:	2307      	movs	r3, #7
 80014ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_ADC2_Init+0x98>)
 80014d6:	f001 fc67 	bl	8002da8 <HAL_ADC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80014e0:	f000 fd4c 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200026dc 	.word	0x200026dc
 80014f0:	40012100 	.word	0x40012100
 80014f4:	0f000001 	.word	0x0f000001

080014f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_I2C1_Init+0x50>)
 80014fe:	4a13      	ldr	r2, [pc, #76]	; (800154c <MX_I2C1_Init+0x54>)
 8001500:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_I2C1_Init+0x50>)
 8001504:	4a12      	ldr	r2, [pc, #72]	; (8001550 <MX_I2C1_Init+0x58>)
 8001506:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_I2C1_Init+0x50>)
 8001516:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800151a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <MX_I2C1_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_I2C1_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <MX_I2C1_Init+0x50>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_I2C1_Init+0x50>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001534:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_I2C1_Init+0x50>)
 8001536:	f002 fd47 	bl	8003fc8 <HAL_I2C_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001540:	f000 fd1c 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20002784 	.word	0x20002784
 800154c:	40005400 	.word	0x40005400
 8001550:	00061a80 	.word	0x00061a80

08001554 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b090      	sub	sp, #64	; 0x40
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800155a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800156a:	2300      	movs	r3, #0
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800156e:	463b      	mov	r3, r7
 8001570:	2228      	movs	r2, #40	; 0x28
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f012 fcec 	bl	8013f52 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800157a:	4b3a      	ldr	r3, [pc, #232]	; (8001664 <MX_RTC_Init+0x110>)
 800157c:	4a3a      	ldr	r2, [pc, #232]	; (8001668 <MX_RTC_Init+0x114>)
 800157e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001580:	4b38      	ldr	r3, [pc, #224]	; (8001664 <MX_RTC_Init+0x110>)
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001586:	4b37      	ldr	r3, [pc, #220]	; (8001664 <MX_RTC_Init+0x110>)
 8001588:	227f      	movs	r2, #127	; 0x7f
 800158a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800158c:	4b35      	ldr	r3, [pc, #212]	; (8001664 <MX_RTC_Init+0x110>)
 800158e:	22ff      	movs	r2, #255	; 0xff
 8001590:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001592:	4b34      	ldr	r3, [pc, #208]	; (8001664 <MX_RTC_Init+0x110>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001598:	4b32      	ldr	r3, [pc, #200]	; (8001664 <MX_RTC_Init+0x110>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800159e:	4b31      	ldr	r3, [pc, #196]	; (8001664 <MX_RTC_Init+0x110>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015a4:	482f      	ldr	r0, [pc, #188]	; (8001664 <MX_RTC_Init+0x110>)
 80015a6:	f006 f87f 	bl	80076a8 <HAL_RTC_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80015b0:	f000 fce4 	bl	8001f7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 80015b4:	2311      	movs	r3, #17
 80015b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 42;
 80015ba:	232a      	movs	r3, #42	; 0x2a
 80015bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 30;
 80015c0:	231e      	movs	r3, #30
 80015c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80015ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d2:	2200      	movs	r2, #0
 80015d4:	4619      	mov	r1, r3
 80015d6:	4823      	ldr	r0, [pc, #140]	; (8001664 <MX_RTC_Init+0x110>)
 80015d8:	f006 f8dc 	bl	8007794 <HAL_RTC_SetTime>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80015e2:	f000 fccb 	bl	8001f7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80015e6:	2307      	movs	r3, #7
 80015e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 80015ec:	2311      	movs	r3, #17
 80015ee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 10;
 80015f2:	230a      	movs	r3, #10
 80015f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 24;
 80015f8:	2318      	movs	r3, #24
 80015fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80015fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001602:	2200      	movs	r2, #0
 8001604:	4619      	mov	r1, r3
 8001606:	4817      	ldr	r0, [pc, #92]	; (8001664 <MX_RTC_Init+0x110>)
 8001608:	f006 f9bc 	bl	8007984 <HAL_RTC_SetDate>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001612:	f000 fcb3 	bl	8001f7c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800163a:	2301      	movs	r3, #1
 800163c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001646:	463b      	mov	r3, r7
 8001648:	2200      	movs	r2, #0
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_RTC_Init+0x110>)
 800164e:	f006 fa6c 	bl	8007b2a <HAL_RTC_SetAlarm>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001658:	f000 fc90 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3740      	adds	r7, #64	; 0x40
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200027d8 	.word	0x200027d8
 8001668:	40002800 	.word	0x40002800

0800166c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_SPI2_Init+0x64>)
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <MX_SPI2_Init+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_SPI2_Init+0x64>)
 8001678:	f44f 7282 	mov.w	r2, #260	; 0x104
 800167c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_SPI2_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_SPI2_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_SPI2_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_SPI2_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_SPI2_Init+0x64>)
 8001698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_SPI2_Init+0x64>)
 80016a0:	2208      	movs	r2, #8
 80016a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <MX_SPI2_Init+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_SPI2_Init+0x64>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <MX_SPI2_Init+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_SPI2_Init+0x64>)
 80016b8:	220a      	movs	r2, #10
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <MX_SPI2_Init+0x64>)
 80016be:	f006 fc1b 	bl	8007ef8 <HAL_SPI_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016c8:	f000 fc58 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200027f8 	.word	0x200027f8
 80016d4:	40003800 	.word	0x40003800

080016d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	463b      	mov	r3, r7
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <MX_TIM3_Init+0x94>)
 80016f6:	4a1e      	ldr	r2, [pc, #120]	; (8001770 <MX_TIM3_Init+0x98>)
 80016f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_TIM3_Init+0x94>)
 80016fc:	f240 3247 	movw	r2, #839	; 0x347
 8001700:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <MX_TIM3_Init+0x94>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <MX_TIM3_Init+0x94>)
 800170a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800170e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_TIM3_Init+0x94>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_TIM3_Init+0x94>)
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800171c:	4813      	ldr	r0, [pc, #76]	; (800176c <MX_TIM3_Init+0x94>)
 800171e:	f007 f81d 	bl	800875c <HAL_TIM_Base_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001728:	f000 fc28 	bl	8001f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <MX_TIM3_Init+0x94>)
 800173a:	f007 f9d7 	bl	8008aec <HAL_TIM_ConfigClockSource>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001744:	f000 fc1a 	bl	8001f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001748:	2320      	movs	r3, #32
 800174a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_TIM3_Init+0x94>)
 8001756:	f007 fbf3 	bl	8008f40 <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001760:	f000 fc0c 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20002850 	.word	0x20002850
 8001770:	40000400 	.word	0x40000400

08001774 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_TIM11_Init+0x40>)
 800177a:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <MX_TIM11_Init+0x44>)
 800177c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <MX_TIM11_Init+0x40>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_TIM11_Init+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <MX_TIM11_Init+0x40>)
 800178c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001790:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_TIM11_Init+0x40>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_TIM11_Init+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_TIM11_Init+0x40>)
 80017a0:	f006 ffdc 	bl	800875c <HAL_TIM_Base_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80017aa:	f000 fbe7 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20002898 	.word	0x20002898
 80017b8:	40014800 	.word	0x40014800

080017bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <MX_USART2_UART_Init+0x50>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_USART2_UART_Init+0x4c>)
 80017f4:	f007 fc34 	bl	8009060 <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017fe:	f000 fbbd 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200028e0 	.word	0x200028e0
 800180c:	40004400 	.word	0x40004400

08001810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_DMA_Init+0x3c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <MX_DMA_Init+0x3c>)
 8001820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_DMA_Init+0x3c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2101      	movs	r1, #1
 8001836:	2038      	movs	r0, #56	; 0x38
 8001838:	f001 fe1e 	bl	8003478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800183c:	2038      	movs	r0, #56	; 0x38
 800183e:	f001 fe37 	bl	80034b0 <HAL_NVIC_EnableIRQ>

}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b41      	ldr	r3, [pc, #260]	; (8001970 <MX_GPIO_Init+0x120>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a40      	ldr	r2, [pc, #256]	; (8001970 <MX_GPIO_Init+0x120>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <MX_GPIO_Init+0x120>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <MX_GPIO_Init+0x120>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a39      	ldr	r2, [pc, #228]	; (8001970 <MX_GPIO_Init+0x120>)
 800188c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <MX_GPIO_Init+0x120>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b33      	ldr	r3, [pc, #204]	; (8001970 <MX_GPIO_Init+0x120>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a32      	ldr	r2, [pc, #200]	; (8001970 <MX_GPIO_Init+0x120>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <MX_GPIO_Init+0x120>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <MX_GPIO_Init+0x120>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a2b      	ldr	r2, [pc, #172]	; (8001970 <MX_GPIO_Init+0x120>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <MX_GPIO_Init+0x120>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2108      	movs	r1, #8
 80018da:	4826      	ldr	r0, [pc, #152]	; (8001974 <MX_GPIO_Init+0x124>)
 80018dc:	f002 fb42 	bl	8003f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2120      	movs	r1, #32
 80018e4:	4824      	ldr	r0, [pc, #144]	; (8001978 <MX_GPIO_Init+0x128>)
 80018e6:	f002 fb3d 	bl	8003f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80018ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	481c      	ldr	r0, [pc, #112]	; (8001974 <MX_GPIO_Init+0x124>)
 8001902:	f002 f983 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001906:	2308      	movs	r3, #8
 8001908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190a:	2301      	movs	r3, #1
 800190c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	4815      	ldr	r0, [pc, #84]	; (8001974 <MX_GPIO_Init+0x124>)
 800191e:	f002 f975 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001922:	2320      	movs	r3, #32
 8001924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001926:	2301      	movs	r3, #1
 8001928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	480f      	ldr	r0, [pc, #60]	; (8001978 <MX_GPIO_Init+0x128>)
 800193a:	f002 f967 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : RCWL_Pin */
  GPIO_InitStruct.Pin = RCWL_Pin;
 800193e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RCWL_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	4809      	ldr	r0, [pc, #36]	; (8001978 <MX_GPIO_Init+0x128>)
 8001954:	f002 f95a 	bl	8003c0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	2105      	movs	r1, #5
 800195c:	2028      	movs	r0, #40	; 0x28
 800195e:	f001 fd8b 	bl	8003478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001962:	2028      	movs	r0, #40	; 0x28
 8001964:	f001 fda4 	bl	80034b0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001968:	bf00      	nop
 800196a:	3728      	adds	r7, #40	; 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	40020800 	.word	0x40020800
 8001978:	40020000 	.word	0x40020000

0800197c <SDCard_Init>:

/* USER CODE BEGIN 4 */

void SDCard_Init(void){
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	fresult=f_mount(&fs,"",0);
 8001980:	2200      	movs	r2, #0
 8001982:	490a      	ldr	r1, [pc, #40]	; (80019ac <SDCard_Init+0x30>)
 8001984:	480a      	ldr	r0, [pc, #40]	; (80019b0 <SDCard_Init+0x34>)
 8001986:	f00a f9bf 	bl	800bd08 <f_mount>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <SDCard_Init+0x38>)
 8001990:	701a      	strb	r2, [r3, #0]
	if(fresult!=FR_OK){
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <SDCard_Init+0x38>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <SDCard_Init+0x26>
		send_uart("error in mounting SD card ....\n\r");
 800199a:	4807      	ldr	r0, [pc, #28]	; (80019b8 <SDCard_Init+0x3c>)
 800199c:	f7ff fba8 	bl	80010f0 <send_uart>
	}
	else{
		send_uart("SD card mounted\n\r");
	}
}
 80019a0:	e002      	b.n	80019a8 <SDCard_Init+0x2c>
		send_uart("SD card mounted\n\r");
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <SDCard_Init+0x40>)
 80019a4:	f7ff fba4 	bl	80010f0 <send_uart>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	08016270 	.word	0x08016270
 80019b0:	20000234 	.word	0x20000234
 80019b4:	200022a0 	.word	0x200022a0
 80019b8:	08016274 	.word	0x08016274
 80019bc:	08016298 	.word	0x08016298

080019c0 <MX_FREERTOS_Init>:


void MX_FREERTOS_Init(void){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	vQueueAddToRegistry(binarySemaphoreISR, "binary_semaphore_ISR");
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_FREERTOS_Init+0x20>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4906      	ldr	r1, [pc, #24]	; (80019e4 <MX_FREERTOS_Init+0x24>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	f00c fd52 	bl	800e474 <vQueueAddToRegistry>
	vQueueAddToRegistry(MutexOne, "Mutex_One");
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <MX_FREERTOS_Init+0x28>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4905      	ldr	r1, [pc, #20]	; (80019ec <MX_FREERTOS_Init+0x2c>)
 80019d6:	4618      	mov	r0, r3
 80019d8:	f00c fd4c 	bl	800e474 <vQueueAddToRegistry>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20002944 	.word	0x20002944
 80019e4:	080162ac 	.word	0x080162ac
 80019e8:	20002940 	.word	0x20002940
 80019ec:	080162c4 	.word	0x080162c4

080019f0 <send_OLED>:


void send_OLED(char*string, uint8_t y){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70fb      	strb	r3, [r7, #3]
	if(help){
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <send_OLED+0x38>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00c      	beq.n	8001a1e <send_OLED+0x2e>
		SSD1306_GotoXY (5,y); // goto 10, 10
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4619      	mov	r1, r3
 8001a0a:	2005      	movs	r0, #5
 8001a0c:	f00f f8e0 	bl	8010bd0 <SSD1306_GotoXY>
		SSD1306_Puts(string, &Font_7x10, 1);
 8001a10:	2201      	movs	r2, #1
 8001a12:	4906      	ldr	r1, [pc, #24]	; (8001a2c <send_OLED+0x3c>)
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f00f f971 	bl	8010cfc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001a1a:	f00f f833 	bl	8010a84 <SSD1306_UpdateScreen>
	}
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000028 	.word	0x20000028

08001a30 <send_SDCard>:


void send_SDCard(char*string){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
		count++;
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <send_SDCard+0x5c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a13      	ldr	r2, [pc, #76]	; (8001a8c <send_SDCard+0x5c>)
 8001a40:	6013      	str	r3, [r2, #0]
		fresult=f_open(&fil, "data.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_OPEN_APPEND);
 8001a42:	2232      	movs	r2, #50	; 0x32
 8001a44:	4912      	ldr	r1, [pc, #72]	; (8001a90 <send_SDCard+0x60>)
 8001a46:	4813      	ldr	r0, [pc, #76]	; (8001a94 <send_SDCard+0x64>)
 8001a48:	f00a f9c2 	bl	800bdd0 <f_open>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <send_SDCard+0x68>)
 8001a52:	701a      	strb	r2, [r3, #0]
		strcat(string, "\n\r");
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7fe fc2b 	bl	80002b0 <strlen>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <send_SDCard+0x6c>)
 8001a64:	8811      	ldrh	r1, [r2, #0]
 8001a66:	7892      	ldrb	r2, [r2, #2]
 8001a68:	8019      	strh	r1, [r3, #0]
 8001a6a:	709a      	strb	r2, [r3, #2]
		fresult = f_puts(string,&fil);
 8001a6c:	4909      	ldr	r1, [pc, #36]	; (8001a94 <send_SDCard+0x64>)
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f00a ff70 	bl	800c954 <f_puts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <send_SDCard+0x68>)
 8001a7a:	701a      	strb	r2, [r3, #0]
		f_close(&fil);
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <send_SDCard+0x64>)
 8001a7e:	f00a fec3 	bl	800c808 <f_close>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20002678 	.word	0x20002678
 8001a90:	080162d0 	.word	0x080162d0
 8001a94:	20001270 	.word	0x20001270
 8001a98:	200022a0 	.word	0x200022a0
 8001a9c:	080162dc 	.word	0x080162dc

08001aa0 <vUARTtask>:

void vUARTtask(void *pvParameters){
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
//	uint16_t count=0;
	while(1){
 8001aa8:	e7fe      	b.n	8001aa8 <vUARTtask+0x8>
	...

08001aac <vSwitchtask>:
//		send_uart(buffer);
//		vTaskDelay(50);
	}
}

void vSwitchtask(void *pvParameters){
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	6078      	str	r0, [r7, #4]
	while(1){
		if(xSemaphoreTake(binarySemaphoreISR, portMAX_DELAY)==pdTRUE ){
 8001ab4:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <vSwitchtask+0xd8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8001abc:	4618      	mov	r0, r3
 8001abe:	f00c f9ab 	bl	800de18 <xQueueSemaphoreTake>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d1f5      	bne.n	8001ab4 <vSwitchtask+0x8>
			if (!isButtonPressed) {
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <vSwitchtask+0xdc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d154      	bne.n	8001b7a <vSwitchtask+0xce>
				pressStartTime = xTaskGetTickCount();
 8001ad0:	f00d f8e0 	bl	800ec94 <xTaskGetTickCount>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4a2d      	ldr	r2, [pc, #180]	; (8001b8c <vSwitchtask+0xe0>)
 8001ad8:	6013      	str	r3, [r2, #0]
				isButtonPressed = pdTRUE;
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <vSwitchtask+0xdc>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
				xTimerStart(buttonPressTimer, 0);
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <vSwitchtask+0xe4>)
 8001ae2:	681c      	ldr	r4, [r3, #0]
 8001ae4:	f00d f8d6 	bl	800ec94 <xTaskGetTickCount>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	2300      	movs	r3, #0
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2300      	movs	r3, #0
 8001af0:	2101      	movs	r1, #1
 8001af2:	4620      	mov	r0, r4
 8001af4:	f00d ff62 	bl	800f9bc <xTimerGenericCommand>


				help=0;
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <vSwitchtask+0xe8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
				sprintf(help_str,"HELP");
 8001afe:	4926      	ldr	r1, [pc, #152]	; (8001b98 <vSwitchtask+0xec>)
 8001b00:	4826      	ldr	r0, [pc, #152]	; (8001b9c <vSwitchtask+0xf0>)
 8001b02:	f012 f9b3 	bl	8013e6c <siprintf>
				fresult=f_open(&fil, "data.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_OPEN_APPEND);
 8001b06:	2232      	movs	r2, #50	; 0x32
 8001b08:	4925      	ldr	r1, [pc, #148]	; (8001ba0 <vSwitchtask+0xf4>)
 8001b0a:	4826      	ldr	r0, [pc, #152]	; (8001ba4 <vSwitchtask+0xf8>)
 8001b0c:	f00a f960 	bl	800bdd0 <f_open>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <vSwitchtask+0xfc>)
 8001b16:	701a      	strb	r2, [r3, #0]
				strcat(help_str,"\n\r");
 8001b18:	4820      	ldr	r0, [pc, #128]	; (8001b9c <vSwitchtask+0xf0>)
 8001b1a:	f7fe fbc9 	bl	80002b0 <strlen>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <vSwitchtask+0xf0>)
 8001b24:	4413      	add	r3, r2
 8001b26:	4a21      	ldr	r2, [pc, #132]	; (8001bac <vSwitchtask+0x100>)
 8001b28:	8811      	ldrh	r1, [r2, #0]
 8001b2a:	7892      	ldrb	r2, [r2, #2]
 8001b2c:	8019      	strh	r1, [r3, #0]
 8001b2e:	709a      	strb	r2, [r3, #2]
				fresult = f_puts(help_str,&fil);
 8001b30:	491c      	ldr	r1, [pc, #112]	; (8001ba4 <vSwitchtask+0xf8>)
 8001b32:	481a      	ldr	r0, [pc, #104]	; (8001b9c <vSwitchtask+0xf0>)
 8001b34:	f00a ff0e 	bl	800c954 <f_puts>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <vSwitchtask+0xfc>)
 8001b3e:	701a      	strb	r2, [r3, #0]
				f_close(&fil);
 8001b40:	4818      	ldr	r0, [pc, #96]	; (8001ba4 <vSwitchtask+0xf8>)
 8001b42:	f00a fe61 	bl	800c808 <f_close>


				SSD1306_Clear();
 8001b46:	f00f f8fe 	bl	8010d46 <SSD1306_Clear>
				vTaskDelay(20);
 8001b4a:	2014      	movs	r0, #20
 8001b4c:	f00c fefe 	bl	800e94c <vTaskDelay>
				SSD1306_GotoXY (25,20);
 8001b50:	2114      	movs	r1, #20
 8001b52:	2019      	movs	r0, #25
 8001b54:	f00f f83c 	bl	8010bd0 <SSD1306_GotoXY>
				SSD1306_Puts("HELP", &Font_16x26, 1);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4915      	ldr	r1, [pc, #84]	; (8001bb0 <vSwitchtask+0x104>)
 8001b5c:	480e      	ldr	r0, [pc, #56]	; (8001b98 <vSwitchtask+0xec>)
 8001b5e:	f00f f8cd 	bl	8010cfc <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8001b62:	f00e ff8f 	bl	8010a84 <SSD1306_UpdateScreen>
				send_uart("Button Pressed\r\n");
 8001b66:	4813      	ldr	r0, [pc, #76]	; (8001bb4 <vSwitchtask+0x108>)
 8001b68:	f7ff fac2 	bl	80010f0 <send_uart>
				vTaskDelay(970);
 8001b6c:	f240 30ca 	movw	r0, #970	; 0x3ca
 8001b70:	f00c feec 	bl	800e94c <vTaskDelay>


				help=1;
 8001b74:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <vSwitchtask+0xe8>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
			}
			vTaskDelay(20);
 8001b7a:	2014      	movs	r0, #20
 8001b7c:	f00c fee6 	bl	800e94c <vTaskDelay>
		if(xSemaphoreTake(binarySemaphoreISR, portMAX_DELAY)==pdTRUE ){
 8001b80:	e798      	b.n	8001ab4 <vSwitchtask+0x8>
 8001b82:	bf00      	nop
 8001b84:	20002944 	.word	0x20002944
 8001b88:	20002674 	.word	0x20002674
 8001b8c:	2000266c 	.word	0x2000266c
 8001b90:	20002948 	.word	0x20002948
 8001b94:	20000000 	.word	0x20000000
 8001b98:	080162e0 	.word	0x080162e0
 8001b9c:	20002340 	.word	0x20002340
 8001ba0:	080162d0 	.word	0x080162d0
 8001ba4:	20001270 	.word	0x20001270
 8001ba8:	200022a0 	.word	0x200022a0
 8001bac:	080162dc 	.word	0x080162dc
 8001bb0:	20000030 	.word	0x20000030
 8001bb4:	080162e8 	.word	0x080162e8

08001bb8 <vInternalTemptask>:
		}
	}
}

void vInternalTemptask(void *pvParameters){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim3); // First get the timer running
 8001bc0:	4819      	ldr	r0, [pc, #100]	; (8001c28 <vInternalTemptask+0x70>)
 8001bc2:	f006 fe1b 	bl	80087fc <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, ADC_SAMPLES * 2 * 2); // Now fire up the ADC DMA
 8001bc6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001bca:	4918      	ldr	r1, [pc, #96]	; (8001c2c <vInternalTemptask+0x74>)
 8001bcc:	4818      	ldr	r0, [pc, #96]	; (8001c30 <vInternalTemptask+0x78>)
 8001bce:	f000 ffc3 	bl	8002b58 <HAL_ADC_Start_DMA>
	while(1){
		sprintf(tempState,"Temp = %4.2f C",temp);// to get raw value call temp_avg variable
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <vInternalTemptask+0x7c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fcd6 	bl	8000588 <__aeabi_f2d>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4915      	ldr	r1, [pc, #84]	; (8001c38 <vInternalTemptask+0x80>)
 8001be2:	4816      	ldr	r0, [pc, #88]	; (8001c3c <vInternalTemptask+0x84>)
 8001be4:	f012 f942 	bl	8013e6c <siprintf>
		if(xSemaphoreTake(MutexOne, portMAX_DELAY)==pdTRUE){
 8001be8:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <vInternalTemptask+0x88>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00c f911 	bl	800de18 <xQueueSemaphoreTake>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d110      	bne.n	8001c1e <vInternalTemptask+0x66>
			send_OLED(tempState, 50);
 8001bfc:	2132      	movs	r1, #50	; 0x32
 8001bfe:	480f      	ldr	r0, [pc, #60]	; (8001c3c <vInternalTemptask+0x84>)
 8001c00:	f7ff fef6 	bl	80019f0 <send_OLED>
			send_SDCard(tempState);
 8001c04:	480d      	ldr	r0, [pc, #52]	; (8001c3c <vInternalTemptask+0x84>)
 8001c06:	f7ff ff13 	bl	8001a30 <send_SDCard>
			send_uart(tempState);
 8001c0a:	480c      	ldr	r0, [pc, #48]	; (8001c3c <vInternalTemptask+0x84>)
 8001c0c:	f7ff fa70 	bl	80010f0 <send_uart>
			xSemaphoreGive(MutexOne);
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <vInternalTemptask+0x88>)
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	2300      	movs	r3, #0
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	f00b fd77 	bl	800d70c <xQueueGenericSend>
		}
		vTaskDelay(20);
 8001c1e:	2014      	movs	r0, #20
 8001c20:	f00c fe94 	bl	800e94c <vTaskDelay>
		sprintf(tempState,"Temp = %4.2f C",temp);// to get raw value call temp_avg variable
 8001c24:	e7d5      	b.n	8001bd2 <vInternalTemptask+0x1a>
 8001c26:	bf00      	nop
 8001c28:	20002850 	.word	0x20002850
 8001c2c:	2000234c 	.word	0x2000234c
 8001c30:	20002694 	.word	0x20002694
 8001c34:	20000230 	.word	0x20000230
 8001c38:	080162fc 	.word	0x080162fc
 8001c3c:	2000230c 	.word	0x2000230c
 8001c40:	20002940 	.word	0x20002940

08001c44 <vRCWLtask>:
	}
}


void vRCWLtask(void *pvParameters){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	while(1){
		uint8_t rcwl = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c50:	4817      	ldr	r0, [pc, #92]	; (8001cb0 <vRCWLtask+0x6c>)
 8001c52:	f002 f96f 	bl	8003f34 <HAL_GPIO_ReadPin>
 8001c56:	4603      	mov	r3, r0
 8001c58:	73fb      	strb	r3, [r7, #15]
		char *rcwl_state = (rcwl == 1) ? "HIGH" : "LOW ";
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <vRCWLtask+0x20>
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <vRCWLtask+0x70>)
 8001c62:	e000      	b.n	8001c66 <vRCWLtask+0x22>
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <vRCWLtask+0x74>)
 8001c66:	60bb      	str	r3, [r7, #8]
		sprintf(motionState,"Motion: %s", rcwl_state);
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	4914      	ldr	r1, [pc, #80]	; (8001cbc <vRCWLtask+0x78>)
 8001c6c:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <vRCWLtask+0x7c>)
 8001c6e:	f012 f8fd 	bl	8013e6c <siprintf>
		if(xSemaphoreTake(MutexOne, portMAX_DELAY)==pdTRUE){
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <vRCWLtask+0x80>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00c f8cc 	bl	800de18 <xQueueSemaphoreTake>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d110      	bne.n	8001ca8 <vRCWLtask+0x64>
			send_OLED(motionState, 30);
 8001c86:	211e      	movs	r1, #30
 8001c88:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <vRCWLtask+0x7c>)
 8001c8a:	f7ff feb1 	bl	80019f0 <send_OLED>
			send_SDCard(motionState);
 8001c8e:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <vRCWLtask+0x7c>)
 8001c90:	f7ff fece 	bl	8001a30 <send_SDCard>
			send_uart(motionState);
 8001c94:	480a      	ldr	r0, [pc, #40]	; (8001cc0 <vRCWLtask+0x7c>)
 8001c96:	f7ff fa2b 	bl	80010f0 <send_uart>
			xSemaphoreGive(MutexOne);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <vRCWLtask+0x80>)
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	f00b fd32 	bl	800d70c <xQueueGenericSend>
		}
		vTaskDelay(5);
 8001ca8:	2005      	movs	r0, #5
 8001caa:	f00c fe4f 	bl	800e94c <vTaskDelay>
	while(1){
 8001cae:	e7cd      	b.n	8001c4c <vRCWLtask+0x8>
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	0801630c 	.word	0x0801630c
 8001cb8:	08016314 	.word	0x08016314
 8001cbc:	0801631c 	.word	0x0801631c
 8001cc0:	200022a4 	.word	0x200022a4
 8001cc4:	20002940 	.word	0x20002940

08001cc8 <vRTCtask>:
	}
}

void vRTCtask(void *pvParameters){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0a2      	sub	sp, #136	; 0x88
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	6078      	str	r0, [r7, #4]
	while(1){
		char time[60];
		char date[60];
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4931      	ldr	r1, [pc, #196]	; (8001d98 <vRTCtask+0xd0>)
 8001cd4:	4831      	ldr	r0, [pc, #196]	; (8001d9c <vRTCtask+0xd4>)
 8001cd6:	f005 fdf7 	bl	80078c8 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	4930      	ldr	r1, [pc, #192]	; (8001da0 <vRTCtask+0xd8>)
 8001cde:	482f      	ldr	r0, [pc, #188]	; (8001d9c <vRTCtask+0xd4>)
 8001ce0:	f005 fed4 	bl	8007a8c <HAL_RTC_GetDate>
		sprintf(date,"Date :%02d.%02d.%02d",sDate.Date, sDate.Month, sDate.Year);
 8001ce4:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <vRTCtask+0xd8>)
 8001ce6:	789b      	ldrb	r3, [r3, #2]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <vRTCtask+0xd8>)
 8001cec:	785b      	ldrb	r3, [r3, #1]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <vRTCtask+0xd8>)
 8001cf2:	78db      	ldrb	r3, [r3, #3]
 8001cf4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4929      	ldr	r1, [pc, #164]	; (8001da4 <vRTCtask+0xdc>)
 8001cfe:	f012 f8b5 	bl	8013e6c <siprintf>
		sprintf(time,"Time :%02d.%02d.%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8001d02:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <vRTCtask+0xd0>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <vRTCtask+0xd0>)
 8001d0a:	785b      	ldrb	r3, [r3, #1]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <vRTCtask+0xd0>)
 8001d10:	789b      	ldrb	r3, [r3, #2]
 8001d12:	f107 0008 	add.w	r0, r7, #8
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4923      	ldr	r1, [pc, #140]	; (8001da8 <vRTCtask+0xe0>)
 8001d1c:	f012 f8a6 	bl	8013e6c <siprintf>
		if(xSemaphoreTake(MutexOne, portMAX_DELAY)==pdTRUE){
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <vRTCtask+0xe4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f00c f875 	bl	800de18 <xQueueSemaphoreTake>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d12c      	bne.n	8001d8e <vRTCtask+0xc6>
			send_OLED(date, 10);
 8001d34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d38:	210a      	movs	r1, #10
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fe58 	bl	80019f0 <send_OLED>
			send_OLED(time, 20);
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	2114      	movs	r1, #20
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fe52 	bl	80019f0 <send_OLED>
			send_SDCard(date);
 8001d4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fe6d 	bl	8001a30 <send_SDCard>
			vTaskDelay(5);
 8001d56:	2005      	movs	r0, #5
 8001d58:	f00c fdf8 	bl	800e94c <vTaskDelay>
			send_SDCard(time);
 8001d5c:	f107 0308 	add.w	r3, r7, #8
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fe65 	bl	8001a30 <send_SDCard>
			vTaskDelay(5);
 8001d66:	2005      	movs	r0, #5
 8001d68:	f00c fdf0 	bl	800e94c <vTaskDelay>
			send_uart(date);
 8001d6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff f9bd 	bl	80010f0 <send_uart>
			send_uart(time);
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f9b8 	bl	80010f0 <send_uart>
			xSemaphoreGive(MutexOne);
 8001d80:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <vRTCtask+0xe4>)
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	2300      	movs	r3, #0
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	f00b fcbf 	bl	800d70c <xQueueGenericSend>
		}
		vTaskDelay(10);
 8001d8e:	200a      	movs	r0, #10
 8001d90:	f00c fddc 	bl	800e94c <vTaskDelay>
	while(1){
 8001d94:	e79c      	b.n	8001cd0 <vRTCtask+0x8>
 8001d96:	bf00      	nop
 8001d98:	2000267c 	.word	0x2000267c
 8001d9c:	200027d8 	.word	0x200027d8
 8001da0:	20002690 	.word	0x20002690
 8001da4:	08016328 	.word	0x08016328
 8001da8:	08016340 	.word	0x08016340
 8001dac:	20002940 	.word	0x20002940

08001db0 <vMQ135task>:
	}
}

void vMQ135task(void *pvParameters){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_ADC_Start(&hadc2);
 8001db8:	481a      	ldr	r0, [pc, #104]	; (8001e24 <vMQ135task+0x74>)
 8001dba:	f000 fd3d 	bl	8002838 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc2:	4818      	ldr	r0, [pc, #96]	; (8001e24 <vMQ135task+0x74>)
 8001dc4:	f000 fe3d 	bl	8002a42 <HAL_ADC_PollForConversion>
		uint16_t adc_value= HAL_ADC_GetValue(&hadc2);
 8001dc8:	4816      	ldr	r0, [pc, #88]	; (8001e24 <vMQ135task+0x74>)
 8001dca:	f000 ffd5 	bl	8002d78 <HAL_ADC_GetValue>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	81fb      	strh	r3, [r7, #14]
		HAL_ADC_Stop(&hadc2);
 8001dd2:	4814      	ldr	r0, [pc, #80]	; (8001e24 <vMQ135task+0x74>)
 8001dd4:	f000 fe02 	bl	80029dc <HAL_ADC_Stop>
		sprintf(adcVal,"AQI is %d   ",adc_value);
 8001dd8:	89fb      	ldrh	r3, [r7, #14]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4912      	ldr	r1, [pc, #72]	; (8001e28 <vMQ135task+0x78>)
 8001dde:	4813      	ldr	r0, [pc, #76]	; (8001e2c <vMQ135task+0x7c>)
 8001de0:	f012 f844 	bl	8013e6c <siprintf>
		if(xSemaphoreTake(MutexOne, portMAX_DELAY)==pdTRUE){
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <vMQ135task+0x80>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	4618      	mov	r0, r3
 8001dee:	f00c f813 	bl	800de18 <xQueueSemaphoreTake>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d110      	bne.n	8001e1a <vMQ135task+0x6a>
			send_OLED(adcVal, 40);
 8001df8:	2128      	movs	r1, #40	; 0x28
 8001dfa:	480c      	ldr	r0, [pc, #48]	; (8001e2c <vMQ135task+0x7c>)
 8001dfc:	f7ff fdf8 	bl	80019f0 <send_OLED>
			send_SDCard(adcVal);
 8001e00:	480a      	ldr	r0, [pc, #40]	; (8001e2c <vMQ135task+0x7c>)
 8001e02:	f7ff fe15 	bl	8001a30 <send_SDCard>
			send_uart(adcVal);
 8001e06:	4809      	ldr	r0, [pc, #36]	; (8001e2c <vMQ135task+0x7c>)
 8001e08:	f7ff f972 	bl	80010f0 <send_uart>
			xSemaphoreGive(MutexOne);
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <vMQ135task+0x80>)
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	2300      	movs	r3, #0
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	f00b fc79 	bl	800d70c <xQueueGenericSend>
		}
		vTaskDelay(20);
 8001e1a:	2014      	movs	r0, #20
 8001e1c:	f00c fd96 	bl	800e94c <vTaskDelay>
	while(1){
 8001e20:	e7ca      	b.n	8001db8 <vMQ135task+0x8>
 8001e22:	bf00      	nop
 8001e24:	200026dc 	.word	0x200026dc
 8001e28:	08016358 	.word	0x08016358
 8001e2c:	200022d8 	.word	0x200022d8
 8001e30:	20002940 	.word	0x20002940

08001e34 <vTimerCallback>:
	}
}

void vTimerCallback(TimerHandle_t xTimer) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    // Handle cases where the button is held but not released
    if (isButtonPressed) {
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <vTimerCallback+0x44>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d015      	beq.n	8001e70 <vTimerCallback+0x3c>
        pressEndTime = xTaskGetTickCount();
 8001e44:	f00c ff26 	bl	800ec94 <xTaskGetTickCount>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <vTimerCallback+0x48>)
 8001e4c:	6013      	str	r3, [r2, #0]
        uint32_t pressDurationMs = (pressEndTime - pressStartTime) * portTICK_PERIOD_MS;
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <vTimerCallback+0x48>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <vTimerCallback+0x4c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	60fb      	str	r3, [r7, #12]

        if (pressDurationMs > 3000) {
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d902      	bls.n	8001e6a <vTimerCallback+0x36>
            send_uart("Help Resolved by Nurse\r\n");
 8001e64:	4807      	ldr	r0, [pc, #28]	; (8001e84 <vTimerCallback+0x50>)
 8001e66:	f7ff f943 	bl	80010f0 <send_uart>
        }
        isButtonPressed = pdFALSE;
 8001e6a:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <vTimerCallback+0x44>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
    }
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20002674 	.word	0x20002674
 8001e7c:	20002670 	.word	0x20002670
 8001e80:	2000266c 	.word	0x2000266c
 8001e84:	08016368 	.word	0x08016368

08001e88 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
    process_adc_buffer(&adc_buffer[0]); // We're half way through the buffer, so can safely deal with first half
 8001e90:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001e92:	f7ff f86d 	bl	8000f70 <process_adc_buffer>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000234c 	.word	0x2000234c

08001ea4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
    process_adc_buffer(&adc_buffer[ADC_SAMPLES * 2]); // We're all the way through the buffer, so deal with second half
 8001eac:	4803      	ldr	r0, [pc, #12]	; (8001ebc <HAL_ADC_ConvCpltCallback+0x18>)
 8001eae:	f7ff f85f 	bl	8000f70 <process_adc_buffer>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200024dc 	.word	0x200024dc

08001ec0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR( binarySemaphoreISR, &xHigherPriorityTaskWoken );
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x48>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f107 020c 	add.w	r2, r7, #12
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f00b fdec 	bl	800dab6 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_GPIO_EXTI_Callback+0x3a>
 8001ee4:	f010 ff92 	bl	8012e0c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	f3bf 8f4f 	dsb	sy
 8001ef4:	f3bf 8f6f 	isb	sy
}
 8001ef8:	e001      	b.n	8001efe <HAL_GPIO_EXTI_Callback+0x3e>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001efa:	f010 ff6b 	bl	8012dd4 <SEGGER_SYSVIEW_RecordExitISR>
}
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20002944 	.word	0x20002944
 8001f0c:	e000ed04 	.word	0xe000ed04

08001f10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f00a ffc9 	bl	800ceb0 <osDelay>
 8001f1e:	e7fb      	b.n	8001f18 <StartDefaultTask+0x8>

08001f20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM3) {
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0f      	ldr	r2, [pc, #60]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d111      	bne.n	8001f56 <HAL_TIM_PeriodElapsedCallback+0x36>
		if (tim_cnt % 500 == 0)
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f38:	fba3 1302 	umull	r1, r3, r3, r2
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d104      	bne.n	8001f56 <HAL_TIM_PeriodElapsedCallback+0x36>
//				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		tim_cnt++;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f54:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d101      	bne.n	8001f64 <HAL_TIM_PeriodElapsedCallback+0x44>
    HAL_IncTick();
 8001f60:	f000 fbe2 	bl	8002728 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40000400 	.word	0x40000400
 8001f70:	20000220 	.word	0x20000220
 8001f74:	10624dd3 	.word	0x10624dd3
 8001f78:	40001000 	.word	0x40001000

08001f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f80:	b672      	cpsid	i
}
 8001f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <Error_Handler+0x8>
	...

08001f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_MspInit+0x54>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <HAL_MspInit+0x54>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <HAL_MspInit+0x54>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_MspInit+0x54>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_MspInit+0x54>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_MspInit+0x54>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	210f      	movs	r1, #15
 8001fca:	f06f 0001 	mvn.w	r0, #1
 8001fce:	f001 fa53 	bl	8003478 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a39      	ldr	r2, [pc, #228]	; (80020e4 <HAL_ADC_MspInit+0x104>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d13f      	bne.n	8002082 <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_ADC_MspInit+0x108>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a37      	ldr	r2, [pc, #220]	; (80020e8 <HAL_ADC_MspInit+0x108>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b35      	ldr	r3, [pc, #212]	; (80020e8 <HAL_ADC_MspInit+0x108>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800201e:	4b33      	ldr	r3, [pc, #204]	; (80020ec <HAL_ADC_MspInit+0x10c>)
 8002020:	4a33      	ldr	r2, [pc, #204]	; (80020f0 <HAL_ADC_MspInit+0x110>)
 8002022:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002024:	4b31      	ldr	r3, [pc, #196]	; (80020ec <HAL_ADC_MspInit+0x10c>)
 8002026:	2200      	movs	r2, #0
 8002028:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800202a:	4b30      	ldr	r3, [pc, #192]	; (80020ec <HAL_ADC_MspInit+0x10c>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002030:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <HAL_ADC_MspInit+0x10c>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_ADC_MspInit+0x10c>)
 8002038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800203c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800203e:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <HAL_ADC_MspInit+0x10c>)
 8002040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002044:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002046:	4b29      	ldr	r3, [pc, #164]	; (80020ec <HAL_ADC_MspInit+0x10c>)
 8002048:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800204c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800204e:	4b27      	ldr	r3, [pc, #156]	; (80020ec <HAL_ADC_MspInit+0x10c>)
 8002050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002054:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002056:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_ADC_MspInit+0x10c>)
 8002058:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800205c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800205e:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_ADC_MspInit+0x10c>)
 8002060:	2200      	movs	r2, #0
 8002062:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002064:	4821      	ldr	r0, [pc, #132]	; (80020ec <HAL_ADC_MspInit+0x10c>)
 8002066:	f001 fa31 	bl	80034cc <HAL_DMA_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8002070:	f7ff ff84 	bl	8001f7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <HAL_ADC_MspInit+0x10c>)
 8002078:	639a      	str	r2, [r3, #56]	; 0x38
 800207a:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <HAL_ADC_MspInit+0x10c>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002080:	e02c      	b.n	80020dc <HAL_ADC_MspInit+0xfc>
  else if(hadc->Instance==ADC2)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <HAL_ADC_MspInit+0x114>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d127      	bne.n	80020dc <HAL_ADC_MspInit+0xfc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_ADC_MspInit+0x108>)
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <HAL_ADC_MspInit+0x108>)
 8002096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209a:	6453      	str	r3, [r2, #68]	; 0x44
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_ADC_MspInit+0x108>)
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_ADC_MspInit+0x108>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <HAL_ADC_MspInit+0x108>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6313      	str	r3, [r2, #48]	; 0x30
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_ADC_MspInit+0x108>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MQ135_Pin;
 80020c4:	2302      	movs	r3, #2
 80020c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c8:	2303      	movs	r3, #3
 80020ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MQ135_GPIO_Port, &GPIO_InitStruct);
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	4619      	mov	r1, r3
 80020d6:	4808      	ldr	r0, [pc, #32]	; (80020f8 <HAL_ADC_MspInit+0x118>)
 80020d8:	f001 fd98 	bl	8003c0c <HAL_GPIO_Init>
}
 80020dc:	bf00      	nop
 80020de:	3728      	adds	r7, #40	; 0x28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40012000 	.word	0x40012000
 80020e8:	40023800 	.word	0x40023800
 80020ec:	20002724 	.word	0x20002724
 80020f0:	40026410 	.word	0x40026410
 80020f4:	40012100 	.word	0x40012100
 80020f8:	40020000 	.word	0x40020000

080020fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a21      	ldr	r2, [pc, #132]	; (80021a0 <HAL_I2C_MspInit+0xa4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d13c      	bne.n	8002198 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_I2C_MspInit+0xa8>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <HAL_I2C_MspInit+0xa8>)
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_I2C_MspInit+0xa8>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800213a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002140:	2312      	movs	r3, #18
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800214c:	2304      	movs	r3, #4
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4814      	ldr	r0, [pc, #80]	; (80021a8 <HAL_I2C_MspInit+0xac>)
 8002158:	f001 fd58 	bl	8003c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_I2C_MspInit+0xa8>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <HAL_I2C_MspInit+0xa8>)
 8002166:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800216a:	6413      	str	r3, [r2, #64]	; 0x40
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_I2C_MspInit+0xa8>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2105      	movs	r1, #5
 800217c:	201f      	movs	r0, #31
 800217e:	f001 f97b 	bl	8003478 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002182:	201f      	movs	r0, #31
 8002184:	f001 f994 	bl	80034b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2105      	movs	r1, #5
 800218c:	2020      	movs	r0, #32
 800218e:	f001 f973 	bl	8003478 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002192:	2020      	movs	r0, #32
 8002194:	f001 f98c 	bl	80034b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002198:	bf00      	nop
 800219a:	3728      	adds	r7, #40	; 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40005400 	.word	0x40005400
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40020400 	.word	0x40020400

080021ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b09a      	sub	sp, #104	; 0x68
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	225c      	movs	r2, #92	; 0x5c
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f011 fec8 	bl	8013f52 <memset>
  if(hrtc->Instance==RTC)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a0c      	ldr	r2, [pc, #48]	; (80021f8 <HAL_RTC_MspInit+0x4c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d111      	bne.n	80021f0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021cc:	2320      	movs	r3, #32
 80021ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	4618      	mov	r0, r3
 80021dc:	f004 fa6c 	bl	80066b8 <HAL_RCCEx_PeriphCLKConfig>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80021e6:	f7ff fec9 	bl	8001f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021ea:	4b04      	ldr	r3, [pc, #16]	; (80021fc <HAL_RTC_MspInit+0x50>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021f0:	bf00      	nop
 80021f2:	3768      	adds	r7, #104	; 0x68
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40002800 	.word	0x40002800
 80021fc:	42470e3c 	.word	0x42470e3c

08002200 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a30      	ldr	r2, [pc, #192]	; (80022e0 <HAL_SPI_MspInit+0xe0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d15a      	bne.n	80022d8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	4b2f      	ldr	r3, [pc, #188]	; (80022e4 <HAL_SPI_MspInit+0xe4>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a2e      	ldr	r2, [pc, #184]	; (80022e4 <HAL_SPI_MspInit+0xe4>)
 800222c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <HAL_SPI_MspInit+0xe4>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <HAL_SPI_MspInit+0xe4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <HAL_SPI_MspInit+0xe4>)
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_SPI_MspInit+0xe4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <HAL_SPI_MspInit+0xe4>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a20      	ldr	r2, [pc, #128]	; (80022e4 <HAL_SPI_MspInit+0xe4>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_SPI_MspInit+0xe4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002276:	2302      	movs	r3, #2
 8002278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002282:	2303      	movs	r3, #3
 8002284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002286:	2307      	movs	r3, #7
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	4815      	ldr	r0, [pc, #84]	; (80022e8 <HAL_SPI_MspInit+0xe8>)
 8002292:	f001 fcbb 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002296:	2304      	movs	r3, #4
 8002298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022a6:	2305      	movs	r3, #5
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	480d      	ldr	r0, [pc, #52]	; (80022e8 <HAL_SPI_MspInit+0xe8>)
 80022b2:	f001 fcab 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022c8:	2305      	movs	r3, #5
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	4619      	mov	r1, r3
 80022d2:	4806      	ldr	r0, [pc, #24]	; (80022ec <HAL_SPI_MspInit+0xec>)
 80022d4:	f001 fc9a 	bl	8003c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022d8:	bf00      	nop
 80022da:	3728      	adds	r7, #40	; 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40003800 	.word	0x40003800
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40020400 	.word	0x40020400

080022f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a18      	ldr	r2, [pc, #96]	; (8002360 <HAL_TIM_Base_MspInit+0x70>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10e      	bne.n	8002320 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <HAL_TIM_Base_MspInit+0x74>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	4a16      	ldr	r2, [pc, #88]	; (8002364 <HAL_TIM_Base_MspInit+0x74>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	6413      	str	r3, [r2, #64]	; 0x40
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_TIM_Base_MspInit+0x74>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800231e:	e01a      	b.n	8002356 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a10      	ldr	r2, [pc, #64]	; (8002368 <HAL_TIM_Base_MspInit+0x78>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d115      	bne.n	8002356 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_TIM_Base_MspInit+0x74>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	4a0c      	ldr	r2, [pc, #48]	; (8002364 <HAL_TIM_Base_MspInit+0x74>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002338:	6453      	str	r3, [r2, #68]	; 0x44
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_TIM_Base_MspInit+0x74>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2105      	movs	r1, #5
 800234a:	201a      	movs	r0, #26
 800234c:	f001 f894 	bl	8003478 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002350:	201a      	movs	r0, #26
 8002352:	f001 f8ad 	bl	80034b0 <HAL_NVIC_EnableIRQ>
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40000400 	.word	0x40000400
 8002364:	40023800 	.word	0x40023800
 8002368:	40014800 	.word	0x40014800

0800236c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_UART_MspInit+0x84>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d12b      	bne.n	80023e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_UART_MspInit+0x88>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <HAL_UART_MspInit+0x88>)
 8002398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 80023c6:	230c      	movs	r3, #12
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023d6:	2307      	movs	r3, #7
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	; (80023f8 <HAL_UART_MspInit+0x8c>)
 80023e2:	f001 fc13 	bl	8003c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023e6:	bf00      	nop
 80023e8:	3728      	adds	r7, #40	; 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40004400 	.word	0x40004400
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000

080023fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08e      	sub	sp, #56	; 0x38
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <HAL_InitTick+0xe4>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	4a32      	ldr	r2, [pc, #200]	; (80024e0 <HAL_InitTick+0xe4>)
 8002416:	f043 0310 	orr.w	r3, r3, #16
 800241a:	6413      	str	r3, [r2, #64]	; 0x40
 800241c:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_InitTick+0xe4>)
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002428:	f107 0210 	add.w	r2, r7, #16
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f004 f90e 	bl	8006654 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d103      	bne.n	800244a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002442:	f004 f8df 	bl	8006604 <HAL_RCC_GetPCLK1Freq>
 8002446:	6378      	str	r0, [r7, #52]	; 0x34
 8002448:	e004      	b.n	8002454 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800244a:	f004 f8db 	bl	8006604 <HAL_RCC_GetPCLK1Freq>
 800244e:	4603      	mov	r3, r0
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002456:	4a23      	ldr	r2, [pc, #140]	; (80024e4 <HAL_InitTick+0xe8>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	0c9b      	lsrs	r3, r3, #18
 800245e:	3b01      	subs	r3, #1
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002462:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_InitTick+0xec>)
 8002464:	4a21      	ldr	r2, [pc, #132]	; (80024ec <HAL_InitTick+0xf0>)
 8002466:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002468:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <HAL_InitTick+0xec>)
 800246a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800246e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002470:	4a1d      	ldr	r2, [pc, #116]	; (80024e8 <HAL_InitTick+0xec>)
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <HAL_InitTick+0xec>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <HAL_InitTick+0xec>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_InitTick+0xec>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002488:	4817      	ldr	r0, [pc, #92]	; (80024e8 <HAL_InitTick+0xec>)
 800248a:	f006 f967 	bl	800875c <HAL_TIM_Base_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002494:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002498:	2b00      	cmp	r3, #0
 800249a:	d11b      	bne.n	80024d4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800249c:	4812      	ldr	r0, [pc, #72]	; (80024e8 <HAL_InitTick+0xec>)
 800249e:	f006 f9ad 	bl	80087fc <HAL_TIM_Base_Start_IT>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80024a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d111      	bne.n	80024d4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024b0:	2036      	movs	r0, #54	; 0x36
 80024b2:	f000 fffd 	bl	80034b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b0f      	cmp	r3, #15
 80024ba:	d808      	bhi.n	80024ce <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80024bc:	2200      	movs	r2, #0
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	2036      	movs	r0, #54	; 0x36
 80024c2:	f000 ffd9 	bl	8003478 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <HAL_InitTick+0xf4>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	e002      	b.n	80024d4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3738      	adds	r7, #56	; 0x38
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	431bde83 	.word	0x431bde83
 80024e8:	2000294c 	.word	0x2000294c
 80024ec:	40001000 	.word	0x40001000
 80024f0:	20000008 	.word	0x20000008

080024f4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <SDTimer_Handler+0x40>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d006      	beq.n	8002510 <SDTimer_Handler+0x1c>
    Timer1--;
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <SDTimer_Handler+0x40>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	b2da      	uxtb	r2, r3
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <SDTimer_Handler+0x40>)
 800250e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <SDTimer_Handler+0x44>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d006      	beq.n	8002528 <SDTimer_Handler+0x34>
    Timer2--;
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <SDTimer_Handler+0x44>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b2da      	uxtb	r2, r3
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <SDTimer_Handler+0x44>)
 8002526:	701a      	strb	r2, [r3, #0]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20002999 	.word	0x20002999
 8002538:	2000299a 	.word	0x2000299a

0800253c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <NMI_Handler+0x4>

08002542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <HardFault_Handler+0x4>

08002548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <MemManage_Handler+0x4>

0800254e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <BusFault_Handler+0x4>

08002554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <UsageFault_Handler+0x4>

0800255a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800256e:	f006 f9b5 	bl	80088dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20002898 	.word	0x20002898

0800257c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <I2C1_EV_IRQHandler+0x10>)
 8002582:	f002 f891 	bl	80046a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20002784 	.word	0x20002784

08002590 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <I2C1_ER_IRQHandler+0x10>)
 8002596:	f002 f9da 	bl	800494e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20002784 	.word	0x20002784

080025a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80025a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025ac:	f001 fcf4 	bl	8003f98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	 FatFsCnt++;
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <TIM6_DAC_IRQHandler+0x30>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	3301      	adds	r3, #1
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <TIM6_DAC_IRQHandler+0x30>)
 80025c4:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80025c6:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <TIM6_DAC_IRQHandler+0x30>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b09      	cmp	r3, #9
 80025ce:	d904      	bls.n	80025da <TIM6_DAC_IRQHandler+0x26>
	  {
	    FatFsCnt = 0;
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <TIM6_DAC_IRQHandler+0x30>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80025d6:	f7ff ff8d 	bl	80024f4 <SDTimer_Handler>
	  }

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025da:	4803      	ldr	r0, [pc, #12]	; (80025e8 <TIM6_DAC_IRQHandler+0x34>)
 80025dc:	f006 f97e 	bl	80088dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20002998 	.word	0x20002998
 80025e8:	2000294c 	.word	0x2000294c

080025ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <DMA2_Stream0_IRQHandler+0x10>)
 80025f2:	f001 f893 	bl	800371c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20002724 	.word	0x20002724

08002600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002630:	f011 fd38 	bl	80140a4 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20020000 	.word	0x20020000
 8002660:	00000800 	.word	0x00000800
 8002664:	2000299c 	.word	0x2000299c
 8002668:	20009fb0 	.word	0x20009fb0

0800266c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <SystemInit+0x20>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <SystemInit+0x20>)
 8002678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800267c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002694:	480d      	ldr	r0, [pc, #52]	; (80026cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002696:	490e      	ldr	r1, [pc, #56]	; (80026d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002698:	4a0e      	ldr	r2, [pc, #56]	; (80026d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800269c:	e002      	b.n	80026a4 <LoopCopyDataInit>

0800269e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a2:	3304      	adds	r3, #4

080026a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a8:	d3f9      	bcc.n	800269e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026aa:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026ac:	4c0b      	ldr	r4, [pc, #44]	; (80026dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b0:	e001      	b.n	80026b6 <LoopFillZerobss>

080026b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b4:	3204      	adds	r2, #4

080026b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b8:	d3fb      	bcc.n	80026b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ba:	f7ff ffd7 	bl	800266c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026be:	f011 fcf7 	bl	80140b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026c2:	f7fe fd2f 	bl	8001124 <main>
  bx  lr    
 80026c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d0:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80026d4:	080187a4 	.word	0x080187a4
  ldr r2, =_sbss
 80026d8:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80026dc:	20009fac 	.word	0x20009fac

080026e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e0:	e7fe      	b.n	80026e0 <ADC_IRQHandler>
	...

080026e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <HAL_Init+0x40>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <HAL_Init+0x40>)
 80026ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_Init+0x40>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <HAL_Init+0x40>)
 80026fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_Init+0x40>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a07      	ldr	r2, [pc, #28]	; (8002724 <HAL_Init+0x40>)
 8002706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800270c:	2003      	movs	r0, #3
 800270e:	f000 fea8 	bl	8003462 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002712:	200f      	movs	r0, #15
 8002714:	f7ff fe72 	bl	80023fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002718:	f7ff fc36 	bl	8001f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023c00 	.word	0x40023c00

08002728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_IncTick+0x20>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_IncTick+0x24>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4413      	add	r3, r2
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <HAL_IncTick+0x24>)
 800273a:	6013      	str	r3, [r2, #0]
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	2000000c 	.word	0x2000000c
 800274c:	200029a0 	.word	0x200029a0

08002750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return uwTick;
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_GetTick+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	200029a0 	.word	0x200029a0

08002768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002770:	f7ff ffee 	bl	8002750 <HAL_GetTick>
 8002774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d005      	beq.n	800278e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002782:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <HAL_Delay+0x44>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800278e:	bf00      	nop
 8002790:	f7ff ffde 	bl	8002750 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	429a      	cmp	r2, r3
 800279e:	d8f7      	bhi.n	8002790 <HAL_Delay+0x28>
  {
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	2000000c 	.word	0x2000000c

080027b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e033      	b.n	800282e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff fc06 	bl	8001fe0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027f6:	f023 0302 	bic.w	r3, r3, #2
 80027fa:	f043 0202 	orr.w	r2, r3, #2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fc02 	bl	800300c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f023 0303 	bic.w	r3, r3, #3
 8002816:	f043 0201 	orr.w	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
 800281e:	e001      	b.n	8002824 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_ADC_Start+0x1a>
 800284e:	2302      	movs	r3, #2
 8002850:	e0b2      	b.n	80029b8 <HAL_ADC_Start+0x180>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d018      	beq.n	800289a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002878:	4b52      	ldr	r3, [pc, #328]	; (80029c4 <HAL_ADC_Start+0x18c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a52      	ldr	r2, [pc, #328]	; (80029c8 <HAL_ADC_Start+0x190>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	0c9a      	lsrs	r2, r3, #18
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800288c:	e002      	b.n	8002894 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3b01      	subs	r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f9      	bne.n	800288e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d17a      	bne.n	800299e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e6:	d106      	bne.n	80028f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	f023 0206 	bic.w	r2, r3, #6
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	645a      	str	r2, [r3, #68]	; 0x44
 80028f4:	e002      	b.n	80028fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002904:	4b31      	ldr	r3, [pc, #196]	; (80029cc <HAL_ADC_Start+0x194>)
 8002906:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002910:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	2b00      	cmp	r3, #0
 800291c:	d12a      	bne.n	8002974 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <HAL_ADC_Start+0x198>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d015      	beq.n	8002954 <HAL_ADC_Start+0x11c>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a29      	ldr	r2, [pc, #164]	; (80029d4 <HAL_ADC_Start+0x19c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d105      	bne.n	800293e <HAL_ADC_Start+0x106>
 8002932:	4b26      	ldr	r3, [pc, #152]	; (80029cc <HAL_ADC_Start+0x194>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <HAL_ADC_Start+0x1a0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d136      	bne.n	80029b6 <HAL_ADC_Start+0x17e>
 8002948:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_ADC_Start+0x194>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d130      	bne.n	80029b6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d129      	bne.n	80029b6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	e020      	b.n	80029b6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <HAL_ADC_Start+0x198>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d11b      	bne.n	80029b6 <HAL_ADC_Start+0x17e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d114      	bne.n	80029b6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e00b      	b.n	80029b6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f043 0210 	orr.w	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f043 0201 	orr.w	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	20000004 	.word	0x20000004
 80029c8:	431bde83 	.word	0x431bde83
 80029cc:	40012300 	.word	0x40012300
 80029d0:	40012000 	.word	0x40012000
 80029d4:	40012100 	.word	0x40012100
 80029d8:	40012200 	.word	0x40012200

080029dc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_Stop+0x16>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e021      	b.n	8002a36 <HAL_ADC_Stop+0x5a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	f043 0201 	orr.w	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a5e:	d113      	bne.n	8002a88 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a6e:	d10b      	bne.n	8002a88 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e063      	b.n	8002b50 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002a88:	f7ff fe62 	bl	8002750 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a8e:	e021      	b.n	8002ad4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a96:	d01d      	beq.n	8002ad4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <HAL_ADC_PollForConversion+0x6c>
 8002a9e:	f7ff fe57 	bl	8002750 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d212      	bcs.n	8002ad4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d00b      	beq.n	8002ad4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f043 0204 	orr.w	r2, r3, #4
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e03d      	b.n	8002b50 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d1d6      	bne.n	8002a90 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0212 	mvn.w	r2, #18
 8002aea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d123      	bne.n	8002b4e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d11f      	bne.n	8002b4e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d111      	bne.n	8002b4e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_Start_DMA+0x1e>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e0e9      	b.n	8002d4a <HAL_ADC_Start_DMA+0x1f2>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d018      	beq.n	8002bbe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b9c:	4b6d      	ldr	r3, [pc, #436]	; (8002d54 <HAL_ADC_Start_DMA+0x1fc>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a6d      	ldr	r2, [pc, #436]	; (8002d58 <HAL_ADC_Start_DMA+0x200>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	0c9a      	lsrs	r2, r3, #18
 8002ba8:	4613      	mov	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bb0:	e002      	b.n	8002bb8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f9      	bne.n	8002bb2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bcc:	d107      	bne.n	8002bde <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	f040 80a1 	bne.w	8002d30 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d007      	beq.n	8002c20 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2c:	d106      	bne.n	8002c3c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f023 0206 	bic.w	r2, r3, #6
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
 8002c3a:	e002      	b.n	8002c42 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c4a:	4b44      	ldr	r3, [pc, #272]	; (8002d5c <HAL_ADC_Start_DMA+0x204>)
 8002c4c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	4a43      	ldr	r2, [pc, #268]	; (8002d60 <HAL_ADC_Start_DMA+0x208>)
 8002c54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	4a42      	ldr	r2, [pc, #264]	; (8002d64 <HAL_ADC_Start_DMA+0x20c>)
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	4a41      	ldr	r2, [pc, #260]	; (8002d68 <HAL_ADC_Start_DMA+0x210>)
 8002c64:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c6e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c7e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c8e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	334c      	adds	r3, #76	; 0x4c
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f000 fcc2 	bl	8003628 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d12a      	bne.n	8002d06 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2d      	ldr	r2, [pc, #180]	; (8002d6c <HAL_ADC_Start_DMA+0x214>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d015      	beq.n	8002ce6 <HAL_ADC_Start_DMA+0x18e>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2c      	ldr	r2, [pc, #176]	; (8002d70 <HAL_ADC_Start_DMA+0x218>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d105      	bne.n	8002cd0 <HAL_ADC_Start_DMA+0x178>
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <HAL_ADC_Start_DMA+0x204>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a27      	ldr	r2, [pc, #156]	; (8002d74 <HAL_ADC_Start_DMA+0x21c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d136      	bne.n	8002d48 <HAL_ADC_Start_DMA+0x1f0>
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_ADC_Start_DMA+0x204>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d130      	bne.n	8002d48 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d129      	bne.n	8002d48 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	e020      	b.n	8002d48 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <HAL_ADC_Start_DMA+0x214>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d11b      	bne.n	8002d48 <HAL_ADC_Start_DMA+0x1f0>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d114      	bne.n	8002d48 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	e00b      	b.n	8002d48 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f043 0210 	orr.w	r2, r3, #16
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000004 	.word	0x20000004
 8002d58:	431bde83 	.word	0x431bde83
 8002d5c:	40012300 	.word	0x40012300
 8002d60:	08003205 	.word	0x08003205
 8002d64:	080032bf 	.word	0x080032bf
 8002d68:	080032db 	.word	0x080032db
 8002d6c:	40012000 	.word	0x40012000
 8002d70:	40012100 	.word	0x40012100
 8002d74:	40012200 	.word	0x40012200

08002d78 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1c>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e113      	b.n	8002fec <HAL_ADC_ConfigChannel+0x244>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b09      	cmp	r3, #9
 8002dd2:	d925      	bls.n	8002e20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68d9      	ldr	r1, [r3, #12]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	3b1e      	subs	r3, #30
 8002dea:	2207      	movs	r2, #7
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43da      	mvns	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	400a      	ands	r2, r1
 8002df8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68d9      	ldr	r1, [r3, #12]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4403      	add	r3, r0
 8002e12:	3b1e      	subs	r3, #30
 8002e14:	409a      	lsls	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	e022      	b.n	8002e66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6919      	ldr	r1, [r3, #16]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	2207      	movs	r2, #7
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	400a      	ands	r2, r1
 8002e42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6919      	ldr	r1, [r3, #16]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4618      	mov	r0, r3
 8002e56:	4603      	mov	r3, r0
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4403      	add	r3, r0
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d824      	bhi.n	8002eb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3b05      	subs	r3, #5
 8002e80:	221f      	movs	r2, #31
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3b05      	subs	r3, #5
 8002eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002eb6:	e04c      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d824      	bhi.n	8002f0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	3b23      	subs	r3, #35	; 0x23
 8002ed2:	221f      	movs	r2, #31
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	400a      	ands	r2, r1
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	3b23      	subs	r3, #35	; 0x23
 8002efc:	fa00 f203 	lsl.w	r2, r0, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
 8002f08:	e023      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	3b41      	subs	r3, #65	; 0x41
 8002f1c:	221f      	movs	r2, #31
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	400a      	ands	r2, r1
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	3b41      	subs	r3, #65	; 0x41
 8002f46:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f52:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <HAL_ADC_ConfigChannel+0x250>)
 8002f54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a28      	ldr	r2, [pc, #160]	; (8002ffc <HAL_ADC_ConfigChannel+0x254>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d10f      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1d8>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b12      	cmp	r3, #18
 8002f66:	d10b      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <HAL_ADC_ConfigChannel+0x254>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d12b      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x23a>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1c      	ldr	r2, [pc, #112]	; (8003000 <HAL_ADC_ConfigChannel+0x258>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <HAL_ADC_ConfigChannel+0x1f4>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b11      	cmp	r3, #17
 8002f9a:	d122      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a11      	ldr	r2, [pc, #68]	; (8003000 <HAL_ADC_ConfigChannel+0x258>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d111      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fbe:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_ADC_ConfigChannel+0x25c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a11      	ldr	r2, [pc, #68]	; (8003008 <HAL_ADC_ConfigChannel+0x260>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	0c9a      	lsrs	r2, r3, #18
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fd4:	e002      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f9      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40012300 	.word	0x40012300
 8002ffc:	40012000 	.word	0x40012000
 8003000:	10000012 	.word	0x10000012
 8003004:	20000004 	.word	0x20000004
 8003008:	431bde83 	.word	0x431bde83

0800300c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003014:	4b79      	ldr	r3, [pc, #484]	; (80031fc <ADC_Init+0x1f0>)
 8003016:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	431a      	orrs	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003040:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	021a      	lsls	r2, r3, #8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003064:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6899      	ldr	r1, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	4a58      	ldr	r2, [pc, #352]	; (8003200 <ADC_Init+0x1f4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d022      	beq.n	80030ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6899      	ldr	r1, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6899      	ldr	r1, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	e00f      	b.n	800310a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003108:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0202 	bic.w	r2, r2, #2
 8003118:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6899      	ldr	r1, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7e1b      	ldrb	r3, [r3, #24]
 8003124:	005a      	lsls	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01b      	beq.n	8003170 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003146:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003156:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	3b01      	subs	r3, #1
 8003164:	035a      	lsls	r2, r3, #13
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	e007      	b.n	8003180 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800317e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	3b01      	subs	r3, #1
 800319c:	051a      	lsls	r2, r3, #20
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031c2:	025a      	lsls	r2, r3, #9
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6899      	ldr	r1, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	029a      	lsls	r2, r3, #10
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	40012300 	.word	0x40012300
 8003200:	0f000001 	.word	0x0f000001

08003204 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800321a:	2b00      	cmp	r3, #0
 800321c:	d13c      	bne.n	8003298 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d12b      	bne.n	8003290 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800323c:	2b00      	cmp	r3, #0
 800323e:	d127      	bne.n	8003290 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800324a:	2b00      	cmp	r3, #0
 800324c:	d006      	beq.n	800325c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003258:	2b00      	cmp	r3, #0
 800325a:	d119      	bne.n	8003290 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0220 	bic.w	r2, r2, #32
 800326a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7fe fe07 	bl	8001ea4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003296:	e00e      	b.n	80032b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7ff fd74 	bl	8002d92 <HAL_ADC_ErrorCallback>
}
 80032aa:	e004      	b.n	80032b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	4798      	blx	r3
}
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7fe fddb 	bl	8001e88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2240      	movs	r2, #64	; 0x40
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f043 0204 	orr.w	r2, r3, #4
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f7ff fd49 	bl	8002d92 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <__NVIC_SetPriorityGrouping+0x44>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003324:	4013      	ands	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800333a:	4a04      	ldr	r2, [pc, #16]	; (800334c <__NVIC_SetPriorityGrouping+0x44>)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	60d3      	str	r3, [r2, #12]
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <__NVIC_GetPriorityGrouping+0x18>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	0a1b      	lsrs	r3, r3, #8
 800335a:	f003 0307 	and.w	r3, r3, #7
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	2b00      	cmp	r3, #0
 800337c:	db0b      	blt.n	8003396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	f003 021f 	and.w	r2, r3, #31
 8003384:	4907      	ldr	r1, [pc, #28]	; (80033a4 <__NVIC_EnableIRQ+0x38>)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2001      	movs	r0, #1
 800338e:	fa00 f202 	lsl.w	r2, r0, r2
 8003392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000e100 	.word	0xe000e100

080033a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	6039      	str	r1, [r7, #0]
 80033b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	db0a      	blt.n	80033d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	490c      	ldr	r1, [pc, #48]	; (80033f4 <__NVIC_SetPriority+0x4c>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	0112      	lsls	r2, r2, #4
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	440b      	add	r3, r1
 80033cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d0:	e00a      	b.n	80033e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4908      	ldr	r1, [pc, #32]	; (80033f8 <__NVIC_SetPriority+0x50>)
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	3b04      	subs	r3, #4
 80033e0:	0112      	lsls	r2, r2, #4
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	440b      	add	r3, r1
 80033e6:	761a      	strb	r2, [r3, #24]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000e100 	.word	0xe000e100
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b089      	sub	sp, #36	; 0x24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f1c3 0307 	rsb	r3, r3, #7
 8003416:	2b04      	cmp	r3, #4
 8003418:	bf28      	it	cs
 800341a:	2304      	movcs	r3, #4
 800341c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3304      	adds	r3, #4
 8003422:	2b06      	cmp	r3, #6
 8003424:	d902      	bls.n	800342c <NVIC_EncodePriority+0x30>
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3b03      	subs	r3, #3
 800342a:	e000      	b.n	800342e <NVIC_EncodePriority+0x32>
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003430:	f04f 32ff 	mov.w	r2, #4294967295
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43da      	mvns	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	401a      	ands	r2, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003444:	f04f 31ff 	mov.w	r1, #4294967295
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	43d9      	mvns	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003454:	4313      	orrs	r3, r2
         );
}
 8003456:	4618      	mov	r0, r3
 8003458:	3724      	adds	r7, #36	; 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff ff4c 	bl	8003308 <__NVIC_SetPriorityGrouping>
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800348a:	f7ff ff61 	bl	8003350 <__NVIC_GetPriorityGrouping>
 800348e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	6978      	ldr	r0, [r7, #20]
 8003496:	f7ff ffb1 	bl	80033fc <NVIC_EncodePriority>
 800349a:	4602      	mov	r2, r0
 800349c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff ff80 	bl	80033a8 <__NVIC_SetPriority>
}
 80034a8:	bf00      	nop
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff ff54 	bl	800336c <__NVIC_EnableIRQ>
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034d8:	f7ff f93a 	bl	8002750 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e099      	b.n	800361c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003508:	e00f      	b.n	800352a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800350a:	f7ff f921 	bl	8002750 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b05      	cmp	r3, #5
 8003516:	d908      	bls.n	800352a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2203      	movs	r2, #3
 8003522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e078      	b.n	800361c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1e8      	bne.n	800350a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4b38      	ldr	r3, [pc, #224]	; (8003624 <HAL_DMA_Init+0x158>)
 8003544:	4013      	ands	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003556:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003562:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	2b04      	cmp	r3, #4
 8003582:	d107      	bne.n	8003594 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	4313      	orrs	r3, r2
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f023 0307 	bic.w	r3, r3, #7
 80035aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d117      	bne.n	80035ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00e      	beq.n	80035ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fa9f 	bl	8003b14 <DMA_CheckFifoParam>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2240      	movs	r2, #64	; 0x40
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035ea:	2301      	movs	r3, #1
 80035ec:	e016      	b.n	800361c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fa56 	bl	8003aa8 <DMA_CalcBaseAndBitshift>
 80035fc:	4603      	mov	r3, r0
 80035fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003604:	223f      	movs	r2, #63	; 0x3f
 8003606:	409a      	lsls	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	f010803f 	.word	0xf010803f

08003628 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_DMA_Start_IT+0x26>
 800364a:	2302      	movs	r3, #2
 800364c:	e040      	b.n	80036d0 <HAL_DMA_Start_IT+0xa8>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	d12f      	bne.n	80036c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2202      	movs	r2, #2
 8003666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f9e8 	bl	8003a4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	223f      	movs	r2, #63	; 0x3f
 8003682:	409a      	lsls	r2, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0216 	orr.w	r2, r2, #22
 8003696:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0208 	orr.w	r2, r2, #8
 80036ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e005      	b.n	80036ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036ca:	2302      	movs	r3, #2
 80036cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d004      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e00c      	b.n	8003710 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2205      	movs	r2, #5
 80036fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003728:	4b8e      	ldr	r3, [pc, #568]	; (8003964 <HAL_DMA_IRQHandler+0x248>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a8e      	ldr	r2, [pc, #568]	; (8003968 <HAL_DMA_IRQHandler+0x24c>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	0a9b      	lsrs	r3, r3, #10
 8003734:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003746:	2208      	movs	r2, #8
 8003748:	409a      	lsls	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01a      	beq.n	8003788 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0204 	bic.w	r2, r2, #4
 800376e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	2208      	movs	r2, #8
 8003776:	409a      	lsls	r2, r3
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	f043 0201 	orr.w	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378c:	2201      	movs	r2, #1
 800378e:	409a      	lsls	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4013      	ands	r3, r2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d012      	beq.n	80037be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	2201      	movs	r2, #1
 80037ac:	409a      	lsls	r2, r3
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	f043 0202 	orr.w	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	2204      	movs	r2, #4
 80037c4:	409a      	lsls	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d012      	beq.n	80037f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	2204      	movs	r2, #4
 80037e2:	409a      	lsls	r2, r3
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	f043 0204 	orr.w	r2, r3, #4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	2210      	movs	r2, #16
 80037fa:	409a      	lsls	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d043      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03c      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	2210      	movs	r2, #16
 8003818:	409a      	lsls	r2, r3
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d018      	beq.n	800385e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d108      	bne.n	800384c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d024      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4798      	blx	r3
 800384a:	e01f      	b.n	800388c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01b      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
 800385c:	e016      	b.n	800388c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0208 	bic.w	r2, r2, #8
 800387a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003890:	2220      	movs	r2, #32
 8003892:	409a      	lsls	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 808f 	beq.w	80039bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8087 	beq.w	80039bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	2220      	movs	r2, #32
 80038b4:	409a      	lsls	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d136      	bne.n	8003934 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0216 	bic.w	r2, r2, #22
 80038d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <HAL_DMA_IRQHandler+0x1da>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0208 	bic.w	r2, r2, #8
 8003904:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390a:	223f      	movs	r2, #63	; 0x3f
 800390c:	409a      	lsls	r2, r3
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003926:	2b00      	cmp	r3, #0
 8003928:	d07e      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
        }
        return;
 8003932:	e079      	b.n	8003a28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d01d      	beq.n	800397e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10d      	bne.n	800396c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	2b00      	cmp	r3, #0
 8003956:	d031      	beq.n	80039bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
 8003960:	e02c      	b.n	80039bc <HAL_DMA_IRQHandler+0x2a0>
 8003962:	bf00      	nop
 8003964:	20000004 	.word	0x20000004
 8003968:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d023      	beq.n	80039bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4798      	blx	r3
 800397c:	e01e      	b.n	80039bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10f      	bne.n	80039ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0210 	bic.w	r2, r2, #16
 800399a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d032      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d022      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2205      	movs	r2, #5
 80039d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	3301      	adds	r3, #1
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d307      	bcc.n	8003a04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f2      	bne.n	80039e8 <HAL_DMA_IRQHandler+0x2cc>
 8003a02:	e000      	b.n	8003a06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
 8003a26:	e000      	b.n	8003a2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a28:	bf00      	nop
    }
  }
}
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a3e:	b2db      	uxtb	r3, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d108      	bne.n	8003a8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a8a:	e007      	b.n	8003a9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	60da      	str	r2, [r3, #12]
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	3b10      	subs	r3, #16
 8003ab8:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <DMA_CalcBaseAndBitshift+0x64>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ac2:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <DMA_CalcBaseAndBitshift+0x68>)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d909      	bls.n	8003aea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	1d1a      	adds	r2, r3, #4
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ae8:	e007      	b.n	8003afa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	aaaaaaab 	.word	0xaaaaaaab
 8003b10:	08016514 	.word	0x08016514

08003b14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d11f      	bne.n	8003b6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d856      	bhi.n	8003be2 <DMA_CheckFifoParam+0xce>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <DMA_CheckFifoParam+0x28>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	08003b5f 	.word	0x08003b5f
 8003b44:	08003b4d 	.word	0x08003b4d
 8003b48:	08003be3 	.word	0x08003be3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d046      	beq.n	8003be6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b5c:	e043      	b.n	8003be6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b66:	d140      	bne.n	8003bea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b6c:	e03d      	b.n	8003bea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b76:	d121      	bne.n	8003bbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d837      	bhi.n	8003bee <DMA_CheckFifoParam+0xda>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <DMA_CheckFifoParam+0x70>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003b9b 	.word	0x08003b9b
 8003b8c:	08003b95 	.word	0x08003b95
 8003b90:	08003bad 	.word	0x08003bad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      break;
 8003b98:	e030      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d025      	beq.n	8003bf2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003baa:	e022      	b.n	8003bf2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bb4:	d11f      	bne.n	8003bf6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bba:	e01c      	b.n	8003bf6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d903      	bls.n	8003bca <DMA_CheckFifoParam+0xb6>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d003      	beq.n	8003bd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bc8:	e018      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bce:	e015      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00e      	beq.n	8003bfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      break;
 8003be0:	e00b      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;
 8003be2:	bf00      	nop
 8003be4:	e00a      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003be6:	bf00      	nop
 8003be8:	e008      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003bea:	bf00      	nop
 8003bec:	e006      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003bee:	bf00      	nop
 8003bf0:	e004      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e002      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;   
 8003bf6:	bf00      	nop
 8003bf8:	e000      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003bfa:	bf00      	nop
    }
  } 
  
  return status; 
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop

08003c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	e165      	b.n	8003ef4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c28:	2201      	movs	r2, #1
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	f040 8154 	bne.w	8003eee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d005      	beq.n	8003c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d130      	bne.n	8003cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	2203      	movs	r2, #3
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c94:	2201      	movs	r2, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 0201 	and.w	r2, r3, #1
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d017      	beq.n	8003cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d123      	bne.n	8003d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	08da      	lsrs	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3208      	adds	r2, #8
 8003d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	220f      	movs	r2, #15
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	08da      	lsrs	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3208      	adds	r2, #8
 8003d4a:	69b9      	ldr	r1, [r7, #24]
 8003d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0203 	and.w	r2, r3, #3
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80ae 	beq.w	8003eee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	4b5d      	ldr	r3, [pc, #372]	; (8003f0c <HAL_GPIO_Init+0x300>)
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	4a5c      	ldr	r2, [pc, #368]	; (8003f0c <HAL_GPIO_Init+0x300>)
 8003d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003da0:	6453      	str	r3, [r2, #68]	; 0x44
 8003da2:	4b5a      	ldr	r3, [pc, #360]	; (8003f0c <HAL_GPIO_Init+0x300>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dae:	4a58      	ldr	r2, [pc, #352]	; (8003f10 <HAL_GPIO_Init+0x304>)
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	089b      	lsrs	r3, r3, #2
 8003db4:	3302      	adds	r3, #2
 8003db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	220f      	movs	r2, #15
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a4f      	ldr	r2, [pc, #316]	; (8003f14 <HAL_GPIO_Init+0x308>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d025      	beq.n	8003e26 <HAL_GPIO_Init+0x21a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a4e      	ldr	r2, [pc, #312]	; (8003f18 <HAL_GPIO_Init+0x30c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01f      	beq.n	8003e22 <HAL_GPIO_Init+0x216>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a4d      	ldr	r2, [pc, #308]	; (8003f1c <HAL_GPIO_Init+0x310>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d019      	beq.n	8003e1e <HAL_GPIO_Init+0x212>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a4c      	ldr	r2, [pc, #304]	; (8003f20 <HAL_GPIO_Init+0x314>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_GPIO_Init+0x20e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a4b      	ldr	r2, [pc, #300]	; (8003f24 <HAL_GPIO_Init+0x318>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00d      	beq.n	8003e16 <HAL_GPIO_Init+0x20a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a4a      	ldr	r2, [pc, #296]	; (8003f28 <HAL_GPIO_Init+0x31c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d007      	beq.n	8003e12 <HAL_GPIO_Init+0x206>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a49      	ldr	r2, [pc, #292]	; (8003f2c <HAL_GPIO_Init+0x320>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_GPIO_Init+0x202>
 8003e0a:	2306      	movs	r3, #6
 8003e0c:	e00c      	b.n	8003e28 <HAL_GPIO_Init+0x21c>
 8003e0e:	2307      	movs	r3, #7
 8003e10:	e00a      	b.n	8003e28 <HAL_GPIO_Init+0x21c>
 8003e12:	2305      	movs	r3, #5
 8003e14:	e008      	b.n	8003e28 <HAL_GPIO_Init+0x21c>
 8003e16:	2304      	movs	r3, #4
 8003e18:	e006      	b.n	8003e28 <HAL_GPIO_Init+0x21c>
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e004      	b.n	8003e28 <HAL_GPIO_Init+0x21c>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e002      	b.n	8003e28 <HAL_GPIO_Init+0x21c>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <HAL_GPIO_Init+0x21c>
 8003e26:	2300      	movs	r3, #0
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	f002 0203 	and.w	r2, r2, #3
 8003e2e:	0092      	lsls	r2, r2, #2
 8003e30:	4093      	lsls	r3, r2
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e38:	4935      	ldr	r1, [pc, #212]	; (8003f10 <HAL_GPIO_Init+0x304>)
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	3302      	adds	r3, #2
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e46:	4b3a      	ldr	r3, [pc, #232]	; (8003f30 <HAL_GPIO_Init+0x324>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e6a:	4a31      	ldr	r2, [pc, #196]	; (8003f30 <HAL_GPIO_Init+0x324>)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e70:	4b2f      	ldr	r3, [pc, #188]	; (8003f30 <HAL_GPIO_Init+0x324>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e94:	4a26      	ldr	r2, [pc, #152]	; (8003f30 <HAL_GPIO_Init+0x324>)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e9a:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <HAL_GPIO_Init+0x324>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ebe:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <HAL_GPIO_Init+0x324>)
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ec4:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <HAL_GPIO_Init+0x324>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ee8:	4a11      	ldr	r2, [pc, #68]	; (8003f30 <HAL_GPIO_Init+0x324>)
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	61fb      	str	r3, [r7, #28]
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	2b0f      	cmp	r3, #15
 8003ef8:	f67f ae96 	bls.w	8003c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	3724      	adds	r7, #36	; 0x24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40013800 	.word	0x40013800
 8003f14:	40020000 	.word	0x40020000
 8003f18:	40020400 	.word	0x40020400
 8003f1c:	40020800 	.word	0x40020800
 8003f20:	40020c00 	.word	0x40020c00
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40021400 	.word	0x40021400
 8003f2c:	40021800 	.word	0x40021800
 8003f30:	40013c00 	.word	0x40013c00

08003f34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	887b      	ldrh	r3, [r7, #2]
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
 8003f50:	e001      	b.n	8003f56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f52:	2300      	movs	r3, #0
 8003f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	807b      	strh	r3, [r7, #2]
 8003f70:	4613      	mov	r3, r2
 8003f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f74:	787b      	ldrb	r3, [r7, #1]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f7a:	887a      	ldrh	r2, [r7, #2]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f80:	e003      	b.n	8003f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f82:	887b      	ldrh	r3, [r7, #2]
 8003f84:	041a      	lsls	r2, r3, #16
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	619a      	str	r2, [r3, #24]
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fa2:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d006      	beq.n	8003fbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fae:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd ff82 	bl	8001ec0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40013c00 	.word	0x40013c00

08003fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e12b      	b.n	8004232 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fe f884 	bl	80020fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800401a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800402a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800402c:	f002 faea 	bl	8006604 <HAL_RCC_GetPCLK1Freq>
 8004030:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	4a81      	ldr	r2, [pc, #516]	; (800423c <HAL_I2C_Init+0x274>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d807      	bhi.n	800404c <HAL_I2C_Init+0x84>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4a80      	ldr	r2, [pc, #512]	; (8004240 <HAL_I2C_Init+0x278>)
 8004040:	4293      	cmp	r3, r2
 8004042:	bf94      	ite	ls
 8004044:	2301      	movls	r3, #1
 8004046:	2300      	movhi	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	e006      	b.n	800405a <HAL_I2C_Init+0x92>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4a7d      	ldr	r2, [pc, #500]	; (8004244 <HAL_I2C_Init+0x27c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	bf94      	ite	ls
 8004054:	2301      	movls	r3, #1
 8004056:	2300      	movhi	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e0e7      	b.n	8004232 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4a78      	ldr	r2, [pc, #480]	; (8004248 <HAL_I2C_Init+0x280>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	0c9b      	lsrs	r3, r3, #18
 800406c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4a6a      	ldr	r2, [pc, #424]	; (800423c <HAL_I2C_Init+0x274>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d802      	bhi.n	800409c <HAL_I2C_Init+0xd4>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	3301      	adds	r3, #1
 800409a:	e009      	b.n	80040b0 <HAL_I2C_Init+0xe8>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	4a69      	ldr	r2, [pc, #420]	; (800424c <HAL_I2C_Init+0x284>)
 80040a8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ac:	099b      	lsrs	r3, r3, #6
 80040ae:	3301      	adds	r3, #1
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	495c      	ldr	r1, [pc, #368]	; (800423c <HAL_I2C_Init+0x274>)
 80040cc:	428b      	cmp	r3, r1
 80040ce:	d819      	bhi.n	8004104 <HAL_I2C_Init+0x13c>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1e59      	subs	r1, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	fbb1 f3f3 	udiv	r3, r1, r3
 80040de:	1c59      	adds	r1, r3, #1
 80040e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040e4:	400b      	ands	r3, r1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_I2C_Init+0x138>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1e59      	subs	r1, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80040f8:	3301      	adds	r3, #1
 80040fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fe:	e051      	b.n	80041a4 <HAL_I2C_Init+0x1dc>
 8004100:	2304      	movs	r3, #4
 8004102:	e04f      	b.n	80041a4 <HAL_I2C_Init+0x1dc>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d111      	bne.n	8004130 <HAL_I2C_Init+0x168>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1e58      	subs	r0, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	440b      	add	r3, r1
 800411a:	fbb0 f3f3 	udiv	r3, r0, r3
 800411e:	3301      	adds	r3, #1
 8004120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e012      	b.n	8004156 <HAL_I2C_Init+0x18e>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1e58      	subs	r0, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6859      	ldr	r1, [r3, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	0099      	lsls	r1, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	fbb0 f3f3 	udiv	r3, r0, r3
 8004146:	3301      	adds	r3, #1
 8004148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_I2C_Init+0x196>
 800415a:	2301      	movs	r3, #1
 800415c:	e022      	b.n	80041a4 <HAL_I2C_Init+0x1dc>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10e      	bne.n	8004184 <HAL_I2C_Init+0x1bc>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1e58      	subs	r0, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6859      	ldr	r1, [r3, #4]
 800416e:	460b      	mov	r3, r1
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	440b      	add	r3, r1
 8004174:	fbb0 f3f3 	udiv	r3, r0, r3
 8004178:	3301      	adds	r3, #1
 800417a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800417e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004182:	e00f      	b.n	80041a4 <HAL_I2C_Init+0x1dc>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1e58      	subs	r0, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6859      	ldr	r1, [r3, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	0099      	lsls	r1, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	fbb0 f3f3 	udiv	r3, r0, r3
 800419a:	3301      	adds	r3, #1
 800419c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	6809      	ldr	r1, [r1, #0]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6911      	ldr	r1, [r2, #16]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68d2      	ldr	r2, [r2, #12]
 80041de:	4311      	orrs	r1, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	000186a0 	.word	0x000186a0
 8004240:	001e847f 	.word	0x001e847f
 8004244:	003d08ff 	.word	0x003d08ff
 8004248:	431bde83 	.word	0x431bde83
 800424c:	10624dd3 	.word	0x10624dd3

08004250 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	461a      	mov	r2, r3
 800425c:	460b      	mov	r3, r1
 800425e:	817b      	strh	r3, [r7, #10]
 8004260:	4613      	mov	r3, r2
 8004262:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004264:	f7fe fa74 	bl	8002750 <HAL_GetTick>
 8004268:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b20      	cmp	r3, #32
 8004274:	f040 80e0 	bne.w	8004438 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	2319      	movs	r3, #25
 800427e:	2201      	movs	r2, #1
 8004280:	4970      	ldr	r1, [pc, #448]	; (8004444 <HAL_I2C_Master_Transmit+0x1f4>)
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f001 fef8 	bl	8006078 <I2C_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800428e:	2302      	movs	r3, #2
 8004290:	e0d3      	b.n	800443a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_I2C_Master_Transmit+0x50>
 800429c:	2302      	movs	r3, #2
 800429e:	e0cc      	b.n	800443a <HAL_I2C_Master_Transmit+0x1ea>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d007      	beq.n	80042c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0201 	orr.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2221      	movs	r2, #33	; 0x21
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2210      	movs	r2, #16
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	893a      	ldrh	r2, [r7, #8]
 80042f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4a50      	ldr	r2, [pc, #320]	; (8004448 <HAL_I2C_Master_Transmit+0x1f8>)
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004308:	8979      	ldrh	r1, [r7, #10]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	6a3a      	ldr	r2, [r7, #32]
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f001 fd88 	bl	8005e24 <I2C_MasterRequestWrite>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e08d      	b.n	800443a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004334:	e066      	b.n	8004404 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	6a39      	ldr	r1, [r7, #32]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f001 ff72 	bl	8006224 <I2C_WaitOnTXEFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00d      	beq.n	8004362 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	2b04      	cmp	r3, #4
 800434c:	d107      	bne.n	800435e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e06b      	b.n	800443a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b04      	cmp	r3, #4
 800439e:	d11b      	bne.n	80043d8 <HAL_I2C_Master_Transmit+0x188>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d017      	beq.n	80043d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	781a      	ldrb	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	6a39      	ldr	r1, [r7, #32]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f001 ff62 	bl	80062a6 <I2C_WaitOnBTFFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00d      	beq.n	8004404 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d107      	bne.n	8004400 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e01a      	b.n	800443a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004408:	2b00      	cmp	r3, #0
 800440a:	d194      	bne.n	8004336 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	e000      	b.n	800443a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004438:	2302      	movs	r3, #2
  }
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	00100002 	.word	0x00100002
 8004448:	ffff0000 	.word	0xffff0000

0800444c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	460b      	mov	r3, r1
 800445a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800445c:	f7fe f978 	bl	8002750 <HAL_GetTick>
 8004460:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b20      	cmp	r3, #32
 8004470:	f040 8111 	bne.w	8004696 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	2319      	movs	r3, #25
 800447a:	2201      	movs	r2, #1
 800447c:	4988      	ldr	r1, [pc, #544]	; (80046a0 <HAL_I2C_IsDeviceReady+0x254>)
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f001 fdfa 	bl	8006078 <I2C_WaitOnFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800448a:	2302      	movs	r3, #2
 800448c:	e104      	b.n	8004698 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_I2C_IsDeviceReady+0x50>
 8004498:	2302      	movs	r3, #2
 800449a:	e0fd      	b.n	8004698 <HAL_I2C_IsDeviceReady+0x24c>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d007      	beq.n	80044c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0201 	orr.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2224      	movs	r2, #36	; 0x24
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a70      	ldr	r2, [pc, #448]	; (80046a4 <HAL_I2C_IsDeviceReady+0x258>)
 80044e4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f001 fdb8 	bl	8006078 <I2C_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800451c:	d103      	bne.n	8004526 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e0b6      	b.n	8004698 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800452a:	897b      	ldrh	r3, [r7, #10]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	461a      	mov	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004538:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800453a:	f7fe f909 	bl	8002750 <HAL_GetTick>
 800453e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b02      	cmp	r3, #2
 800454c:	bf0c      	ite	eq
 800454e:	2301      	moveq	r3, #1
 8004550:	2300      	movne	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004564:	bf0c      	ite	eq
 8004566:	2301      	moveq	r3, #1
 8004568:	2300      	movne	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800456e:	e025      	b.n	80045bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004570:	f7fe f8ee 	bl	8002750 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d302      	bcc.n	8004586 <HAL_I2C_IsDeviceReady+0x13a>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d103      	bne.n	800458e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	22a0      	movs	r2, #160	; 0xa0
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b02      	cmp	r3, #2
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2ba0      	cmp	r3, #160	; 0xa0
 80045c6:	d005      	beq.n	80045d4 <HAL_I2C_IsDeviceReady+0x188>
 80045c8:	7dfb      	ldrb	r3, [r7, #23]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d102      	bne.n	80045d4 <HAL_I2C_IsDeviceReady+0x188>
 80045ce:	7dbb      	ldrb	r3, [r7, #22]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0cd      	beq.n	8004570 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d129      	bne.n	800463e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	2319      	movs	r3, #25
 8004616:	2201      	movs	r2, #1
 8004618:	4921      	ldr	r1, [pc, #132]	; (80046a0 <HAL_I2C_IsDeviceReady+0x254>)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f001 fd2c 	bl	8006078 <I2C_WaitOnFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e036      	b.n	8004698 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	e02c      	b.n	8004698 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004656:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2319      	movs	r3, #25
 800465e:	2201      	movs	r2, #1
 8004660:	490f      	ldr	r1, [pc, #60]	; (80046a0 <HAL_I2C_IsDeviceReady+0x254>)
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f001 fd08 	bl	8006078 <I2C_WaitOnFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e012      	b.n	8004698 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	3301      	adds	r3, #1
 8004676:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	429a      	cmp	r2, r3
 800467e:	f4ff af32 	bcc.w	80044e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004696:	2302      	movs	r3, #2
  }
}
 8004698:	4618      	mov	r0, r3
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	00100002 	.word	0x00100002
 80046a4:	ffff0000 	.word	0xffff0000

080046a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d003      	beq.n	80046e0 <HAL_I2C_EV_IRQHandler+0x38>
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b40      	cmp	r3, #64	; 0x40
 80046dc:	f040 80b1 	bne.w	8004842 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10d      	bne.n	8004716 <HAL_I2C_EV_IRQHandler+0x6e>
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004700:	d003      	beq.n	800470a <HAL_I2C_EV_IRQHandler+0x62>
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004708:	d101      	bne.n	800470e <HAL_I2C_EV_IRQHandler+0x66>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <HAL_I2C_EV_IRQHandler+0x68>
 800470e:	2300      	movs	r3, #0
 8004710:	2b01      	cmp	r3, #1
 8004712:	f000 8114 	beq.w	800493e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00b      	beq.n	8004738 <HAL_I2C_EV_IRQHandler+0x90>
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004726:	2b00      	cmp	r3, #0
 8004728:	d006      	beq.n	8004738 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f001 fe5d 	bl	80063ea <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fd5e 	bl	80051f2 <I2C_Master_SB>
 8004736:	e083      	b.n	8004840 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <HAL_I2C_EV_IRQHandler+0xac>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fdd6 	bl	80052fe <I2C_Master_ADD10>
 8004752:	e075      	b.n	8004840 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d008      	beq.n	8004770 <HAL_I2C_EV_IRQHandler+0xc8>
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fdf2 	bl	8005352 <I2C_Master_ADDR>
 800476e:	e067      	b.n	8004840 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d036      	beq.n	80047e8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004788:	f000 80db 	beq.w	8004942 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00d      	beq.n	80047b2 <HAL_I2C_EV_IRQHandler+0x10a>
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_I2C_EV_IRQHandler+0x10a>
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d103      	bne.n	80047b2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f9d6 	bl	8004b5c <I2C_MasterTransmit_TXE>
 80047b0:	e046      	b.n	8004840 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80c2 	beq.w	8004942 <HAL_I2C_EV_IRQHandler+0x29a>
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80bc 	beq.w	8004942 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047ca:	7bbb      	ldrb	r3, [r7, #14]
 80047cc:	2b21      	cmp	r3, #33	; 0x21
 80047ce:	d103      	bne.n	80047d8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fa5f 	bl	8004c94 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047d6:	e0b4      	b.n	8004942 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b40      	cmp	r3, #64	; 0x40
 80047dc:	f040 80b1 	bne.w	8004942 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 facd 	bl	8004d80 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047e6:	e0ac      	b.n	8004942 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f6:	f000 80a4 	beq.w	8004942 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00d      	beq.n	8004820 <HAL_I2C_EV_IRQHandler+0x178>
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_I2C_EV_IRQHandler+0x178>
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d103      	bne.n	8004820 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fb45 	bl	8004ea8 <I2C_MasterReceive_RXNE>
 800481e:	e00f      	b.n	8004840 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 808b 	beq.w	8004942 <HAL_I2C_EV_IRQHandler+0x29a>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 8085 	beq.w	8004942 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fbf0 	bl	800501e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800483e:	e080      	b.n	8004942 <HAL_I2C_EV_IRQHandler+0x29a>
 8004840:	e07f      	b.n	8004942 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d004      	beq.n	8004854 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	e007      	b.n	8004864 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d011      	beq.n	8004892 <HAL_I2C_EV_IRQHandler+0x1ea>
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00c      	beq.n	8004892 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004888:	69b9      	ldr	r1, [r7, #24]
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 ffb0 	bl	80057f0 <I2C_Slave_ADDR>
 8004890:	e05a      	b.n	8004948 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_I2C_EV_IRQHandler+0x206>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 ffea 	bl	8005880 <I2C_Slave_STOPF>
 80048ac:	e04c      	b.n	8004948 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048ae:	7bbb      	ldrb	r3, [r7, #14]
 80048b0:	2b21      	cmp	r3, #33	; 0x21
 80048b2:	d002      	beq.n	80048ba <HAL_I2C_EV_IRQHandler+0x212>
 80048b4:	7bbb      	ldrb	r3, [r7, #14]
 80048b6:	2b29      	cmp	r3, #41	; 0x29
 80048b8:	d120      	bne.n	80048fc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00d      	beq.n	80048e0 <HAL_I2C_EV_IRQHandler+0x238>
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d008      	beq.n	80048e0 <HAL_I2C_EV_IRQHandler+0x238>
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d103      	bne.n	80048e0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fecb 	bl	8005674 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048de:	e032      	b.n	8004946 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d02d      	beq.n	8004946 <HAL_I2C_EV_IRQHandler+0x29e>
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d028      	beq.n	8004946 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fefa 	bl	80056ee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048fa:	e024      	b.n	8004946 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00d      	beq.n	8004922 <HAL_I2C_EV_IRQHandler+0x27a>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_I2C_EV_IRQHandler+0x27a>
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d103      	bne.n	8004922 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 ff08 	bl	8005730 <I2C_SlaveReceive_RXNE>
 8004920:	e012      	b.n	8004948 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00d      	beq.n	8004948 <HAL_I2C_EV_IRQHandler+0x2a0>
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004932:	2b00      	cmp	r3, #0
 8004934:	d008      	beq.n	8004948 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 ff38 	bl	80057ac <I2C_SlaveReceive_BTF>
 800493c:	e004      	b.n	8004948 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800493e:	bf00      	nop
 8004940:	e002      	b.n	8004948 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004942:	bf00      	nop
 8004944:	e000      	b.n	8004948 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004946:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004948:	3720      	adds	r7, #32
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b08a      	sub	sp, #40	; 0x28
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004966:	2300      	movs	r3, #0
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004970:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00d      	beq.n	8004998 <HAL_I2C_ER_IRQHandler+0x4a>
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	f043 0301 	orr.w	r3, r3, #1
 800498c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004996:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00d      	beq.n	80049be <HAL_I2C_ER_IRQHandler+0x70>
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	f043 0302 	orr.w	r3, r3, #2
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80049bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d03e      	beq.n	8004a46 <HAL_I2C_ER_IRQHandler+0xf8>
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d039      	beq.n	8004a46 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80049d2:	7efb      	ldrb	r3, [r7, #27]
 80049d4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80049ec:	7ebb      	ldrb	r3, [r7, #26]
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d112      	bne.n	8004a18 <HAL_I2C_ER_IRQHandler+0xca>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10f      	bne.n	8004a18 <HAL_I2C_ER_IRQHandler+0xca>
 80049f8:	7cfb      	ldrb	r3, [r7, #19]
 80049fa:	2b21      	cmp	r3, #33	; 0x21
 80049fc:	d008      	beq.n	8004a10 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
 8004a00:	2b29      	cmp	r3, #41	; 0x29
 8004a02:	d005      	beq.n	8004a10 <HAL_I2C_ER_IRQHandler+0xc2>
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	2b28      	cmp	r3, #40	; 0x28
 8004a08:	d106      	bne.n	8004a18 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b21      	cmp	r3, #33	; 0x21
 8004a0e:	d103      	bne.n	8004a18 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f001 f865 	bl	8005ae0 <I2C_Slave_AF>
 8004a16:	e016      	b.n	8004a46 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a20:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	f043 0304 	orr.w	r3, r3, #4
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a2a:	7efb      	ldrb	r3, [r7, #27]
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	d002      	beq.n	8004a36 <HAL_I2C_ER_IRQHandler+0xe8>
 8004a30:	7efb      	ldrb	r3, [r7, #27]
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	d107      	bne.n	8004a46 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a44:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00d      	beq.n	8004a6c <HAL_I2C_ER_IRQHandler+0x11e>
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d008      	beq.n	8004a6c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	f043 0308 	orr.w	r3, r3, #8
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004a6a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f001 f89e 	bl	8005bc0 <I2C_ITError>
  }
}
 8004a84:	bf00      	nop
 8004a86:	3728      	adds	r7, #40	; 0x28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d150      	bne.n	8004c24 <I2C_MasterTransmit_TXE+0xc8>
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b21      	cmp	r3, #33	; 0x21
 8004b86:	d14d      	bne.n	8004c24 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d01d      	beq.n	8004bca <I2C_MasterTransmit_TXE+0x6e>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d01a      	beq.n	8004bca <I2C_MasterTransmit_TXE+0x6e>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b9a:	d016      	beq.n	8004bca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004baa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2211      	movs	r2, #17
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff ff62 	bl	8004a8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bc8:	e060      	b.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bd8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b40      	cmp	r3, #64	; 0x40
 8004c02:	d107      	bne.n	8004c14 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff ff7d 	bl	8004b0c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c12:	e03b      	b.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff ff35 	bl	8004a8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c22:	e033      	b.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b21      	cmp	r3, #33	; 0x21
 8004c28:	d005      	beq.n	8004c36 <I2C_MasterTransmit_TXE+0xda>
 8004c2a:	7bbb      	ldrb	r3, [r7, #14]
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d12d      	bne.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b22      	cmp	r3, #34	; 0x22
 8004c34:	d12a      	bne.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d108      	bne.n	8004c52 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c50:	e01c      	b.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d103      	bne.n	8004c66 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f88e 	bl	8004d80 <I2C_MemoryTransmit_TXE_BTF>
}
 8004c64:	e012      	b.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	781a      	ldrb	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c8a:	e7ff      	b.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b21      	cmp	r3, #33	; 0x21
 8004cac:	d164      	bne.n	8004d78 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d012      	beq.n	8004cde <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	781a      	ldrb	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004cdc:	e04c      	b.n	8004d78 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d01d      	beq.n	8004d20 <I2C_MasterTransmit_BTF+0x8c>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d01a      	beq.n	8004d20 <I2C_MasterTransmit_BTF+0x8c>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cf0:	d016      	beq.n	8004d20 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d00:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2211      	movs	r2, #17
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff feb7 	bl	8004a8c <HAL_I2C_MasterTxCpltCallback>
}
 8004d1e:	e02b      	b.n	8004d78 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d2e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b40      	cmp	r3, #64	; 0x40
 8004d58:	d107      	bne.n	8004d6a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff fed2 	bl	8004b0c <HAL_I2C_MemTxCpltCallback>
}
 8004d68:	e006      	b.n	8004d78 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff fe8a 	bl	8004a8c <HAL_I2C_MasterTxCpltCallback>
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d11d      	bne.n	8004dd4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d10b      	bne.n	8004db8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db0:	1c9a      	adds	r2, r3, #2
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004db6:	e073      	b.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	121b      	asrs	r3, r3, #8
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004dd2:	e065      	b.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d10b      	bne.n	8004df4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004df2:	e055      	b.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d151      	bne.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b22      	cmp	r3, #34	; 0x22
 8004e00:	d10d      	bne.n	8004e1e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e10:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e1c:	e040      	b.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d015      	beq.n	8004e54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b21      	cmp	r3, #33	; 0x21
 8004e2c:	d112      	bne.n	8004e54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	781a      	ldrb	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e52:	e025      	b.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d120      	bne.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	2b21      	cmp	r3, #33	; 0x21
 8004e62:	d11d      	bne.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e72:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff fe36 	bl	8004b0c <HAL_I2C_MemTxCpltCallback>
}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b22      	cmp	r3, #34	; 0x22
 8004eba:	f040 80ac 	bne.w	8005016 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d921      	bls.n	8004f10 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	f040 808c 	bne.w	8005016 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004f0e:	e082      	b.n	8005016 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d075      	beq.n	8005004 <I2C_MasterReceive_RXNE+0x15c>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d002      	beq.n	8004f24 <I2C_MasterReceive_RXNE+0x7c>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d16f      	bne.n	8005004 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f001 f9ff 	bl	8006328 <I2C_WaitOnSTOPRequestThroughIT>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d142      	bne.n	8004fb6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f4e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b40      	cmp	r3, #64	; 0x40
 8004f88:	d10a      	bne.n	8004fa0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff fdc1 	bl	8004b20 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f9e:	e03a      	b.n	8005016 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2212      	movs	r2, #18
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff fd76 	bl	8004aa0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fb4:	e02f      	b.n	8005016 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fc4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff fd99 	bl	8004b34 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005002:	e008      	b.n	8005016 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005012:	605a      	str	r2, [r3, #4]
}
 8005014:	e7ff      	b.n	8005016 <I2C_MasterReceive_RXNE+0x16e>
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b04      	cmp	r3, #4
 8005034:	d11b      	bne.n	800506e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005044:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800506c:	e0bd      	b.n	80051ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b03      	cmp	r3, #3
 8005076:	d129      	bne.n	80050cc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005086:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b04      	cmp	r3, #4
 800508c:	d00a      	beq.n	80050a4 <I2C_MasterReceive_BTF+0x86>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d007      	beq.n	80050a4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050ca:	e08e      	b.n	80051ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d176      	bne.n	80051c4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d002      	beq.n	80050e2 <I2C_MasterReceive_BTF+0xc4>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b10      	cmp	r3, #16
 80050e0:	d108      	bne.n	80050f4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e019      	b.n	8005128 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d002      	beq.n	8005100 <I2C_MasterReceive_BTF+0xe2>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d108      	bne.n	8005112 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	e00a      	b.n	8005128 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b10      	cmp	r3, #16
 8005116:	d007      	beq.n	8005128 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005126:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005182:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d10a      	bne.n	80051ae <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff fcba 	bl	8004b20 <HAL_I2C_MemRxCpltCallback>
}
 80051ac:	e01d      	b.n	80051ea <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2212      	movs	r2, #18
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7ff fc6f 	bl	8004aa0 <HAL_I2C_MasterRxCpltCallback>
}
 80051c2:	e012      	b.n	80051ea <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80051ea:	bf00      	nop
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	d117      	bne.n	8005236 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	b2db      	uxtb	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800521e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005220:	e067      	b.n	80052f2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	b2db      	uxtb	r3, r3
 8005228:	f043 0301 	orr.w	r3, r3, #1
 800522c:	b2da      	uxtb	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	611a      	str	r2, [r3, #16]
}
 8005234:	e05d      	b.n	80052f2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800523e:	d133      	bne.n	80052a8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b21      	cmp	r3, #33	; 0x21
 800524a:	d109      	bne.n	8005260 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005250:	b2db      	uxtb	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800525c:	611a      	str	r2, [r3, #16]
 800525e:	e008      	b.n	8005272 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	b2da      	uxtb	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	2b00      	cmp	r3, #0
 8005278:	d004      	beq.n	8005284 <I2C_Master_SB+0x92>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d108      	bne.n	8005296 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d032      	beq.n	80052f2 <I2C_Master_SB+0x100>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d02d      	beq.n	80052f2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052a4:	605a      	str	r2, [r3, #4]
}
 80052a6:	e024      	b.n	80052f2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10e      	bne.n	80052ce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	11db      	asrs	r3, r3, #7
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	f003 0306 	and.w	r3, r3, #6
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f063 030f 	orn	r3, r3, #15
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	611a      	str	r2, [r3, #16]
}
 80052cc:	e011      	b.n	80052f2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d10d      	bne.n	80052f2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	b29b      	uxth	r3, r3
 80052dc:	11db      	asrs	r3, r3, #7
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f003 0306 	and.w	r3, r3, #6
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	f063 030e 	orn	r3, r3, #14
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	611a      	str	r2, [r3, #16]
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	b2da      	uxtb	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <I2C_Master_ADD10+0x26>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d108      	bne.n	8005336 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00c      	beq.n	8005346 <I2C_Master_ADD10+0x48>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005344:	605a      	str	r2, [r3, #4]
  }
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005352:	b480      	push	{r7}
 8005354:	b091      	sub	sp, #68	; 0x44
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005360:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b22      	cmp	r3, #34	; 0x22
 800537a:	f040 8169 	bne.w	8005650 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <I2C_Master_ADDR+0x54>
 8005386:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d10b      	bne.n	80053a6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538e:	2300      	movs	r3, #0
 8005390:	633b      	str	r3, [r7, #48]	; 0x30
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	633b      	str	r3, [r7, #48]	; 0x30
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	633b      	str	r3, [r7, #48]	; 0x30
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	e160      	b.n	8005668 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d11d      	bne.n	80053ea <I2C_Master_ADDR+0x98>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053b6:	d118      	bne.n	80053ea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b8:	2300      	movs	r3, #0
 80053ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053dc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	651a      	str	r2, [r3, #80]	; 0x50
 80053e8:	e13e      	b.n	8005668 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d113      	bne.n	800541c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f4:	2300      	movs	r3, #0
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	62bb      	str	r3, [r7, #40]	; 0x28
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	e115      	b.n	8005648 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b01      	cmp	r3, #1
 8005424:	f040 808a 	bne.w	800553c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800542e:	d137      	bne.n	80054a0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800544a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544e:	d113      	bne.n	8005478 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005460:	2300      	movs	r3, #0
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	e0e7      	b.n	8005648 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005478:	2300      	movs	r3, #0
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	623b      	str	r3, [r7, #32]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	623b      	str	r3, [r7, #32]
 800548c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e0d3      	b.n	8005648 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d02e      	beq.n	8005504 <I2C_Master_ADDR+0x1b2>
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d02b      	beq.n	8005504 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	2b12      	cmp	r3, #18
 80054b0:	d102      	bne.n	80054b8 <I2C_Master_ADDR+0x166>
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d125      	bne.n	8005504 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d00e      	beq.n	80054dc <I2C_Master_ADDR+0x18a>
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d00b      	beq.n	80054dc <I2C_Master_ADDR+0x18a>
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	2b10      	cmp	r3, #16
 80054c8:	d008      	beq.n	80054dc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e007      	b.n	80054ec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054ea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	e0a1      	b.n	8005648 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005512:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005514:	2300      	movs	r3, #0
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e085      	b.n	8005648 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d14d      	bne.n	80055e2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	2b04      	cmp	r3, #4
 800554a:	d016      	beq.n	800557a <I2C_Master_ADDR+0x228>
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	2b02      	cmp	r3, #2
 8005550:	d013      	beq.n	800557a <I2C_Master_ADDR+0x228>
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	2b10      	cmp	r3, #16
 8005556:	d010      	beq.n	800557a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005566:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e007      	b.n	800558a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005588:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005598:	d117      	bne.n	80055ca <I2C_Master_ADDR+0x278>
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055a0:	d00b      	beq.n	80055ba <I2C_Master_ADDR+0x268>
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d008      	beq.n	80055ba <I2C_Master_ADDR+0x268>
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d005      	beq.n	80055ba <I2C_Master_ADDR+0x268>
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d002      	beq.n	80055ba <I2C_Master_ADDR+0x268>
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d107      	bne.n	80055ca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	e032      	b.n	8005648 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055f0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005600:	d117      	bne.n	8005632 <I2C_Master_ADDR+0x2e0>
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005608:	d00b      	beq.n	8005622 <I2C_Master_ADDR+0x2d0>
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	2b01      	cmp	r3, #1
 800560e:	d008      	beq.n	8005622 <I2C_Master_ADDR+0x2d0>
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	2b08      	cmp	r3, #8
 8005614:	d005      	beq.n	8005622 <I2C_Master_ADDR+0x2d0>
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	2b10      	cmp	r3, #16
 800561a:	d002      	beq.n	8005622 <I2C_Master_ADDR+0x2d0>
 800561c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561e:	2b20      	cmp	r3, #32
 8005620:	d107      	bne.n	8005632 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005630:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800564e:	e00b      	b.n	8005668 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
}
 8005666:	e7ff      	b.n	8005668 <I2C_Master_ADDR+0x316>
 8005668:	bf00      	nop
 800566a:	3744      	adds	r7, #68	; 0x44
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005682:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d02b      	beq.n	80056e6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	781a      	ldrb	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d114      	bne.n	80056e6 <I2C_SlaveTransmit_TXE+0x72>
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	2b29      	cmp	r3, #41	; 0x29
 80056c0:	d111      	bne.n	80056e6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2221      	movs	r2, #33	; 0x21
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2228      	movs	r2, #40	; 0x28
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff f9e7 	bl	8004ab4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d011      	beq.n	8005724 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	781a      	ldrb	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d02c      	beq.n	80057a4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d114      	bne.n	80057a4 <I2C_SlaveReceive_RXNE+0x74>
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	2b2a      	cmp	r3, #42	; 0x2a
 800577e:	d111      	bne.n	80057a4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2222      	movs	r2, #34	; 0x22
 8005794:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2228      	movs	r2, #40	; 0x28
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff f992 	bl	8004ac8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d012      	beq.n	80057e4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800580a:	2b28      	cmp	r3, #40	; 0x28
 800580c:	d125      	bne.n	800585a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005828:	2301      	movs	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b00      	cmp	r3, #0
 8005834:	d103      	bne.n	800583e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	81bb      	strh	r3, [r7, #12]
 800583c:	e002      	b.n	8005844 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800584c:	89ba      	ldrh	r2, [r7, #12]
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff f942 	bl	8004adc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005858:	e00e      	b.n	8005878 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585a:	2300      	movs	r3, #0
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	60bb      	str	r3, [r7, #8]
 800586e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800589e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80058a0:	2300      	movs	r3, #0
 80058a2:	60bb      	str	r3, [r7, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	60bb      	str	r3, [r7, #8]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058cc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058dc:	d172      	bne.n	80059c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	2b22      	cmp	r3, #34	; 0x22
 80058e2:	d002      	beq.n	80058ea <I2C_Slave_STOPF+0x6a>
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	2b2a      	cmp	r3, #42	; 0x2a
 80058e8:	d135      	bne.n	8005956 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	f043 0204 	orr.w	r2, r3, #4
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800591c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	4618      	mov	r0, r3
 8005924:	f7fe f884 	bl	8003a30 <HAL_DMA_GetState>
 8005928:	4603      	mov	r3, r0
 800592a:	2b01      	cmp	r3, #1
 800592c:	d049      	beq.n	80059c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	4a69      	ldr	r2, [pc, #420]	; (8005ad8 <I2C_Slave_STOPF+0x258>)
 8005934:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	4618      	mov	r0, r3
 800593c:	f7fd fecc 	bl	80036d8 <HAL_DMA_Abort_IT>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d03d      	beq.n	80059c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005950:	4610      	mov	r0, r2
 8005952:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005954:	e035      	b.n	80059c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	b29a      	uxth	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f043 0204 	orr.w	r2, r3, #4
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005988:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe f84e 	bl	8003a30 <HAL_DMA_GetState>
 8005994:	4603      	mov	r3, r0
 8005996:	2b01      	cmp	r3, #1
 8005998:	d014      	beq.n	80059c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599e:	4a4e      	ldr	r2, [pc, #312]	; (8005ad8 <I2C_Slave_STOPF+0x258>)
 80059a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fd fe96 	bl	80036d8 <HAL_DMA_Abort_IT>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d008      	beq.n	80059c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059bc:	4610      	mov	r0, r2
 80059be:	4798      	blx	r3
 80059c0:	e000      	b.n	80059c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d03e      	beq.n	8005a4c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d112      	bne.n	8005a02 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d112      	bne.n	8005a36 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a44:	f043 0204 	orr.w	r2, r3, #4
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f8b3 	bl	8005bc0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005a5a:	e039      	b.n	8005ad0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a60:	d109      	bne.n	8005a76 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2228      	movs	r2, #40	; 0x28
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff f829 	bl	8004ac8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b28      	cmp	r3, #40	; 0x28
 8005a80:	d111      	bne.n	8005aa6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a15      	ldr	r2, [pc, #84]	; (8005adc <I2C_Slave_STOPF+0x25c>)
 8005a86:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff f82a 	bl	8004af8 <HAL_I2C_ListenCpltCallback>
}
 8005aa4:	e014      	b.n	8005ad0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	2b22      	cmp	r3, #34	; 0x22
 8005aac:	d002      	beq.n	8005ab4 <I2C_Slave_STOPF+0x234>
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	2b22      	cmp	r3, #34	; 0x22
 8005ab2:	d10d      	bne.n	8005ad0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fe fffc 	bl	8004ac8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005ad0:	bf00      	nop
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	08005f29 	.word	0x08005f29
 8005adc:	ffff0000 	.word	0xffff0000

08005ae0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d002      	beq.n	8005b02 <I2C_Slave_AF+0x22>
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d129      	bne.n	8005b56 <I2C_Slave_AF+0x76>
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	2b28      	cmp	r3, #40	; 0x28
 8005b06:	d126      	bne.n	8005b56 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a2c      	ldr	r2, [pc, #176]	; (8005bbc <I2C_Slave_AF+0xdc>)
 8005b0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b1c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b26:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b36:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fe ffd2 	bl	8004af8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005b54:	e02e      	b.n	8005bb4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	2b21      	cmp	r3, #33	; 0x21
 8005b5a:	d126      	bne.n	8005baa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a17      	ldr	r2, [pc, #92]	; (8005bbc <I2C_Slave_AF+0xdc>)
 8005b60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2221      	movs	r2, #33	; 0x21
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b86:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b90:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fe ff86 	bl	8004ab4 <HAL_I2C_SlaveTxCpltCallback>
}
 8005ba8:	e004      	b.n	8005bb4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bb2:	615a      	str	r2, [r3, #20]
}
 8005bb4:	bf00      	nop
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	ffff0000 	.word	0xffff0000

08005bc0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005bd8:	7bbb      	ldrb	r3, [r7, #14]
 8005bda:	2b10      	cmp	r3, #16
 8005bdc:	d002      	beq.n	8005be4 <I2C_ITError+0x24>
 8005bde:	7bbb      	ldrb	r3, [r7, #14]
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d10a      	bne.n	8005bfa <I2C_ITError+0x3a>
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	2b22      	cmp	r3, #34	; 0x22
 8005be8:	d107      	bne.n	8005bfa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bf8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c00:	2b28      	cmp	r3, #40	; 0x28
 8005c02:	d107      	bne.n	8005c14 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2228      	movs	r2, #40	; 0x28
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c12:	e015      	b.n	8005c40 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c22:	d00a      	beq.n	8005c3a <I2C_ITError+0x7a>
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	2b60      	cmp	r3, #96	; 0x60
 8005c28:	d007      	beq.n	8005c3a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c4e:	d162      	bne.n	8005d16 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c5e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d020      	beq.n	8005cb0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c72:	4a6a      	ldr	r2, [pc, #424]	; (8005e1c <I2C_ITError+0x25c>)
 8005c74:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fd fd2c 	bl	80036d8 <HAL_DMA_Abort_IT>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 8089 	beq.w	8005d9a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0201 	bic.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005caa:	4610      	mov	r0, r2
 8005cac:	4798      	blx	r3
 8005cae:	e074      	b.n	8005d9a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	4a59      	ldr	r2, [pc, #356]	; (8005e1c <I2C_ITError+0x25c>)
 8005cb6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fd fd0b 	bl	80036d8 <HAL_DMA_Abort_IT>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d068      	beq.n	8005d9a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd2:	2b40      	cmp	r3, #64	; 0x40
 8005cd4:	d10b      	bne.n	8005cee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d10:	4610      	mov	r0, r2
 8005d12:	4798      	blx	r3
 8005d14:	e041      	b.n	8005d9a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b60      	cmp	r3, #96	; 0x60
 8005d20:	d125      	bne.n	8005d6e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3a:	2b40      	cmp	r3, #64	; 0x40
 8005d3c:	d10b      	bne.n	8005d56 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0201 	bic.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fe feee 	bl	8004b48 <HAL_I2C_AbortCpltCallback>
 8005d6c:	e015      	b.n	8005d9a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d78:	2b40      	cmp	r3, #64	; 0x40
 8005d7a:	d10b      	bne.n	8005d94 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7fe fecd 	bl	8004b34 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10e      	bne.n	8005dc8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d109      	bne.n	8005dc8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d104      	bne.n	8005dc8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d007      	beq.n	8005dd8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dd6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dde:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d113      	bne.n	8005e14 <I2C_ITError+0x254>
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b28      	cmp	r3, #40	; 0x28
 8005df0:	d110      	bne.n	8005e14 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a0a      	ldr	r2, [pc, #40]	; (8005e20 <I2C_ITError+0x260>)
 8005df6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fe fe72 	bl	8004af8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e14:	bf00      	nop
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	08005f29 	.word	0x08005f29
 8005e20:	ffff0000 	.word	0xffff0000

08005e24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	460b      	mov	r3, r1
 8005e32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d006      	beq.n	8005e4e <I2C_MasterRequestWrite+0x2a>
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d003      	beq.n	8005e4e <I2C_MasterRequestWrite+0x2a>
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e4c:	d108      	bne.n	8005e60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	e00b      	b.n	8005e78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	2b12      	cmp	r3, #18
 8005e66:	d107      	bne.n	8005e78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 f8f7 	bl	8006078 <I2C_WaitOnFlagUntilTimeout>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00d      	beq.n	8005eac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e9e:	d103      	bne.n	8005ea8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ea6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e035      	b.n	8005f18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eb4:	d108      	bne.n	8005ec8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eb6:	897b      	ldrh	r3, [r7, #10]
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ec4:	611a      	str	r2, [r3, #16]
 8005ec6:	e01b      	b.n	8005f00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ec8:	897b      	ldrh	r3, [r7, #10]
 8005eca:	11db      	asrs	r3, r3, #7
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f003 0306 	and.w	r3, r3, #6
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	f063 030f 	orn	r3, r3, #15
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	490e      	ldr	r1, [pc, #56]	; (8005f20 <I2C_MasterRequestWrite+0xfc>)
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 f91d 	bl	8006126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e010      	b.n	8005f18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ef6:	897b      	ldrh	r3, [r7, #10]
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	4907      	ldr	r1, [pc, #28]	; (8005f24 <I2C_MasterRequestWrite+0x100>)
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 f90d 	bl	8006126 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	00010008 	.word	0x00010008
 8005f24:	00010002 	.word	0x00010002

08005f28 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f40:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f42:	4b4b      	ldr	r3, [pc, #300]	; (8006070 <I2C_DMAAbort+0x148>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	08db      	lsrs	r3, r3, #3
 8005f48:	4a4a      	ldr	r2, [pc, #296]	; (8006074 <I2C_DMAAbort+0x14c>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	0a1a      	lsrs	r2, r3, #8
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	00da      	lsls	r2, r3, #3
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	f043 0220 	orr.w	r2, r3, #32
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005f6e:	e00a      	b.n	8005f86 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f84:	d0ea      	beq.n	8005f5c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f92:	2200      	movs	r2, #0
 8005f94:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc8:	2200      	movs	r2, #0
 8005fca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	2200      	movs	r2, #0
 8005fda:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0201 	bic.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b60      	cmp	r3, #96	; 0x60
 8005ff6:	d10e      	bne.n	8006016 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2200      	movs	r2, #0
 800600c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800600e:	6978      	ldr	r0, [r7, #20]
 8006010:	f7fe fd9a 	bl	8004b48 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006014:	e027      	b.n	8006066 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006016:	7cfb      	ldrb	r3, [r7, #19]
 8006018:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800601c:	2b28      	cmp	r3, #40	; 0x28
 800601e:	d117      	bne.n	8006050 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800603e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	2200      	movs	r2, #0
 8006044:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2228      	movs	r2, #40	; 0x28
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800604e:	e007      	b.n	8006060 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006060:	6978      	ldr	r0, [r7, #20]
 8006062:	f7fe fd67 	bl	8004b34 <HAL_I2C_ErrorCallback>
}
 8006066:	bf00      	nop
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000004 	.word	0x20000004
 8006074:	14f8b589 	.word	0x14f8b589

08006078 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006088:	e025      	b.n	80060d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	d021      	beq.n	80060d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006092:	f7fc fb5d 	bl	8002750 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d302      	bcc.n	80060a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d116      	bne.n	80060d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	f043 0220 	orr.w	r2, r3, #32
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e023      	b.n	800611e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	0c1b      	lsrs	r3, r3, #16
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d10d      	bne.n	80060fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	43da      	mvns	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4013      	ands	r3, r2
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	bf0c      	ite	eq
 80060f2:	2301      	moveq	r3, #1
 80060f4:	2300      	movne	r3, #0
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	461a      	mov	r2, r3
 80060fa:	e00c      	b.n	8006116 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	43da      	mvns	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4013      	ands	r3, r2
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	bf0c      	ite	eq
 800610e:	2301      	moveq	r3, #1
 8006110:	2300      	movne	r3, #0
 8006112:	b2db      	uxtb	r3, r3
 8006114:	461a      	mov	r2, r3
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	429a      	cmp	r2, r3
 800611a:	d0b6      	beq.n	800608a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
 8006132:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006134:	e051      	b.n	80061da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006144:	d123      	bne.n	800618e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006154:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800615e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2220      	movs	r2, #32
 800616a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f043 0204 	orr.w	r2, r3, #4
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e046      	b.n	800621c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006194:	d021      	beq.n	80061da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006196:	f7fc fadb 	bl	8002750 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d302      	bcc.n	80061ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d116      	bne.n	80061da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	f043 0220 	orr.w	r2, r3, #32
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e020      	b.n	800621c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	0c1b      	lsrs	r3, r3, #16
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d10c      	bne.n	80061fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	43da      	mvns	r2, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4013      	ands	r3, r2
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	bf14      	ite	ne
 80061f6:	2301      	movne	r3, #1
 80061f8:	2300      	moveq	r3, #0
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	e00b      	b.n	8006216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	43da      	mvns	r2, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4013      	ands	r3, r2
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	bf14      	ite	ne
 8006210:	2301      	movne	r3, #1
 8006212:	2300      	moveq	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d18d      	bne.n	8006136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006230:	e02d      	b.n	800628e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f8aa 	bl	800638c <I2C_IsAcknowledgeFailed>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e02d      	b.n	800629e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d021      	beq.n	800628e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800624a:	f7fc fa81 	bl	8002750 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	429a      	cmp	r2, r3
 8006258:	d302      	bcc.n	8006260 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d116      	bne.n	800628e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f043 0220 	orr.w	r2, r3, #32
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e007      	b.n	800629e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006298:	2b80      	cmp	r3, #128	; 0x80
 800629a:	d1ca      	bne.n	8006232 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062b2:	e02d      	b.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f869 	bl	800638c <I2C_IsAcknowledgeFailed>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e02d      	b.n	8006320 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ca:	d021      	beq.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062cc:	f7fc fa40 	bl	8002750 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d302      	bcc.n	80062e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d116      	bne.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	f043 0220 	orr.w	r2, r3, #32
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e007      	b.n	8006320 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b04      	cmp	r3, #4
 800631c:	d1ca      	bne.n	80062b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006334:	4b13      	ldr	r3, [pc, #76]	; (8006384 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	08db      	lsrs	r3, r3, #3
 800633a:	4a13      	ldr	r2, [pc, #76]	; (8006388 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800633c:	fba2 2303 	umull	r2, r3, r2, r3
 8006340:	0a1a      	lsrs	r2, r3, #8
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3b01      	subs	r3, #1
 800634e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d107      	bne.n	8006366 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	f043 0220 	orr.w	r2, r3, #32
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e008      	b.n	8006378 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006374:	d0e9      	beq.n	800634a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	20000004 	.word	0x20000004
 8006388:	14f8b589 	.word	0x14f8b589

0800638c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800639e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a2:	d11b      	bne.n	80063dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	f043 0204 	orr.w	r2, r3, #4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e000      	b.n	80063de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80063fa:	d103      	bne.n	8006404 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006402:	e007      	b.n	8006414 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800640c:	d102      	bne.n	8006414 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2208      	movs	r2, #8
 8006412:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e0cc      	b.n	80065ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006434:	4b68      	ldr	r3, [pc, #416]	; (80065d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d90c      	bls.n	800645c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006442:	4b65      	ldr	r3, [pc, #404]	; (80065d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800644a:	4b63      	ldr	r3, [pc, #396]	; (80065d8 <HAL_RCC_ClockConfig+0x1b8>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d001      	beq.n	800645c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e0b8      	b.n	80065ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d020      	beq.n	80064aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006474:	4b59      	ldr	r3, [pc, #356]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	4a58      	ldr	r2, [pc, #352]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 800647a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800647e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b00      	cmp	r3, #0
 800648a:	d005      	beq.n	8006498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800648c:	4b53      	ldr	r3, [pc, #332]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	4a52      	ldr	r2, [pc, #328]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 8006492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006498:	4b50      	ldr	r3, [pc, #320]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	494d      	ldr	r1, [pc, #308]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d044      	beq.n	8006540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d107      	bne.n	80064ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064be:	4b47      	ldr	r3, [pc, #284]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d119      	bne.n	80064fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e07f      	b.n	80065ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d003      	beq.n	80064de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d107      	bne.n	80064ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064de:	4b3f      	ldr	r3, [pc, #252]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d109      	bne.n	80064fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e06f      	b.n	80065ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ee:	4b3b      	ldr	r3, [pc, #236]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e067      	b.n	80065ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064fe:	4b37      	ldr	r3, [pc, #220]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f023 0203 	bic.w	r2, r3, #3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	4934      	ldr	r1, [pc, #208]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 800650c:	4313      	orrs	r3, r2
 800650e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006510:	f7fc f91e 	bl	8002750 <HAL_GetTick>
 8006514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006516:	e00a      	b.n	800652e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006518:	f7fc f91a 	bl	8002750 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	f241 3288 	movw	r2, #5000	; 0x1388
 8006526:	4293      	cmp	r3, r2
 8006528:	d901      	bls.n	800652e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e04f      	b.n	80065ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800652e:	4b2b      	ldr	r3, [pc, #172]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 020c 	and.w	r2, r3, #12
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	429a      	cmp	r2, r3
 800653e:	d1eb      	bne.n	8006518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006540:	4b25      	ldr	r3, [pc, #148]	; (80065d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 030f 	and.w	r3, r3, #15
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d20c      	bcs.n	8006568 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800654e:	4b22      	ldr	r3, [pc, #136]	; (80065d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006556:	4b20      	ldr	r3, [pc, #128]	; (80065d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 030f 	and.w	r3, r3, #15
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d001      	beq.n	8006568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e032      	b.n	80065ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b00      	cmp	r3, #0
 8006572:	d008      	beq.n	8006586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006574:	4b19      	ldr	r3, [pc, #100]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	4916      	ldr	r1, [pc, #88]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 8006582:	4313      	orrs	r3, r2
 8006584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d009      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006592:	4b12      	ldr	r3, [pc, #72]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	490e      	ldr	r1, [pc, #56]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065a6:	f000 fbb1 	bl	8006d0c <HAL_RCC_GetSysClockFreq>
 80065aa:	4602      	mov	r2, r0
 80065ac:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <HAL_RCC_ClockConfig+0x1bc>)
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	091b      	lsrs	r3, r3, #4
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	490a      	ldr	r1, [pc, #40]	; (80065e0 <HAL_RCC_ClockConfig+0x1c0>)
 80065b8:	5ccb      	ldrb	r3, [r1, r3]
 80065ba:	fa22 f303 	lsr.w	r3, r2, r3
 80065be:	4a09      	ldr	r2, [pc, #36]	; (80065e4 <HAL_RCC_ClockConfig+0x1c4>)
 80065c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065c2:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <HAL_RCC_ClockConfig+0x1c8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fb ff18 	bl	80023fc <HAL_InitTick>

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	40023c00 	.word	0x40023c00
 80065dc:	40023800 	.word	0x40023800
 80065e0:	080164fc 	.word	0x080164fc
 80065e4:	20000004 	.word	0x20000004
 80065e8:	20000008 	.word	0x20000008

080065ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065f0:	4b03      	ldr	r3, [pc, #12]	; (8006600 <HAL_RCC_GetHCLKFreq+0x14>)
 80065f2:	681b      	ldr	r3, [r3, #0]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	20000004 	.word	0x20000004

08006604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006608:	f7ff fff0 	bl	80065ec <HAL_RCC_GetHCLKFreq>
 800660c:	4602      	mov	r2, r0
 800660e:	4b05      	ldr	r3, [pc, #20]	; (8006624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	0a9b      	lsrs	r3, r3, #10
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	4903      	ldr	r1, [pc, #12]	; (8006628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800661a:	5ccb      	ldrb	r3, [r1, r3]
 800661c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006620:	4618      	mov	r0, r3
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40023800 	.word	0x40023800
 8006628:	0801650c 	.word	0x0801650c

0800662c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006630:	f7ff ffdc 	bl	80065ec <HAL_RCC_GetHCLKFreq>
 8006634:	4602      	mov	r2, r0
 8006636:	4b05      	ldr	r3, [pc, #20]	; (800664c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	0b5b      	lsrs	r3, r3, #13
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	4903      	ldr	r1, [pc, #12]	; (8006650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006642:	5ccb      	ldrb	r3, [r1, r3]
 8006644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006648:	4618      	mov	r0, r3
 800664a:	bd80      	pop	{r7, pc}
 800664c:	40023800 	.word	0x40023800
 8006650:	0801650c 	.word	0x0801650c

08006654 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	220f      	movs	r2, #15
 8006662:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006664:	4b12      	ldr	r3, [pc, #72]	; (80066b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 0203 	and.w	r2, r3, #3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006670:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800667c:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <HAL_RCC_GetClockConfig+0x5c>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006688:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <HAL_RCC_GetClockConfig+0x5c>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	08db      	lsrs	r3, r3, #3
 800668e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006696:	4b07      	ldr	r3, [pc, #28]	; (80066b4 <HAL_RCC_GetClockConfig+0x60>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 020f 	and.w	r2, r3, #15
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	601a      	str	r2, [r3, #0]
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40023800 	.word	0x40023800
 80066b4:	40023c00 	.word	0x40023c00

080066b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08c      	sub	sp, #48	; 0x30
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d010      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80066f0:	4b6f      	ldr	r3, [pc, #444]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066f6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	496c      	ldr	r1, [pc, #432]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006700:	4313      	orrs	r3, r2
 8006702:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800670e:	2301      	movs	r3, #1
 8006710:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d010      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800671e:	4b64      	ldr	r3, [pc, #400]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006724:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672c:	4960      	ldr	r1, [pc, #384]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800672e:	4313      	orrs	r3, r2
 8006730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800673c:	2301      	movs	r3, #1
 800673e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d017      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800674c:	4b58      	ldr	r3, [pc, #352]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800674e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	4955      	ldr	r1, [pc, #340]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800675c:	4313      	orrs	r3, r2
 800675e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800676a:	d101      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800676c:	2301      	movs	r3, #1
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006778:	2301      	movs	r3, #1
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b00      	cmp	r3, #0
 8006786:	d017      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006788:	4b49      	ldr	r3, [pc, #292]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800678a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800678e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006796:	4946      	ldr	r1, [pc, #280]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006798:	4313      	orrs	r3, r2
 800679a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067a6:	d101      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80067a8:	2301      	movs	r3, #1
 80067aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80067b4:	2301      	movs	r3, #1
 80067b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 808a 	beq.w	80068da <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067c6:	2300      	movs	r3, #0
 80067c8:	60bb      	str	r3, [r7, #8]
 80067ca:	4b39      	ldr	r3, [pc, #228]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	4a38      	ldr	r2, [pc, #224]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d4:	6413      	str	r3, [r2, #64]	; 0x40
 80067d6:	4b36      	ldr	r3, [pc, #216]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067de:	60bb      	str	r3, [r7, #8]
 80067e0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80067e2:	4b34      	ldr	r3, [pc, #208]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a33      	ldr	r2, [pc, #204]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80067e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067ee:	f7fb ffaf 	bl	8002750 <HAL_GetTick>
 80067f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067f4:	e008      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067f6:	f7fb ffab 	bl	8002750 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d901      	bls.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e278      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006808:	4b2a      	ldr	r3, [pc, #168]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0f0      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006814:	4b26      	ldr	r3, [pc, #152]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800681c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d02f      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800682c:	6a3a      	ldr	r2, [r7, #32]
 800682e:	429a      	cmp	r2, r3
 8006830:	d028      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006832:	4b1f      	ldr	r3, [pc, #124]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800683a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800683c:	4b1e      	ldr	r3, [pc, #120]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800683e:	2201      	movs	r2, #1
 8006840:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006842:	4b1d      	ldr	r3, [pc, #116]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006848:	4a19      	ldr	r2, [pc, #100]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800684e:	4b18      	ldr	r3, [pc, #96]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b01      	cmp	r3, #1
 8006858:	d114      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800685a:	f7fb ff79 	bl	8002750 <HAL_GetTick>
 800685e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006860:	e00a      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006862:	f7fb ff75 	bl	8002750 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006870:	4293      	cmp	r3, r2
 8006872:	d901      	bls.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e240      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006878:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0ee      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800688c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006890:	d114      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006892:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a6:	4902      	ldr	r1, [pc, #8]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	608b      	str	r3, [r1, #8]
 80068ac:	e00c      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80068ae:	bf00      	nop
 80068b0:	40023800 	.word	0x40023800
 80068b4:	40007000 	.word	0x40007000
 80068b8:	42470e40 	.word	0x42470e40
 80068bc:	4b4a      	ldr	r3, [pc, #296]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	4a49      	ldr	r2, [pc, #292]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80068c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80068c6:	6093      	str	r3, [r2, #8]
 80068c8:	4b47      	ldr	r3, [pc, #284]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80068ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068d4:	4944      	ldr	r1, [pc, #272]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0310 	and.w	r3, r3, #16
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d004      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80068ec:	4b3f      	ldr	r3, [pc, #252]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80068ee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00a      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80068fc:	4b3a      	ldr	r3, [pc, #232]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80068fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006902:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800690a:	4937      	ldr	r1, [pc, #220]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800690c:	4313      	orrs	r3, r2
 800690e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800691e:	4b32      	ldr	r3, [pc, #200]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006924:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800692c:	492e      	ldr	r1, [pc, #184]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800692e:	4313      	orrs	r3, r2
 8006930:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693c:	2b00      	cmp	r3, #0
 800693e:	d011      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006940:	4b29      	ldr	r3, [pc, #164]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006946:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694e:	4926      	ldr	r1, [pc, #152]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006950:	4313      	orrs	r3, r2
 8006952:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800695e:	d101      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006960:	2301      	movs	r3, #1
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006970:	4b1d      	ldr	r3, [pc, #116]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006976:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697e:	491a      	ldr	r1, [pc, #104]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006980:	4313      	orrs	r3, r2
 8006982:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800698e:	2b00      	cmp	r3, #0
 8006990:	d011      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006992:	4b15      	ldr	r3, [pc, #84]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006998:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a0:	4911      	ldr	r1, [pc, #68]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069b0:	d101      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80069b2:	2301      	movs	r3, #1
 80069b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d005      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c4:	f040 80ff 	bne.w	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80069c8:	4b09      	ldr	r3, [pc, #36]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069ce:	f7fb febf 	bl	8002750 <HAL_GetTick>
 80069d2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069d4:	e00e      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069d6:	f7fb febb 	bl	8002750 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d907      	bls.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e188      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80069e8:	40023800 	.word	0x40023800
 80069ec:	424711e0 	.word	0x424711e0
 80069f0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069f4:	4b7e      	ldr	r3, [pc, #504]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1ea      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d028      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d124      	bne.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006a28:	4b71      	ldr	r3, [pc, #452]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a2e:	0c1b      	lsrs	r3, r3, #16
 8006a30:	f003 0303 	and.w	r3, r3, #3
 8006a34:	3301      	adds	r3, #1
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a3a:	4b6d      	ldr	r3, [pc, #436]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a40:	0e1b      	lsrs	r3, r3, #24
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	019b      	lsls	r3, r3, #6
 8006a52:	431a      	orrs	r2, r3
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	085b      	lsrs	r3, r3, #1
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	041b      	lsls	r3, r3, #16
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	061b      	lsls	r3, r3, #24
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	071b      	lsls	r3, r3, #28
 8006a6a:	4961      	ldr	r1, [pc, #388]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0304 	and.w	r3, r3, #4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a86:	d00a      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d035      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a9c:	d130      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006a9e:	4b54      	ldr	r3, [pc, #336]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aa4:	0c1b      	lsrs	r3, r3, #16
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	3301      	adds	r3, #1
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ab0:	4b4f      	ldr	r3, [pc, #316]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab6:	0f1b      	lsrs	r3, r3, #28
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	019b      	lsls	r3, r3, #6
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	041b      	lsls	r3, r3, #16
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	061b      	lsls	r3, r3, #24
 8006ada:	431a      	orrs	r2, r3
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	071b      	lsls	r3, r3, #28
 8006ae0:	4943      	ldr	r1, [pc, #268]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ae8:	4b41      	ldr	r3, [pc, #260]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aee:	f023 021f 	bic.w	r2, r3, #31
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	3b01      	subs	r3, #1
 8006af8:	493d      	ldr	r1, [pc, #244]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d029      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b14:	d124      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006b16:	4b36      	ldr	r3, [pc, #216]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b1c:	0c1b      	lsrs	r3, r3, #16
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	3301      	adds	r3, #1
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b28:	4b31      	ldr	r3, [pc, #196]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b2e:	0f1b      	lsrs	r3, r3, #28
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	019b      	lsls	r3, r3, #6
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	085b      	lsrs	r3, r3, #1
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	061b      	lsls	r3, r3, #24
 8006b52:	431a      	orrs	r2, r3
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	071b      	lsls	r3, r3, #28
 8006b58:	4925      	ldr	r1, [pc, #148]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d016      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	019b      	lsls	r3, r3, #6
 8006b76:	431a      	orrs	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	085b      	lsrs	r3, r3, #1
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	041b      	lsls	r3, r3, #16
 8006b82:	431a      	orrs	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	061b      	lsls	r3, r3, #24
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	071b      	lsls	r3, r3, #28
 8006b92:	4917      	ldr	r1, [pc, #92]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b9a:	4b16      	ldr	r3, [pc, #88]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ba0:	f7fb fdd6 	bl	8002750 <HAL_GetTick>
 8006ba4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ba6:	e008      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ba8:	f7fb fdd2 	bl	8002750 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e09f      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bba:	4b0d      	ldr	r3, [pc, #52]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0f0      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	f040 8095 	bne.w	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006bce:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bd4:	f7fb fdbc 	bl	8002750 <HAL_GetTick>
 8006bd8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bda:	e00f      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006bdc:	f7fb fdb8 	bl	8002750 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d908      	bls.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e085      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006bee:	bf00      	nop
 8006bf0:	40023800 	.word	0x40023800
 8006bf4:	42470068 	.word	0x42470068
 8006bf8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bfc:	4b41      	ldr	r3, [pc, #260]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c08:	d0e8      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0304 	and.w	r3, r3, #4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d009      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d02b      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d127      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006c32:	4b34      	ldr	r3, [pc, #208]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c38:	0c1b      	lsrs	r3, r3, #16
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	3301      	adds	r3, #1
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	699a      	ldr	r2, [r3, #24]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	019b      	lsls	r3, r3, #6
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	085b      	lsrs	r3, r3, #1
 8006c54:	3b01      	subs	r3, #1
 8006c56:	041b      	lsls	r3, r3, #16
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	061b      	lsls	r3, r3, #24
 8006c60:	4928      	ldr	r1, [pc, #160]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c68:	4b26      	ldr	r3, [pc, #152]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c6e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c76:	3b01      	subs	r3, #1
 8006c78:	021b      	lsls	r3, r3, #8
 8006c7a:	4922      	ldr	r1, [pc, #136]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01d      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c96:	d118      	bne.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c98:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9e:	0e1b      	lsrs	r3, r3, #24
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	019b      	lsls	r3, r3, #6
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	085b      	lsrs	r3, r3, #1
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	041b      	lsls	r3, r3, #16
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	061b      	lsls	r3, r3, #24
 8006cc2:	4910      	ldr	r1, [pc, #64]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006cca:	4b0f      	ldr	r3, [pc, #60]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006ccc:	2201      	movs	r2, #1
 8006cce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cd0:	f7fb fd3e 	bl	8002750 <HAL_GetTick>
 8006cd4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cd6:	e008      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006cd8:	f7fb fd3a 	bl	8002750 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e007      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cea:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cf6:	d1ef      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3730      	adds	r7, #48	; 0x30
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40023800 	.word	0x40023800
 8006d08:	42470070 	.word	0x42470070

08006d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d10:	b0ae      	sub	sp, #184	; 0xb8
 8006d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d32:	4bcb      	ldr	r3, [pc, #812]	; (8007060 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 030c 	and.w	r3, r3, #12
 8006d3a:	2b0c      	cmp	r3, #12
 8006d3c:	f200 8206 	bhi.w	800714c <HAL_RCC_GetSysClockFreq+0x440>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d7d 	.word	0x08006d7d
 8006d4c:	0800714d 	.word	0x0800714d
 8006d50:	0800714d 	.word	0x0800714d
 8006d54:	0800714d 	.word	0x0800714d
 8006d58:	08006d85 	.word	0x08006d85
 8006d5c:	0800714d 	.word	0x0800714d
 8006d60:	0800714d 	.word	0x0800714d
 8006d64:	0800714d 	.word	0x0800714d
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	0800714d 	.word	0x0800714d
 8006d70:	0800714d 	.word	0x0800714d
 8006d74:	0800714d 	.word	0x0800714d
 8006d78:	08006f7d 	.word	0x08006f7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d7c:	4bb9      	ldr	r3, [pc, #740]	; (8007064 <HAL_RCC_GetSysClockFreq+0x358>)
 8006d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006d82:	e1e7      	b.n	8007154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d84:	4bb8      	ldr	r3, [pc, #736]	; (8007068 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006d86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006d8a:	e1e3      	b.n	8007154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d8c:	4bb4      	ldr	r3, [pc, #720]	; (8007060 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d98:	4bb1      	ldr	r3, [pc, #708]	; (8007060 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d071      	beq.n	8006e88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006da4:	4bae      	ldr	r3, [pc, #696]	; (8007060 <HAL_RCC_GetSysClockFreq+0x354>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	099b      	lsrs	r3, r3, #6
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006db0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006dca:	4622      	mov	r2, r4
 8006dcc:	462b      	mov	r3, r5
 8006dce:	f04f 0000 	mov.w	r0, #0
 8006dd2:	f04f 0100 	mov.w	r1, #0
 8006dd6:	0159      	lsls	r1, r3, #5
 8006dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ddc:	0150      	lsls	r0, r2, #5
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4621      	mov	r1, r4
 8006de4:	1a51      	subs	r1, r2, r1
 8006de6:	6439      	str	r1, [r7, #64]	; 0x40
 8006de8:	4629      	mov	r1, r5
 8006dea:	eb63 0301 	sbc.w	r3, r3, r1
 8006dee:	647b      	str	r3, [r7, #68]	; 0x44
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	018b      	lsls	r3, r1, #6
 8006e00:	4641      	mov	r1, r8
 8006e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e06:	4641      	mov	r1, r8
 8006e08:	018a      	lsls	r2, r1, #6
 8006e0a:	4641      	mov	r1, r8
 8006e0c:	1a51      	subs	r1, r2, r1
 8006e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e10:	4649      	mov	r1, r9
 8006e12:	eb63 0301 	sbc.w	r3, r3, r1
 8006e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	f04f 0300 	mov.w	r3, #0
 8006e20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006e24:	4649      	mov	r1, r9
 8006e26:	00cb      	lsls	r3, r1, #3
 8006e28:	4641      	mov	r1, r8
 8006e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e2e:	4641      	mov	r1, r8
 8006e30:	00ca      	lsls	r2, r1, #3
 8006e32:	4610      	mov	r0, r2
 8006e34:	4619      	mov	r1, r3
 8006e36:	4603      	mov	r3, r0
 8006e38:	4622      	mov	r2, r4
 8006e3a:	189b      	adds	r3, r3, r2
 8006e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e3e:	462b      	mov	r3, r5
 8006e40:	460a      	mov	r2, r1
 8006e42:	eb42 0303 	adc.w	r3, r2, r3
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e54:	4629      	mov	r1, r5
 8006e56:	024b      	lsls	r3, r1, #9
 8006e58:	4621      	mov	r1, r4
 8006e5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e5e:	4621      	mov	r1, r4
 8006e60:	024a      	lsls	r2, r1, #9
 8006e62:	4610      	mov	r0, r2
 8006e64:	4619      	mov	r1, r3
 8006e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006e78:	f7f9 feb6 	bl	8000be8 <__aeabi_uldivmod>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4613      	mov	r3, r2
 8006e82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e86:	e067      	b.n	8006f58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e88:	4b75      	ldr	r3, [pc, #468]	; (8007060 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	099b      	lsrs	r3, r3, #6
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e94:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ea6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006eaa:	4622      	mov	r2, r4
 8006eac:	462b      	mov	r3, r5
 8006eae:	f04f 0000 	mov.w	r0, #0
 8006eb2:	f04f 0100 	mov.w	r1, #0
 8006eb6:	0159      	lsls	r1, r3, #5
 8006eb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ebc:	0150      	lsls	r0, r2, #5
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	1a51      	subs	r1, r2, r1
 8006ec6:	62b9      	str	r1, [r7, #40]	; 0x28
 8006ec8:	4629      	mov	r1, r5
 8006eca:	eb63 0301 	sbc.w	r3, r3, r1
 8006ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	f04f 0300 	mov.w	r3, #0
 8006ed8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006edc:	4649      	mov	r1, r9
 8006ede:	018b      	lsls	r3, r1, #6
 8006ee0:	4641      	mov	r1, r8
 8006ee2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ee6:	4641      	mov	r1, r8
 8006ee8:	018a      	lsls	r2, r1, #6
 8006eea:	4641      	mov	r1, r8
 8006eec:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	f04f 0300 	mov.w	r3, #0
 8006efe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f0a:	4692      	mov	sl, r2
 8006f0c:	469b      	mov	fp, r3
 8006f0e:	4623      	mov	r3, r4
 8006f10:	eb1a 0303 	adds.w	r3, sl, r3
 8006f14:	623b      	str	r3, [r7, #32]
 8006f16:	462b      	mov	r3, r5
 8006f18:	eb4b 0303 	adc.w	r3, fp, r3
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f1e:	f04f 0200 	mov.w	r2, #0
 8006f22:	f04f 0300 	mov.w	r3, #0
 8006f26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	028b      	lsls	r3, r1, #10
 8006f2e:	4621      	mov	r1, r4
 8006f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f34:	4621      	mov	r1, r4
 8006f36:	028a      	lsls	r2, r1, #10
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f40:	2200      	movs	r2, #0
 8006f42:	673b      	str	r3, [r7, #112]	; 0x70
 8006f44:	677a      	str	r2, [r7, #116]	; 0x74
 8006f46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006f4a:	f7f9 fe4d 	bl	8000be8 <__aeabi_uldivmod>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	4613      	mov	r3, r2
 8006f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f58:	4b41      	ldr	r3, [pc, #260]	; (8007060 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	0c1b      	lsrs	r3, r3, #16
 8006f5e:	f003 0303 	and.w	r3, r3, #3
 8006f62:	3301      	adds	r3, #1
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006f6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006f7a:	e0eb      	b.n	8007154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f7c:	4b38      	ldr	r3, [pc, #224]	; (8007060 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f88:	4b35      	ldr	r3, [pc, #212]	; (8007060 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d06b      	beq.n	800706c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f94:	4b32      	ldr	r3, [pc, #200]	; (8007060 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	099b      	lsrs	r3, r3, #6
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa6:	663b      	str	r3, [r7, #96]	; 0x60
 8006fa8:	2300      	movs	r3, #0
 8006faa:	667b      	str	r3, [r7, #100]	; 0x64
 8006fac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	f04f 0000 	mov.w	r0, #0
 8006fb8:	f04f 0100 	mov.w	r1, #0
 8006fbc:	0159      	lsls	r1, r3, #5
 8006fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fc2:	0150      	lsls	r0, r2, #5
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4621      	mov	r1, r4
 8006fca:	1a51      	subs	r1, r2, r1
 8006fcc:	61b9      	str	r1, [r7, #24]
 8006fce:	4629      	mov	r1, r5
 8006fd0:	eb63 0301 	sbc.w	r3, r3, r1
 8006fd4:	61fb      	str	r3, [r7, #28]
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006fe2:	4659      	mov	r1, fp
 8006fe4:	018b      	lsls	r3, r1, #6
 8006fe6:	4651      	mov	r1, sl
 8006fe8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006fec:	4651      	mov	r1, sl
 8006fee:	018a      	lsls	r2, r1, #6
 8006ff0:	4651      	mov	r1, sl
 8006ff2:	ebb2 0801 	subs.w	r8, r2, r1
 8006ff6:	4659      	mov	r1, fp
 8006ff8:	eb63 0901 	sbc.w	r9, r3, r1
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007008:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800700c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007010:	4690      	mov	r8, r2
 8007012:	4699      	mov	r9, r3
 8007014:	4623      	mov	r3, r4
 8007016:	eb18 0303 	adds.w	r3, r8, r3
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	462b      	mov	r3, r5
 800701e:	eb49 0303 	adc.w	r3, r9, r3
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	f04f 0300 	mov.w	r3, #0
 800702c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007030:	4629      	mov	r1, r5
 8007032:	024b      	lsls	r3, r1, #9
 8007034:	4621      	mov	r1, r4
 8007036:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800703a:	4621      	mov	r1, r4
 800703c:	024a      	lsls	r2, r1, #9
 800703e:	4610      	mov	r0, r2
 8007040:	4619      	mov	r1, r3
 8007042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007046:	2200      	movs	r2, #0
 8007048:	65bb      	str	r3, [r7, #88]	; 0x58
 800704a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800704c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007050:	f7f9 fdca 	bl	8000be8 <__aeabi_uldivmod>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4613      	mov	r3, r2
 800705a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800705e:	e065      	b.n	800712c <HAL_RCC_GetSysClockFreq+0x420>
 8007060:	40023800 	.word	0x40023800
 8007064:	00f42400 	.word	0x00f42400
 8007068:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800706c:	4b3d      	ldr	r3, [pc, #244]	; (8007164 <HAL_RCC_GetSysClockFreq+0x458>)
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	099b      	lsrs	r3, r3, #6
 8007072:	2200      	movs	r2, #0
 8007074:	4618      	mov	r0, r3
 8007076:	4611      	mov	r1, r2
 8007078:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800707c:	653b      	str	r3, [r7, #80]	; 0x50
 800707e:	2300      	movs	r3, #0
 8007080:	657b      	str	r3, [r7, #84]	; 0x54
 8007082:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007086:	4642      	mov	r2, r8
 8007088:	464b      	mov	r3, r9
 800708a:	f04f 0000 	mov.w	r0, #0
 800708e:	f04f 0100 	mov.w	r1, #0
 8007092:	0159      	lsls	r1, r3, #5
 8007094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007098:	0150      	lsls	r0, r2, #5
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	4641      	mov	r1, r8
 80070a0:	1a51      	subs	r1, r2, r1
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	4649      	mov	r1, r9
 80070a6:	eb63 0301 	sbc.w	r3, r3, r1
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	f04f 0200 	mov.w	r2, #0
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80070b8:	4659      	mov	r1, fp
 80070ba:	018b      	lsls	r3, r1, #6
 80070bc:	4651      	mov	r1, sl
 80070be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070c2:	4651      	mov	r1, sl
 80070c4:	018a      	lsls	r2, r1, #6
 80070c6:	4651      	mov	r1, sl
 80070c8:	1a54      	subs	r4, r2, r1
 80070ca:	4659      	mov	r1, fp
 80070cc:	eb63 0501 	sbc.w	r5, r3, r1
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	f04f 0300 	mov.w	r3, #0
 80070d8:	00eb      	lsls	r3, r5, #3
 80070da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070de:	00e2      	lsls	r2, r4, #3
 80070e0:	4614      	mov	r4, r2
 80070e2:	461d      	mov	r5, r3
 80070e4:	4643      	mov	r3, r8
 80070e6:	18e3      	adds	r3, r4, r3
 80070e8:	603b      	str	r3, [r7, #0]
 80070ea:	464b      	mov	r3, r9
 80070ec:	eb45 0303 	adc.w	r3, r5, r3
 80070f0:	607b      	str	r3, [r7, #4]
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	f04f 0300 	mov.w	r3, #0
 80070fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070fe:	4629      	mov	r1, r5
 8007100:	028b      	lsls	r3, r1, #10
 8007102:	4621      	mov	r1, r4
 8007104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007108:	4621      	mov	r1, r4
 800710a:	028a      	lsls	r2, r1, #10
 800710c:	4610      	mov	r0, r2
 800710e:	4619      	mov	r1, r3
 8007110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007114:	2200      	movs	r2, #0
 8007116:	64bb      	str	r3, [r7, #72]	; 0x48
 8007118:	64fa      	str	r2, [r7, #76]	; 0x4c
 800711a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800711e:	f7f9 fd63 	bl	8000be8 <__aeabi_uldivmod>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	4613      	mov	r3, r2
 8007128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800712c:	4b0d      	ldr	r3, [pc, #52]	; (8007164 <HAL_RCC_GetSysClockFreq+0x458>)
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	0f1b      	lsrs	r3, r3, #28
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800713a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800713e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007142:	fbb2 f3f3 	udiv	r3, r2, r3
 8007146:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800714a:	e003      	b.n	8007154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800714c:	4b06      	ldr	r3, [pc, #24]	; (8007168 <HAL_RCC_GetSysClockFreq+0x45c>)
 800714e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007152:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007158:	4618      	mov	r0, r3
 800715a:	37b8      	adds	r7, #184	; 0xb8
 800715c:	46bd      	mov	sp, r7
 800715e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007162:	bf00      	nop
 8007164:	40023800 	.word	0x40023800
 8007168:	00f42400 	.word	0x00f42400

0800716c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e28d      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 8083 	beq.w	8007292 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800718c:	4b94      	ldr	r3, [pc, #592]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f003 030c 	and.w	r3, r3, #12
 8007194:	2b04      	cmp	r3, #4
 8007196:	d019      	beq.n	80071cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007198:	4b91      	ldr	r3, [pc, #580]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d106      	bne.n	80071b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071a4:	4b8e      	ldr	r3, [pc, #568]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071b0:	d00c      	beq.n	80071cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071b2:	4b8b      	ldr	r3, [pc, #556]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071ba:	2b0c      	cmp	r3, #12
 80071bc:	d112      	bne.n	80071e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071be:	4b88      	ldr	r3, [pc, #544]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ca:	d10b      	bne.n	80071e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071cc:	4b84      	ldr	r3, [pc, #528]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d05b      	beq.n	8007290 <HAL_RCC_OscConfig+0x124>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d157      	bne.n	8007290 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e25a      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ec:	d106      	bne.n	80071fc <HAL_RCC_OscConfig+0x90>
 80071ee:	4b7c      	ldr	r3, [pc, #496]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a7b      	ldr	r2, [pc, #492]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 80071f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	e01d      	b.n	8007238 <HAL_RCC_OscConfig+0xcc>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007204:	d10c      	bne.n	8007220 <HAL_RCC_OscConfig+0xb4>
 8007206:	4b76      	ldr	r3, [pc, #472]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a75      	ldr	r2, [pc, #468]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 800720c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	4b73      	ldr	r3, [pc, #460]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a72      	ldr	r2, [pc, #456]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 8007218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	e00b      	b.n	8007238 <HAL_RCC_OscConfig+0xcc>
 8007220:	4b6f      	ldr	r3, [pc, #444]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a6e      	ldr	r2, [pc, #440]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 8007226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	4b6c      	ldr	r3, [pc, #432]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a6b      	ldr	r2, [pc, #428]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 8007232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d013      	beq.n	8007268 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fb fa86 	bl	8002750 <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007248:	f7fb fa82 	bl	8002750 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b64      	cmp	r3, #100	; 0x64
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e21f      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800725a:	4b61      	ldr	r3, [pc, #388]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0f0      	beq.n	8007248 <HAL_RCC_OscConfig+0xdc>
 8007266:	e014      	b.n	8007292 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007268:	f7fb fa72 	bl	8002750 <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007270:	f7fb fa6e 	bl	8002750 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b64      	cmp	r3, #100	; 0x64
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e20b      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007282:	4b57      	ldr	r3, [pc, #348]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1f0      	bne.n	8007270 <HAL_RCC_OscConfig+0x104>
 800728e:	e000      	b.n	8007292 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d06f      	beq.n	800737e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800729e:	4b50      	ldr	r3, [pc, #320]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f003 030c 	and.w	r3, r3, #12
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d017      	beq.n	80072da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072aa:	4b4d      	ldr	r3, [pc, #308]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80072b2:	2b08      	cmp	r3, #8
 80072b4:	d105      	bne.n	80072c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072b6:	4b4a      	ldr	r3, [pc, #296]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00b      	beq.n	80072da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072c2:	4b47      	ldr	r3, [pc, #284]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072ca:	2b0c      	cmp	r3, #12
 80072cc:	d11c      	bne.n	8007308 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072ce:	4b44      	ldr	r3, [pc, #272]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d116      	bne.n	8007308 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072da:	4b41      	ldr	r3, [pc, #260]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d005      	beq.n	80072f2 <HAL_RCC_OscConfig+0x186>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d001      	beq.n	80072f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e1d3      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072f2:	4b3b      	ldr	r3, [pc, #236]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	4937      	ldr	r1, [pc, #220]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 8007302:	4313      	orrs	r3, r2
 8007304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007306:	e03a      	b.n	800737e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d020      	beq.n	8007352 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007310:	4b34      	ldr	r3, [pc, #208]	; (80073e4 <HAL_RCC_OscConfig+0x278>)
 8007312:	2201      	movs	r2, #1
 8007314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007316:	f7fb fa1b 	bl	8002750 <HAL_GetTick>
 800731a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800731c:	e008      	b.n	8007330 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800731e:	f7fb fa17 	bl	8002750 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d901      	bls.n	8007330 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e1b4      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007330:	4b2b      	ldr	r3, [pc, #172]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0f0      	beq.n	800731e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800733c:	4b28      	ldr	r3, [pc, #160]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	00db      	lsls	r3, r3, #3
 800734a:	4925      	ldr	r1, [pc, #148]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 800734c:	4313      	orrs	r3, r2
 800734e:	600b      	str	r3, [r1, #0]
 8007350:	e015      	b.n	800737e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007352:	4b24      	ldr	r3, [pc, #144]	; (80073e4 <HAL_RCC_OscConfig+0x278>)
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007358:	f7fb f9fa 	bl	8002750 <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800735e:	e008      	b.n	8007372 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007360:	f7fb f9f6 	bl	8002750 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b02      	cmp	r3, #2
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e193      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007372:	4b1b      	ldr	r3, [pc, #108]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1f0      	bne.n	8007360 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d036      	beq.n	80073f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d016      	beq.n	80073c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007392:	4b15      	ldr	r3, [pc, #84]	; (80073e8 <HAL_RCC_OscConfig+0x27c>)
 8007394:	2201      	movs	r2, #1
 8007396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007398:	f7fb f9da 	bl	8002750 <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073a0:	f7fb f9d6 	bl	8002750 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e173      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073b2:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <HAL_RCC_OscConfig+0x274>)
 80073b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0f0      	beq.n	80073a0 <HAL_RCC_OscConfig+0x234>
 80073be:	e01b      	b.n	80073f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073c0:	4b09      	ldr	r3, [pc, #36]	; (80073e8 <HAL_RCC_OscConfig+0x27c>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c6:	f7fb f9c3 	bl	8002750 <HAL_GetTick>
 80073ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073cc:	e00e      	b.n	80073ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073ce:	f7fb f9bf 	bl	8002750 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d907      	bls.n	80073ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e15c      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
 80073e0:	40023800 	.word	0x40023800
 80073e4:	42470000 	.word	0x42470000
 80073e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073ec:	4b8a      	ldr	r3, [pc, #552]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 80073ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1ea      	bne.n	80073ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0304 	and.w	r3, r3, #4
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 8097 	beq.w	8007534 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007406:	2300      	movs	r3, #0
 8007408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800740a:	4b83      	ldr	r3, [pc, #524]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10f      	bne.n	8007436 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007416:	2300      	movs	r3, #0
 8007418:	60bb      	str	r3, [r7, #8]
 800741a:	4b7f      	ldr	r3, [pc, #508]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	4a7e      	ldr	r2, [pc, #504]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 8007420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007424:	6413      	str	r3, [r2, #64]	; 0x40
 8007426:	4b7c      	ldr	r3, [pc, #496]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800742e:	60bb      	str	r3, [r7, #8]
 8007430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007432:	2301      	movs	r3, #1
 8007434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007436:	4b79      	ldr	r3, [pc, #484]	; (800761c <HAL_RCC_OscConfig+0x4b0>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743e:	2b00      	cmp	r3, #0
 8007440:	d118      	bne.n	8007474 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007442:	4b76      	ldr	r3, [pc, #472]	; (800761c <HAL_RCC_OscConfig+0x4b0>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a75      	ldr	r2, [pc, #468]	; (800761c <HAL_RCC_OscConfig+0x4b0>)
 8007448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800744c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800744e:	f7fb f97f 	bl	8002750 <HAL_GetTick>
 8007452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007454:	e008      	b.n	8007468 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007456:	f7fb f97b 	bl	8002750 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d901      	bls.n	8007468 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e118      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007468:	4b6c      	ldr	r3, [pc, #432]	; (800761c <HAL_RCC_OscConfig+0x4b0>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0f0      	beq.n	8007456 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d106      	bne.n	800748a <HAL_RCC_OscConfig+0x31e>
 800747c:	4b66      	ldr	r3, [pc, #408]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 800747e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007480:	4a65      	ldr	r2, [pc, #404]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 8007482:	f043 0301 	orr.w	r3, r3, #1
 8007486:	6713      	str	r3, [r2, #112]	; 0x70
 8007488:	e01c      	b.n	80074c4 <HAL_RCC_OscConfig+0x358>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	2b05      	cmp	r3, #5
 8007490:	d10c      	bne.n	80074ac <HAL_RCC_OscConfig+0x340>
 8007492:	4b61      	ldr	r3, [pc, #388]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 8007494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007496:	4a60      	ldr	r2, [pc, #384]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 8007498:	f043 0304 	orr.w	r3, r3, #4
 800749c:	6713      	str	r3, [r2, #112]	; 0x70
 800749e:	4b5e      	ldr	r3, [pc, #376]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 80074a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a2:	4a5d      	ldr	r2, [pc, #372]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 80074a4:	f043 0301 	orr.w	r3, r3, #1
 80074a8:	6713      	str	r3, [r2, #112]	; 0x70
 80074aa:	e00b      	b.n	80074c4 <HAL_RCC_OscConfig+0x358>
 80074ac:	4b5a      	ldr	r3, [pc, #360]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 80074ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b0:	4a59      	ldr	r2, [pc, #356]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 80074b2:	f023 0301 	bic.w	r3, r3, #1
 80074b6:	6713      	str	r3, [r2, #112]	; 0x70
 80074b8:	4b57      	ldr	r3, [pc, #348]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 80074ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074bc:	4a56      	ldr	r2, [pc, #344]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 80074be:	f023 0304 	bic.w	r3, r3, #4
 80074c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d015      	beq.n	80074f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074cc:	f7fb f940 	bl	8002750 <HAL_GetTick>
 80074d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074d2:	e00a      	b.n	80074ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074d4:	f7fb f93c 	bl	8002750 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e0d7      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ea:	4b4b      	ldr	r3, [pc, #300]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 80074ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0ee      	beq.n	80074d4 <HAL_RCC_OscConfig+0x368>
 80074f6:	e014      	b.n	8007522 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f8:	f7fb f92a 	bl	8002750 <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074fe:	e00a      	b.n	8007516 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007500:	f7fb f926 	bl	8002750 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	f241 3288 	movw	r2, #5000	; 0x1388
 800750e:	4293      	cmp	r3, r2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e0c1      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007516:	4b40      	ldr	r3, [pc, #256]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 8007518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1ee      	bne.n	8007500 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d105      	bne.n	8007534 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007528:	4b3b      	ldr	r3, [pc, #236]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 800752a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752c:	4a3a      	ldr	r2, [pc, #232]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 800752e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007532:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 80ad 	beq.w	8007698 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800753e:	4b36      	ldr	r3, [pc, #216]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 030c 	and.w	r3, r3, #12
 8007546:	2b08      	cmp	r3, #8
 8007548:	d060      	beq.n	800760c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	2b02      	cmp	r3, #2
 8007550:	d145      	bne.n	80075de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007552:	4b33      	ldr	r3, [pc, #204]	; (8007620 <HAL_RCC_OscConfig+0x4b4>)
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007558:	f7fb f8fa 	bl	8002750 <HAL_GetTick>
 800755c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800755e:	e008      	b.n	8007572 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007560:	f7fb f8f6 	bl	8002750 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d901      	bls.n	8007572 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e093      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007572:	4b29      	ldr	r3, [pc, #164]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1f0      	bne.n	8007560 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	69da      	ldr	r2, [r3, #28]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	431a      	orrs	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	019b      	lsls	r3, r3, #6
 800758e:	431a      	orrs	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	085b      	lsrs	r3, r3, #1
 8007596:	3b01      	subs	r3, #1
 8007598:	041b      	lsls	r3, r3, #16
 800759a:	431a      	orrs	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	061b      	lsls	r3, r3, #24
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	071b      	lsls	r3, r3, #28
 80075aa:	491b      	ldr	r1, [pc, #108]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075b0:	4b1b      	ldr	r3, [pc, #108]	; (8007620 <HAL_RCC_OscConfig+0x4b4>)
 80075b2:	2201      	movs	r2, #1
 80075b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b6:	f7fb f8cb 	bl	8002750 <HAL_GetTick>
 80075ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075bc:	e008      	b.n	80075d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075be:	f7fb f8c7 	bl	8002750 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d901      	bls.n	80075d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e064      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075d0:	4b11      	ldr	r3, [pc, #68]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0f0      	beq.n	80075be <HAL_RCC_OscConfig+0x452>
 80075dc:	e05c      	b.n	8007698 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075de:	4b10      	ldr	r3, [pc, #64]	; (8007620 <HAL_RCC_OscConfig+0x4b4>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e4:	f7fb f8b4 	bl	8002750 <HAL_GetTick>
 80075e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075ea:	e008      	b.n	80075fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075ec:	f7fb f8b0 	bl	8002750 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e04d      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075fe:	4b06      	ldr	r3, [pc, #24]	; (8007618 <HAL_RCC_OscConfig+0x4ac>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1f0      	bne.n	80075ec <HAL_RCC_OscConfig+0x480>
 800760a:	e045      	b.n	8007698 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d107      	bne.n	8007624 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e040      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
 8007618:	40023800 	.word	0x40023800
 800761c:	40007000 	.word	0x40007000
 8007620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007624:	4b1f      	ldr	r3, [pc, #124]	; (80076a4 <HAL_RCC_OscConfig+0x538>)
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d030      	beq.n	8007694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800763c:	429a      	cmp	r2, r3
 800763e:	d129      	bne.n	8007694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800764a:	429a      	cmp	r2, r3
 800764c:	d122      	bne.n	8007694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007654:	4013      	ands	r3, r2
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800765a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800765c:	4293      	cmp	r3, r2
 800765e:	d119      	bne.n	8007694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766a:	085b      	lsrs	r3, r3, #1
 800766c:	3b01      	subs	r3, #1
 800766e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007670:	429a      	cmp	r2, r3
 8007672:	d10f      	bne.n	8007694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007680:	429a      	cmp	r2, r3
 8007682:	d107      	bne.n	8007694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007690:	429a      	cmp	r2, r3
 8007692:	d001      	beq.n	8007698 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40023800 	.word	0x40023800

080076a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e066      	b.n	800778c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	7f5b      	ldrb	r3, [r3, #29]
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d105      	bne.n	80076d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7fa fd6c 	bl	80021ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	22ca      	movs	r2, #202	; 0xca
 80076e0:	625a      	str	r2, [r3, #36]	; 0x24
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2253      	movs	r2, #83	; 0x53
 80076e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fb6f 	bl	8007dce <RTC_EnterInitMode>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d12c      	bne.n	8007754 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6899      	ldr	r1, [r3, #8]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	431a      	orrs	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	431a      	orrs	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	68d2      	ldr	r2, [r2, #12]
 8007734:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6919      	ldr	r1, [r3, #16]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	041a      	lsls	r2, r3, #16
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fb76 	bl	8007e3c <RTC_ExitInitMode>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d113      	bne.n	8007782 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007768:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	699a      	ldr	r2, [r3, #24]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	22ff      	movs	r2, #255	; 0xff
 8007788:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800778a:	7bfb      	ldrb	r3, [r7, #15]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007794:	b590      	push	{r4, r7, lr}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	7f1b      	ldrb	r3, [r3, #28]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d101      	bne.n	80077b0 <HAL_RTC_SetTime+0x1c>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e087      	b.n	80078c0 <HAL_RTC_SetTime+0x12c>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2201      	movs	r2, #1
 80077b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2202      	movs	r2, #2
 80077ba:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d126      	bne.n	8007810 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d102      	bne.n	80077d6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2200      	movs	r2, #0
 80077d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 fb53 	bl	8007e86 <RTC_ByteToBcd2>
 80077e0:	4603      	mov	r3, r0
 80077e2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	785b      	ldrb	r3, [r3, #1]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fb4c 	bl	8007e86 <RTC_ByteToBcd2>
 80077ee:	4603      	mov	r3, r0
 80077f0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077f2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	789b      	ldrb	r3, [r3, #2]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fb44 	bl	8007e86 <RTC_ByteToBcd2>
 80077fe:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007800:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	78db      	ldrb	r3, [r3, #3]
 8007808:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800780a:	4313      	orrs	r3, r2
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	e018      	b.n	8007842 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	d102      	bne.n	8007824 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2200      	movs	r2, #0
 8007822:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	785b      	ldrb	r3, [r3, #1]
 800782e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007830:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007836:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	78db      	ldrb	r3, [r3, #3]
 800783c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800783e:	4313      	orrs	r3, r2
 8007840:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	22ca      	movs	r2, #202	; 0xca
 8007848:	625a      	str	r2, [r3, #36]	; 0x24
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2253      	movs	r2, #83	; 0x53
 8007850:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 fabb 	bl	8007dce <RTC_EnterInitMode>
 8007858:	4603      	mov	r3, r0
 800785a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800785c:	7cfb      	ldrb	r3, [r7, #19]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d120      	bne.n	80078a4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800786c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007870:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007880:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6899      	ldr	r1, [r3, #8]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	431a      	orrs	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 face 	bl	8007e3c <RTC_ExitInitMode>
 80078a0:	4603      	mov	r3, r0
 80078a2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80078a4:	7cfb      	ldrb	r3, [r7, #19]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d102      	bne.n	80078b0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2201      	movs	r2, #1
 80078ae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	22ff      	movs	r2, #255	; 0xff
 80078b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	771a      	strb	r2, [r3, #28]

  return status;
 80078be:	7cfb      	ldrb	r3, [r7, #19]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	371c      	adds	r7, #28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd90      	pop	{r4, r7, pc}

080078c8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80078fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80078fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	0c1b      	lsrs	r3, r3, #16
 8007904:	b2db      	uxtb	r3, r3
 8007906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800790a:	b2da      	uxtb	r2, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	b2db      	uxtb	r3, r3
 8007916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800791a:	b2da      	uxtb	r2, r3
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007928:	b2da      	uxtb	r2, r3
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	0d9b      	lsrs	r3, r3, #22
 8007932:	b2db      	uxtb	r3, r3
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	b2da      	uxtb	r2, r3
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d11a      	bne.n	800797a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fab9 	bl	8007ec0 <RTC_Bcd2ToByte>
 800794e:	4603      	mov	r3, r0
 8007950:	461a      	mov	r2, r3
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	785b      	ldrb	r3, [r3, #1]
 800795a:	4618      	mov	r0, r3
 800795c:	f000 fab0 	bl	8007ec0 <RTC_Bcd2ToByte>
 8007960:	4603      	mov	r3, r0
 8007962:	461a      	mov	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	789b      	ldrb	r3, [r3, #2]
 800796c:	4618      	mov	r0, r3
 800796e:	f000 faa7 	bl	8007ec0 <RTC_Bcd2ToByte>
 8007972:	4603      	mov	r3, r0
 8007974:	461a      	mov	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007984:	b590      	push	{r4, r7, lr}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	7f1b      	ldrb	r3, [r3, #28]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d101      	bne.n	80079a0 <HAL_RTC_SetDate+0x1c>
 800799c:	2302      	movs	r3, #2
 800799e:	e071      	b.n	8007a84 <HAL_RTC_SetDate+0x100>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2201      	movs	r2, #1
 80079a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2202      	movs	r2, #2
 80079aa:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10e      	bne.n	80079d0 <HAL_RTC_SetDate+0x4c>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	785b      	ldrb	r3, [r3, #1]
 80079b6:	f003 0310 	and.w	r3, r3, #16
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d008      	beq.n	80079d0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	785b      	ldrb	r3, [r3, #1]
 80079c2:	f023 0310 	bic.w	r3, r3, #16
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	330a      	adds	r3, #10
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d11c      	bne.n	8007a10 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	78db      	ldrb	r3, [r3, #3]
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fa53 	bl	8007e86 <RTC_ByteToBcd2>
 80079e0:	4603      	mov	r3, r0
 80079e2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	785b      	ldrb	r3, [r3, #1]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fa4c 	bl	8007e86 <RTC_ByteToBcd2>
 80079ee:	4603      	mov	r3, r0
 80079f0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80079f2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	789b      	ldrb	r3, [r3, #2]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fa44 	bl	8007e86 <RTC_ByteToBcd2>
 80079fe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007a00:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]
 8007a0e:	e00e      	b.n	8007a2e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	78db      	ldrb	r3, [r3, #3]
 8007a14:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	785b      	ldrb	r3, [r3, #1]
 8007a1a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a1c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007a22:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	22ca      	movs	r2, #202	; 0xca
 8007a34:	625a      	str	r2, [r3, #36]	; 0x24
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2253      	movs	r2, #83	; 0x53
 8007a3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 f9c5 	bl	8007dce <RTC_EnterInitMode>
 8007a44:	4603      	mov	r3, r0
 8007a46:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007a48:	7cfb      	ldrb	r3, [r7, #19]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10c      	bne.n	8007a68 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a5c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f9ec 	bl	8007e3c <RTC_ExitInitMode>
 8007a64:	4603      	mov	r3, r0
 8007a66:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007a68:	7cfb      	ldrb	r3, [r7, #19]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d102      	bne.n	8007a74 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2201      	movs	r2, #1
 8007a72:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	22ff      	movs	r2, #255	; 0xff
 8007a7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	771a      	strb	r2, [r3, #28]

  return status;
 8007a82:	7cfb      	ldrb	r3, [r7, #19]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd90      	pop	{r4, r7, pc}

08007a8c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007aa6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007aaa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	0c1b      	lsrs	r3, r3, #16
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	0a1b      	lsrs	r3, r3, #8
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	f003 031f 	and.w	r3, r3, #31
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	0b5b      	lsrs	r3, r3, #13
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	f003 0307 	and.w	r3, r3, #7
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d11a      	bne.n	8007b20 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	78db      	ldrb	r3, [r3, #3]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 f9e6 	bl	8007ec0 <RTC_Bcd2ToByte>
 8007af4:	4603      	mov	r3, r0
 8007af6:	461a      	mov	r2, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	785b      	ldrb	r3, [r3, #1]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 f9dd 	bl	8007ec0 <RTC_Bcd2ToByte>
 8007b06:	4603      	mov	r3, r0
 8007b08:	461a      	mov	r2, r3
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	789b      	ldrb	r3, [r3, #2]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 f9d4 	bl	8007ec0 <RTC_Bcd2ToByte>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007b2a:	b590      	push	{r4, r7, lr}
 8007b2c:	b089      	sub	sp, #36	; 0x24
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	7f1b      	ldrb	r3, [r3, #28]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <HAL_RTC_SetAlarm+0x24>
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e113      	b.n	8007d76 <HAL_RTC_SetAlarm+0x24c>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2201      	movs	r2, #1
 8007b52:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2202      	movs	r2, #2
 8007b58:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d137      	bne.n	8007bd0 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d102      	bne.n	8007b74 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2200      	movs	r2, #0
 8007b72:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 f984 	bl	8007e86 <RTC_ByteToBcd2>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	785b      	ldrb	r3, [r3, #1]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 f97d 	bl	8007e86 <RTC_ByteToBcd2>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007b90:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	789b      	ldrb	r3, [r3, #2]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 f975 	bl	8007e86 <RTC_ByteToBcd2>
 8007b9c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007b9e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	78db      	ldrb	r3, [r3, #3]
 8007ba6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007ba8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 f967 	bl	8007e86 <RTC_ByteToBcd2>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007bbc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007bc4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	61fb      	str	r3, [r7, #28]
 8007bce:	e023      	b.n	8007c18 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d102      	bne.n	8007be4 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2200      	movs	r2, #0
 8007be2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	785b      	ldrb	r3, [r3, #1]
 8007bee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007bf0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007bf6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	78db      	ldrb	r3, [r3, #3]
 8007bfc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007bfe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c06:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007c08:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007c0e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007c14:	4313      	orrs	r3, r2
 8007c16:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007c20:	4313      	orrs	r3, r2
 8007c22:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	22ca      	movs	r2, #202	; 0xca
 8007c2a:	625a      	str	r2, [r3, #36]	; 0x24
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2253      	movs	r2, #83	; 0x53
 8007c32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c3c:	d148      	bne.n	8007cd0 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c4c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c5c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007c6e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c70:	f7fa fd6e 	bl	8002750 <HAL_GetTick>
 8007c74:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007c76:	e013      	b.n	8007ca0 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c78:	f7fa fd6a 	bl	8002750 <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c86:	d90b      	bls.n	8007ca0 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	22ff      	movs	r2, #255	; 0xff
 8007c8e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2203      	movs	r2, #3
 8007c94:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e06a      	b.n	8007d76 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0e4      	beq.n	8007c78 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69fa      	ldr	r2, [r7, #28]
 8007cb4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ccc:	609a      	str	r2, [r3, #8]
 8007cce:	e047      	b.n	8007d60 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689a      	ldr	r2, [r3, #8]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007cde:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689a      	ldr	r2, [r3, #8]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cee:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007d00:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d02:	f7fa fd25 	bl	8002750 <HAL_GetTick>
 8007d06:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007d08:	e013      	b.n	8007d32 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d0a:	f7fa fd21 	bl	8002750 <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d18:	d90b      	bls.n	8007d32 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	22ff      	movs	r2, #255	; 0xff
 8007d20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2203      	movs	r2, #3
 8007d26:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e021      	b.n	8007d76 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0e4      	beq.n	8007d0a <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	69fa      	ldr	r2, [r7, #28]
 8007d46:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689a      	ldr	r2, [r3, #8]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d5e:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	22ff      	movs	r2, #255	; 0xff
 8007d66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3724      	adds	r7, #36	; 0x24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd90      	pop	{r4, r7, pc}

08007d7e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d98:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d9a:	f7fa fcd9 	bl	8002750 <HAL_GetTick>
 8007d9e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007da0:	e009      	b.n	8007db6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007da2:	f7fa fcd5 	bl	8002750 <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007db0:	d901      	bls.n	8007db6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e007      	b.n	8007dc6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f003 0320 	and.w	r3, r3, #32
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0ee      	beq.n	8007da2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d122      	bne.n	8007e32 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007dfa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007dfc:	f7fa fca8 	bl	8002750 <HAL_GetTick>
 8007e00:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007e02:	e00c      	b.n	8007e1e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e04:	f7fa fca4 	bl	8002750 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e12:	d904      	bls.n	8007e1e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2204      	movs	r2, #4
 8007e18:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <RTC_EnterInitMode+0x64>
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d1e8      	bne.n	8007e04 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68da      	ldr	r2, [r3, #12]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e56:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 0320 	and.w	r3, r3, #32
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10a      	bne.n	8007e7c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff ff89 	bl	8007d7e <HAL_RTC_WaitForSynchro>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d004      	beq.n	8007e7c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2204      	movs	r2, #4
 8007e76:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b085      	sub	sp, #20
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007e94:	e005      	b.n	8007ea2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
 8007e9e:	3b0a      	subs	r3, #10
 8007ea0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007ea2:	79fb      	ldrb	r3, [r7, #7]
 8007ea4:	2b09      	cmp	r3, #9
 8007ea6:	d8f6      	bhi.n	8007e96 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	79fb      	ldrb	r3, [r7, #7]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	b2db      	uxtb	r3, r3
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	091b      	lsrs	r3, r3, #4
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	0092      	lsls	r2, r2, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	f003 030f 	and.w	r3, r3, #15
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	4413      	add	r3, r2
 8007eea:	b2db      	uxtb	r3, r3
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e07b      	b.n	8008002 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d108      	bne.n	8007f24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f1a:	d009      	beq.n	8007f30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	61da      	str	r2, [r3, #28]
 8007f22:	e005      	b.n	8007f30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d106      	bne.n	8007f50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fa f958 	bl	8002200 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f78:	431a      	orrs	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f82:	431a      	orrs	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007faa:	431a      	orrs	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb4:	ea42 0103 	orr.w	r1, r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	0c1b      	lsrs	r3, r3, #16
 8007fce:	f003 0104 	and.w	r1, r3, #4
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd6:	f003 0210 	and.w	r2, r3, #16
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69da      	ldr	r2, [r3, #28]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ff0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b088      	sub	sp, #32
 800800e:	af00      	add	r7, sp, #0
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	603b      	str	r3, [r7, #0]
 8008016:	4613      	mov	r3, r2
 8008018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_SPI_Transmit+0x22>
 8008028:	2302      	movs	r3, #2
 800802a:	e126      	b.n	800827a <HAL_SPI_Transmit+0x270>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008034:	f7fa fb8c 	bl	8002750 <HAL_GetTick>
 8008038:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b01      	cmp	r3, #1
 8008048:	d002      	beq.n	8008050 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800804a:	2302      	movs	r3, #2
 800804c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800804e:	e10b      	b.n	8008268 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d002      	beq.n	800805c <HAL_SPI_Transmit+0x52>
 8008056:	88fb      	ldrh	r3, [r7, #6]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d102      	bne.n	8008062 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008060:	e102      	b.n	8008268 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2203      	movs	r2, #3
 8008066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	88fa      	ldrh	r2, [r7, #6]
 800807a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	88fa      	ldrh	r2, [r7, #6]
 8008080:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a8:	d10f      	bne.n	80080ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d4:	2b40      	cmp	r3, #64	; 0x40
 80080d6:	d007      	beq.n	80080e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080f0:	d14b      	bne.n	800818a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d002      	beq.n	8008100 <HAL_SPI_Transmit+0xf6>
 80080fa:	8afb      	ldrh	r3, [r7, #22]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d13e      	bne.n	800817e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008104:	881a      	ldrh	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008110:	1c9a      	adds	r2, r3, #2
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800811a:	b29b      	uxth	r3, r3
 800811c:	3b01      	subs	r3, #1
 800811e:	b29a      	uxth	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008124:	e02b      	b.n	800817e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f003 0302 	and.w	r3, r3, #2
 8008130:	2b02      	cmp	r3, #2
 8008132:	d112      	bne.n	800815a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008138:	881a      	ldrh	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008144:	1c9a      	adds	r2, r3, #2
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800814e:	b29b      	uxth	r3, r3
 8008150:	3b01      	subs	r3, #1
 8008152:	b29a      	uxth	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	86da      	strh	r2, [r3, #54]	; 0x36
 8008158:	e011      	b.n	800817e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800815a:	f7fa faf9 	bl	8002750 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	429a      	cmp	r2, r3
 8008168:	d803      	bhi.n	8008172 <HAL_SPI_Transmit+0x168>
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008170:	d102      	bne.n	8008178 <HAL_SPI_Transmit+0x16e>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d102      	bne.n	800817e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800817c:	e074      	b.n	8008268 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008182:	b29b      	uxth	r3, r3
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1ce      	bne.n	8008126 <HAL_SPI_Transmit+0x11c>
 8008188:	e04c      	b.n	8008224 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <HAL_SPI_Transmit+0x18e>
 8008192:	8afb      	ldrh	r3, [r7, #22]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d140      	bne.n	800821a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	330c      	adds	r3, #12
 80081a2:	7812      	ldrb	r2, [r2, #0]
 80081a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	3b01      	subs	r3, #1
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80081be:	e02c      	b.n	800821a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d113      	bne.n	80081f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	330c      	adds	r3, #12
 80081d8:	7812      	ldrb	r2, [r2, #0]
 80081da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	3b01      	subs	r3, #1
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80081f4:	e011      	b.n	800821a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081f6:	f7fa faab 	bl	8002750 <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d803      	bhi.n	800820e <HAL_SPI_Transmit+0x204>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820c:	d102      	bne.n	8008214 <HAL_SPI_Transmit+0x20a>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d102      	bne.n	800821a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008218:	e026      	b.n	8008268 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800821e:	b29b      	uxth	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1cd      	bne.n	80081c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 fa55 	bl	80086d8 <SPI_EndRxTxTransaction>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2220      	movs	r2, #32
 8008238:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10a      	bne.n	8008258 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008242:	2300      	movs	r3, #0
 8008244:	613b      	str	r3, [r7, #16]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	613b      	str	r3, [r7, #16]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	613b      	str	r3, [r7, #16]
 8008256:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	77fb      	strb	r3, [r7, #31]
 8008264:	e000      	b.n	8008268 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008266:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008278:	7ffb      	ldrb	r3, [r7, #31]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3720      	adds	r7, #32
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b08c      	sub	sp, #48	; 0x30
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	607a      	str	r2, [r7, #4]
 800828e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008290:	2301      	movs	r3, #1
 8008292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d101      	bne.n	80082a8 <HAL_SPI_TransmitReceive+0x26>
 80082a4:	2302      	movs	r3, #2
 80082a6:	e18a      	b.n	80085be <HAL_SPI_TransmitReceive+0x33c>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082b0:	f7fa fa4e 	bl	8002750 <HAL_GetTick>
 80082b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80082c6:	887b      	ldrh	r3, [r7, #2]
 80082c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80082ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d00f      	beq.n	80082f2 <HAL_SPI_TransmitReceive+0x70>
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082d8:	d107      	bne.n	80082ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d103      	bne.n	80082ea <HAL_SPI_TransmitReceive+0x68>
 80082e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d003      	beq.n	80082f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80082ea:	2302      	movs	r3, #2
 80082ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80082f0:	e15b      	b.n	80085aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <HAL_SPI_TransmitReceive+0x82>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <HAL_SPI_TransmitReceive+0x82>
 80082fe:	887b      	ldrh	r3, [r7, #2]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d103      	bne.n	800830c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800830a:	e14e      	b.n	80085aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b04      	cmp	r3, #4
 8008316:	d003      	beq.n	8008320 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2205      	movs	r2, #5
 800831c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	887a      	ldrh	r2, [r7, #2]
 8008330:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	887a      	ldrh	r2, [r7, #2]
 8008336:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	887a      	ldrh	r2, [r7, #2]
 8008342:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	887a      	ldrh	r2, [r7, #2]
 8008348:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008360:	2b40      	cmp	r3, #64	; 0x40
 8008362:	d007      	beq.n	8008374 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008372:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800837c:	d178      	bne.n	8008470 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <HAL_SPI_TransmitReceive+0x10a>
 8008386:	8b7b      	ldrh	r3, [r7, #26]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d166      	bne.n	800845a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008390:	881a      	ldrh	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839c:	1c9a      	adds	r2, r3, #2
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	3b01      	subs	r3, #1
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083b0:	e053      	b.n	800845a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d11b      	bne.n	80083f8 <HAL_SPI_TransmitReceive+0x176>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d016      	beq.n	80083f8 <HAL_SPI_TransmitReceive+0x176>
 80083ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d113      	bne.n	80083f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d4:	881a      	ldrh	r2, [r3, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e0:	1c9a      	adds	r2, r3, #2
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	3b01      	subs	r3, #1
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b01      	cmp	r3, #1
 8008404:	d119      	bne.n	800843a <HAL_SPI_TransmitReceive+0x1b8>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800840a:	b29b      	uxth	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d014      	beq.n	800843a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68da      	ldr	r2, [r3, #12]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841a:	b292      	uxth	r2, r2
 800841c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008422:	1c9a      	adds	r2, r3, #2
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800842c:	b29b      	uxth	r3, r3
 800842e:	3b01      	subs	r3, #1
 8008430:	b29a      	uxth	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008436:	2301      	movs	r3, #1
 8008438:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800843a:	f7fa f989 	bl	8002750 <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008446:	429a      	cmp	r2, r3
 8008448:	d807      	bhi.n	800845a <HAL_SPI_TransmitReceive+0x1d8>
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008450:	d003      	beq.n	800845a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008458:	e0a7      	b.n	80085aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800845e:	b29b      	uxth	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1a6      	bne.n	80083b2 <HAL_SPI_TransmitReceive+0x130>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008468:	b29b      	uxth	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1a1      	bne.n	80083b2 <HAL_SPI_TransmitReceive+0x130>
 800846e:	e07c      	b.n	800856a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <HAL_SPI_TransmitReceive+0x1fc>
 8008478:	8b7b      	ldrh	r3, [r7, #26]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d16b      	bne.n	8008556 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	330c      	adds	r3, #12
 8008488:	7812      	ldrb	r2, [r2, #0]
 800848a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800849a:	b29b      	uxth	r3, r3
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084a4:	e057      	b.n	8008556 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f003 0302 	and.w	r3, r3, #2
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d11c      	bne.n	80084ee <HAL_SPI_TransmitReceive+0x26c>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d017      	beq.n	80084ee <HAL_SPI_TransmitReceive+0x26c>
 80084be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d114      	bne.n	80084ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	330c      	adds	r3, #12
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	3b01      	subs	r3, #1
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d119      	bne.n	8008530 <HAL_SPI_TransmitReceive+0x2ae>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008500:	b29b      	uxth	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d014      	beq.n	8008530 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008510:	b2d2      	uxtb	r2, r2
 8008512:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008522:	b29b      	uxth	r3, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	b29a      	uxth	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800852c:	2301      	movs	r3, #1
 800852e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008530:	f7fa f90e 	bl	8002750 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800853c:	429a      	cmp	r2, r3
 800853e:	d803      	bhi.n	8008548 <HAL_SPI_TransmitReceive+0x2c6>
 8008540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008546:	d102      	bne.n	800854e <HAL_SPI_TransmitReceive+0x2cc>
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	2b00      	cmp	r3, #0
 800854c:	d103      	bne.n	8008556 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008554:	e029      	b.n	80085aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800855a:	b29b      	uxth	r3, r3
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1a2      	bne.n	80084a6 <HAL_SPI_TransmitReceive+0x224>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008564:	b29b      	uxth	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d19d      	bne.n	80084a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800856a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 f8b2 	bl	80086d8 <SPI_EndRxTxTransaction>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d006      	beq.n	8008588 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2220      	movs	r2, #32
 8008584:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008586:	e010      	b.n	80085aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10b      	bne.n	80085a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008590:	2300      	movs	r3, #0
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	617b      	str	r3, [r7, #20]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	617b      	str	r3, [r7, #20]
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	e000      	b.n	80085aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80085a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80085ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3730      	adds	r7, #48	; 0x30
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b088      	sub	sp, #32
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	603b      	str	r3, [r7, #0]
 80085d4:	4613      	mov	r3, r2
 80085d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80085d8:	f7fa f8ba 	bl	8002750 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	1a9b      	subs	r3, r3, r2
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	4413      	add	r3, r2
 80085e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085e8:	f7fa f8b2 	bl	8002750 <HAL_GetTick>
 80085ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80085ee:	4b39      	ldr	r3, [pc, #228]	; (80086d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	015b      	lsls	r3, r3, #5
 80085f4:	0d1b      	lsrs	r3, r3, #20
 80085f6:	69fa      	ldr	r2, [r7, #28]
 80085f8:	fb02 f303 	mul.w	r3, r2, r3
 80085fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085fe:	e054      	b.n	80086aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008606:	d050      	beq.n	80086aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008608:	f7fa f8a2 	bl	8002750 <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	69fa      	ldr	r2, [r7, #28]
 8008614:	429a      	cmp	r2, r3
 8008616:	d902      	bls.n	800861e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d13d      	bne.n	800869a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800862c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008636:	d111      	bne.n	800865c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008640:	d004      	beq.n	800864c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800864a:	d107      	bne.n	800865c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800865a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008664:	d10f      	bne.n	8008686 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008684:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e017      	b.n	80086ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	3b01      	subs	r3, #1
 80086a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	4013      	ands	r3, r2
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	bf0c      	ite	eq
 80086ba:	2301      	moveq	r3, #1
 80086bc:	2300      	movne	r3, #0
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	461a      	mov	r2, r3
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d19b      	bne.n	8008600 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3720      	adds	r7, #32
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000004 	.word	0x20000004

080086d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80086e4:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <SPI_EndRxTxTransaction+0x7c>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a1b      	ldr	r2, [pc, #108]	; (8008758 <SPI_EndRxTxTransaction+0x80>)
 80086ea:	fba2 2303 	umull	r2, r3, r2, r3
 80086ee:	0d5b      	lsrs	r3, r3, #21
 80086f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086f4:	fb02 f303 	mul.w	r3, r2, r3
 80086f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008702:	d112      	bne.n	800872a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2200      	movs	r2, #0
 800870c:	2180      	movs	r1, #128	; 0x80
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff ff5a 	bl	80085c8 <SPI_WaitFlagStateUntilTimeout>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d016      	beq.n	8008748 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800871e:	f043 0220 	orr.w	r2, r3, #32
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e00f      	b.n	800874a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00a      	beq.n	8008746 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	3b01      	subs	r3, #1
 8008734:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008740:	2b80      	cmp	r3, #128	; 0x80
 8008742:	d0f2      	beq.n	800872a <SPI_EndRxTxTransaction+0x52>
 8008744:	e000      	b.n	8008748 <SPI_EndRxTxTransaction+0x70>
        break;
 8008746:	bf00      	nop
  }

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20000004 	.word	0x20000004
 8008758:	165e9f81 	.word	0x165e9f81

0800875c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e041      	b.n	80087f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d106      	bne.n	8008788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7f9 fdb4 	bl	80022f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2202      	movs	r2, #2
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3304      	adds	r3, #4
 8008798:	4619      	mov	r1, r3
 800879a:	4610      	mov	r0, r2
 800879c:	f000 fa96 	bl	8008ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b01      	cmp	r3, #1
 800880e:	d001      	beq.n	8008814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e04e      	b.n	80088b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68da      	ldr	r2, [r3, #12]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a23      	ldr	r2, [pc, #140]	; (80088c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d022      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883e:	d01d      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a1f      	ldr	r2, [pc, #124]	; (80088c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d018      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a1e      	ldr	r2, [pc, #120]	; (80088c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d013      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a1c      	ldr	r2, [pc, #112]	; (80088cc <HAL_TIM_Base_Start_IT+0xd0>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d00e      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a1b      	ldr	r2, [pc, #108]	; (80088d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d009      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a19      	ldr	r2, [pc, #100]	; (80088d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d004      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a18      	ldr	r2, [pc, #96]	; (80088d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d111      	bne.n	80088a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b06      	cmp	r3, #6
 800888c:	d010      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f042 0201 	orr.w	r2, r2, #1
 800889c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800889e:	e007      	b.n	80088b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f042 0201 	orr.w	r2, r2, #1
 80088ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	40010000 	.word	0x40010000
 80088c4:	40000400 	.word	0x40000400
 80088c8:	40000800 	.word	0x40000800
 80088cc:	40000c00 	.word	0x40000c00
 80088d0:	40010400 	.word	0x40010400
 80088d4:	40014000 	.word	0x40014000
 80088d8:	40001800 	.word	0x40001800

080088dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d122      	bne.n	8008938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d11b      	bne.n	8008938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f06f 0202 	mvn.w	r2, #2
 8008908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f9b5 	bl	8008c8e <HAL_TIM_IC_CaptureCallback>
 8008924:	e005      	b.n	8008932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f9a7 	bl	8008c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f9b8 	bl	8008ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	f003 0304 	and.w	r3, r3, #4
 8008942:	2b04      	cmp	r3, #4
 8008944:	d122      	bne.n	800898c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b04      	cmp	r3, #4
 8008952:	d11b      	bne.n	800898c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f06f 0204 	mvn.w	r2, #4
 800895c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2202      	movs	r2, #2
 8008962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f98b 	bl	8008c8e <HAL_TIM_IC_CaptureCallback>
 8008978:	e005      	b.n	8008986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f97d 	bl	8008c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f98e 	bl	8008ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	f003 0308 	and.w	r3, r3, #8
 8008996:	2b08      	cmp	r3, #8
 8008998:	d122      	bne.n	80089e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	f003 0308 	and.w	r3, r3, #8
 80089a4:	2b08      	cmp	r3, #8
 80089a6:	d11b      	bne.n	80089e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f06f 0208 	mvn.w	r2, #8
 80089b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2204      	movs	r2, #4
 80089b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	f003 0303 	and.w	r3, r3, #3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d003      	beq.n	80089ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f961 	bl	8008c8e <HAL_TIM_IC_CaptureCallback>
 80089cc:	e005      	b.n	80089da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f953 	bl	8008c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f964 	bl	8008ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	f003 0310 	and.w	r3, r3, #16
 80089ea:	2b10      	cmp	r3, #16
 80089ec:	d122      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b10      	cmp	r3, #16
 80089fa:	d11b      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f06f 0210 	mvn.w	r2, #16
 8008a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2208      	movs	r2, #8
 8008a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f937 	bl	8008c8e <HAL_TIM_IC_CaptureCallback>
 8008a20:	e005      	b.n	8008a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f929 	bl	8008c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f93a 	bl	8008ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d10e      	bne.n	8008a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d107      	bne.n	8008a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f06f 0201 	mvn.w	r2, #1
 8008a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7f9 fa60 	bl	8001f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6a:	2b80      	cmp	r3, #128	; 0x80
 8008a6c:	d10e      	bne.n	8008a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a78:	2b80      	cmp	r3, #128	; 0x80
 8008a7a:	d107      	bne.n	8008a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fae0 	bl	800904c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a96:	2b40      	cmp	r3, #64	; 0x40
 8008a98:	d10e      	bne.n	8008ab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa4:	2b40      	cmp	r3, #64	; 0x40
 8008aa6:	d107      	bne.n	8008ab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f8ff 	bl	8008cb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	f003 0320 	and.w	r3, r3, #32
 8008ac2:	2b20      	cmp	r3, #32
 8008ac4:	d10e      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	f003 0320 	and.w	r3, r3, #32
 8008ad0:	2b20      	cmp	r3, #32
 8008ad2:	d107      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f06f 0220 	mvn.w	r2, #32
 8008adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 faaa 	bl	8009038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ae4:	bf00      	nop
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d101      	bne.n	8008b08 <HAL_TIM_ConfigClockSource+0x1c>
 8008b04:	2302      	movs	r3, #2
 8008b06:	e0b4      	b.n	8008c72 <HAL_TIM_ConfigClockSource+0x186>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2202      	movs	r2, #2
 8008b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b40:	d03e      	beq.n	8008bc0 <HAL_TIM_ConfigClockSource+0xd4>
 8008b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b46:	f200 8087 	bhi.w	8008c58 <HAL_TIM_ConfigClockSource+0x16c>
 8008b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b4e:	f000 8086 	beq.w	8008c5e <HAL_TIM_ConfigClockSource+0x172>
 8008b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b56:	d87f      	bhi.n	8008c58 <HAL_TIM_ConfigClockSource+0x16c>
 8008b58:	2b70      	cmp	r3, #112	; 0x70
 8008b5a:	d01a      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0xa6>
 8008b5c:	2b70      	cmp	r3, #112	; 0x70
 8008b5e:	d87b      	bhi.n	8008c58 <HAL_TIM_ConfigClockSource+0x16c>
 8008b60:	2b60      	cmp	r3, #96	; 0x60
 8008b62:	d050      	beq.n	8008c06 <HAL_TIM_ConfigClockSource+0x11a>
 8008b64:	2b60      	cmp	r3, #96	; 0x60
 8008b66:	d877      	bhi.n	8008c58 <HAL_TIM_ConfigClockSource+0x16c>
 8008b68:	2b50      	cmp	r3, #80	; 0x50
 8008b6a:	d03c      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0xfa>
 8008b6c:	2b50      	cmp	r3, #80	; 0x50
 8008b6e:	d873      	bhi.n	8008c58 <HAL_TIM_ConfigClockSource+0x16c>
 8008b70:	2b40      	cmp	r3, #64	; 0x40
 8008b72:	d058      	beq.n	8008c26 <HAL_TIM_ConfigClockSource+0x13a>
 8008b74:	2b40      	cmp	r3, #64	; 0x40
 8008b76:	d86f      	bhi.n	8008c58 <HAL_TIM_ConfigClockSource+0x16c>
 8008b78:	2b30      	cmp	r3, #48	; 0x30
 8008b7a:	d064      	beq.n	8008c46 <HAL_TIM_ConfigClockSource+0x15a>
 8008b7c:	2b30      	cmp	r3, #48	; 0x30
 8008b7e:	d86b      	bhi.n	8008c58 <HAL_TIM_ConfigClockSource+0x16c>
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d060      	beq.n	8008c46 <HAL_TIM_ConfigClockSource+0x15a>
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	d867      	bhi.n	8008c58 <HAL_TIM_ConfigClockSource+0x16c>
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d05c      	beq.n	8008c46 <HAL_TIM_ConfigClockSource+0x15a>
 8008b8c:	2b10      	cmp	r3, #16
 8008b8e:	d05a      	beq.n	8008c46 <HAL_TIM_ConfigClockSource+0x15a>
 8008b90:	e062      	b.n	8008c58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6818      	ldr	r0, [r3, #0]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	6899      	ldr	r1, [r3, #8]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	f000 f9ad 	bl	8008f00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	609a      	str	r2, [r3, #8]
      break;
 8008bbe:	e04f      	b.n	8008c60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6818      	ldr	r0, [r3, #0]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	6899      	ldr	r1, [r3, #8]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f000 f996 	bl	8008f00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689a      	ldr	r2, [r3, #8]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008be2:	609a      	str	r2, [r3, #8]
      break;
 8008be4:	e03c      	b.n	8008c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6818      	ldr	r0, [r3, #0]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	6859      	ldr	r1, [r3, #4]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	f000 f90a 	bl	8008e0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2150      	movs	r1, #80	; 0x50
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 f963 	bl	8008eca <TIM_ITRx_SetConfig>
      break;
 8008c04:	e02c      	b.n	8008c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6818      	ldr	r0, [r3, #0]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	6859      	ldr	r1, [r3, #4]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	461a      	mov	r2, r3
 8008c14:	f000 f929 	bl	8008e6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2160      	movs	r1, #96	; 0x60
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 f953 	bl	8008eca <TIM_ITRx_SetConfig>
      break;
 8008c24:	e01c      	b.n	8008c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6818      	ldr	r0, [r3, #0]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	6859      	ldr	r1, [r3, #4]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	461a      	mov	r2, r3
 8008c34:	f000 f8ea 	bl	8008e0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2140      	movs	r1, #64	; 0x40
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 f943 	bl	8008eca <TIM_ITRx_SetConfig>
      break;
 8008c44:	e00c      	b.n	8008c60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	4610      	mov	r0, r2
 8008c52:	f000 f93a 	bl	8008eca <TIM_ITRx_SetConfig>
      break;
 8008c56:	e003      	b.n	8008c60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c5c:	e000      	b.n	8008c60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c82:	bf00      	nop
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008caa:	bf00      	nop
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cbe:	bf00      	nop
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
	...

08008ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a40      	ldr	r2, [pc, #256]	; (8008de0 <TIM_Base_SetConfig+0x114>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d013      	beq.n	8008d0c <TIM_Base_SetConfig+0x40>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cea:	d00f      	beq.n	8008d0c <TIM_Base_SetConfig+0x40>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a3d      	ldr	r2, [pc, #244]	; (8008de4 <TIM_Base_SetConfig+0x118>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d00b      	beq.n	8008d0c <TIM_Base_SetConfig+0x40>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a3c      	ldr	r2, [pc, #240]	; (8008de8 <TIM_Base_SetConfig+0x11c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d007      	beq.n	8008d0c <TIM_Base_SetConfig+0x40>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a3b      	ldr	r2, [pc, #236]	; (8008dec <TIM_Base_SetConfig+0x120>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d003      	beq.n	8008d0c <TIM_Base_SetConfig+0x40>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a3a      	ldr	r2, [pc, #232]	; (8008df0 <TIM_Base_SetConfig+0x124>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d108      	bne.n	8008d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a2f      	ldr	r2, [pc, #188]	; (8008de0 <TIM_Base_SetConfig+0x114>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d02b      	beq.n	8008d7e <TIM_Base_SetConfig+0xb2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d2c:	d027      	beq.n	8008d7e <TIM_Base_SetConfig+0xb2>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a2c      	ldr	r2, [pc, #176]	; (8008de4 <TIM_Base_SetConfig+0x118>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d023      	beq.n	8008d7e <TIM_Base_SetConfig+0xb2>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a2b      	ldr	r2, [pc, #172]	; (8008de8 <TIM_Base_SetConfig+0x11c>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d01f      	beq.n	8008d7e <TIM_Base_SetConfig+0xb2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a2a      	ldr	r2, [pc, #168]	; (8008dec <TIM_Base_SetConfig+0x120>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d01b      	beq.n	8008d7e <TIM_Base_SetConfig+0xb2>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a29      	ldr	r2, [pc, #164]	; (8008df0 <TIM_Base_SetConfig+0x124>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d017      	beq.n	8008d7e <TIM_Base_SetConfig+0xb2>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a28      	ldr	r2, [pc, #160]	; (8008df4 <TIM_Base_SetConfig+0x128>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d013      	beq.n	8008d7e <TIM_Base_SetConfig+0xb2>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a27      	ldr	r2, [pc, #156]	; (8008df8 <TIM_Base_SetConfig+0x12c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d00f      	beq.n	8008d7e <TIM_Base_SetConfig+0xb2>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a26      	ldr	r2, [pc, #152]	; (8008dfc <TIM_Base_SetConfig+0x130>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d00b      	beq.n	8008d7e <TIM_Base_SetConfig+0xb2>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a25      	ldr	r2, [pc, #148]	; (8008e00 <TIM_Base_SetConfig+0x134>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d007      	beq.n	8008d7e <TIM_Base_SetConfig+0xb2>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a24      	ldr	r2, [pc, #144]	; (8008e04 <TIM_Base_SetConfig+0x138>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d003      	beq.n	8008d7e <TIM_Base_SetConfig+0xb2>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a23      	ldr	r2, [pc, #140]	; (8008e08 <TIM_Base_SetConfig+0x13c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d108      	bne.n	8008d90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	689a      	ldr	r2, [r3, #8]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a0a      	ldr	r2, [pc, #40]	; (8008de0 <TIM_Base_SetConfig+0x114>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d003      	beq.n	8008dc4 <TIM_Base_SetConfig+0xf8>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a0c      	ldr	r2, [pc, #48]	; (8008df0 <TIM_Base_SetConfig+0x124>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d103      	bne.n	8008dcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	691a      	ldr	r2, [r3, #16]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	615a      	str	r2, [r3, #20]
}
 8008dd2:	bf00      	nop
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	40010000 	.word	0x40010000
 8008de4:	40000400 	.word	0x40000400
 8008de8:	40000800 	.word	0x40000800
 8008dec:	40000c00 	.word	0x40000c00
 8008df0:	40010400 	.word	0x40010400
 8008df4:	40014000 	.word	0x40014000
 8008df8:	40014400 	.word	0x40014400
 8008dfc:	40014800 	.word	0x40014800
 8008e00:	40001800 	.word	0x40001800
 8008e04:	40001c00 	.word	0x40001c00
 8008e08:	40002000 	.word	0x40002000

08008e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	f023 0201 	bic.w	r2, r3, #1
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	011b      	lsls	r3, r3, #4
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	f023 030a 	bic.w	r3, r3, #10
 8008e48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	621a      	str	r2, [r3, #32]
}
 8008e5e:	bf00      	nop
 8008e60:	371c      	adds	r7, #28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b087      	sub	sp, #28
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	60f8      	str	r0, [r7, #12]
 8008e72:	60b9      	str	r1, [r7, #8]
 8008e74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	f023 0210 	bic.w	r2, r3, #16
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6a1b      	ldr	r3, [r3, #32]
 8008e8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	031b      	lsls	r3, r3, #12
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ea6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	011b      	lsls	r3, r3, #4
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	621a      	str	r2, [r3, #32]
}
 8008ebe:	bf00      	nop
 8008ec0:	371c      	adds	r7, #28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b085      	sub	sp, #20
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	f043 0307 	orr.w	r3, r3, #7
 8008eec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	609a      	str	r2, [r3, #8]
}
 8008ef4:	bf00      	nop
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	021a      	lsls	r2, r3, #8
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	431a      	orrs	r2, r3
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	609a      	str	r2, [r3, #8]
}
 8008f34:	bf00      	nop
 8008f36:	371c      	adds	r7, #28
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d101      	bne.n	8008f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f54:	2302      	movs	r3, #2
 8008f56:	e05a      	b.n	800900e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2202      	movs	r2, #2
 8008f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a21      	ldr	r2, [pc, #132]	; (800901c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d022      	beq.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fa4:	d01d      	beq.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a1d      	ldr	r2, [pc, #116]	; (8009020 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d018      	beq.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a1b      	ldr	r2, [pc, #108]	; (8009024 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d013      	beq.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a1a      	ldr	r2, [pc, #104]	; (8009028 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d00e      	beq.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a18      	ldr	r2, [pc, #96]	; (800902c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d009      	beq.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a17      	ldr	r2, [pc, #92]	; (8009030 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d004      	beq.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a15      	ldr	r2, [pc, #84]	; (8009034 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d10c      	bne.n	8008ffc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	40010000 	.word	0x40010000
 8009020:	40000400 	.word	0x40000400
 8009024:	40000800 	.word	0x40000800
 8009028:	40000c00 	.word	0x40000c00
 800902c:	40010400 	.word	0x40010400
 8009030:	40014000 	.word	0x40014000
 8009034:	40001800 	.word	0x40001800

08009038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d101      	bne.n	8009072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e03f      	b.n	80090f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d106      	bne.n	800908c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7f9 f970 	bl	800236c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2224      	movs	r2, #36	; 0x24
 8009090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68da      	ldr	r2, [r3, #12]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f929 	bl	80092fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	691a      	ldr	r2, [r3, #16]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	695a      	ldr	r2, [r3, #20]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68da      	ldr	r2, [r3, #12]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2220      	movs	r2, #32
 80090e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b08a      	sub	sp, #40	; 0x28
 80090fe:	af02      	add	r7, sp, #8
 8009100:	60f8      	str	r0, [r7, #12]
 8009102:	60b9      	str	r1, [r7, #8]
 8009104:	603b      	str	r3, [r7, #0]
 8009106:	4613      	mov	r3, r2
 8009108:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800910a:	2300      	movs	r3, #0
 800910c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b20      	cmp	r3, #32
 8009118:	d17c      	bne.n	8009214 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <HAL_UART_Transmit+0x2c>
 8009120:	88fb      	ldrh	r3, [r7, #6]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e075      	b.n	8009216 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009130:	2b01      	cmp	r3, #1
 8009132:	d101      	bne.n	8009138 <HAL_UART_Transmit+0x3e>
 8009134:	2302      	movs	r3, #2
 8009136:	e06e      	b.n	8009216 <HAL_UART_Transmit+0x11c>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2221      	movs	r2, #33	; 0x21
 800914a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800914e:	f7f9 faff 	bl	8002750 <HAL_GetTick>
 8009152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	88fa      	ldrh	r2, [r7, #6]
 8009158:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	88fa      	ldrh	r2, [r7, #6]
 800915e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009168:	d108      	bne.n	800917c <HAL_UART_Transmit+0x82>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d104      	bne.n	800917c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009172:	2300      	movs	r3, #0
 8009174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	61bb      	str	r3, [r7, #24]
 800917a:	e003      	b.n	8009184 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009180:	2300      	movs	r3, #0
 8009182:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800918c:	e02a      	b.n	80091e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2200      	movs	r2, #0
 8009196:	2180      	movs	r1, #128	; 0x80
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 f840 	bl	800921e <UART_WaitOnFlagUntilTimeout>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e036      	b.n	8009216 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10b      	bne.n	80091c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	461a      	mov	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	3302      	adds	r3, #2
 80091c2:	61bb      	str	r3, [r7, #24]
 80091c4:	e007      	b.n	80091d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	781a      	ldrb	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	3301      	adds	r3, #1
 80091d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091da:	b29b      	uxth	r3, r3
 80091dc:	3b01      	subs	r3, #1
 80091de:	b29a      	uxth	r2, r3
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1cf      	bne.n	800918e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2200      	movs	r2, #0
 80091f6:	2140      	movs	r1, #64	; 0x40
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 f810 	bl	800921e <UART_WaitOnFlagUntilTimeout>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e006      	b.n	8009216 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2220      	movs	r2, #32
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	e000      	b.n	8009216 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009214:	2302      	movs	r3, #2
  }
}
 8009216:	4618      	mov	r0, r3
 8009218:	3720      	adds	r7, #32
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b090      	sub	sp, #64	; 0x40
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	603b      	str	r3, [r7, #0]
 800922a:	4613      	mov	r3, r2
 800922c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800922e:	e050      	b.n	80092d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009236:	d04c      	beq.n	80092d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800923a:	2b00      	cmp	r3, #0
 800923c:	d007      	beq.n	800924e <UART_WaitOnFlagUntilTimeout+0x30>
 800923e:	f7f9 fa87 	bl	8002750 <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800924a:	429a      	cmp	r2, r3
 800924c:	d241      	bcs.n	80092d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	330c      	adds	r3, #12
 8009254:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009258:	e853 3f00 	ldrex	r3, [r3]
 800925c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	330c      	adds	r3, #12
 800926c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800926e:	637a      	str	r2, [r7, #52]	; 0x34
 8009270:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e5      	bne.n	800924e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3314      	adds	r3, #20
 8009288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	e853 3f00 	ldrex	r3, [r3]
 8009290:	613b      	str	r3, [r7, #16]
   return(result);
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f023 0301 	bic.w	r3, r3, #1
 8009298:	63bb      	str	r3, [r7, #56]	; 0x38
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	3314      	adds	r3, #20
 80092a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092a2:	623a      	str	r2, [r7, #32]
 80092a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	69f9      	ldr	r1, [r7, #28]
 80092a8:	6a3a      	ldr	r2, [r7, #32]
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e5      	bne.n	8009282 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2220      	movs	r2, #32
 80092ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2220      	movs	r2, #32
 80092c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e00f      	b.n	80092f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	4013      	ands	r3, r2
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	429a      	cmp	r2, r3
 80092e0:	bf0c      	ite	eq
 80092e2:	2301      	moveq	r3, #1
 80092e4:	2300      	movne	r3, #0
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	461a      	mov	r2, r3
 80092ea:	79fb      	ldrb	r3, [r7, #7]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d09f      	beq.n	8009230 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3740      	adds	r7, #64	; 0x40
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009300:	b0c0      	sub	sp, #256	; 0x100
 8009302:	af00      	add	r7, sp, #0
 8009304:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009318:	68d9      	ldr	r1, [r3, #12]
 800931a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	ea40 0301 	orr.w	r3, r0, r1
 8009324:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	431a      	orrs	r2, r3
 8009334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	431a      	orrs	r2, r3
 800933c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	4313      	orrs	r3, r2
 8009344:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009354:	f021 010c 	bic.w	r1, r1, #12
 8009358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009362:	430b      	orrs	r3, r1
 8009364:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	695b      	ldr	r3, [r3, #20]
 800936e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009376:	6999      	ldr	r1, [r3, #24]
 8009378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	ea40 0301 	orr.w	r3, r0, r1
 8009382:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	4b8f      	ldr	r3, [pc, #572]	; (80095c8 <UART_SetConfig+0x2cc>)
 800938c:	429a      	cmp	r2, r3
 800938e:	d005      	beq.n	800939c <UART_SetConfig+0xa0>
 8009390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	4b8d      	ldr	r3, [pc, #564]	; (80095cc <UART_SetConfig+0x2d0>)
 8009398:	429a      	cmp	r2, r3
 800939a:	d104      	bne.n	80093a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800939c:	f7fd f946 	bl	800662c <HAL_RCC_GetPCLK2Freq>
 80093a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80093a4:	e003      	b.n	80093ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093a6:	f7fd f92d 	bl	8006604 <HAL_RCC_GetPCLK1Freq>
 80093aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b2:	69db      	ldr	r3, [r3, #28]
 80093b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093b8:	f040 810c 	bne.w	80095d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093c0:	2200      	movs	r2, #0
 80093c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80093c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80093ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80093ce:	4622      	mov	r2, r4
 80093d0:	462b      	mov	r3, r5
 80093d2:	1891      	adds	r1, r2, r2
 80093d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80093d6:	415b      	adcs	r3, r3
 80093d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80093de:	4621      	mov	r1, r4
 80093e0:	eb12 0801 	adds.w	r8, r2, r1
 80093e4:	4629      	mov	r1, r5
 80093e6:	eb43 0901 	adc.w	r9, r3, r1
 80093ea:	f04f 0200 	mov.w	r2, #0
 80093ee:	f04f 0300 	mov.w	r3, #0
 80093f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093fe:	4690      	mov	r8, r2
 8009400:	4699      	mov	r9, r3
 8009402:	4623      	mov	r3, r4
 8009404:	eb18 0303 	adds.w	r3, r8, r3
 8009408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800940c:	462b      	mov	r3, r5
 800940e:	eb49 0303 	adc.w	r3, r9, r3
 8009412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009422:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009426:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800942a:	460b      	mov	r3, r1
 800942c:	18db      	adds	r3, r3, r3
 800942e:	653b      	str	r3, [r7, #80]	; 0x50
 8009430:	4613      	mov	r3, r2
 8009432:	eb42 0303 	adc.w	r3, r2, r3
 8009436:	657b      	str	r3, [r7, #84]	; 0x54
 8009438:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800943c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009440:	f7f7 fbd2 	bl	8000be8 <__aeabi_uldivmod>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4b61      	ldr	r3, [pc, #388]	; (80095d0 <UART_SetConfig+0x2d4>)
 800944a:	fba3 2302 	umull	r2, r3, r3, r2
 800944e:	095b      	lsrs	r3, r3, #5
 8009450:	011c      	lsls	r4, r3, #4
 8009452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009456:	2200      	movs	r2, #0
 8009458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800945c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009460:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009464:	4642      	mov	r2, r8
 8009466:	464b      	mov	r3, r9
 8009468:	1891      	adds	r1, r2, r2
 800946a:	64b9      	str	r1, [r7, #72]	; 0x48
 800946c:	415b      	adcs	r3, r3
 800946e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009470:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009474:	4641      	mov	r1, r8
 8009476:	eb12 0a01 	adds.w	sl, r2, r1
 800947a:	4649      	mov	r1, r9
 800947c:	eb43 0b01 	adc.w	fp, r3, r1
 8009480:	f04f 0200 	mov.w	r2, #0
 8009484:	f04f 0300 	mov.w	r3, #0
 8009488:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800948c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009494:	4692      	mov	sl, r2
 8009496:	469b      	mov	fp, r3
 8009498:	4643      	mov	r3, r8
 800949a:	eb1a 0303 	adds.w	r3, sl, r3
 800949e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094a2:	464b      	mov	r3, r9
 80094a4:	eb4b 0303 	adc.w	r3, fp, r3
 80094a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80094bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80094c0:	460b      	mov	r3, r1
 80094c2:	18db      	adds	r3, r3, r3
 80094c4:	643b      	str	r3, [r7, #64]	; 0x40
 80094c6:	4613      	mov	r3, r2
 80094c8:	eb42 0303 	adc.w	r3, r2, r3
 80094cc:	647b      	str	r3, [r7, #68]	; 0x44
 80094ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80094d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80094d6:	f7f7 fb87 	bl	8000be8 <__aeabi_uldivmod>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	4611      	mov	r1, r2
 80094e0:	4b3b      	ldr	r3, [pc, #236]	; (80095d0 <UART_SetConfig+0x2d4>)
 80094e2:	fba3 2301 	umull	r2, r3, r3, r1
 80094e6:	095b      	lsrs	r3, r3, #5
 80094e8:	2264      	movs	r2, #100	; 0x64
 80094ea:	fb02 f303 	mul.w	r3, r2, r3
 80094ee:	1acb      	subs	r3, r1, r3
 80094f0:	00db      	lsls	r3, r3, #3
 80094f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80094f6:	4b36      	ldr	r3, [pc, #216]	; (80095d0 <UART_SetConfig+0x2d4>)
 80094f8:	fba3 2302 	umull	r2, r3, r3, r2
 80094fc:	095b      	lsrs	r3, r3, #5
 80094fe:	005b      	lsls	r3, r3, #1
 8009500:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009504:	441c      	add	r4, r3
 8009506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800950a:	2200      	movs	r2, #0
 800950c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009510:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009514:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009518:	4642      	mov	r2, r8
 800951a:	464b      	mov	r3, r9
 800951c:	1891      	adds	r1, r2, r2
 800951e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009520:	415b      	adcs	r3, r3
 8009522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009528:	4641      	mov	r1, r8
 800952a:	1851      	adds	r1, r2, r1
 800952c:	6339      	str	r1, [r7, #48]	; 0x30
 800952e:	4649      	mov	r1, r9
 8009530:	414b      	adcs	r3, r1
 8009532:	637b      	str	r3, [r7, #52]	; 0x34
 8009534:	f04f 0200 	mov.w	r2, #0
 8009538:	f04f 0300 	mov.w	r3, #0
 800953c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009540:	4659      	mov	r1, fp
 8009542:	00cb      	lsls	r3, r1, #3
 8009544:	4651      	mov	r1, sl
 8009546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800954a:	4651      	mov	r1, sl
 800954c:	00ca      	lsls	r2, r1, #3
 800954e:	4610      	mov	r0, r2
 8009550:	4619      	mov	r1, r3
 8009552:	4603      	mov	r3, r0
 8009554:	4642      	mov	r2, r8
 8009556:	189b      	adds	r3, r3, r2
 8009558:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800955c:	464b      	mov	r3, r9
 800955e:	460a      	mov	r2, r1
 8009560:	eb42 0303 	adc.w	r3, r2, r3
 8009564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009574:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009578:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800957c:	460b      	mov	r3, r1
 800957e:	18db      	adds	r3, r3, r3
 8009580:	62bb      	str	r3, [r7, #40]	; 0x28
 8009582:	4613      	mov	r3, r2
 8009584:	eb42 0303 	adc.w	r3, r2, r3
 8009588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800958a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800958e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009592:	f7f7 fb29 	bl	8000be8 <__aeabi_uldivmod>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4b0d      	ldr	r3, [pc, #52]	; (80095d0 <UART_SetConfig+0x2d4>)
 800959c:	fba3 1302 	umull	r1, r3, r3, r2
 80095a0:	095b      	lsrs	r3, r3, #5
 80095a2:	2164      	movs	r1, #100	; 0x64
 80095a4:	fb01 f303 	mul.w	r3, r1, r3
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	3332      	adds	r3, #50	; 0x32
 80095ae:	4a08      	ldr	r2, [pc, #32]	; (80095d0 <UART_SetConfig+0x2d4>)
 80095b0:	fba2 2303 	umull	r2, r3, r2, r3
 80095b4:	095b      	lsrs	r3, r3, #5
 80095b6:	f003 0207 	and.w	r2, r3, #7
 80095ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4422      	add	r2, r4
 80095c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80095c4:	e106      	b.n	80097d4 <UART_SetConfig+0x4d8>
 80095c6:	bf00      	nop
 80095c8:	40011000 	.word	0x40011000
 80095cc:	40011400 	.word	0x40011400
 80095d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095d8:	2200      	movs	r2, #0
 80095da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80095de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80095e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80095e6:	4642      	mov	r2, r8
 80095e8:	464b      	mov	r3, r9
 80095ea:	1891      	adds	r1, r2, r2
 80095ec:	6239      	str	r1, [r7, #32]
 80095ee:	415b      	adcs	r3, r3
 80095f0:	627b      	str	r3, [r7, #36]	; 0x24
 80095f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80095f6:	4641      	mov	r1, r8
 80095f8:	1854      	adds	r4, r2, r1
 80095fa:	4649      	mov	r1, r9
 80095fc:	eb43 0501 	adc.w	r5, r3, r1
 8009600:	f04f 0200 	mov.w	r2, #0
 8009604:	f04f 0300 	mov.w	r3, #0
 8009608:	00eb      	lsls	r3, r5, #3
 800960a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800960e:	00e2      	lsls	r2, r4, #3
 8009610:	4614      	mov	r4, r2
 8009612:	461d      	mov	r5, r3
 8009614:	4643      	mov	r3, r8
 8009616:	18e3      	adds	r3, r4, r3
 8009618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800961c:	464b      	mov	r3, r9
 800961e:	eb45 0303 	adc.w	r3, r5, r3
 8009622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009632:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009636:	f04f 0200 	mov.w	r2, #0
 800963a:	f04f 0300 	mov.w	r3, #0
 800963e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009642:	4629      	mov	r1, r5
 8009644:	008b      	lsls	r3, r1, #2
 8009646:	4621      	mov	r1, r4
 8009648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800964c:	4621      	mov	r1, r4
 800964e:	008a      	lsls	r2, r1, #2
 8009650:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009654:	f7f7 fac8 	bl	8000be8 <__aeabi_uldivmod>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4b60      	ldr	r3, [pc, #384]	; (80097e0 <UART_SetConfig+0x4e4>)
 800965e:	fba3 2302 	umull	r2, r3, r3, r2
 8009662:	095b      	lsrs	r3, r3, #5
 8009664:	011c      	lsls	r4, r3, #4
 8009666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800966a:	2200      	movs	r2, #0
 800966c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009670:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009674:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009678:	4642      	mov	r2, r8
 800967a:	464b      	mov	r3, r9
 800967c:	1891      	adds	r1, r2, r2
 800967e:	61b9      	str	r1, [r7, #24]
 8009680:	415b      	adcs	r3, r3
 8009682:	61fb      	str	r3, [r7, #28]
 8009684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009688:	4641      	mov	r1, r8
 800968a:	1851      	adds	r1, r2, r1
 800968c:	6139      	str	r1, [r7, #16]
 800968e:	4649      	mov	r1, r9
 8009690:	414b      	adcs	r3, r1
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	f04f 0200 	mov.w	r2, #0
 8009698:	f04f 0300 	mov.w	r3, #0
 800969c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096a0:	4659      	mov	r1, fp
 80096a2:	00cb      	lsls	r3, r1, #3
 80096a4:	4651      	mov	r1, sl
 80096a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096aa:	4651      	mov	r1, sl
 80096ac:	00ca      	lsls	r2, r1, #3
 80096ae:	4610      	mov	r0, r2
 80096b0:	4619      	mov	r1, r3
 80096b2:	4603      	mov	r3, r0
 80096b4:	4642      	mov	r2, r8
 80096b6:	189b      	adds	r3, r3, r2
 80096b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096bc:	464b      	mov	r3, r9
 80096be:	460a      	mov	r2, r1
 80096c0:	eb42 0303 	adc.w	r3, r2, r3
 80096c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80096d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80096d4:	f04f 0200 	mov.w	r2, #0
 80096d8:	f04f 0300 	mov.w	r3, #0
 80096dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80096e0:	4649      	mov	r1, r9
 80096e2:	008b      	lsls	r3, r1, #2
 80096e4:	4641      	mov	r1, r8
 80096e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096ea:	4641      	mov	r1, r8
 80096ec:	008a      	lsls	r2, r1, #2
 80096ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80096f2:	f7f7 fa79 	bl	8000be8 <__aeabi_uldivmod>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4611      	mov	r1, r2
 80096fc:	4b38      	ldr	r3, [pc, #224]	; (80097e0 <UART_SetConfig+0x4e4>)
 80096fe:	fba3 2301 	umull	r2, r3, r3, r1
 8009702:	095b      	lsrs	r3, r3, #5
 8009704:	2264      	movs	r2, #100	; 0x64
 8009706:	fb02 f303 	mul.w	r3, r2, r3
 800970a:	1acb      	subs	r3, r1, r3
 800970c:	011b      	lsls	r3, r3, #4
 800970e:	3332      	adds	r3, #50	; 0x32
 8009710:	4a33      	ldr	r2, [pc, #204]	; (80097e0 <UART_SetConfig+0x4e4>)
 8009712:	fba2 2303 	umull	r2, r3, r2, r3
 8009716:	095b      	lsrs	r3, r3, #5
 8009718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800971c:	441c      	add	r4, r3
 800971e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009722:	2200      	movs	r2, #0
 8009724:	673b      	str	r3, [r7, #112]	; 0x70
 8009726:	677a      	str	r2, [r7, #116]	; 0x74
 8009728:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800972c:	4642      	mov	r2, r8
 800972e:	464b      	mov	r3, r9
 8009730:	1891      	adds	r1, r2, r2
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	415b      	adcs	r3, r3
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800973c:	4641      	mov	r1, r8
 800973e:	1851      	adds	r1, r2, r1
 8009740:	6039      	str	r1, [r7, #0]
 8009742:	4649      	mov	r1, r9
 8009744:	414b      	adcs	r3, r1
 8009746:	607b      	str	r3, [r7, #4]
 8009748:	f04f 0200 	mov.w	r2, #0
 800974c:	f04f 0300 	mov.w	r3, #0
 8009750:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009754:	4659      	mov	r1, fp
 8009756:	00cb      	lsls	r3, r1, #3
 8009758:	4651      	mov	r1, sl
 800975a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800975e:	4651      	mov	r1, sl
 8009760:	00ca      	lsls	r2, r1, #3
 8009762:	4610      	mov	r0, r2
 8009764:	4619      	mov	r1, r3
 8009766:	4603      	mov	r3, r0
 8009768:	4642      	mov	r2, r8
 800976a:	189b      	adds	r3, r3, r2
 800976c:	66bb      	str	r3, [r7, #104]	; 0x68
 800976e:	464b      	mov	r3, r9
 8009770:	460a      	mov	r2, r1
 8009772:	eb42 0303 	adc.w	r3, r2, r3
 8009776:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	663b      	str	r3, [r7, #96]	; 0x60
 8009782:	667a      	str	r2, [r7, #100]	; 0x64
 8009784:	f04f 0200 	mov.w	r2, #0
 8009788:	f04f 0300 	mov.w	r3, #0
 800978c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009790:	4649      	mov	r1, r9
 8009792:	008b      	lsls	r3, r1, #2
 8009794:	4641      	mov	r1, r8
 8009796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800979a:	4641      	mov	r1, r8
 800979c:	008a      	lsls	r2, r1, #2
 800979e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80097a2:	f7f7 fa21 	bl	8000be8 <__aeabi_uldivmod>
 80097a6:	4602      	mov	r2, r0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <UART_SetConfig+0x4e4>)
 80097ac:	fba3 1302 	umull	r1, r3, r3, r2
 80097b0:	095b      	lsrs	r3, r3, #5
 80097b2:	2164      	movs	r1, #100	; 0x64
 80097b4:	fb01 f303 	mul.w	r3, r1, r3
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	011b      	lsls	r3, r3, #4
 80097bc:	3332      	adds	r3, #50	; 0x32
 80097be:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <UART_SetConfig+0x4e4>)
 80097c0:	fba2 2303 	umull	r2, r3, r2, r3
 80097c4:	095b      	lsrs	r3, r3, #5
 80097c6:	f003 020f 	and.w	r2, r3, #15
 80097ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4422      	add	r2, r4
 80097d2:	609a      	str	r2, [r3, #8]
}
 80097d4:	bf00      	nop
 80097d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80097da:	46bd      	mov	sp, r7
 80097dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097e0:	51eb851f 	.word	0x51eb851f

080097e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80097e8:	4904      	ldr	r1, [pc, #16]	; (80097fc <MX_FATFS_Init+0x18>)
 80097ea:	4805      	ldr	r0, [pc, #20]	; (8009800 <MX_FATFS_Init+0x1c>)
 80097ec:	f003 f922 	bl	800ca34 <FATFS_LinkDriver>
 80097f0:	4603      	mov	r3, r0
 80097f2:	461a      	mov	r2, r3
 80097f4:	4b03      	ldr	r3, [pc, #12]	; (8009804 <MX_FATFS_Init+0x20>)
 80097f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80097f8:	bf00      	nop
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	200029a8 	.word	0x200029a8
 8009800:	20000010 	.word	0x20000010
 8009804:	200029a4 	.word	0x200029a4

08009808 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009808:	b480      	push	{r7}
 800980a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800980c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800980e:	4618      	mov	r0, r3
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8009822:	79fb      	ldrb	r3, [r7, #7]
 8009824:	4618      	mov	r0, r3
 8009826:	f007 fce5 	bl	80111f4 <SD_disk_initialize>
 800982a:	4603      	mov	r3, r0
 800982c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b082      	sub	sp, #8
 800983a:	af00      	add	r7, sp, #0
 800983c:	4603      	mov	r3, r0
 800983e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	4618      	mov	r0, r3
 8009844:	f007 fdbc 	bl	80113c0 <SD_disk_status>
 8009848:	4603      	mov	r3, r0
 800984a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800984c:	4618      	mov	r0, r3
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	607a      	str	r2, [r7, #4]
 800985e:	603b      	str	r3, [r7, #0]
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8009864:	7bf8      	ldrb	r0, [r7, #15]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	68b9      	ldr	r1, [r7, #8]
 800986c:	f007 fdbe 	bl	80113ec <SD_disk_read>
 8009870:	4603      	mov	r3, r0
 8009872:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009874:	4618      	mov	r0, r3
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	60b9      	str	r1, [r7, #8]
 8009884:	607a      	str	r2, [r7, #4]
 8009886:	603b      	str	r3, [r7, #0]
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800988c:	7bf8      	ldrb	r0, [r7, #15]
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	68b9      	ldr	r1, [r7, #8]
 8009894:	f007 fe14 	bl	80114c0 <SD_disk_write>
 8009898:	4603      	mov	r3, r0
 800989a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	603a      	str	r2, [r7, #0]
 80098ae:	71fb      	strb	r3, [r7, #7]
 80098b0:	460b      	mov	r3, r1
 80098b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	79b9      	ldrb	r1, [r7, #6]
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f007 fe84 	bl	80115c8 <SD_disk_ioctl>
 80098c0:	4603      	mov	r3, r0
 80098c2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	4603      	mov	r3, r0
 80098d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80098d6:	79fb      	ldrb	r3, [r7, #7]
 80098d8:	4a08      	ldr	r2, [pc, #32]	; (80098fc <disk_status+0x30>)
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	79fa      	ldrb	r2, [r7, #7]
 80098e4:	4905      	ldr	r1, [pc, #20]	; (80098fc <disk_status+0x30>)
 80098e6:	440a      	add	r2, r1
 80098e8:	7a12      	ldrb	r2, [r2, #8]
 80098ea:	4610      	mov	r0, r2
 80098ec:	4798      	blx	r3
 80098ee:	4603      	mov	r3, r0
 80098f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	200029d4 	.word	0x200029d4

08009900 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	4603      	mov	r3, r0
 8009908:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	4a0d      	ldr	r2, [pc, #52]	; (8009948 <disk_initialize+0x48>)
 8009912:	5cd3      	ldrb	r3, [r2, r3]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d111      	bne.n	800993c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009918:	79fb      	ldrb	r3, [r7, #7]
 800991a:	4a0b      	ldr	r2, [pc, #44]	; (8009948 <disk_initialize+0x48>)
 800991c:	2101      	movs	r1, #1
 800991e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009920:	79fb      	ldrb	r3, [r7, #7]
 8009922:	4a09      	ldr	r2, [pc, #36]	; (8009948 <disk_initialize+0x48>)
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4413      	add	r3, r2
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	79fa      	ldrb	r2, [r7, #7]
 800992e:	4906      	ldr	r1, [pc, #24]	; (8009948 <disk_initialize+0x48>)
 8009930:	440a      	add	r2, r1
 8009932:	7a12      	ldrb	r2, [r2, #8]
 8009934:	4610      	mov	r0, r2
 8009936:	4798      	blx	r3
 8009938:	4603      	mov	r3, r0
 800993a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800993c:	7bfb      	ldrb	r3, [r7, #15]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	200029d4 	.word	0x200029d4

0800994c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800994c:	b590      	push	{r4, r7, lr}
 800994e:	b087      	sub	sp, #28
 8009950:	af00      	add	r7, sp, #0
 8009952:	60b9      	str	r1, [r7, #8]
 8009954:	607a      	str	r2, [r7, #4]
 8009956:	603b      	str	r3, [r7, #0]
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	4a0a      	ldr	r2, [pc, #40]	; (8009988 <disk_read+0x3c>)
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	689c      	ldr	r4, [r3, #8]
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	4a07      	ldr	r2, [pc, #28]	; (8009988 <disk_read+0x3c>)
 800996c:	4413      	add	r3, r2
 800996e:	7a18      	ldrb	r0, [r3, #8]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	68b9      	ldr	r1, [r7, #8]
 8009976:	47a0      	blx	r4
 8009978:	4603      	mov	r3, r0
 800997a:	75fb      	strb	r3, [r7, #23]
  return res;
 800997c:	7dfb      	ldrb	r3, [r7, #23]
}
 800997e:	4618      	mov	r0, r3
 8009980:	371c      	adds	r7, #28
 8009982:	46bd      	mov	sp, r7
 8009984:	bd90      	pop	{r4, r7, pc}
 8009986:	bf00      	nop
 8009988:	200029d4 	.word	0x200029d4

0800998c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800998c:	b590      	push	{r4, r7, lr}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	60b9      	str	r1, [r7, #8]
 8009994:	607a      	str	r2, [r7, #4]
 8009996:	603b      	str	r3, [r7, #0]
 8009998:	4603      	mov	r3, r0
 800999a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	4a0a      	ldr	r2, [pc, #40]	; (80099c8 <disk_write+0x3c>)
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	68dc      	ldr	r4, [r3, #12]
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	4a07      	ldr	r2, [pc, #28]	; (80099c8 <disk_write+0x3c>)
 80099ac:	4413      	add	r3, r2
 80099ae:	7a18      	ldrb	r0, [r3, #8]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	68b9      	ldr	r1, [r7, #8]
 80099b6:	47a0      	blx	r4
 80099b8:	4603      	mov	r3, r0
 80099ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd90      	pop	{r4, r7, pc}
 80099c6:	bf00      	nop
 80099c8:	200029d4 	.word	0x200029d4

080099cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	603a      	str	r2, [r7, #0]
 80099d6:	71fb      	strb	r3, [r7, #7]
 80099d8:	460b      	mov	r3, r1
 80099da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80099dc:	79fb      	ldrb	r3, [r7, #7]
 80099de:	4a09      	ldr	r2, [pc, #36]	; (8009a04 <disk_ioctl+0x38>)
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	79fa      	ldrb	r2, [r7, #7]
 80099ea:	4906      	ldr	r1, [pc, #24]	; (8009a04 <disk_ioctl+0x38>)
 80099ec:	440a      	add	r2, r1
 80099ee:	7a10      	ldrb	r0, [r2, #8]
 80099f0:	79b9      	ldrb	r1, [r7, #6]
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	4798      	blx	r3
 80099f6:	4603      	mov	r3, r0
 80099f8:	73fb      	strb	r3, [r7, #15]
  return res;
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	200029d4 	.word	0x200029d4

08009a08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	3301      	adds	r3, #1
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009a18:	89fb      	ldrh	r3, [r7, #14]
 8009a1a:	021b      	lsls	r3, r3, #8
 8009a1c:	b21a      	sxth	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	b21b      	sxth	r3, r3
 8009a24:	4313      	orrs	r3, r2
 8009a26:	b21b      	sxth	r3, r3
 8009a28:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009a2a:	89fb      	ldrh	r3, [r7, #14]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	3303      	adds	r3, #3
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	021b      	lsls	r3, r3, #8
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	3202      	adds	r2, #2
 8009a50:	7812      	ldrb	r2, [r2, #0]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	021b      	lsls	r3, r3, #8
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	3201      	adds	r2, #1
 8009a5e:	7812      	ldrb	r2, [r2, #0]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	021b      	lsls	r3, r3, #8
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	7812      	ldrb	r2, [r2, #0]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009a70:	68fb      	ldr	r3, [r7, #12]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b083      	sub	sp, #12
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	460b      	mov	r3, r1
 8009a88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	1c5a      	adds	r2, r3, #1
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	887a      	ldrh	r2, [r7, #2]
 8009a92:	b2d2      	uxtb	r2, r2
 8009a94:	701a      	strb	r2, [r3, #0]
 8009a96:	887b      	ldrh	r3, [r7, #2]
 8009a98:	0a1b      	lsrs	r3, r3, #8
 8009a9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	1c5a      	adds	r2, r3, #1
 8009aa0:	607a      	str	r2, [r7, #4]
 8009aa2:	887a      	ldrh	r2, [r7, #2]
 8009aa4:	b2d2      	uxtb	r2, r2
 8009aa6:	701a      	strb	r2, [r3, #0]
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	1c5a      	adds	r2, r3, #1
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	b2d2      	uxtb	r2, r2
 8009ac8:	701a      	strb	r2, [r3, #0]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	0a1b      	lsrs	r3, r3, #8
 8009ace:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	607a      	str	r2, [r7, #4]
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	b2d2      	uxtb	r2, r2
 8009ada:	701a      	strb	r2, [r3, #0]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	0a1b      	lsrs	r3, r3, #8
 8009ae0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	b2d2      	uxtb	r2, r2
 8009aec:	701a      	strb	r2, [r3, #0]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	0a1b      	lsrs	r3, r3, #8
 8009af2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	1c5a      	adds	r2, r3, #1
 8009af8:	607a      	str	r2, [r7, #4]
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	b2d2      	uxtb	r2, r2
 8009afe:	701a      	strb	r2, [r3, #0]
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009b0c:	b480      	push	{r7}
 8009b0e:	b087      	sub	sp, #28
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00d      	beq.n	8009b42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	1c53      	adds	r3, r2, #1
 8009b2a:	613b      	str	r3, [r7, #16]
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	1c59      	adds	r1, r3, #1
 8009b30:	6179      	str	r1, [r7, #20]
 8009b32:	7812      	ldrb	r2, [r2, #0]
 8009b34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	607b      	str	r3, [r7, #4]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1f1      	bne.n	8009b26 <mem_cpy+0x1a>
	}
}
 8009b42:	bf00      	nop
 8009b44:	371c      	adds	r7, #28
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr

08009b4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b4e:	b480      	push	{r7}
 8009b50:	b087      	sub	sp, #28
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	60f8      	str	r0, [r7, #12]
 8009b56:	60b9      	str	r1, [r7, #8]
 8009b58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	1c5a      	adds	r2, r3, #1
 8009b62:	617a      	str	r2, [r7, #20]
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	b2d2      	uxtb	r2, r2
 8009b68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	607b      	str	r3, [r7, #4]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1f3      	bne.n	8009b5e <mem_set+0x10>
}
 8009b76:	bf00      	nop
 8009b78:	bf00      	nop
 8009b7a:	371c      	adds	r7, #28
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009b84:	b480      	push	{r7}
 8009b86:	b089      	sub	sp, #36	; 0x24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	61fb      	str	r3, [r7, #28]
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	61fa      	str	r2, [r7, #28]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	1c5a      	adds	r2, r3, #1
 8009baa:	61ba      	str	r2, [r7, #24]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	1acb      	subs	r3, r1, r3
 8009bb0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	607b      	str	r3, [r7, #4]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <mem_cmp+0x40>
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d0eb      	beq.n	8009b9c <mem_cmp+0x18>

	return r;
 8009bc4:	697b      	ldr	r3, [r7, #20]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3724      	adds	r7, #36	; 0x24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009bdc:	e002      	b.n	8009be4 <chk_chr+0x12>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3301      	adds	r3, #1
 8009be2:	607b      	str	r3, [r7, #4]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d005      	beq.n	8009bf8 <chk_chr+0x26>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d1f2      	bne.n	8009bde <chk_chr+0xc>
	return *str;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d009      	beq.n	8009c2a <lock_fs+0x22>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f003 f807 	bl	800cc2e <ff_req_grant>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <lock_fs+0x22>
 8009c26:	2301      	movs	r3, #1
 8009c28:	e000      	b.n	8009c2c <lock_fs+0x24>
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00d      	beq.n	8009c62 <unlock_fs+0x2e>
 8009c46:	78fb      	ldrb	r3, [r7, #3]
 8009c48:	2b0c      	cmp	r3, #12
 8009c4a:	d00a      	beq.n	8009c62 <unlock_fs+0x2e>
 8009c4c:	78fb      	ldrb	r3, [r7, #3]
 8009c4e:	2b0b      	cmp	r3, #11
 8009c50:	d007      	beq.n	8009c62 <unlock_fs+0x2e>
 8009c52:	78fb      	ldrb	r3, [r7, #3]
 8009c54:	2b0f      	cmp	r3, #15
 8009c56:	d004      	beq.n	8009c62 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	695b      	ldr	r3, [r3, #20]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f002 fffb 	bl	800cc58 <ff_rel_grant>
	}
}
 8009c62:	bf00      	nop
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c76:	2300      	movs	r3, #0
 8009c78:	60bb      	str	r3, [r7, #8]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	60fb      	str	r3, [r7, #12]
 8009c7e:	e029      	b.n	8009cd4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009c80:	4a27      	ldr	r2, [pc, #156]	; (8009d20 <chk_lock+0xb4>)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	011b      	lsls	r3, r3, #4
 8009c86:	4413      	add	r3, r2
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d01d      	beq.n	8009cca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c8e:	4a24      	ldr	r2, [pc, #144]	; (8009d20 <chk_lock+0xb4>)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	011b      	lsls	r3, r3, #4
 8009c94:	4413      	add	r3, r2
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d116      	bne.n	8009cce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009ca0:	4a1f      	ldr	r2, [pc, #124]	; (8009d20 <chk_lock+0xb4>)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	011b      	lsls	r3, r3, #4
 8009ca6:	4413      	add	r3, r2
 8009ca8:	3304      	adds	r3, #4
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d10c      	bne.n	8009cce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009cb4:	4a1a      	ldr	r2, [pc, #104]	; (8009d20 <chk_lock+0xb4>)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	011b      	lsls	r3, r3, #4
 8009cba:	4413      	add	r3, r2
 8009cbc:	3308      	adds	r3, #8
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d102      	bne.n	8009cce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009cc8:	e007      	b.n	8009cda <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d9d2      	bls.n	8009c80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d109      	bne.n	8009cf4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d102      	bne.n	8009cec <chk_lock+0x80>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d101      	bne.n	8009cf0 <chk_lock+0x84>
 8009cec:	2300      	movs	r3, #0
 8009cee:	e010      	b.n	8009d12 <chk_lock+0xa6>
 8009cf0:	2312      	movs	r3, #18
 8009cf2:	e00e      	b.n	8009d12 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d108      	bne.n	8009d0c <chk_lock+0xa0>
 8009cfa:	4a09      	ldr	r2, [pc, #36]	; (8009d20 <chk_lock+0xb4>)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	011b      	lsls	r3, r3, #4
 8009d00:	4413      	add	r3, r2
 8009d02:	330c      	adds	r3, #12
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d0a:	d101      	bne.n	8009d10 <chk_lock+0xa4>
 8009d0c:	2310      	movs	r3, #16
 8009d0e:	e000      	b.n	8009d12 <chk_lock+0xa6>
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	200029b4 	.word	0x200029b4

08009d24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	607b      	str	r3, [r7, #4]
 8009d2e:	e002      	b.n	8009d36 <enq_lock+0x12>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3301      	adds	r3, #1
 8009d34:	607b      	str	r3, [r7, #4]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d806      	bhi.n	8009d4a <enq_lock+0x26>
 8009d3c:	4a09      	ldr	r2, [pc, #36]	; (8009d64 <enq_lock+0x40>)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	011b      	lsls	r3, r3, #4
 8009d42:	4413      	add	r3, r2
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1f2      	bne.n	8009d30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	bf14      	ite	ne
 8009d50:	2301      	movne	r3, #1
 8009d52:	2300      	moveq	r3, #0
 8009d54:	b2db      	uxtb	r3, r3
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	370c      	adds	r7, #12
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	200029b4 	.word	0x200029b4

08009d68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d72:	2300      	movs	r3, #0
 8009d74:	60fb      	str	r3, [r7, #12]
 8009d76:	e01f      	b.n	8009db8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009d78:	4a41      	ldr	r2, [pc, #260]	; (8009e80 <inc_lock+0x118>)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	011b      	lsls	r3, r3, #4
 8009d7e:	4413      	add	r3, r2
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d113      	bne.n	8009db2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009d8a:	4a3d      	ldr	r2, [pc, #244]	; (8009e80 <inc_lock+0x118>)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	011b      	lsls	r3, r3, #4
 8009d90:	4413      	add	r3, r2
 8009d92:	3304      	adds	r3, #4
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d109      	bne.n	8009db2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009d9e:	4a38      	ldr	r2, [pc, #224]	; (8009e80 <inc_lock+0x118>)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	011b      	lsls	r3, r3, #4
 8009da4:	4413      	add	r3, r2
 8009da6:	3308      	adds	r3, #8
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d006      	beq.n	8009dc0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3301      	adds	r3, #1
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d9dc      	bls.n	8009d78 <inc_lock+0x10>
 8009dbe:	e000      	b.n	8009dc2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009dc0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d132      	bne.n	8009e2e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	e002      	b.n	8009dd4 <inc_lock+0x6c>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d806      	bhi.n	8009de8 <inc_lock+0x80>
 8009dda:	4a29      	ldr	r2, [pc, #164]	; (8009e80 <inc_lock+0x118>)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	011b      	lsls	r3, r3, #4
 8009de0:	4413      	add	r3, r2
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1f2      	bne.n	8009dce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d101      	bne.n	8009df2 <inc_lock+0x8a>
 8009dee:	2300      	movs	r3, #0
 8009df0:	e040      	b.n	8009e74 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	4922      	ldr	r1, [pc, #136]	; (8009e80 <inc_lock+0x118>)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	011b      	lsls	r3, r3, #4
 8009dfc:	440b      	add	r3, r1
 8009dfe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	689a      	ldr	r2, [r3, #8]
 8009e04:	491e      	ldr	r1, [pc, #120]	; (8009e80 <inc_lock+0x118>)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	011b      	lsls	r3, r3, #4
 8009e0a:	440b      	add	r3, r1
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	695a      	ldr	r2, [r3, #20]
 8009e14:	491a      	ldr	r1, [pc, #104]	; (8009e80 <inc_lock+0x118>)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	011b      	lsls	r3, r3, #4
 8009e1a:	440b      	add	r3, r1
 8009e1c:	3308      	adds	r3, #8
 8009e1e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009e20:	4a17      	ldr	r2, [pc, #92]	; (8009e80 <inc_lock+0x118>)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	011b      	lsls	r3, r3, #4
 8009e26:	4413      	add	r3, r2
 8009e28:	330c      	adds	r3, #12
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d009      	beq.n	8009e48 <inc_lock+0xe0>
 8009e34:	4a12      	ldr	r2, [pc, #72]	; (8009e80 <inc_lock+0x118>)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	011b      	lsls	r3, r3, #4
 8009e3a:	4413      	add	r3, r2
 8009e3c:	330c      	adds	r3, #12
 8009e3e:	881b      	ldrh	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <inc_lock+0xe0>
 8009e44:	2300      	movs	r3, #0
 8009e46:	e015      	b.n	8009e74 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d108      	bne.n	8009e60 <inc_lock+0xf8>
 8009e4e:	4a0c      	ldr	r2, [pc, #48]	; (8009e80 <inc_lock+0x118>)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	011b      	lsls	r3, r3, #4
 8009e54:	4413      	add	r3, r2
 8009e56:	330c      	adds	r3, #12
 8009e58:	881b      	ldrh	r3, [r3, #0]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	e001      	b.n	8009e64 <inc_lock+0xfc>
 8009e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e64:	4906      	ldr	r1, [pc, #24]	; (8009e80 <inc_lock+0x118>)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	011b      	lsls	r3, r3, #4
 8009e6a:	440b      	add	r3, r1
 8009e6c:	330c      	adds	r3, #12
 8009e6e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	3301      	adds	r3, #1
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	200029b4 	.word	0x200029b4

08009e84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	607b      	str	r3, [r7, #4]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d825      	bhi.n	8009ee4 <dec_lock+0x60>
		n = Files[i].ctr;
 8009e98:	4a17      	ldr	r2, [pc, #92]	; (8009ef8 <dec_lock+0x74>)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	011b      	lsls	r3, r3, #4
 8009e9e:	4413      	add	r3, r2
 8009ea0:	330c      	adds	r3, #12
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009ea6:	89fb      	ldrh	r3, [r7, #14]
 8009ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eac:	d101      	bne.n	8009eb2 <dec_lock+0x2e>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009eb2:	89fb      	ldrh	r3, [r7, #14]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <dec_lock+0x3a>
 8009eb8:	89fb      	ldrh	r3, [r7, #14]
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009ebe:	4a0e      	ldr	r2, [pc, #56]	; (8009ef8 <dec_lock+0x74>)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	011b      	lsls	r3, r3, #4
 8009ec4:	4413      	add	r3, r2
 8009ec6:	330c      	adds	r3, #12
 8009ec8:	89fa      	ldrh	r2, [r7, #14]
 8009eca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009ecc:	89fb      	ldrh	r3, [r7, #14]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d105      	bne.n	8009ede <dec_lock+0x5a>
 8009ed2:	4a09      	ldr	r2, [pc, #36]	; (8009ef8 <dec_lock+0x74>)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	011b      	lsls	r3, r3, #4
 8009ed8:	4413      	add	r3, r2
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	737b      	strb	r3, [r7, #13]
 8009ee2:	e001      	b.n	8009ee8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009ee8:	7b7b      	ldrb	r3, [r7, #13]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	200029b4 	.word	0x200029b4

08009efc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009f04:	2300      	movs	r3, #0
 8009f06:	60fb      	str	r3, [r7, #12]
 8009f08:	e010      	b.n	8009f2c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009f0a:	4a0d      	ldr	r2, [pc, #52]	; (8009f40 <clear_lock+0x44>)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	011b      	lsls	r3, r3, #4
 8009f10:	4413      	add	r3, r2
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d105      	bne.n	8009f26 <clear_lock+0x2a>
 8009f1a:	4a09      	ldr	r2, [pc, #36]	; (8009f40 <clear_lock+0x44>)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	011b      	lsls	r3, r3, #4
 8009f20:	4413      	add	r3, r2
 8009f22:	2200      	movs	r2, #0
 8009f24:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	60fb      	str	r3, [r7, #12]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d9eb      	bls.n	8009f0a <clear_lock+0xe>
	}
}
 8009f32:	bf00      	nop
 8009f34:	bf00      	nop
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	200029b4 	.word	0x200029b4

08009f44 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	78db      	ldrb	r3, [r3, #3]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d034      	beq.n	8009fc2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	7858      	ldrb	r0, [r3, #1]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009f68:	2301      	movs	r3, #1
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	f7ff fd0e 	bl	800998c <disk_write>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d002      	beq.n	8009f7c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	73fb      	strb	r3, [r7, #15]
 8009f7a:	e022      	b.n	8009fc2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	1ad2      	subs	r2, r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d217      	bcs.n	8009fc2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	789b      	ldrb	r3, [r3, #2]
 8009f96:	613b      	str	r3, [r7, #16]
 8009f98:	e010      	b.n	8009fbc <sync_window+0x78>
					wsect += fs->fsize;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	7858      	ldrb	r0, [r3, #1]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009fae:	2301      	movs	r3, #1
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	f7ff fceb 	bl	800998c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	613b      	str	r3, [r7, #16]
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d8eb      	bhi.n	8009f9a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3718      	adds	r7, #24
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d01b      	beq.n	800a01c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff ffad 	bl	8009f44 <sync_window>
 8009fea:	4603      	mov	r3, r0
 8009fec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d113      	bne.n	800a01c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	7858      	ldrb	r0, [r3, #1]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009ffe:	2301      	movs	r3, #1
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	f7ff fca3 	bl	800994c <disk_read>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d004      	beq.n	800a016 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a00c:	f04f 33ff 	mov.w	r3, #4294967295
 800a010:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a012:	2301      	movs	r3, #1
 800a014:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
	...

0800a028 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7ff ff87 	bl	8009f44 <sync_window>
 800a036:	4603      	mov	r3, r0
 800a038:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d159      	bne.n	800a0f4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	2b03      	cmp	r3, #3
 800a046:	d149      	bne.n	800a0dc <sync_fs+0xb4>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	791b      	ldrb	r3, [r3, #4]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d145      	bne.n	800a0dc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	899b      	ldrh	r3, [r3, #12]
 800a05a:	461a      	mov	r2, r3
 800a05c:	2100      	movs	r1, #0
 800a05e:	f7ff fd76 	bl	8009b4e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	333c      	adds	r3, #60	; 0x3c
 800a066:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a06a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a06e:	4618      	mov	r0, r3
 800a070:	f7ff fd05 	bl	8009a7e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	333c      	adds	r3, #60	; 0x3c
 800a078:	4921      	ldr	r1, [pc, #132]	; (800a100 <sync_fs+0xd8>)
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7ff fd1a 	bl	8009ab4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	333c      	adds	r3, #60	; 0x3c
 800a084:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a088:	491e      	ldr	r1, [pc, #120]	; (800a104 <sync_fs+0xdc>)
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7ff fd12 	bl	8009ab4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	333c      	adds	r3, #60	; 0x3c
 800a094:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	69db      	ldr	r3, [r3, #28]
 800a09c:	4619      	mov	r1, r3
 800a09e:	4610      	mov	r0, r2
 800a0a0:	f7ff fd08 	bl	8009ab4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	333c      	adds	r3, #60	; 0x3c
 800a0a8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	f7ff fcfe 	bl	8009ab4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0bc:	1c5a      	adds	r2, r3, #1
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	7858      	ldrb	r0, [r3, #1]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	f7ff fc5b 	bl	800998c <disk_write>
			fs->fsi_flag = 0;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	785b      	ldrb	r3, [r3, #1]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7ff fc71 	bl	80099cc <disk_ioctl>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <sync_fs+0xcc>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	41615252 	.word	0x41615252
 800a104:	61417272 	.word	0x61417272

0800a108 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	3b02      	subs	r3, #2
 800a116:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a1b      	ldr	r3, [r3, #32]
 800a11c:	3b02      	subs	r3, #2
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d301      	bcc.n	800a128 <clust2sect+0x20>
 800a124:	2300      	movs	r3, #0
 800a126:	e008      	b.n	800a13a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	895b      	ldrh	r3, [r3, #10]
 800a12c:	461a      	mov	r2, r3
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	fb03 f202 	mul.w	r2, r3, r2
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a138:	4413      	add	r3, r2
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b086      	sub	sp, #24
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d904      	bls.n	800a166 <get_fat+0x20>
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	6a1b      	ldr	r3, [r3, #32]
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	429a      	cmp	r2, r3
 800a164:	d302      	bcc.n	800a16c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a166:	2301      	movs	r3, #1
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	e0bb      	b.n	800a2e4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a16c:	f04f 33ff 	mov.w	r3, #4294967295
 800a170:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b03      	cmp	r3, #3
 800a178:	f000 8083 	beq.w	800a282 <get_fat+0x13c>
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	f300 80a7 	bgt.w	800a2d0 <get_fat+0x18a>
 800a182:	2b01      	cmp	r3, #1
 800a184:	d002      	beq.n	800a18c <get_fat+0x46>
 800a186:	2b02      	cmp	r3, #2
 800a188:	d056      	beq.n	800a238 <get_fat+0xf2>
 800a18a:	e0a1      	b.n	800a2d0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	60fb      	str	r3, [r7, #12]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	085b      	lsrs	r3, r3, #1
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	4413      	add	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	899b      	ldrh	r3, [r3, #12]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1aa:	4413      	add	r3, r2
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6938      	ldr	r0, [r7, #16]
 800a1b0:	f7ff ff0c 	bl	8009fcc <move_window>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f040 808d 	bne.w	800a2d6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	1c5a      	adds	r2, r3, #1
 800a1c0:	60fa      	str	r2, [r7, #12]
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	8992      	ldrh	r2, [r2, #12]
 800a1c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1ca:	fb01 f202 	mul.w	r2, r1, r2
 800a1ce:	1a9b      	subs	r3, r3, r2
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	899b      	ldrh	r3, [r3, #12]
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1ea:	4413      	add	r3, r2
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6938      	ldr	r0, [r7, #16]
 800a1f0:	f7ff feec 	bl	8009fcc <move_window>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d16f      	bne.n	800a2da <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	899b      	ldrh	r3, [r3, #12]
 800a1fe:	461a      	mov	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	fbb3 f1f2 	udiv	r1, r3, r2
 800a206:	fb01 f202 	mul.w	r2, r1, r2
 800a20a:	1a9b      	subs	r3, r3, r2
 800a20c:	693a      	ldr	r2, [r7, #16]
 800a20e:	4413      	add	r3, r2
 800a210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a214:	021b      	lsls	r3, r3, #8
 800a216:	461a      	mov	r2, r3
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <get_fat+0xe8>
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	091b      	lsrs	r3, r3, #4
 800a22c:	e002      	b.n	800a234 <get_fat+0xee>
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a234:	617b      	str	r3, [r7, #20]
			break;
 800a236:	e055      	b.n	800a2e4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	899b      	ldrh	r3, [r3, #12]
 800a240:	085b      	lsrs	r3, r3, #1
 800a242:	b29b      	uxth	r3, r3
 800a244:	4619      	mov	r1, r3
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	fbb3 f3f1 	udiv	r3, r3, r1
 800a24c:	4413      	add	r3, r2
 800a24e:	4619      	mov	r1, r3
 800a250:	6938      	ldr	r0, [r7, #16]
 800a252:	f7ff febb 	bl	8009fcc <move_window>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d140      	bne.n	800a2de <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	005b      	lsls	r3, r3, #1
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	8992      	ldrh	r2, [r2, #12]
 800a26a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a26e:	fb00 f202 	mul.w	r2, r0, r2
 800a272:	1a9b      	subs	r3, r3, r2
 800a274:	440b      	add	r3, r1
 800a276:	4618      	mov	r0, r3
 800a278:	f7ff fbc6 	bl	8009a08 <ld_word>
 800a27c:	4603      	mov	r3, r0
 800a27e:	617b      	str	r3, [r7, #20]
			break;
 800a280:	e030      	b.n	800a2e4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	899b      	ldrh	r3, [r3, #12]
 800a28a:	089b      	lsrs	r3, r3, #2
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	4619      	mov	r1, r3
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	fbb3 f3f1 	udiv	r3, r3, r1
 800a296:	4413      	add	r3, r2
 800a298:	4619      	mov	r1, r3
 800a29a:	6938      	ldr	r0, [r7, #16]
 800a29c:	f7ff fe96 	bl	8009fcc <move_window>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d11d      	bne.n	800a2e2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	8992      	ldrh	r2, [r2, #12]
 800a2b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2b8:	fb00 f202 	mul.w	r2, r0, r2
 800a2bc:	1a9b      	subs	r3, r3, r2
 800a2be:	440b      	add	r3, r1
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff fbb9 	bl	8009a38 <ld_dword>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a2cc:	617b      	str	r3, [r7, #20]
			break;
 800a2ce:	e009      	b.n	800a2e4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	617b      	str	r3, [r7, #20]
 800a2d4:	e006      	b.n	800a2e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2d6:	bf00      	nop
 800a2d8:	e004      	b.n	800a2e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2da:	bf00      	nop
 800a2dc:	e002      	b.n	800a2e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2de:	bf00      	nop
 800a2e0:	e000      	b.n	800a2e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2e2:	bf00      	nop
		}
	}

	return val;
 800a2e4:	697b      	ldr	r3, [r7, #20]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3718      	adds	r7, #24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a2ee:	b590      	push	{r4, r7, lr}
 800a2f0:	b089      	sub	sp, #36	; 0x24
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	60f8      	str	r0, [r7, #12]
 800a2f6:	60b9      	str	r1, [r7, #8]
 800a2f8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	2b01      	cmp	r3, #1
 800a302:	f240 8109 	bls.w	800a518 <put_fat+0x22a>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	f080 8103 	bcs.w	800a518 <put_fat+0x22a>
		switch (fs->fs_type) {
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	2b03      	cmp	r3, #3
 800a318:	f000 80b6 	beq.w	800a488 <put_fat+0x19a>
 800a31c:	2b03      	cmp	r3, #3
 800a31e:	f300 80fb 	bgt.w	800a518 <put_fat+0x22a>
 800a322:	2b01      	cmp	r3, #1
 800a324:	d003      	beq.n	800a32e <put_fat+0x40>
 800a326:	2b02      	cmp	r3, #2
 800a328:	f000 8083 	beq.w	800a432 <put_fat+0x144>
 800a32c:	e0f4      	b.n	800a518 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	61bb      	str	r3, [r7, #24]
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	085b      	lsrs	r3, r3, #1
 800a336:	69ba      	ldr	r2, [r7, #24]
 800a338:	4413      	add	r3, r2
 800a33a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	899b      	ldrh	r3, [r3, #12]
 800a344:	4619      	mov	r1, r3
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	fbb3 f3f1 	udiv	r3, r3, r1
 800a34c:	4413      	add	r3, r2
 800a34e:	4619      	mov	r1, r3
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f7ff fe3b 	bl	8009fcc <move_window>
 800a356:	4603      	mov	r3, r0
 800a358:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a35a:	7ffb      	ldrb	r3, [r7, #31]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f040 80d4 	bne.w	800a50a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	1c5a      	adds	r2, r3, #1
 800a36c:	61ba      	str	r2, [r7, #24]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	8992      	ldrh	r2, [r2, #12]
 800a372:	fbb3 f0f2 	udiv	r0, r3, r2
 800a376:	fb00 f202 	mul.w	r2, r0, r2
 800a37a:	1a9b      	subs	r3, r3, r2
 800a37c:	440b      	add	r3, r1
 800a37e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	f003 0301 	and.w	r3, r3, #1
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00d      	beq.n	800a3a6 <put_fat+0xb8>
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	b25b      	sxtb	r3, r3
 800a390:	f003 030f 	and.w	r3, r3, #15
 800a394:	b25a      	sxtb	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	011b      	lsls	r3, r3, #4
 800a39c:	b25b      	sxtb	r3, r3
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	b25b      	sxtb	r3, r3
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	e001      	b.n	800a3aa <put_fat+0xbc>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	899b      	ldrh	r3, [r3, #12]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3c4:	4413      	add	r3, r2
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7ff fdff 	bl	8009fcc <move_window>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3d2:	7ffb      	ldrb	r3, [r7, #31]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f040 809a 	bne.w	800a50e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	899b      	ldrh	r3, [r3, #12]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3ec:	fb00 f202 	mul.w	r2, r0, r2
 800a3f0:	1a9b      	subs	r3, r3, r2
 800a3f2:	440b      	add	r3, r1
 800a3f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	f003 0301 	and.w	r3, r3, #1
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <put_fat+0x11a>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	091b      	lsrs	r3, r3, #4
 800a404:	b2db      	uxtb	r3, r3
 800a406:	e00e      	b.n	800a426 <put_fat+0x138>
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	b25b      	sxtb	r3, r3
 800a40e:	f023 030f 	bic.w	r3, r3, #15
 800a412:	b25a      	sxtb	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	0a1b      	lsrs	r3, r3, #8
 800a418:	b25b      	sxtb	r3, r3
 800a41a:	f003 030f 	and.w	r3, r3, #15
 800a41e:	b25b      	sxtb	r3, r3
 800a420:	4313      	orrs	r3, r2
 800a422:	b25b      	sxtb	r3, r3
 800a424:	b2db      	uxtb	r3, r3
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2201      	movs	r2, #1
 800a42e:	70da      	strb	r2, [r3, #3]
			break;
 800a430:	e072      	b.n	800a518 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	899b      	ldrh	r3, [r3, #12]
 800a43a:	085b      	lsrs	r3, r3, #1
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	4619      	mov	r1, r3
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	fbb3 f3f1 	udiv	r3, r3, r1
 800a446:	4413      	add	r3, r2
 800a448:	4619      	mov	r1, r3
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f7ff fdbe 	bl	8009fcc <move_window>
 800a450:	4603      	mov	r3, r0
 800a452:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a454:	7ffb      	ldrb	r3, [r7, #31]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d15b      	bne.n	800a512 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	005b      	lsls	r3, r3, #1
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	8992      	ldrh	r2, [r2, #12]
 800a468:	fbb3 f0f2 	udiv	r0, r3, r2
 800a46c:	fb00 f202 	mul.w	r2, r0, r2
 800a470:	1a9b      	subs	r3, r3, r2
 800a472:	440b      	add	r3, r1
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	b292      	uxth	r2, r2
 800a478:	4611      	mov	r1, r2
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7ff faff 	bl	8009a7e <st_word>
			fs->wflag = 1;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2201      	movs	r2, #1
 800a484:	70da      	strb	r2, [r3, #3]
			break;
 800a486:	e047      	b.n	800a518 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	899b      	ldrh	r3, [r3, #12]
 800a490:	089b      	lsrs	r3, r3, #2
 800a492:	b29b      	uxth	r3, r3
 800a494:	4619      	mov	r1, r3
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	fbb3 f3f1 	udiv	r3, r3, r1
 800a49c:	4413      	add	r3, r2
 800a49e:	4619      	mov	r1, r3
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7ff fd93 	bl	8009fcc <move_window>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4aa:	7ffb      	ldrb	r3, [r7, #31]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d132      	bne.n	800a516 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	8992      	ldrh	r2, [r2, #12]
 800a4c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4c8:	fb00 f202 	mul.w	r2, r0, r2
 800a4cc:	1a9b      	subs	r3, r3, r2
 800a4ce:	440b      	add	r3, r1
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff fab1 	bl	8009a38 <ld_dword>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a4dc:	4323      	orrs	r3, r4
 800a4de:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	8992      	ldrh	r2, [r2, #12]
 800a4ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4f2:	fb00 f202 	mul.w	r2, r0, r2
 800a4f6:	1a9b      	subs	r3, r3, r2
 800a4f8:	440b      	add	r3, r1
 800a4fa:	6879      	ldr	r1, [r7, #4]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7ff fad9 	bl	8009ab4 <st_dword>
			fs->wflag = 1;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2201      	movs	r2, #1
 800a506:	70da      	strb	r2, [r3, #3]
			break;
 800a508:	e006      	b.n	800a518 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a50a:	bf00      	nop
 800a50c:	e004      	b.n	800a518 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a50e:	bf00      	nop
 800a510:	e002      	b.n	800a518 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a512:	bf00      	nop
 800a514:	e000      	b.n	800a518 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a516:	bf00      	nop
		}
	}
	return res;
 800a518:	7ffb      	ldrb	r3, [r7, #31]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3724      	adds	r7, #36	; 0x24
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd90      	pop	{r4, r7, pc}

0800a522 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b088      	sub	sp, #32
 800a526:	af00      	add	r7, sp, #0
 800a528:	60f8      	str	r0, [r7, #12]
 800a52a:	60b9      	str	r1, [r7, #8]
 800a52c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d904      	bls.n	800a548 <remove_chain+0x26>
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	429a      	cmp	r2, r3
 800a546:	d301      	bcc.n	800a54c <remove_chain+0x2a>
 800a548:	2302      	movs	r3, #2
 800a54a:	e04b      	b.n	800a5e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00c      	beq.n	800a56c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a552:	f04f 32ff 	mov.w	r2, #4294967295
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	69b8      	ldr	r0, [r7, #24]
 800a55a:	f7ff fec8 	bl	800a2ee <put_fat>
 800a55e:	4603      	mov	r3, r0
 800a560:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a562:	7ffb      	ldrb	r3, [r7, #31]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <remove_chain+0x4a>
 800a568:	7ffb      	ldrb	r3, [r7, #31]
 800a56a:	e03b      	b.n	800a5e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a56c:	68b9      	ldr	r1, [r7, #8]
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f7ff fde9 	bl	800a146 <get_fat>
 800a574:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d031      	beq.n	800a5e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d101      	bne.n	800a586 <remove_chain+0x64>
 800a582:	2302      	movs	r3, #2
 800a584:	e02e      	b.n	800a5e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58c:	d101      	bne.n	800a592 <remove_chain+0x70>
 800a58e:	2301      	movs	r3, #1
 800a590:	e028      	b.n	800a5e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a592:	2200      	movs	r2, #0
 800a594:	68b9      	ldr	r1, [r7, #8]
 800a596:	69b8      	ldr	r0, [r7, #24]
 800a598:	f7ff fea9 	bl	800a2ee <put_fat>
 800a59c:	4603      	mov	r3, r0
 800a59e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a5a0:	7ffb      	ldrb	r3, [r7, #31]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <remove_chain+0x88>
 800a5a6:	7ffb      	ldrb	r3, [r7, #31]
 800a5a8:	e01c      	b.n	800a5e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	69da      	ldr	r2, [r3, #28]
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	3b02      	subs	r3, #2
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d20b      	bcs.n	800a5d0 <remove_chain+0xae>
			fs->free_clst++;
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	1c5a      	adds	r2, r3, #1
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	791b      	ldrb	r3, [r3, #4]
 800a5c6:	f043 0301 	orr.w	r3, r3, #1
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	6a1b      	ldr	r3, [r3, #32]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d3c6      	bcc.n	800a56c <remove_chain+0x4a>
 800a5de:	e000      	b.n	800a5e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a5e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3720      	adds	r7, #32
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b088      	sub	sp, #32
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10d      	bne.n	800a61e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d004      	beq.n	800a618 <create_chain+0x2c>
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	6a1b      	ldr	r3, [r3, #32]
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	429a      	cmp	r2, r3
 800a616:	d31b      	bcc.n	800a650 <create_chain+0x64>
 800a618:	2301      	movs	r3, #1
 800a61a:	61bb      	str	r3, [r7, #24]
 800a61c:	e018      	b.n	800a650 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7ff fd90 	bl	800a146 <get_fat>
 800a626:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d801      	bhi.n	800a632 <create_chain+0x46>
 800a62e:	2301      	movs	r3, #1
 800a630:	e070      	b.n	800a714 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a638:	d101      	bne.n	800a63e <create_chain+0x52>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	e06a      	b.n	800a714 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	429a      	cmp	r2, r3
 800a646:	d201      	bcs.n	800a64c <create_chain+0x60>
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	e063      	b.n	800a714 <create_chain+0x128>
		scl = clst;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	3301      	adds	r3, #1
 800a658:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	69fa      	ldr	r2, [r7, #28]
 800a660:	429a      	cmp	r2, r3
 800a662:	d307      	bcc.n	800a674 <create_chain+0x88>
				ncl = 2;
 800a664:	2302      	movs	r3, #2
 800a666:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a668:	69fa      	ldr	r2, [r7, #28]
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d901      	bls.n	800a674 <create_chain+0x88>
 800a670:	2300      	movs	r3, #0
 800a672:	e04f      	b.n	800a714 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a674:	69f9      	ldr	r1, [r7, #28]
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7ff fd65 	bl	800a146 <get_fat>
 800a67c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00e      	beq.n	800a6a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d003      	beq.n	800a692 <create_chain+0xa6>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a690:	d101      	bne.n	800a696 <create_chain+0xaa>
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	e03e      	b.n	800a714 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a696:	69fa      	ldr	r2, [r7, #28]
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d1da      	bne.n	800a654 <create_chain+0x68>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e038      	b.n	800a714 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a6a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a8:	69f9      	ldr	r1, [r7, #28]
 800a6aa:	6938      	ldr	r0, [r7, #16]
 800a6ac:	f7ff fe1f 	bl	800a2ee <put_fat>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a6b4:	7dfb      	ldrb	r3, [r7, #23]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d109      	bne.n	800a6ce <create_chain+0xe2>
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d006      	beq.n	800a6ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a6c0:	69fa      	ldr	r2, [r7, #28]
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6938      	ldr	r0, [r7, #16]
 800a6c6:	f7ff fe12 	bl	800a2ee <put_fat>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d116      	bne.n	800a702 <create_chain+0x116>
		fs->last_clst = ncl;
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	69fa      	ldr	r2, [r7, #28]
 800a6d8:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	69da      	ldr	r2, [r3, #28]
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	6a1b      	ldr	r3, [r3, #32]
 800a6e2:	3b02      	subs	r3, #2
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d804      	bhi.n	800a6f2 <create_chain+0x106>
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	69db      	ldr	r3, [r3, #28]
 800a6ec:	1e5a      	subs	r2, r3, #1
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	791b      	ldrb	r3, [r3, #4]
 800a6f6:	f043 0301 	orr.w	r3, r3, #1
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	711a      	strb	r2, [r3, #4]
 800a700:	e007      	b.n	800a712 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a702:	7dfb      	ldrb	r3, [r7, #23]
 800a704:	2b01      	cmp	r3, #1
 800a706:	d102      	bne.n	800a70e <create_chain+0x122>
 800a708:	f04f 33ff 	mov.w	r3, #4294967295
 800a70c:	e000      	b.n	800a710 <create_chain+0x124>
 800a70e:	2301      	movs	r3, #1
 800a710:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a712:	69fb      	ldr	r3, [r7, #28]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3720      	adds	r7, #32
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b087      	sub	sp, #28
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a730:	3304      	adds	r3, #4
 800a732:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	899b      	ldrh	r3, [r3, #12]
 800a738:	461a      	mov	r2, r3
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	8952      	ldrh	r2, [r2, #10]
 800a744:	fbb3 f3f2 	udiv	r3, r3, r2
 800a748:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	1d1a      	adds	r2, r3, #4
 800a74e:	613a      	str	r2, [r7, #16]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d101      	bne.n	800a75e <clmt_clust+0x42>
 800a75a:	2300      	movs	r3, #0
 800a75c:	e010      	b.n	800a780 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	429a      	cmp	r2, r3
 800a764:	d307      	bcc.n	800a776 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a766:	697a      	ldr	r2, [r7, #20]
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	617b      	str	r3, [r7, #20]
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	3304      	adds	r3, #4
 800a772:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a774:	e7e9      	b.n	800a74a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a776:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	4413      	add	r3, r2
}
 800a780:	4618      	mov	r0, r3
 800a782:	371c      	adds	r7, #28
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7a2:	d204      	bcs.n	800a7ae <dir_sdi+0x22>
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	f003 031f 	and.w	r3, r3, #31
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d001      	beq.n	800a7b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a7ae:	2302      	movs	r3, #2
 800a7b0:	e071      	b.n	800a896 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d106      	bne.n	800a7d2 <dir_sdi+0x46>
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d902      	bls.n	800a7d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10c      	bne.n	800a7f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	095b      	lsrs	r3, r3, #5
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	8912      	ldrh	r2, [r2, #8]
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d301      	bcc.n	800a7e8 <dir_sdi+0x5c>
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e056      	b.n	800a896 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	61da      	str	r2, [r3, #28]
 800a7f0:	e02d      	b.n	800a84e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	895b      	ldrh	r3, [r3, #10]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	899b      	ldrh	r3, [r3, #12]
 800a7fc:	fb02 f303 	mul.w	r3, r2, r3
 800a800:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a802:	e019      	b.n	800a838 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6979      	ldr	r1, [r7, #20]
 800a808:	4618      	mov	r0, r3
 800a80a:	f7ff fc9c 	bl	800a146 <get_fat>
 800a80e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a816:	d101      	bne.n	800a81c <dir_sdi+0x90>
 800a818:	2301      	movs	r3, #1
 800a81a:	e03c      	b.n	800a896 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d904      	bls.n	800a82c <dir_sdi+0xa0>
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	6a1b      	ldr	r3, [r3, #32]
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d301      	bcc.n	800a830 <dir_sdi+0xa4>
 800a82c:	2302      	movs	r3, #2
 800a82e:	e032      	b.n	800a896 <dir_sdi+0x10a>
			ofs -= csz;
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d2e1      	bcs.n	800a804 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a840:	6979      	ldr	r1, [r7, #20]
 800a842:	6938      	ldr	r0, [r7, #16]
 800a844:	f7ff fc60 	bl	800a108 <clust2sect>
 800a848:	4602      	mov	r2, r0
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	697a      	ldr	r2, [r7, #20]
 800a852:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	69db      	ldr	r3, [r3, #28]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <dir_sdi+0xd4>
 800a85c:	2302      	movs	r3, #2
 800a85e:	e01a      	b.n	800a896 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	69da      	ldr	r2, [r3, #28]
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	899b      	ldrh	r3, [r3, #12]
 800a868:	4619      	mov	r1, r3
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a870:	441a      	add	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	899b      	ldrh	r3, [r3, #12]
 800a880:	461a      	mov	r2, r3
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	fbb3 f0f2 	udiv	r0, r3, r2
 800a888:	fb00 f202 	mul.w	r2, r0, r2
 800a88c:	1a9b      	subs	r3, r3, r2
 800a88e:	18ca      	adds	r2, r1, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3718      	adds	r7, #24
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b086      	sub	sp, #24
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
 800a8a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	3320      	adds	r3, #32
 800a8b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	69db      	ldr	r3, [r3, #28]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d003      	beq.n	800a8c6 <dir_next+0x28>
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8c4:	d301      	bcc.n	800a8ca <dir_next+0x2c>
 800a8c6:	2304      	movs	r3, #4
 800a8c8:	e0bb      	b.n	800aa42 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	899b      	ldrh	r3, [r3, #12]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8d6:	fb01 f202 	mul.w	r2, r1, r2
 800a8da:	1a9b      	subs	r3, r3, r2
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f040 809d 	bne.w	800aa1c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	69db      	ldr	r3, [r3, #28]
 800a8e6:	1c5a      	adds	r2, r3, #1
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10b      	bne.n	800a90c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	095b      	lsrs	r3, r3, #5
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	8912      	ldrh	r2, [r2, #8]
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	f0c0 808d 	bcc.w	800aa1c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	61da      	str	r2, [r3, #28]
 800a908:	2304      	movs	r3, #4
 800a90a:	e09a      	b.n	800aa42 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	899b      	ldrh	r3, [r3, #12]
 800a910:	461a      	mov	r2, r3
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	fbb3 f3f2 	udiv	r3, r3, r2
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	8952      	ldrh	r2, [r2, #10]
 800a91c:	3a01      	subs	r2, #1
 800a91e:	4013      	ands	r3, r2
 800a920:	2b00      	cmp	r3, #0
 800a922:	d17b      	bne.n	800aa1c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	4619      	mov	r1, r3
 800a92c:	4610      	mov	r0, r2
 800a92e:	f7ff fc0a 	bl	800a146 <get_fat>
 800a932:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d801      	bhi.n	800a93e <dir_next+0xa0>
 800a93a:	2302      	movs	r3, #2
 800a93c:	e081      	b.n	800aa42 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a944:	d101      	bne.n	800a94a <dir_next+0xac>
 800a946:	2301      	movs	r3, #1
 800a948:	e07b      	b.n	800aa42 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6a1b      	ldr	r3, [r3, #32]
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	429a      	cmp	r2, r3
 800a952:	d359      	bcc.n	800aa08 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d104      	bne.n	800a964 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	61da      	str	r2, [r3, #28]
 800a960:	2304      	movs	r3, #4
 800a962:	e06e      	b.n	800aa42 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	699b      	ldr	r3, [r3, #24]
 800a96a:	4619      	mov	r1, r3
 800a96c:	4610      	mov	r0, r2
 800a96e:	f7ff fe3d 	bl	800a5ec <create_chain>
 800a972:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d101      	bne.n	800a97e <dir_next+0xe0>
 800a97a:	2307      	movs	r3, #7
 800a97c:	e061      	b.n	800aa42 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d101      	bne.n	800a988 <dir_next+0xea>
 800a984:	2302      	movs	r3, #2
 800a986:	e05c      	b.n	800aa42 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98e:	d101      	bne.n	800a994 <dir_next+0xf6>
 800a990:	2301      	movs	r3, #1
 800a992:	e056      	b.n	800aa42 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f7ff fad5 	bl	8009f44 <sync_window>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <dir_next+0x106>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e04e      	b.n	800aa42 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	899b      	ldrh	r3, [r3, #12]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	f7ff f8cc 	bl	8009b4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	613b      	str	r3, [r7, #16]
 800a9ba:	6979      	ldr	r1, [r7, #20]
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f7ff fba3 	bl	800a108 <clust2sect>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	639a      	str	r2, [r3, #56]	; 0x38
 800a9c8:	e012      	b.n	800a9f0 <dir_next+0x152>
						fs->wflag = 1;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f7ff fab7 	bl	8009f44 <sync_window>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d001      	beq.n	800a9e0 <dir_next+0x142>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e030      	b.n	800aa42 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	613b      	str	r3, [r7, #16]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ea:	1c5a      	adds	r2, r3, #1
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	639a      	str	r2, [r3, #56]	; 0x38
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	895b      	ldrh	r3, [r3, #10]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d3e6      	bcc.n	800a9ca <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	1ad2      	subs	r2, r2, r3
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aa0e:	6979      	ldr	r1, [r7, #20]
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f7ff fb79 	bl	800a108 <clust2sect>
 800aa16:	4602      	mov	r2, r0
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	899b      	ldrh	r3, [r3, #12]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa34:	fb00 f202 	mul.w	r2, r0, r2
 800aa38:	1a9b      	subs	r3, r3, r2
 800aa3a:	18ca      	adds	r2, r1, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3718      	adds	r7, #24
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b086      	sub	sp, #24
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7ff fe95 	bl	800a78c <dir_sdi>
 800aa62:	4603      	mov	r3, r0
 800aa64:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aa66:	7dfb      	ldrb	r3, [r7, #23]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d12b      	bne.n	800aac4 <dir_alloc+0x7a>
		n = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	69db      	ldr	r3, [r3, #28]
 800aa74:	4619      	mov	r1, r3
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f7ff faa8 	bl	8009fcc <move_window>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aa80:	7dfb      	ldrb	r3, [r7, #23]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d11d      	bne.n	800aac2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	2be5      	cmp	r3, #229	; 0xe5
 800aa8e:	d004      	beq.n	800aa9a <dir_alloc+0x50>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d107      	bne.n	800aaaa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	613b      	str	r3, [r7, #16]
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d102      	bne.n	800aaae <dir_alloc+0x64>
 800aaa8:	e00c      	b.n	800aac4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aaaa:	2300      	movs	r3, #0
 800aaac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aaae:	2101      	movs	r1, #1
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7ff fef4 	bl	800a89e <dir_next>
 800aab6:	4603      	mov	r3, r0
 800aab8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d0d7      	beq.n	800aa70 <dir_alloc+0x26>
 800aac0:	e000      	b.n	800aac4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aac2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aac4:	7dfb      	ldrb	r3, [r7, #23]
 800aac6:	2b04      	cmp	r3, #4
 800aac8:	d101      	bne.n	800aace <dir_alloc+0x84>
 800aaca:	2307      	movs	r3, #7
 800aacc:	75fb      	strb	r3, [r7, #23]
	return res;
 800aace:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	331a      	adds	r3, #26
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fe ff8e 	bl	8009a08 <ld_word>
 800aaec:	4603      	mov	r3, r0
 800aaee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	2b03      	cmp	r3, #3
 800aaf6:	d109      	bne.n	800ab0c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	3314      	adds	r3, #20
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fe ff83 	bl	8009a08 <ld_word>
 800ab02:	4603      	mov	r3, r0
 800ab04:	041b      	lsls	r3, r3, #16
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	60b9      	str	r1, [r7, #8]
 800ab20:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	331a      	adds	r3, #26
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	b292      	uxth	r2, r2
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fe ffa6 	bl	8009a7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d109      	bne.n	800ab4e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f103 0214 	add.w	r2, r3, #20
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	0c1b      	lsrs	r3, r3, #16
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	4619      	mov	r1, r3
 800ab48:	4610      	mov	r0, r2
 800ab4a:	f7fe ff98 	bl	8009a7e <st_word>
	}
}
 800ab4e:	bf00      	nop
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
	...

0800ab58 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ab58:	b590      	push	{r4, r7, lr}
 800ab5a:	b087      	sub	sp, #28
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	331a      	adds	r3, #26
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fe ff4e 	bl	8009a08 <ld_word>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <cmp_lfn+0x1e>
 800ab72:	2300      	movs	r3, #0
 800ab74:	e059      	b.n	800ac2a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab7e:	1e5a      	subs	r2, r3, #1
 800ab80:	4613      	mov	r3, r2
 800ab82:	005b      	lsls	r3, r3, #1
 800ab84:	4413      	add	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	81fb      	strh	r3, [r7, #14]
 800ab90:	2300      	movs	r3, #0
 800ab92:	613b      	str	r3, [r7, #16]
 800ab94:	e033      	b.n	800abfe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ab96:	4a27      	ldr	r2, [pc, #156]	; (800ac34 <cmp_lfn+0xdc>)
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	4413      	add	r3, r2
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fe ff2f 	bl	8009a08 <ld_word>
 800abaa:	4603      	mov	r3, r0
 800abac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800abae:	89fb      	ldrh	r3, [r7, #14]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d01a      	beq.n	800abea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	2bfe      	cmp	r3, #254	; 0xfe
 800abb8:	d812      	bhi.n	800abe0 <cmp_lfn+0x88>
 800abba:	89bb      	ldrh	r3, [r7, #12]
 800abbc:	4618      	mov	r0, r3
 800abbe:	f001 ff85 	bl	800cacc <ff_wtoupper>
 800abc2:	4603      	mov	r3, r0
 800abc4:	461c      	mov	r4, r3
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	1c5a      	adds	r2, r3, #1
 800abca:	617a      	str	r2, [r7, #20]
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	4413      	add	r3, r2
 800abd2:	881b      	ldrh	r3, [r3, #0]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f001 ff79 	bl	800cacc <ff_wtoupper>
 800abda:	4603      	mov	r3, r0
 800abdc:	429c      	cmp	r4, r3
 800abde:	d001      	beq.n	800abe4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800abe0:	2300      	movs	r3, #0
 800abe2:	e022      	b.n	800ac2a <cmp_lfn+0xd2>
			}
			wc = uc;
 800abe4:	89bb      	ldrh	r3, [r7, #12]
 800abe6:	81fb      	strh	r3, [r7, #14]
 800abe8:	e006      	b.n	800abf8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800abea:	89bb      	ldrh	r3, [r7, #12]
 800abec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d001      	beq.n	800abf8 <cmp_lfn+0xa0>
 800abf4:	2300      	movs	r3, #0
 800abf6:	e018      	b.n	800ac2a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	3301      	adds	r3, #1
 800abfc:	613b      	str	r3, [r7, #16]
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	2b0c      	cmp	r3, #12
 800ac02:	d9c8      	bls.n	800ab96 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00b      	beq.n	800ac28 <cmp_lfn+0xd0>
 800ac10:	89fb      	ldrh	r3, [r7, #14]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d008      	beq.n	800ac28 <cmp_lfn+0xd0>
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	881b      	ldrh	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <cmp_lfn+0xd0>
 800ac24:	2300      	movs	r3, #0
 800ac26:	e000      	b.n	800ac2a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ac28:	2301      	movs	r3, #1
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	371c      	adds	r7, #28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd90      	pop	{r4, r7, pc}
 800ac32:	bf00      	nop
 800ac34:	0801659c 	.word	0x0801659c

0800ac38 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b088      	sub	sp, #32
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	4611      	mov	r1, r2
 800ac44:	461a      	mov	r2, r3
 800ac46:	460b      	mov	r3, r1
 800ac48:	71fb      	strb	r3, [r7, #7]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	330d      	adds	r3, #13
 800ac52:	79ba      	ldrb	r2, [r7, #6]
 800ac54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	330b      	adds	r3, #11
 800ac5a:	220f      	movs	r2, #15
 800ac5c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	330c      	adds	r3, #12
 800ac62:	2200      	movs	r2, #0
 800ac64:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	331a      	adds	r3, #26
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fe ff06 	bl	8009a7e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ac72:	79fb      	ldrb	r3, [r7, #7]
 800ac74:	1e5a      	subs	r2, r3, #1
 800ac76:	4613      	mov	r3, r2
 800ac78:	005b      	lsls	r3, r3, #1
 800ac7a:	4413      	add	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4413      	add	r3, r2
 800ac80:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ac82:	2300      	movs	r3, #0
 800ac84:	82fb      	strh	r3, [r7, #22]
 800ac86:	2300      	movs	r3, #0
 800ac88:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ac8a:	8afb      	ldrh	r3, [r7, #22]
 800ac8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d007      	beq.n	800aca4 <put_lfn+0x6c>
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	1c5a      	adds	r2, r3, #1
 800ac98:	61fa      	str	r2, [r7, #28]
 800ac9a:	005b      	lsls	r3, r3, #1
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	4413      	add	r3, r2
 800aca0:	881b      	ldrh	r3, [r3, #0]
 800aca2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800aca4:	4a17      	ldr	r2, [pc, #92]	; (800ad04 <put_lfn+0xcc>)
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	4413      	add	r3, r2
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	461a      	mov	r2, r3
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	4413      	add	r3, r2
 800acb2:	8afa      	ldrh	r2, [r7, #22]
 800acb4:	4611      	mov	r1, r2
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe fee1 	bl	8009a7e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800acbc:	8afb      	ldrh	r3, [r7, #22]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d102      	bne.n	800acc8 <put_lfn+0x90>
 800acc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acc6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	3301      	adds	r3, #1
 800accc:	61bb      	str	r3, [r7, #24]
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	2b0c      	cmp	r3, #12
 800acd2:	d9da      	bls.n	800ac8a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800acd4:	8afb      	ldrh	r3, [r7, #22]
 800acd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acda:	4293      	cmp	r3, r2
 800acdc:	d006      	beq.n	800acec <put_lfn+0xb4>
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	005b      	lsls	r3, r3, #1
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	4413      	add	r3, r2
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d103      	bne.n	800acf4 <put_lfn+0xbc>
 800acec:	79fb      	ldrb	r3, [r7, #7]
 800acee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acf2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	79fa      	ldrb	r2, [r7, #7]
 800acf8:	701a      	strb	r2, [r3, #0]
}
 800acfa:	bf00      	nop
 800acfc:	3720      	adds	r7, #32
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	0801659c 	.word	0x0801659c

0800ad08 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08c      	sub	sp, #48	; 0x30
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
 800ad14:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ad16:	220b      	movs	r2, #11
 800ad18:	68b9      	ldr	r1, [r7, #8]
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f7fe fef6 	bl	8009b0c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	2b05      	cmp	r3, #5
 800ad24:	d92b      	bls.n	800ad7e <gen_numname+0x76>
		sr = seq;
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ad2a:	e022      	b.n	800ad72 <gen_numname+0x6a>
			wc = *lfn++;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	1c9a      	adds	r2, r3, #2
 800ad30:	607a      	str	r2, [r7, #4]
 800ad32:	881b      	ldrh	r3, [r3, #0]
 800ad34:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ad36:	2300      	movs	r3, #0
 800ad38:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad3a:	e017      	b.n	800ad6c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	005a      	lsls	r2, r3, #1
 800ad40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	4413      	add	r3, r2
 800ad48:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ad4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad4c:	085b      	lsrs	r3, r3, #1
 800ad4e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d005      	beq.n	800ad66 <gen_numname+0x5e>
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ad60:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ad64:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ad66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad68:	3301      	adds	r3, #1
 800ad6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	2b0f      	cmp	r3, #15
 800ad70:	d9e4      	bls.n	800ad3c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	881b      	ldrh	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1d8      	bne.n	800ad2c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ad7e:	2307      	movs	r3, #7
 800ad80:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	f003 030f 	and.w	r3, r3, #15
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	3330      	adds	r3, #48	; 0x30
 800ad8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ad92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad96:	2b39      	cmp	r3, #57	; 0x39
 800ad98:	d904      	bls.n	800ada4 <gen_numname+0x9c>
 800ad9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad9e:	3307      	adds	r3, #7
 800ada0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ada4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada6:	1e5a      	subs	r2, r3, #1
 800ada8:	62ba      	str	r2, [r7, #40]	; 0x28
 800adaa:	3330      	adds	r3, #48	; 0x30
 800adac:	443b      	add	r3, r7
 800adae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800adb2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	091b      	lsrs	r3, r3, #4
 800adba:	603b      	str	r3, [r7, #0]
	} while (seq);
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1df      	bne.n	800ad82 <gen_numname+0x7a>
	ns[i] = '~';
 800adc2:	f107 0214 	add.w	r2, r7, #20
 800adc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc8:	4413      	add	r3, r2
 800adca:	227e      	movs	r2, #126	; 0x7e
 800adcc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800adce:	2300      	movs	r3, #0
 800add0:	627b      	str	r3, [r7, #36]	; 0x24
 800add2:	e002      	b.n	800adda <gen_numname+0xd2>
 800add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add6:	3301      	adds	r3, #1
 800add8:	627b      	str	r3, [r7, #36]	; 0x24
 800adda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800addc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adde:	429a      	cmp	r2, r3
 800ade0:	d205      	bcs.n	800adee <gen_numname+0xe6>
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	4413      	add	r3, r2
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	2b20      	cmp	r3, #32
 800adec:	d1f2      	bne.n	800add4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800adee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf0:	2b07      	cmp	r3, #7
 800adf2:	d807      	bhi.n	800ae04 <gen_numname+0xfc>
 800adf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf6:	1c5a      	adds	r2, r3, #1
 800adf8:	62ba      	str	r2, [r7, #40]	; 0x28
 800adfa:	3330      	adds	r3, #48	; 0x30
 800adfc:	443b      	add	r3, r7
 800adfe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ae02:	e000      	b.n	800ae06 <gen_numname+0xfe>
 800ae04:	2120      	movs	r1, #32
 800ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae08:	1c5a      	adds	r2, r3, #1
 800ae0a:	627a      	str	r2, [r7, #36]	; 0x24
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	4413      	add	r3, r2
 800ae10:	460a      	mov	r2, r1
 800ae12:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	2b07      	cmp	r3, #7
 800ae18:	d9e9      	bls.n	800adee <gen_numname+0xe6>
}
 800ae1a:	bf00      	nop
 800ae1c:	bf00      	nop
 800ae1e:	3730      	adds	r7, #48	; 0x30
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ae30:	230b      	movs	r3, #11
 800ae32:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	0852      	lsrs	r2, r2, #1
 800ae3a:	01db      	lsls	r3, r3, #7
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	1c59      	adds	r1, r3, #1
 800ae44:	6079      	str	r1, [r7, #4]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	4413      	add	r3, r2
 800ae4a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	60bb      	str	r3, [r7, #8]
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1ed      	bne.n	800ae34 <sum_sfn+0x10>
	return sum;
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b086      	sub	sp, #24
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ae74:	2100      	movs	r1, #0
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff fc88 	bl	800a78c <dir_sdi>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ae80:	7dfb      	ldrb	r3, [r7, #23]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <dir_find+0x24>
 800ae86:	7dfb      	ldrb	r3, [r7, #23]
 800ae88:	e0a9      	b.n	800afde <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ae8a:	23ff      	movs	r3, #255	; 0xff
 800ae8c:	753b      	strb	r3, [r7, #20]
 800ae8e:	7d3b      	ldrb	r3, [r7, #20]
 800ae90:	757b      	strb	r3, [r7, #21]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f04f 32ff 	mov.w	r2, #4294967295
 800ae98:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	4619      	mov	r1, r3
 800aea0:	6938      	ldr	r0, [r7, #16]
 800aea2:	f7ff f893 	bl	8009fcc <move_window>
 800aea6:	4603      	mov	r3, r0
 800aea8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aeaa:	7dfb      	ldrb	r3, [r7, #23]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f040 8090 	bne.w	800afd2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aeba:	7dbb      	ldrb	r3, [r7, #22]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d102      	bne.n	800aec6 <dir_find+0x60>
 800aec0:	2304      	movs	r3, #4
 800aec2:	75fb      	strb	r3, [r7, #23]
 800aec4:	e08a      	b.n	800afdc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	330b      	adds	r3, #11
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aed2:	73fb      	strb	r3, [r7, #15]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	7bfa      	ldrb	r2, [r7, #15]
 800aed8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800aeda:	7dbb      	ldrb	r3, [r7, #22]
 800aedc:	2be5      	cmp	r3, #229	; 0xe5
 800aede:	d007      	beq.n	800aef0 <dir_find+0x8a>
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	f003 0308 	and.w	r3, r3, #8
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d009      	beq.n	800aefe <dir_find+0x98>
 800aeea:	7bfb      	ldrb	r3, [r7, #15]
 800aeec:	2b0f      	cmp	r3, #15
 800aeee:	d006      	beq.n	800aefe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aef0:	23ff      	movs	r3, #255	; 0xff
 800aef2:	757b      	strb	r3, [r7, #21]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f04f 32ff 	mov.w	r2, #4294967295
 800aefa:	631a      	str	r2, [r3, #48]	; 0x30
 800aefc:	e05e      	b.n	800afbc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
 800af00:	2b0f      	cmp	r3, #15
 800af02:	d136      	bne.n	800af72 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800af0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d154      	bne.n	800afbc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800af12:	7dbb      	ldrb	r3, [r7, #22]
 800af14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00d      	beq.n	800af38 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6a1b      	ldr	r3, [r3, #32]
 800af20:	7b5b      	ldrb	r3, [r3, #13]
 800af22:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800af24:	7dbb      	ldrb	r3, [r7, #22]
 800af26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af2a:	75bb      	strb	r3, [r7, #22]
 800af2c:	7dbb      	ldrb	r3, [r7, #22]
 800af2e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	695a      	ldr	r2, [r3, #20]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800af38:	7dba      	ldrb	r2, [r7, #22]
 800af3a:	7d7b      	ldrb	r3, [r7, #21]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d115      	bne.n	800af6c <dir_find+0x106>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a1b      	ldr	r3, [r3, #32]
 800af44:	330d      	adds	r3, #13
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	7d3a      	ldrb	r2, [r7, #20]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d10e      	bne.n	800af6c <dir_find+0x106>
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	691a      	ldr	r2, [r3, #16]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	4619      	mov	r1, r3
 800af58:	4610      	mov	r0, r2
 800af5a:	f7ff fdfd 	bl	800ab58 <cmp_lfn>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d003      	beq.n	800af6c <dir_find+0x106>
 800af64:	7d7b      	ldrb	r3, [r7, #21]
 800af66:	3b01      	subs	r3, #1
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	e000      	b.n	800af6e <dir_find+0x108>
 800af6c:	23ff      	movs	r3, #255	; 0xff
 800af6e:	757b      	strb	r3, [r7, #21]
 800af70:	e024      	b.n	800afbc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800af72:	7d7b      	ldrb	r3, [r7, #21]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d109      	bne.n	800af8c <dir_find+0x126>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a1b      	ldr	r3, [r3, #32]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7ff ff51 	bl	800ae24 <sum_sfn>
 800af82:	4603      	mov	r3, r0
 800af84:	461a      	mov	r2, r3
 800af86:	7d3b      	ldrb	r3, [r7, #20]
 800af88:	4293      	cmp	r3, r2
 800af8a:	d024      	beq.n	800afd6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800af92:	f003 0301 	and.w	r3, r3, #1
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10a      	bne.n	800afb0 <dir_find+0x14a>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a18      	ldr	r0, [r3, #32]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	3324      	adds	r3, #36	; 0x24
 800afa2:	220b      	movs	r2, #11
 800afa4:	4619      	mov	r1, r3
 800afa6:	f7fe fded 	bl	8009b84 <mem_cmp>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d014      	beq.n	800afda <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800afb0:	23ff      	movs	r3, #255	; 0xff
 800afb2:	757b      	strb	r3, [r7, #21]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f04f 32ff 	mov.w	r2, #4294967295
 800afba:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800afbc:	2100      	movs	r1, #0
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7ff fc6d 	bl	800a89e <dir_next>
 800afc4:	4603      	mov	r3, r0
 800afc6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800afc8:	7dfb      	ldrb	r3, [r7, #23]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f43f af65 	beq.w	800ae9a <dir_find+0x34>
 800afd0:	e004      	b.n	800afdc <dir_find+0x176>
		if (res != FR_OK) break;
 800afd2:	bf00      	nop
 800afd4:	e002      	b.n	800afdc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800afd6:	bf00      	nop
 800afd8:	e000      	b.n	800afdc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800afda:	bf00      	nop

	return res;
 800afdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
	...

0800afe8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b08c      	sub	sp, #48	; 0x30
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800affc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d001      	beq.n	800b008 <dir_register+0x20>
 800b004:	2306      	movs	r3, #6
 800b006:	e0e0      	b.n	800b1ca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b008:	2300      	movs	r3, #0
 800b00a:	627b      	str	r3, [r7, #36]	; 0x24
 800b00c:	e002      	b.n	800b014 <dir_register+0x2c>
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	3301      	adds	r3, #1
 800b012:	627b      	str	r3, [r7, #36]	; 0x24
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	691a      	ldr	r2, [r3, #16]
 800b018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	4413      	add	r3, r2
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1f4      	bne.n	800b00e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b02a:	f107 030c 	add.w	r3, r7, #12
 800b02e:	220c      	movs	r2, #12
 800b030:	4618      	mov	r0, r3
 800b032:	f7fe fd6b 	bl	8009b0c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b036:	7dfb      	ldrb	r3, [r7, #23]
 800b038:	f003 0301 	and.w	r3, r3, #1
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d032      	beq.n	800b0a6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2240      	movs	r2, #64	; 0x40
 800b044:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b048:	2301      	movs	r3, #1
 800b04a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b04c:	e016      	b.n	800b07c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	691a      	ldr	r2, [r3, #16]
 800b058:	f107 010c 	add.w	r1, r7, #12
 800b05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05e:	f7ff fe53 	bl	800ad08 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f7ff feff 	bl	800ae66 <dir_find>
 800b068:	4603      	mov	r3, r0
 800b06a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b06e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b072:	2b00      	cmp	r3, #0
 800b074:	d106      	bne.n	800b084 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b078:	3301      	adds	r3, #1
 800b07a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07e:	2b63      	cmp	r3, #99	; 0x63
 800b080:	d9e5      	bls.n	800b04e <dir_register+0x66>
 800b082:	e000      	b.n	800b086 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b084:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b088:	2b64      	cmp	r3, #100	; 0x64
 800b08a:	d101      	bne.n	800b090 <dir_register+0xa8>
 800b08c:	2307      	movs	r3, #7
 800b08e:	e09c      	b.n	800b1ca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b094:	2b04      	cmp	r3, #4
 800b096:	d002      	beq.n	800b09e <dir_register+0xb6>
 800b098:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b09c:	e095      	b.n	800b1ca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b09e:	7dfa      	ldrb	r2, [r7, #23]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b0a6:	7dfb      	ldrb	r3, [r7, #23]
 800b0a8:	f003 0302 	and.w	r3, r3, #2
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d007      	beq.n	800b0c0 <dir_register+0xd8>
 800b0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b2:	330c      	adds	r3, #12
 800b0b4:	4a47      	ldr	r2, [pc, #284]	; (800b1d4 <dir_register+0x1ec>)
 800b0b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ba:	089b      	lsrs	r3, r3, #2
 800b0bc:	3301      	adds	r3, #1
 800b0be:	e000      	b.n	800b0c2 <dir_register+0xda>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b0c4:	6a39      	ldr	r1, [r7, #32]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7ff fcbf 	bl	800aa4a <dir_alloc>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b0d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d148      	bne.n	800b16c <dir_register+0x184>
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	623b      	str	r3, [r7, #32]
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d042      	beq.n	800b16c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	695a      	ldr	r2, [r3, #20]
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	015b      	lsls	r3, r3, #5
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7ff fb4a 	bl	800a78c <dir_sdi>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b0fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b102:	2b00      	cmp	r3, #0
 800b104:	d132      	bne.n	800b16c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	3324      	adds	r3, #36	; 0x24
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7ff fe8a 	bl	800ae24 <sum_sfn>
 800b110:	4603      	mov	r3, r0
 800b112:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	69db      	ldr	r3, [r3, #28]
 800b118:	4619      	mov	r1, r3
 800b11a:	69f8      	ldr	r0, [r7, #28]
 800b11c:	f7fe ff56 	bl	8009fcc <move_window>
 800b120:	4603      	mov	r3, r0
 800b122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d11d      	bne.n	800b16a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	6918      	ldr	r0, [r3, #16]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a19      	ldr	r1, [r3, #32]
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	b2da      	uxtb	r2, r3
 800b13a:	7efb      	ldrb	r3, [r7, #27]
 800b13c:	f7ff fd7c 	bl	800ac38 <put_lfn>
				fs->wflag = 1;
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	2201      	movs	r2, #1
 800b144:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b146:	2100      	movs	r1, #0
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff fba8 	bl	800a89e <dir_next>
 800b14e:	4603      	mov	r3, r0
 800b150:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b154:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d107      	bne.n	800b16c <dir_register+0x184>
 800b15c:	6a3b      	ldr	r3, [r7, #32]
 800b15e:	3b01      	subs	r3, #1
 800b160:	623b      	str	r3, [r7, #32]
 800b162:	6a3b      	ldr	r3, [r7, #32]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d1d5      	bne.n	800b114 <dir_register+0x12c>
 800b168:	e000      	b.n	800b16c <dir_register+0x184>
				if (res != FR_OK) break;
 800b16a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b16c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b170:	2b00      	cmp	r3, #0
 800b172:	d128      	bne.n	800b1c6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	69db      	ldr	r3, [r3, #28]
 800b178:	4619      	mov	r1, r3
 800b17a:	69f8      	ldr	r0, [r7, #28]
 800b17c:	f7fe ff26 	bl	8009fcc <move_window>
 800b180:	4603      	mov	r3, r0
 800b182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d11b      	bne.n	800b1c6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a1b      	ldr	r3, [r3, #32]
 800b192:	2220      	movs	r2, #32
 800b194:	2100      	movs	r1, #0
 800b196:	4618      	mov	r0, r3
 800b198:	f7fe fcd9 	bl	8009b4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a18      	ldr	r0, [r3, #32]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	3324      	adds	r3, #36	; 0x24
 800b1a4:	220b      	movs	r2, #11
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	f7fe fcb0 	bl	8009b0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	330c      	adds	r3, #12
 800b1b8:	f002 0218 	and.w	r2, r2, #24
 800b1bc:	b2d2      	uxtb	r2, r2
 800b1be:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b1c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3730      	adds	r7, #48	; 0x30
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	4ec4ec4f 	.word	0x4ec4ec4f

0800b1d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b08a      	sub	sp, #40	; 0x28
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	613b      	str	r3, [r7, #16]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	617b      	str	r3, [r7, #20]
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	1c5a      	adds	r2, r3, #1
 800b1fc:	61ba      	str	r2, [r7, #24]
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	4413      	add	r3, r2
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b208:	2b1f      	cmp	r3, #31
 800b20a:	d940      	bls.n	800b28e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b20c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b20e:	2b2f      	cmp	r3, #47	; 0x2f
 800b210:	d006      	beq.n	800b220 <create_name+0x48>
 800b212:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b214:	2b5c      	cmp	r3, #92	; 0x5c
 800b216:	d110      	bne.n	800b23a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b218:	e002      	b.n	800b220 <create_name+0x48>
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	3301      	adds	r3, #1
 800b21e:	61bb      	str	r3, [r7, #24]
 800b220:	693a      	ldr	r2, [r7, #16]
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	4413      	add	r3, r2
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	2b2f      	cmp	r3, #47	; 0x2f
 800b22a:	d0f6      	beq.n	800b21a <create_name+0x42>
 800b22c:	693a      	ldr	r2, [r7, #16]
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	4413      	add	r3, r2
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	2b5c      	cmp	r3, #92	; 0x5c
 800b236:	d0f0      	beq.n	800b21a <create_name+0x42>
			break;
 800b238:	e02a      	b.n	800b290 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	2bfe      	cmp	r3, #254	; 0xfe
 800b23e:	d901      	bls.n	800b244 <create_name+0x6c>
 800b240:	2306      	movs	r3, #6
 800b242:	e17d      	b.n	800b540 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b244:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b246:	b2db      	uxtb	r3, r3
 800b248:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b24a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b24c:	2101      	movs	r1, #1
 800b24e:	4618      	mov	r0, r3
 800b250:	f001 fc00 	bl	800ca54 <ff_convert>
 800b254:	4603      	mov	r3, r0
 800b256:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <create_name+0x8a>
 800b25e:	2306      	movs	r3, #6
 800b260:	e16e      	b.n	800b540 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b264:	2b7f      	cmp	r3, #127	; 0x7f
 800b266:	d809      	bhi.n	800b27c <create_name+0xa4>
 800b268:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b26a:	4619      	mov	r1, r3
 800b26c:	488d      	ldr	r0, [pc, #564]	; (800b4a4 <create_name+0x2cc>)
 800b26e:	f7fe fcb0 	bl	8009bd2 <chk_chr>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <create_name+0xa4>
 800b278:	2306      	movs	r3, #6
 800b27a:	e161      	b.n	800b540 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	1c5a      	adds	r2, r3, #1
 800b280:	617a      	str	r2, [r7, #20]
 800b282:	005b      	lsls	r3, r3, #1
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	4413      	add	r3, r2
 800b288:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b28a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b28c:	e7b4      	b.n	800b1f8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b28e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b290:	693a      	ldr	r2, [r7, #16]
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	441a      	add	r2, r3
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b29a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b29c:	2b1f      	cmp	r3, #31
 800b29e:	d801      	bhi.n	800b2a4 <create_name+0xcc>
 800b2a0:	2304      	movs	r3, #4
 800b2a2:	e000      	b.n	800b2a6 <create_name+0xce>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b2aa:	e011      	b.n	800b2d0 <create_name+0xf8>
		w = lfn[di - 1];
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	881b      	ldrh	r3, [r3, #0]
 800b2bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b2be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2c0:	2b20      	cmp	r3, #32
 800b2c2:	d002      	beq.n	800b2ca <create_name+0xf2>
 800b2c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2c6:	2b2e      	cmp	r3, #46	; 0x2e
 800b2c8:	d106      	bne.n	800b2d8 <create_name+0x100>
		di--;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1ea      	bne.n	800b2ac <create_name+0xd4>
 800b2d6:	e000      	b.n	800b2da <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b2d8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	005b      	lsls	r3, r3, #1
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d101      	bne.n	800b2f0 <create_name+0x118>
 800b2ec:	2306      	movs	r3, #6
 800b2ee:	e127      	b.n	800b540 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	3324      	adds	r3, #36	; 0x24
 800b2f4:	220b      	movs	r2, #11
 800b2f6:	2120      	movs	r1, #32
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7fe fc28 	bl	8009b4e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b2fe:	2300      	movs	r3, #0
 800b300:	61bb      	str	r3, [r7, #24]
 800b302:	e002      	b.n	800b30a <create_name+0x132>
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	3301      	adds	r3, #1
 800b308:	61bb      	str	r3, [r7, #24]
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	005b      	lsls	r3, r3, #1
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	4413      	add	r3, r2
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	2b20      	cmp	r3, #32
 800b316:	d0f5      	beq.n	800b304 <create_name+0x12c>
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	005b      	lsls	r3, r3, #1
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	4413      	add	r3, r2
 800b320:	881b      	ldrh	r3, [r3, #0]
 800b322:	2b2e      	cmp	r3, #46	; 0x2e
 800b324:	d0ee      	beq.n	800b304 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d009      	beq.n	800b340 <create_name+0x168>
 800b32c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b330:	f043 0303 	orr.w	r3, r3, #3
 800b334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b338:	e002      	b.n	800b340 <create_name+0x168>
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	3b01      	subs	r3, #1
 800b33e:	617b      	str	r3, [r7, #20]
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d009      	beq.n	800b35a <create_name+0x182>
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b34c:	3b01      	subs	r3, #1
 800b34e:	005b      	lsls	r3, r3, #1
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	4413      	add	r3, r2
 800b354:	881b      	ldrh	r3, [r3, #0]
 800b356:	2b2e      	cmp	r3, #46	; 0x2e
 800b358:	d1ef      	bne.n	800b33a <create_name+0x162>

	i = b = 0; ni = 8;
 800b35a:	2300      	movs	r3, #0
 800b35c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b360:	2300      	movs	r3, #0
 800b362:	623b      	str	r3, [r7, #32]
 800b364:	2308      	movs	r3, #8
 800b366:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	61ba      	str	r2, [r7, #24]
 800b36e:	005b      	lsls	r3, r3, #1
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	4413      	add	r3, r2
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f000 8090 	beq.w	800b4a0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b380:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b382:	2b20      	cmp	r3, #32
 800b384:	d006      	beq.n	800b394 <create_name+0x1bc>
 800b386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b388:	2b2e      	cmp	r3, #46	; 0x2e
 800b38a:	d10a      	bne.n	800b3a2 <create_name+0x1ca>
 800b38c:	69ba      	ldr	r2, [r7, #24]
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	429a      	cmp	r2, r3
 800b392:	d006      	beq.n	800b3a2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b398:	f043 0303 	orr.w	r3, r3, #3
 800b39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3a0:	e07d      	b.n	800b49e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b3a2:	6a3a      	ldr	r2, [r7, #32]
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d203      	bcs.n	800b3b2 <create_name+0x1da>
 800b3aa:	69ba      	ldr	r2, [r7, #24]
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d123      	bne.n	800b3fa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	2b0b      	cmp	r3, #11
 800b3b6:	d106      	bne.n	800b3c6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3bc:	f043 0303 	orr.w	r3, r3, #3
 800b3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3c4:	e075      	b.n	800b4b2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b3c6:	69ba      	ldr	r2, [r7, #24]
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d005      	beq.n	800b3da <create_name+0x202>
 800b3ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3d2:	f043 0303 	orr.w	r3, r3, #3
 800b3d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b3da:	69ba      	ldr	r2, [r7, #24]
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d866      	bhi.n	800b4b0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	61bb      	str	r3, [r7, #24]
 800b3e6:	2308      	movs	r3, #8
 800b3e8:	623b      	str	r3, [r7, #32]
 800b3ea:	230b      	movs	r3, #11
 800b3ec:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b3ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b3f8:	e051      	b.n	800b49e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b3fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3fc:	2b7f      	cmp	r3, #127	; 0x7f
 800b3fe:	d914      	bls.n	800b42a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b402:	2100      	movs	r1, #0
 800b404:	4618      	mov	r0, r3
 800b406:	f001 fb25 	bl	800ca54 <ff_convert>
 800b40a:	4603      	mov	r3, r0
 800b40c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b40e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b410:	2b00      	cmp	r3, #0
 800b412:	d004      	beq.n	800b41e <create_name+0x246>
 800b414:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b416:	3b80      	subs	r3, #128	; 0x80
 800b418:	4a23      	ldr	r2, [pc, #140]	; (800b4a8 <create_name+0x2d0>)
 800b41a:	5cd3      	ldrb	r3, [r2, r3]
 800b41c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b41e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b422:	f043 0302 	orr.w	r3, r3, #2
 800b426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b42a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d007      	beq.n	800b440 <create_name+0x268>
 800b430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b432:	4619      	mov	r1, r3
 800b434:	481d      	ldr	r0, [pc, #116]	; (800b4ac <create_name+0x2d4>)
 800b436:	f7fe fbcc 	bl	8009bd2 <chk_chr>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d008      	beq.n	800b452 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b440:	235f      	movs	r3, #95	; 0x5f
 800b442:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b448:	f043 0303 	orr.w	r3, r3, #3
 800b44c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b450:	e01b      	b.n	800b48a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b454:	2b40      	cmp	r3, #64	; 0x40
 800b456:	d909      	bls.n	800b46c <create_name+0x294>
 800b458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b45a:	2b5a      	cmp	r3, #90	; 0x5a
 800b45c:	d806      	bhi.n	800b46c <create_name+0x294>
					b |= 2;
 800b45e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b462:	f043 0302 	orr.w	r3, r3, #2
 800b466:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b46a:	e00e      	b.n	800b48a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b46c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b46e:	2b60      	cmp	r3, #96	; 0x60
 800b470:	d90b      	bls.n	800b48a <create_name+0x2b2>
 800b472:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b474:	2b7a      	cmp	r3, #122	; 0x7a
 800b476:	d808      	bhi.n	800b48a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b478:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b47c:	f043 0301 	orr.w	r3, r3, #1
 800b480:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b486:	3b20      	subs	r3, #32
 800b488:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	1c5a      	adds	r2, r3, #1
 800b48e:	623a      	str	r2, [r7, #32]
 800b490:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b492:	b2d1      	uxtb	r1, r2
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	4413      	add	r3, r2
 800b498:	460a      	mov	r2, r1
 800b49a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b49e:	e763      	b.n	800b368 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b4a0:	bf00      	nop
 800b4a2:	e006      	b.n	800b4b2 <create_name+0x2da>
 800b4a4:	08016384 	.word	0x08016384
 800b4a8:	0801651c 	.word	0x0801651c
 800b4ac:	08016390 	.word	0x08016390
			if (si > di) break;			/* No extension */
 800b4b0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b4b8:	2be5      	cmp	r3, #229	; 0xe5
 800b4ba:	d103      	bne.n	800b4c4 <create_name+0x2ec>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2205      	movs	r2, #5
 800b4c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	2b08      	cmp	r3, #8
 800b4c8:	d104      	bne.n	800b4d4 <create_name+0x2fc>
 800b4ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b4d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4d8:	f003 030c 	and.w	r3, r3, #12
 800b4dc:	2b0c      	cmp	r3, #12
 800b4de:	d005      	beq.n	800b4ec <create_name+0x314>
 800b4e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4e4:	f003 0303 	and.w	r3, r3, #3
 800b4e8:	2b03      	cmp	r3, #3
 800b4ea:	d105      	bne.n	800b4f8 <create_name+0x320>
 800b4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4f0:	f043 0302 	orr.w	r3, r3, #2
 800b4f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b4f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4fc:	f003 0302 	and.w	r3, r3, #2
 800b500:	2b00      	cmp	r3, #0
 800b502:	d117      	bne.n	800b534 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b504:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b508:	f003 0303 	and.w	r3, r3, #3
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d105      	bne.n	800b51c <create_name+0x344>
 800b510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b514:	f043 0310 	orr.w	r3, r3, #16
 800b518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b51c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b520:	f003 030c 	and.w	r3, r3, #12
 800b524:	2b04      	cmp	r3, #4
 800b526:	d105      	bne.n	800b534 <create_name+0x35c>
 800b528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b52c:	f043 0308 	orr.w	r3, r3, #8
 800b530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b53a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b53e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b540:	4618      	mov	r0, r3
 800b542:	3728      	adds	r7, #40	; 0x28
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b086      	sub	sp, #24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b55c:	e002      	b.n	800b564 <follow_path+0x1c>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	3301      	adds	r3, #1
 800b562:	603b      	str	r3, [r7, #0]
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	2b2f      	cmp	r3, #47	; 0x2f
 800b56a:	d0f8      	beq.n	800b55e <follow_path+0x16>
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	2b5c      	cmp	r3, #92	; 0x5c
 800b572:	d0f4      	beq.n	800b55e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	2200      	movs	r2, #0
 800b578:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	2b1f      	cmp	r3, #31
 800b580:	d80a      	bhi.n	800b598 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2280      	movs	r2, #128	; 0x80
 800b586:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b58a:	2100      	movs	r1, #0
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7ff f8fd 	bl	800a78c <dir_sdi>
 800b592:	4603      	mov	r3, r0
 800b594:	75fb      	strb	r3, [r7, #23]
 800b596:	e048      	b.n	800b62a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b598:	463b      	mov	r3, r7
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7ff fe1b 	bl	800b1d8 <create_name>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b5a6:	7dfb      	ldrb	r3, [r7, #23]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d139      	bne.n	800b620 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7ff fc5a 	bl	800ae66 <dir_find>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b5bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b5be:	7dfb      	ldrb	r3, [r7, #23]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00a      	beq.n	800b5da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b5c4:	7dfb      	ldrb	r3, [r7, #23]
 800b5c6:	2b04      	cmp	r3, #4
 800b5c8:	d12c      	bne.n	800b624 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b5ca:	7afb      	ldrb	r3, [r7, #11]
 800b5cc:	f003 0304 	and.w	r3, r3, #4
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d127      	bne.n	800b624 <follow_path+0xdc>
 800b5d4:	2305      	movs	r3, #5
 800b5d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b5d8:	e024      	b.n	800b624 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b5da:	7afb      	ldrb	r3, [r7, #11]
 800b5dc:	f003 0304 	and.w	r3, r3, #4
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d121      	bne.n	800b628 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	799b      	ldrb	r3, [r3, #6]
 800b5e8:	f003 0310 	and.w	r3, r3, #16
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d102      	bne.n	800b5f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b5f0:	2305      	movs	r3, #5
 800b5f2:	75fb      	strb	r3, [r7, #23]
 800b5f4:	e019      	b.n	800b62a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	695b      	ldr	r3, [r3, #20]
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	8992      	ldrh	r2, [r2, #12]
 800b604:	fbb3 f0f2 	udiv	r0, r3, r2
 800b608:	fb00 f202 	mul.w	r2, r0, r2
 800b60c:	1a9b      	subs	r3, r3, r2
 800b60e:	440b      	add	r3, r1
 800b610:	4619      	mov	r1, r3
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f7ff fa60 	bl	800aad8 <ld_clust>
 800b618:	4602      	mov	r2, r0
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b61e:	e7bb      	b.n	800b598 <follow_path+0x50>
			if (res != FR_OK) break;
 800b620:	bf00      	nop
 800b622:	e002      	b.n	800b62a <follow_path+0xe2>
				break;
 800b624:	bf00      	nop
 800b626:	e000      	b.n	800b62a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b628:	bf00      	nop
			}
		}
	}

	return res;
 800b62a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3718      	adds	r7, #24
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b634:	b480      	push	{r7}
 800b636:	b087      	sub	sp, #28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b63c:	f04f 33ff 	mov.w	r3, #4294967295
 800b640:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d031      	beq.n	800b6ae <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	617b      	str	r3, [r7, #20]
 800b650:	e002      	b.n	800b658 <get_ldnumber+0x24>
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	3301      	adds	r3, #1
 800b656:	617b      	str	r3, [r7, #20]
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	2b1f      	cmp	r3, #31
 800b65e:	d903      	bls.n	800b668 <get_ldnumber+0x34>
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	2b3a      	cmp	r3, #58	; 0x3a
 800b666:	d1f4      	bne.n	800b652 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	2b3a      	cmp	r3, #58	; 0x3a
 800b66e:	d11c      	bne.n	800b6aa <get_ldnumber+0x76>
			tp = *path;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	1c5a      	adds	r2, r3, #1
 800b67a:	60fa      	str	r2, [r7, #12]
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	3b30      	subs	r3, #48	; 0x30
 800b680:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	2b09      	cmp	r3, #9
 800b686:	d80e      	bhi.n	800b6a6 <get_ldnumber+0x72>
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d10a      	bne.n	800b6a6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d107      	bne.n	800b6a6 <get_ldnumber+0x72>
					vol = (int)i;
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	3301      	adds	r3, #1
 800b69e:	617b      	str	r3, [r7, #20]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	e002      	b.n	800b6b0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b6ae:	693b      	ldr	r3, [r7, #16]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	371c      	adds	r7, #28
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	70da      	strb	r2, [r3, #3]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b6d4:	6839      	ldr	r1, [r7, #0]
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7fe fc78 	bl	8009fcc <move_window>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d001      	beq.n	800b6e6 <check_fs+0x2a>
 800b6e2:	2304      	movs	r3, #4
 800b6e4:	e038      	b.n	800b758 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	333c      	adds	r3, #60	; 0x3c
 800b6ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe f98a 	bl	8009a08 <ld_word>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d001      	beq.n	800b704 <check_fs+0x48>
 800b700:	2303      	movs	r3, #3
 800b702:	e029      	b.n	800b758 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b70a:	2be9      	cmp	r3, #233	; 0xe9
 800b70c:	d009      	beq.n	800b722 <check_fs+0x66>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b714:	2beb      	cmp	r3, #235	; 0xeb
 800b716:	d11e      	bne.n	800b756 <check_fs+0x9a>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b71e:	2b90      	cmp	r3, #144	; 0x90
 800b720:	d119      	bne.n	800b756 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	333c      	adds	r3, #60	; 0x3c
 800b726:	3336      	adds	r3, #54	; 0x36
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe f985 	bl	8009a38 <ld_dword>
 800b72e:	4603      	mov	r3, r0
 800b730:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b734:	4a0a      	ldr	r2, [pc, #40]	; (800b760 <check_fs+0xa4>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d101      	bne.n	800b73e <check_fs+0x82>
 800b73a:	2300      	movs	r3, #0
 800b73c:	e00c      	b.n	800b758 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	333c      	adds	r3, #60	; 0x3c
 800b742:	3352      	adds	r3, #82	; 0x52
 800b744:	4618      	mov	r0, r3
 800b746:	f7fe f977 	bl	8009a38 <ld_dword>
 800b74a:	4603      	mov	r3, r0
 800b74c:	4a05      	ldr	r2, [pc, #20]	; (800b764 <check_fs+0xa8>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d101      	bne.n	800b756 <check_fs+0x9a>
 800b752:	2300      	movs	r3, #0
 800b754:	e000      	b.n	800b758 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b756:	2302      	movs	r3, #2
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	00544146 	.word	0x00544146
 800b764:	33544146 	.word	0x33544146

0800b768 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b096      	sub	sp, #88	; 0x58
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	4613      	mov	r3, r2
 800b774:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	2200      	movs	r2, #0
 800b77a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f7ff ff59 	bl	800b634 <get_ldnumber>
 800b782:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b786:	2b00      	cmp	r3, #0
 800b788:	da01      	bge.n	800b78e <find_volume+0x26>
 800b78a:	230b      	movs	r3, #11
 800b78c:	e26a      	b.n	800bc64 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b78e:	4aa3      	ldr	r2, [pc, #652]	; (800ba1c <find_volume+0x2b4>)
 800b790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b796:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d101      	bne.n	800b7a2 <find_volume+0x3a>
 800b79e:	230c      	movs	r3, #12
 800b7a0:	e260      	b.n	800bc64 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800b7a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7a4:	f7fe fa30 	bl	8009c08 <lock_fs>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d101      	bne.n	800b7b2 <find_volume+0x4a>
 800b7ae:	230f      	movs	r3, #15
 800b7b0:	e258      	b.n	800bc64 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b7b8:	79fb      	ldrb	r3, [r7, #7]
 800b7ba:	f023 0301 	bic.w	r3, r3, #1
 800b7be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d01a      	beq.n	800b7fe <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ca:	785b      	ldrb	r3, [r3, #1]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fe f87d 	bl	80098cc <disk_status>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b7d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7dc:	f003 0301 	and.w	r3, r3, #1
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10c      	bne.n	800b7fe <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b7e4:	79fb      	ldrb	r3, [r7, #7]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d007      	beq.n	800b7fa <find_volume+0x92>
 800b7ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7ee:	f003 0304 	and.w	r3, r3, #4
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d001      	beq.n	800b7fa <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b7f6:	230a      	movs	r3, #10
 800b7f8:	e234      	b.n	800bc64 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	e232      	b.n	800bc64 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b800:	2200      	movs	r2, #0
 800b802:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b806:	b2da      	uxtb	r2, r3
 800b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80e:	785b      	ldrb	r3, [r3, #1]
 800b810:	4618      	mov	r0, r3
 800b812:	f7fe f875 	bl	8009900 <disk_initialize>
 800b816:	4603      	mov	r3, r0
 800b818:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b81c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b820:	f003 0301 	and.w	r3, r3, #1
 800b824:	2b00      	cmp	r3, #0
 800b826:	d001      	beq.n	800b82c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b828:	2303      	movs	r3, #3
 800b82a:	e21b      	b.n	800bc64 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b82c:	79fb      	ldrb	r3, [r7, #7]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d007      	beq.n	800b842 <find_volume+0xda>
 800b832:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b836:	f003 0304 	and.w	r3, r3, #4
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d001      	beq.n	800b842 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b83e:	230a      	movs	r3, #10
 800b840:	e210      	b.n	800bc64 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b844:	7858      	ldrb	r0, [r3, #1]
 800b846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b848:	330c      	adds	r3, #12
 800b84a:	461a      	mov	r2, r3
 800b84c:	2102      	movs	r1, #2
 800b84e:	f7fe f8bd 	bl	80099cc <disk_ioctl>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d001      	beq.n	800b85c <find_volume+0xf4>
 800b858:	2301      	movs	r3, #1
 800b85a:	e203      	b.n	800bc64 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85e:	899b      	ldrh	r3, [r3, #12]
 800b860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b864:	d80d      	bhi.n	800b882 <find_volume+0x11a>
 800b866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b868:	899b      	ldrh	r3, [r3, #12]
 800b86a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b86e:	d308      	bcc.n	800b882 <find_volume+0x11a>
 800b870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b872:	899b      	ldrh	r3, [r3, #12]
 800b874:	461a      	mov	r2, r3
 800b876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b878:	899b      	ldrh	r3, [r3, #12]
 800b87a:	3b01      	subs	r3, #1
 800b87c:	4013      	ands	r3, r2
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d001      	beq.n	800b886 <find_volume+0x11e>
 800b882:	2301      	movs	r3, #1
 800b884:	e1ee      	b.n	800bc64 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b886:	2300      	movs	r3, #0
 800b888:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b88a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b88c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b88e:	f7ff ff15 	bl	800b6bc <check_fs>
 800b892:	4603      	mov	r3, r0
 800b894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b898:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d149      	bne.n	800b934 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	643b      	str	r3, [r7, #64]	; 0x40
 800b8a4:	e01e      	b.n	800b8e4 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b8ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8ae:	011b      	lsls	r3, r3, #4
 800b8b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b8b4:	4413      	add	r3, r2
 800b8b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d006      	beq.n	800b8d0 <find_volume+0x168>
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c4:	3308      	adds	r3, #8
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fe f8b6 	bl	8009a38 <ld_dword>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	e000      	b.n	800b8d2 <find_volume+0x16a>
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	3358      	adds	r3, #88	; 0x58
 800b8d8:	443b      	add	r3, r7
 800b8da:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b8de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	643b      	str	r3, [r7, #64]	; 0x40
 800b8e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	d9dd      	bls.n	800b8a6 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <find_volume+0x192>
 800b8f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b8fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	3358      	adds	r3, #88	; 0x58
 800b900:	443b      	add	r3, r7
 800b902:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b906:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d005      	beq.n	800b91a <find_volume+0x1b2>
 800b90e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b910:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b912:	f7ff fed3 	bl	800b6bc <check_fs>
 800b916:	4603      	mov	r3, r0
 800b918:	e000      	b.n	800b91c <find_volume+0x1b4>
 800b91a:	2303      	movs	r3, #3
 800b91c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b920:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b924:	2b01      	cmp	r3, #1
 800b926:	d905      	bls.n	800b934 <find_volume+0x1cc>
 800b928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b92a:	3301      	adds	r3, #1
 800b92c:	643b      	str	r3, [r7, #64]	; 0x40
 800b92e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b930:	2b03      	cmp	r3, #3
 800b932:	d9e2      	bls.n	800b8fa <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b938:	2b04      	cmp	r3, #4
 800b93a:	d101      	bne.n	800b940 <find_volume+0x1d8>
 800b93c:	2301      	movs	r3, #1
 800b93e:	e191      	b.n	800bc64 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b940:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b944:	2b01      	cmp	r3, #1
 800b946:	d901      	bls.n	800b94c <find_volume+0x1e4>
 800b948:	230d      	movs	r3, #13
 800b94a:	e18b      	b.n	800bc64 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94e:	333c      	adds	r3, #60	; 0x3c
 800b950:	330b      	adds	r3, #11
 800b952:	4618      	mov	r0, r3
 800b954:	f7fe f858 	bl	8009a08 <ld_word>
 800b958:	4603      	mov	r3, r0
 800b95a:	461a      	mov	r2, r3
 800b95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95e:	899b      	ldrh	r3, [r3, #12]
 800b960:	429a      	cmp	r2, r3
 800b962:	d001      	beq.n	800b968 <find_volume+0x200>
 800b964:	230d      	movs	r3, #13
 800b966:	e17d      	b.n	800bc64 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96a:	333c      	adds	r3, #60	; 0x3c
 800b96c:	3316      	adds	r3, #22
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe f84a 	bl	8009a08 <ld_word>
 800b974:	4603      	mov	r3, r0
 800b976:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d106      	bne.n	800b98c <find_volume+0x224>
 800b97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b980:	333c      	adds	r3, #60	; 0x3c
 800b982:	3324      	adds	r3, #36	; 0x24
 800b984:	4618      	mov	r0, r3
 800b986:	f7fe f857 	bl	8009a38 <ld_dword>
 800b98a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b990:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b994:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800b998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99e:	789b      	ldrb	r3, [r3, #2]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d005      	beq.n	800b9b0 <find_volume+0x248>
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a6:	789b      	ldrb	r3, [r3, #2]
 800b9a8:	2b02      	cmp	r3, #2
 800b9aa:	d001      	beq.n	800b9b0 <find_volume+0x248>
 800b9ac:	230d      	movs	r3, #13
 800b9ae:	e159      	b.n	800bc64 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b2:	789b      	ldrb	r3, [r3, #2]
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9b8:	fb02 f303 	mul.w	r3, r2, r3
 800b9bc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9cc:	895b      	ldrh	r3, [r3, #10]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d008      	beq.n	800b9e4 <find_volume+0x27c>
 800b9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d4:	895b      	ldrh	r3, [r3, #10]
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9da:	895b      	ldrh	r3, [r3, #10]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	4013      	ands	r3, r2
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <find_volume+0x280>
 800b9e4:	230d      	movs	r3, #13
 800b9e6:	e13d      	b.n	800bc64 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ea:	333c      	adds	r3, #60	; 0x3c
 800b9ec:	3311      	adds	r3, #17
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fe f80a 	bl	8009a08 <ld_word>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fe:	891b      	ldrh	r3, [r3, #8]
 800ba00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba02:	8992      	ldrh	r2, [r2, #12]
 800ba04:	0952      	lsrs	r2, r2, #5
 800ba06:	b292      	uxth	r2, r2
 800ba08:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba0c:	fb01 f202 	mul.w	r2, r1, r2
 800ba10:	1a9b      	subs	r3, r3, r2
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d003      	beq.n	800ba20 <find_volume+0x2b8>
 800ba18:	230d      	movs	r3, #13
 800ba1a:	e123      	b.n	800bc64 <find_volume+0x4fc>
 800ba1c:	200029ac 	.word	0x200029ac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ba20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba22:	333c      	adds	r3, #60	; 0x3c
 800ba24:	3313      	adds	r3, #19
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fd ffee 	bl	8009a08 <ld_word>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ba30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d106      	bne.n	800ba44 <find_volume+0x2dc>
 800ba36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba38:	333c      	adds	r3, #60	; 0x3c
 800ba3a:	3320      	adds	r3, #32
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fd fffb 	bl	8009a38 <ld_dword>
 800ba42:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ba44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba46:	333c      	adds	r3, #60	; 0x3c
 800ba48:	330e      	adds	r3, #14
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fd ffdc 	bl	8009a08 <ld_word>
 800ba50:	4603      	mov	r3, r0
 800ba52:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ba54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d101      	bne.n	800ba5e <find_volume+0x2f6>
 800ba5a:	230d      	movs	r3, #13
 800ba5c:	e102      	b.n	800bc64 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ba5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba62:	4413      	add	r3, r2
 800ba64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba66:	8911      	ldrh	r1, [r2, #8]
 800ba68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba6a:	8992      	ldrh	r2, [r2, #12]
 800ba6c:	0952      	lsrs	r2, r2, #5
 800ba6e:	b292      	uxth	r2, r2
 800ba70:	fbb1 f2f2 	udiv	r2, r1, r2
 800ba74:	b292      	uxth	r2, r2
 800ba76:	4413      	add	r3, r2
 800ba78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ba7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d201      	bcs.n	800ba86 <find_volume+0x31e>
 800ba82:	230d      	movs	r3, #13
 800ba84:	e0ee      	b.n	800bc64 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ba86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba8e:	8952      	ldrh	r2, [r2, #10]
 800ba90:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba94:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d101      	bne.n	800baa0 <find_volume+0x338>
 800ba9c:	230d      	movs	r3, #13
 800ba9e:	e0e1      	b.n	800bc64 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800baa0:	2303      	movs	r3, #3
 800baa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800baa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800baac:	4293      	cmp	r3, r2
 800baae:	d802      	bhi.n	800bab6 <find_volume+0x34e>
 800bab0:	2302      	movs	r3, #2
 800bab2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800babc:	4293      	cmp	r3, r2
 800babe:	d802      	bhi.n	800bac6 <find_volume+0x35e>
 800bac0:	2301      	movs	r3, #1
 800bac2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	1c9a      	adds	r2, r3, #2
 800baca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bacc:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800bace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bad2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bad4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bad8:	441a      	add	r2, r3
 800bada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800badc:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800bade:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae2:	441a      	add	r2, r3
 800bae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae6:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800bae8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800baec:	2b03      	cmp	r3, #3
 800baee:	d11e      	bne.n	800bb2e <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800baf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf2:	333c      	adds	r3, #60	; 0x3c
 800baf4:	332a      	adds	r3, #42	; 0x2a
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fd ff86 	bl	8009a08 <ld_word>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <find_volume+0x39e>
 800bb02:	230d      	movs	r3, #13
 800bb04:	e0ae      	b.n	800bc64 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb08:	891b      	ldrh	r3, [r3, #8]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <find_volume+0x3aa>
 800bb0e:	230d      	movs	r3, #13
 800bb10:	e0a8      	b.n	800bc64 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb14:	333c      	adds	r3, #60	; 0x3c
 800bb16:	332c      	adds	r3, #44	; 0x2c
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fd ff8d 	bl	8009a38 <ld_dword>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb22:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb26:	6a1b      	ldr	r3, [r3, #32]
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	647b      	str	r3, [r7, #68]	; 0x44
 800bb2c:	e01f      	b.n	800bb6e <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb30:	891b      	ldrh	r3, [r3, #8]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d101      	bne.n	800bb3a <find_volume+0x3d2>
 800bb36:	230d      	movs	r3, #13
 800bb38:	e094      	b.n	800bc64 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb40:	441a      	add	r2, r3
 800bb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb44:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bb46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d103      	bne.n	800bb56 <find_volume+0x3ee>
 800bb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb50:	6a1b      	ldr	r3, [r3, #32]
 800bb52:	005b      	lsls	r3, r3, #1
 800bb54:	e00a      	b.n	800bb6c <find_volume+0x404>
 800bb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb58:	6a1a      	ldr	r2, [r3, #32]
 800bb5a:	4613      	mov	r3, r2
 800bb5c:	005b      	lsls	r3, r3, #1
 800bb5e:	4413      	add	r3, r2
 800bb60:	085a      	lsrs	r2, r3, #1
 800bb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb64:	6a1b      	ldr	r3, [r3, #32]
 800bb66:	f003 0301 	and.w	r3, r3, #1
 800bb6a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bb6c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb74:	899b      	ldrh	r3, [r3, #12]
 800bb76:	4619      	mov	r1, r3
 800bb78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb7a:	440b      	add	r3, r1
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb80:	8989      	ldrh	r1, [r1, #12]
 800bb82:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d201      	bcs.n	800bb8e <find_volume+0x426>
 800bb8a:	230d      	movs	r3, #13
 800bb8c:	e06a      	b.n	800bc64 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb90:	f04f 32ff 	mov.w	r2, #4294967295
 800bb94:	61da      	str	r2, [r3, #28]
 800bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb98:	69da      	ldr	r2, [r3, #28]
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba0:	2280      	movs	r2, #128	; 0x80
 800bba2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bba4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bba8:	2b03      	cmp	r3, #3
 800bbaa:	d149      	bne.n	800bc40 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	333c      	adds	r3, #60	; 0x3c
 800bbb0:	3330      	adds	r3, #48	; 0x30
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fd ff28 	bl	8009a08 <ld_word>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d140      	bne.n	800bc40 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bbbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbc6:	f7fe fa01 	bl	8009fcc <move_window>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d137      	bne.n	800bc40 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800bbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd8:	333c      	adds	r3, #60	; 0x3c
 800bbda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fd ff12 	bl	8009a08 <ld_word>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d127      	bne.n	800bc40 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf2:	333c      	adds	r3, #60	; 0x3c
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fd ff1f 	bl	8009a38 <ld_dword>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	4a1b      	ldr	r2, [pc, #108]	; (800bc6c <find_volume+0x504>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d11e      	bne.n	800bc40 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	333c      	adds	r3, #60	; 0x3c
 800bc06:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fd ff14 	bl	8009a38 <ld_dword>
 800bc10:	4603      	mov	r3, r0
 800bc12:	4a17      	ldr	r2, [pc, #92]	; (800bc70 <find_volume+0x508>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d113      	bne.n	800bc40 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1a:	333c      	adds	r3, #60	; 0x3c
 800bc1c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7fd ff09 	bl	8009a38 <ld_dword>
 800bc26:	4602      	mov	r2, r0
 800bc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2a:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2e:	333c      	adds	r3, #60	; 0x3c
 800bc30:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fd feff 	bl	8009a38 <ld_dword>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3e:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc42:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bc46:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bc48:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <find_volume+0x50c>)
 800bc4a:	881b      	ldrh	r3, [r3, #0]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	4b08      	ldr	r3, [pc, #32]	; (800bc74 <find_volume+0x50c>)
 800bc52:	801a      	strh	r2, [r3, #0]
 800bc54:	4b07      	ldr	r3, [pc, #28]	; (800bc74 <find_volume+0x50c>)
 800bc56:	881a      	ldrh	r2, [r3, #0]
 800bc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bc5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc5e:	f7fe f94d 	bl	8009efc <clear_lock>
#endif
	return FR_OK;
 800bc62:	2300      	movs	r3, #0
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3758      	adds	r7, #88	; 0x58
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	41615252 	.word	0x41615252
 800bc70:	61417272 	.word	0x61417272
 800bc74:	200029b0 	.word	0x200029b0

0800bc78 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bc82:	2309      	movs	r3, #9
 800bc84:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d02e      	beq.n	800bcea <validate+0x72>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d02a      	beq.n	800bcea <validate+0x72>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d025      	beq.n	800bcea <validate+0x72>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	889a      	ldrh	r2, [r3, #4]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	88db      	ldrh	r3, [r3, #6]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d11e      	bne.n	800bcea <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7fd ffa9 	bl	8009c08 <lock_fs>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d014      	beq.n	800bce6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	785b      	ldrb	r3, [r3, #1]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fd fe02 	bl	80098cc <disk_status>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	f003 0301 	and.w	r3, r3, #1
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d102      	bne.n	800bcd8 <validate+0x60>
				res = FR_OK;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	73fb      	strb	r3, [r7, #15]
 800bcd6:	e008      	b.n	800bcea <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2100      	movs	r1, #0
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fd ffa8 	bl	8009c34 <unlock_fs>
 800bce4:	e001      	b.n	800bcea <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800bce6:	230f      	movs	r3, #15
 800bce8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bcea:	7bfb      	ldrb	r3, [r7, #15]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d102      	bne.n	800bcf6 <validate+0x7e>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	e000      	b.n	800bcf8 <validate+0x80>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	683a      	ldr	r2, [r7, #0]
 800bcfa:	6013      	str	r3, [r2, #0]
	return res;
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
	...

0800bd08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b088      	sub	sp, #32
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	4613      	mov	r3, r2
 800bd14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bd1a:	f107 0310 	add.w	r3, r7, #16
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7ff fc88 	bl	800b634 <get_ldnumber>
 800bd24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	da01      	bge.n	800bd30 <f_mount+0x28>
 800bd2c:	230b      	movs	r3, #11
 800bd2e:	e048      	b.n	800bdc2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bd30:	4a26      	ldr	r2, [pc, #152]	; (800bdcc <f_mount+0xc4>)
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00f      	beq.n	800bd60 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bd40:	69b8      	ldr	r0, [r7, #24]
 800bd42:	f7fe f8db 	bl	8009efc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 ff63 	bl	800cc16 <ff_del_syncobj>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <f_mount+0x52>
 800bd56:	2302      	movs	r3, #2
 800bd58:	e033      	b.n	800bdc2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00f      	beq.n	800bd86 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	b2da      	uxtb	r2, r3
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	3314      	adds	r3, #20
 800bd74:	4619      	mov	r1, r3
 800bd76:	4610      	mov	r0, r2
 800bd78:	f000 ff32 	bl	800cbe0 <ff_cre_syncobj>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <f_mount+0x7e>
 800bd82:	2302      	movs	r3, #2
 800bd84:	e01d      	b.n	800bdc2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	4910      	ldr	r1, [pc, #64]	; (800bdcc <f_mount+0xc4>)
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d002      	beq.n	800bd9c <f_mount+0x94>
 800bd96:	79fb      	ldrb	r3, [r7, #7]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d001      	beq.n	800bda0 <f_mount+0x98>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	e010      	b.n	800bdc2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bda0:	f107 010c 	add.w	r1, r7, #12
 800bda4:	f107 0308 	add.w	r3, r7, #8
 800bda8:	2200      	movs	r2, #0
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7ff fcdc 	bl	800b768 <find_volume>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	7dfa      	ldrb	r2, [r7, #23]
 800bdb8:	4611      	mov	r1, r2
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fd ff3a 	bl	8009c34 <unlock_fs>
 800bdc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3720      	adds	r7, #32
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	200029ac 	.word	0x200029ac

0800bdd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bddc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bde0:	6018      	str	r0, [r3, #0]
 800bde2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bde6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800bdea:	6019      	str	r1, [r3, #0]
 800bdec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bdf0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800bdf4:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bdf6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bdfa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d101      	bne.n	800be08 <f_open+0x38>
 800be04:	2309      	movs	r3, #9
 800be06:	e2ae      	b.n	800c366 <f_open+0x596>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800be08:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800be0c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800be10:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800be14:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800be18:	7812      	ldrb	r2, [r2, #0]
 800be1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800be1e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800be20:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800be24:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800be28:	781a      	ldrb	r2, [r3, #0]
 800be2a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800be2e:	f107 0308 	add.w	r3, r7, #8
 800be32:	4618      	mov	r0, r3
 800be34:	f7ff fc98 	bl	800b768 <find_volume>
 800be38:	4603      	mov	r3, r0
 800be3a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800be3e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800be42:	2b00      	cmp	r3, #0
 800be44:	f040 827a 	bne.w	800c33c <f_open+0x56c>
		dj.obj.fs = fs;
 800be48:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800be4c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800be50:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800be54:	f107 0214 	add.w	r2, r7, #20
 800be58:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800be5a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800be5e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800be68:	4611      	mov	r1, r2
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7ff fb6c 	bl	800b548 <follow_path>
 800be70:	4603      	mov	r3, r0
 800be72:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800be76:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d11e      	bne.n	800bebc <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800be7e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800be82:	b25b      	sxtb	r3, r3
 800be84:	2b00      	cmp	r3, #0
 800be86:	da03      	bge.n	800be90 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800be88:	2306      	movs	r3, #6
 800be8a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800be8e:	e015      	b.n	800bebc <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800be90:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800be94:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	f023 0301 	bic.w	r3, r3, #1
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	bf14      	ite	ne
 800bea2:	2301      	movne	r3, #1
 800bea4:	2300      	moveq	r3, #0
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	461a      	mov	r2, r3
 800beaa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800beae:	4611      	mov	r1, r2
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fd fedb 	bl	8009c6c <chk_lock>
 800beb6:	4603      	mov	r3, r0
 800beb8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bebc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bec0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	f003 031c 	and.w	r3, r3, #28
 800beca:	2b00      	cmp	r3, #0
 800becc:	f000 80a7 	beq.w	800c01e <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 800bed0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d01f      	beq.n	800bf18 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bed8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bedc:	2b04      	cmp	r3, #4
 800bede:	d10e      	bne.n	800befe <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bee0:	f7fd ff20 	bl	8009d24 <enq_lock>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d006      	beq.n	800bef8 <f_open+0x128>
 800beea:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800beee:	4618      	mov	r0, r3
 800bef0:	f7ff f87a 	bl	800afe8 <dir_register>
 800bef4:	4603      	mov	r3, r0
 800bef6:	e000      	b.n	800befa <f_open+0x12a>
 800bef8:	2312      	movs	r3, #18
 800befa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800befe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bf02:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800bf06:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800bf0a:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800bf0e:	7812      	ldrb	r2, [r2, #0]
 800bf10:	f042 0208 	orr.w	r2, r2, #8
 800bf14:	701a      	strb	r2, [r3, #0]
 800bf16:	e015      	b.n	800bf44 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bf18:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800bf1c:	f003 0311 	and.w	r3, r3, #17
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d003      	beq.n	800bf2c <f_open+0x15c>
					res = FR_DENIED;
 800bf24:	2307      	movs	r3, #7
 800bf26:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800bf2a:	e00b      	b.n	800bf44 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bf2c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bf30:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	f003 0304 	and.w	r3, r3, #4
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d002      	beq.n	800bf44 <f_open+0x174>
 800bf3e:	2308      	movs	r3, #8
 800bf40:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bf44:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f040 8088 	bne.w	800c05e <f_open+0x28e>
 800bf4e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bf52:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	f003 0308 	and.w	r3, r3, #8
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d07e      	beq.n	800c05e <f_open+0x28e>
				dw = GET_FATTIME();
 800bf60:	f7fd fc52 	bl	8009808 <get_fattime>
 800bf64:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bf68:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bf6c:	330e      	adds	r3, #14
 800bf6e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fd fd9e 	bl	8009ab4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bf78:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bf7c:	3316      	adds	r3, #22
 800bf7e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fd fd96 	bl	8009ab4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bf88:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bf8c:	330b      	adds	r3, #11
 800bf8e:	2220      	movs	r2, #32
 800bf90:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bf92:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bf96:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7fe fd9b 	bl	800aad8 <ld_clust>
 800bfa2:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bfa6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bfaa:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800bfae:	2200      	movs	r2, #0
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7fe fdb0 	bl	800ab16 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bfb6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bfba:	331c      	adds	r3, #28
 800bfbc:	2100      	movs	r1, #0
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fd fd78 	bl	8009ab4 <st_dword>
					fs->wflag = 1;
 800bfc4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bfc8:	2201      	movs	r2, #1
 800bfca:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bfcc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d044      	beq.n	800c05e <f_open+0x28e>
						dw = fs->winsect;
 800bfd4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bfd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfda:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800bfde:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fe fa9a 	bl	800a522 <remove_chain>
 800bfee:	4603      	mov	r3, r0
 800bff0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800bff4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d130      	bne.n	800c05e <f_open+0x28e>
							res = move_window(fs, dw);
 800bffc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c000:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800c004:	4618      	mov	r0, r3
 800c006:	f7fd ffe1 	bl	8009fcc <move_window>
 800c00a:	4603      	mov	r3, r0
 800c00c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c010:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c014:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800c018:	3a01      	subs	r2, #1
 800c01a:	619a      	str	r2, [r3, #24]
 800c01c:	e01f      	b.n	800c05e <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c01e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c022:	2b00      	cmp	r3, #0
 800c024:	d11b      	bne.n	800c05e <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c026:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800c02a:	f003 0310 	and.w	r3, r3, #16
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d003      	beq.n	800c03a <f_open+0x26a>
					res = FR_NO_FILE;
 800c032:	2304      	movs	r3, #4
 800c034:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800c038:	e011      	b.n	800c05e <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c03a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c03e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	f003 0302 	and.w	r3, r3, #2
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d008      	beq.n	800c05e <f_open+0x28e>
 800c04c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800c050:	f003 0301 	and.w	r3, r3, #1
 800c054:	2b00      	cmp	r3, #0
 800c056:	d002      	beq.n	800c05e <f_open+0x28e>
						res = FR_DENIED;
 800c058:	2307      	movs	r3, #7
 800c05a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800c05e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c062:	2b00      	cmp	r3, #0
 800c064:	d14a      	bne.n	800c0fc <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c066:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c06a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	f003 0308 	and.w	r3, r3, #8
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00b      	beq.n	800c090 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 800c078:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c07c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800c080:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800c084:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800c088:	7812      	ldrb	r2, [r2, #0]
 800c08a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c08e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c090:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c096:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c09a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c0a2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800c0a6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c0aa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c0b2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c0b6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	f023 0301 	bic.w	r3, r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	bf14      	ite	ne
 800c0c4:	2301      	movne	r3, #1
 800c0c6:	2300      	moveq	r3, #0
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c0d0:	4611      	mov	r1, r2
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fd fe48 	bl	8009d68 <inc_lock>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c0de:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c0e6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c0ea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	691b      	ldr	r3, [r3, #16]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d102      	bne.n	800c0fc <f_open+0x32c>
 800c0f6:	2302      	movs	r3, #2
 800c0f8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c0fc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c100:	2b00      	cmp	r3, #0
 800c102:	f040 811b 	bne.w	800c33c <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c106:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c10a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800c10e:	4611      	mov	r1, r2
 800c110:	4618      	mov	r0, r3
 800c112:	f7fe fce1 	bl	800aad8 <ld_clust>
 800c116:	4602      	mov	r2, r0
 800c118:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c11c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c124:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800c128:	331c      	adds	r3, #28
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fd fc84 	bl	8009a38 <ld_dword>
 800c130:	4602      	mov	r2, r0
 800c132:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c136:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c13e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c142:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2200      	movs	r2, #0
 800c14a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c14c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800c150:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c154:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c15c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c160:	88da      	ldrh	r2, [r3, #6]
 800c162:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c166:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c16e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c172:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800c17c:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800c180:	7812      	ldrb	r2, [r2, #0]
 800c182:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c184:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c188:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2200      	movs	r2, #0
 800c190:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c192:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c196:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	2200      	movs	r2, #0
 800c19e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c1a0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c1a4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c1ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c1b2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	3330      	adds	r3, #48	; 0x30
 800c1ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c1be:	2100      	movs	r1, #0
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7fd fcc4 	bl	8009b4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c1c6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c1ca:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	f003 0320 	and.w	r3, r3, #32
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 80b1 	beq.w	800c33c <f_open+0x56c>
 800c1da:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c1de:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f000 80a8 	beq.w	800c33c <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c1ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c1f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	68da      	ldr	r2, [r3, #12]
 800c1f8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c1fc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c204:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c208:	895b      	ldrh	r3, [r3, #10]
 800c20a:	461a      	mov	r2, r3
 800c20c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c210:	899b      	ldrh	r3, [r3, #12]
 800c212:	fb02 f303 	mul.w	r3, r2, r3
 800c216:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c21a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c21e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c22a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c22e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800c23a:	e021      	b.n	800c280 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 800c23c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c240:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7fd ff7b 	bl	800a146 <get_fat>
 800c250:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800c254:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d802      	bhi.n	800c262 <f_open+0x492>
 800c25c:	2302      	movs	r3, #2
 800c25e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c262:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800c266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c26a:	d102      	bne.n	800c272 <f_open+0x4a2>
 800c26c:	2301      	movs	r3, #1
 800c26e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c272:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800c276:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c27a:	1ad3      	subs	r3, r2, r3
 800c27c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800c280:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c284:	2b00      	cmp	r3, #0
 800c286:	d105      	bne.n	800c294 <f_open+0x4c4>
 800c288:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800c28c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c290:	429a      	cmp	r2, r3
 800c292:	d8d3      	bhi.n	800c23c <f_open+0x46c>
				}
				fp->clust = clst;
 800c294:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c298:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800c2a2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c2a4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d147      	bne.n	800c33c <f_open+0x56c>
 800c2ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c2b0:	899b      	ldrh	r3, [r3, #12]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800c2b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2bc:	fb01 f202 	mul.w	r2, r1, r2
 800c2c0:	1a9b      	subs	r3, r3, r2
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d03a      	beq.n	800c33c <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c2c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c2ca:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fd ff1a 	bl	800a108 <clust2sect>
 800c2d4:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800c2d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d103      	bne.n	800c2e8 <f_open+0x518>
						res = FR_INT_ERR;
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800c2e6:	e029      	b.n	800c33c <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c2e8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c2ec:	899b      	ldrh	r3, [r3, #12]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800c2f4:	fbb3 f2f2 	udiv	r2, r3, r2
 800c2f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c2fc:	441a      	add	r2, r3
 800c2fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c302:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c30a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c30e:	7858      	ldrb	r0, [r3, #1]
 800c310:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c314:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c31e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c322:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	6a1a      	ldr	r2, [r3, #32]
 800c32a:	2301      	movs	r3, #1
 800c32c:	f7fd fb0e 	bl	800994c <disk_read>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d002      	beq.n	800c33c <f_open+0x56c>
 800c336:	2301      	movs	r3, #1
 800c338:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c33c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c340:	2b00      	cmp	r3, #0
 800c342:	d006      	beq.n	800c352 <f_open+0x582>
 800c344:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c348:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2200      	movs	r2, #0
 800c350:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c352:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c356:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800c35a:	4611      	mov	r1, r2
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fd fc69 	bl	8009c34 <unlock_fs>
 800c362:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800c366:	4618      	mov	r0, r3
 800c368:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b08c      	sub	sp, #48	; 0x30
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
 800c37c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	2200      	movs	r2, #0
 800c386:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f107 0210 	add.w	r2, r7, #16
 800c38e:	4611      	mov	r1, r2
 800c390:	4618      	mov	r0, r3
 800c392:	f7ff fc71 	bl	800bc78 <validate>
 800c396:	4603      	mov	r3, r0
 800c398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c39c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d107      	bne.n	800c3b4 <f_write+0x44>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	7d5b      	ldrb	r3, [r3, #21]
 800c3a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c3ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d009      	beq.n	800c3c8 <f_write+0x58>
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c3ba:	4611      	mov	r1, r2
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7fd fc39 	bl	8009c34 <unlock_fs>
 800c3c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3c6:	e192      	b.n	800c6ee <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	7d1b      	ldrb	r3, [r3, #20]
 800c3cc:	f003 0302 	and.w	r3, r3, #2
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d106      	bne.n	800c3e2 <f_write+0x72>
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	2107      	movs	r1, #7
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fd fc2b 	bl	8009c34 <unlock_fs>
 800c3de:	2307      	movs	r3, #7
 800c3e0:	e185      	b.n	800c6ee <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	699a      	ldr	r2, [r3, #24]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	441a      	add	r2, r3
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	699b      	ldr	r3, [r3, #24]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	f080 816a 	bcs.w	800c6c8 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	699b      	ldr	r3, [r3, #24]
 800c3f8:	43db      	mvns	r3, r3
 800c3fa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c3fc:	e164      	b.n	800c6c8 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	699b      	ldr	r3, [r3, #24]
 800c402:	693a      	ldr	r2, [r7, #16]
 800c404:	8992      	ldrh	r2, [r2, #12]
 800c406:	fbb3 f1f2 	udiv	r1, r3, r2
 800c40a:	fb01 f202 	mul.w	r2, r1, r2
 800c40e:	1a9b      	subs	r3, r3, r2
 800c410:	2b00      	cmp	r3, #0
 800c412:	f040 810f 	bne.w	800c634 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	699b      	ldr	r3, [r3, #24]
 800c41a:	693a      	ldr	r2, [r7, #16]
 800c41c:	8992      	ldrh	r2, [r2, #12]
 800c41e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c422:	693a      	ldr	r2, [r7, #16]
 800c424:	8952      	ldrh	r2, [r2, #10]
 800c426:	3a01      	subs	r2, #1
 800c428:	4013      	ands	r3, r2
 800c42a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d14d      	bne.n	800c4ce <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	699b      	ldr	r3, [r3, #24]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10c      	bne.n	800c454 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c442:	2b00      	cmp	r3, #0
 800c444:	d11a      	bne.n	800c47c <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2100      	movs	r1, #0
 800c44a:	4618      	mov	r0, r3
 800c44c:	f7fe f8ce 	bl	800a5ec <create_chain>
 800c450:	62b8      	str	r0, [r7, #40]	; 0x28
 800c452:	e013      	b.n	800c47c <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d007      	beq.n	800c46c <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	4619      	mov	r1, r3
 800c462:	68f8      	ldr	r0, [r7, #12]
 800c464:	f7fe f95a 	bl	800a71c <clmt_clust>
 800c468:	62b8      	str	r0, [r7, #40]	; 0x28
 800c46a:	e007      	b.n	800c47c <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	69db      	ldr	r3, [r3, #28]
 800c472:	4619      	mov	r1, r3
 800c474:	4610      	mov	r0, r2
 800c476:	f7fe f8b9 	bl	800a5ec <create_chain>
 800c47a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47e:	2b00      	cmp	r3, #0
 800c480:	f000 8127 	beq.w	800c6d2 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c486:	2b01      	cmp	r3, #1
 800c488:	d109      	bne.n	800c49e <f_write+0x12e>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2202      	movs	r2, #2
 800c48e:	755a      	strb	r2, [r3, #21]
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	2102      	movs	r1, #2
 800c494:	4618      	mov	r0, r3
 800c496:	f7fd fbcd 	bl	8009c34 <unlock_fs>
 800c49a:	2302      	movs	r3, #2
 800c49c:	e127      	b.n	800c6ee <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a4:	d109      	bne.n	800c4ba <f_write+0x14a>
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	755a      	strb	r2, [r3, #21]
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	2101      	movs	r1, #1
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fd fbbf 	bl	8009c34 <unlock_fs>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e119      	b.n	800c6ee <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4be:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d102      	bne.n	800c4ce <f_write+0x15e>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4cc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	7d1b      	ldrb	r3, [r3, #20]
 800c4d2:	b25b      	sxtb	r3, r3
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	da1d      	bge.n	800c514 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	7858      	ldrb	r0, [r3, #1]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6a1a      	ldr	r2, [r3, #32]
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	f7fd fa50 	bl	800998c <disk_write>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d009      	beq.n	800c506 <f_write+0x196>
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	755a      	strb	r2, [r3, #21]
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7fd fb99 	bl	8009c34 <unlock_fs>
 800c502:	2301      	movs	r3, #1
 800c504:	e0f3      	b.n	800c6ee <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	7d1b      	ldrb	r3, [r3, #20]
 800c50a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c50e:	b2da      	uxtb	r2, r3
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c514:	693a      	ldr	r2, [r7, #16]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	69db      	ldr	r3, [r3, #28]
 800c51a:	4619      	mov	r1, r3
 800c51c:	4610      	mov	r0, r2
 800c51e:	f7fd fdf3 	bl	800a108 <clust2sect>
 800c522:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d109      	bne.n	800c53e <f_write+0x1ce>
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2202      	movs	r2, #2
 800c52e:	755a      	strb	r2, [r3, #21]
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	2102      	movs	r1, #2
 800c534:	4618      	mov	r0, r3
 800c536:	f7fd fb7d 	bl	8009c34 <unlock_fs>
 800c53a:	2302      	movs	r3, #2
 800c53c:	e0d7      	b.n	800c6ee <f_write+0x37e>
			sect += csect;
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	4413      	add	r3, r2
 800c544:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	899b      	ldrh	r3, [r3, #12]
 800c54a:	461a      	mov	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c552:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c554:	6a3b      	ldr	r3, [r7, #32]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d048      	beq.n	800c5ec <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c55a:	69ba      	ldr	r2, [r7, #24]
 800c55c:	6a3b      	ldr	r3, [r7, #32]
 800c55e:	4413      	add	r3, r2
 800c560:	693a      	ldr	r2, [r7, #16]
 800c562:	8952      	ldrh	r2, [r2, #10]
 800c564:	4293      	cmp	r3, r2
 800c566:	d905      	bls.n	800c574 <f_write+0x204>
					cc = fs->csize - csect;
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	895b      	ldrh	r3, [r3, #10]
 800c56c:	461a      	mov	r2, r3
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	7858      	ldrb	r0, [r3, #1]
 800c578:	6a3b      	ldr	r3, [r7, #32]
 800c57a:	697a      	ldr	r2, [r7, #20]
 800c57c:	69f9      	ldr	r1, [r7, #28]
 800c57e:	f7fd fa05 	bl	800998c <disk_write>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d009      	beq.n	800c59c <f_write+0x22c>
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2201      	movs	r2, #1
 800c58c:	755a      	strb	r2, [r3, #21]
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	2101      	movs	r1, #1
 800c592:	4618      	mov	r0, r3
 800c594:	f7fd fb4e 	bl	8009c34 <unlock_fs>
 800c598:	2301      	movs	r3, #1
 800c59a:	e0a8      	b.n	800c6ee <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6a1a      	ldr	r2, [r3, #32]
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	6a3a      	ldr	r2, [r7, #32]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d918      	bls.n	800c5dc <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	6a1a      	ldr	r2, [r3, #32]
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	693a      	ldr	r2, [r7, #16]
 800c5ba:	8992      	ldrh	r2, [r2, #12]
 800c5bc:	fb02 f303 	mul.w	r3, r2, r3
 800c5c0:	69fa      	ldr	r2, [r7, #28]
 800c5c2:	18d1      	adds	r1, r2, r3
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	899b      	ldrh	r3, [r3, #12]
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	f7fd fa9f 	bl	8009b0c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	7d1b      	ldrb	r3, [r3, #20]
 800c5d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5d6:	b2da      	uxtb	r2, r3
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	899b      	ldrh	r3, [r3, #12]
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	fb02 f303 	mul.w	r3, r2, r3
 800c5e8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c5ea:	e050      	b.n	800c68e <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6a1b      	ldr	r3, [r3, #32]
 800c5f0:	697a      	ldr	r2, [r7, #20]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d01b      	beq.n	800c62e <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	699a      	ldr	r2, [r3, #24]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d215      	bcs.n	800c62e <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	7858      	ldrb	r0, [r3, #1]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c60c:	2301      	movs	r3, #1
 800c60e:	697a      	ldr	r2, [r7, #20]
 800c610:	f7fd f99c 	bl	800994c <disk_read>
 800c614:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c616:	2b00      	cmp	r3, #0
 800c618:	d009      	beq.n	800c62e <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2201      	movs	r2, #1
 800c61e:	755a      	strb	r2, [r3, #21]
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	2101      	movs	r1, #1
 800c624:	4618      	mov	r0, r3
 800c626:	f7fd fb05 	bl	8009c34 <unlock_fs>
 800c62a:	2301      	movs	r3, #1
 800c62c:	e05f      	b.n	800c6ee <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	697a      	ldr	r2, [r7, #20]
 800c632:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	899b      	ldrh	r3, [r3, #12]
 800c638:	4618      	mov	r0, r3
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	699b      	ldr	r3, [r3, #24]
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	8992      	ldrh	r2, [r2, #12]
 800c642:	fbb3 f1f2 	udiv	r1, r3, r2
 800c646:	fb01 f202 	mul.w	r2, r1, r2
 800c64a:	1a9b      	subs	r3, r3, r2
 800c64c:	1ac3      	subs	r3, r0, r3
 800c64e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	429a      	cmp	r2, r3
 800c656:	d901      	bls.n	800c65c <f_write+0x2ec>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	699b      	ldr	r3, [r3, #24]
 800c666:	693a      	ldr	r2, [r7, #16]
 800c668:	8992      	ldrh	r2, [r2, #12]
 800c66a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c66e:	fb00 f202 	mul.w	r2, r0, r2
 800c672:	1a9b      	subs	r3, r3, r2
 800c674:	440b      	add	r3, r1
 800c676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c678:	69f9      	ldr	r1, [r7, #28]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7fd fa46 	bl	8009b0c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	7d1b      	ldrb	r3, [r3, #20]
 800c684:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c68e:	69fa      	ldr	r2, [r7, #28]
 800c690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c692:	4413      	add	r3, r2
 800c694:	61fb      	str	r3, [r7, #28]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	699a      	ldr	r2, [r3, #24]
 800c69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69c:	441a      	add	r2, r3
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	619a      	str	r2, [r3, #24]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	68da      	ldr	r2, [r3, #12]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	bf38      	it	cc
 800c6ae:	461a      	movcc	r2, r3
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	60da      	str	r2, [r3, #12]
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ba:	441a      	add	r2, r3
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	601a      	str	r2, [r3, #0]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c4:	1ad3      	subs	r3, r2, r3
 800c6c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f47f ae97 	bne.w	800c3fe <f_write+0x8e>
 800c6d0:	e000      	b.n	800c6d4 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c6d2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	7d1b      	ldrb	r3, [r3, #20]
 800c6d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6dc:	b2da      	uxtb	r2, r3
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7fd faa4 	bl	8009c34 <unlock_fs>
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3730      	adds	r7, #48	; 0x30
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b086      	sub	sp, #24
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f107 0208 	add.w	r2, r7, #8
 800c704:	4611      	mov	r1, r2
 800c706:	4618      	mov	r0, r3
 800c708:	f7ff fab6 	bl	800bc78 <validate>
 800c70c:	4603      	mov	r3, r0
 800c70e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c710:	7dfb      	ldrb	r3, [r7, #23]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d16d      	bne.n	800c7f2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	7d1b      	ldrb	r3, [r3, #20]
 800c71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d067      	beq.n	800c7f2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	7d1b      	ldrb	r3, [r3, #20]
 800c726:	b25b      	sxtb	r3, r3
 800c728:	2b00      	cmp	r3, #0
 800c72a:	da1a      	bge.n	800c762 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	7858      	ldrb	r0, [r3, #1]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6a1a      	ldr	r2, [r3, #32]
 800c73a:	2301      	movs	r3, #1
 800c73c:	f7fd f926 	bl	800998c <disk_write>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d006      	beq.n	800c754 <f_sync+0x5e>
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	2101      	movs	r1, #1
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fd fa72 	bl	8009c34 <unlock_fs>
 800c750:	2301      	movs	r3, #1
 800c752:	e055      	b.n	800c800 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	7d1b      	ldrb	r3, [r3, #20]
 800c758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c75c:	b2da      	uxtb	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c762:	f7fd f851 	bl	8009808 <get_fattime>
 800c766:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c768:	68ba      	ldr	r2, [r7, #8]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c76e:	4619      	mov	r1, r3
 800c770:	4610      	mov	r0, r2
 800c772:	f7fd fc2b 	bl	8009fcc <move_window>
 800c776:	4603      	mov	r3, r0
 800c778:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c77a:	7dfb      	ldrb	r3, [r7, #23]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d138      	bne.n	800c7f2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c784:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	330b      	adds	r3, #11
 800c78a:	781a      	ldrb	r2, [r3, #0]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	330b      	adds	r3, #11
 800c790:	f042 0220 	orr.w	r2, r2, #32
 800c794:	b2d2      	uxtb	r2, r2
 800c796:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6818      	ldr	r0, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	68f9      	ldr	r1, [r7, #12]
 800c7a4:	f7fe f9b7 	bl	800ab16 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f103 021c 	add.w	r2, r3, #28
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	68db      	ldr	r3, [r3, #12]
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	4610      	mov	r0, r2
 800c7b6:	f7fd f97d 	bl	8009ab4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	3316      	adds	r3, #22
 800c7be:	6939      	ldr	r1, [r7, #16]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7fd f977 	bl	8009ab4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	3312      	adds	r3, #18
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7fd f956 	bl	8009a7e <st_word>
					fs->wflag = 1;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7fd fc24 	bl	800a028 <sync_fs>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	7d1b      	ldrb	r3, [r3, #20]
 800c7e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7ec:	b2da      	uxtb	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	7dfa      	ldrb	r2, [r7, #23]
 800c7f6:	4611      	mov	r1, r2
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7fd fa1b 	bl	8009c34 <unlock_fs>
 800c7fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c800:	4618      	mov	r0, r3
 800c802:	3718      	adds	r7, #24
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f7ff ff70 	bl	800c6f6 <f_sync>
 800c816:	4603      	mov	r3, r0
 800c818:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d11d      	bne.n	800c85c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f107 0208 	add.w	r2, r7, #8
 800c826:	4611      	mov	r1, r2
 800c828:	4618      	mov	r0, r3
 800c82a:	f7ff fa25 	bl	800bc78 <validate>
 800c82e:	4603      	mov	r3, r0
 800c830:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c832:	7bfb      	ldrb	r3, [r7, #15]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d111      	bne.n	800c85c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7fd fb21 	bl	8009e84 <dec_lock>
 800c842:	4603      	mov	r3, r0
 800c844:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c846:	7bfb      	ldrb	r3, [r7, #15]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d102      	bne.n	800c852 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	2100      	movs	r1, #0
 800c856:	4618      	mov	r0, r3
 800c858:	f7fd f9ec 	bl	8009c34 <unlock_fs>
#endif
		}
	}
	return res;
 800c85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b084      	sub	sp, #16
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
 800c86e:	460b      	mov	r3, r1
 800c870:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c872:	78fb      	ldrb	r3, [r7, #3]
 800c874:	2b0a      	cmp	r3, #10
 800c876:	d103      	bne.n	800c880 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c878:	210d      	movs	r1, #13
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7ff fff3 	bl	800c866 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	db25      	blt.n	800c8d8 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	1c5a      	adds	r2, r3, #1
 800c890:	60fa      	str	r2, [r7, #12]
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	4413      	add	r3, r2
 800c896:	78fa      	ldrb	r2, [r7, #3]
 800c898:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2b3c      	cmp	r3, #60	; 0x3c
 800c89e:	dd12      	ble.n	800c8c6 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6818      	ldr	r0, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f103 010c 	add.w	r1, r3, #12
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	f107 0308 	add.w	r3, r7, #8
 800c8b0:	f7ff fd5e 	bl	800c370 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d101      	bne.n	800c8c0 <putc_bfd+0x5a>
 800c8bc:	2300      	movs	r3, #0
 800c8be:	e001      	b.n	800c8c4 <putc_bfd+0x5e>
 800c8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c4:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	1c5a      	adds	r2, r3, #1
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	609a      	str	r2, [r3, #8]
 800c8d6:	e000      	b.n	800c8da <putc_bfd+0x74>
	if (i < 0) return;
 800c8d8:	bf00      	nop
}
 800c8da:	3710      	adds	r7, #16
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	db16      	blt.n	800c91e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6818      	ldr	r0, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f103 010c 	add.w	r1, r3, #12
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	461a      	mov	r2, r3
 800c900:	f107 030c 	add.w	r3, r7, #12
 800c904:	f7ff fd34 	bl	800c370 <f_write>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d107      	bne.n	800c91e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	68fa      	ldr	r2, [r7, #12]
 800c914:	4293      	cmp	r3, r2
 800c916:	d102      	bne.n	800c91e <putc_flush+0x3e>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	e001      	b.n	800c922 <putc_flush+0x42>
	return EOF;
 800c91e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c922:	4618      	mov	r0, r3
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c92a:	b480      	push	{r7}
 800c92c:	b083      	sub	sp, #12
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2200      	movs	r2, #0
 800c93e:	605a      	str	r2, [r3, #4]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	685a      	ldr	r2, [r3, #4]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	609a      	str	r2, [r3, #8]
}
 800c948:	bf00      	nop
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b096      	sub	sp, #88	; 0x58
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c95e:	f107 030c 	add.w	r3, r7, #12
 800c962:	6839      	ldr	r1, [r7, #0]
 800c964:	4618      	mov	r0, r3
 800c966:	f7ff ffe0 	bl	800c92a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c96a:	e009      	b.n	800c980 <f_puts+0x2c>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	1c5a      	adds	r2, r3, #1
 800c970:	607a      	str	r2, [r7, #4]
 800c972:	781a      	ldrb	r2, [r3, #0]
 800c974:	f107 030c 	add.w	r3, r7, #12
 800c978:	4611      	mov	r1, r2
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7ff ff73 	bl	800c866 <putc_bfd>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1f1      	bne.n	800c96c <f_puts+0x18>
	return putc_flush(&pb);
 800c988:	f107 030c 	add.w	r3, r7, #12
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7ff ffa7 	bl	800c8e0 <putc_flush>
 800c992:	4603      	mov	r3, r0
}
 800c994:	4618      	mov	r0, r3
 800c996:	3758      	adds	r7, #88	; 0x58
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b087      	sub	sp, #28
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c9b2:	4b1f      	ldr	r3, [pc, #124]	; (800ca30 <FATFS_LinkDriverEx+0x94>)
 800c9b4:	7a5b      	ldrb	r3, [r3, #9]
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d131      	bne.n	800ca20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c9bc:	4b1c      	ldr	r3, [pc, #112]	; (800ca30 <FATFS_LinkDriverEx+0x94>)
 800c9be:	7a5b      	ldrb	r3, [r3, #9]
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	4b1a      	ldr	r3, [pc, #104]	; (800ca30 <FATFS_LinkDriverEx+0x94>)
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c9ca:	4b19      	ldr	r3, [pc, #100]	; (800ca30 <FATFS_LinkDriverEx+0x94>)
 800c9cc:	7a5b      	ldrb	r3, [r3, #9]
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	4a17      	ldr	r2, [pc, #92]	; (800ca30 <FATFS_LinkDriverEx+0x94>)
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	4413      	add	r3, r2
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c9da:	4b15      	ldr	r3, [pc, #84]	; (800ca30 <FATFS_LinkDriverEx+0x94>)
 800c9dc:	7a5b      	ldrb	r3, [r3, #9]
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	4b13      	ldr	r3, [pc, #76]	; (800ca30 <FATFS_LinkDriverEx+0x94>)
 800c9e4:	4413      	add	r3, r2
 800c9e6:	79fa      	ldrb	r2, [r7, #7]
 800c9e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c9ea:	4b11      	ldr	r3, [pc, #68]	; (800ca30 <FATFS_LinkDriverEx+0x94>)
 800c9ec:	7a5b      	ldrb	r3, [r3, #9]
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	1c5a      	adds	r2, r3, #1
 800c9f2:	b2d1      	uxtb	r1, r2
 800c9f4:	4a0e      	ldr	r2, [pc, #56]	; (800ca30 <FATFS_LinkDriverEx+0x94>)
 800c9f6:	7251      	strb	r1, [r2, #9]
 800c9f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c9fa:	7dbb      	ldrb	r3, [r7, #22]
 800c9fc:	3330      	adds	r3, #48	; 0x30
 800c9fe:	b2da      	uxtb	r2, r3
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	3301      	adds	r3, #1
 800ca08:	223a      	movs	r2, #58	; 0x3a
 800ca0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	3302      	adds	r3, #2
 800ca10:	222f      	movs	r2, #47	; 0x2f
 800ca12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	3303      	adds	r3, #3
 800ca18:	2200      	movs	r2, #0
 800ca1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ca20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	371c      	adds	r7, #28
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop
 800ca30:	200029d4 	.word	0x200029d4

0800ca34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ca3e:	2200      	movs	r2, #0
 800ca40:	6839      	ldr	r1, [r7, #0]
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f7ff ffaa 	bl	800c99c <FATFS_LinkDriverEx>
 800ca48:	4603      	mov	r3, r0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
	...

0800ca54 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	6039      	str	r1, [r7, #0]
 800ca5e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ca60:	88fb      	ldrh	r3, [r7, #6]
 800ca62:	2b7f      	cmp	r3, #127	; 0x7f
 800ca64:	d802      	bhi.n	800ca6c <ff_convert+0x18>
		c = chr;
 800ca66:	88fb      	ldrh	r3, [r7, #6]
 800ca68:	81fb      	strh	r3, [r7, #14]
 800ca6a:	e025      	b.n	800cab8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d00b      	beq.n	800ca8a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ca72:	88fb      	ldrh	r3, [r7, #6]
 800ca74:	2bff      	cmp	r3, #255	; 0xff
 800ca76:	d805      	bhi.n	800ca84 <ff_convert+0x30>
 800ca78:	88fb      	ldrh	r3, [r7, #6]
 800ca7a:	3b80      	subs	r3, #128	; 0x80
 800ca7c:	4a12      	ldr	r2, [pc, #72]	; (800cac8 <ff_convert+0x74>)
 800ca7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca82:	e000      	b.n	800ca86 <ff_convert+0x32>
 800ca84:	2300      	movs	r3, #0
 800ca86:	81fb      	strh	r3, [r7, #14]
 800ca88:	e016      	b.n	800cab8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	81fb      	strh	r3, [r7, #14]
 800ca8e:	e009      	b.n	800caa4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ca90:	89fb      	ldrh	r3, [r7, #14]
 800ca92:	4a0d      	ldr	r2, [pc, #52]	; (800cac8 <ff_convert+0x74>)
 800ca94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca98:	88fa      	ldrh	r2, [r7, #6]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d006      	beq.n	800caac <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ca9e:	89fb      	ldrh	r3, [r7, #14]
 800caa0:	3301      	adds	r3, #1
 800caa2:	81fb      	strh	r3, [r7, #14]
 800caa4:	89fb      	ldrh	r3, [r7, #14]
 800caa6:	2b7f      	cmp	r3, #127	; 0x7f
 800caa8:	d9f2      	bls.n	800ca90 <ff_convert+0x3c>
 800caaa:	e000      	b.n	800caae <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800caac:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800caae:	89fb      	ldrh	r3, [r7, #14]
 800cab0:	3380      	adds	r3, #128	; 0x80
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cab8:	89fb      	ldrh	r3, [r7, #14]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3714      	adds	r7, #20
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop
 800cac8:	080165ac 	.word	0x080165ac

0800cacc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cacc:	b480      	push	{r7}
 800cace:	b087      	sub	sp, #28
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	4603      	mov	r3, r0
 800cad4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cad6:	88fb      	ldrh	r3, [r7, #6]
 800cad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cadc:	d201      	bcs.n	800cae2 <ff_wtoupper+0x16>
 800cade:	4b3e      	ldr	r3, [pc, #248]	; (800cbd8 <ff_wtoupper+0x10c>)
 800cae0:	e000      	b.n	800cae4 <ff_wtoupper+0x18>
 800cae2:	4b3e      	ldr	r3, [pc, #248]	; (800cbdc <ff_wtoupper+0x110>)
 800cae4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	1c9a      	adds	r2, r3, #2
 800caea:	617a      	str	r2, [r7, #20]
 800caec:	881b      	ldrh	r3, [r3, #0]
 800caee:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800caf0:	8a7b      	ldrh	r3, [r7, #18]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d068      	beq.n	800cbc8 <ff_wtoupper+0xfc>
 800caf6:	88fa      	ldrh	r2, [r7, #6]
 800caf8:	8a7b      	ldrh	r3, [r7, #18]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d364      	bcc.n	800cbc8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	1c9a      	adds	r2, r3, #2
 800cb02:	617a      	str	r2, [r7, #20]
 800cb04:	881b      	ldrh	r3, [r3, #0]
 800cb06:	823b      	strh	r3, [r7, #16]
 800cb08:	8a3b      	ldrh	r3, [r7, #16]
 800cb0a:	0a1b      	lsrs	r3, r3, #8
 800cb0c:	81fb      	strh	r3, [r7, #14]
 800cb0e:	8a3b      	ldrh	r3, [r7, #16]
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cb14:	88fa      	ldrh	r2, [r7, #6]
 800cb16:	8a79      	ldrh	r1, [r7, #18]
 800cb18:	8a3b      	ldrh	r3, [r7, #16]
 800cb1a:	440b      	add	r3, r1
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	da49      	bge.n	800cbb4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cb20:	89fb      	ldrh	r3, [r7, #14]
 800cb22:	2b08      	cmp	r3, #8
 800cb24:	d84f      	bhi.n	800cbc6 <ff_wtoupper+0xfa>
 800cb26:	a201      	add	r2, pc, #4	; (adr r2, 800cb2c <ff_wtoupper+0x60>)
 800cb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2c:	0800cb51 	.word	0x0800cb51
 800cb30:	0800cb63 	.word	0x0800cb63
 800cb34:	0800cb79 	.word	0x0800cb79
 800cb38:	0800cb81 	.word	0x0800cb81
 800cb3c:	0800cb89 	.word	0x0800cb89
 800cb40:	0800cb91 	.word	0x0800cb91
 800cb44:	0800cb99 	.word	0x0800cb99
 800cb48:	0800cba1 	.word	0x0800cba1
 800cb4c:	0800cba9 	.word	0x0800cba9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cb50:	88fa      	ldrh	r2, [r7, #6]
 800cb52:	8a7b      	ldrh	r3, [r7, #18]
 800cb54:	1ad3      	subs	r3, r2, r3
 800cb56:	005b      	lsls	r3, r3, #1
 800cb58:	697a      	ldr	r2, [r7, #20]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	881b      	ldrh	r3, [r3, #0]
 800cb5e:	80fb      	strh	r3, [r7, #6]
 800cb60:	e027      	b.n	800cbb2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cb62:	88fa      	ldrh	r2, [r7, #6]
 800cb64:	8a7b      	ldrh	r3, [r7, #18]
 800cb66:	1ad3      	subs	r3, r2, r3
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	f003 0301 	and.w	r3, r3, #1
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	88fa      	ldrh	r2, [r7, #6]
 800cb72:	1ad3      	subs	r3, r2, r3
 800cb74:	80fb      	strh	r3, [r7, #6]
 800cb76:	e01c      	b.n	800cbb2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cb78:	88fb      	ldrh	r3, [r7, #6]
 800cb7a:	3b10      	subs	r3, #16
 800cb7c:	80fb      	strh	r3, [r7, #6]
 800cb7e:	e018      	b.n	800cbb2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cb80:	88fb      	ldrh	r3, [r7, #6]
 800cb82:	3b20      	subs	r3, #32
 800cb84:	80fb      	strh	r3, [r7, #6]
 800cb86:	e014      	b.n	800cbb2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cb88:	88fb      	ldrh	r3, [r7, #6]
 800cb8a:	3b30      	subs	r3, #48	; 0x30
 800cb8c:	80fb      	strh	r3, [r7, #6]
 800cb8e:	e010      	b.n	800cbb2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cb90:	88fb      	ldrh	r3, [r7, #6]
 800cb92:	3b1a      	subs	r3, #26
 800cb94:	80fb      	strh	r3, [r7, #6]
 800cb96:	e00c      	b.n	800cbb2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cb98:	88fb      	ldrh	r3, [r7, #6]
 800cb9a:	3308      	adds	r3, #8
 800cb9c:	80fb      	strh	r3, [r7, #6]
 800cb9e:	e008      	b.n	800cbb2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cba0:	88fb      	ldrh	r3, [r7, #6]
 800cba2:	3b50      	subs	r3, #80	; 0x50
 800cba4:	80fb      	strh	r3, [r7, #6]
 800cba6:	e004      	b.n	800cbb2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cba8:	88fb      	ldrh	r3, [r7, #6]
 800cbaa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800cbae:	80fb      	strh	r3, [r7, #6]
 800cbb0:	bf00      	nop
			}
			break;
 800cbb2:	e008      	b.n	800cbc6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800cbb4:	89fb      	ldrh	r3, [r7, #14]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d195      	bne.n	800cae6 <ff_wtoupper+0x1a>
 800cbba:	8a3b      	ldrh	r3, [r7, #16]
 800cbbc:	005b      	lsls	r3, r3, #1
 800cbbe:	697a      	ldr	r2, [r7, #20]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800cbc4:	e78f      	b.n	800cae6 <ff_wtoupper+0x1a>
			break;
 800cbc6:	bf00      	nop
	}

	return chr;
 800cbc8:	88fb      	ldrh	r3, [r7, #6]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	371c      	adds	r7, #28
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	080166ac 	.word	0x080166ac
 800cbdc:	080168a0 	.word	0x080168a0

0800cbe0 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	6039      	str	r1, [r7, #0]
 800cbea:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800cbec:	2200      	movs	r2, #0
 800cbee:	2101      	movs	r1, #1
 800cbf0:	2001      	movs	r0, #1
 800cbf2:	f000 f978 	bl	800cee6 <osSemaphoreNew>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	bf14      	ite	ne
 800cc04:	2301      	movne	r3, #1
 800cc06:	2300      	moveq	r3, #0
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	60fb      	str	r3, [r7, #12]

    return ret;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3710      	adds	r7, #16
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b082      	sub	sp, #8
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fa88 	bl	800d134 <osSemaphoreDelete>
#endif
    return 1;
 800cc24:	2301      	movs	r3, #1
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3708      	adds	r7, #8
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b084      	sub	sp, #16
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800cc36:	2300      	movs	r3, #0
 800cc38:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800cc3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f9da 	bl	800cff8 <osSemaphoreAcquire>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d101      	bne.n	800cc4e <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 fa1f 	bl	800d0a4 <osSemaphoreRelease>
#endif
}
 800cc66:	bf00      	nop
 800cc68:	3708      	adds	r7, #8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <__NVIC_SetPriority>:
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	4603      	mov	r3, r0
 800cc78:	6039      	str	r1, [r7, #0]
 800cc7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cc7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	db0a      	blt.n	800cc9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	490c      	ldr	r1, [pc, #48]	; (800ccbc <__NVIC_SetPriority+0x4c>)
 800cc8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc8e:	0112      	lsls	r2, r2, #4
 800cc90:	b2d2      	uxtb	r2, r2
 800cc92:	440b      	add	r3, r1
 800cc94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cc98:	e00a      	b.n	800ccb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	b2da      	uxtb	r2, r3
 800cc9e:	4908      	ldr	r1, [pc, #32]	; (800ccc0 <__NVIC_SetPriority+0x50>)
 800cca0:	79fb      	ldrb	r3, [r7, #7]
 800cca2:	f003 030f 	and.w	r3, r3, #15
 800cca6:	3b04      	subs	r3, #4
 800cca8:	0112      	lsls	r2, r2, #4
 800ccaa:	b2d2      	uxtb	r2, r2
 800ccac:	440b      	add	r3, r1
 800ccae:	761a      	strb	r2, [r3, #24]
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	e000e100 	.word	0xe000e100
 800ccc0:	e000ed00 	.word	0xe000ed00

0800ccc4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ccc8:	4b05      	ldr	r3, [pc, #20]	; (800cce0 <SysTick_Handler+0x1c>)
 800ccca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cccc:	f002 fbd0 	bl	800f470 <xTaskGetSchedulerState>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d001      	beq.n	800ccda <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ccd6:	f003 fb37 	bl	8010348 <xPortSysTickHandler>
  }
}
 800ccda:	bf00      	nop
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	e000e010 	.word	0xe000e010

0800cce4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cce4:	b580      	push	{r7, lr}
 800cce6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cce8:	2100      	movs	r1, #0
 800ccea:	f06f 0004 	mvn.w	r0, #4
 800ccee:	f7ff ffbf 	bl	800cc70 <__NVIC_SetPriority>
#endif
}
 800ccf2:	bf00      	nop
 800ccf4:	bd80      	pop	{r7, pc}
	...

0800ccf8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccfe:	f3ef 8305 	mrs	r3, IPSR
 800cd02:	603b      	str	r3, [r7, #0]
  return(result);
 800cd04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d003      	beq.n	800cd12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cd0a:	f06f 0305 	mvn.w	r3, #5
 800cd0e:	607b      	str	r3, [r7, #4]
 800cd10:	e00c      	b.n	800cd2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cd12:	4b0a      	ldr	r3, [pc, #40]	; (800cd3c <osKernelInitialize+0x44>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d105      	bne.n	800cd26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cd1a:	4b08      	ldr	r3, [pc, #32]	; (800cd3c <osKernelInitialize+0x44>)
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cd20:	2300      	movs	r3, #0
 800cd22:	607b      	str	r3, [r7, #4]
 800cd24:	e002      	b.n	800cd2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cd26:	f04f 33ff 	mov.w	r3, #4294967295
 800cd2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cd2c:	687b      	ldr	r3, [r7, #4]
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	370c      	adds	r7, #12
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop
 800cd3c:	200029e0 	.word	0x200029e0

0800cd40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd46:	f3ef 8305 	mrs	r3, IPSR
 800cd4a:	603b      	str	r3, [r7, #0]
  return(result);
 800cd4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d003      	beq.n	800cd5a <osKernelStart+0x1a>
    stat = osErrorISR;
 800cd52:	f06f 0305 	mvn.w	r3, #5
 800cd56:	607b      	str	r3, [r7, #4]
 800cd58:	e010      	b.n	800cd7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cd5a:	4b0b      	ldr	r3, [pc, #44]	; (800cd88 <osKernelStart+0x48>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d109      	bne.n	800cd76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cd62:	f7ff ffbf 	bl	800cce4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cd66:	4b08      	ldr	r3, [pc, #32]	; (800cd88 <osKernelStart+0x48>)
 800cd68:	2202      	movs	r2, #2
 800cd6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cd6c:	f001 fe26 	bl	800e9bc <vTaskStartScheduler>
      stat = osOK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	607b      	str	r3, [r7, #4]
 800cd74:	e002      	b.n	800cd7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cd76:	f04f 33ff 	mov.w	r3, #4294967295
 800cd7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cd7c:	687b      	ldr	r3, [r7, #4]
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	200029e0 	.word	0x200029e0

0800cd8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08e      	sub	sp, #56	; 0x38
 800cd90:	af04      	add	r7, sp, #16
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd9c:	f3ef 8305 	mrs	r3, IPSR
 800cda0:	617b      	str	r3, [r7, #20]
  return(result);
 800cda2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d17e      	bne.n	800cea6 <osThreadNew+0x11a>
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d07b      	beq.n	800cea6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cdae:	2380      	movs	r3, #128	; 0x80
 800cdb0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cdb2:	2318      	movs	r3, #24
 800cdb4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cdba:	f04f 33ff 	mov.w	r3, #4294967295
 800cdbe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d045      	beq.n	800ce52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d002      	beq.n	800cdd4 <osThreadNew+0x48>
        name = attr->name;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	699b      	ldr	r3, [r3, #24]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	699b      	ldr	r3, [r3, #24]
 800cde0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d008      	beq.n	800cdfa <osThreadNew+0x6e>
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	2b38      	cmp	r3, #56	; 0x38
 800cdec:	d805      	bhi.n	800cdfa <osThreadNew+0x6e>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	f003 0301 	and.w	r3, r3, #1
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d001      	beq.n	800cdfe <osThreadNew+0x72>
        return (NULL);
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	e054      	b.n	800cea8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	695b      	ldr	r3, [r3, #20]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d003      	beq.n	800ce0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	695b      	ldr	r3, [r3, #20]
 800ce0a:	089b      	lsrs	r3, r3, #2
 800ce0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d00e      	beq.n	800ce34 <osThreadNew+0xa8>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	2baf      	cmp	r3, #175	; 0xaf
 800ce1c:	d90a      	bls.n	800ce34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d006      	beq.n	800ce34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	695b      	ldr	r3, [r3, #20]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d002      	beq.n	800ce34 <osThreadNew+0xa8>
        mem = 1;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	61bb      	str	r3, [r7, #24]
 800ce32:	e010      	b.n	800ce56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10c      	bne.n	800ce56 <osThreadNew+0xca>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d108      	bne.n	800ce56 <osThreadNew+0xca>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d104      	bne.n	800ce56 <osThreadNew+0xca>
          mem = 0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	61bb      	str	r3, [r7, #24]
 800ce50:	e001      	b.n	800ce56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d110      	bne.n	800ce7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce64:	9202      	str	r2, [sp, #8]
 800ce66:	9301      	str	r3, [sp, #4]
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	6a3a      	ldr	r2, [r7, #32]
 800ce70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce72:	68f8      	ldr	r0, [r7, #12]
 800ce74:	f001 fb8e 	bl	800e594 <xTaskCreateStatic>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	613b      	str	r3, [r7, #16]
 800ce7c:	e013      	b.n	800cea6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d110      	bne.n	800cea6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ce84:	6a3b      	ldr	r3, [r7, #32]
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	f107 0310 	add.w	r3, r7, #16
 800ce8c:	9301      	str	r3, [sp, #4]
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	9300      	str	r3, [sp, #0]
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce96:	68f8      	ldr	r0, [r7, #12]
 800ce98:	f001 fbd9 	bl	800e64e <xTaskCreate>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d001      	beq.n	800cea6 <osThreadNew+0x11a>
            hTask = NULL;
 800cea2:	2300      	movs	r3, #0
 800cea4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cea6:	693b      	ldr	r3, [r7, #16]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3728      	adds	r7, #40	; 0x28
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ceb8:	f3ef 8305 	mrs	r3, IPSR
 800cebc:	60bb      	str	r3, [r7, #8]
  return(result);
 800cebe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d003      	beq.n	800cecc <osDelay+0x1c>
    stat = osErrorISR;
 800cec4:	f06f 0305 	mvn.w	r3, #5
 800cec8:	60fb      	str	r3, [r7, #12]
 800ceca:	e007      	b.n	800cedc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cecc:	2300      	movs	r3, #0
 800cece:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d002      	beq.n	800cedc <osDelay+0x2c>
      vTaskDelay(ticks);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f001 fd38 	bl	800e94c <vTaskDelay>
    }
  }

  return (stat);
 800cedc:	68fb      	ldr	r3, [r7, #12]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}

0800cee6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cee6:	b580      	push	{r7, lr}
 800cee8:	b08a      	sub	sp, #40	; 0x28
 800ceea:	af02      	add	r7, sp, #8
 800ceec:	60f8      	str	r0, [r7, #12]
 800ceee:	60b9      	str	r1, [r7, #8]
 800cef0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cef2:	2300      	movs	r3, #0
 800cef4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cef6:	f3ef 8305 	mrs	r3, IPSR
 800cefa:	613b      	str	r3, [r7, #16]
  return(result);
 800cefc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d175      	bne.n	800cfee <osSemaphoreNew+0x108>
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d072      	beq.n	800cfee <osSemaphoreNew+0x108>
 800cf08:	68ba      	ldr	r2, [r7, #8]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d86e      	bhi.n	800cfee <osSemaphoreNew+0x108>
    mem = -1;
 800cf10:	f04f 33ff 	mov.w	r3, #4294967295
 800cf14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d015      	beq.n	800cf48 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	689b      	ldr	r3, [r3, #8]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d006      	beq.n	800cf32 <osSemaphoreNew+0x4c>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	2b4f      	cmp	r3, #79	; 0x4f
 800cf2a:	d902      	bls.n	800cf32 <osSemaphoreNew+0x4c>
        mem = 1;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	61bb      	str	r3, [r7, #24]
 800cf30:	e00c      	b.n	800cf4c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d108      	bne.n	800cf4c <osSemaphoreNew+0x66>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d104      	bne.n	800cf4c <osSemaphoreNew+0x66>
          mem = 0;
 800cf42:	2300      	movs	r3, #0
 800cf44:	61bb      	str	r3, [r7, #24]
 800cf46:	e001      	b.n	800cf4c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf52:	d04c      	beq.n	800cfee <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d128      	bne.n	800cfac <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d10a      	bne.n	800cf76 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	2203      	movs	r2, #3
 800cf66:	9200      	str	r2, [sp, #0]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	2001      	movs	r0, #1
 800cf6e:	f000 fa55 	bl	800d41c <xQueueGenericCreateStatic>
 800cf72:	61f8      	str	r0, [r7, #28]
 800cf74:	e005      	b.n	800cf82 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800cf76:	2203      	movs	r2, #3
 800cf78:	2100      	movs	r1, #0
 800cf7a:	2001      	movs	r0, #1
 800cf7c:	f000 fac6 	bl	800d50c <xQueueGenericCreate>
 800cf80:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cf82:	69fb      	ldr	r3, [r7, #28]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d022      	beq.n	800cfce <osSemaphoreNew+0xe8>
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d01f      	beq.n	800cfce <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cf8e:	2300      	movs	r3, #0
 800cf90:	2200      	movs	r2, #0
 800cf92:	2100      	movs	r1, #0
 800cf94:	69f8      	ldr	r0, [r7, #28]
 800cf96:	f000 fbb9 	bl	800d70c <xQueueGenericSend>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d016      	beq.n	800cfce <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800cfa0:	69f8      	ldr	r0, [r7, #28]
 800cfa2:	f001 f913 	bl	800e1cc <vQueueDelete>
            hSemaphore = NULL;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	61fb      	str	r3, [r7, #28]
 800cfaa:	e010      	b.n	800cfce <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800cfac:	69bb      	ldr	r3, [r7, #24]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d108      	bne.n	800cfc4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	68b9      	ldr	r1, [r7, #8]
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	f000 fb3b 	bl	800d636 <xQueueCreateCountingSemaphoreStatic>
 800cfc0:	61f8      	str	r0, [r7, #28]
 800cfc2:	e004      	b.n	800cfce <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cfc4:	68b9      	ldr	r1, [r7, #8]
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	f000 fb6c 	bl	800d6a4 <xQueueCreateCountingSemaphore>
 800cfcc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00c      	beq.n	800cfee <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d003      	beq.n	800cfe2 <osSemaphoreNew+0xfc>
          name = attr->name;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	617b      	str	r3, [r7, #20]
 800cfe0:	e001      	b.n	800cfe6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cfe6:	6979      	ldr	r1, [r7, #20]
 800cfe8:	69f8      	ldr	r0, [r7, #28]
 800cfea:	f001 fa43 	bl	800e474 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800cfee:	69fb      	ldr	r3, [r7, #28]
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3720      	adds	r7, #32
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b086      	sub	sp, #24
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d006:	2300      	movs	r3, #0
 800d008:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d103      	bne.n	800d018 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d010:	f06f 0303 	mvn.w	r3, #3
 800d014:	617b      	str	r3, [r7, #20]
 800d016:	e03e      	b.n	800d096 <osSemaphoreAcquire+0x9e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d018:	f3ef 8305 	mrs	r3, IPSR
 800d01c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d01e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d020:	2b00      	cmp	r3, #0
 800d022:	d027      	beq.n	800d074 <osSemaphoreAcquire+0x7c>
    if (timeout != 0U) {
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d003      	beq.n	800d032 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800d02a:	f06f 0303 	mvn.w	r3, #3
 800d02e:	617b      	str	r3, [r7, #20]
 800d030:	e031      	b.n	800d096 <osSemaphoreAcquire+0x9e>
    }
    else {
      yield = pdFALSE;
 800d032:	2300      	movs	r3, #0
 800d034:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d036:	f107 0308 	add.w	r3, r7, #8
 800d03a:	461a      	mov	r2, r3
 800d03c:	2100      	movs	r1, #0
 800d03e:	6938      	ldr	r0, [r7, #16]
 800d040:	f001 f826 	bl	800e090 <xQueueReceiveFromISR>
 800d044:	4603      	mov	r3, r0
 800d046:	2b01      	cmp	r3, #1
 800d048:	d003      	beq.n	800d052 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800d04a:	f06f 0302 	mvn.w	r3, #2
 800d04e:	617b      	str	r3, [r7, #20]
 800d050:	e021      	b.n	800d096 <osSemaphoreAcquire+0x9e>
      } else {
        portYIELD_FROM_ISR (yield);
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00a      	beq.n	800d06e <osSemaphoreAcquire+0x76>
 800d058:	f005 fed8 	bl	8012e0c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800d05c:	4b10      	ldr	r3, [pc, #64]	; (800d0a0 <osSemaphoreAcquire+0xa8>)
 800d05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	f3bf 8f4f 	dsb	sy
 800d068:	f3bf 8f6f 	isb	sy
 800d06c:	e013      	b.n	800d096 <osSemaphoreAcquire+0x9e>
 800d06e:	f005 feb1 	bl	8012dd4 <SEGGER_SYSVIEW_RecordExitISR>
 800d072:	e010      	b.n	800d096 <osSemaphoreAcquire+0x9e>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d074:	6839      	ldr	r1, [r7, #0]
 800d076:	6938      	ldr	r0, [r7, #16]
 800d078:	f000 fece 	bl	800de18 <xQueueSemaphoreTake>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d009      	beq.n	800d096 <osSemaphoreAcquire+0x9e>
      if (timeout != 0U) {
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d003      	beq.n	800d090 <osSemaphoreAcquire+0x98>
        stat = osErrorTimeout;
 800d088:	f06f 0301 	mvn.w	r3, #1
 800d08c:	617b      	str	r3, [r7, #20]
 800d08e:	e002      	b.n	800d096 <osSemaphoreAcquire+0x9e>
      } else {
        stat = osErrorResource;
 800d090:	f06f 0302 	mvn.w	r3, #2
 800d094:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d096:	697b      	ldr	r3, [r7, #20]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3718      	adds	r7, #24
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	e000ed04 	.word	0xe000ed04

0800d0a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b086      	sub	sp, #24
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d103      	bne.n	800d0c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d0ba:	f06f 0303 	mvn.w	r3, #3
 800d0be:	617b      	str	r3, [r7, #20]
 800d0c0:	e031      	b.n	800d126 <osSemaphoreRelease+0x82>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0c2:	f3ef 8305 	mrs	r3, IPSR
 800d0c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d01f      	beq.n	800d10e <osSemaphoreRelease+0x6a>
    yield = pdFALSE;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d0d2:	f107 0308 	add.w	r3, r7, #8
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	6938      	ldr	r0, [r7, #16]
 800d0da:	f000 fcec 	bl	800dab6 <xQueueGiveFromISR>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d003      	beq.n	800d0ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d0e4:	f06f 0302 	mvn.w	r3, #2
 800d0e8:	617b      	str	r3, [r7, #20]
 800d0ea:	e01c      	b.n	800d126 <osSemaphoreRelease+0x82>
    } else {
      portYIELD_FROM_ISR (yield);
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00a      	beq.n	800d108 <osSemaphoreRelease+0x64>
 800d0f2:	f005 fe8b 	bl	8012e0c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800d0f6:	4b0e      	ldr	r3, [pc, #56]	; (800d130 <osSemaphoreRelease+0x8c>)
 800d0f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0fc:	601a      	str	r2, [r3, #0]
 800d0fe:	f3bf 8f4f 	dsb	sy
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	e00e      	b.n	800d126 <osSemaphoreRelease+0x82>
 800d108:	f005 fe64 	bl	8012dd4 <SEGGER_SYSVIEW_RecordExitISR>
 800d10c:	e00b      	b.n	800d126 <osSemaphoreRelease+0x82>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d10e:	2300      	movs	r3, #0
 800d110:	2200      	movs	r2, #0
 800d112:	2100      	movs	r1, #0
 800d114:	6938      	ldr	r0, [r7, #16]
 800d116:	f000 faf9 	bl	800d70c <xQueueGenericSend>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d002      	beq.n	800d126 <osSemaphoreRelease+0x82>
      stat = osErrorResource;
 800d120:	f06f 0302 	mvn.w	r3, #2
 800d124:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d126:	697b      	ldr	r3, [r7, #20]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3718      	adds	r7, #24
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	e000ed04 	.word	0xe000ed04

0800d134 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d134:	b580      	push	{r7, lr}
 800d136:	b086      	sub	sp, #24
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d140:	f3ef 8305 	mrs	r3, IPSR
 800d144:	60fb      	str	r3, [r7, #12]
  return(result);
 800d146:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d003      	beq.n	800d154 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800d14c:	f06f 0305 	mvn.w	r3, #5
 800d150:	617b      	str	r3, [r7, #20]
 800d152:	e00e      	b.n	800d172 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d103      	bne.n	800d162 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800d15a:	f06f 0303 	mvn.w	r3, #3
 800d15e:	617b      	str	r3, [r7, #20]
 800d160:	e007      	b.n	800d172 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d162:	6938      	ldr	r0, [r7, #16]
 800d164:	f001 f9b8 	bl	800e4d8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d168:	2300      	movs	r3, #0
 800d16a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800d16c:	6938      	ldr	r0, [r7, #16]
 800d16e:	f001 f82d 	bl	800e1cc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d172:	697b      	ldr	r3, [r7, #20]
}
 800d174:	4618      	mov	r0, r3
 800d176:	3718      	adds	r7, #24
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	4a07      	ldr	r2, [pc, #28]	; (800d1a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800d18c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	4a06      	ldr	r2, [pc, #24]	; (800d1ac <vApplicationGetIdleTaskMemory+0x30>)
 800d192:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2280      	movs	r2, #128	; 0x80
 800d198:	601a      	str	r2, [r3, #0]
}
 800d19a:	bf00      	nop
 800d19c:	3714      	adds	r7, #20
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	200029e4 	.word	0x200029e4
 800d1ac:	20002a94 	.word	0x20002a94

0800d1b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d1b0:	b480      	push	{r7}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	4a07      	ldr	r2, [pc, #28]	; (800d1dc <vApplicationGetTimerTaskMemory+0x2c>)
 800d1c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	4a06      	ldr	r2, [pc, #24]	; (800d1e0 <vApplicationGetTimerTaskMemory+0x30>)
 800d1c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1ce:	601a      	str	r2, [r3, #0]
}
 800d1d0:	bf00      	nop
 800d1d2:	3714      	adds	r7, #20
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	20002c94 	.word	0x20002c94
 800d1e0:	20002d44 	.word	0x20002d44

0800d1e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f103 0208 	add.w	r2, r3, #8
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f103 0208 	add.w	r2, r3, #8
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f103 0208 	add.w	r2, r3, #8
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2200      	movs	r2, #0
 800d216:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d218:	bf00      	nop
 800d21a:	370c      	adds	r7, #12
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d232:	bf00      	nop
 800d234:	370c      	adds	r7, #12
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr

0800d23e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d23e:	b480      	push	{r7}
 800d240:	b085      	sub	sp, #20
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
 800d246:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	689a      	ldr	r2, [r3, #8]
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	683a      	ldr	r2, [r7, #0]
 800d262:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	683a      	ldr	r2, [r7, #0]
 800d268:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	1c5a      	adds	r2, r3, #1
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	601a      	str	r2, [r3, #0]
}
 800d27a:	bf00      	nop
 800d27c:	3714      	adds	r7, #20
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr

0800d286 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d286:	b480      	push	{r7}
 800d288:	b085      	sub	sp, #20
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d29c:	d103      	bne.n	800d2a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	691b      	ldr	r3, [r3, #16]
 800d2a2:	60fb      	str	r3, [r7, #12]
 800d2a4:	e00c      	b.n	800d2c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	3308      	adds	r3, #8
 800d2aa:	60fb      	str	r3, [r7, #12]
 800d2ac:	e002      	b.n	800d2b4 <vListInsert+0x2e>
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	60fb      	str	r3, [r7, #12]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	68ba      	ldr	r2, [r7, #8]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d2f6      	bcs.n	800d2ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	685a      	ldr	r2, [r3, #4]
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	683a      	ldr	r2, [r7, #0]
 800d2ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	683a      	ldr	r2, [r7, #0]
 800d2da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	1c5a      	adds	r2, r3, #1
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	601a      	str	r2, [r3, #0]
}
 800d2ec:	bf00      	nop
 800d2ee:	3714      	adds	r7, #20
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	691b      	ldr	r3, [r3, #16]
 800d304:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	6892      	ldr	r2, [r2, #8]
 800d30e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	687a      	ldr	r2, [r7, #4]
 800d316:	6852      	ldr	r2, [r2, #4]
 800d318:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	429a      	cmp	r2, r3
 800d322:	d103      	bne.n	800d32c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	689a      	ldr	r2, [r3, #8]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	1e5a      	subs	r2, r3, #1
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3714      	adds	r7, #20
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr

0800d34c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d10a      	bne.n	800d376 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d372:	bf00      	nop
 800d374:	e7fe      	b.n	800d374 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d376:	f002 ff55 	bl	8010224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d382:	68f9      	ldr	r1, [r7, #12]
 800d384:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d386:	fb01 f303 	mul.w	r3, r1, r3
 800d38a:	441a      	add	r2, r3
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2200      	movs	r2, #0
 800d394:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	68f9      	ldr	r1, [r7, #12]
 800d3aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3ac:	fb01 f303 	mul.w	r3, r1, r3
 800d3b0:	441a      	add	r2, r3
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	22ff      	movs	r2, #255	; 0xff
 800d3ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	22ff      	movs	r2, #255	; 0xff
 800d3c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d114      	bne.n	800d3f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d01a      	beq.n	800d40a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	3310      	adds	r3, #16
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f001 fe21 	bl	800f020 <xTaskRemoveFromEventList>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d012      	beq.n	800d40a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d3e4:	4b0c      	ldr	r3, [pc, #48]	; (800d418 <xQueueGenericReset+0xcc>)
 800d3e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ea:	601a      	str	r2, [r3, #0]
 800d3ec:	f3bf 8f4f 	dsb	sy
 800d3f0:	f3bf 8f6f 	isb	sy
 800d3f4:	e009      	b.n	800d40a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	3310      	adds	r3, #16
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff fef2 	bl	800d1e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	3324      	adds	r3, #36	; 0x24
 800d404:	4618      	mov	r0, r3
 800d406:	f7ff feed 	bl	800d1e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d40a:	f002 ff3b 	bl	8010284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d40e:	2301      	movs	r3, #1
}
 800d410:	4618      	mov	r0, r3
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	e000ed04 	.word	0xe000ed04

0800d41c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b08e      	sub	sp, #56	; 0x38
 800d420:	af02      	add	r7, sp, #8
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	607a      	str	r2, [r7, #4]
 800d428:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d10a      	bne.n	800d446 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d434:	f383 8811 	msr	BASEPRI, r3
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d442:	bf00      	nop
 800d444:	e7fe      	b.n	800d444 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d10a      	bne.n	800d462 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d450:	f383 8811 	msr	BASEPRI, r3
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d45e:	bf00      	nop
 800d460:	e7fe      	b.n	800d460 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d002      	beq.n	800d46e <xQueueGenericCreateStatic+0x52>
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <xQueueGenericCreateStatic+0x56>
 800d46e:	2301      	movs	r3, #1
 800d470:	e000      	b.n	800d474 <xQueueGenericCreateStatic+0x58>
 800d472:	2300      	movs	r3, #0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d10a      	bne.n	800d48e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47c:	f383 8811 	msr	BASEPRI, r3
 800d480:	f3bf 8f6f 	isb	sy
 800d484:	f3bf 8f4f 	dsb	sy
 800d488:	623b      	str	r3, [r7, #32]
}
 800d48a:	bf00      	nop
 800d48c:	e7fe      	b.n	800d48c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d102      	bne.n	800d49a <xQueueGenericCreateStatic+0x7e>
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <xQueueGenericCreateStatic+0x82>
 800d49a:	2301      	movs	r3, #1
 800d49c:	e000      	b.n	800d4a0 <xQueueGenericCreateStatic+0x84>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d10a      	bne.n	800d4ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	61fb      	str	r3, [r7, #28]
}
 800d4b6:	bf00      	nop
 800d4b8:	e7fe      	b.n	800d4b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d4ba:	2350      	movs	r3, #80	; 0x50
 800d4bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	2b50      	cmp	r3, #80	; 0x50
 800d4c2:	d00a      	beq.n	800d4da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	61bb      	str	r3, [r7, #24]
}
 800d4d6:	bf00      	nop
 800d4d8:	e7fe      	b.n	800d4d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d4da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00d      	beq.n	800d502 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d4ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	68b9      	ldr	r1, [r7, #8]
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	f000 f83f 	bl	800d580 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d504:	4618      	mov	r0, r3
 800d506:	3730      	adds	r7, #48	; 0x30
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b08a      	sub	sp, #40	; 0x28
 800d510:	af02      	add	r7, sp, #8
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	4613      	mov	r3, r2
 800d518:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10a      	bne.n	800d536 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d524:	f383 8811 	msr	BASEPRI, r3
 800d528:	f3bf 8f6f 	isb	sy
 800d52c:	f3bf 8f4f 	dsb	sy
 800d530:	613b      	str	r3, [r7, #16]
}
 800d532:	bf00      	nop
 800d534:	e7fe      	b.n	800d534 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	68ba      	ldr	r2, [r7, #8]
 800d53a:	fb02 f303 	mul.w	r3, r2, r3
 800d53e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	3350      	adds	r3, #80	; 0x50
 800d544:	4618      	mov	r0, r3
 800d546:	f002 ffef 	bl	8010528 <pvPortMalloc>
 800d54a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d011      	beq.n	800d576 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	3350      	adds	r3, #80	; 0x50
 800d55a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	2200      	movs	r2, #0
 800d560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d564:	79fa      	ldrb	r2, [r7, #7]
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	9300      	str	r3, [sp, #0]
 800d56a:	4613      	mov	r3, r2
 800d56c:	697a      	ldr	r2, [r7, #20]
 800d56e:	68b9      	ldr	r1, [r7, #8]
 800d570:	68f8      	ldr	r0, [r7, #12]
 800d572:	f000 f805 	bl	800d580 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d576:	69bb      	ldr	r3, [r7, #24]
	}
 800d578:	4618      	mov	r0, r3
 800d57a:	3720      	adds	r7, #32
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
 800d58c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d103      	bne.n	800d59c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d594:	69bb      	ldr	r3, [r7, #24]
 800d596:	69ba      	ldr	r2, [r7, #24]
 800d598:	601a      	str	r2, [r3, #0]
 800d59a:	e002      	b.n	800d5a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	68fa      	ldr	r2, [r7, #12]
 800d5a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	68ba      	ldr	r2, [r7, #8]
 800d5ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d5ae:	2101      	movs	r1, #1
 800d5b0:	69b8      	ldr	r0, [r7, #24]
 800d5b2:	f7ff fecb 	bl	800d34c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	78fa      	ldrb	r2, [r7, #3]
 800d5ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800d5be:	78fb      	ldrb	r3, [r7, #3]
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	68f9      	ldr	r1, [r7, #12]
 800d5c4:	2073      	movs	r0, #115	; 0x73
 800d5c6:	f004 fff3 	bl	80125b0 <SEGGER_SYSVIEW_RecordU32x3>
}
 800d5ca:	bf00      	nop
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b082      	sub	sp, #8
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d00e      	beq.n	800d5fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 f887 	bl	800d70c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d5fe:	bf00      	nop
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d606:	b580      	push	{r7, lr}
 800d608:	b086      	sub	sp, #24
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	4603      	mov	r3, r0
 800d60e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d610:	2301      	movs	r3, #1
 800d612:	617b      	str	r3, [r7, #20]
 800d614:	2300      	movs	r3, #0
 800d616:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d618:	79fb      	ldrb	r3, [r7, #7]
 800d61a:	461a      	mov	r2, r3
 800d61c:	6939      	ldr	r1, [r7, #16]
 800d61e:	6978      	ldr	r0, [r7, #20]
 800d620:	f7ff ff74 	bl	800d50c <xQueueGenericCreate>
 800d624:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d626:	68f8      	ldr	r0, [r7, #12]
 800d628:	f7ff ffd3 	bl	800d5d2 <prvInitialiseMutex>

		return xNewQueue;
 800d62c:	68fb      	ldr	r3, [r7, #12]
	}
 800d62e:	4618      	mov	r0, r3
 800d630:	3718      	adds	r7, #24
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}

0800d636 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d636:	b580      	push	{r7, lr}
 800d638:	b08a      	sub	sp, #40	; 0x28
 800d63a:	af02      	add	r7, sp, #8
 800d63c:	60f8      	str	r0, [r7, #12]
 800d63e:	60b9      	str	r1, [r7, #8]
 800d640:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d10a      	bne.n	800d65e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64c:	f383 8811 	msr	BASEPRI, r3
 800d650:	f3bf 8f6f 	isb	sy
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	61bb      	str	r3, [r7, #24]
}
 800d65a:	bf00      	nop
 800d65c:	e7fe      	b.n	800d65c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d65e:	68ba      	ldr	r2, [r7, #8]
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	429a      	cmp	r2, r3
 800d664:	d90a      	bls.n	800d67c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66a:	f383 8811 	msr	BASEPRI, r3
 800d66e:	f3bf 8f6f 	isb	sy
 800d672:	f3bf 8f4f 	dsb	sy
 800d676:	617b      	str	r3, [r7, #20]
}
 800d678:	bf00      	nop
 800d67a:	e7fe      	b.n	800d67a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d67c:	2302      	movs	r3, #2
 800d67e:	9300      	str	r3, [sp, #0]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	2100      	movs	r1, #0
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	f7ff fec8 	bl	800d41c <xQueueGenericCreateStatic>
 800d68c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d002      	beq.n	800d69a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d694:	69fb      	ldr	r3, [r7, #28]
 800d696:	68ba      	ldr	r2, [r7, #8]
 800d698:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d69a:	69fb      	ldr	r3, [r7, #28]
	}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3720      	adds	r7, #32
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b086      	sub	sp, #24
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d10a      	bne.n	800d6ca <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b8:	f383 8811 	msr	BASEPRI, r3
 800d6bc:	f3bf 8f6f 	isb	sy
 800d6c0:	f3bf 8f4f 	dsb	sy
 800d6c4:	613b      	str	r3, [r7, #16]
}
 800d6c6:	bf00      	nop
 800d6c8:	e7fe      	b.n	800d6c8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d90a      	bls.n	800d6e8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d6:	f383 8811 	msr	BASEPRI, r3
 800d6da:	f3bf 8f6f 	isb	sy
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	60fb      	str	r3, [r7, #12]
}
 800d6e4:	bf00      	nop
 800d6e6:	e7fe      	b.n	800d6e6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d6e8:	2202      	movs	r2, #2
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f7ff ff0d 	bl	800d50c <xQueueGenericCreate>
 800d6f2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d002      	beq.n	800d700 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d700:	697b      	ldr	r3, [r7, #20]
	}
 800d702:	4618      	mov	r0, r3
 800d704:	3718      	adds	r7, #24
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
	...

0800d70c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b090      	sub	sp, #64	; 0x40
 800d710:	af02      	add	r7, sp, #8
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d71a:	2300      	movs	r3, #0
 800d71c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d724:	2b00      	cmp	r3, #0
 800d726:	d10a      	bne.n	800d73e <xQueueGenericSend+0x32>
	__asm volatile
 800d728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72c:	f383 8811 	msr	BASEPRI, r3
 800d730:	f3bf 8f6f 	isb	sy
 800d734:	f3bf 8f4f 	dsb	sy
 800d738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d73a:	bf00      	nop
 800d73c:	e7fe      	b.n	800d73c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d103      	bne.n	800d74c <xQueueGenericSend+0x40>
 800d744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d101      	bne.n	800d750 <xQueueGenericSend+0x44>
 800d74c:	2301      	movs	r3, #1
 800d74e:	e000      	b.n	800d752 <xQueueGenericSend+0x46>
 800d750:	2300      	movs	r3, #0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10a      	bne.n	800d76c <xQueueGenericSend+0x60>
	__asm volatile
 800d756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75a:	f383 8811 	msr	BASEPRI, r3
 800d75e:	f3bf 8f6f 	isb	sy
 800d762:	f3bf 8f4f 	dsb	sy
 800d766:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d768:	bf00      	nop
 800d76a:	e7fe      	b.n	800d76a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	2b02      	cmp	r3, #2
 800d770:	d103      	bne.n	800d77a <xQueueGenericSend+0x6e>
 800d772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d776:	2b01      	cmp	r3, #1
 800d778:	d101      	bne.n	800d77e <xQueueGenericSend+0x72>
 800d77a:	2301      	movs	r3, #1
 800d77c:	e000      	b.n	800d780 <xQueueGenericSend+0x74>
 800d77e:	2300      	movs	r3, #0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d10a      	bne.n	800d79a <xQueueGenericSend+0x8e>
	__asm volatile
 800d784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d788:	f383 8811 	msr	BASEPRI, r3
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	623b      	str	r3, [r7, #32]
}
 800d796:	bf00      	nop
 800d798:	e7fe      	b.n	800d798 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d79a:	f001 fe69 	bl	800f470 <xTaskGetSchedulerState>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d102      	bne.n	800d7aa <xQueueGenericSend+0x9e>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d101      	bne.n	800d7ae <xQueueGenericSend+0xa2>
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	e000      	b.n	800d7b0 <xQueueGenericSend+0xa4>
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d10a      	bne.n	800d7ca <xQueueGenericSend+0xbe>
	__asm volatile
 800d7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b8:	f383 8811 	msr	BASEPRI, r3
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	f3bf 8f4f 	dsb	sy
 800d7c4:	61fb      	str	r3, [r7, #28]
}
 800d7c6:	bf00      	nop
 800d7c8:	e7fe      	b.n	800d7c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7ca:	f002 fd2b 	bl	8010224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d302      	bcc.n	800d7e0 <xQueueGenericSend+0xd4>
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	2b02      	cmp	r3, #2
 800d7de:	d136      	bne.n	800d84e <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 800d7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f005 fc70 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	6879      	ldr	r1, [r7, #4]
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	9300      	str	r3, [sp, #0]
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	4601      	mov	r1, r0
 800d7f4:	205a      	movs	r0, #90	; 0x5a
 800d7f6:	f004 ff51 	bl	801269c <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7fa:	683a      	ldr	r2, [r7, #0]
 800d7fc:	68b9      	ldr	r1, [r7, #8]
 800d7fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d800:	f000 fd28 	bl	800e254 <prvCopyDataToQueue>
 800d804:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d010      	beq.n	800d830 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d810:	3324      	adds	r3, #36	; 0x24
 800d812:	4618      	mov	r0, r3
 800d814:	f001 fc04 	bl	800f020 <xTaskRemoveFromEventList>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d013      	beq.n	800d846 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d81e:	4b4d      	ldr	r3, [pc, #308]	; (800d954 <xQueueGenericSend+0x248>)
 800d820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d824:	601a      	str	r2, [r3, #0]
 800d826:	f3bf 8f4f 	dsb	sy
 800d82a:	f3bf 8f6f 	isb	sy
 800d82e:	e00a      	b.n	800d846 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d832:	2b00      	cmp	r3, #0
 800d834:	d007      	beq.n	800d846 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d836:	4b47      	ldr	r3, [pc, #284]	; (800d954 <xQueueGenericSend+0x248>)
 800d838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d83c:	601a      	str	r2, [r3, #0]
 800d83e:	f3bf 8f4f 	dsb	sy
 800d842:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d846:	f002 fd1d 	bl	8010284 <vPortExitCritical>
				return pdPASS;
 800d84a:	2301      	movs	r3, #1
 800d84c:	e07d      	b.n	800d94a <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d110      	bne.n	800d876 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d854:	f002 fd16 	bl	8010284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800d858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85a:	4618      	mov	r0, r3
 800d85c:	f005 fc34 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800d860:	68ba      	ldr	r2, [r7, #8]
 800d862:	6879      	ldr	r1, [r7, #4]
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	9300      	str	r3, [sp, #0]
 800d868:	460b      	mov	r3, r1
 800d86a:	4601      	mov	r1, r0
 800d86c:	205a      	movs	r0, #90	; 0x5a
 800d86e:	f004 ff15 	bl	801269c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800d872:	2300      	movs	r3, #0
 800d874:	e069      	b.n	800d94a <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d106      	bne.n	800d88a <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d87c:	f107 0314 	add.w	r3, r7, #20
 800d880:	4618      	mov	r0, r3
 800d882:	f001 fc37 	bl	800f0f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d886:	2301      	movs	r3, #1
 800d888:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d88a:	f002 fcfb 	bl	8010284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d88e:	f001 f919 	bl	800eac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d892:	f002 fcc7 	bl	8010224 <vPortEnterCritical>
 800d896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d89c:	b25b      	sxtb	r3, r3
 800d89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a2:	d103      	bne.n	800d8ac <xQueueGenericSend+0x1a0>
 800d8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8b2:	b25b      	sxtb	r3, r3
 800d8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b8:	d103      	bne.n	800d8c2 <xQueueGenericSend+0x1b6>
 800d8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8c2:	f002 fcdf 	bl	8010284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8c6:	1d3a      	adds	r2, r7, #4
 800d8c8:	f107 0314 	add.w	r3, r7, #20
 800d8cc:	4611      	mov	r1, r2
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f001 fc26 	bl	800f120 <xTaskCheckForTimeOut>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d124      	bne.n	800d924 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d8da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8dc:	f000 fdb2 	bl	800e444 <prvIsQueueFull>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d018      	beq.n	800d918 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e8:	3310      	adds	r3, #16
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	4611      	mov	r1, r2
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f001 fb44 	bl	800ef7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d8f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8f6:	f000 fd3d 	bl	800e374 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d8fa:	f001 f929 	bl	800eb50 <xTaskResumeAll>
 800d8fe:	4603      	mov	r3, r0
 800d900:	2b00      	cmp	r3, #0
 800d902:	f47f af62 	bne.w	800d7ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d906:	4b13      	ldr	r3, [pc, #76]	; (800d954 <xQueueGenericSend+0x248>)
 800d908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d90c:	601a      	str	r2, [r3, #0]
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	f3bf 8f6f 	isb	sy
 800d916:	e758      	b.n	800d7ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d91a:	f000 fd2b 	bl	800e374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d91e:	f001 f917 	bl	800eb50 <xTaskResumeAll>
 800d922:	e752      	b.n	800d7ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d926:	f000 fd25 	bl	800e374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d92a:	f001 f911 	bl	800eb50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800d92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d930:	4618      	mov	r0, r3
 800d932:	f005 fbc9 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800d936:	68ba      	ldr	r2, [r7, #8]
 800d938:	6879      	ldr	r1, [r7, #4]
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	460b      	mov	r3, r1
 800d940:	4601      	mov	r1, r0
 800d942:	205a      	movs	r0, #90	; 0x5a
 800d944:	f004 feaa 	bl	801269c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800d948:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3738      	adds	r7, #56	; 0x38
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	e000ed04 	.word	0xe000ed04

0800d958 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b090      	sub	sp, #64	; 0x40
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	607a      	str	r2, [r7, #4]
 800d964:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d10a      	bne.n	800d986 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d974:	f383 8811 	msr	BASEPRI, r3
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	f3bf 8f4f 	dsb	sy
 800d980:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d982:	bf00      	nop
 800d984:	e7fe      	b.n	800d984 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d103      	bne.n	800d994 <xQueueGenericSendFromISR+0x3c>
 800d98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d990:	2b00      	cmp	r3, #0
 800d992:	d101      	bne.n	800d998 <xQueueGenericSendFromISR+0x40>
 800d994:	2301      	movs	r3, #1
 800d996:	e000      	b.n	800d99a <xQueueGenericSendFromISR+0x42>
 800d998:	2300      	movs	r3, #0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d10a      	bne.n	800d9b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a2:	f383 8811 	msr	BASEPRI, r3
 800d9a6:	f3bf 8f6f 	isb	sy
 800d9aa:	f3bf 8f4f 	dsb	sy
 800d9ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d9b0:	bf00      	nop
 800d9b2:	e7fe      	b.n	800d9b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	2b02      	cmp	r3, #2
 800d9b8:	d103      	bne.n	800d9c2 <xQueueGenericSendFromISR+0x6a>
 800d9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d101      	bne.n	800d9c6 <xQueueGenericSendFromISR+0x6e>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e000      	b.n	800d9c8 <xQueueGenericSendFromISR+0x70>
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d10a      	bne.n	800d9e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d0:	f383 8811 	msr	BASEPRI, r3
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	623b      	str	r3, [r7, #32]
}
 800d9de:	bf00      	nop
 800d9e0:	e7fe      	b.n	800d9e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9e2:	f002 fd09 	bl	80103f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d9e6:	f3ef 8211 	mrs	r2, BASEPRI
 800d9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ee:	f383 8811 	msr	BASEPRI, r3
 800d9f2:	f3bf 8f6f 	isb	sy
 800d9f6:	f3bf 8f4f 	dsb	sy
 800d9fa:	61fa      	str	r2, [r7, #28]
 800d9fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d9fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d302      	bcc.n	800da14 <xQueueGenericSendFromISR+0xbc>
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	2b02      	cmp	r3, #2
 800da12:	d139      	bne.n	800da88 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800da14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da22:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800da24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da26:	4618      	mov	r0, r3
 800da28:	f005 fb4e 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800da2c:	4601      	mov	r1, r0
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	461a      	mov	r2, r3
 800da32:	2060      	movs	r0, #96	; 0x60
 800da34:	f004 fd62 	bl	80124fc <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da38:	683a      	ldr	r2, [r7, #0]
 800da3a:	68b9      	ldr	r1, [r7, #8]
 800da3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da3e:	f000 fc09 	bl	800e254 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800da42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800da46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4a:	d112      	bne.n	800da72 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da50:	2b00      	cmp	r3, #0
 800da52:	d016      	beq.n	800da82 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da56:	3324      	adds	r3, #36	; 0x24
 800da58:	4618      	mov	r0, r3
 800da5a:	f001 fae1 	bl	800f020 <xTaskRemoveFromEventList>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00e      	beq.n	800da82 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00b      	beq.n	800da82 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2201      	movs	r2, #1
 800da6e:	601a      	str	r2, [r3, #0]
 800da70:	e007      	b.n	800da82 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800da72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800da76:	3301      	adds	r3, #1
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	b25a      	sxtb	r2, r3
 800da7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800da82:	2301      	movs	r3, #1
 800da84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800da86:	e00b      	b.n	800daa0 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800da88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8a:	4618      	mov	r0, r3
 800da8c:	f005 fb1c 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800da90:	4601      	mov	r1, r0
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	461a      	mov	r2, r3
 800da96:	2060      	movs	r0, #96	; 0x60
 800da98:	f004 fd30 	bl	80124fc <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800da9c:	2300      	movs	r3, #0
 800da9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800daa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daa2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800daaa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800daac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3740      	adds	r7, #64	; 0x40
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b08e      	sub	sp, #56	; 0x38
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
 800dabe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d10a      	bne.n	800dae0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800daca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	623b      	str	r3, [r7, #32]
}
 800dadc:	bf00      	nop
 800dade:	e7fe      	b.n	800dade <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d00a      	beq.n	800dafe <xQueueGiveFromISR+0x48>
	__asm volatile
 800dae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daec:	f383 8811 	msr	BASEPRI, r3
 800daf0:	f3bf 8f6f 	isb	sy
 800daf4:	f3bf 8f4f 	dsb	sy
 800daf8:	61fb      	str	r3, [r7, #28]
}
 800dafa:	bf00      	nop
 800dafc:	e7fe      	b.n	800dafc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800dafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d103      	bne.n	800db0e <xQueueGiveFromISR+0x58>
 800db06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d101      	bne.n	800db12 <xQueueGiveFromISR+0x5c>
 800db0e:	2301      	movs	r3, #1
 800db10:	e000      	b.n	800db14 <xQueueGiveFromISR+0x5e>
 800db12:	2300      	movs	r3, #0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d10a      	bne.n	800db2e <xQueueGiveFromISR+0x78>
	__asm volatile
 800db18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1c:	f383 8811 	msr	BASEPRI, r3
 800db20:	f3bf 8f6f 	isb	sy
 800db24:	f3bf 8f4f 	dsb	sy
 800db28:	61bb      	str	r3, [r7, #24]
}
 800db2a:	bf00      	nop
 800db2c:	e7fe      	b.n	800db2c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db2e:	f002 fc63 	bl	80103f8 <vPortValidateInterruptPriority>
	__asm volatile
 800db32:	f3ef 8211 	mrs	r2, BASEPRI
 800db36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3a:	f383 8811 	msr	BASEPRI, r3
 800db3e:	f3bf 8f6f 	isb	sy
 800db42:	f3bf 8f4f 	dsb	sy
 800db46:	617a      	str	r2, [r7, #20]
 800db48:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800db4a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800db54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d235      	bcs.n	800dbca <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800db5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800db68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6a:	4618      	mov	r0, r3
 800db6c:	f005 faac 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800db70:	4601      	mov	r1, r0
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	461a      	mov	r2, r3
 800db76:	2060      	movs	r0, #96	; 0x60
 800db78:	f004 fcc0 	bl	80124fc <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7e:	1c5a      	adds	r2, r3, #1
 800db80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db82:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db8c:	d112      	bne.n	800dbb4 <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db92:	2b00      	cmp	r3, #0
 800db94:	d016      	beq.n	800dbc4 <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	3324      	adds	r3, #36	; 0x24
 800db9a:	4618      	mov	r0, r3
 800db9c:	f001 fa40 	bl	800f020 <xTaskRemoveFromEventList>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d00e      	beq.n	800dbc4 <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d00b      	beq.n	800dbc4 <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	601a      	str	r2, [r3, #0]
 800dbb2:	e007      	b.n	800dbc4 <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dbb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbb8:	3301      	adds	r3, #1
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	b25a      	sxtb	r2, r3
 800dbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	637b      	str	r3, [r7, #52]	; 0x34
 800dbc8:	e00b      	b.n	800dbe2 <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800dbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f005 fa7b 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800dbd2:	4601      	mov	r1, r0
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	2060      	movs	r0, #96	; 0x60
 800dbda:	f004 fc8f 	bl	80124fc <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	637b      	str	r3, [r7, #52]	; 0x34
 800dbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f383 8811 	msr	BASEPRI, r3
}
 800dbec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3738      	adds	r7, #56	; 0x38
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dbf8:	b590      	push	{r4, r7, lr}
 800dbfa:	b08f      	sub	sp, #60	; 0x3c
 800dbfc:	af02      	add	r7, sp, #8
 800dbfe:	60f8      	str	r0, [r7, #12]
 800dc00:	60b9      	str	r1, [r7, #8]
 800dc02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc04:	2300      	movs	r3, #0
 800dc06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d10a      	bne.n	800dc28 <xQueueReceive+0x30>
	__asm volatile
 800dc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc16:	f383 8811 	msr	BASEPRI, r3
 800dc1a:	f3bf 8f6f 	isb	sy
 800dc1e:	f3bf 8f4f 	dsb	sy
 800dc22:	623b      	str	r3, [r7, #32]
}
 800dc24:	bf00      	nop
 800dc26:	e7fe      	b.n	800dc26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d103      	bne.n	800dc36 <xQueueReceive+0x3e>
 800dc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d101      	bne.n	800dc3a <xQueueReceive+0x42>
 800dc36:	2301      	movs	r3, #1
 800dc38:	e000      	b.n	800dc3c <xQueueReceive+0x44>
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10a      	bne.n	800dc56 <xQueueReceive+0x5e>
	__asm volatile
 800dc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc44:	f383 8811 	msr	BASEPRI, r3
 800dc48:	f3bf 8f6f 	isb	sy
 800dc4c:	f3bf 8f4f 	dsb	sy
 800dc50:	61fb      	str	r3, [r7, #28]
}
 800dc52:	bf00      	nop
 800dc54:	e7fe      	b.n	800dc54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc56:	f001 fc0b 	bl	800f470 <xTaskGetSchedulerState>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d102      	bne.n	800dc66 <xQueueReceive+0x6e>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d101      	bne.n	800dc6a <xQueueReceive+0x72>
 800dc66:	2301      	movs	r3, #1
 800dc68:	e000      	b.n	800dc6c <xQueueReceive+0x74>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d10a      	bne.n	800dc86 <xQueueReceive+0x8e>
	__asm volatile
 800dc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	61bb      	str	r3, [r7, #24]
}
 800dc82:	bf00      	nop
 800dc84:	e7fe      	b.n	800dc84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc86:	f002 facd 	bl	8010224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d02f      	beq.n	800dcf6 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc96:	68b9      	ldr	r1, [r7, #8]
 800dc98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc9a:	f000 fb45 	bl	800e328 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800dc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca0:	4618      	mov	r0, r3
 800dca2:	f005 fa11 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800dca6:	4604      	mov	r4, r0
 800dca8:	2000      	movs	r0, #0
 800dcaa:	f005 fa0d 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2101      	movs	r1, #1
 800dcb4:	9100      	str	r1, [sp, #0]
 800dcb6:	4621      	mov	r1, r4
 800dcb8:	205c      	movs	r0, #92	; 0x5c
 800dcba:	f004 fcef 	bl	801269c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc0:	1e5a      	subs	r2, r3, #1
 800dcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc8:	691b      	ldr	r3, [r3, #16]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00f      	beq.n	800dcee <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd0:	3310      	adds	r3, #16
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f001 f9a4 	bl	800f020 <xTaskRemoveFromEventList>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d007      	beq.n	800dcee <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dcde:	4b4d      	ldr	r3, [pc, #308]	; (800de14 <xQueueReceive+0x21c>)
 800dce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dce4:	601a      	str	r2, [r3, #0]
 800dce6:	f3bf 8f4f 	dsb	sy
 800dcea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dcee:	f002 fac9 	bl	8010284 <vPortExitCritical>
				return pdPASS;
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	e08a      	b.n	800de0c <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d113      	bne.n	800dd24 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dcfc:	f002 fac2 	bl	8010284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800dd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd02:	4618      	mov	r0, r3
 800dd04:	f005 f9e0 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800dd08:	4604      	mov	r4, r0
 800dd0a:	2000      	movs	r0, #0
 800dd0c:	f005 f9dc 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800dd10:	4602      	mov	r2, r0
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2101      	movs	r1, #1
 800dd16:	9100      	str	r1, [sp, #0]
 800dd18:	4621      	mov	r1, r4
 800dd1a:	205c      	movs	r0, #92	; 0x5c
 800dd1c:	f004 fcbe 	bl	801269c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800dd20:	2300      	movs	r3, #0
 800dd22:	e073      	b.n	800de0c <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d106      	bne.n	800dd38 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd2a:	f107 0310 	add.w	r3, r7, #16
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f001 f9e0 	bl	800f0f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd34:	2301      	movs	r3, #1
 800dd36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd38:	f002 faa4 	bl	8010284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd3c:	f000 fec2 	bl	800eac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd40:	f002 fa70 	bl	8010224 <vPortEnterCritical>
 800dd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd4a:	b25b      	sxtb	r3, r3
 800dd4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd50:	d103      	bne.n	800dd5a <xQueueReceive+0x162>
 800dd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd54:	2200      	movs	r2, #0
 800dd56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd60:	b25b      	sxtb	r3, r3
 800dd62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd66:	d103      	bne.n	800dd70 <xQueueReceive+0x178>
 800dd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd70:	f002 fa88 	bl	8010284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd74:	1d3a      	adds	r2, r7, #4
 800dd76:	f107 0310 	add.w	r3, r7, #16
 800dd7a:	4611      	mov	r1, r2
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f001 f9cf 	bl	800f120 <xTaskCheckForTimeOut>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d124      	bne.n	800ddd2 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd8a:	f000 fb45 	bl	800e418 <prvIsQueueEmpty>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d018      	beq.n	800ddc6 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd96:	3324      	adds	r3, #36	; 0x24
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	4611      	mov	r1, r2
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f001 f8ed 	bl	800ef7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dda2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dda4:	f000 fae6 	bl	800e374 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dda8:	f000 fed2 	bl	800eb50 <xTaskResumeAll>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	f47f af69 	bne.w	800dc86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ddb4:	4b17      	ldr	r3, [pc, #92]	; (800de14 <xQueueReceive+0x21c>)
 800ddb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddba:	601a      	str	r2, [r3, #0]
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	f3bf 8f6f 	isb	sy
 800ddc4:	e75f      	b.n	800dc86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ddc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddc8:	f000 fad4 	bl	800e374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ddcc:	f000 fec0 	bl	800eb50 <xTaskResumeAll>
 800ddd0:	e759      	b.n	800dc86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ddd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddd4:	f000 face 	bl	800e374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ddd8:	f000 feba 	bl	800eb50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddde:	f000 fb1b 	bl	800e418 <prvIsQueueEmpty>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	f43f af4e 	beq.w	800dc86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800ddea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddec:	4618      	mov	r0, r3
 800ddee:	f005 f96b 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	f005 f967 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2101      	movs	r1, #1
 800de00:	9100      	str	r1, [sp, #0]
 800de02:	4621      	mov	r1, r4
 800de04:	205c      	movs	r0, #92	; 0x5c
 800de06:	f004 fc49 	bl	801269c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800de0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3734      	adds	r7, #52	; 0x34
 800de10:	46bd      	mov	sp, r7
 800de12:	bd90      	pop	{r4, r7, pc}
 800de14:	e000ed04 	.word	0xe000ed04

0800de18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800de18:	b590      	push	{r4, r7, lr}
 800de1a:	b091      	sub	sp, #68	; 0x44
 800de1c:	af02      	add	r7, sp, #8
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800de22:	2300      	movs	r3, #0
 800de24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800de2a:	2300      	movs	r3, #0
 800de2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800de2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de30:	2b00      	cmp	r3, #0
 800de32:	d10a      	bne.n	800de4a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800de34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de38:	f383 8811 	msr	BASEPRI, r3
 800de3c:	f3bf 8f6f 	isb	sy
 800de40:	f3bf 8f4f 	dsb	sy
 800de44:	623b      	str	r3, [r7, #32]
}
 800de46:	bf00      	nop
 800de48:	e7fe      	b.n	800de48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800de4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d00a      	beq.n	800de68 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800de52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	61fb      	str	r3, [r7, #28]
}
 800de64:	bf00      	nop
 800de66:	e7fe      	b.n	800de66 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de68:	f001 fb02 	bl	800f470 <xTaskGetSchedulerState>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d102      	bne.n	800de78 <xQueueSemaphoreTake+0x60>
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d101      	bne.n	800de7c <xQueueSemaphoreTake+0x64>
 800de78:	2301      	movs	r3, #1
 800de7a:	e000      	b.n	800de7e <xQueueSemaphoreTake+0x66>
 800de7c:	2300      	movs	r3, #0
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d10a      	bne.n	800de98 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800de82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de86:	f383 8811 	msr	BASEPRI, r3
 800de8a:	f3bf 8f6f 	isb	sy
 800de8e:	f3bf 8f4f 	dsb	sy
 800de92:	61bb      	str	r3, [r7, #24]
}
 800de94:	bf00      	nop
 800de96:	e7fe      	b.n	800de96 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de98:	f002 f9c4 	bl	8010224 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800de9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d034      	beq.n	800df12 <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 800dea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deaa:	4618      	mov	r0, r3
 800deac:	f005 f90c 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800deb0:	4604      	mov	r4, r0
 800deb2:	2000      	movs	r0, #0
 800deb4:	f005 f908 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800deb8:	4602      	mov	r2, r0
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	2101      	movs	r1, #1
 800debe:	9100      	str	r1, [sp, #0]
 800dec0:	4621      	mov	r1, r4
 800dec2:	205c      	movs	r0, #92	; 0x5c
 800dec4:	f004 fbea 	bl	801269c <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deca:	1e5a      	subs	r2, r3, #1
 800decc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dece:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ded0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d104      	bne.n	800dee2 <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ded8:	f001 fc52 	bl	800f780 <pvTaskIncrementMutexHeldCount>
 800dedc:	4602      	mov	r2, r0
 800dede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee4:	691b      	ldr	r3, [r3, #16]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00f      	beq.n	800df0a <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800deea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deec:	3310      	adds	r3, #16
 800deee:	4618      	mov	r0, r3
 800def0:	f001 f896 	bl	800f020 <xTaskRemoveFromEventList>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d007      	beq.n	800df0a <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800defa:	4b64      	ldr	r3, [pc, #400]	; (800e08c <xQueueSemaphoreTake+0x274>)
 800defc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df00:	601a      	str	r2, [r3, #0]
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800df0a:	f002 f9bb 	bl	8010284 <vPortExitCritical>
				return pdPASS;
 800df0e:	2301      	movs	r3, #1
 800df10:	e0b7      	b.n	800e082 <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d121      	bne.n	800df5c <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800df18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00a      	beq.n	800df34 <xQueueSemaphoreTake+0x11c>
	__asm volatile
 800df1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df22:	f383 8811 	msr	BASEPRI, r3
 800df26:	f3bf 8f6f 	isb	sy
 800df2a:	f3bf 8f4f 	dsb	sy
 800df2e:	617b      	str	r3, [r7, #20]
}
 800df30:	bf00      	nop
 800df32:	e7fe      	b.n	800df32 <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800df34:	f002 f9a6 	bl	8010284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800df38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3a:	4618      	mov	r0, r3
 800df3c:	f005 f8c4 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800df40:	4604      	mov	r4, r0
 800df42:	2000      	movs	r0, #0
 800df44:	f005 f8c0 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800df48:	4602      	mov	r2, r0
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	2101      	movs	r1, #1
 800df4e:	9100      	str	r1, [sp, #0]
 800df50:	4621      	mov	r1, r4
 800df52:	205c      	movs	r0, #92	; 0x5c
 800df54:	f004 fba2 	bl	801269c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800df58:	2300      	movs	r3, #0
 800df5a:	e092      	b.n	800e082 <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d106      	bne.n	800df70 <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df62:	f107 030c 	add.w	r3, r7, #12
 800df66:	4618      	mov	r0, r3
 800df68:	f001 f8c4 	bl	800f0f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df6c:	2301      	movs	r3, #1
 800df6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df70:	f002 f988 	bl	8010284 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df74:	f000 fda6 	bl	800eac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df78:	f002 f954 	bl	8010224 <vPortEnterCritical>
 800df7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df82:	b25b      	sxtb	r3, r3
 800df84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df88:	d103      	bne.n	800df92 <xQueueSemaphoreTake+0x17a>
 800df8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df98:	b25b      	sxtb	r3, r3
 800df9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df9e:	d103      	bne.n	800dfa8 <xQueueSemaphoreTake+0x190>
 800dfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dfa8:	f002 f96c 	bl	8010284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfac:	463a      	mov	r2, r7
 800dfae:	f107 030c 	add.w	r3, r7, #12
 800dfb2:	4611      	mov	r1, r2
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f001 f8b3 	bl	800f120 <xTaskCheckForTimeOut>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d132      	bne.n	800e026 <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfc2:	f000 fa29 	bl	800e418 <prvIsQueueEmpty>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d026      	beq.n	800e01a <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d109      	bne.n	800dfe8 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 800dfd4:	f002 f926 	bl	8010224 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f001 fa65 	bl	800f4ac <xTaskPriorityInherit>
 800dfe2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800dfe4:	f002 f94e 	bl	8010284 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfea:	3324      	adds	r3, #36	; 0x24
 800dfec:	683a      	ldr	r2, [r7, #0]
 800dfee:	4611      	mov	r1, r2
 800dff0:	4618      	mov	r0, r3
 800dff2:	f000 ffc3 	bl	800ef7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dff6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dff8:	f000 f9bc 	bl	800e374 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dffc:	f000 fda8 	bl	800eb50 <xTaskResumeAll>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	f47f af48 	bne.w	800de98 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e008:	4b20      	ldr	r3, [pc, #128]	; (800e08c <xQueueSemaphoreTake+0x274>)
 800e00a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e00e:	601a      	str	r2, [r3, #0]
 800e010:	f3bf 8f4f 	dsb	sy
 800e014:	f3bf 8f6f 	isb	sy
 800e018:	e73e      	b.n	800de98 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e01a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e01c:	f000 f9aa 	bl	800e374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e020:	f000 fd96 	bl	800eb50 <xTaskResumeAll>
 800e024:	e738      	b.n	800de98 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e028:	f000 f9a4 	bl	800e374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e02c:	f000 fd90 	bl	800eb50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e032:	f000 f9f1 	bl	800e418 <prvIsQueueEmpty>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f43f af2d 	beq.w	800de98 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e040:	2b00      	cmp	r3, #0
 800e042:	d00d      	beq.n	800e060 <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 800e044:	f002 f8ee 	bl	8010224 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e04a:	f000 f8eb 	bl	800e224 <prvGetDisinheritPriorityAfterTimeout>
 800e04e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e056:	4618      	mov	r0, r3
 800e058:	f001 fb08 	bl	800f66c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e05c:	f002 f912 	bl	8010284 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800e060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e062:	4618      	mov	r0, r3
 800e064:	f005 f830 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800e068:	4604      	mov	r4, r0
 800e06a:	2000      	movs	r0, #0
 800e06c:	f005 f82c 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800e070:	4602      	mov	r2, r0
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	2101      	movs	r1, #1
 800e076:	9100      	str	r1, [sp, #0]
 800e078:	4621      	mov	r1, r4
 800e07a:	205c      	movs	r0, #92	; 0x5c
 800e07c:	f004 fb0e 	bl	801269c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800e080:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e082:	4618      	mov	r0, r3
 800e084:	373c      	adds	r7, #60	; 0x3c
 800e086:	46bd      	mov	sp, r7
 800e088:	bd90      	pop	{r4, r7, pc}
 800e08a:	bf00      	nop
 800e08c:	e000ed04 	.word	0xe000ed04

0800e090 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e090:	b590      	push	{r4, r7, lr}
 800e092:	b08f      	sub	sp, #60	; 0x3c
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d10a      	bne.n	800e0bc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0aa:	f383 8811 	msr	BASEPRI, r3
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	f3bf 8f4f 	dsb	sy
 800e0b6:	623b      	str	r3, [r7, #32]
}
 800e0b8:	bf00      	nop
 800e0ba:	e7fe      	b.n	800e0ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d103      	bne.n	800e0ca <xQueueReceiveFromISR+0x3a>
 800e0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d101      	bne.n	800e0ce <xQueueReceiveFromISR+0x3e>
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	e000      	b.n	800e0d0 <xQueueReceiveFromISR+0x40>
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d10a      	bne.n	800e0ea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d8:	f383 8811 	msr	BASEPRI, r3
 800e0dc:	f3bf 8f6f 	isb	sy
 800e0e0:	f3bf 8f4f 	dsb	sy
 800e0e4:	61fb      	str	r3, [r7, #28]
}
 800e0e6:	bf00      	nop
 800e0e8:	e7fe      	b.n	800e0e8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e0ea:	f002 f985 	bl	80103f8 <vPortValidateInterruptPriority>
	__asm volatile
 800e0ee:	f3ef 8211 	mrs	r2, BASEPRI
 800e0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f6:	f383 8811 	msr	BASEPRI, r3
 800e0fa:	f3bf 8f6f 	isb	sy
 800e0fe:	f3bf 8f4f 	dsb	sy
 800e102:	61ba      	str	r2, [r7, #24]
 800e104:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e106:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e108:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e10e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e112:	2b00      	cmp	r3, #0
 800e114:	d03e      	beq.n	800e194 <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 800e120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e122:	4618      	mov	r0, r3
 800e124:	f004 ffd0 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800e128:	4604      	mov	r4, r0
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	4618      	mov	r0, r3
 800e12e:	f004 ffcb 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800e132:	4602      	mov	r2, r0
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4621      	mov	r1, r4
 800e138:	2062      	movs	r0, #98	; 0x62
 800e13a:	f004 fa39 	bl	80125b0 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e13e:	68b9      	ldr	r1, [r7, #8]
 800e140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e142:	f000 f8f1 	bl	800e328 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e148:	1e5a      	subs	r2, r3, #1
 800e14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e14e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e156:	d112      	bne.n	800e17e <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15a:	691b      	ldr	r3, [r3, #16]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d016      	beq.n	800e18e <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e162:	3310      	adds	r3, #16
 800e164:	4618      	mov	r0, r3
 800e166:	f000 ff5b 	bl	800f020 <xTaskRemoveFromEventList>
 800e16a:	4603      	mov	r3, r0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d00e      	beq.n	800e18e <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00b      	beq.n	800e18e <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2201      	movs	r2, #1
 800e17a:	601a      	str	r2, [r3, #0]
 800e17c:	e007      	b.n	800e18e <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e17e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e182:	3301      	adds	r3, #1
 800e184:	b2db      	uxtb	r3, r3
 800e186:	b25a      	sxtb	r2, r3
 800e188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e18e:	2301      	movs	r3, #1
 800e190:	637b      	str	r3, [r7, #52]	; 0x34
 800e192:	e010      	b.n	800e1b6 <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 800e194:	2300      	movs	r3, #0
 800e196:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 800e198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19a:	4618      	mov	r0, r3
 800e19c:	f004 ff94 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800e1a0:	4604      	mov	r4, r0
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f004 ff8f 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	4621      	mov	r1, r4
 800e1b0:	2062      	movs	r0, #98	; 0x62
 800e1b2:	f004 f9fd 	bl	80125b0 <SEGGER_SYSVIEW_RecordU32x3>
 800e1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	f383 8811 	msr	BASEPRI, r3
}
 800e1c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	373c      	adds	r7, #60	; 0x3c
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd90      	pop	{r4, r7, pc}

0800e1cc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d10a      	bne.n	800e1f4 <vQueueDelete+0x28>
	__asm volatile
 800e1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e2:	f383 8811 	msr	BASEPRI, r3
 800e1e6:	f3bf 8f6f 	isb	sy
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	60bb      	str	r3, [r7, #8]
}
 800e1f0:	bf00      	nop
 800e1f2:	e7fe      	b.n	800e1f2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f004 ff66 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	4619      	mov	r1, r3
 800e200:	205f      	movs	r0, #95	; 0x5f
 800e202:	f004 f93f 	bl	8012484 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f000 f966 	bl	800e4d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e212:	2b00      	cmp	r3, #0
 800e214:	d102      	bne.n	800e21c <vQueueDelete+0x50>
		{
			vPortFree( pxQueue );
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	f002 fa52 	bl	80106c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e21c:	bf00      	nop
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e230:	2b00      	cmp	r3, #0
 800e232:	d006      	beq.n	800e242 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	e001      	b.n	800e246 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e242:	2300      	movs	r3, #0
 800e244:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e246:	68fb      	ldr	r3, [r7, #12]
	}
 800e248:	4618      	mov	r0, r3
 800e24a:	3714      	adds	r7, #20
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af00      	add	r7, sp, #0
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	60b9      	str	r1, [r7, #8]
 800e25e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e260:	2300      	movs	r3, #0
 800e262:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e268:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d10d      	bne.n	800e28e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d14d      	bne.n	800e316 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	689b      	ldr	r3, [r3, #8]
 800e27e:	4618      	mov	r0, r3
 800e280:	f001 f982 	bl	800f588 <xTaskPriorityDisinherit>
 800e284:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2200      	movs	r2, #0
 800e28a:	609a      	str	r2, [r3, #8]
 800e28c:	e043      	b.n	800e316 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d119      	bne.n	800e2c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	6858      	ldr	r0, [r3, #4]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e29c:	461a      	mov	r2, r3
 800e29e:	68b9      	ldr	r1, [r7, #8]
 800e2a0:	f005 ff2c 	bl	80140fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	685a      	ldr	r2, [r3, #4]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ac:	441a      	add	r2, r3
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	685a      	ldr	r2, [r3, #4]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d32b      	bcc.n	800e316 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	605a      	str	r2, [r3, #4]
 800e2c6:	e026      	b.n	800e316 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	68d8      	ldr	r0, [r3, #12]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	68b9      	ldr	r1, [r7, #8]
 800e2d4:	f005 ff12 	bl	80140fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	68da      	ldr	r2, [r3, #12]
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e0:	425b      	negs	r3, r3
 800e2e2:	441a      	add	r2, r3
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	68da      	ldr	r2, [r3, #12]
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d207      	bcs.n	800e304 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	689a      	ldr	r2, [r3, #8]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2fc:	425b      	negs	r3, r3
 800e2fe:	441a      	add	r2, r3
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2b02      	cmp	r3, #2
 800e308:	d105      	bne.n	800e316 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d002      	beq.n	800e316 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	3b01      	subs	r3, #1
 800e314:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	1c5a      	adds	r2, r3, #1
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e31e:	697b      	ldr	r3, [r7, #20]
}
 800e320:	4618      	mov	r0, r3
 800e322:	3718      	adds	r7, #24
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e336:	2b00      	cmp	r3, #0
 800e338:	d018      	beq.n	800e36c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	68da      	ldr	r2, [r3, #12]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e342:	441a      	add	r2, r3
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	68da      	ldr	r2, [r3, #12]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	689b      	ldr	r3, [r3, #8]
 800e350:	429a      	cmp	r2, r3
 800e352:	d303      	bcc.n	800e35c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	68d9      	ldr	r1, [r3, #12]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e364:	461a      	mov	r2, r3
 800e366:	6838      	ldr	r0, [r7, #0]
 800e368:	f005 fec8 	bl	80140fc <memcpy>
	}
}
 800e36c:	bf00      	nop
 800e36e:	3708      	adds	r7, #8
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e37c:	f001 ff52 	bl	8010224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e386:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e388:	e011      	b.n	800e3ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d012      	beq.n	800e3b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	3324      	adds	r3, #36	; 0x24
 800e396:	4618      	mov	r0, r3
 800e398:	f000 fe42 	bl	800f020 <xTaskRemoveFromEventList>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d001      	beq.n	800e3a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e3a2:	f000 ff1f 	bl	800f1e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e3a6:	7bfb      	ldrb	r3, [r7, #15]
 800e3a8:	3b01      	subs	r3, #1
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	dce9      	bgt.n	800e38a <prvUnlockQueue+0x16>
 800e3b6:	e000      	b.n	800e3ba <prvUnlockQueue+0x46>
					break;
 800e3b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	22ff      	movs	r2, #255	; 0xff
 800e3be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e3c2:	f001 ff5f 	bl	8010284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e3c6:	f001 ff2d 	bl	8010224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3d2:	e011      	b.n	800e3f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	691b      	ldr	r3, [r3, #16]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d012      	beq.n	800e402 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	3310      	adds	r3, #16
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f000 fe1d 	bl	800f020 <xTaskRemoveFromEventList>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d001      	beq.n	800e3f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e3ec:	f000 fefa 	bl	800f1e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e3f0:	7bbb      	ldrb	r3, [r7, #14]
 800e3f2:	3b01      	subs	r3, #1
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	dce9      	bgt.n	800e3d4 <prvUnlockQueue+0x60>
 800e400:	e000      	b.n	800e404 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e402:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	22ff      	movs	r2, #255	; 0xff
 800e408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e40c:	f001 ff3a 	bl	8010284 <vPortExitCritical>
}
 800e410:	bf00      	nop
 800e412:	3710      	adds	r7, #16
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e420:	f001 ff00 	bl	8010224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d102      	bne.n	800e432 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e42c:	2301      	movs	r3, #1
 800e42e:	60fb      	str	r3, [r7, #12]
 800e430:	e001      	b.n	800e436 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e432:	2300      	movs	r3, #0
 800e434:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e436:	f001 ff25 	bl	8010284 <vPortExitCritical>

	return xReturn;
 800e43a:	68fb      	ldr	r3, [r7, #12]
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b084      	sub	sp, #16
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e44c:	f001 feea 	bl	8010224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e458:	429a      	cmp	r2, r3
 800e45a:	d102      	bne.n	800e462 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e45c:	2301      	movs	r3, #1
 800e45e:	60fb      	str	r3, [r7, #12]
 800e460:	e001      	b.n	800e466 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e462:	2300      	movs	r3, #0
 800e464:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e466:	f001 ff0d 	bl	8010284 <vPortExitCritical>

	return xReturn;
 800e46a:	68fb      	ldr	r3, [r7, #12]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e47e:	2300      	movs	r3, #0
 800e480:	60fb      	str	r3, [r7, #12]
 800e482:	e01e      	b.n	800e4c2 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e484:	4a13      	ldr	r2, [pc, #76]	; (800e4d4 <vQueueAddToRegistry+0x60>)
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d115      	bne.n	800e4bc <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e490:	4910      	ldr	r1, [pc, #64]	; (800e4d4 <vQueueAddToRegistry+0x60>)
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	683a      	ldr	r2, [r7, #0]
 800e496:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e49a:	4a0e      	ldr	r2, [pc, #56]	; (800e4d4 <vQueueAddToRegistry+0x60>)
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	00db      	lsls	r3, r3, #3
 800e4a0:	4413      	add	r3, r2
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f004 fe0d 	bl	80130c8 <SEGGER_SYSVIEW_ShrinkId>
 800e4ae:	4601      	mov	r1, r0
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	2071      	movs	r0, #113	; 0x71
 800e4b6:	f004 f821 	bl	80124fc <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800e4ba:	e006      	b.n	800e4ca <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	60fb      	str	r3, [r7, #12]
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2b07      	cmp	r3, #7
 800e4c6:	d9dd      	bls.n	800e484 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e4c8:	bf00      	nop
 800e4ca:	bf00      	nop
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	20003144 	.word	0x20003144

0800e4d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	60fb      	str	r3, [r7, #12]
 800e4e4:	e016      	b.n	800e514 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e4e6:	4a10      	ldr	r2, [pc, #64]	; (800e528 <vQueueUnregisterQueue+0x50>)
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	00db      	lsls	r3, r3, #3
 800e4ec:	4413      	add	r3, r2
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d10b      	bne.n	800e50e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e4f6:	4a0c      	ldr	r2, [pc, #48]	; (800e528 <vQueueUnregisterQueue+0x50>)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e500:	4a09      	ldr	r2, [pc, #36]	; (800e528 <vQueueUnregisterQueue+0x50>)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	00db      	lsls	r3, r3, #3
 800e506:	4413      	add	r3, r2
 800e508:	2200      	movs	r2, #0
 800e50a:	605a      	str	r2, [r3, #4]
				break;
 800e50c:	e006      	b.n	800e51c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	3301      	adds	r3, #1
 800e512:	60fb      	str	r3, [r7, #12]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2b07      	cmp	r3, #7
 800e518:	d9e5      	bls.n	800e4e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e51a:	bf00      	nop
 800e51c:	bf00      	nop
 800e51e:	3714      	adds	r7, #20
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	20003144 	.word	0x20003144

0800e52c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b086      	sub	sp, #24
 800e530:	af00      	add	r7, sp, #0
 800e532:	60f8      	str	r0, [r7, #12]
 800e534:	60b9      	str	r1, [r7, #8]
 800e536:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e53c:	f001 fe72 	bl	8010224 <vPortEnterCritical>
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e546:	b25b      	sxtb	r3, r3
 800e548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e54c:	d103      	bne.n	800e556 <vQueueWaitForMessageRestricted+0x2a>
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	2200      	movs	r2, #0
 800e552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e55c:	b25b      	sxtb	r3, r3
 800e55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e562:	d103      	bne.n	800e56c <vQueueWaitForMessageRestricted+0x40>
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	2200      	movs	r2, #0
 800e568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e56c:	f001 fe8a 	bl	8010284 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e574:	2b00      	cmp	r3, #0
 800e576:	d106      	bne.n	800e586 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	3324      	adds	r3, #36	; 0x24
 800e57c:	687a      	ldr	r2, [r7, #4]
 800e57e:	68b9      	ldr	r1, [r7, #8]
 800e580:	4618      	mov	r0, r3
 800e582:	f000 fd1f 	bl	800efc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e586:	6978      	ldr	r0, [r7, #20]
 800e588:	f7ff fef4 	bl	800e374 <prvUnlockQueue>
	}
 800e58c:	bf00      	nop
 800e58e:	3718      	adds	r7, #24
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e594:	b580      	push	{r7, lr}
 800e596:	b08e      	sub	sp, #56	; 0x38
 800e598:	af04      	add	r7, sp, #16
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	607a      	str	r2, [r7, #4]
 800e5a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d10a      	bne.n	800e5be <xTaskCreateStatic+0x2a>
	__asm volatile
 800e5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ac:	f383 8811 	msr	BASEPRI, r3
 800e5b0:	f3bf 8f6f 	isb	sy
 800e5b4:	f3bf 8f4f 	dsb	sy
 800e5b8:	623b      	str	r3, [r7, #32]
}
 800e5ba:	bf00      	nop
 800e5bc:	e7fe      	b.n	800e5bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d10a      	bne.n	800e5da <xTaskCreateStatic+0x46>
	__asm volatile
 800e5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c8:	f383 8811 	msr	BASEPRI, r3
 800e5cc:	f3bf 8f6f 	isb	sy
 800e5d0:	f3bf 8f4f 	dsb	sy
 800e5d4:	61fb      	str	r3, [r7, #28]
}
 800e5d6:	bf00      	nop
 800e5d8:	e7fe      	b.n	800e5d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e5da:	23b0      	movs	r3, #176	; 0xb0
 800e5dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	2bb0      	cmp	r3, #176	; 0xb0
 800e5e2:	d00a      	beq.n	800e5fa <xTaskCreateStatic+0x66>
	__asm volatile
 800e5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e8:	f383 8811 	msr	BASEPRI, r3
 800e5ec:	f3bf 8f6f 	isb	sy
 800e5f0:	f3bf 8f4f 	dsb	sy
 800e5f4:	61bb      	str	r3, [r7, #24]
}
 800e5f6:	bf00      	nop
 800e5f8:	e7fe      	b.n	800e5f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e5fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d01e      	beq.n	800e640 <xTaskCreateStatic+0xac>
 800e602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e604:	2b00      	cmp	r3, #0
 800e606:	d01b      	beq.n	800e640 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e610:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e614:	2202      	movs	r2, #2
 800e616:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e61a:	2300      	movs	r3, #0
 800e61c:	9303      	str	r3, [sp, #12]
 800e61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e620:	9302      	str	r3, [sp, #8]
 800e622:	f107 0314 	add.w	r3, r7, #20
 800e626:	9301      	str	r3, [sp, #4]
 800e628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62a:	9300      	str	r3, [sp, #0]
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	687a      	ldr	r2, [r7, #4]
 800e630:	68b9      	ldr	r1, [r7, #8]
 800e632:	68f8      	ldr	r0, [r7, #12]
 800e634:	f000 f850 	bl	800e6d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e63a:	f000 f8f9 	bl	800e830 <prvAddNewTaskToReadyList>
 800e63e:	e001      	b.n	800e644 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e640:	2300      	movs	r3, #0
 800e642:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e644:	697b      	ldr	r3, [r7, #20]
	}
 800e646:	4618      	mov	r0, r3
 800e648:	3728      	adds	r7, #40	; 0x28
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e64e:	b580      	push	{r7, lr}
 800e650:	b08c      	sub	sp, #48	; 0x30
 800e652:	af04      	add	r7, sp, #16
 800e654:	60f8      	str	r0, [r7, #12]
 800e656:	60b9      	str	r1, [r7, #8]
 800e658:	603b      	str	r3, [r7, #0]
 800e65a:	4613      	mov	r3, r2
 800e65c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e65e:	88fb      	ldrh	r3, [r7, #6]
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	4618      	mov	r0, r3
 800e664:	f001 ff60 	bl	8010528 <pvPortMalloc>
 800e668:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00e      	beq.n	800e68e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e670:	20b0      	movs	r0, #176	; 0xb0
 800e672:	f001 ff59 	bl	8010528 <pvPortMalloc>
 800e676:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d003      	beq.n	800e686 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	697a      	ldr	r2, [r7, #20]
 800e682:	631a      	str	r2, [r3, #48]	; 0x30
 800e684:	e005      	b.n	800e692 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e686:	6978      	ldr	r0, [r7, #20]
 800e688:	f002 f81a 	bl	80106c0 <vPortFree>
 800e68c:	e001      	b.n	800e692 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e68e:	2300      	movs	r3, #0
 800e690:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d017      	beq.n	800e6c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	2200      	movs	r2, #0
 800e69c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e6a0:	88fa      	ldrh	r2, [r7, #6]
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	9303      	str	r3, [sp, #12]
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	9302      	str	r3, [sp, #8]
 800e6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ac:	9301      	str	r3, [sp, #4]
 800e6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b0:	9300      	str	r3, [sp, #0]
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	68b9      	ldr	r1, [r7, #8]
 800e6b6:	68f8      	ldr	r0, [r7, #12]
 800e6b8:	f000 f80e 	bl	800e6d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e6bc:	69f8      	ldr	r0, [r7, #28]
 800e6be:	f000 f8b7 	bl	800e830 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	61bb      	str	r3, [r7, #24]
 800e6c6:	e002      	b.n	800e6ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e6ce:	69bb      	ldr	r3, [r7, #24]
	}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3720      	adds	r7, #32
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b088      	sub	sp, #32
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	607a      	str	r2, [r7, #4]
 800e6e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	21a5      	movs	r1, #165	; 0xa5
 800e6f2:	f005 fc2e 	bl	8013f52 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e700:	3b01      	subs	r3, #1
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4413      	add	r3, r2
 800e706:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	f023 0307 	bic.w	r3, r3, #7
 800e70e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	f003 0307 	and.w	r3, r3, #7
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00a      	beq.n	800e730 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e71e:	f383 8811 	msr	BASEPRI, r3
 800e722:	f3bf 8f6f 	isb	sy
 800e726:	f3bf 8f4f 	dsb	sy
 800e72a:	617b      	str	r3, [r7, #20]
}
 800e72c:	bf00      	nop
 800e72e:	e7fe      	b.n	800e72e <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800e730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e732:	69ba      	ldr	r2, [r7, #24]
 800e734:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d01f      	beq.n	800e77c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e73c:	2300      	movs	r3, #0
 800e73e:	61fb      	str	r3, [r7, #28]
 800e740:	e012      	b.n	800e768 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e742:	68ba      	ldr	r2, [r7, #8]
 800e744:	69fb      	ldr	r3, [r7, #28]
 800e746:	4413      	add	r3, r2
 800e748:	7819      	ldrb	r1, [r3, #0]
 800e74a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	4413      	add	r3, r2
 800e750:	3334      	adds	r3, #52	; 0x34
 800e752:	460a      	mov	r2, r1
 800e754:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	69fb      	ldr	r3, [r7, #28]
 800e75a:	4413      	add	r3, r2
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d006      	beq.n	800e770 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	3301      	adds	r3, #1
 800e766:	61fb      	str	r3, [r7, #28]
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	2b0f      	cmp	r3, #15
 800e76c:	d9e9      	bls.n	800e742 <prvInitialiseNewTask+0x6a>
 800e76e:	e000      	b.n	800e772 <prvInitialiseNewTask+0x9a>
			{
				break;
 800e770:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e774:	2200      	movs	r2, #0
 800e776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e77a:	e003      	b.n	800e784 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77e:	2200      	movs	r2, #0
 800e780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e786:	2b37      	cmp	r3, #55	; 0x37
 800e788:	d901      	bls.n	800e78e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e78a:	2337      	movs	r3, #55	; 0x37
 800e78c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e792:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e798:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800e79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79c:	2200      	movs	r2, #0
 800e79e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7fe fd3d 	bl	800d224 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ac:	3318      	adds	r3, #24
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fe fd38 	bl	800d224 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7c8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e2:	335c      	adds	r3, #92	; 0x5c
 800e7e4:	224c      	movs	r2, #76	; 0x4c
 800e7e6:	2100      	movs	r1, #0
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f005 fbb2 	bl	8013f52 <memset>
 800e7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f0:	4a0c      	ldr	r2, [pc, #48]	; (800e824 <prvInitialiseNewTask+0x14c>)
 800e7f2:	661a      	str	r2, [r3, #96]	; 0x60
 800e7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f6:	4a0c      	ldr	r2, [pc, #48]	; (800e828 <prvInitialiseNewTask+0x150>)
 800e7f8:	665a      	str	r2, [r3, #100]	; 0x64
 800e7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fc:	4a0b      	ldr	r2, [pc, #44]	; (800e82c <prvInitialiseNewTask+0x154>)
 800e7fe:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e800:	683a      	ldr	r2, [r7, #0]
 800e802:	68f9      	ldr	r1, [r7, #12]
 800e804:	69b8      	ldr	r0, [r7, #24]
 800e806:	f001 fbdf 	bl	800ffc8 <pxPortInitialiseStack>
 800e80a:	4602      	mov	r2, r0
 800e80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	2b00      	cmp	r3, #0
 800e814:	d002      	beq.n	800e81c <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e81a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e81c:	bf00      	nop
 800e81e:	3720      	adds	r7, #32
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}
 800e824:	20009e60 	.word	0x20009e60
 800e828:	20009ec8 	.word	0x20009ec8
 800e82c:	20009f30 	.word	0x20009f30

0800e830 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e830:	b5b0      	push	{r4, r5, r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af02      	add	r7, sp, #8
 800e836:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e838:	f001 fcf4 	bl	8010224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e83c:	4b3c      	ldr	r3, [pc, #240]	; (800e930 <prvAddNewTaskToReadyList+0x100>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	3301      	adds	r3, #1
 800e842:	4a3b      	ldr	r2, [pc, #236]	; (800e930 <prvAddNewTaskToReadyList+0x100>)
 800e844:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e846:	4b3b      	ldr	r3, [pc, #236]	; (800e934 <prvAddNewTaskToReadyList+0x104>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d109      	bne.n	800e862 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e84e:	4a39      	ldr	r2, [pc, #228]	; (800e934 <prvAddNewTaskToReadyList+0x104>)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e854:	4b36      	ldr	r3, [pc, #216]	; (800e930 <prvAddNewTaskToReadyList+0x100>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2b01      	cmp	r3, #1
 800e85a:	d110      	bne.n	800e87e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e85c:	f000 fd0e 	bl	800f27c <prvInitialiseTaskLists>
 800e860:	e00d      	b.n	800e87e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e862:	4b35      	ldr	r3, [pc, #212]	; (800e938 <prvAddNewTaskToReadyList+0x108>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d109      	bne.n	800e87e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e86a:	4b32      	ldr	r3, [pc, #200]	; (800e934 <prvAddNewTaskToReadyList+0x104>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e874:	429a      	cmp	r2, r3
 800e876:	d802      	bhi.n	800e87e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e878:	4a2e      	ldr	r2, [pc, #184]	; (800e934 <prvAddNewTaskToReadyList+0x104>)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e87e:	4b2f      	ldr	r3, [pc, #188]	; (800e93c <prvAddNewTaskToReadyList+0x10c>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	3301      	adds	r3, #1
 800e884:	4a2d      	ldr	r2, [pc, #180]	; (800e93c <prvAddNewTaskToReadyList+0x10c>)
 800e886:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e888:	4b2c      	ldr	r3, [pc, #176]	; (800e93c <prvAddNewTaskToReadyList+0x10c>)
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d016      	beq.n	800e8c4 <prvAddNewTaskToReadyList+0x94>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	4618      	mov	r0, r3
 800e89a:	f004 faef 	bl	8012e7c <SEGGER_SYSVIEW_OnTaskCreate>
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ae:	461d      	mov	r5, r3
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	461c      	mov	r4, r3
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ba:	1ae3      	subs	r3, r4, r3
 800e8bc:	9300      	str	r3, [sp, #0]
 800e8be:	462b      	mov	r3, r5
 800e8c0:	f003 f874 	bl	80119ac <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f004 fb5c 	bl	8012f84 <SEGGER_SYSVIEW_OnTaskStartReady>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8d0:	4b1b      	ldr	r3, [pc, #108]	; (800e940 <prvAddNewTaskToReadyList+0x110>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d903      	bls.n	800e8e0 <prvAddNewTaskToReadyList+0xb0>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8dc:	4a18      	ldr	r2, [pc, #96]	; (800e940 <prvAddNewTaskToReadyList+0x110>)
 800e8de:	6013      	str	r3, [r2, #0]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8e4:	4613      	mov	r3, r2
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	4413      	add	r3, r2
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	4a15      	ldr	r2, [pc, #84]	; (800e944 <prvAddNewTaskToReadyList+0x114>)
 800e8ee:	441a      	add	r2, r3
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	3304      	adds	r3, #4
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	4610      	mov	r0, r2
 800e8f8:	f7fe fca1 	bl	800d23e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e8fc:	f001 fcc2 	bl	8010284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e900:	4b0d      	ldr	r3, [pc, #52]	; (800e938 <prvAddNewTaskToReadyList+0x108>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d00e      	beq.n	800e926 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e908:	4b0a      	ldr	r3, [pc, #40]	; (800e934 <prvAddNewTaskToReadyList+0x104>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e912:	429a      	cmp	r2, r3
 800e914:	d207      	bcs.n	800e926 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e916:	4b0c      	ldr	r3, [pc, #48]	; (800e948 <prvAddNewTaskToReadyList+0x118>)
 800e918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e91c:	601a      	str	r2, [r3, #0]
 800e91e:	f3bf 8f4f 	dsb	sy
 800e922:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e926:	bf00      	nop
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bdb0      	pop	{r4, r5, r7, pc}
 800e92e:	bf00      	nop
 800e930:	20003658 	.word	0x20003658
 800e934:	20003184 	.word	0x20003184
 800e938:	20003664 	.word	0x20003664
 800e93c:	20003674 	.word	0x20003674
 800e940:	20003660 	.word	0x20003660
 800e944:	20003188 	.word	0x20003188
 800e948:	e000ed04 	.word	0xe000ed04

0800e94c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e954:	2300      	movs	r3, #0
 800e956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d01b      	beq.n	800e996 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e95e:	4b15      	ldr	r3, [pc, #84]	; (800e9b4 <vTaskDelay+0x68>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d00a      	beq.n	800e97c <vTaskDelay+0x30>
	__asm volatile
 800e966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96a:	f383 8811 	msr	BASEPRI, r3
 800e96e:	f3bf 8f6f 	isb	sy
 800e972:	f3bf 8f4f 	dsb	sy
 800e976:	60bb      	str	r3, [r7, #8]
}
 800e978:	bf00      	nop
 800e97a:	e7fe      	b.n	800e97a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e97c:	f000 f8a2 	bl	800eac4 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800e980:	6879      	ldr	r1, [r7, #4]
 800e982:	2023      	movs	r0, #35	; 0x23
 800e984:	f003 fd7e 	bl	8012484 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e988:	2100      	movs	r1, #0
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 ff0c 	bl	800f7a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e990:	f000 f8de 	bl	800eb50 <xTaskResumeAll>
 800e994:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d107      	bne.n	800e9ac <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 800e99c:	4b06      	ldr	r3, [pc, #24]	; (800e9b8 <vTaskDelay+0x6c>)
 800e99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9a2:	601a      	str	r2, [r3, #0]
 800e9a4:	f3bf 8f4f 	dsb	sy
 800e9a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e9ac:	bf00      	nop
 800e9ae:	3710      	adds	r7, #16
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	20003680 	.word	0x20003680
 800e9b8:	e000ed04 	.word	0xe000ed04

0800e9bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b08a      	sub	sp, #40	; 0x28
 800e9c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e9ca:	463a      	mov	r2, r7
 800e9cc:	1d39      	adds	r1, r7, #4
 800e9ce:	f107 0308 	add.w	r3, r7, #8
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7fe fbd2 	bl	800d17c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e9d8:	6839      	ldr	r1, [r7, #0]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	68ba      	ldr	r2, [r7, #8]
 800e9de:	9202      	str	r2, [sp, #8]
 800e9e0:	9301      	str	r3, [sp, #4]
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	460a      	mov	r2, r1
 800e9ea:	492e      	ldr	r1, [pc, #184]	; (800eaa4 <vTaskStartScheduler+0xe8>)
 800e9ec:	482e      	ldr	r0, [pc, #184]	; (800eaa8 <vTaskStartScheduler+0xec>)
 800e9ee:	f7ff fdd1 	bl	800e594 <xTaskCreateStatic>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	4a2d      	ldr	r2, [pc, #180]	; (800eaac <vTaskStartScheduler+0xf0>)
 800e9f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e9f8:	4b2c      	ldr	r3, [pc, #176]	; (800eaac <vTaskStartScheduler+0xf0>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d002      	beq.n	800ea06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ea00:	2301      	movs	r3, #1
 800ea02:	617b      	str	r3, [r7, #20]
 800ea04:	e001      	b.n	800ea0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ea06:	2300      	movs	r3, #0
 800ea08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d102      	bne.n	800ea16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ea10:	f000 ff30 	bl	800f874 <xTimerCreateTimerTask>
 800ea14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d130      	bne.n	800ea7e <vTaskStartScheduler+0xc2>
	__asm volatile
 800ea1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea20:	f383 8811 	msr	BASEPRI, r3
 800ea24:	f3bf 8f6f 	isb	sy
 800ea28:	f3bf 8f4f 	dsb	sy
 800ea2c:	613b      	str	r3, [r7, #16]
}
 800ea2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ea30:	4b1f      	ldr	r3, [pc, #124]	; (800eab0 <vTaskStartScheduler+0xf4>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	335c      	adds	r3, #92	; 0x5c
 800ea36:	4a1f      	ldr	r2, [pc, #124]	; (800eab4 <vTaskStartScheduler+0xf8>)
 800ea38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ea3a:	4b1f      	ldr	r3, [pc, #124]	; (800eab8 <vTaskStartScheduler+0xfc>)
 800ea3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ea42:	4b1e      	ldr	r3, [pc, #120]	; (800eabc <vTaskStartScheduler+0x100>)
 800ea44:	2201      	movs	r2, #1
 800ea46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ea48:	4b1d      	ldr	r3, [pc, #116]	; (800eac0 <vTaskStartScheduler+0x104>)
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ea4e:	f7f2 fa49 	bl	8000ee4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 800ea52:	4b17      	ldr	r3, [pc, #92]	; (800eab0 <vTaskStartScheduler+0xf4>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	3334      	adds	r3, #52	; 0x34
 800ea58:	2205      	movs	r2, #5
 800ea5a:	4912      	ldr	r1, [pc, #72]	; (800eaa4 <vTaskStartScheduler+0xe8>)
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f005 fa68 	bl	8013f32 <memcmp>
 800ea62:	4603      	mov	r3, r0
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d005      	beq.n	800ea74 <vTaskStartScheduler+0xb8>
 800ea68:	4b11      	ldr	r3, [pc, #68]	; (800eab0 <vTaskStartScheduler+0xf4>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f004 fa47 	bl	8012f00 <SEGGER_SYSVIEW_OnTaskStartExec>
 800ea72:	e001      	b.n	800ea78 <vTaskStartScheduler+0xbc>
 800ea74:	f004 f9e6 	bl	8012e44 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ea78:	f001 fb32 	bl	80100e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ea7c:	e00e      	b.n	800ea9c <vTaskStartScheduler+0xe0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea84:	d10a      	bne.n	800ea9c <vTaskStartScheduler+0xe0>
	__asm volatile
 800ea86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8a:	f383 8811 	msr	BASEPRI, r3
 800ea8e:	f3bf 8f6f 	isb	sy
 800ea92:	f3bf 8f4f 	dsb	sy
 800ea96:	60fb      	str	r3, [r7, #12]
}
 800ea98:	bf00      	nop
 800ea9a:	e7fe      	b.n	800ea9a <vTaskStartScheduler+0xde>
}
 800ea9c:	bf00      	nop
 800ea9e:	3718      	adds	r7, #24
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	080163cc 	.word	0x080163cc
 800eaa8:	0800f1fd 	.word	0x0800f1fd
 800eaac:	2000367c 	.word	0x2000367c
 800eab0:	20003184 	.word	0x20003184
 800eab4:	20000094 	.word	0x20000094
 800eab8:	20003678 	.word	0x20003678
 800eabc:	20003664 	.word	0x20003664
 800eac0:	2000365c 	.word	0x2000365c

0800eac4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eac4:	b480      	push	{r7}
 800eac6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eac8:	4b04      	ldr	r3, [pc, #16]	; (800eadc <vTaskSuspendAll+0x18>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	3301      	adds	r3, #1
 800eace:	4a03      	ldr	r2, [pc, #12]	; (800eadc <vTaskSuspendAll+0x18>)
 800ead0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ead2:	bf00      	nop
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr
 800eadc:	20003680 	.word	0x20003680

0800eae0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800eae6:	2300      	movs	r3, #0
 800eae8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800eaea:	4b14      	ldr	r3, [pc, #80]	; (800eb3c <prvGetExpectedIdleTime+0x5c>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d001      	beq.n	800eaf6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800eaf6:	4b12      	ldr	r3, [pc, #72]	; (800eb40 <prvGetExpectedIdleTime+0x60>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d002      	beq.n	800eb06 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800eb00:	2300      	movs	r3, #0
 800eb02:	607b      	str	r3, [r7, #4]
 800eb04:	e012      	b.n	800eb2c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800eb06:	4b0f      	ldr	r3, [pc, #60]	; (800eb44 <prvGetExpectedIdleTime+0x64>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d902      	bls.n	800eb14 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	607b      	str	r3, [r7, #4]
 800eb12:	e00b      	b.n	800eb2c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d002      	beq.n	800eb20 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	607b      	str	r3, [r7, #4]
 800eb1e:	e005      	b.n	800eb2c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800eb20:	4b09      	ldr	r3, [pc, #36]	; (800eb48 <prvGetExpectedIdleTime+0x68>)
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	4b09      	ldr	r3, [pc, #36]	; (800eb4c <prvGetExpectedIdleTime+0x6c>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	1ad3      	subs	r3, r2, r3
 800eb2a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800eb2c:	687b      	ldr	r3, [r7, #4]
	}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	370c      	adds	r7, #12
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	20003660 	.word	0x20003660
 800eb40:	20003184 	.word	0x20003184
 800eb44:	20003188 	.word	0x20003188
 800eb48:	20003678 	.word	0x20003678
 800eb4c:	2000365c 	.word	0x2000365c

0800eb50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800eb56:	2300      	movs	r3, #0
 800eb58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800eb5e:	4b44      	ldr	r3, [pc, #272]	; (800ec70 <xTaskResumeAll+0x120>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d10a      	bne.n	800eb7c <xTaskResumeAll+0x2c>
	__asm volatile
 800eb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb6a:	f383 8811 	msr	BASEPRI, r3
 800eb6e:	f3bf 8f6f 	isb	sy
 800eb72:	f3bf 8f4f 	dsb	sy
 800eb76:	603b      	str	r3, [r7, #0]
}
 800eb78:	bf00      	nop
 800eb7a:	e7fe      	b.n	800eb7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800eb7c:	f001 fb52 	bl	8010224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eb80:	4b3b      	ldr	r3, [pc, #236]	; (800ec70 <xTaskResumeAll+0x120>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	3b01      	subs	r3, #1
 800eb86:	4a3a      	ldr	r2, [pc, #232]	; (800ec70 <xTaskResumeAll+0x120>)
 800eb88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb8a:	4b39      	ldr	r3, [pc, #228]	; (800ec70 <xTaskResumeAll+0x120>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d166      	bne.n	800ec60 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eb92:	4b38      	ldr	r3, [pc, #224]	; (800ec74 <xTaskResumeAll+0x124>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d062      	beq.n	800ec60 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb9a:	e033      	b.n	800ec04 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb9c:	4b36      	ldr	r3, [pc, #216]	; (800ec78 <xTaskResumeAll+0x128>)
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	68db      	ldr	r3, [r3, #12]
 800eba2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	3318      	adds	r3, #24
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7fe fba5 	bl	800d2f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	3304      	adds	r3, #4
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7fe fba0 	bl	800d2f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f004 f9e2 	bl	8012f84 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc4:	4b2d      	ldr	r3, [pc, #180]	; (800ec7c <xTaskResumeAll+0x12c>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d903      	bls.n	800ebd4 <xTaskResumeAll+0x84>
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd0:	4a2a      	ldr	r2, [pc, #168]	; (800ec7c <xTaskResumeAll+0x12c>)
 800ebd2:	6013      	str	r3, [r2, #0]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebd8:	4613      	mov	r3, r2
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	4413      	add	r3, r2
 800ebde:	009b      	lsls	r3, r3, #2
 800ebe0:	4a27      	ldr	r2, [pc, #156]	; (800ec80 <xTaskResumeAll+0x130>)
 800ebe2:	441a      	add	r2, r3
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	3304      	adds	r3, #4
 800ebe8:	4619      	mov	r1, r3
 800ebea:	4610      	mov	r0, r2
 800ebec:	f7fe fb27 	bl	800d23e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebf4:	4b23      	ldr	r3, [pc, #140]	; (800ec84 <xTaskResumeAll+0x134>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d302      	bcc.n	800ec04 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 800ebfe:	4b22      	ldr	r3, [pc, #136]	; (800ec88 <xTaskResumeAll+0x138>)
 800ec00:	2201      	movs	r2, #1
 800ec02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ec04:	4b1c      	ldr	r3, [pc, #112]	; (800ec78 <xTaskResumeAll+0x128>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1c7      	bne.n	800eb9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d001      	beq.n	800ec16 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ec12:	f000 fc0d 	bl	800f430 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ec16:	4b1d      	ldr	r3, [pc, #116]	; (800ec8c <xTaskResumeAll+0x13c>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d010      	beq.n	800ec44 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ec22:	f000 f859 	bl	800ecd8 <xTaskIncrementTick>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d002      	beq.n	800ec32 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 800ec2c:	4b16      	ldr	r3, [pc, #88]	; (800ec88 <xTaskResumeAll+0x138>)
 800ec2e:	2201      	movs	r2, #1
 800ec30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	3b01      	subs	r3, #1
 800ec36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d1f1      	bne.n	800ec22 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 800ec3e:	4b13      	ldr	r3, [pc, #76]	; (800ec8c <xTaskResumeAll+0x13c>)
 800ec40:	2200      	movs	r2, #0
 800ec42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ec44:	4b10      	ldr	r3, [pc, #64]	; (800ec88 <xTaskResumeAll+0x138>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d009      	beq.n	800ec60 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ec50:	4b0f      	ldr	r3, [pc, #60]	; (800ec90 <xTaskResumeAll+0x140>)
 800ec52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec56:	601a      	str	r2, [r3, #0]
 800ec58:	f3bf 8f4f 	dsb	sy
 800ec5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ec60:	f001 fb10 	bl	8010284 <vPortExitCritical>

	return xAlreadyYielded;
 800ec64:	68bb      	ldr	r3, [r7, #8]
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3710      	adds	r7, #16
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	20003680 	.word	0x20003680
 800ec74:	20003658 	.word	0x20003658
 800ec78:	20003618 	.word	0x20003618
 800ec7c:	20003660 	.word	0x20003660
 800ec80:	20003188 	.word	0x20003188
 800ec84:	20003184 	.word	0x20003184
 800ec88:	2000366c 	.word	0x2000366c
 800ec8c:	20003668 	.word	0x20003668
 800ec90:	e000ed04 	.word	0xe000ed04

0800ec94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ec9a:	4b05      	ldr	r3, [pc, #20]	; (800ecb0 <xTaskGetTickCount+0x1c>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eca0:	687b      	ldr	r3, [r7, #4]
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	370c      	adds	r7, #12
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop
 800ecb0:	2000365c 	.word	0x2000365c

0800ecb4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ecba:	f001 fb9d 	bl	80103f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ecc2:	4b04      	ldr	r3, [pc, #16]	; (800ecd4 <xTaskGetTickCountFromISR+0x20>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ecc8:	683b      	ldr	r3, [r7, #0]
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	2000365c 	.word	0x2000365c

0800ecd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b086      	sub	sp, #24
 800ecdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ecde:	2300      	movs	r3, #0
 800ece0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ece2:	4b51      	ldr	r3, [pc, #324]	; (800ee28 <xTaskIncrementTick+0x150>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	f040 8093 	bne.w	800ee12 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ecec:	4b4f      	ldr	r3, [pc, #316]	; (800ee2c <xTaskIncrementTick+0x154>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ecf4:	4a4d      	ldr	r2, [pc, #308]	; (800ee2c <xTaskIncrementTick+0x154>)
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d120      	bne.n	800ed42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ed00:	4b4b      	ldr	r3, [pc, #300]	; (800ee30 <xTaskIncrementTick+0x158>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00a      	beq.n	800ed20 <xTaskIncrementTick+0x48>
	__asm volatile
 800ed0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0e:	f383 8811 	msr	BASEPRI, r3
 800ed12:	f3bf 8f6f 	isb	sy
 800ed16:	f3bf 8f4f 	dsb	sy
 800ed1a:	603b      	str	r3, [r7, #0]
}
 800ed1c:	bf00      	nop
 800ed1e:	e7fe      	b.n	800ed1e <xTaskIncrementTick+0x46>
 800ed20:	4b43      	ldr	r3, [pc, #268]	; (800ee30 <xTaskIncrementTick+0x158>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	60fb      	str	r3, [r7, #12]
 800ed26:	4b43      	ldr	r3, [pc, #268]	; (800ee34 <xTaskIncrementTick+0x15c>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4a41      	ldr	r2, [pc, #260]	; (800ee30 <xTaskIncrementTick+0x158>)
 800ed2c:	6013      	str	r3, [r2, #0]
 800ed2e:	4a41      	ldr	r2, [pc, #260]	; (800ee34 <xTaskIncrementTick+0x15c>)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6013      	str	r3, [r2, #0]
 800ed34:	4b40      	ldr	r3, [pc, #256]	; (800ee38 <xTaskIncrementTick+0x160>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	3301      	adds	r3, #1
 800ed3a:	4a3f      	ldr	r2, [pc, #252]	; (800ee38 <xTaskIncrementTick+0x160>)
 800ed3c:	6013      	str	r3, [r2, #0]
 800ed3e:	f000 fb77 	bl	800f430 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ed42:	4b3e      	ldr	r3, [pc, #248]	; (800ee3c <xTaskIncrementTick+0x164>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	693a      	ldr	r2, [r7, #16]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d34d      	bcc.n	800ede8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed4c:	4b38      	ldr	r3, [pc, #224]	; (800ee30 <xTaskIncrementTick+0x158>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d104      	bne.n	800ed60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed56:	4b39      	ldr	r3, [pc, #228]	; (800ee3c <xTaskIncrementTick+0x164>)
 800ed58:	f04f 32ff 	mov.w	r2, #4294967295
 800ed5c:	601a      	str	r2, [r3, #0]
					break;
 800ed5e:	e043      	b.n	800ede8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed60:	4b33      	ldr	r3, [pc, #204]	; (800ee30 <xTaskIncrementTick+0x158>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	68db      	ldr	r3, [r3, #12]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ed70:	693a      	ldr	r2, [r7, #16]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d203      	bcs.n	800ed80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ed78:	4a30      	ldr	r2, [pc, #192]	; (800ee3c <xTaskIncrementTick+0x164>)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ed7e:	e033      	b.n	800ede8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	3304      	adds	r3, #4
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7fe fab7 	bl	800d2f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d004      	beq.n	800ed9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	3318      	adds	r3, #24
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fe faae 	bl	800d2f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f004 f8f0 	bl	8012f84 <SEGGER_SYSVIEW_OnTaskStartReady>
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eda8:	4b25      	ldr	r3, [pc, #148]	; (800ee40 <xTaskIncrementTick+0x168>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	429a      	cmp	r2, r3
 800edae:	d903      	bls.n	800edb8 <xTaskIncrementTick+0xe0>
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edb4:	4a22      	ldr	r2, [pc, #136]	; (800ee40 <xTaskIncrementTick+0x168>)
 800edb6:	6013      	str	r3, [r2, #0]
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edbc:	4613      	mov	r3, r2
 800edbe:	009b      	lsls	r3, r3, #2
 800edc0:	4413      	add	r3, r2
 800edc2:	009b      	lsls	r3, r3, #2
 800edc4:	4a1f      	ldr	r2, [pc, #124]	; (800ee44 <xTaskIncrementTick+0x16c>)
 800edc6:	441a      	add	r2, r3
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	3304      	adds	r3, #4
 800edcc:	4619      	mov	r1, r3
 800edce:	4610      	mov	r0, r2
 800edd0:	f7fe fa35 	bl	800d23e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edd8:	4b1b      	ldr	r3, [pc, #108]	; (800ee48 <xTaskIncrementTick+0x170>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edde:	429a      	cmp	r2, r3
 800ede0:	d3b4      	bcc.n	800ed4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ede2:	2301      	movs	r3, #1
 800ede4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ede6:	e7b1      	b.n	800ed4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ede8:	4b17      	ldr	r3, [pc, #92]	; (800ee48 <xTaskIncrementTick+0x170>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edee:	4915      	ldr	r1, [pc, #84]	; (800ee44 <xTaskIncrementTick+0x16c>)
 800edf0:	4613      	mov	r3, r2
 800edf2:	009b      	lsls	r3, r3, #2
 800edf4:	4413      	add	r3, r2
 800edf6:	009b      	lsls	r3, r3, #2
 800edf8:	440b      	add	r3, r1
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d901      	bls.n	800ee04 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800ee00:	2301      	movs	r3, #1
 800ee02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ee04:	4b11      	ldr	r3, [pc, #68]	; (800ee4c <xTaskIncrementTick+0x174>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d007      	beq.n	800ee1c <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	617b      	str	r3, [r7, #20]
 800ee10:	e004      	b.n	800ee1c <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ee12:	4b0f      	ldr	r3, [pc, #60]	; (800ee50 <xTaskIncrementTick+0x178>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	3301      	adds	r3, #1
 800ee18:	4a0d      	ldr	r2, [pc, #52]	; (800ee50 <xTaskIncrementTick+0x178>)
 800ee1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ee1c:	697b      	ldr	r3, [r7, #20]
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3718      	adds	r7, #24
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	20003680 	.word	0x20003680
 800ee2c:	2000365c 	.word	0x2000365c
 800ee30:	20003610 	.word	0x20003610
 800ee34:	20003614 	.word	0x20003614
 800ee38:	20003670 	.word	0x20003670
 800ee3c:	20003678 	.word	0x20003678
 800ee40:	20003660 	.word	0x20003660
 800ee44:	20003188 	.word	0x20003188
 800ee48:	20003184 	.word	0x20003184
 800ee4c:	2000366c 	.word	0x2000366c
 800ee50:	20003668 	.word	0x20003668

0800ee54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ee5a:	4b3f      	ldr	r3, [pc, #252]	; (800ef58 <vTaskSwitchContext+0x104>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d003      	beq.n	800ee6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ee62:	4b3e      	ldr	r3, [pc, #248]	; (800ef5c <vTaskSwitchContext+0x108>)
 800ee64:	2201      	movs	r2, #1
 800ee66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ee68:	e072      	b.n	800ef50 <vTaskSwitchContext+0xfc>
		xYieldPending = pdFALSE;
 800ee6a:	4b3c      	ldr	r3, [pc, #240]	; (800ef5c <vTaskSwitchContext+0x108>)
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ee70:	f7f2 f842 	bl	8000ef8 <getRunTimeCounterValue>
 800ee74:	4603      	mov	r3, r0
 800ee76:	4a3a      	ldr	r2, [pc, #232]	; (800ef60 <vTaskSwitchContext+0x10c>)
 800ee78:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ee7a:	4b39      	ldr	r3, [pc, #228]	; (800ef60 <vTaskSwitchContext+0x10c>)
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	4b39      	ldr	r3, [pc, #228]	; (800ef64 <vTaskSwitchContext+0x110>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d909      	bls.n	800ee9a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ee86:	4b38      	ldr	r3, [pc, #224]	; (800ef68 <vTaskSwitchContext+0x114>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800ee8c:	4a34      	ldr	r2, [pc, #208]	; (800ef60 <vTaskSwitchContext+0x10c>)
 800ee8e:	6810      	ldr	r0, [r2, #0]
 800ee90:	4a34      	ldr	r2, [pc, #208]	; (800ef64 <vTaskSwitchContext+0x110>)
 800ee92:	6812      	ldr	r2, [r2, #0]
 800ee94:	1a82      	subs	r2, r0, r2
 800ee96:	440a      	add	r2, r1
 800ee98:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800ee9a:	4b31      	ldr	r3, [pc, #196]	; (800ef60 <vTaskSwitchContext+0x10c>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a31      	ldr	r2, [pc, #196]	; (800ef64 <vTaskSwitchContext+0x110>)
 800eea0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eea2:	4b32      	ldr	r3, [pc, #200]	; (800ef6c <vTaskSwitchContext+0x118>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	60fb      	str	r3, [r7, #12]
 800eea8:	e010      	b.n	800eecc <vTaskSwitchContext+0x78>
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d10a      	bne.n	800eec6 <vTaskSwitchContext+0x72>
	__asm volatile
 800eeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb4:	f383 8811 	msr	BASEPRI, r3
 800eeb8:	f3bf 8f6f 	isb	sy
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	607b      	str	r3, [r7, #4]
}
 800eec2:	bf00      	nop
 800eec4:	e7fe      	b.n	800eec4 <vTaskSwitchContext+0x70>
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	3b01      	subs	r3, #1
 800eeca:	60fb      	str	r3, [r7, #12]
 800eecc:	4928      	ldr	r1, [pc, #160]	; (800ef70 <vTaskSwitchContext+0x11c>)
 800eece:	68fa      	ldr	r2, [r7, #12]
 800eed0:	4613      	mov	r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	4413      	add	r3, r2
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	440b      	add	r3, r1
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d0e4      	beq.n	800eeaa <vTaskSwitchContext+0x56>
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	4613      	mov	r3, r2
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	4413      	add	r3, r2
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	4a21      	ldr	r2, [pc, #132]	; (800ef70 <vTaskSwitchContext+0x11c>)
 800eeec:	4413      	add	r3, r2
 800eeee:	60bb      	str	r3, [r7, #8]
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	685a      	ldr	r2, [r3, #4]
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	605a      	str	r2, [r3, #4]
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	685a      	ldr	r2, [r3, #4]
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	3308      	adds	r3, #8
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d104      	bne.n	800ef10 <vTaskSwitchContext+0xbc>
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	685a      	ldr	r2, [r3, #4]
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	605a      	str	r2, [r3, #4]
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	4a14      	ldr	r2, [pc, #80]	; (800ef68 <vTaskSwitchContext+0x114>)
 800ef18:	6013      	str	r3, [r2, #0]
 800ef1a:	4a14      	ldr	r2, [pc, #80]	; (800ef6c <vTaskSwitchContext+0x118>)
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800ef20:	4b11      	ldr	r3, [pc, #68]	; (800ef68 <vTaskSwitchContext+0x114>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	3334      	adds	r3, #52	; 0x34
 800ef26:	2205      	movs	r2, #5
 800ef28:	4912      	ldr	r1, [pc, #72]	; (800ef74 <vTaskSwitchContext+0x120>)
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f005 f801 	bl	8013f32 <memcmp>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d005      	beq.n	800ef42 <vTaskSwitchContext+0xee>
 800ef36:	4b0c      	ldr	r3, [pc, #48]	; (800ef68 <vTaskSwitchContext+0x114>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f003 ffe0 	bl	8012f00 <SEGGER_SYSVIEW_OnTaskStartExec>
 800ef40:	e001      	b.n	800ef46 <vTaskSwitchContext+0xf2>
 800ef42:	f003 ff7f 	bl	8012e44 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ef46:	4b08      	ldr	r3, [pc, #32]	; (800ef68 <vTaskSwitchContext+0x114>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	335c      	adds	r3, #92	; 0x5c
 800ef4c:	4a0a      	ldr	r2, [pc, #40]	; (800ef78 <vTaskSwitchContext+0x124>)
 800ef4e:	6013      	str	r3, [r2, #0]
}
 800ef50:	bf00      	nop
 800ef52:	3710      	adds	r7, #16
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	20003680 	.word	0x20003680
 800ef5c:	2000366c 	.word	0x2000366c
 800ef60:	20003688 	.word	0x20003688
 800ef64:	20003684 	.word	0x20003684
 800ef68:	20003184 	.word	0x20003184
 800ef6c:	20003660 	.word	0x20003660
 800ef70:	20003188 	.word	0x20003188
 800ef74:	080163cc 	.word	0x080163cc
 800ef78:	20000094 	.word	0x20000094

0800ef7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d10a      	bne.n	800efa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ef8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef90:	f383 8811 	msr	BASEPRI, r3
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	60fb      	str	r3, [r7, #12]
}
 800ef9e:	bf00      	nop
 800efa0:	e7fe      	b.n	800efa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800efa2:	4b07      	ldr	r3, [pc, #28]	; (800efc0 <vTaskPlaceOnEventList+0x44>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	3318      	adds	r3, #24
 800efa8:	4619      	mov	r1, r3
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f7fe f96b 	bl	800d286 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800efb0:	2101      	movs	r1, #1
 800efb2:	6838      	ldr	r0, [r7, #0]
 800efb4:	f000 fbf8 	bl	800f7a8 <prvAddCurrentTaskToDelayedList>
}
 800efb8:	bf00      	nop
 800efba:	3710      	adds	r7, #16
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	20003184 	.word	0x20003184

0800efc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b086      	sub	sp, #24
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d10a      	bne.n	800efec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800efd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efda:	f383 8811 	msr	BASEPRI, r3
 800efde:	f3bf 8f6f 	isb	sy
 800efe2:	f3bf 8f4f 	dsb	sy
 800efe6:	617b      	str	r3, [r7, #20]
}
 800efe8:	bf00      	nop
 800efea:	e7fe      	b.n	800efea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800efec:	4b0b      	ldr	r3, [pc, #44]	; (800f01c <vTaskPlaceOnEventListRestricted+0x58>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	3318      	adds	r3, #24
 800eff2:	4619      	mov	r1, r3
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f7fe f922 	bl	800d23e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d002      	beq.n	800f006 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f000:	f04f 33ff 	mov.w	r3, #4294967295
 800f004:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800f006:	2024      	movs	r0, #36	; 0x24
 800f008:	f003 fa1e 	bl	8012448 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f00c:	6879      	ldr	r1, [r7, #4]
 800f00e:	68b8      	ldr	r0, [r7, #8]
 800f010:	f000 fbca 	bl	800f7a8 <prvAddCurrentTaskToDelayedList>
	}
 800f014:	bf00      	nop
 800f016:	3718      	adds	r7, #24
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}
 800f01c:	20003184 	.word	0x20003184

0800f020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b086      	sub	sp, #24
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	68db      	ldr	r3, [r3, #12]
 800f02c:	68db      	ldr	r3, [r3, #12]
 800f02e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d10a      	bne.n	800f04c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03a:	f383 8811 	msr	BASEPRI, r3
 800f03e:	f3bf 8f6f 	isb	sy
 800f042:	f3bf 8f4f 	dsb	sy
 800f046:	60fb      	str	r3, [r7, #12]
}
 800f048:	bf00      	nop
 800f04a:	e7fe      	b.n	800f04a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	3318      	adds	r3, #24
 800f050:	4618      	mov	r0, r3
 800f052:	f7fe f951 	bl	800d2f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f056:	4b21      	ldr	r3, [pc, #132]	; (800f0dc <xTaskRemoveFromEventList+0xbc>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d123      	bne.n	800f0a6 <xTaskRemoveFromEventList+0x86>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	3304      	adds	r3, #4
 800f062:	4618      	mov	r0, r3
 800f064:	f7fe f948 	bl	800d2f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	4618      	mov	r0, r3
 800f06c:	f003 ff8a 	bl	8012f84 <SEGGER_SYSVIEW_OnTaskStartReady>
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f074:	4b1a      	ldr	r3, [pc, #104]	; (800f0e0 <xTaskRemoveFromEventList+0xc0>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d903      	bls.n	800f084 <xTaskRemoveFromEventList+0x64>
 800f07c:	693b      	ldr	r3, [r7, #16]
 800f07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f080:	4a17      	ldr	r2, [pc, #92]	; (800f0e0 <xTaskRemoveFromEventList+0xc0>)
 800f082:	6013      	str	r3, [r2, #0]
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f088:	4613      	mov	r3, r2
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	4413      	add	r3, r2
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	4a14      	ldr	r2, [pc, #80]	; (800f0e4 <xTaskRemoveFromEventList+0xc4>)
 800f092:	441a      	add	r2, r3
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	3304      	adds	r3, #4
 800f098:	4619      	mov	r1, r3
 800f09a:	4610      	mov	r0, r2
 800f09c:	f7fe f8cf 	bl	800d23e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800f0a0:	f000 f9c6 	bl	800f430 <prvResetNextTaskUnblockTime>
 800f0a4:	e005      	b.n	800f0b2 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	3318      	adds	r3, #24
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	480e      	ldr	r0, [pc, #56]	; (800f0e8 <xTaskRemoveFromEventList+0xc8>)
 800f0ae:	f7fe f8c6 	bl	800d23e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0b6:	4b0d      	ldr	r3, [pc, #52]	; (800f0ec <xTaskRemoveFromEventList+0xcc>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d905      	bls.n	800f0cc <xTaskRemoveFromEventList+0xac>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f0c4:	4b0a      	ldr	r3, [pc, #40]	; (800f0f0 <xTaskRemoveFromEventList+0xd0>)
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	601a      	str	r2, [r3, #0]
 800f0ca:	e001      	b.n	800f0d0 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		xReturn = pdFALSE;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f0d0:	697b      	ldr	r3, [r7, #20]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3718      	adds	r7, #24
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	20003680 	.word	0x20003680
 800f0e0:	20003660 	.word	0x20003660
 800f0e4:	20003188 	.word	0x20003188
 800f0e8:	20003618 	.word	0x20003618
 800f0ec:	20003184 	.word	0x20003184
 800f0f0:	2000366c 	.word	0x2000366c

0800f0f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f0fc:	4b06      	ldr	r3, [pc, #24]	; (800f118 <vTaskInternalSetTimeOutState+0x24>)
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f104:	4b05      	ldr	r3, [pc, #20]	; (800f11c <vTaskInternalSetTimeOutState+0x28>)
 800f106:	681a      	ldr	r2, [r3, #0]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	605a      	str	r2, [r3, #4]
}
 800f10c:	bf00      	nop
 800f10e:	370c      	adds	r7, #12
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr
 800f118:	20003670 	.word	0x20003670
 800f11c:	2000365c 	.word	0x2000365c

0800f120 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b088      	sub	sp, #32
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d10a      	bne.n	800f146 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f134:	f383 8811 	msr	BASEPRI, r3
 800f138:	f3bf 8f6f 	isb	sy
 800f13c:	f3bf 8f4f 	dsb	sy
 800f140:	613b      	str	r3, [r7, #16]
}
 800f142:	bf00      	nop
 800f144:	e7fe      	b.n	800f144 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d10a      	bne.n	800f162 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f150:	f383 8811 	msr	BASEPRI, r3
 800f154:	f3bf 8f6f 	isb	sy
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	60fb      	str	r3, [r7, #12]
}
 800f15e:	bf00      	nop
 800f160:	e7fe      	b.n	800f160 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f162:	f001 f85f 	bl	8010224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f166:	4b1d      	ldr	r3, [pc, #116]	; (800f1dc <xTaskCheckForTimeOut+0xbc>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	69ba      	ldr	r2, [r7, #24]
 800f172:	1ad3      	subs	r3, r2, r3
 800f174:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f17e:	d102      	bne.n	800f186 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f180:	2300      	movs	r3, #0
 800f182:	61fb      	str	r3, [r7, #28]
 800f184:	e023      	b.n	800f1ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	4b15      	ldr	r3, [pc, #84]	; (800f1e0 <xTaskCheckForTimeOut+0xc0>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d007      	beq.n	800f1a2 <xTaskCheckForTimeOut+0x82>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	69ba      	ldr	r2, [r7, #24]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d302      	bcc.n	800f1a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f19c:	2301      	movs	r3, #1
 800f19e:	61fb      	str	r3, [r7, #28]
 800f1a0:	e015      	b.n	800f1ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	697a      	ldr	r2, [r7, #20]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d20b      	bcs.n	800f1c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	1ad2      	subs	r2, r2, r3
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f7ff ff9b 	bl	800f0f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	61fb      	str	r3, [r7, #28]
 800f1c2:	e004      	b.n	800f1ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f1ce:	f001 f859 	bl	8010284 <vPortExitCritical>

	return xReturn;
 800f1d2:	69fb      	ldr	r3, [r7, #28]
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3720      	adds	r7, #32
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}
 800f1dc:	2000365c 	.word	0x2000365c
 800f1e0:	20003670 	.word	0x20003670

0800f1e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f1e8:	4b03      	ldr	r3, [pc, #12]	; (800f1f8 <vTaskMissedYield+0x14>)
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	601a      	str	r2, [r3, #0]
}
 800f1ee:	bf00      	nop
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f6:	4770      	bx	lr
 800f1f8:	2000366c 	.word	0x2000366c

0800f1fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f204:	f000 f87a 	bl	800f2fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f208:	4b18      	ldr	r3, [pc, #96]	; (800f26c <prvIdleTask+0x70>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d907      	bls.n	800f220 <prvIdleTask+0x24>
			{
				taskYIELD();
 800f210:	4b17      	ldr	r3, [pc, #92]	; (800f270 <prvIdleTask+0x74>)
 800f212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f216:	601a      	str	r2, [r3, #0]
 800f218:	f3bf 8f4f 	dsb	sy
 800f21c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800f220:	f7ff fc5e 	bl	800eae0 <prvGetExpectedIdleTime>
 800f224:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d9eb      	bls.n	800f204 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800f22c:	f7ff fc4a 	bl	800eac4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800f230:	4b10      	ldr	r3, [pc, #64]	; (800f274 <prvIdleTask+0x78>)
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	4b10      	ldr	r3, [pc, #64]	; (800f278 <prvIdleTask+0x7c>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d20a      	bcs.n	800f252 <prvIdleTask+0x56>
	__asm volatile
 800f23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f240:	f383 8811 	msr	BASEPRI, r3
 800f244:	f3bf 8f6f 	isb	sy
 800f248:	f3bf 8f4f 	dsb	sy
 800f24c:	60bb      	str	r3, [r7, #8]
}
 800f24e:	bf00      	nop
 800f250:	e7fe      	b.n	800f250 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800f252:	f7ff fc45 	bl	800eae0 <prvGetExpectedIdleTime>
 800f256:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d902      	bls.n	800f264 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f7f1 fe56 	bl	8000f10 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800f264:	f7ff fc74 	bl	800eb50 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800f268:	e7cc      	b.n	800f204 <prvIdleTask+0x8>
 800f26a:	bf00      	nop
 800f26c:	20003188 	.word	0x20003188
 800f270:	e000ed04 	.word	0xe000ed04
 800f274:	20003678 	.word	0x20003678
 800f278:	2000365c 	.word	0x2000365c

0800f27c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f282:	2300      	movs	r3, #0
 800f284:	607b      	str	r3, [r7, #4]
 800f286:	e00c      	b.n	800f2a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f288:	687a      	ldr	r2, [r7, #4]
 800f28a:	4613      	mov	r3, r2
 800f28c:	009b      	lsls	r3, r3, #2
 800f28e:	4413      	add	r3, r2
 800f290:	009b      	lsls	r3, r3, #2
 800f292:	4a12      	ldr	r2, [pc, #72]	; (800f2dc <prvInitialiseTaskLists+0x60>)
 800f294:	4413      	add	r3, r2
 800f296:	4618      	mov	r0, r3
 800f298:	f7fd ffa4 	bl	800d1e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	3301      	adds	r3, #1
 800f2a0:	607b      	str	r3, [r7, #4]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2b37      	cmp	r3, #55	; 0x37
 800f2a6:	d9ef      	bls.n	800f288 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f2a8:	480d      	ldr	r0, [pc, #52]	; (800f2e0 <prvInitialiseTaskLists+0x64>)
 800f2aa:	f7fd ff9b 	bl	800d1e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f2ae:	480d      	ldr	r0, [pc, #52]	; (800f2e4 <prvInitialiseTaskLists+0x68>)
 800f2b0:	f7fd ff98 	bl	800d1e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f2b4:	480c      	ldr	r0, [pc, #48]	; (800f2e8 <prvInitialiseTaskLists+0x6c>)
 800f2b6:	f7fd ff95 	bl	800d1e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f2ba:	480c      	ldr	r0, [pc, #48]	; (800f2ec <prvInitialiseTaskLists+0x70>)
 800f2bc:	f7fd ff92 	bl	800d1e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f2c0:	480b      	ldr	r0, [pc, #44]	; (800f2f0 <prvInitialiseTaskLists+0x74>)
 800f2c2:	f7fd ff8f 	bl	800d1e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f2c6:	4b0b      	ldr	r3, [pc, #44]	; (800f2f4 <prvInitialiseTaskLists+0x78>)
 800f2c8:	4a05      	ldr	r2, [pc, #20]	; (800f2e0 <prvInitialiseTaskLists+0x64>)
 800f2ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f2cc:	4b0a      	ldr	r3, [pc, #40]	; (800f2f8 <prvInitialiseTaskLists+0x7c>)
 800f2ce:	4a05      	ldr	r2, [pc, #20]	; (800f2e4 <prvInitialiseTaskLists+0x68>)
 800f2d0:	601a      	str	r2, [r3, #0]
}
 800f2d2:	bf00      	nop
 800f2d4:	3708      	adds	r7, #8
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	20003188 	.word	0x20003188
 800f2e0:	200035e8 	.word	0x200035e8
 800f2e4:	200035fc 	.word	0x200035fc
 800f2e8:	20003618 	.word	0x20003618
 800f2ec:	2000362c 	.word	0x2000362c
 800f2f0:	20003644 	.word	0x20003644
 800f2f4:	20003610 	.word	0x20003610
 800f2f8:	20003614 	.word	0x20003614

0800f2fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b082      	sub	sp, #8
 800f300:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f302:	e019      	b.n	800f338 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f304:	f000 ff8e 	bl	8010224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f308:	4b10      	ldr	r3, [pc, #64]	; (800f34c <prvCheckTasksWaitingTermination+0x50>)
 800f30a:	68db      	ldr	r3, [r3, #12]
 800f30c:	68db      	ldr	r3, [r3, #12]
 800f30e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	3304      	adds	r3, #4
 800f314:	4618      	mov	r0, r3
 800f316:	f7fd ffef 	bl	800d2f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f31a:	4b0d      	ldr	r3, [pc, #52]	; (800f350 <prvCheckTasksWaitingTermination+0x54>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	3b01      	subs	r3, #1
 800f320:	4a0b      	ldr	r2, [pc, #44]	; (800f350 <prvCheckTasksWaitingTermination+0x54>)
 800f322:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f324:	4b0b      	ldr	r3, [pc, #44]	; (800f354 <prvCheckTasksWaitingTermination+0x58>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	3b01      	subs	r3, #1
 800f32a:	4a0a      	ldr	r2, [pc, #40]	; (800f354 <prvCheckTasksWaitingTermination+0x58>)
 800f32c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f32e:	f000 ffa9 	bl	8010284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f000 f848 	bl	800f3c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f338:	4b06      	ldr	r3, [pc, #24]	; (800f354 <prvCheckTasksWaitingTermination+0x58>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d1e1      	bne.n	800f304 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f340:	bf00      	nop
 800f342:	bf00      	nop
 800f344:	3708      	adds	r7, #8
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	2000362c 	.word	0x2000362c
 800f350:	20003658 	.word	0x20003658
 800f354:	20003640 	.word	0x20003640

0800f358 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800f358:	b480      	push	{r7}
 800f35a:	b085      	sub	sp, #20
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800f360:	2300      	movs	r3, #0
 800f362:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f364:	e005      	b.n	800f372 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	3301      	adds	r3, #1
 800f36a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	3301      	adds	r3, #1
 800f370:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	2ba5      	cmp	r3, #165	; 0xa5
 800f378:	d0f5      	beq.n	800f366 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	089b      	lsrs	r3, r3, #2
 800f37e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	b29b      	uxth	r3, r3
	}
 800f384:	4618      	mov	r0, r3
 800f386:	3714      	adds	r7, #20
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr

0800f390 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800f390:	b580      	push	{r7, lr}
 800f392:	b086      	sub	sp, #24
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d102      	bne.n	800f3a4 <uxTaskGetStackHighWaterMark+0x14>
 800f39e:	4b09      	ldr	r3, [pc, #36]	; (800f3c4 <uxTaskGetStackHighWaterMark+0x34>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	e000      	b.n	800f3a6 <uxTaskGetStackHighWaterMark+0x16>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ac:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800f3ae:	6938      	ldr	r0, [r7, #16]
 800f3b0:	f7ff ffd2 	bl	800f358 <prvTaskCheckFreeStackSpace>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
	}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3718      	adds	r7, #24
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	20003184 	.word	0x20003184

0800f3c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	335c      	adds	r3, #92	; 0x5c
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f004 fdd9 	bl	8013f8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d108      	bne.n	800f3f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f001 f969 	bl	80106c0 <vPortFree>
				vPortFree( pxTCB );
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f001 f966 	bl	80106c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f3f4:	e018      	b.n	800f428 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d103      	bne.n	800f408 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f001 f95d 	bl	80106c0 <vPortFree>
	}
 800f406:	e00f      	b.n	800f428 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800f40e:	2b02      	cmp	r3, #2
 800f410:	d00a      	beq.n	800f428 <prvDeleteTCB+0x60>
	__asm volatile
 800f412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f416:	f383 8811 	msr	BASEPRI, r3
 800f41a:	f3bf 8f6f 	isb	sy
 800f41e:	f3bf 8f4f 	dsb	sy
 800f422:	60fb      	str	r3, [r7, #12]
}
 800f424:	bf00      	nop
 800f426:	e7fe      	b.n	800f426 <prvDeleteTCB+0x5e>
	}
 800f428:	bf00      	nop
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f436:	4b0c      	ldr	r3, [pc, #48]	; (800f468 <prvResetNextTaskUnblockTime+0x38>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d104      	bne.n	800f44a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f440:	4b0a      	ldr	r3, [pc, #40]	; (800f46c <prvResetNextTaskUnblockTime+0x3c>)
 800f442:	f04f 32ff 	mov.w	r2, #4294967295
 800f446:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f448:	e008      	b.n	800f45c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f44a:	4b07      	ldr	r3, [pc, #28]	; (800f468 <prvResetNextTaskUnblockTime+0x38>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	68db      	ldr	r3, [r3, #12]
 800f452:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	4a04      	ldr	r2, [pc, #16]	; (800f46c <prvResetNextTaskUnblockTime+0x3c>)
 800f45a:	6013      	str	r3, [r2, #0]
}
 800f45c:	bf00      	nop
 800f45e:	370c      	adds	r7, #12
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr
 800f468:	20003610 	.word	0x20003610
 800f46c:	20003678 	.word	0x20003678

0800f470 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f470:	b480      	push	{r7}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f476:	4b0b      	ldr	r3, [pc, #44]	; (800f4a4 <xTaskGetSchedulerState+0x34>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d102      	bne.n	800f484 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f47e:	2301      	movs	r3, #1
 800f480:	607b      	str	r3, [r7, #4]
 800f482:	e008      	b.n	800f496 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f484:	4b08      	ldr	r3, [pc, #32]	; (800f4a8 <xTaskGetSchedulerState+0x38>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d102      	bne.n	800f492 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f48c:	2302      	movs	r3, #2
 800f48e:	607b      	str	r3, [r7, #4]
 800f490:	e001      	b.n	800f496 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f492:	2300      	movs	r3, #0
 800f494:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f496:	687b      	ldr	r3, [r7, #4]
	}
 800f498:	4618      	mov	r0, r3
 800f49a:	370c      	adds	r7, #12
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr
 800f4a4:	20003664 	.word	0x20003664
 800f4a8:	20003680 	.word	0x20003680

0800f4ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b084      	sub	sp, #16
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d056      	beq.n	800f570 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4c6:	4b2d      	ldr	r3, [pc, #180]	; (800f57c <xTaskPriorityInherit+0xd0>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d246      	bcs.n	800f55e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	699b      	ldr	r3, [r3, #24]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	db06      	blt.n	800f4e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4d8:	4b28      	ldr	r3, [pc, #160]	; (800f57c <xTaskPriorityInherit+0xd0>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	6959      	ldr	r1, [r3, #20]
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ee:	4613      	mov	r3, r2
 800f4f0:	009b      	lsls	r3, r3, #2
 800f4f2:	4413      	add	r3, r2
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	4a22      	ldr	r2, [pc, #136]	; (800f580 <xTaskPriorityInherit+0xd4>)
 800f4f8:	4413      	add	r3, r2
 800f4fa:	4299      	cmp	r1, r3
 800f4fc:	d122      	bne.n	800f544 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	3304      	adds	r3, #4
 800f502:	4618      	mov	r0, r3
 800f504:	f7fd fef8 	bl	800d2f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f508:	4b1c      	ldr	r3, [pc, #112]	; (800f57c <xTaskPriorityInherit+0xd0>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f516:	4b1b      	ldr	r3, [pc, #108]	; (800f584 <xTaskPriorityInherit+0xd8>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d903      	bls.n	800f526 <xTaskPriorityInherit+0x7a>
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f522:	4a18      	ldr	r2, [pc, #96]	; (800f584 <xTaskPriorityInherit+0xd8>)
 800f524:	6013      	str	r3, [r2, #0]
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f52a:	4613      	mov	r3, r2
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	4413      	add	r3, r2
 800f530:	009b      	lsls	r3, r3, #2
 800f532:	4a13      	ldr	r2, [pc, #76]	; (800f580 <xTaskPriorityInherit+0xd4>)
 800f534:	441a      	add	r2, r3
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	3304      	adds	r3, #4
 800f53a:	4619      	mov	r1, r3
 800f53c:	4610      	mov	r0, r2
 800f53e:	f7fd fe7e 	bl	800d23e <vListInsertEnd>
 800f542:	e004      	b.n	800f54e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f544:	4b0d      	ldr	r3, [pc, #52]	; (800f57c <xTaskPriorityInherit+0xd0>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4619      	mov	r1, r3
 800f552:	2049      	movs	r0, #73	; 0x49
 800f554:	f002 ff96 	bl	8012484 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f558:	2301      	movs	r3, #1
 800f55a:	60fb      	str	r3, [r7, #12]
 800f55c:	e008      	b.n	800f570 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f562:	4b06      	ldr	r3, [pc, #24]	; (800f57c <xTaskPriorityInherit+0xd0>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f568:	429a      	cmp	r2, r3
 800f56a:	d201      	bcs.n	800f570 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f56c:	2301      	movs	r3, #1
 800f56e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f570:	68fb      	ldr	r3, [r7, #12]
	}
 800f572:	4618      	mov	r0, r3
 800f574:	3710      	adds	r7, #16
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
 800f57a:	bf00      	nop
 800f57c:	20003184 	.word	0x20003184
 800f580:	20003188 	.word	0x20003188
 800f584:	20003660 	.word	0x20003660

0800f588 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b086      	sub	sp, #24
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f594:	2300      	movs	r3, #0
 800f596:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d05b      	beq.n	800f656 <xTaskPriorityDisinherit+0xce>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f59e:	4b30      	ldr	r3, [pc, #192]	; (800f660 <xTaskPriorityDisinherit+0xd8>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	693a      	ldr	r2, [r7, #16]
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d00a      	beq.n	800f5be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ac:	f383 8811 	msr	BASEPRI, r3
 800f5b0:	f3bf 8f6f 	isb	sy
 800f5b4:	f3bf 8f4f 	dsb	sy
 800f5b8:	60fb      	str	r3, [r7, #12]
}
 800f5ba:	bf00      	nop
 800f5bc:	e7fe      	b.n	800f5bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d10a      	bne.n	800f5dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ca:	f383 8811 	msr	BASEPRI, r3
 800f5ce:	f3bf 8f6f 	isb	sy
 800f5d2:	f3bf 8f4f 	dsb	sy
 800f5d6:	60bb      	str	r3, [r7, #8]
}
 800f5d8:	bf00      	nop
 800f5da:	e7fe      	b.n	800f5da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5e0:	1e5a      	subs	r2, r3, #1
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d031      	beq.n	800f656 <xTaskPriorityDisinherit+0xce>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d12d      	bne.n	800f656 <xTaskPriorityDisinherit+0xce>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	3304      	adds	r3, #4
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7fd fe7a 	bl	800d2f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	4619      	mov	r1, r3
 800f608:	204a      	movs	r0, #74	; 0x4a
 800f60a:	f002 ff3b 	bl	8012484 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f61a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f626:	4b0f      	ldr	r3, [pc, #60]	; (800f664 <xTaskPriorityDisinherit+0xdc>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d903      	bls.n	800f636 <xTaskPriorityDisinherit+0xae>
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f632:	4a0c      	ldr	r2, [pc, #48]	; (800f664 <xTaskPriorityDisinherit+0xdc>)
 800f634:	6013      	str	r3, [r2, #0]
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f63a:	4613      	mov	r3, r2
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	4413      	add	r3, r2
 800f640:	009b      	lsls	r3, r3, #2
 800f642:	4a09      	ldr	r2, [pc, #36]	; (800f668 <xTaskPriorityDisinherit+0xe0>)
 800f644:	441a      	add	r2, r3
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	3304      	adds	r3, #4
 800f64a:	4619      	mov	r1, r3
 800f64c:	4610      	mov	r0, r2
 800f64e:	f7fd fdf6 	bl	800d23e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f652:	2301      	movs	r3, #1
 800f654:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f656:	697b      	ldr	r3, [r7, #20]
	}
 800f658:	4618      	mov	r0, r3
 800f65a:	3718      	adds	r7, #24
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	20003184 	.word	0x20003184
 800f664:	20003660 	.word	0x20003660
 800f668:	20003188 	.word	0x20003188

0800f66c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b088      	sub	sp, #32
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f67a:	2301      	movs	r3, #1
 800f67c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d073      	beq.n	800f76c <vTaskPriorityDisinheritAfterTimeout+0x100>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f684:	69bb      	ldr	r3, [r7, #24]
 800f686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d10a      	bne.n	800f6a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f690:	f383 8811 	msr	BASEPRI, r3
 800f694:	f3bf 8f6f 	isb	sy
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	60fb      	str	r3, [r7, #12]
}
 800f69e:	bf00      	nop
 800f6a0:	e7fe      	b.n	800f6a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6a6:	683a      	ldr	r2, [r7, #0]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d902      	bls.n	800f6b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	61fb      	str	r3, [r7, #28]
 800f6b0:	e002      	b.n	800f6b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f6b8:	69bb      	ldr	r3, [r7, #24]
 800f6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6bc:	69fa      	ldr	r2, [r7, #28]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d054      	beq.n	800f76c <vTaskPriorityDisinheritAfterTimeout+0x100>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f6c2:	69bb      	ldr	r3, [r7, #24]
 800f6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6c6:	697a      	ldr	r2, [r7, #20]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d14f      	bne.n	800f76c <vTaskPriorityDisinheritAfterTimeout+0x100>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f6cc:	4b29      	ldr	r3, [pc, #164]	; (800f774 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	69ba      	ldr	r2, [r7, #24]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d10a      	bne.n	800f6ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6da:	f383 8811 	msr	BASEPRI, r3
 800f6de:	f3bf 8f6f 	isb	sy
 800f6e2:	f3bf 8f4f 	dsb	sy
 800f6e6:	60bb      	str	r3, [r7, #8]
}
 800f6e8:	bf00      	nop
 800f6ea:	e7fe      	b.n	800f6ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	204a      	movs	r0, #74	; 0x4a
 800f6f2:	f002 fec7 	bl	8012484 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f6f6:	69bb      	ldr	r3, [r7, #24]
 800f6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6fa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	69fa      	ldr	r2, [r7, #28]
 800f700:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	699b      	ldr	r3, [r3, #24]
 800f706:	2b00      	cmp	r3, #0
 800f708:	db04      	blt.n	800f714 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f70a:	69fb      	ldr	r3, [r7, #28]
 800f70c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f710:	69bb      	ldr	r3, [r7, #24]
 800f712:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f714:	69bb      	ldr	r3, [r7, #24]
 800f716:	6959      	ldr	r1, [r3, #20]
 800f718:	693a      	ldr	r2, [r7, #16]
 800f71a:	4613      	mov	r3, r2
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	4413      	add	r3, r2
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	4a15      	ldr	r2, [pc, #84]	; (800f778 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800f724:	4413      	add	r3, r2
 800f726:	4299      	cmp	r1, r3
 800f728:	d120      	bne.n	800f76c <vTaskPriorityDisinheritAfterTimeout+0x100>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f72a:	69bb      	ldr	r3, [r7, #24]
 800f72c:	3304      	adds	r3, #4
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fd fde2 	bl	800d2f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f734:	69bb      	ldr	r3, [r7, #24]
 800f736:	4618      	mov	r0, r3
 800f738:	f003 fc24 	bl	8012f84 <SEGGER_SYSVIEW_OnTaskStartReady>
 800f73c:	69bb      	ldr	r3, [r7, #24]
 800f73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f740:	4b0e      	ldr	r3, [pc, #56]	; (800f77c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	429a      	cmp	r2, r3
 800f746:	d903      	bls.n	800f750 <vTaskPriorityDisinheritAfterTimeout+0xe4>
 800f748:	69bb      	ldr	r3, [r7, #24]
 800f74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f74c:	4a0b      	ldr	r2, [pc, #44]	; (800f77c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800f74e:	6013      	str	r3, [r2, #0]
 800f750:	69bb      	ldr	r3, [r7, #24]
 800f752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f754:	4613      	mov	r3, r2
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	4413      	add	r3, r2
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	4a06      	ldr	r2, [pc, #24]	; (800f778 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800f75e:	441a      	add	r2, r3
 800f760:	69bb      	ldr	r3, [r7, #24]
 800f762:	3304      	adds	r3, #4
 800f764:	4619      	mov	r1, r3
 800f766:	4610      	mov	r0, r2
 800f768:	f7fd fd69 	bl	800d23e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f76c:	bf00      	nop
 800f76e:	3720      	adds	r7, #32
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	20003184 	.word	0x20003184
 800f778:	20003188 	.word	0x20003188
 800f77c:	20003660 	.word	0x20003660

0800f780 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f780:	b480      	push	{r7}
 800f782:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f784:	4b07      	ldr	r3, [pc, #28]	; (800f7a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d004      	beq.n	800f796 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f78c:	4b05      	ldr	r3, [pc, #20]	; (800f7a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f792:	3201      	adds	r2, #1
 800f794:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800f796:	4b03      	ldr	r3, [pc, #12]	; (800f7a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f798:	681b      	ldr	r3, [r3, #0]
	}
 800f79a:	4618      	mov	r0, r3
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr
 800f7a4:	20003184 	.word	0x20003184

0800f7a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f7b2:	4b2a      	ldr	r3, [pc, #168]	; (800f85c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7b8:	4b29      	ldr	r3, [pc, #164]	; (800f860 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	3304      	adds	r3, #4
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7fd fd9a 	bl	800d2f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ca:	d110      	bne.n	800f7ee <prvAddCurrentTaskToDelayedList+0x46>
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d00d      	beq.n	800f7ee <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800f7d2:	4b23      	ldr	r3, [pc, #140]	; (800f860 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	211b      	movs	r1, #27
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f003 fc15 	bl	8013008 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7de:	4b20      	ldr	r3, [pc, #128]	; (800f860 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	3304      	adds	r3, #4
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	481f      	ldr	r0, [pc, #124]	; (800f864 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f7e8:	f7fd fd29 	bl	800d23e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f7ec:	e032      	b.n	800f854 <prvAddCurrentTaskToDelayedList+0xac>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f7ee:	68fa      	ldr	r2, [r7, #12]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f7f6:	4b1a      	ldr	r3, [pc, #104]	; (800f860 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	68ba      	ldr	r2, [r7, #8]
 800f7fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f7fe:	68ba      	ldr	r2, [r7, #8]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	429a      	cmp	r2, r3
 800f804:	d20f      	bcs.n	800f826 <prvAddCurrentTaskToDelayedList+0x7e>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800f806:	4b16      	ldr	r3, [pc, #88]	; (800f860 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	2104      	movs	r1, #4
 800f80c:	4618      	mov	r0, r3
 800f80e:	f003 fbfb 	bl	8013008 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f812:	4b15      	ldr	r3, [pc, #84]	; (800f868 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	4b12      	ldr	r3, [pc, #72]	; (800f860 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	3304      	adds	r3, #4
 800f81c:	4619      	mov	r1, r3
 800f81e:	4610      	mov	r0, r2
 800f820:	f7fd fd31 	bl	800d286 <vListInsert>
}
 800f824:	e016      	b.n	800f854 <prvAddCurrentTaskToDelayedList+0xac>
        traceMOVED_TASK_TO_DELAYED_LIST();
 800f826:	4b0e      	ldr	r3, [pc, #56]	; (800f860 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2104      	movs	r1, #4
 800f82c:	4618      	mov	r0, r3
 800f82e:	f003 fbeb 	bl	8013008 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f832:	4b0e      	ldr	r3, [pc, #56]	; (800f86c <prvAddCurrentTaskToDelayedList+0xc4>)
 800f834:	681a      	ldr	r2, [r3, #0]
 800f836:	4b0a      	ldr	r3, [pc, #40]	; (800f860 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	3304      	adds	r3, #4
 800f83c:	4619      	mov	r1, r3
 800f83e:	4610      	mov	r0, r2
 800f840:	f7fd fd21 	bl	800d286 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f844:	4b0a      	ldr	r3, [pc, #40]	; (800f870 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d202      	bcs.n	800f854 <prvAddCurrentTaskToDelayedList+0xac>
					xNextTaskUnblockTime = xTimeToWake;
 800f84e:	4a08      	ldr	r2, [pc, #32]	; (800f870 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	6013      	str	r3, [r2, #0]
}
 800f854:	bf00      	nop
 800f856:	3710      	adds	r7, #16
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	2000365c 	.word	0x2000365c
 800f860:	20003184 	.word	0x20003184
 800f864:	20003644 	.word	0x20003644
 800f868:	20003614 	.word	0x20003614
 800f86c:	20003610 	.word	0x20003610
 800f870:	20003678 	.word	0x20003678

0800f874 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b08a      	sub	sp, #40	; 0x28
 800f878:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f87a:	2300      	movs	r3, #0
 800f87c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f87e:	f000 fb63 	bl	800ff48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f882:	4b1c      	ldr	r3, [pc, #112]	; (800f8f4 <xTimerCreateTimerTask+0x80>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d021      	beq.n	800f8ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f88a:	2300      	movs	r3, #0
 800f88c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f88e:	2300      	movs	r3, #0
 800f890:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f892:	1d3a      	adds	r2, r7, #4
 800f894:	f107 0108 	add.w	r1, r7, #8
 800f898:	f107 030c 	add.w	r3, r7, #12
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7fd fc87 	bl	800d1b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f8a2:	6879      	ldr	r1, [r7, #4]
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	9202      	str	r2, [sp, #8]
 800f8aa:	9301      	str	r3, [sp, #4]
 800f8ac:	2302      	movs	r3, #2
 800f8ae:	9300      	str	r3, [sp, #0]
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	460a      	mov	r2, r1
 800f8b4:	4910      	ldr	r1, [pc, #64]	; (800f8f8 <xTimerCreateTimerTask+0x84>)
 800f8b6:	4811      	ldr	r0, [pc, #68]	; (800f8fc <xTimerCreateTimerTask+0x88>)
 800f8b8:	f7fe fe6c 	bl	800e594 <xTaskCreateStatic>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	4a10      	ldr	r2, [pc, #64]	; (800f900 <xTimerCreateTimerTask+0x8c>)
 800f8c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f8c2:	4b0f      	ldr	r3, [pc, #60]	; (800f900 <xTimerCreateTimerTask+0x8c>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d001      	beq.n	800f8ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d10a      	bne.n	800f8ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d8:	f383 8811 	msr	BASEPRI, r3
 800f8dc:	f3bf 8f6f 	isb	sy
 800f8e0:	f3bf 8f4f 	dsb	sy
 800f8e4:	613b      	str	r3, [r7, #16]
}
 800f8e6:	bf00      	nop
 800f8e8:	e7fe      	b.n	800f8e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f8ea:	697b      	ldr	r3, [r7, #20]
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3718      	adds	r7, #24
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}
 800f8f4:	200036bc 	.word	0x200036bc
 800f8f8:	080163fc 	.word	0x080163fc
 800f8fc:	0800faf1 	.word	0x0800faf1
 800f900:	200036c0 	.word	0x200036c0

0800f904 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f904:	b580      	push	{r7, lr}
 800f906:	b088      	sub	sp, #32
 800f908:	af02      	add	r7, sp, #8
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	607a      	str	r2, [r7, #4]
 800f910:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f912:	202c      	movs	r0, #44	; 0x2c
 800f914:	f000 fe08 	bl	8010528 <pvPortMalloc>
 800f918:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d00d      	beq.n	800f93c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	2200      	movs	r2, #0
 800f924:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	9301      	str	r3, [sp, #4]
 800f92c:	6a3b      	ldr	r3, [r7, #32]
 800f92e:	9300      	str	r3, [sp, #0]
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	687a      	ldr	r2, [r7, #4]
 800f934:	68b9      	ldr	r1, [r7, #8]
 800f936:	68f8      	ldr	r0, [r7, #12]
 800f938:	f000 f805 	bl	800f946 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f93c:	697b      	ldr	r3, [r7, #20]
	}
 800f93e:	4618      	mov	r0, r3
 800f940:	3718      	adds	r7, #24
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}

0800f946 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f946:	b580      	push	{r7, lr}
 800f948:	b086      	sub	sp, #24
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	60f8      	str	r0, [r7, #12]
 800f94e:	60b9      	str	r1, [r7, #8]
 800f950:	607a      	str	r2, [r7, #4]
 800f952:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d10a      	bne.n	800f970 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800f95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f95e:	f383 8811 	msr	BASEPRI, r3
 800f962:	f3bf 8f6f 	isb	sy
 800f966:	f3bf 8f4f 	dsb	sy
 800f96a:	617b      	str	r3, [r7, #20]
}
 800f96c:	bf00      	nop
 800f96e:	e7fe      	b.n	800f96e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f972:	2b00      	cmp	r3, #0
 800f974:	d01e      	beq.n	800f9b4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f976:	f000 fae7 	bl	800ff48 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97c:	68fa      	ldr	r2, [r7, #12]
 800f97e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f982:	68ba      	ldr	r2, [r7, #8]
 800f984:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f988:	683a      	ldr	r2, [r7, #0]
 800f98a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98e:	6a3a      	ldr	r2, [r7, #32]
 800f990:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f994:	3304      	adds	r3, #4
 800f996:	4618      	mov	r0, r3
 800f998:	f7fd fc44 	bl	800d224 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d008      	beq.n	800f9b4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9a8:	f043 0304 	orr.w	r3, r3, #4
 800f9ac:	b2da      	uxtb	r2, r3
 800f9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f9b4:	bf00      	nop
 800f9b6:	3718      	adds	r7, #24
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b08a      	sub	sp, #40	; 0x28
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	607a      	str	r2, [r7, #4]
 800f9c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d10a      	bne.n	800f9ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800f9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d8:	f383 8811 	msr	BASEPRI, r3
 800f9dc:	f3bf 8f6f 	isb	sy
 800f9e0:	f3bf 8f4f 	dsb	sy
 800f9e4:	623b      	str	r3, [r7, #32]
}
 800f9e6:	bf00      	nop
 800f9e8:	e7fe      	b.n	800f9e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f9ea:	4b1a      	ldr	r3, [pc, #104]	; (800fa54 <xTimerGenericCommand+0x98>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d02a      	beq.n	800fa48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	2b05      	cmp	r3, #5
 800fa02:	dc18      	bgt.n	800fa36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fa04:	f7ff fd34 	bl	800f470 <xTaskGetSchedulerState>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b02      	cmp	r3, #2
 800fa0c:	d109      	bne.n	800fa22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fa0e:	4b11      	ldr	r3, [pc, #68]	; (800fa54 <xTimerGenericCommand+0x98>)
 800fa10:	6818      	ldr	r0, [r3, #0]
 800fa12:	f107 0110 	add.w	r1, r7, #16
 800fa16:	2300      	movs	r3, #0
 800fa18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa1a:	f7fd fe77 	bl	800d70c <xQueueGenericSend>
 800fa1e:	6278      	str	r0, [r7, #36]	; 0x24
 800fa20:	e012      	b.n	800fa48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fa22:	4b0c      	ldr	r3, [pc, #48]	; (800fa54 <xTimerGenericCommand+0x98>)
 800fa24:	6818      	ldr	r0, [r3, #0]
 800fa26:	f107 0110 	add.w	r1, r7, #16
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	f7fd fe6d 	bl	800d70c <xQueueGenericSend>
 800fa32:	6278      	str	r0, [r7, #36]	; 0x24
 800fa34:	e008      	b.n	800fa48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fa36:	4b07      	ldr	r3, [pc, #28]	; (800fa54 <xTimerGenericCommand+0x98>)
 800fa38:	6818      	ldr	r0, [r3, #0]
 800fa3a:	f107 0110 	add.w	r1, r7, #16
 800fa3e:	2300      	movs	r3, #0
 800fa40:	683a      	ldr	r2, [r7, #0]
 800fa42:	f7fd ff89 	bl	800d958 <xQueueGenericSendFromISR>
 800fa46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3728      	adds	r7, #40	; 0x28
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}
 800fa52:	bf00      	nop
 800fa54:	200036bc 	.word	0x200036bc

0800fa58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b088      	sub	sp, #32
 800fa5c:	af02      	add	r7, sp, #8
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa62:	4b22      	ldr	r3, [pc, #136]	; (800faec <prvProcessExpiredTimer+0x94>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	3304      	adds	r3, #4
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7fd fc41 	bl	800d2f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa7c:	f003 0304 	and.w	r3, r3, #4
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d022      	beq.n	800faca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	699a      	ldr	r2, [r3, #24]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	18d1      	adds	r1, r2, r3
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	683a      	ldr	r2, [r7, #0]
 800fa90:	6978      	ldr	r0, [r7, #20]
 800fa92:	f000 f8d1 	bl	800fc38 <prvInsertTimerInActiveList>
 800fa96:	4603      	mov	r3, r0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d01f      	beq.n	800fadc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	9300      	str	r3, [sp, #0]
 800faa0:	2300      	movs	r3, #0
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	2100      	movs	r1, #0
 800faa6:	6978      	ldr	r0, [r7, #20]
 800faa8:	f7ff ff88 	bl	800f9bc <xTimerGenericCommand>
 800faac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d113      	bne.n	800fadc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab8:	f383 8811 	msr	BASEPRI, r3
 800fabc:	f3bf 8f6f 	isb	sy
 800fac0:	f3bf 8f4f 	dsb	sy
 800fac4:	60fb      	str	r3, [r7, #12]
}
 800fac6:	bf00      	nop
 800fac8:	e7fe      	b.n	800fac8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fad0:	f023 0301 	bic.w	r3, r3, #1
 800fad4:	b2da      	uxtb	r2, r3
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	6a1b      	ldr	r3, [r3, #32]
 800fae0:	6978      	ldr	r0, [r7, #20]
 800fae2:	4798      	blx	r3
}
 800fae4:	bf00      	nop
 800fae6:	3718      	adds	r7, #24
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}
 800faec:	200036b4 	.word	0x200036b4

0800faf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b084      	sub	sp, #16
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800faf8:	f107 0308 	add.w	r3, r7, #8
 800fafc:	4618      	mov	r0, r3
 800fafe:	f000 f857 	bl	800fbb0 <prvGetNextExpireTime>
 800fb02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	4619      	mov	r1, r3
 800fb08:	68f8      	ldr	r0, [r7, #12]
 800fb0a:	f000 f803 	bl	800fb14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fb0e:	f000 f8d5 	bl	800fcbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb12:	e7f1      	b.n	800faf8 <prvTimerTask+0x8>

0800fb14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b084      	sub	sp, #16
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fb1e:	f7fe ffd1 	bl	800eac4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb22:	f107 0308 	add.w	r3, r7, #8
 800fb26:	4618      	mov	r0, r3
 800fb28:	f000 f866 	bl	800fbf8 <prvSampleTimeNow>
 800fb2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d130      	bne.n	800fb96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d10a      	bne.n	800fb50 <prvProcessTimerOrBlockTask+0x3c>
 800fb3a:	687a      	ldr	r2, [r7, #4]
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d806      	bhi.n	800fb50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fb42:	f7ff f805 	bl	800eb50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fb46:	68f9      	ldr	r1, [r7, #12]
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f7ff ff85 	bl	800fa58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fb4e:	e024      	b.n	800fb9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d008      	beq.n	800fb68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fb56:	4b13      	ldr	r3, [pc, #76]	; (800fba4 <prvProcessTimerOrBlockTask+0x90>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d101      	bne.n	800fb64 <prvProcessTimerOrBlockTask+0x50>
 800fb60:	2301      	movs	r3, #1
 800fb62:	e000      	b.n	800fb66 <prvProcessTimerOrBlockTask+0x52>
 800fb64:	2300      	movs	r3, #0
 800fb66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fb68:	4b0f      	ldr	r3, [pc, #60]	; (800fba8 <prvProcessTimerOrBlockTask+0x94>)
 800fb6a:	6818      	ldr	r0, [r3, #0]
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	1ad3      	subs	r3, r2, r3
 800fb72:	683a      	ldr	r2, [r7, #0]
 800fb74:	4619      	mov	r1, r3
 800fb76:	f7fe fcd9 	bl	800e52c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fb7a:	f7fe ffe9 	bl	800eb50 <xTaskResumeAll>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d10a      	bne.n	800fb9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fb84:	4b09      	ldr	r3, [pc, #36]	; (800fbac <prvProcessTimerOrBlockTask+0x98>)
 800fb86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb8a:	601a      	str	r2, [r3, #0]
 800fb8c:	f3bf 8f4f 	dsb	sy
 800fb90:	f3bf 8f6f 	isb	sy
}
 800fb94:	e001      	b.n	800fb9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fb96:	f7fe ffdb 	bl	800eb50 <xTaskResumeAll>
}
 800fb9a:	bf00      	nop
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	200036b8 	.word	0x200036b8
 800fba8:	200036bc 	.word	0x200036bc
 800fbac:	e000ed04 	.word	0xe000ed04

0800fbb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b085      	sub	sp, #20
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fbb8:	4b0e      	ldr	r3, [pc, #56]	; (800fbf4 <prvGetNextExpireTime+0x44>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d101      	bne.n	800fbc6 <prvGetNextExpireTime+0x16>
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	e000      	b.n	800fbc8 <prvGetNextExpireTime+0x18>
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d105      	bne.n	800fbe0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fbd4:	4b07      	ldr	r3, [pc, #28]	; (800fbf4 <prvGetNextExpireTime+0x44>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	68db      	ldr	r3, [r3, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	60fb      	str	r3, [r7, #12]
 800fbde:	e001      	b.n	800fbe4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3714      	adds	r7, #20
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr
 800fbf2:	bf00      	nop
 800fbf4:	200036b4 	.word	0x200036b4

0800fbf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b084      	sub	sp, #16
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fc00:	f7ff f848 	bl	800ec94 <xTaskGetTickCount>
 800fc04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fc06:	4b0b      	ldr	r3, [pc, #44]	; (800fc34 <prvSampleTimeNow+0x3c>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	68fa      	ldr	r2, [r7, #12]
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d205      	bcs.n	800fc1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fc10:	f000 f936 	bl	800fe80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2201      	movs	r2, #1
 800fc18:	601a      	str	r2, [r3, #0]
 800fc1a:	e002      	b.n	800fc22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fc22:	4a04      	ldr	r2, [pc, #16]	; (800fc34 <prvSampleTimeNow+0x3c>)
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fc28:	68fb      	ldr	r3, [r7, #12]
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3710      	adds	r7, #16
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	200036c4 	.word	0x200036c4

0800fc38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b086      	sub	sp, #24
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	60b9      	str	r1, [r7, #8]
 800fc42:	607a      	str	r2, [r7, #4]
 800fc44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fc46:	2300      	movs	r3, #0
 800fc48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	68ba      	ldr	r2, [r7, #8]
 800fc4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	68fa      	ldr	r2, [r7, #12]
 800fc54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fc56:	68ba      	ldr	r2, [r7, #8]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d812      	bhi.n	800fc84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	1ad2      	subs	r2, r2, r3
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	699b      	ldr	r3, [r3, #24]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d302      	bcc.n	800fc72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	617b      	str	r3, [r7, #20]
 800fc70:	e01b      	b.n	800fcaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fc72:	4b10      	ldr	r3, [pc, #64]	; (800fcb4 <prvInsertTimerInActiveList+0x7c>)
 800fc74:	681a      	ldr	r2, [r3, #0]
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	3304      	adds	r3, #4
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	4610      	mov	r0, r2
 800fc7e:	f7fd fb02 	bl	800d286 <vListInsert>
 800fc82:	e012      	b.n	800fcaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d206      	bcs.n	800fc9a <prvInsertTimerInActiveList+0x62>
 800fc8c:	68ba      	ldr	r2, [r7, #8]
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d302      	bcc.n	800fc9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fc94:	2301      	movs	r3, #1
 800fc96:	617b      	str	r3, [r7, #20]
 800fc98:	e007      	b.n	800fcaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fc9a:	4b07      	ldr	r3, [pc, #28]	; (800fcb8 <prvInsertTimerInActiveList+0x80>)
 800fc9c:	681a      	ldr	r2, [r3, #0]
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	3304      	adds	r3, #4
 800fca2:	4619      	mov	r1, r3
 800fca4:	4610      	mov	r0, r2
 800fca6:	f7fd faee 	bl	800d286 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fcaa:	697b      	ldr	r3, [r7, #20]
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3718      	adds	r7, #24
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}
 800fcb4:	200036b8 	.word	0x200036b8
 800fcb8:	200036b4 	.word	0x200036b4

0800fcbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b08e      	sub	sp, #56	; 0x38
 800fcc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fcc2:	e0ca      	b.n	800fe5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	da18      	bge.n	800fcfc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fcca:	1d3b      	adds	r3, r7, #4
 800fccc:	3304      	adds	r3, #4
 800fcce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d10a      	bne.n	800fcec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcda:	f383 8811 	msr	BASEPRI, r3
 800fcde:	f3bf 8f6f 	isb	sy
 800fce2:	f3bf 8f4f 	dsb	sy
 800fce6:	61fb      	str	r3, [r7, #28]
}
 800fce8:	bf00      	nop
 800fcea:	e7fe      	b.n	800fcea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcf2:	6850      	ldr	r0, [r2, #4]
 800fcf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcf6:	6892      	ldr	r2, [r2, #8]
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	f2c0 80ab 	blt.w	800fe5a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd0a:	695b      	ldr	r3, [r3, #20]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d004      	beq.n	800fd1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd12:	3304      	adds	r3, #4
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7fd faef 	bl	800d2f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd1a:	463b      	mov	r3, r7
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7ff ff6b 	bl	800fbf8 <prvSampleTimeNow>
 800fd22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2b09      	cmp	r3, #9
 800fd28:	f200 8096 	bhi.w	800fe58 <prvProcessReceivedCommands+0x19c>
 800fd2c:	a201      	add	r2, pc, #4	; (adr r2, 800fd34 <prvProcessReceivedCommands+0x78>)
 800fd2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd32:	bf00      	nop
 800fd34:	0800fd5d 	.word	0x0800fd5d
 800fd38:	0800fd5d 	.word	0x0800fd5d
 800fd3c:	0800fd5d 	.word	0x0800fd5d
 800fd40:	0800fdd1 	.word	0x0800fdd1
 800fd44:	0800fde5 	.word	0x0800fde5
 800fd48:	0800fe2f 	.word	0x0800fe2f
 800fd4c:	0800fd5d 	.word	0x0800fd5d
 800fd50:	0800fd5d 	.word	0x0800fd5d
 800fd54:	0800fdd1 	.word	0x0800fdd1
 800fd58:	0800fde5 	.word	0x0800fde5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd62:	f043 0301 	orr.w	r3, r3, #1
 800fd66:	b2da      	uxtb	r2, r3
 800fd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fd6e:	68ba      	ldr	r2, [r7, #8]
 800fd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd72:	699b      	ldr	r3, [r3, #24]
 800fd74:	18d1      	adds	r1, r2, r3
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd7c:	f7ff ff5c 	bl	800fc38 <prvInsertTimerInActiveList>
 800fd80:	4603      	mov	r3, r0
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d069      	beq.n	800fe5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd88:	6a1b      	ldr	r3, [r3, #32]
 800fd8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd94:	f003 0304 	and.w	r3, r3, #4
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d05e      	beq.n	800fe5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fd9c:	68ba      	ldr	r2, [r7, #8]
 800fd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda0:	699b      	ldr	r3, [r3, #24]
 800fda2:	441a      	add	r2, r3
 800fda4:	2300      	movs	r3, #0
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	2300      	movs	r3, #0
 800fdaa:	2100      	movs	r1, #0
 800fdac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdae:	f7ff fe05 	bl	800f9bc <xTimerGenericCommand>
 800fdb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fdb4:	6a3b      	ldr	r3, [r7, #32]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d14f      	bne.n	800fe5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdbe:	f383 8811 	msr	BASEPRI, r3
 800fdc2:	f3bf 8f6f 	isb	sy
 800fdc6:	f3bf 8f4f 	dsb	sy
 800fdca:	61bb      	str	r3, [r7, #24]
}
 800fdcc:	bf00      	nop
 800fdce:	e7fe      	b.n	800fdce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdd6:	f023 0301 	bic.w	r3, r3, #1
 800fdda:	b2da      	uxtb	r2, r3
 800fddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fde2:	e03a      	b.n	800fe5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdea:	f043 0301 	orr.w	r3, r3, #1
 800fdee:	b2da      	uxtb	r2, r3
 800fdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fdf6:	68ba      	ldr	r2, [r7, #8]
 800fdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdfa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdfe:	699b      	ldr	r3, [r3, #24]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d10a      	bne.n	800fe1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fe04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe08:	f383 8811 	msr	BASEPRI, r3
 800fe0c:	f3bf 8f6f 	isb	sy
 800fe10:	f3bf 8f4f 	dsb	sy
 800fe14:	617b      	str	r3, [r7, #20]
}
 800fe16:	bf00      	nop
 800fe18:	e7fe      	b.n	800fe18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fe1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe1c:	699a      	ldr	r2, [r3, #24]
 800fe1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe20:	18d1      	adds	r1, r2, r3
 800fe22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe28:	f7ff ff06 	bl	800fc38 <prvInsertTimerInActiveList>
					break;
 800fe2c:	e015      	b.n	800fe5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fe2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe34:	f003 0302 	and.w	r3, r3, #2
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d103      	bne.n	800fe44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fe3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe3e:	f000 fc3f 	bl	80106c0 <vPortFree>
 800fe42:	e00a      	b.n	800fe5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe4a:	f023 0301 	bic.w	r3, r3, #1
 800fe4e:	b2da      	uxtb	r2, r3
 800fe50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fe56:	e000      	b.n	800fe5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800fe58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fe5a:	4b08      	ldr	r3, [pc, #32]	; (800fe7c <prvProcessReceivedCommands+0x1c0>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	1d39      	adds	r1, r7, #4
 800fe60:	2200      	movs	r2, #0
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7fd fec8 	bl	800dbf8 <xQueueReceive>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	f47f af2a 	bne.w	800fcc4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fe70:	bf00      	nop
 800fe72:	bf00      	nop
 800fe74:	3730      	adds	r7, #48	; 0x30
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	200036bc 	.word	0x200036bc

0800fe80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b088      	sub	sp, #32
 800fe84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fe86:	e048      	b.n	800ff1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe88:	4b2d      	ldr	r3, [pc, #180]	; (800ff40 <prvSwitchTimerLists+0xc0>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	68db      	ldr	r3, [r3, #12]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe92:	4b2b      	ldr	r3, [pc, #172]	; (800ff40 <prvSwitchTimerLists+0xc0>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	68db      	ldr	r3, [r3, #12]
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	3304      	adds	r3, #4
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7fd fa29 	bl	800d2f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	6a1b      	ldr	r3, [r3, #32]
 800feaa:	68f8      	ldr	r0, [r7, #12]
 800feac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800feb4:	f003 0304 	and.w	r3, r3, #4
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d02e      	beq.n	800ff1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	699b      	ldr	r3, [r3, #24]
 800fec0:	693a      	ldr	r2, [r7, #16]
 800fec2:	4413      	add	r3, r2
 800fec4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fec6:	68ba      	ldr	r2, [r7, #8]
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	429a      	cmp	r2, r3
 800fecc:	d90e      	bls.n	800feec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	68ba      	ldr	r2, [r7, #8]
 800fed2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	68fa      	ldr	r2, [r7, #12]
 800fed8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800feda:	4b19      	ldr	r3, [pc, #100]	; (800ff40 <prvSwitchTimerLists+0xc0>)
 800fedc:	681a      	ldr	r2, [r3, #0]
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	3304      	adds	r3, #4
 800fee2:	4619      	mov	r1, r3
 800fee4:	4610      	mov	r0, r2
 800fee6:	f7fd f9ce 	bl	800d286 <vListInsert>
 800feea:	e016      	b.n	800ff1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800feec:	2300      	movs	r3, #0
 800feee:	9300      	str	r3, [sp, #0]
 800fef0:	2300      	movs	r3, #0
 800fef2:	693a      	ldr	r2, [r7, #16]
 800fef4:	2100      	movs	r1, #0
 800fef6:	68f8      	ldr	r0, [r7, #12]
 800fef8:	f7ff fd60 	bl	800f9bc <xTimerGenericCommand>
 800fefc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d10a      	bne.n	800ff1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ff04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff08:	f383 8811 	msr	BASEPRI, r3
 800ff0c:	f3bf 8f6f 	isb	sy
 800ff10:	f3bf 8f4f 	dsb	sy
 800ff14:	603b      	str	r3, [r7, #0]
}
 800ff16:	bf00      	nop
 800ff18:	e7fe      	b.n	800ff18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff1a:	4b09      	ldr	r3, [pc, #36]	; (800ff40 <prvSwitchTimerLists+0xc0>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d1b1      	bne.n	800fe88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ff24:	4b06      	ldr	r3, [pc, #24]	; (800ff40 <prvSwitchTimerLists+0xc0>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ff2a:	4b06      	ldr	r3, [pc, #24]	; (800ff44 <prvSwitchTimerLists+0xc4>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4a04      	ldr	r2, [pc, #16]	; (800ff40 <prvSwitchTimerLists+0xc0>)
 800ff30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ff32:	4a04      	ldr	r2, [pc, #16]	; (800ff44 <prvSwitchTimerLists+0xc4>)
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	6013      	str	r3, [r2, #0]
}
 800ff38:	bf00      	nop
 800ff3a:	3718      	adds	r7, #24
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	200036b4 	.word	0x200036b4
 800ff44:	200036b8 	.word	0x200036b8

0800ff48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ff4e:	f000 f969 	bl	8010224 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ff52:	4b15      	ldr	r3, [pc, #84]	; (800ffa8 <prvCheckForValidListAndQueue+0x60>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d120      	bne.n	800ff9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ff5a:	4814      	ldr	r0, [pc, #80]	; (800ffac <prvCheckForValidListAndQueue+0x64>)
 800ff5c:	f7fd f942 	bl	800d1e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ff60:	4813      	ldr	r0, [pc, #76]	; (800ffb0 <prvCheckForValidListAndQueue+0x68>)
 800ff62:	f7fd f93f 	bl	800d1e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ff66:	4b13      	ldr	r3, [pc, #76]	; (800ffb4 <prvCheckForValidListAndQueue+0x6c>)
 800ff68:	4a10      	ldr	r2, [pc, #64]	; (800ffac <prvCheckForValidListAndQueue+0x64>)
 800ff6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ff6c:	4b12      	ldr	r3, [pc, #72]	; (800ffb8 <prvCheckForValidListAndQueue+0x70>)
 800ff6e:	4a10      	ldr	r2, [pc, #64]	; (800ffb0 <prvCheckForValidListAndQueue+0x68>)
 800ff70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ff72:	2300      	movs	r3, #0
 800ff74:	9300      	str	r3, [sp, #0]
 800ff76:	4b11      	ldr	r3, [pc, #68]	; (800ffbc <prvCheckForValidListAndQueue+0x74>)
 800ff78:	4a11      	ldr	r2, [pc, #68]	; (800ffc0 <prvCheckForValidListAndQueue+0x78>)
 800ff7a:	2110      	movs	r1, #16
 800ff7c:	200a      	movs	r0, #10
 800ff7e:	f7fd fa4d 	bl	800d41c <xQueueGenericCreateStatic>
 800ff82:	4603      	mov	r3, r0
 800ff84:	4a08      	ldr	r2, [pc, #32]	; (800ffa8 <prvCheckForValidListAndQueue+0x60>)
 800ff86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ff88:	4b07      	ldr	r3, [pc, #28]	; (800ffa8 <prvCheckForValidListAndQueue+0x60>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d005      	beq.n	800ff9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ff90:	4b05      	ldr	r3, [pc, #20]	; (800ffa8 <prvCheckForValidListAndQueue+0x60>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	490b      	ldr	r1, [pc, #44]	; (800ffc4 <prvCheckForValidListAndQueue+0x7c>)
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fe fa6c 	bl	800e474 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff9c:	f000 f972 	bl	8010284 <vPortExitCritical>
}
 800ffa0:	bf00      	nop
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	200036bc 	.word	0x200036bc
 800ffac:	2000368c 	.word	0x2000368c
 800ffb0:	200036a0 	.word	0x200036a0
 800ffb4:	200036b4 	.word	0x200036b4
 800ffb8:	200036b8 	.word	0x200036b8
 800ffbc:	20003768 	.word	0x20003768
 800ffc0:	200036c8 	.word	0x200036c8
 800ffc4:	08016404 	.word	0x08016404

0800ffc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b085      	sub	sp, #20
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	60b9      	str	r1, [r7, #8]
 800ffd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	3b04      	subs	r3, #4
 800ffd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ffe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	3b04      	subs	r3, #4
 800ffe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	f023 0201 	bic.w	r2, r3, #1
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	3b04      	subs	r3, #4
 800fff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fff8:	4a0c      	ldr	r2, [pc, #48]	; (801002c <pxPortInitialiseStack+0x64>)
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	3b14      	subs	r3, #20
 8010002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	3b04      	subs	r3, #4
 801000e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f06f 0202 	mvn.w	r2, #2
 8010016:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	3b20      	subs	r3, #32
 801001c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801001e:	68fb      	ldr	r3, [r7, #12]
}
 8010020:	4618      	mov	r0, r3
 8010022:	3714      	adds	r7, #20
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr
 801002c:	08010031 	.word	0x08010031

08010030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010030:	b480      	push	{r7}
 8010032:	b085      	sub	sp, #20
 8010034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010036:	2300      	movs	r3, #0
 8010038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801003a:	4b12      	ldr	r3, [pc, #72]	; (8010084 <prvTaskExitError+0x54>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010042:	d00a      	beq.n	801005a <prvTaskExitError+0x2a>
	__asm volatile
 8010044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010048:	f383 8811 	msr	BASEPRI, r3
 801004c:	f3bf 8f6f 	isb	sy
 8010050:	f3bf 8f4f 	dsb	sy
 8010054:	60fb      	str	r3, [r7, #12]
}
 8010056:	bf00      	nop
 8010058:	e7fe      	b.n	8010058 <prvTaskExitError+0x28>
	__asm volatile
 801005a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005e:	f383 8811 	msr	BASEPRI, r3
 8010062:	f3bf 8f6f 	isb	sy
 8010066:	f3bf 8f4f 	dsb	sy
 801006a:	60bb      	str	r3, [r7, #8]
}
 801006c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801006e:	bf00      	nop
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d0fc      	beq.n	8010070 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010076:	bf00      	nop
 8010078:	bf00      	nop
 801007a:	3714      	adds	r7, #20
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr
 8010084:	20000024 	.word	0x20000024
	...

08010090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010090:	4b07      	ldr	r3, [pc, #28]	; (80100b0 <pxCurrentTCBConst2>)
 8010092:	6819      	ldr	r1, [r3, #0]
 8010094:	6808      	ldr	r0, [r1, #0]
 8010096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801009a:	f380 8809 	msr	PSP, r0
 801009e:	f3bf 8f6f 	isb	sy
 80100a2:	f04f 0000 	mov.w	r0, #0
 80100a6:	f380 8811 	msr	BASEPRI, r0
 80100aa:	4770      	bx	lr
 80100ac:	f3af 8000 	nop.w

080100b0 <pxCurrentTCBConst2>:
 80100b0:	20003184 	.word	0x20003184
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80100b4:	bf00      	nop
 80100b6:	bf00      	nop

080100b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80100b8:	4808      	ldr	r0, [pc, #32]	; (80100dc <prvPortStartFirstTask+0x24>)
 80100ba:	6800      	ldr	r0, [r0, #0]
 80100bc:	6800      	ldr	r0, [r0, #0]
 80100be:	f380 8808 	msr	MSP, r0
 80100c2:	f04f 0000 	mov.w	r0, #0
 80100c6:	f380 8814 	msr	CONTROL, r0
 80100ca:	b662      	cpsie	i
 80100cc:	b661      	cpsie	f
 80100ce:	f3bf 8f4f 	dsb	sy
 80100d2:	f3bf 8f6f 	isb	sy
 80100d6:	df00      	svc	0
 80100d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80100da:	bf00      	nop
 80100dc:	e000ed08 	.word	0xe000ed08

080100e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b086      	sub	sp, #24
 80100e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80100e6:	4b46      	ldr	r3, [pc, #280]	; (8010200 <xPortStartScheduler+0x120>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4a46      	ldr	r2, [pc, #280]	; (8010204 <xPortStartScheduler+0x124>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d10a      	bne.n	8010106 <xPortStartScheduler+0x26>
	__asm volatile
 80100f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f4:	f383 8811 	msr	BASEPRI, r3
 80100f8:	f3bf 8f6f 	isb	sy
 80100fc:	f3bf 8f4f 	dsb	sy
 8010100:	613b      	str	r3, [r7, #16]
}
 8010102:	bf00      	nop
 8010104:	e7fe      	b.n	8010104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010106:	4b3e      	ldr	r3, [pc, #248]	; (8010200 <xPortStartScheduler+0x120>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	4a3f      	ldr	r2, [pc, #252]	; (8010208 <xPortStartScheduler+0x128>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d10a      	bne.n	8010126 <xPortStartScheduler+0x46>
	__asm volatile
 8010110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010114:	f383 8811 	msr	BASEPRI, r3
 8010118:	f3bf 8f6f 	isb	sy
 801011c:	f3bf 8f4f 	dsb	sy
 8010120:	60fb      	str	r3, [r7, #12]
}
 8010122:	bf00      	nop
 8010124:	e7fe      	b.n	8010124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010126:	4b39      	ldr	r3, [pc, #228]	; (801020c <xPortStartScheduler+0x12c>)
 8010128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	b2db      	uxtb	r3, r3
 8010130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	22ff      	movs	r2, #255	; 0xff
 8010136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	b2db      	uxtb	r3, r3
 801013e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010140:	78fb      	ldrb	r3, [r7, #3]
 8010142:	b2db      	uxtb	r3, r3
 8010144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010148:	b2da      	uxtb	r2, r3
 801014a:	4b31      	ldr	r3, [pc, #196]	; (8010210 <xPortStartScheduler+0x130>)
 801014c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801014e:	4b31      	ldr	r3, [pc, #196]	; (8010214 <xPortStartScheduler+0x134>)
 8010150:	2207      	movs	r2, #7
 8010152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010154:	e009      	b.n	801016a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010156:	4b2f      	ldr	r3, [pc, #188]	; (8010214 <xPortStartScheduler+0x134>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	3b01      	subs	r3, #1
 801015c:	4a2d      	ldr	r2, [pc, #180]	; (8010214 <xPortStartScheduler+0x134>)
 801015e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010160:	78fb      	ldrb	r3, [r7, #3]
 8010162:	b2db      	uxtb	r3, r3
 8010164:	005b      	lsls	r3, r3, #1
 8010166:	b2db      	uxtb	r3, r3
 8010168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801016a:	78fb      	ldrb	r3, [r7, #3]
 801016c:	b2db      	uxtb	r3, r3
 801016e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010172:	2b80      	cmp	r3, #128	; 0x80
 8010174:	d0ef      	beq.n	8010156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010176:	4b27      	ldr	r3, [pc, #156]	; (8010214 <xPortStartScheduler+0x134>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f1c3 0307 	rsb	r3, r3, #7
 801017e:	2b04      	cmp	r3, #4
 8010180:	d00a      	beq.n	8010198 <xPortStartScheduler+0xb8>
	__asm volatile
 8010182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010186:	f383 8811 	msr	BASEPRI, r3
 801018a:	f3bf 8f6f 	isb	sy
 801018e:	f3bf 8f4f 	dsb	sy
 8010192:	60bb      	str	r3, [r7, #8]
}
 8010194:	bf00      	nop
 8010196:	e7fe      	b.n	8010196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010198:	4b1e      	ldr	r3, [pc, #120]	; (8010214 <xPortStartScheduler+0x134>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	021b      	lsls	r3, r3, #8
 801019e:	4a1d      	ldr	r2, [pc, #116]	; (8010214 <xPortStartScheduler+0x134>)
 80101a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80101a2:	4b1c      	ldr	r3, [pc, #112]	; (8010214 <xPortStartScheduler+0x134>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80101aa:	4a1a      	ldr	r2, [pc, #104]	; (8010214 <xPortStartScheduler+0x134>)
 80101ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	b2da      	uxtb	r2, r3
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80101b6:	4b18      	ldr	r3, [pc, #96]	; (8010218 <xPortStartScheduler+0x138>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4a17      	ldr	r2, [pc, #92]	; (8010218 <xPortStartScheduler+0x138>)
 80101bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80101c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80101c2:	4b15      	ldr	r3, [pc, #84]	; (8010218 <xPortStartScheduler+0x138>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	4a14      	ldr	r2, [pc, #80]	; (8010218 <xPortStartScheduler+0x138>)
 80101c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80101cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80101ce:	f000 f8e5 	bl	801039c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80101d2:	4b12      	ldr	r3, [pc, #72]	; (801021c <xPortStartScheduler+0x13c>)
 80101d4:	2200      	movs	r2, #0
 80101d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80101d8:	f000 f904 	bl	80103e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80101dc:	4b10      	ldr	r3, [pc, #64]	; (8010220 <xPortStartScheduler+0x140>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4a0f      	ldr	r2, [pc, #60]	; (8010220 <xPortStartScheduler+0x140>)
 80101e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80101e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80101e8:	f7ff ff66 	bl	80100b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80101ec:	f7fe fe32 	bl	800ee54 <vTaskSwitchContext>
	prvTaskExitError();
 80101f0:	f7ff ff1e 	bl	8010030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80101f4:	2300      	movs	r3, #0
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3718      	adds	r7, #24
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	e000ed00 	.word	0xe000ed00
 8010204:	410fc271 	.word	0x410fc271
 8010208:	410fc270 	.word	0x410fc270
 801020c:	e000e400 	.word	0xe000e400
 8010210:	200037b8 	.word	0x200037b8
 8010214:	200037bc 	.word	0x200037bc
 8010218:	e000ed20 	.word	0xe000ed20
 801021c:	20000024 	.word	0x20000024
 8010220:	e000ef34 	.word	0xe000ef34

08010224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010224:	b480      	push	{r7}
 8010226:	b083      	sub	sp, #12
 8010228:	af00      	add	r7, sp, #0
	__asm volatile
 801022a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801022e:	f383 8811 	msr	BASEPRI, r3
 8010232:	f3bf 8f6f 	isb	sy
 8010236:	f3bf 8f4f 	dsb	sy
 801023a:	607b      	str	r3, [r7, #4]
}
 801023c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801023e:	4b0f      	ldr	r3, [pc, #60]	; (801027c <vPortEnterCritical+0x58>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	3301      	adds	r3, #1
 8010244:	4a0d      	ldr	r2, [pc, #52]	; (801027c <vPortEnterCritical+0x58>)
 8010246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010248:	4b0c      	ldr	r3, [pc, #48]	; (801027c <vPortEnterCritical+0x58>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	2b01      	cmp	r3, #1
 801024e:	d10f      	bne.n	8010270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010250:	4b0b      	ldr	r3, [pc, #44]	; (8010280 <vPortEnterCritical+0x5c>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	b2db      	uxtb	r3, r3
 8010256:	2b00      	cmp	r3, #0
 8010258:	d00a      	beq.n	8010270 <vPortEnterCritical+0x4c>
	__asm volatile
 801025a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801025e:	f383 8811 	msr	BASEPRI, r3
 8010262:	f3bf 8f6f 	isb	sy
 8010266:	f3bf 8f4f 	dsb	sy
 801026a:	603b      	str	r3, [r7, #0]
}
 801026c:	bf00      	nop
 801026e:	e7fe      	b.n	801026e <vPortEnterCritical+0x4a>
	}
}
 8010270:	bf00      	nop
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr
 801027c:	20000024 	.word	0x20000024
 8010280:	e000ed04 	.word	0xe000ed04

08010284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801028a:	4b12      	ldr	r3, [pc, #72]	; (80102d4 <vPortExitCritical+0x50>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d10a      	bne.n	80102a8 <vPortExitCritical+0x24>
	__asm volatile
 8010292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010296:	f383 8811 	msr	BASEPRI, r3
 801029a:	f3bf 8f6f 	isb	sy
 801029e:	f3bf 8f4f 	dsb	sy
 80102a2:	607b      	str	r3, [r7, #4]
}
 80102a4:	bf00      	nop
 80102a6:	e7fe      	b.n	80102a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80102a8:	4b0a      	ldr	r3, [pc, #40]	; (80102d4 <vPortExitCritical+0x50>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	3b01      	subs	r3, #1
 80102ae:	4a09      	ldr	r2, [pc, #36]	; (80102d4 <vPortExitCritical+0x50>)
 80102b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80102b2:	4b08      	ldr	r3, [pc, #32]	; (80102d4 <vPortExitCritical+0x50>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d105      	bne.n	80102c6 <vPortExitCritical+0x42>
 80102ba:	2300      	movs	r3, #0
 80102bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	f383 8811 	msr	BASEPRI, r3
}
 80102c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80102c6:	bf00      	nop
 80102c8:	370c      	adds	r7, #12
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop
 80102d4:	20000024 	.word	0x20000024
	...

080102e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80102e0:	f3ef 8009 	mrs	r0, PSP
 80102e4:	f3bf 8f6f 	isb	sy
 80102e8:	4b15      	ldr	r3, [pc, #84]	; (8010340 <pxCurrentTCBConst>)
 80102ea:	681a      	ldr	r2, [r3, #0]
 80102ec:	f01e 0f10 	tst.w	lr, #16
 80102f0:	bf08      	it	eq
 80102f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80102f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102fa:	6010      	str	r0, [r2, #0]
 80102fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010304:	f380 8811 	msr	BASEPRI, r0
 8010308:	f3bf 8f4f 	dsb	sy
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f7fe fda0 	bl	800ee54 <vTaskSwitchContext>
 8010314:	f04f 0000 	mov.w	r0, #0
 8010318:	f380 8811 	msr	BASEPRI, r0
 801031c:	bc09      	pop	{r0, r3}
 801031e:	6819      	ldr	r1, [r3, #0]
 8010320:	6808      	ldr	r0, [r1, #0]
 8010322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010326:	f01e 0f10 	tst.w	lr, #16
 801032a:	bf08      	it	eq
 801032c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010330:	f380 8809 	msr	PSP, r0
 8010334:	f3bf 8f6f 	isb	sy
 8010338:	4770      	bx	lr
 801033a:	bf00      	nop
 801033c:	f3af 8000 	nop.w

08010340 <pxCurrentTCBConst>:
 8010340:	20003184 	.word	0x20003184
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010344:	bf00      	nop
 8010346:	bf00      	nop

08010348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
	__asm volatile
 801034e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010352:	f383 8811 	msr	BASEPRI, r3
 8010356:	f3bf 8f6f 	isb	sy
 801035a:	f3bf 8f4f 	dsb	sy
 801035e:	607b      	str	r3, [r7, #4]
}
 8010360:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8010362:	f002 fcf5 	bl	8012d50 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010366:	f7fe fcb7 	bl	800ecd8 <xTaskIncrementTick>
 801036a:	4603      	mov	r3, r0
 801036c:	2b00      	cmp	r3, #0
 801036e:	d006      	beq.n	801037e <xPortSysTickHandler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8010370:	f002 fd4c 	bl	8012e0c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010374:	4b08      	ldr	r3, [pc, #32]	; (8010398 <xPortSysTickHandler+0x50>)
 8010376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801037a:	601a      	str	r2, [r3, #0]
 801037c:	e001      	b.n	8010382 <xPortSysTickHandler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 801037e:	f002 fd29 	bl	8012dd4 <SEGGER_SYSVIEW_RecordExitISR>
 8010382:	2300      	movs	r3, #0
 8010384:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	f383 8811 	msr	BASEPRI, r3
}
 801038c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801038e:	bf00      	nop
 8010390:	3708      	adds	r7, #8
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
 8010396:	bf00      	nop
 8010398:	e000ed04 	.word	0xe000ed04

0801039c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801039c:	b480      	push	{r7}
 801039e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80103a0:	4b0b      	ldr	r3, [pc, #44]	; (80103d0 <vPortSetupTimerInterrupt+0x34>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80103a6:	4b0b      	ldr	r3, [pc, #44]	; (80103d4 <vPortSetupTimerInterrupt+0x38>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80103ac:	4b0a      	ldr	r3, [pc, #40]	; (80103d8 <vPortSetupTimerInterrupt+0x3c>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a0a      	ldr	r2, [pc, #40]	; (80103dc <vPortSetupTimerInterrupt+0x40>)
 80103b2:	fba2 2303 	umull	r2, r3, r2, r3
 80103b6:	099b      	lsrs	r3, r3, #6
 80103b8:	4a09      	ldr	r2, [pc, #36]	; (80103e0 <vPortSetupTimerInterrupt+0x44>)
 80103ba:	3b01      	subs	r3, #1
 80103bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80103be:	4b04      	ldr	r3, [pc, #16]	; (80103d0 <vPortSetupTimerInterrupt+0x34>)
 80103c0:	2207      	movs	r2, #7
 80103c2:	601a      	str	r2, [r3, #0]
}
 80103c4:	bf00      	nop
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr
 80103ce:	bf00      	nop
 80103d0:	e000e010 	.word	0xe000e010
 80103d4:	e000e018 	.word	0xe000e018
 80103d8:	20000004 	.word	0x20000004
 80103dc:	10624dd3 	.word	0x10624dd3
 80103e0:	e000e014 	.word	0xe000e014

080103e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80103e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80103f4 <vPortEnableVFP+0x10>
 80103e8:	6801      	ldr	r1, [r0, #0]
 80103ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80103ee:	6001      	str	r1, [r0, #0]
 80103f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80103f2:	bf00      	nop
 80103f4:	e000ed88 	.word	0xe000ed88

080103f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80103f8:	b480      	push	{r7}
 80103fa:	b085      	sub	sp, #20
 80103fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80103fe:	f3ef 8305 	mrs	r3, IPSR
 8010402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2b0f      	cmp	r3, #15
 8010408:	d914      	bls.n	8010434 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801040a:	4a17      	ldr	r2, [pc, #92]	; (8010468 <vPortValidateInterruptPriority+0x70>)
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	4413      	add	r3, r2
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010414:	4b15      	ldr	r3, [pc, #84]	; (801046c <vPortValidateInterruptPriority+0x74>)
 8010416:	781b      	ldrb	r3, [r3, #0]
 8010418:	7afa      	ldrb	r2, [r7, #11]
 801041a:	429a      	cmp	r2, r3
 801041c:	d20a      	bcs.n	8010434 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801041e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010422:	f383 8811 	msr	BASEPRI, r3
 8010426:	f3bf 8f6f 	isb	sy
 801042a:	f3bf 8f4f 	dsb	sy
 801042e:	607b      	str	r3, [r7, #4]
}
 8010430:	bf00      	nop
 8010432:	e7fe      	b.n	8010432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010434:	4b0e      	ldr	r3, [pc, #56]	; (8010470 <vPortValidateInterruptPriority+0x78>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801043c:	4b0d      	ldr	r3, [pc, #52]	; (8010474 <vPortValidateInterruptPriority+0x7c>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	429a      	cmp	r2, r3
 8010442:	d90a      	bls.n	801045a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010448:	f383 8811 	msr	BASEPRI, r3
 801044c:	f3bf 8f6f 	isb	sy
 8010450:	f3bf 8f4f 	dsb	sy
 8010454:	603b      	str	r3, [r7, #0]
}
 8010456:	bf00      	nop
 8010458:	e7fe      	b.n	8010458 <vPortValidateInterruptPriority+0x60>
	}
 801045a:	bf00      	nop
 801045c:	3714      	adds	r7, #20
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr
 8010466:	bf00      	nop
 8010468:	e000e3f0 	.word	0xe000e3f0
 801046c:	200037b8 	.word	0x200037b8
 8010470:	e000ed0c 	.word	0xe000ed0c
 8010474:	200037bc 	.word	0x200037bc

08010478 <vSetVarulMaxPRIGROUPValue>:
#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 8010478:	b480      	push	{r7}
 801047a:	b085      	sub	sp, #20
 801047c:	af00      	add	r7, sp, #0
	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801047e:	4b27      	ldr	r3, [pc, #156]	; (801051c <vSetVarulMaxPRIGROUPValue+0xa4>)
 8010480:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	b2db      	uxtb	r3, r3
 8010488:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	22ff      	movs	r2, #255	; 0xff
 801048e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	b2db      	uxtb	r3, r3
 8010496:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010498:	78fb      	ldrb	r3, [r7, #3]
 801049a:	b2db      	uxtb	r3, r3
 801049c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80104a0:	b2da      	uxtb	r2, r3
 80104a2:	4b1f      	ldr	r3, [pc, #124]	; (8010520 <vSetVarulMaxPRIGROUPValue+0xa8>)
 80104a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80104a6:	4b1f      	ldr	r3, [pc, #124]	; (8010524 <vSetVarulMaxPRIGROUPValue+0xac>)
 80104a8:	2207      	movs	r2, #7
 80104aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80104ac:	e009      	b.n	80104c2 <vSetVarulMaxPRIGROUPValue+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80104ae:	4b1d      	ldr	r3, [pc, #116]	; (8010524 <vSetVarulMaxPRIGROUPValue+0xac>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	3b01      	subs	r3, #1
 80104b4:	4a1b      	ldr	r2, [pc, #108]	; (8010524 <vSetVarulMaxPRIGROUPValue+0xac>)
 80104b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80104b8:	78fb      	ldrb	r3, [r7, #3]
 80104ba:	b2db      	uxtb	r3, r3
 80104bc:	005b      	lsls	r3, r3, #1
 80104be:	b2db      	uxtb	r3, r3
 80104c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80104c2:	78fb      	ldrb	r3, [r7, #3]
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104ca:	2b80      	cmp	r3, #128	; 0x80
 80104cc:	d0ef      	beq.n	80104ae <vSetVarulMaxPRIGROUPValue+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80104ce:	4b15      	ldr	r3, [pc, #84]	; (8010524 <vSetVarulMaxPRIGROUPValue+0xac>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f1c3 0307 	rsb	r3, r3, #7
 80104d6:	2b04      	cmp	r3, #4
 80104d8:	d00a      	beq.n	80104f0 <vSetVarulMaxPRIGROUPValue+0x78>
	__asm volatile
 80104da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104de:	f383 8811 	msr	BASEPRI, r3
 80104e2:	f3bf 8f6f 	isb	sy
 80104e6:	f3bf 8f4f 	dsb	sy
 80104ea:	60bb      	str	r3, [r7, #8]
}
 80104ec:	bf00      	nop
 80104ee:	e7fe      	b.n	80104ee <vSetVarulMaxPRIGROUPValue+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80104f0:	4b0c      	ldr	r3, [pc, #48]	; (8010524 <vSetVarulMaxPRIGROUPValue+0xac>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	021b      	lsls	r3, r3, #8
 80104f6:	4a0b      	ldr	r2, [pc, #44]	; (8010524 <vSetVarulMaxPRIGROUPValue+0xac>)
 80104f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80104fa:	4b0a      	ldr	r3, [pc, #40]	; (8010524 <vSetVarulMaxPRIGROUPValue+0xac>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010502:	4a08      	ldr	r2, [pc, #32]	; (8010524 <vSetVarulMaxPRIGROUPValue+0xac>)
 8010504:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	b2da      	uxtb	r2, r3
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

}
 801050e:	bf00      	nop
 8010510:	3714      	adds	r7, #20
 8010512:	46bd      	mov	sp, r7
 8010514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010518:	4770      	bx	lr
 801051a:	bf00      	nop
 801051c:	e000e400 	.word	0xe000e400
 8010520:	200037b8 	.word	0x200037b8
 8010524:	200037bc 	.word	0x200037bc

08010528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b08a      	sub	sp, #40	; 0x28
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010530:	2300      	movs	r3, #0
 8010532:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010534:	f7fe fac6 	bl	800eac4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010538:	4b5b      	ldr	r3, [pc, #364]	; (80106a8 <pvPortMalloc+0x180>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d101      	bne.n	8010544 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010540:	f000 f920 	bl	8010784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010544:	4b59      	ldr	r3, [pc, #356]	; (80106ac <pvPortMalloc+0x184>)
 8010546:	681a      	ldr	r2, [r3, #0]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	4013      	ands	r3, r2
 801054c:	2b00      	cmp	r3, #0
 801054e:	f040 8093 	bne.w	8010678 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d01d      	beq.n	8010594 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010558:	2208      	movs	r2, #8
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4413      	add	r3, r2
 801055e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f003 0307 	and.w	r3, r3, #7
 8010566:	2b00      	cmp	r3, #0
 8010568:	d014      	beq.n	8010594 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f023 0307 	bic.w	r3, r3, #7
 8010570:	3308      	adds	r3, #8
 8010572:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f003 0307 	and.w	r3, r3, #7
 801057a:	2b00      	cmp	r3, #0
 801057c:	d00a      	beq.n	8010594 <pvPortMalloc+0x6c>
	__asm volatile
 801057e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010582:	f383 8811 	msr	BASEPRI, r3
 8010586:	f3bf 8f6f 	isb	sy
 801058a:	f3bf 8f4f 	dsb	sy
 801058e:	617b      	str	r3, [r7, #20]
}
 8010590:	bf00      	nop
 8010592:	e7fe      	b.n	8010592 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d06e      	beq.n	8010678 <pvPortMalloc+0x150>
 801059a:	4b45      	ldr	r3, [pc, #276]	; (80106b0 <pvPortMalloc+0x188>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d869      	bhi.n	8010678 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80105a4:	4b43      	ldr	r3, [pc, #268]	; (80106b4 <pvPortMalloc+0x18c>)
 80105a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80105a8:	4b42      	ldr	r3, [pc, #264]	; (80106b4 <pvPortMalloc+0x18c>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105ae:	e004      	b.n	80105ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80105b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80105b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d903      	bls.n	80105cc <pvPortMalloc+0xa4>
 80105c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d1f1      	bne.n	80105b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80105cc:	4b36      	ldr	r3, [pc, #216]	; (80106a8 <pvPortMalloc+0x180>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d050      	beq.n	8010678 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80105d6:	6a3b      	ldr	r3, [r7, #32]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2208      	movs	r2, #8
 80105dc:	4413      	add	r3, r2
 80105de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80105e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e2:	681a      	ldr	r2, [r3, #0]
 80105e4:	6a3b      	ldr	r3, [r7, #32]
 80105e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80105e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ea:	685a      	ldr	r2, [r3, #4]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	1ad2      	subs	r2, r2, r3
 80105f0:	2308      	movs	r3, #8
 80105f2:	005b      	lsls	r3, r3, #1
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d91f      	bls.n	8010638 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80105f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	4413      	add	r3, r2
 80105fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	f003 0307 	and.w	r3, r3, #7
 8010606:	2b00      	cmp	r3, #0
 8010608:	d00a      	beq.n	8010620 <pvPortMalloc+0xf8>
	__asm volatile
 801060a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801060e:	f383 8811 	msr	BASEPRI, r3
 8010612:	f3bf 8f6f 	isb	sy
 8010616:	f3bf 8f4f 	dsb	sy
 801061a:	613b      	str	r3, [r7, #16]
}
 801061c:	bf00      	nop
 801061e:	e7fe      	b.n	801061e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010622:	685a      	ldr	r2, [r3, #4]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	1ad2      	subs	r2, r2, r3
 8010628:	69bb      	ldr	r3, [r7, #24]
 801062a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062e:	687a      	ldr	r2, [r7, #4]
 8010630:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010632:	69b8      	ldr	r0, [r7, #24]
 8010634:	f000 f908 	bl	8010848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010638:	4b1d      	ldr	r3, [pc, #116]	; (80106b0 <pvPortMalloc+0x188>)
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	1ad3      	subs	r3, r2, r3
 8010642:	4a1b      	ldr	r2, [pc, #108]	; (80106b0 <pvPortMalloc+0x188>)
 8010644:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010646:	4b1a      	ldr	r3, [pc, #104]	; (80106b0 <pvPortMalloc+0x188>)
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	4b1b      	ldr	r3, [pc, #108]	; (80106b8 <pvPortMalloc+0x190>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	429a      	cmp	r2, r3
 8010650:	d203      	bcs.n	801065a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010652:	4b17      	ldr	r3, [pc, #92]	; (80106b0 <pvPortMalloc+0x188>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4a18      	ldr	r2, [pc, #96]	; (80106b8 <pvPortMalloc+0x190>)
 8010658:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065c:	685a      	ldr	r2, [r3, #4]
 801065e:	4b13      	ldr	r3, [pc, #76]	; (80106ac <pvPortMalloc+0x184>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	431a      	orrs	r2, r3
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066a:	2200      	movs	r2, #0
 801066c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801066e:	4b13      	ldr	r3, [pc, #76]	; (80106bc <pvPortMalloc+0x194>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	3301      	adds	r3, #1
 8010674:	4a11      	ldr	r2, [pc, #68]	; (80106bc <pvPortMalloc+0x194>)
 8010676:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010678:	f7fe fa6a 	bl	800eb50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	f003 0307 	and.w	r3, r3, #7
 8010682:	2b00      	cmp	r3, #0
 8010684:	d00a      	beq.n	801069c <pvPortMalloc+0x174>
	__asm volatile
 8010686:	f04f 0350 	mov.w	r3, #80	; 0x50
 801068a:	f383 8811 	msr	BASEPRI, r3
 801068e:	f3bf 8f6f 	isb	sy
 8010692:	f3bf 8f4f 	dsb	sy
 8010696:	60fb      	str	r3, [r7, #12]
}
 8010698:	bf00      	nop
 801069a:	e7fe      	b.n	801069a <pvPortMalloc+0x172>
	return pvReturn;
 801069c:	69fb      	ldr	r3, [r7, #28]
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3728      	adds	r7, #40	; 0x28
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	200073c8 	.word	0x200073c8
 80106ac:	200073dc 	.word	0x200073dc
 80106b0:	200073cc 	.word	0x200073cc
 80106b4:	200073c0 	.word	0x200073c0
 80106b8:	200073d0 	.word	0x200073d0
 80106bc:	200073d4 	.word	0x200073d4

080106c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b086      	sub	sp, #24
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d04d      	beq.n	801076e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80106d2:	2308      	movs	r3, #8
 80106d4:	425b      	negs	r3, r3
 80106d6:	697a      	ldr	r2, [r7, #20]
 80106d8:	4413      	add	r3, r2
 80106da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	685a      	ldr	r2, [r3, #4]
 80106e4:	4b24      	ldr	r3, [pc, #144]	; (8010778 <vPortFree+0xb8>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	4013      	ands	r3, r2
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d10a      	bne.n	8010704 <vPortFree+0x44>
	__asm volatile
 80106ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f2:	f383 8811 	msr	BASEPRI, r3
 80106f6:	f3bf 8f6f 	isb	sy
 80106fa:	f3bf 8f4f 	dsb	sy
 80106fe:	60fb      	str	r3, [r7, #12]
}
 8010700:	bf00      	nop
 8010702:	e7fe      	b.n	8010702 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d00a      	beq.n	8010722 <vPortFree+0x62>
	__asm volatile
 801070c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010710:	f383 8811 	msr	BASEPRI, r3
 8010714:	f3bf 8f6f 	isb	sy
 8010718:	f3bf 8f4f 	dsb	sy
 801071c:	60bb      	str	r3, [r7, #8]
}
 801071e:	bf00      	nop
 8010720:	e7fe      	b.n	8010720 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	685a      	ldr	r2, [r3, #4]
 8010726:	4b14      	ldr	r3, [pc, #80]	; (8010778 <vPortFree+0xb8>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	4013      	ands	r3, r2
 801072c:	2b00      	cmp	r3, #0
 801072e:	d01e      	beq.n	801076e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d11a      	bne.n	801076e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	685a      	ldr	r2, [r3, #4]
 801073c:	4b0e      	ldr	r3, [pc, #56]	; (8010778 <vPortFree+0xb8>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	43db      	mvns	r3, r3
 8010742:	401a      	ands	r2, r3
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010748:	f7fe f9bc 	bl	800eac4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	685a      	ldr	r2, [r3, #4]
 8010750:	4b0a      	ldr	r3, [pc, #40]	; (801077c <vPortFree+0xbc>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	4413      	add	r3, r2
 8010756:	4a09      	ldr	r2, [pc, #36]	; (801077c <vPortFree+0xbc>)
 8010758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801075a:	6938      	ldr	r0, [r7, #16]
 801075c:	f000 f874 	bl	8010848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010760:	4b07      	ldr	r3, [pc, #28]	; (8010780 <vPortFree+0xc0>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	3301      	adds	r3, #1
 8010766:	4a06      	ldr	r2, [pc, #24]	; (8010780 <vPortFree+0xc0>)
 8010768:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801076a:	f7fe f9f1 	bl	800eb50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801076e:	bf00      	nop
 8010770:	3718      	adds	r7, #24
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
 8010776:	bf00      	nop
 8010778:	200073dc 	.word	0x200073dc
 801077c:	200073cc 	.word	0x200073cc
 8010780:	200073d8 	.word	0x200073d8

08010784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801078a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801078e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010790:	4b27      	ldr	r3, [pc, #156]	; (8010830 <prvHeapInit+0xac>)
 8010792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f003 0307 	and.w	r3, r3, #7
 801079a:	2b00      	cmp	r3, #0
 801079c:	d00c      	beq.n	80107b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	3307      	adds	r3, #7
 80107a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f023 0307 	bic.w	r3, r3, #7
 80107aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	1ad3      	subs	r3, r2, r3
 80107b2:	4a1f      	ldr	r2, [pc, #124]	; (8010830 <prvHeapInit+0xac>)
 80107b4:	4413      	add	r3, r2
 80107b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80107bc:	4a1d      	ldr	r2, [pc, #116]	; (8010834 <prvHeapInit+0xb0>)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80107c2:	4b1c      	ldr	r3, [pc, #112]	; (8010834 <prvHeapInit+0xb0>)
 80107c4:	2200      	movs	r2, #0
 80107c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	68ba      	ldr	r2, [r7, #8]
 80107cc:	4413      	add	r3, r2
 80107ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80107d0:	2208      	movs	r2, #8
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	1a9b      	subs	r3, r3, r2
 80107d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f023 0307 	bic.w	r3, r3, #7
 80107de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	4a15      	ldr	r2, [pc, #84]	; (8010838 <prvHeapInit+0xb4>)
 80107e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80107e6:	4b14      	ldr	r3, [pc, #80]	; (8010838 <prvHeapInit+0xb4>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2200      	movs	r2, #0
 80107ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80107ee:	4b12      	ldr	r3, [pc, #72]	; (8010838 <prvHeapInit+0xb4>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2200      	movs	r2, #0
 80107f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	68fa      	ldr	r2, [r7, #12]
 80107fe:	1ad2      	subs	r2, r2, r3
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010804:	4b0c      	ldr	r3, [pc, #48]	; (8010838 <prvHeapInit+0xb4>)
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	685b      	ldr	r3, [r3, #4]
 8010810:	4a0a      	ldr	r2, [pc, #40]	; (801083c <prvHeapInit+0xb8>)
 8010812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	4a09      	ldr	r2, [pc, #36]	; (8010840 <prvHeapInit+0xbc>)
 801081a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801081c:	4b09      	ldr	r3, [pc, #36]	; (8010844 <prvHeapInit+0xc0>)
 801081e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010822:	601a      	str	r2, [r3, #0]
}
 8010824:	bf00      	nop
 8010826:	3714      	adds	r7, #20
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr
 8010830:	200037c0 	.word	0x200037c0
 8010834:	200073c0 	.word	0x200073c0
 8010838:	200073c8 	.word	0x200073c8
 801083c:	200073d0 	.word	0x200073d0
 8010840:	200073cc 	.word	0x200073cc
 8010844:	200073dc 	.word	0x200073dc

08010848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010848:	b480      	push	{r7}
 801084a:	b085      	sub	sp, #20
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010850:	4b28      	ldr	r3, [pc, #160]	; (80108f4 <prvInsertBlockIntoFreeList+0xac>)
 8010852:	60fb      	str	r3, [r7, #12]
 8010854:	e002      	b.n	801085c <prvInsertBlockIntoFreeList+0x14>
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	60fb      	str	r3, [r7, #12]
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	429a      	cmp	r2, r3
 8010864:	d8f7      	bhi.n	8010856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	68ba      	ldr	r2, [r7, #8]
 8010870:	4413      	add	r3, r2
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	429a      	cmp	r2, r3
 8010876:	d108      	bne.n	801088a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	685a      	ldr	r2, [r3, #4]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	441a      	add	r2, r3
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	68ba      	ldr	r2, [r7, #8]
 8010894:	441a      	add	r2, r3
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	429a      	cmp	r2, r3
 801089c:	d118      	bne.n	80108d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	4b15      	ldr	r3, [pc, #84]	; (80108f8 <prvInsertBlockIntoFreeList+0xb0>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d00d      	beq.n	80108c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	685a      	ldr	r2, [r3, #4]
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	441a      	add	r2, r3
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	681a      	ldr	r2, [r3, #0]
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	601a      	str	r2, [r3, #0]
 80108c4:	e008      	b.n	80108d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80108c6:	4b0c      	ldr	r3, [pc, #48]	; (80108f8 <prvInsertBlockIntoFreeList+0xb0>)
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	601a      	str	r2, [r3, #0]
 80108ce:	e003      	b.n	80108d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80108d8:	68fa      	ldr	r2, [r7, #12]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d002      	beq.n	80108e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108e6:	bf00      	nop
 80108e8:	3714      	adds	r7, #20
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop
 80108f4:	200073c0 	.word	0x200073c0
 80108f8:	200073c8 	.word	0x200073c8

080108fc <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8010902:	f000 fa29 	bl	8010d58 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8010906:	f644 6320 	movw	r3, #20000	; 0x4e20
 801090a:	2201      	movs	r2, #1
 801090c:	2178      	movs	r1, #120	; 0x78
 801090e:	485b      	ldr	r0, [pc, #364]	; (8010a7c <SSD1306_Init+0x180>)
 8010910:	f7f3 fd9c 	bl	800444c <HAL_I2C_IsDeviceReady>
 8010914:	4603      	mov	r3, r0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d001      	beq.n	801091e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 801091a:	2300      	movs	r3, #0
 801091c:	e0a9      	b.n	8010a72 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 801091e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8010922:	607b      	str	r3, [r7, #4]
	while(p>0)
 8010924:	e002      	b.n	801092c <SSD1306_Init+0x30>
		p--;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	3b01      	subs	r3, #1
 801092a:	607b      	str	r3, [r7, #4]
	while(p>0)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d1f9      	bne.n	8010926 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8010932:	22ae      	movs	r2, #174	; 0xae
 8010934:	2100      	movs	r1, #0
 8010936:	2078      	movs	r0, #120	; 0x78
 8010938:	f000 fa8a 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 801093c:	2220      	movs	r2, #32
 801093e:	2100      	movs	r1, #0
 8010940:	2078      	movs	r0, #120	; 0x78
 8010942:	f000 fa85 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8010946:	2210      	movs	r2, #16
 8010948:	2100      	movs	r1, #0
 801094a:	2078      	movs	r0, #120	; 0x78
 801094c:	f000 fa80 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8010950:	22b0      	movs	r2, #176	; 0xb0
 8010952:	2100      	movs	r1, #0
 8010954:	2078      	movs	r0, #120	; 0x78
 8010956:	f000 fa7b 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 801095a:	22c8      	movs	r2, #200	; 0xc8
 801095c:	2100      	movs	r1, #0
 801095e:	2078      	movs	r0, #120	; 0x78
 8010960:	f000 fa76 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8010964:	2200      	movs	r2, #0
 8010966:	2100      	movs	r1, #0
 8010968:	2078      	movs	r0, #120	; 0x78
 801096a:	f000 fa71 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 801096e:	2210      	movs	r2, #16
 8010970:	2100      	movs	r1, #0
 8010972:	2078      	movs	r0, #120	; 0x78
 8010974:	f000 fa6c 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8010978:	2240      	movs	r2, #64	; 0x40
 801097a:	2100      	movs	r1, #0
 801097c:	2078      	movs	r0, #120	; 0x78
 801097e:	f000 fa67 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8010982:	2281      	movs	r2, #129	; 0x81
 8010984:	2100      	movs	r1, #0
 8010986:	2078      	movs	r0, #120	; 0x78
 8010988:	f000 fa62 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 801098c:	22ff      	movs	r2, #255	; 0xff
 801098e:	2100      	movs	r1, #0
 8010990:	2078      	movs	r0, #120	; 0x78
 8010992:	f000 fa5d 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8010996:	22a1      	movs	r2, #161	; 0xa1
 8010998:	2100      	movs	r1, #0
 801099a:	2078      	movs	r0, #120	; 0x78
 801099c:	f000 fa58 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80109a0:	22a6      	movs	r2, #166	; 0xa6
 80109a2:	2100      	movs	r1, #0
 80109a4:	2078      	movs	r0, #120	; 0x78
 80109a6:	f000 fa53 	bl	8010e50 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80109aa:	22a8      	movs	r2, #168	; 0xa8
 80109ac:	2100      	movs	r1, #0
 80109ae:	2078      	movs	r0, #120	; 0x78
 80109b0:	f000 fa4e 	bl	8010e50 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80109b4:	223f      	movs	r2, #63	; 0x3f
 80109b6:	2100      	movs	r1, #0
 80109b8:	2078      	movs	r0, #120	; 0x78
 80109ba:	f000 fa49 	bl	8010e50 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80109be:	22a4      	movs	r2, #164	; 0xa4
 80109c0:	2100      	movs	r1, #0
 80109c2:	2078      	movs	r0, #120	; 0x78
 80109c4:	f000 fa44 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80109c8:	22d3      	movs	r2, #211	; 0xd3
 80109ca:	2100      	movs	r1, #0
 80109cc:	2078      	movs	r0, #120	; 0x78
 80109ce:	f000 fa3f 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80109d2:	2200      	movs	r2, #0
 80109d4:	2100      	movs	r1, #0
 80109d6:	2078      	movs	r0, #120	; 0x78
 80109d8:	f000 fa3a 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80109dc:	22d5      	movs	r2, #213	; 0xd5
 80109de:	2100      	movs	r1, #0
 80109e0:	2078      	movs	r0, #120	; 0x78
 80109e2:	f000 fa35 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80109e6:	22f0      	movs	r2, #240	; 0xf0
 80109e8:	2100      	movs	r1, #0
 80109ea:	2078      	movs	r0, #120	; 0x78
 80109ec:	f000 fa30 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80109f0:	22d9      	movs	r2, #217	; 0xd9
 80109f2:	2100      	movs	r1, #0
 80109f4:	2078      	movs	r0, #120	; 0x78
 80109f6:	f000 fa2b 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80109fa:	2222      	movs	r2, #34	; 0x22
 80109fc:	2100      	movs	r1, #0
 80109fe:	2078      	movs	r0, #120	; 0x78
 8010a00:	f000 fa26 	bl	8010e50 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8010a04:	22da      	movs	r2, #218	; 0xda
 8010a06:	2100      	movs	r1, #0
 8010a08:	2078      	movs	r0, #120	; 0x78
 8010a0a:	f000 fa21 	bl	8010e50 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8010a0e:	2212      	movs	r2, #18
 8010a10:	2100      	movs	r1, #0
 8010a12:	2078      	movs	r0, #120	; 0x78
 8010a14:	f000 fa1c 	bl	8010e50 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8010a18:	22db      	movs	r2, #219	; 0xdb
 8010a1a:	2100      	movs	r1, #0
 8010a1c:	2078      	movs	r0, #120	; 0x78
 8010a1e:	f000 fa17 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8010a22:	2220      	movs	r2, #32
 8010a24:	2100      	movs	r1, #0
 8010a26:	2078      	movs	r0, #120	; 0x78
 8010a28:	f000 fa12 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8010a2c:	228d      	movs	r2, #141	; 0x8d
 8010a2e:	2100      	movs	r1, #0
 8010a30:	2078      	movs	r0, #120	; 0x78
 8010a32:	f000 fa0d 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8010a36:	2214      	movs	r2, #20
 8010a38:	2100      	movs	r1, #0
 8010a3a:	2078      	movs	r0, #120	; 0x78
 8010a3c:	f000 fa08 	bl	8010e50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8010a40:	22af      	movs	r2, #175	; 0xaf
 8010a42:	2100      	movs	r1, #0
 8010a44:	2078      	movs	r0, #120	; 0x78
 8010a46:	f000 fa03 	bl	8010e50 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8010a4a:	222e      	movs	r2, #46	; 0x2e
 8010a4c:	2100      	movs	r1, #0
 8010a4e:	2078      	movs	r0, #120	; 0x78
 8010a50:	f000 f9fe 	bl	8010e50 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8010a54:	2000      	movs	r0, #0
 8010a56:	f000 f843 	bl	8010ae0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8010a5a:	f000 f813 	bl	8010a84 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8010a5e:	4b08      	ldr	r3, [pc, #32]	; (8010a80 <SSD1306_Init+0x184>)
 8010a60:	2200      	movs	r2, #0
 8010a62:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8010a64:	4b06      	ldr	r3, [pc, #24]	; (8010a80 <SSD1306_Init+0x184>)
 8010a66:	2200      	movs	r2, #0
 8010a68:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8010a6a:	4b05      	ldr	r3, [pc, #20]	; (8010a80 <SSD1306_Init+0x184>)
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8010a70:	2301      	movs	r3, #1
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3708      	adds	r7, #8
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	20002784 	.word	0x20002784
 8010a80:	200077e0 	.word	0x200077e0

08010a84 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	71fb      	strb	r3, [r7, #7]
 8010a8e:	e01d      	b.n	8010acc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8010a90:	79fb      	ldrb	r3, [r7, #7]
 8010a92:	3b50      	subs	r3, #80	; 0x50
 8010a94:	b2db      	uxtb	r3, r3
 8010a96:	461a      	mov	r2, r3
 8010a98:	2100      	movs	r1, #0
 8010a9a:	2078      	movs	r0, #120	; 0x78
 8010a9c:	f000 f9d8 	bl	8010e50 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	2100      	movs	r1, #0
 8010aa4:	2078      	movs	r0, #120	; 0x78
 8010aa6:	f000 f9d3 	bl	8010e50 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8010aaa:	2210      	movs	r2, #16
 8010aac:	2100      	movs	r1, #0
 8010aae:	2078      	movs	r0, #120	; 0x78
 8010ab0:	f000 f9ce 	bl	8010e50 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8010ab4:	79fb      	ldrb	r3, [r7, #7]
 8010ab6:	01db      	lsls	r3, r3, #7
 8010ab8:	4a08      	ldr	r2, [pc, #32]	; (8010adc <SSD1306_UpdateScreen+0x58>)
 8010aba:	441a      	add	r2, r3
 8010abc:	2380      	movs	r3, #128	; 0x80
 8010abe:	2140      	movs	r1, #64	; 0x40
 8010ac0:	2078      	movs	r0, #120	; 0x78
 8010ac2:	f000 f95f 	bl	8010d84 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8010ac6:	79fb      	ldrb	r3, [r7, #7]
 8010ac8:	3301      	adds	r3, #1
 8010aca:	71fb      	strb	r3, [r7, #7]
 8010acc:	79fb      	ldrb	r3, [r7, #7]
 8010ace:	2b07      	cmp	r3, #7
 8010ad0:	d9de      	bls.n	8010a90 <SSD1306_UpdateScreen+0xc>
	}
}
 8010ad2:	bf00      	nop
 8010ad4:	bf00      	nop
 8010ad6:	3708      	adds	r7, #8
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}
 8010adc:	200073e0 	.word	0x200073e0

08010ae0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8010aea:	79fb      	ldrb	r3, [r7, #7]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d101      	bne.n	8010af4 <SSD1306_Fill+0x14>
 8010af0:	2300      	movs	r3, #0
 8010af2:	e000      	b.n	8010af6 <SSD1306_Fill+0x16>
 8010af4:	23ff      	movs	r3, #255	; 0xff
 8010af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010afa:	4619      	mov	r1, r3
 8010afc:	4803      	ldr	r0, [pc, #12]	; (8010b0c <SSD1306_Fill+0x2c>)
 8010afe:	f003 fa28 	bl	8013f52 <memset>
}
 8010b02:	bf00      	nop
 8010b04:	3708      	adds	r7, #8
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
 8010b0a:	bf00      	nop
 8010b0c:	200073e0 	.word	0x200073e0

08010b10 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8010b10:	b480      	push	{r7}
 8010b12:	b083      	sub	sp, #12
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	4603      	mov	r3, r0
 8010b18:	80fb      	strh	r3, [r7, #6]
 8010b1a:	460b      	mov	r3, r1
 8010b1c:	80bb      	strh	r3, [r7, #4]
 8010b1e:	4613      	mov	r3, r2
 8010b20:	70fb      	strb	r3, [r7, #3]
	if (
 8010b22:	88fb      	ldrh	r3, [r7, #6]
 8010b24:	2b7f      	cmp	r3, #127	; 0x7f
 8010b26:	d848      	bhi.n	8010bba <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8010b28:	88bb      	ldrh	r3, [r7, #4]
 8010b2a:	2b3f      	cmp	r3, #63	; 0x3f
 8010b2c:	d845      	bhi.n	8010bba <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8010b2e:	4b26      	ldr	r3, [pc, #152]	; (8010bc8 <SSD1306_DrawPixel+0xb8>)
 8010b30:	791b      	ldrb	r3, [r3, #4]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d006      	beq.n	8010b44 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8010b36:	78fb      	ldrb	r3, [r7, #3]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	bf0c      	ite	eq
 8010b3c:	2301      	moveq	r3, #1
 8010b3e:	2300      	movne	r3, #0
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8010b44:	78fb      	ldrb	r3, [r7, #3]
 8010b46:	2b01      	cmp	r3, #1
 8010b48:	d11a      	bne.n	8010b80 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8010b4a:	88fa      	ldrh	r2, [r7, #6]
 8010b4c:	88bb      	ldrh	r3, [r7, #4]
 8010b4e:	08db      	lsrs	r3, r3, #3
 8010b50:	b298      	uxth	r0, r3
 8010b52:	4603      	mov	r3, r0
 8010b54:	01db      	lsls	r3, r3, #7
 8010b56:	4413      	add	r3, r2
 8010b58:	4a1c      	ldr	r2, [pc, #112]	; (8010bcc <SSD1306_DrawPixel+0xbc>)
 8010b5a:	5cd3      	ldrb	r3, [r2, r3]
 8010b5c:	b25a      	sxtb	r2, r3
 8010b5e:	88bb      	ldrh	r3, [r7, #4]
 8010b60:	f003 0307 	and.w	r3, r3, #7
 8010b64:	2101      	movs	r1, #1
 8010b66:	fa01 f303 	lsl.w	r3, r1, r3
 8010b6a:	b25b      	sxtb	r3, r3
 8010b6c:	4313      	orrs	r3, r2
 8010b6e:	b259      	sxtb	r1, r3
 8010b70:	88fa      	ldrh	r2, [r7, #6]
 8010b72:	4603      	mov	r3, r0
 8010b74:	01db      	lsls	r3, r3, #7
 8010b76:	4413      	add	r3, r2
 8010b78:	b2c9      	uxtb	r1, r1
 8010b7a:	4a14      	ldr	r2, [pc, #80]	; (8010bcc <SSD1306_DrawPixel+0xbc>)
 8010b7c:	54d1      	strb	r1, [r2, r3]
 8010b7e:	e01d      	b.n	8010bbc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8010b80:	88fa      	ldrh	r2, [r7, #6]
 8010b82:	88bb      	ldrh	r3, [r7, #4]
 8010b84:	08db      	lsrs	r3, r3, #3
 8010b86:	b298      	uxth	r0, r3
 8010b88:	4603      	mov	r3, r0
 8010b8a:	01db      	lsls	r3, r3, #7
 8010b8c:	4413      	add	r3, r2
 8010b8e:	4a0f      	ldr	r2, [pc, #60]	; (8010bcc <SSD1306_DrawPixel+0xbc>)
 8010b90:	5cd3      	ldrb	r3, [r2, r3]
 8010b92:	b25a      	sxtb	r2, r3
 8010b94:	88bb      	ldrh	r3, [r7, #4]
 8010b96:	f003 0307 	and.w	r3, r3, #7
 8010b9a:	2101      	movs	r1, #1
 8010b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8010ba0:	b25b      	sxtb	r3, r3
 8010ba2:	43db      	mvns	r3, r3
 8010ba4:	b25b      	sxtb	r3, r3
 8010ba6:	4013      	ands	r3, r2
 8010ba8:	b259      	sxtb	r1, r3
 8010baa:	88fa      	ldrh	r2, [r7, #6]
 8010bac:	4603      	mov	r3, r0
 8010bae:	01db      	lsls	r3, r3, #7
 8010bb0:	4413      	add	r3, r2
 8010bb2:	b2c9      	uxtb	r1, r1
 8010bb4:	4a05      	ldr	r2, [pc, #20]	; (8010bcc <SSD1306_DrawPixel+0xbc>)
 8010bb6:	54d1      	strb	r1, [r2, r3]
 8010bb8:	e000      	b.n	8010bbc <SSD1306_DrawPixel+0xac>
		return;
 8010bba:	bf00      	nop
	}
}
 8010bbc:	370c      	adds	r7, #12
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop
 8010bc8:	200077e0 	.word	0x200077e0
 8010bcc:	200073e0 	.word	0x200073e0

08010bd0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8010bd0:	b480      	push	{r7}
 8010bd2:	b083      	sub	sp, #12
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	460a      	mov	r2, r1
 8010bda:	80fb      	strh	r3, [r7, #6]
 8010bdc:	4613      	mov	r3, r2
 8010bde:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8010be0:	4a05      	ldr	r2, [pc, #20]	; (8010bf8 <SSD1306_GotoXY+0x28>)
 8010be2:	88fb      	ldrh	r3, [r7, #6]
 8010be4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8010be6:	4a04      	ldr	r2, [pc, #16]	; (8010bf8 <SSD1306_GotoXY+0x28>)
 8010be8:	88bb      	ldrh	r3, [r7, #4]
 8010bea:	8053      	strh	r3, [r2, #2]
}
 8010bec:	bf00      	nop
 8010bee:	370c      	adds	r7, #12
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr
 8010bf8:	200077e0 	.word	0x200077e0

08010bfc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b086      	sub	sp, #24
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	4603      	mov	r3, r0
 8010c04:	6039      	str	r1, [r7, #0]
 8010c06:	71fb      	strb	r3, [r7, #7]
 8010c08:	4613      	mov	r3, r2
 8010c0a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8010c0c:	4b3a      	ldr	r3, [pc, #232]	; (8010cf8 <SSD1306_Putc+0xfc>)
 8010c0e:	881b      	ldrh	r3, [r3, #0]
 8010c10:	461a      	mov	r2, r3
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	4413      	add	r3, r2
	if (
 8010c18:	2b7f      	cmp	r3, #127	; 0x7f
 8010c1a:	dc07      	bgt.n	8010c2c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8010c1c:	4b36      	ldr	r3, [pc, #216]	; (8010cf8 <SSD1306_Putc+0xfc>)
 8010c1e:	885b      	ldrh	r3, [r3, #2]
 8010c20:	461a      	mov	r2, r3
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	785b      	ldrb	r3, [r3, #1]
 8010c26:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8010c28:	2b3f      	cmp	r3, #63	; 0x3f
 8010c2a:	dd01      	ble.n	8010c30 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	e05e      	b.n	8010cee <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8010c30:	2300      	movs	r3, #0
 8010c32:	617b      	str	r3, [r7, #20]
 8010c34:	e04b      	b.n	8010cce <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	685a      	ldr	r2, [r3, #4]
 8010c3a:	79fb      	ldrb	r3, [r7, #7]
 8010c3c:	3b20      	subs	r3, #32
 8010c3e:	6839      	ldr	r1, [r7, #0]
 8010c40:	7849      	ldrb	r1, [r1, #1]
 8010c42:	fb01 f303 	mul.w	r3, r1, r3
 8010c46:	4619      	mov	r1, r3
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	440b      	add	r3, r1
 8010c4c:	005b      	lsls	r3, r3, #1
 8010c4e:	4413      	add	r3, r2
 8010c50:	881b      	ldrh	r3, [r3, #0]
 8010c52:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8010c54:	2300      	movs	r3, #0
 8010c56:	613b      	str	r3, [r7, #16]
 8010c58:	e030      	b.n	8010cbc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8010c5a:	68fa      	ldr	r2, [r7, #12]
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d010      	beq.n	8010c8c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8010c6a:	4b23      	ldr	r3, [pc, #140]	; (8010cf8 <SSD1306_Putc+0xfc>)
 8010c6c:	881a      	ldrh	r2, [r3, #0]
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	4413      	add	r3, r2
 8010c74:	b298      	uxth	r0, r3
 8010c76:	4b20      	ldr	r3, [pc, #128]	; (8010cf8 <SSD1306_Putc+0xfc>)
 8010c78:	885a      	ldrh	r2, [r3, #2]
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	4413      	add	r3, r2
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	79ba      	ldrb	r2, [r7, #6]
 8010c84:	4619      	mov	r1, r3
 8010c86:	f7ff ff43 	bl	8010b10 <SSD1306_DrawPixel>
 8010c8a:	e014      	b.n	8010cb6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8010c8c:	4b1a      	ldr	r3, [pc, #104]	; (8010cf8 <SSD1306_Putc+0xfc>)
 8010c8e:	881a      	ldrh	r2, [r3, #0]
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	4413      	add	r3, r2
 8010c96:	b298      	uxth	r0, r3
 8010c98:	4b17      	ldr	r3, [pc, #92]	; (8010cf8 <SSD1306_Putc+0xfc>)
 8010c9a:	885a      	ldrh	r2, [r3, #2]
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	4413      	add	r3, r2
 8010ca2:	b299      	uxth	r1, r3
 8010ca4:	79bb      	ldrb	r3, [r7, #6]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	bf0c      	ite	eq
 8010caa:	2301      	moveq	r3, #1
 8010cac:	2300      	movne	r3, #0
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	f7ff ff2d 	bl	8010b10 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	3301      	adds	r3, #1
 8010cba:	613b      	str	r3, [r7, #16]
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d3c8      	bcc.n	8010c5a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	3301      	adds	r3, #1
 8010ccc:	617b      	str	r3, [r7, #20]
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	785b      	ldrb	r3, [r3, #1]
 8010cd2:	461a      	mov	r2, r3
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d3ad      	bcc.n	8010c36 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8010cda:	4b07      	ldr	r3, [pc, #28]	; (8010cf8 <SSD1306_Putc+0xfc>)
 8010cdc:	881a      	ldrh	r2, [r3, #0]
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	781b      	ldrb	r3, [r3, #0]
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	4413      	add	r3, r2
 8010ce6:	b29a      	uxth	r2, r3
 8010ce8:	4b03      	ldr	r3, [pc, #12]	; (8010cf8 <SSD1306_Putc+0xfc>)
 8010cea:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8010cec:	79fb      	ldrb	r3, [r7, #7]
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3718      	adds	r7, #24
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	200077e0 	.word	0x200077e0

08010cfc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b084      	sub	sp, #16
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	60f8      	str	r0, [r7, #12]
 8010d04:	60b9      	str	r1, [r7, #8]
 8010d06:	4613      	mov	r3, r2
 8010d08:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8010d0a:	e012      	b.n	8010d32 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	781b      	ldrb	r3, [r3, #0]
 8010d10:	79fa      	ldrb	r2, [r7, #7]
 8010d12:	68b9      	ldr	r1, [r7, #8]
 8010d14:	4618      	mov	r0, r3
 8010d16:	f7ff ff71 	bl	8010bfc <SSD1306_Putc>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	781b      	ldrb	r3, [r3, #0]
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d002      	beq.n	8010d2c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	e008      	b.n	8010d3e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	3301      	adds	r3, #1
 8010d30:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d1e8      	bne.n	8010d0c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	781b      	ldrb	r3, [r3, #0]
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	3710      	adds	r7, #16
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}

08010d46 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8010d46:	b580      	push	{r7, lr}
 8010d48:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	f7ff fec8 	bl	8010ae0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8010d50:	f7ff fe98 	bl	8010a84 <SSD1306_UpdateScreen>
}
 8010d54:	bf00      	nop
 8010d56:	bd80      	pop	{r7, pc}

08010d58 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8010d58:	b480      	push	{r7}
 8010d5a:	b083      	sub	sp, #12
 8010d5c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8010d5e:	4b08      	ldr	r3, [pc, #32]	; (8010d80 <ssd1306_I2C_Init+0x28>)
 8010d60:	607b      	str	r3, [r7, #4]
	while(p>0)
 8010d62:	e002      	b.n	8010d6a <ssd1306_I2C_Init+0x12>
		p--;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	3b01      	subs	r3, #1
 8010d68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d1f9      	bne.n	8010d64 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8010d70:	bf00      	nop
 8010d72:	bf00      	nop
 8010d74:	370c      	adds	r7, #12
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr
 8010d7e:	bf00      	nop
 8010d80:	0003d090 	.word	0x0003d090

08010d84 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8010d84:	b590      	push	{r4, r7, lr}
 8010d86:	b0c7      	sub	sp, #284	; 0x11c
 8010d88:	af02      	add	r7, sp, #8
 8010d8a:	4604      	mov	r4, r0
 8010d8c:	4608      	mov	r0, r1
 8010d8e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8010d92:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8010d96:	600a      	str	r2, [r1, #0]
 8010d98:	4619      	mov	r1, r3
 8010d9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d9e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8010da2:	4622      	mov	r2, r4
 8010da4:	701a      	strb	r2, [r3, #0]
 8010da6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010daa:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8010dae:	4602      	mov	r2, r0
 8010db0:	701a      	strb	r2, [r3, #0]
 8010db2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010db6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010dba:	460a      	mov	r2, r1
 8010dbc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8010dbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010dc6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010dca:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8010dce:	7812      	ldrb	r2, [r2, #0]
 8010dd0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8010dd8:	e015      	b.n	8010e06 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8010dda:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8010dde:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010de2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8010de6:	6812      	ldr	r2, [r2, #0]
 8010de8:	441a      	add	r2, r3
 8010dea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8010dee:	3301      	adds	r3, #1
 8010df0:	7811      	ldrb	r1, [r2, #0]
 8010df2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010df6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8010dfa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8010dfc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8010e00:	3301      	adds	r3, #1
 8010e02:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8010e06:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010e10:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8010e14:	8812      	ldrh	r2, [r2, #0]
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d8df      	bhi.n	8010dda <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8010e1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e1e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	b299      	uxth	r1, r3
 8010e26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010e2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010e2e:	881b      	ldrh	r3, [r3, #0]
 8010e30:	3301      	adds	r3, #1
 8010e32:	b29b      	uxth	r3, r3
 8010e34:	f107 020c 	add.w	r2, r7, #12
 8010e38:	200a      	movs	r0, #10
 8010e3a:	9000      	str	r0, [sp, #0]
 8010e3c:	4803      	ldr	r0, [pc, #12]	; (8010e4c <ssd1306_I2C_WriteMulti+0xc8>)
 8010e3e:	f7f3 fa07 	bl	8004250 <HAL_I2C_Master_Transmit>
}
 8010e42:	bf00      	nop
 8010e44:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd90      	pop	{r4, r7, pc}
 8010e4c:	20002784 	.word	0x20002784

08010e50 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b086      	sub	sp, #24
 8010e54:	af02      	add	r7, sp, #8
 8010e56:	4603      	mov	r3, r0
 8010e58:	71fb      	strb	r3, [r7, #7]
 8010e5a:	460b      	mov	r3, r1
 8010e5c:	71bb      	strb	r3, [r7, #6]
 8010e5e:	4613      	mov	r3, r2
 8010e60:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8010e62:	79bb      	ldrb	r3, [r7, #6]
 8010e64:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8010e66:	797b      	ldrb	r3, [r7, #5]
 8010e68:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8010e6a:	79fb      	ldrb	r3, [r7, #7]
 8010e6c:	b299      	uxth	r1, r3
 8010e6e:	f107 020c 	add.w	r2, r7, #12
 8010e72:	230a      	movs	r3, #10
 8010e74:	9300      	str	r3, [sp, #0]
 8010e76:	2302      	movs	r3, #2
 8010e78:	4803      	ldr	r0, [pc, #12]	; (8010e88 <ssd1306_I2C_Write+0x38>)
 8010e7a:	f7f3 f9e9 	bl	8004250 <HAL_I2C_Master_Transmit>
}
 8010e7e:	bf00      	nop
 8010e80:	3710      	adds	r7, #16
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	20002784 	.word	0x20002784

08010e8c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8010e90:	2200      	movs	r2, #0
 8010e92:	2108      	movs	r1, #8
 8010e94:	4803      	ldr	r0, [pc, #12]	; (8010ea4 <SELECT+0x18>)
 8010e96:	f7f3 f865 	bl	8003f64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8010e9a:	2001      	movs	r0, #1
 8010e9c:	f7f1 fc64 	bl	8002768 <HAL_Delay>
}
 8010ea0:	bf00      	nop
 8010ea2:	bd80      	pop	{r7, pc}
 8010ea4:	40020800 	.word	0x40020800

08010ea8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8010eac:	2201      	movs	r2, #1
 8010eae:	2108      	movs	r1, #8
 8010eb0:	4803      	ldr	r0, [pc, #12]	; (8010ec0 <DESELECT+0x18>)
 8010eb2:	f7f3 f857 	bl	8003f64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8010eb6:	2001      	movs	r0, #1
 8010eb8:	f7f1 fc56 	bl	8002768 <HAL_Delay>
}
 8010ebc:	bf00      	nop
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	40020800 	.word	0x40020800

08010ec4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	4603      	mov	r3, r0
 8010ecc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010ece:	bf00      	nop
 8010ed0:	4b08      	ldr	r3, [pc, #32]	; (8010ef4 <SPI_TxByte+0x30>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	689b      	ldr	r3, [r3, #8]
 8010ed6:	f003 0302 	and.w	r3, r3, #2
 8010eda:	2b02      	cmp	r3, #2
 8010edc:	d1f8      	bne.n	8010ed0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8010ede:	1df9      	adds	r1, r7, #7
 8010ee0:	2364      	movs	r3, #100	; 0x64
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	4803      	ldr	r0, [pc, #12]	; (8010ef4 <SPI_TxByte+0x30>)
 8010ee6:	f7f7 f890 	bl	800800a <HAL_SPI_Transmit>
}
 8010eea:	bf00      	nop
 8010eec:	3708      	adds	r7, #8
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	200027f8 	.word	0x200027f8

08010ef8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	460b      	mov	r3, r1
 8010f02:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010f04:	bf00      	nop
 8010f06:	4b08      	ldr	r3, [pc, #32]	; (8010f28 <SPI_TxBuffer+0x30>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	689b      	ldr	r3, [r3, #8]
 8010f0c:	f003 0302 	and.w	r3, r3, #2
 8010f10:	2b02      	cmp	r3, #2
 8010f12:	d1f8      	bne.n	8010f06 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8010f14:	887a      	ldrh	r2, [r7, #2]
 8010f16:	2364      	movs	r3, #100	; 0x64
 8010f18:	6879      	ldr	r1, [r7, #4]
 8010f1a:	4803      	ldr	r0, [pc, #12]	; (8010f28 <SPI_TxBuffer+0x30>)
 8010f1c:	f7f7 f875 	bl	800800a <HAL_SPI_Transmit>
}
 8010f20:	bf00      	nop
 8010f22:	3708      	adds	r7, #8
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	200027f8 	.word	0x200027f8

08010f2c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8010f32:	23ff      	movs	r3, #255	; 0xff
 8010f34:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010f36:	bf00      	nop
 8010f38:	4b09      	ldr	r3, [pc, #36]	; (8010f60 <SPI_RxByte+0x34>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	689b      	ldr	r3, [r3, #8]
 8010f3e:	f003 0302 	and.w	r3, r3, #2
 8010f42:	2b02      	cmp	r3, #2
 8010f44:	d1f8      	bne.n	8010f38 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8010f46:	1dba      	adds	r2, r7, #6
 8010f48:	1df9      	adds	r1, r7, #7
 8010f4a:	2364      	movs	r3, #100	; 0x64
 8010f4c:	9300      	str	r3, [sp, #0]
 8010f4e:	2301      	movs	r3, #1
 8010f50:	4803      	ldr	r0, [pc, #12]	; (8010f60 <SPI_RxByte+0x34>)
 8010f52:	f7f7 f996 	bl	8008282 <HAL_SPI_TransmitReceive>

	return data;
 8010f56:	79bb      	ldrb	r3, [r7, #6]
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	200027f8 	.word	0x200027f8

08010f64 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8010f6c:	f7ff ffde 	bl	8010f2c <SPI_RxByte>
 8010f70:	4603      	mov	r3, r0
 8010f72:	461a      	mov	r2, r3
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	701a      	strb	r2, [r3, #0]
}
 8010f78:	bf00      	nop
 8010f7a:	3708      	adds	r7, #8
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8010f86:	4b0a      	ldr	r3, [pc, #40]	; (8010fb0 <SD_ReadyWait+0x30>)
 8010f88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8010f8c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8010f8e:	f7ff ffcd 	bl	8010f2c <SPI_RxByte>
 8010f92:	4603      	mov	r3, r0
 8010f94:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8010f96:	79fb      	ldrb	r3, [r7, #7]
 8010f98:	2bff      	cmp	r3, #255	; 0xff
 8010f9a:	d003      	beq.n	8010fa4 <SD_ReadyWait+0x24>
 8010f9c:	4b04      	ldr	r3, [pc, #16]	; (8010fb0 <SD_ReadyWait+0x30>)
 8010f9e:	881b      	ldrh	r3, [r3, #0]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d1f4      	bne.n	8010f8e <SD_ReadyWait+0xe>

	return res;
 8010fa4:	79fb      	ldrb	r3, [r7, #7]
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3708      	adds	r7, #8
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	2000299a 	.word	0x2000299a

08010fb4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b084      	sub	sp, #16
 8010fb8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8010fba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8010fbe:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8010fc0:	f7ff ff72 	bl	8010ea8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	60bb      	str	r3, [r7, #8]
 8010fc8:	e005      	b.n	8010fd6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8010fca:	20ff      	movs	r0, #255	; 0xff
 8010fcc:	f7ff ff7a 	bl	8010ec4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	60bb      	str	r3, [r7, #8]
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	2b09      	cmp	r3, #9
 8010fda:	ddf6      	ble.n	8010fca <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8010fdc:	f7ff ff56 	bl	8010e8c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8010fe0:	2340      	movs	r3, #64	; 0x40
 8010fe2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8010fec:	2300      	movs	r3, #0
 8010fee:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8010ff4:	2395      	movs	r3, #149	; 0x95
 8010ff6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8010ff8:	463b      	mov	r3, r7
 8010ffa:	2106      	movs	r1, #6
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7ff ff7b 	bl	8010ef8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8011002:	e002      	b.n	801100a <SD_PowerOn+0x56>
	{
		cnt--;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	3b01      	subs	r3, #1
 8011008:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 801100a:	f7ff ff8f 	bl	8010f2c <SPI_RxByte>
 801100e:	4603      	mov	r3, r0
 8011010:	2b01      	cmp	r3, #1
 8011012:	d002      	beq.n	801101a <SD_PowerOn+0x66>
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d1f4      	bne.n	8011004 <SD_PowerOn+0x50>
	}

	DESELECT();
 801101a:	f7ff ff45 	bl	8010ea8 <DESELECT>
	SPI_TxByte(0XFF);
 801101e:	20ff      	movs	r0, #255	; 0xff
 8011020:	f7ff ff50 	bl	8010ec4 <SPI_TxByte>

	PowerFlag = 1;
 8011024:	4b03      	ldr	r3, [pc, #12]	; (8011034 <SD_PowerOn+0x80>)
 8011026:	2201      	movs	r2, #1
 8011028:	701a      	strb	r2, [r3, #0]
}
 801102a:	bf00      	nop
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	200077e7 	.word	0x200077e7

08011038 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8011038:	b480      	push	{r7}
 801103a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 801103c:	4b03      	ldr	r3, [pc, #12]	; (801104c <SD_PowerOff+0x14>)
 801103e:	2200      	movs	r2, #0
 8011040:	701a      	strb	r2, [r3, #0]
}
 8011042:	bf00      	nop
 8011044:	46bd      	mov	sp, r7
 8011046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104a:	4770      	bx	lr
 801104c:	200077e7 	.word	0x200077e7

08011050 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8011050:	b480      	push	{r7}
 8011052:	af00      	add	r7, sp, #0
	return PowerFlag;
 8011054:	4b03      	ldr	r3, [pc, #12]	; (8011064 <SD_CheckPower+0x14>)
 8011056:	781b      	ldrb	r3, [r3, #0]
}
 8011058:	4618      	mov	r0, r3
 801105a:	46bd      	mov	sp, r7
 801105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011060:	4770      	bx	lr
 8011062:	bf00      	nop
 8011064:	200077e7 	.word	0x200077e7

08011068 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b084      	sub	sp, #16
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8011072:	4b13      	ldr	r3, [pc, #76]	; (80110c0 <SD_RxDataBlock+0x58>)
 8011074:	22c8      	movs	r2, #200	; 0xc8
 8011076:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8011078:	f7ff ff58 	bl	8010f2c <SPI_RxByte>
 801107c:	4603      	mov	r3, r0
 801107e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8011080:	7bfb      	ldrb	r3, [r7, #15]
 8011082:	2bff      	cmp	r3, #255	; 0xff
 8011084:	d103      	bne.n	801108e <SD_RxDataBlock+0x26>
 8011086:	4b0e      	ldr	r3, [pc, #56]	; (80110c0 <SD_RxDataBlock+0x58>)
 8011088:	881b      	ldrh	r3, [r3, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d1f4      	bne.n	8011078 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 801108e:	7bfb      	ldrb	r3, [r7, #15]
 8011090:	2bfe      	cmp	r3, #254	; 0xfe
 8011092:	d001      	beq.n	8011098 <SD_RxDataBlock+0x30>
 8011094:	2300      	movs	r3, #0
 8011096:	e00f      	b.n	80110b8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	1c5a      	adds	r2, r3, #1
 801109c:	607a      	str	r2, [r7, #4]
 801109e:	4618      	mov	r0, r3
 80110a0:	f7ff ff60 	bl	8010f64 <SPI_RxBytePtr>
	} while(len--);
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	1e5a      	subs	r2, r3, #1
 80110a8:	603a      	str	r2, [r7, #0]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d1f4      	bne.n	8011098 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80110ae:	f7ff ff3d 	bl	8010f2c <SPI_RxByte>
	SPI_RxByte();
 80110b2:	f7ff ff3b 	bl	8010f2c <SPI_RxByte>

	return TRUE;
 80110b6:	2301      	movs	r3, #1
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3710      	adds	r7, #16
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	20002999 	.word	0x20002999

080110c4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b084      	sub	sp, #16
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	460b      	mov	r3, r1
 80110ce:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80110d0:	2300      	movs	r3, #0
 80110d2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80110d4:	f7ff ff54 	bl	8010f80 <SD_ReadyWait>
 80110d8:	4603      	mov	r3, r0
 80110da:	2bff      	cmp	r3, #255	; 0xff
 80110dc:	d001      	beq.n	80110e2 <SD_TxDataBlock+0x1e>
 80110de:	2300      	movs	r3, #0
 80110e0:	e02f      	b.n	8011142 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80110e2:	78fb      	ldrb	r3, [r7, #3]
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7ff feed 	bl	8010ec4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80110ea:	78fb      	ldrb	r3, [r7, #3]
 80110ec:	2bfd      	cmp	r3, #253	; 0xfd
 80110ee:	d020      	beq.n	8011132 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80110f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7ff feff 	bl	8010ef8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80110fa:	f7ff ff17 	bl	8010f2c <SPI_RxByte>
		SPI_RxByte();
 80110fe:	f7ff ff15 	bl	8010f2c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8011102:	e00b      	b.n	801111c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8011104:	f7ff ff12 	bl	8010f2c <SPI_RxByte>
 8011108:	4603      	mov	r3, r0
 801110a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 801110c:	7bfb      	ldrb	r3, [r7, #15]
 801110e:	f003 031f 	and.w	r3, r3, #31
 8011112:	2b05      	cmp	r3, #5
 8011114:	d006      	beq.n	8011124 <SD_TxDataBlock+0x60>
			i++;
 8011116:	7bbb      	ldrb	r3, [r7, #14]
 8011118:	3301      	adds	r3, #1
 801111a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 801111c:	7bbb      	ldrb	r3, [r7, #14]
 801111e:	2b40      	cmp	r3, #64	; 0x40
 8011120:	d9f0      	bls.n	8011104 <SD_TxDataBlock+0x40>
 8011122:	e000      	b.n	8011126 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8011124:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8011126:	bf00      	nop
 8011128:	f7ff ff00 	bl	8010f2c <SPI_RxByte>
 801112c:	4603      	mov	r3, r0
 801112e:	2b00      	cmp	r3, #0
 8011130:	d0fa      	beq.n	8011128 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8011132:	7bfb      	ldrb	r3, [r7, #15]
 8011134:	f003 031f 	and.w	r3, r3, #31
 8011138:	2b05      	cmp	r3, #5
 801113a:	d101      	bne.n	8011140 <SD_TxDataBlock+0x7c>
 801113c:	2301      	movs	r3, #1
 801113e:	e000      	b.n	8011142 <SD_TxDataBlock+0x7e>

	return FALSE;
 8011140:	2300      	movs	r3, #0
}
 8011142:	4618      	mov	r0, r3
 8011144:	3710      	adds	r7, #16
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}

0801114a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 801114a:	b580      	push	{r7, lr}
 801114c:	b084      	sub	sp, #16
 801114e:	af00      	add	r7, sp, #0
 8011150:	4603      	mov	r3, r0
 8011152:	6039      	str	r1, [r7, #0]
 8011154:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8011156:	f7ff ff13 	bl	8010f80 <SD_ReadyWait>
 801115a:	4603      	mov	r3, r0
 801115c:	2bff      	cmp	r3, #255	; 0xff
 801115e:	d001      	beq.n	8011164 <SD_SendCmd+0x1a>
 8011160:	23ff      	movs	r3, #255	; 0xff
 8011162:	e042      	b.n	80111ea <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8011164:	79fb      	ldrb	r3, [r7, #7]
 8011166:	4618      	mov	r0, r3
 8011168:	f7ff feac 	bl	8010ec4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	0e1b      	lsrs	r3, r3, #24
 8011170:	b2db      	uxtb	r3, r3
 8011172:	4618      	mov	r0, r3
 8011174:	f7ff fea6 	bl	8010ec4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	0c1b      	lsrs	r3, r3, #16
 801117c:	b2db      	uxtb	r3, r3
 801117e:	4618      	mov	r0, r3
 8011180:	f7ff fea0 	bl	8010ec4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	0a1b      	lsrs	r3, r3, #8
 8011188:	b2db      	uxtb	r3, r3
 801118a:	4618      	mov	r0, r3
 801118c:	f7ff fe9a 	bl	8010ec4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	b2db      	uxtb	r3, r3
 8011194:	4618      	mov	r0, r3
 8011196:	f7ff fe95 	bl	8010ec4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 801119a:	79fb      	ldrb	r3, [r7, #7]
 801119c:	2b40      	cmp	r3, #64	; 0x40
 801119e:	d102      	bne.n	80111a6 <SD_SendCmd+0x5c>
 80111a0:	2395      	movs	r3, #149	; 0x95
 80111a2:	73fb      	strb	r3, [r7, #15]
 80111a4:	e007      	b.n	80111b6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80111a6:	79fb      	ldrb	r3, [r7, #7]
 80111a8:	2b48      	cmp	r3, #72	; 0x48
 80111aa:	d102      	bne.n	80111b2 <SD_SendCmd+0x68>
 80111ac:	2387      	movs	r3, #135	; 0x87
 80111ae:	73fb      	strb	r3, [r7, #15]
 80111b0:	e001      	b.n	80111b6 <SD_SendCmd+0x6c>
	else crc = 1;
 80111b2:	2301      	movs	r3, #1
 80111b4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80111b6:	7bfb      	ldrb	r3, [r7, #15]
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7ff fe83 	bl	8010ec4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80111be:	79fb      	ldrb	r3, [r7, #7]
 80111c0:	2b4c      	cmp	r3, #76	; 0x4c
 80111c2:	d101      	bne.n	80111c8 <SD_SendCmd+0x7e>
 80111c4:	f7ff feb2 	bl	8010f2c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80111c8:	230a      	movs	r3, #10
 80111ca:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80111cc:	f7ff feae 	bl	8010f2c <SPI_RxByte>
 80111d0:	4603      	mov	r3, r0
 80111d2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80111d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	da05      	bge.n	80111e8 <SD_SendCmd+0x9e>
 80111dc:	7bbb      	ldrb	r3, [r7, #14]
 80111de:	3b01      	subs	r3, #1
 80111e0:	73bb      	strb	r3, [r7, #14]
 80111e2:	7bbb      	ldrb	r3, [r7, #14]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d1f1      	bne.n	80111cc <SD_SendCmd+0x82>

	return res;
 80111e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3710      	adds	r7, #16
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
	...

080111f4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80111f4:	b590      	push	{r4, r7, lr}
 80111f6:	b085      	sub	sp, #20
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	4603      	mov	r3, r0
 80111fc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80111fe:	79fb      	ldrb	r3, [r7, #7]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d001      	beq.n	8011208 <SD_disk_initialize+0x14>
 8011204:	2301      	movs	r3, #1
 8011206:	e0d1      	b.n	80113ac <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8011208:	4b6a      	ldr	r3, [pc, #424]	; (80113b4 <SD_disk_initialize+0x1c0>)
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	b2db      	uxtb	r3, r3
 801120e:	f003 0302 	and.w	r3, r3, #2
 8011212:	2b00      	cmp	r3, #0
 8011214:	d003      	beq.n	801121e <SD_disk_initialize+0x2a>
 8011216:	4b67      	ldr	r3, [pc, #412]	; (80113b4 <SD_disk_initialize+0x1c0>)
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	b2db      	uxtb	r3, r3
 801121c:	e0c6      	b.n	80113ac <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 801121e:	f7ff fec9 	bl	8010fb4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8011222:	f7ff fe33 	bl	8010e8c <SELECT>

	/* check disk type */
	type = 0;
 8011226:	2300      	movs	r3, #0
 8011228:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 801122a:	2100      	movs	r1, #0
 801122c:	2040      	movs	r0, #64	; 0x40
 801122e:	f7ff ff8c 	bl	801114a <SD_SendCmd>
 8011232:	4603      	mov	r3, r0
 8011234:	2b01      	cmp	r3, #1
 8011236:	f040 80a1 	bne.w	801137c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 801123a:	4b5f      	ldr	r3, [pc, #380]	; (80113b8 <SD_disk_initialize+0x1c4>)
 801123c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011240:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8011242:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011246:	2048      	movs	r0, #72	; 0x48
 8011248:	f7ff ff7f 	bl	801114a <SD_SendCmd>
 801124c:	4603      	mov	r3, r0
 801124e:	2b01      	cmp	r3, #1
 8011250:	d155      	bne.n	80112fe <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8011252:	2300      	movs	r3, #0
 8011254:	73fb      	strb	r3, [r7, #15]
 8011256:	e00c      	b.n	8011272 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8011258:	7bfc      	ldrb	r4, [r7, #15]
 801125a:	f7ff fe67 	bl	8010f2c <SPI_RxByte>
 801125e:	4603      	mov	r3, r0
 8011260:	461a      	mov	r2, r3
 8011262:	f104 0310 	add.w	r3, r4, #16
 8011266:	443b      	add	r3, r7
 8011268:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 801126c:	7bfb      	ldrb	r3, [r7, #15]
 801126e:	3301      	adds	r3, #1
 8011270:	73fb      	strb	r3, [r7, #15]
 8011272:	7bfb      	ldrb	r3, [r7, #15]
 8011274:	2b03      	cmp	r3, #3
 8011276:	d9ef      	bls.n	8011258 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8011278:	7abb      	ldrb	r3, [r7, #10]
 801127a:	2b01      	cmp	r3, #1
 801127c:	d17e      	bne.n	801137c <SD_disk_initialize+0x188>
 801127e:	7afb      	ldrb	r3, [r7, #11]
 8011280:	2baa      	cmp	r3, #170	; 0xaa
 8011282:	d17b      	bne.n	801137c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8011284:	2100      	movs	r1, #0
 8011286:	2077      	movs	r0, #119	; 0x77
 8011288:	f7ff ff5f 	bl	801114a <SD_SendCmd>
 801128c:	4603      	mov	r3, r0
 801128e:	2b01      	cmp	r3, #1
 8011290:	d807      	bhi.n	80112a2 <SD_disk_initialize+0xae>
 8011292:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8011296:	2069      	movs	r0, #105	; 0x69
 8011298:	f7ff ff57 	bl	801114a <SD_SendCmd>
 801129c:	4603      	mov	r3, r0
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d004      	beq.n	80112ac <SD_disk_initialize+0xb8>
				} while (Timer1);
 80112a2:	4b45      	ldr	r3, [pc, #276]	; (80113b8 <SD_disk_initialize+0x1c4>)
 80112a4:	881b      	ldrh	r3, [r3, #0]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d1ec      	bne.n	8011284 <SD_disk_initialize+0x90>
 80112aa:	e000      	b.n	80112ae <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80112ac:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80112ae:	4b42      	ldr	r3, [pc, #264]	; (80113b8 <SD_disk_initialize+0x1c4>)
 80112b0:	881b      	ldrh	r3, [r3, #0]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d062      	beq.n	801137c <SD_disk_initialize+0x188>
 80112b6:	2100      	movs	r1, #0
 80112b8:	207a      	movs	r0, #122	; 0x7a
 80112ba:	f7ff ff46 	bl	801114a <SD_SendCmd>
 80112be:	4603      	mov	r3, r0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d15b      	bne.n	801137c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80112c4:	2300      	movs	r3, #0
 80112c6:	73fb      	strb	r3, [r7, #15]
 80112c8:	e00c      	b.n	80112e4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80112ca:	7bfc      	ldrb	r4, [r7, #15]
 80112cc:	f7ff fe2e 	bl	8010f2c <SPI_RxByte>
 80112d0:	4603      	mov	r3, r0
 80112d2:	461a      	mov	r2, r3
 80112d4:	f104 0310 	add.w	r3, r4, #16
 80112d8:	443b      	add	r3, r7
 80112da:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80112de:	7bfb      	ldrb	r3, [r7, #15]
 80112e0:	3301      	adds	r3, #1
 80112e2:	73fb      	strb	r3, [r7, #15]
 80112e4:	7bfb      	ldrb	r3, [r7, #15]
 80112e6:	2b03      	cmp	r3, #3
 80112e8:	d9ef      	bls.n	80112ca <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80112ea:	7a3b      	ldrb	r3, [r7, #8]
 80112ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d001      	beq.n	80112f8 <SD_disk_initialize+0x104>
 80112f4:	230c      	movs	r3, #12
 80112f6:	e000      	b.n	80112fa <SD_disk_initialize+0x106>
 80112f8:	2304      	movs	r3, #4
 80112fa:	73bb      	strb	r3, [r7, #14]
 80112fc:	e03e      	b.n	801137c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80112fe:	2100      	movs	r1, #0
 8011300:	2077      	movs	r0, #119	; 0x77
 8011302:	f7ff ff22 	bl	801114a <SD_SendCmd>
 8011306:	4603      	mov	r3, r0
 8011308:	2b01      	cmp	r3, #1
 801130a:	d808      	bhi.n	801131e <SD_disk_initialize+0x12a>
 801130c:	2100      	movs	r1, #0
 801130e:	2069      	movs	r0, #105	; 0x69
 8011310:	f7ff ff1b 	bl	801114a <SD_SendCmd>
 8011314:	4603      	mov	r3, r0
 8011316:	2b01      	cmp	r3, #1
 8011318:	d801      	bhi.n	801131e <SD_disk_initialize+0x12a>
 801131a:	2302      	movs	r3, #2
 801131c:	e000      	b.n	8011320 <SD_disk_initialize+0x12c>
 801131e:	2301      	movs	r3, #1
 8011320:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8011322:	7bbb      	ldrb	r3, [r7, #14]
 8011324:	2b02      	cmp	r3, #2
 8011326:	d10e      	bne.n	8011346 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8011328:	2100      	movs	r1, #0
 801132a:	2077      	movs	r0, #119	; 0x77
 801132c:	f7ff ff0d 	bl	801114a <SD_SendCmd>
 8011330:	4603      	mov	r3, r0
 8011332:	2b01      	cmp	r3, #1
 8011334:	d80e      	bhi.n	8011354 <SD_disk_initialize+0x160>
 8011336:	2100      	movs	r1, #0
 8011338:	2069      	movs	r0, #105	; 0x69
 801133a:	f7ff ff06 	bl	801114a <SD_SendCmd>
 801133e:	4603      	mov	r3, r0
 8011340:	2b00      	cmp	r3, #0
 8011342:	d107      	bne.n	8011354 <SD_disk_initialize+0x160>
 8011344:	e00c      	b.n	8011360 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8011346:	2100      	movs	r1, #0
 8011348:	2041      	movs	r0, #65	; 0x41
 801134a:	f7ff fefe 	bl	801114a <SD_SendCmd>
 801134e:	4603      	mov	r3, r0
 8011350:	2b00      	cmp	r3, #0
 8011352:	d004      	beq.n	801135e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8011354:	4b18      	ldr	r3, [pc, #96]	; (80113b8 <SD_disk_initialize+0x1c4>)
 8011356:	881b      	ldrh	r3, [r3, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d1e2      	bne.n	8011322 <SD_disk_initialize+0x12e>
 801135c:	e000      	b.n	8011360 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 801135e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8011360:	4b15      	ldr	r3, [pc, #84]	; (80113b8 <SD_disk_initialize+0x1c4>)
 8011362:	881b      	ldrh	r3, [r3, #0]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d007      	beq.n	8011378 <SD_disk_initialize+0x184>
 8011368:	f44f 7100 	mov.w	r1, #512	; 0x200
 801136c:	2050      	movs	r0, #80	; 0x50
 801136e:	f7ff feec 	bl	801114a <SD_SendCmd>
 8011372:	4603      	mov	r3, r0
 8011374:	2b00      	cmp	r3, #0
 8011376:	d001      	beq.n	801137c <SD_disk_initialize+0x188>
 8011378:	2300      	movs	r3, #0
 801137a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 801137c:	4a0f      	ldr	r2, [pc, #60]	; (80113bc <SD_disk_initialize+0x1c8>)
 801137e:	7bbb      	ldrb	r3, [r7, #14]
 8011380:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8011382:	f7ff fd91 	bl	8010ea8 <DESELECT>
	SPI_RxByte();
 8011386:	f7ff fdd1 	bl	8010f2c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 801138a:	7bbb      	ldrb	r3, [r7, #14]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d008      	beq.n	80113a2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8011390:	4b08      	ldr	r3, [pc, #32]	; (80113b4 <SD_disk_initialize+0x1c0>)
 8011392:	781b      	ldrb	r3, [r3, #0]
 8011394:	b2db      	uxtb	r3, r3
 8011396:	f023 0301 	bic.w	r3, r3, #1
 801139a:	b2da      	uxtb	r2, r3
 801139c:	4b05      	ldr	r3, [pc, #20]	; (80113b4 <SD_disk_initialize+0x1c0>)
 801139e:	701a      	strb	r2, [r3, #0]
 80113a0:	e001      	b.n	80113a6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80113a2:	f7ff fe49 	bl	8011038 <SD_PowerOff>
	}

	return Stat;
 80113a6:	4b03      	ldr	r3, [pc, #12]	; (80113b4 <SD_disk_initialize+0x1c0>)
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	b2db      	uxtb	r3, r3
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	3714      	adds	r7, #20
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd90      	pop	{r4, r7, pc}
 80113b4:	20000038 	.word	0x20000038
 80113b8:	20002999 	.word	0x20002999
 80113bc:	200077e6 	.word	0x200077e6

080113c0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80113c0:	b480      	push	{r7}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	4603      	mov	r3, r0
 80113c8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80113ca:	79fb      	ldrb	r3, [r7, #7]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d001      	beq.n	80113d4 <SD_disk_status+0x14>
 80113d0:	2301      	movs	r3, #1
 80113d2:	e002      	b.n	80113da <SD_disk_status+0x1a>
	return Stat;
 80113d4:	4b04      	ldr	r3, [pc, #16]	; (80113e8 <SD_disk_status+0x28>)
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	b2db      	uxtb	r3, r3
}
 80113da:	4618      	mov	r0, r3
 80113dc:	370c      	adds	r7, #12
 80113de:	46bd      	mov	sp, r7
 80113e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e4:	4770      	bx	lr
 80113e6:	bf00      	nop
 80113e8:	20000038 	.word	0x20000038

080113ec <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b084      	sub	sp, #16
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60b9      	str	r1, [r7, #8]
 80113f4:	607a      	str	r2, [r7, #4]
 80113f6:	603b      	str	r3, [r7, #0]
 80113f8:	4603      	mov	r3, r0
 80113fa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80113fc:	7bfb      	ldrb	r3, [r7, #15]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d102      	bne.n	8011408 <SD_disk_read+0x1c>
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d101      	bne.n	801140c <SD_disk_read+0x20>
 8011408:	2304      	movs	r3, #4
 801140a:	e051      	b.n	80114b0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 801140c:	4b2a      	ldr	r3, [pc, #168]	; (80114b8 <SD_disk_read+0xcc>)
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	b2db      	uxtb	r3, r3
 8011412:	f003 0301 	and.w	r3, r3, #1
 8011416:	2b00      	cmp	r3, #0
 8011418:	d001      	beq.n	801141e <SD_disk_read+0x32>
 801141a:	2303      	movs	r3, #3
 801141c:	e048      	b.n	80114b0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 801141e:	4b27      	ldr	r3, [pc, #156]	; (80114bc <SD_disk_read+0xd0>)
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	f003 0304 	and.w	r3, r3, #4
 8011426:	2b00      	cmp	r3, #0
 8011428:	d102      	bne.n	8011430 <SD_disk_read+0x44>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	025b      	lsls	r3, r3, #9
 801142e:	607b      	str	r3, [r7, #4]

	SELECT();
 8011430:	f7ff fd2c 	bl	8010e8c <SELECT>

	if (count == 1)
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	2b01      	cmp	r3, #1
 8011438:	d111      	bne.n	801145e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 801143a:	6879      	ldr	r1, [r7, #4]
 801143c:	2051      	movs	r0, #81	; 0x51
 801143e:	f7ff fe84 	bl	801114a <SD_SendCmd>
 8011442:	4603      	mov	r3, r0
 8011444:	2b00      	cmp	r3, #0
 8011446:	d129      	bne.n	801149c <SD_disk_read+0xb0>
 8011448:	f44f 7100 	mov.w	r1, #512	; 0x200
 801144c:	68b8      	ldr	r0, [r7, #8]
 801144e:	f7ff fe0b 	bl	8011068 <SD_RxDataBlock>
 8011452:	4603      	mov	r3, r0
 8011454:	2b00      	cmp	r3, #0
 8011456:	d021      	beq.n	801149c <SD_disk_read+0xb0>
 8011458:	2300      	movs	r3, #0
 801145a:	603b      	str	r3, [r7, #0]
 801145c:	e01e      	b.n	801149c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 801145e:	6879      	ldr	r1, [r7, #4]
 8011460:	2052      	movs	r0, #82	; 0x52
 8011462:	f7ff fe72 	bl	801114a <SD_SendCmd>
 8011466:	4603      	mov	r3, r0
 8011468:	2b00      	cmp	r3, #0
 801146a:	d117      	bne.n	801149c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 801146c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011470:	68b8      	ldr	r0, [r7, #8]
 8011472:	f7ff fdf9 	bl	8011068 <SD_RxDataBlock>
 8011476:	4603      	mov	r3, r0
 8011478:	2b00      	cmp	r3, #0
 801147a:	d00a      	beq.n	8011492 <SD_disk_read+0xa6>
				buff += 512;
 801147c:	68bb      	ldr	r3, [r7, #8]
 801147e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8011482:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	3b01      	subs	r3, #1
 8011488:	603b      	str	r3, [r7, #0]
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d1ed      	bne.n	801146c <SD_disk_read+0x80>
 8011490:	e000      	b.n	8011494 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8011492:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8011494:	2100      	movs	r1, #0
 8011496:	204c      	movs	r0, #76	; 0x4c
 8011498:	f7ff fe57 	bl	801114a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 801149c:	f7ff fd04 	bl	8010ea8 <DESELECT>
	SPI_RxByte();
 80114a0:	f7ff fd44 	bl	8010f2c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	bf14      	ite	ne
 80114aa:	2301      	movne	r3, #1
 80114ac:	2300      	moveq	r3, #0
 80114ae:	b2db      	uxtb	r3, r3
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3710      	adds	r7, #16
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}
 80114b8:	20000038 	.word	0x20000038
 80114bc:	200077e6 	.word	0x200077e6

080114c0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b084      	sub	sp, #16
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	60b9      	str	r1, [r7, #8]
 80114c8:	607a      	str	r2, [r7, #4]
 80114ca:	603b      	str	r3, [r7, #0]
 80114cc:	4603      	mov	r3, r0
 80114ce:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80114d0:	7bfb      	ldrb	r3, [r7, #15]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d102      	bne.n	80114dc <SD_disk_write+0x1c>
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d101      	bne.n	80114e0 <SD_disk_write+0x20>
 80114dc:	2304      	movs	r3, #4
 80114de:	e06b      	b.n	80115b8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80114e0:	4b37      	ldr	r3, [pc, #220]	; (80115c0 <SD_disk_write+0x100>)
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	f003 0301 	and.w	r3, r3, #1
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d001      	beq.n	80114f2 <SD_disk_write+0x32>
 80114ee:	2303      	movs	r3, #3
 80114f0:	e062      	b.n	80115b8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80114f2:	4b33      	ldr	r3, [pc, #204]	; (80115c0 <SD_disk_write+0x100>)
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	b2db      	uxtb	r3, r3
 80114f8:	f003 0304 	and.w	r3, r3, #4
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d001      	beq.n	8011504 <SD_disk_write+0x44>
 8011500:	2302      	movs	r3, #2
 8011502:	e059      	b.n	80115b8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8011504:	4b2f      	ldr	r3, [pc, #188]	; (80115c4 <SD_disk_write+0x104>)
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	f003 0304 	and.w	r3, r3, #4
 801150c:	2b00      	cmp	r3, #0
 801150e:	d102      	bne.n	8011516 <SD_disk_write+0x56>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	025b      	lsls	r3, r3, #9
 8011514:	607b      	str	r3, [r7, #4]

	SELECT();
 8011516:	f7ff fcb9 	bl	8010e8c <SELECT>

	if (count == 1)
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	2b01      	cmp	r3, #1
 801151e:	d110      	bne.n	8011542 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8011520:	6879      	ldr	r1, [r7, #4]
 8011522:	2058      	movs	r0, #88	; 0x58
 8011524:	f7ff fe11 	bl	801114a <SD_SendCmd>
 8011528:	4603      	mov	r3, r0
 801152a:	2b00      	cmp	r3, #0
 801152c:	d13a      	bne.n	80115a4 <SD_disk_write+0xe4>
 801152e:	21fe      	movs	r1, #254	; 0xfe
 8011530:	68b8      	ldr	r0, [r7, #8]
 8011532:	f7ff fdc7 	bl	80110c4 <SD_TxDataBlock>
 8011536:	4603      	mov	r3, r0
 8011538:	2b00      	cmp	r3, #0
 801153a:	d033      	beq.n	80115a4 <SD_disk_write+0xe4>
			count = 0;
 801153c:	2300      	movs	r3, #0
 801153e:	603b      	str	r3, [r7, #0]
 8011540:	e030      	b.n	80115a4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8011542:	4b20      	ldr	r3, [pc, #128]	; (80115c4 <SD_disk_write+0x104>)
 8011544:	781b      	ldrb	r3, [r3, #0]
 8011546:	f003 0302 	and.w	r3, r3, #2
 801154a:	2b00      	cmp	r3, #0
 801154c:	d007      	beq.n	801155e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 801154e:	2100      	movs	r1, #0
 8011550:	2077      	movs	r0, #119	; 0x77
 8011552:	f7ff fdfa 	bl	801114a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8011556:	6839      	ldr	r1, [r7, #0]
 8011558:	2057      	movs	r0, #87	; 0x57
 801155a:	f7ff fdf6 	bl	801114a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 801155e:	6879      	ldr	r1, [r7, #4]
 8011560:	2059      	movs	r0, #89	; 0x59
 8011562:	f7ff fdf2 	bl	801114a <SD_SendCmd>
 8011566:	4603      	mov	r3, r0
 8011568:	2b00      	cmp	r3, #0
 801156a:	d11b      	bne.n	80115a4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 801156c:	21fc      	movs	r1, #252	; 0xfc
 801156e:	68b8      	ldr	r0, [r7, #8]
 8011570:	f7ff fda8 	bl	80110c4 <SD_TxDataBlock>
 8011574:	4603      	mov	r3, r0
 8011576:	2b00      	cmp	r3, #0
 8011578:	d00a      	beq.n	8011590 <SD_disk_write+0xd0>
				buff += 512;
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8011580:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	3b01      	subs	r3, #1
 8011586:	603b      	str	r3, [r7, #0]
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d1ee      	bne.n	801156c <SD_disk_write+0xac>
 801158e:	e000      	b.n	8011592 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8011590:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8011592:	21fd      	movs	r1, #253	; 0xfd
 8011594:	2000      	movs	r0, #0
 8011596:	f7ff fd95 	bl	80110c4 <SD_TxDataBlock>
 801159a:	4603      	mov	r3, r0
 801159c:	2b00      	cmp	r3, #0
 801159e:	d101      	bne.n	80115a4 <SD_disk_write+0xe4>
			{
				count = 1;
 80115a0:	2301      	movs	r3, #1
 80115a2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80115a4:	f7ff fc80 	bl	8010ea8 <DESELECT>
	SPI_RxByte();
 80115a8:	f7ff fcc0 	bl	8010f2c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	bf14      	ite	ne
 80115b2:	2301      	movne	r3, #1
 80115b4:	2300      	moveq	r3, #0
 80115b6:	b2db      	uxtb	r3, r3
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3710      	adds	r7, #16
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}
 80115c0:	20000038 	.word	0x20000038
 80115c4:	200077e6 	.word	0x200077e6

080115c8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80115c8:	b590      	push	{r4, r7, lr}
 80115ca:	b08b      	sub	sp, #44	; 0x2c
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	4603      	mov	r3, r0
 80115d0:	603a      	str	r2, [r7, #0]
 80115d2:	71fb      	strb	r3, [r7, #7]
 80115d4:	460b      	mov	r3, r1
 80115d6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80115dc:	79fb      	ldrb	r3, [r7, #7]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d001      	beq.n	80115e6 <SD_disk_ioctl+0x1e>
 80115e2:	2304      	movs	r3, #4
 80115e4:	e115      	b.n	8011812 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80115e6:	2301      	movs	r3, #1
 80115e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80115ec:	79bb      	ldrb	r3, [r7, #6]
 80115ee:	2b05      	cmp	r3, #5
 80115f0:	d124      	bne.n	801163c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80115f2:	6a3b      	ldr	r3, [r7, #32]
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	2b02      	cmp	r3, #2
 80115f8:	d012      	beq.n	8011620 <SD_disk_ioctl+0x58>
 80115fa:	2b02      	cmp	r3, #2
 80115fc:	dc1a      	bgt.n	8011634 <SD_disk_ioctl+0x6c>
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d002      	beq.n	8011608 <SD_disk_ioctl+0x40>
 8011602:	2b01      	cmp	r3, #1
 8011604:	d006      	beq.n	8011614 <SD_disk_ioctl+0x4c>
 8011606:	e015      	b.n	8011634 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8011608:	f7ff fd16 	bl	8011038 <SD_PowerOff>
			res = RES_OK;
 801160c:	2300      	movs	r3, #0
 801160e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8011612:	e0fc      	b.n	801180e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8011614:	f7ff fcce 	bl	8010fb4 <SD_PowerOn>
			res = RES_OK;
 8011618:	2300      	movs	r3, #0
 801161a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 801161e:	e0f6      	b.n	801180e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8011620:	6a3b      	ldr	r3, [r7, #32]
 8011622:	1c5c      	adds	r4, r3, #1
 8011624:	f7ff fd14 	bl	8011050 <SD_CheckPower>
 8011628:	4603      	mov	r3, r0
 801162a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 801162c:	2300      	movs	r3, #0
 801162e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8011632:	e0ec      	b.n	801180e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8011634:	2304      	movs	r3, #4
 8011636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801163a:	e0e8      	b.n	801180e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 801163c:	4b77      	ldr	r3, [pc, #476]	; (801181c <SD_disk_ioctl+0x254>)
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	b2db      	uxtb	r3, r3
 8011642:	f003 0301 	and.w	r3, r3, #1
 8011646:	2b00      	cmp	r3, #0
 8011648:	d001      	beq.n	801164e <SD_disk_ioctl+0x86>
 801164a:	2303      	movs	r3, #3
 801164c:	e0e1      	b.n	8011812 <SD_disk_ioctl+0x24a>

		SELECT();
 801164e:	f7ff fc1d 	bl	8010e8c <SELECT>

		switch (ctrl)
 8011652:	79bb      	ldrb	r3, [r7, #6]
 8011654:	2b0d      	cmp	r3, #13
 8011656:	f200 80cb 	bhi.w	80117f0 <SD_disk_ioctl+0x228>
 801165a:	a201      	add	r2, pc, #4	; (adr r2, 8011660 <SD_disk_ioctl+0x98>)
 801165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011660:	0801175b 	.word	0x0801175b
 8011664:	08011699 	.word	0x08011699
 8011668:	0801174b 	.word	0x0801174b
 801166c:	080117f1 	.word	0x080117f1
 8011670:	080117f1 	.word	0x080117f1
 8011674:	080117f1 	.word	0x080117f1
 8011678:	080117f1 	.word	0x080117f1
 801167c:	080117f1 	.word	0x080117f1
 8011680:	080117f1 	.word	0x080117f1
 8011684:	080117f1 	.word	0x080117f1
 8011688:	080117f1 	.word	0x080117f1
 801168c:	0801176d 	.word	0x0801176d
 8011690:	08011791 	.word	0x08011791
 8011694:	080117b5 	.word	0x080117b5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8011698:	2100      	movs	r1, #0
 801169a:	2049      	movs	r0, #73	; 0x49
 801169c:	f7ff fd55 	bl	801114a <SD_SendCmd>
 80116a0:	4603      	mov	r3, r0
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f040 80a8 	bne.w	80117f8 <SD_disk_ioctl+0x230>
 80116a8:	f107 030c 	add.w	r3, r7, #12
 80116ac:	2110      	movs	r1, #16
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7ff fcda 	bl	8011068 <SD_RxDataBlock>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	f000 809e 	beq.w	80117f8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80116bc:	7b3b      	ldrb	r3, [r7, #12]
 80116be:	099b      	lsrs	r3, r3, #6
 80116c0:	b2db      	uxtb	r3, r3
 80116c2:	2b01      	cmp	r3, #1
 80116c4:	d10e      	bne.n	80116e4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80116c6:	7d7b      	ldrb	r3, [r7, #21]
 80116c8:	b29a      	uxth	r2, r3
 80116ca:	7d3b      	ldrb	r3, [r7, #20]
 80116cc:	b29b      	uxth	r3, r3
 80116ce:	021b      	lsls	r3, r3, #8
 80116d0:	b29b      	uxth	r3, r3
 80116d2:	4413      	add	r3, r2
 80116d4:	b29b      	uxth	r3, r3
 80116d6:	3301      	adds	r3, #1
 80116d8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80116da:	8bfb      	ldrh	r3, [r7, #30]
 80116dc:	029a      	lsls	r2, r3, #10
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	601a      	str	r2, [r3, #0]
 80116e2:	e02e      	b.n	8011742 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80116e4:	7c7b      	ldrb	r3, [r7, #17]
 80116e6:	f003 030f 	and.w	r3, r3, #15
 80116ea:	b2da      	uxtb	r2, r3
 80116ec:	7dbb      	ldrb	r3, [r7, #22]
 80116ee:	09db      	lsrs	r3, r3, #7
 80116f0:	b2db      	uxtb	r3, r3
 80116f2:	4413      	add	r3, r2
 80116f4:	b2da      	uxtb	r2, r3
 80116f6:	7d7b      	ldrb	r3, [r7, #21]
 80116f8:	005b      	lsls	r3, r3, #1
 80116fa:	b2db      	uxtb	r3, r3
 80116fc:	f003 0306 	and.w	r3, r3, #6
 8011700:	b2db      	uxtb	r3, r3
 8011702:	4413      	add	r3, r2
 8011704:	b2db      	uxtb	r3, r3
 8011706:	3302      	adds	r3, #2
 8011708:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 801170c:	7d3b      	ldrb	r3, [r7, #20]
 801170e:	099b      	lsrs	r3, r3, #6
 8011710:	b2db      	uxtb	r3, r3
 8011712:	b29a      	uxth	r2, r3
 8011714:	7cfb      	ldrb	r3, [r7, #19]
 8011716:	b29b      	uxth	r3, r3
 8011718:	009b      	lsls	r3, r3, #2
 801171a:	b29b      	uxth	r3, r3
 801171c:	4413      	add	r3, r2
 801171e:	b29a      	uxth	r2, r3
 8011720:	7cbb      	ldrb	r3, [r7, #18]
 8011722:	029b      	lsls	r3, r3, #10
 8011724:	b29b      	uxth	r3, r3
 8011726:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801172a:	b29b      	uxth	r3, r3
 801172c:	4413      	add	r3, r2
 801172e:	b29b      	uxth	r3, r3
 8011730:	3301      	adds	r3, #1
 8011732:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8011734:	8bfa      	ldrh	r2, [r7, #30]
 8011736:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801173a:	3b09      	subs	r3, #9
 801173c:	409a      	lsls	r2, r3
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8011742:	2300      	movs	r3, #0
 8011744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8011748:	e056      	b.n	80117f8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011750:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8011752:	2300      	movs	r3, #0
 8011754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8011758:	e055      	b.n	8011806 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 801175a:	f7ff fc11 	bl	8010f80 <SD_ReadyWait>
 801175e:	4603      	mov	r3, r0
 8011760:	2bff      	cmp	r3, #255	; 0xff
 8011762:	d14b      	bne.n	80117fc <SD_disk_ioctl+0x234>
 8011764:	2300      	movs	r3, #0
 8011766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 801176a:	e047      	b.n	80117fc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 801176c:	2100      	movs	r1, #0
 801176e:	2049      	movs	r0, #73	; 0x49
 8011770:	f7ff fceb 	bl	801114a <SD_SendCmd>
 8011774:	4603      	mov	r3, r0
 8011776:	2b00      	cmp	r3, #0
 8011778:	d142      	bne.n	8011800 <SD_disk_ioctl+0x238>
 801177a:	2110      	movs	r1, #16
 801177c:	6a38      	ldr	r0, [r7, #32]
 801177e:	f7ff fc73 	bl	8011068 <SD_RxDataBlock>
 8011782:	4603      	mov	r3, r0
 8011784:	2b00      	cmp	r3, #0
 8011786:	d03b      	beq.n	8011800 <SD_disk_ioctl+0x238>
 8011788:	2300      	movs	r3, #0
 801178a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 801178e:	e037      	b.n	8011800 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8011790:	2100      	movs	r1, #0
 8011792:	204a      	movs	r0, #74	; 0x4a
 8011794:	f7ff fcd9 	bl	801114a <SD_SendCmd>
 8011798:	4603      	mov	r3, r0
 801179a:	2b00      	cmp	r3, #0
 801179c:	d132      	bne.n	8011804 <SD_disk_ioctl+0x23c>
 801179e:	2110      	movs	r1, #16
 80117a0:	6a38      	ldr	r0, [r7, #32]
 80117a2:	f7ff fc61 	bl	8011068 <SD_RxDataBlock>
 80117a6:	4603      	mov	r3, r0
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d02b      	beq.n	8011804 <SD_disk_ioctl+0x23c>
 80117ac:	2300      	movs	r3, #0
 80117ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80117b2:	e027      	b.n	8011804 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80117b4:	2100      	movs	r1, #0
 80117b6:	207a      	movs	r0, #122	; 0x7a
 80117b8:	f7ff fcc7 	bl	801114a <SD_SendCmd>
 80117bc:	4603      	mov	r3, r0
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d116      	bne.n	80117f0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80117c2:	2300      	movs	r3, #0
 80117c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80117c8:	e00b      	b.n	80117e2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80117ca:	6a3c      	ldr	r4, [r7, #32]
 80117cc:	1c63      	adds	r3, r4, #1
 80117ce:	623b      	str	r3, [r7, #32]
 80117d0:	f7ff fbac 	bl	8010f2c <SPI_RxByte>
 80117d4:	4603      	mov	r3, r0
 80117d6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80117d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80117dc:	3301      	adds	r3, #1
 80117de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80117e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80117e6:	2b03      	cmp	r3, #3
 80117e8:	d9ef      	bls.n	80117ca <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80117ea:	2300      	movs	r3, #0
 80117ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80117f0:	2304      	movs	r3, #4
 80117f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80117f6:	e006      	b.n	8011806 <SD_disk_ioctl+0x23e>
			break;
 80117f8:	bf00      	nop
 80117fa:	e004      	b.n	8011806 <SD_disk_ioctl+0x23e>
			break;
 80117fc:	bf00      	nop
 80117fe:	e002      	b.n	8011806 <SD_disk_ioctl+0x23e>
			break;
 8011800:	bf00      	nop
 8011802:	e000      	b.n	8011806 <SD_disk_ioctl+0x23e>
			break;
 8011804:	bf00      	nop
		}

		DESELECT();
 8011806:	f7ff fb4f 	bl	8010ea8 <DESELECT>
		SPI_RxByte();
 801180a:	f7ff fb8f 	bl	8010f2c <SPI_RxByte>
	}

	return res;
 801180e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011812:	4618      	mov	r0, r3
 8011814:	372c      	adds	r7, #44	; 0x2c
 8011816:	46bd      	mov	sp, r7
 8011818:	bd90      	pop	{r4, r7, pc}
 801181a:	bf00      	nop
 801181c:	20000038 	.word	0x20000038

08011820 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8011820:	b580      	push	{r7, lr}
 8011822:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8011824:	4803      	ldr	r0, [pc, #12]	; (8011834 <_cbSendSystemDesc+0x14>)
 8011826:	f001 fa3d 	bl	8012ca4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 801182a:	4803      	ldr	r0, [pc, #12]	; (8011838 <_cbSendSystemDesc+0x18>)
 801182c:	f001 fa3a 	bl	8012ca4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8011830:	bf00      	nop
 8011832:	bd80      	pop	{r7, pc}
 8011834:	0801640c 	.word	0x0801640c
 8011838:	08016450 	.word	0x08016450

0801183c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 801183c:	b580      	push	{r7, lr}
 801183e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8011840:	4b06      	ldr	r3, [pc, #24]	; (801185c <SEGGER_SYSVIEW_Conf+0x20>)
 8011842:	6818      	ldr	r0, [r3, #0]
 8011844:	4b05      	ldr	r3, [pc, #20]	; (801185c <SEGGER_SYSVIEW_Conf+0x20>)
 8011846:	6819      	ldr	r1, [r3, #0]
 8011848:	4b05      	ldr	r3, [pc, #20]	; (8011860 <SEGGER_SYSVIEW_Conf+0x24>)
 801184a:	4a06      	ldr	r2, [pc, #24]	; (8011864 <SEGGER_SYSVIEW_Conf+0x28>)
 801184c:	f000 fda8 	bl	80123a0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8011850:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8011854:	f000 fde8 	bl	8012428 <SEGGER_SYSVIEW_SetRAMBase>
}
 8011858:	bf00      	nop
 801185a:	bd80      	pop	{r7, pc}
 801185c:	20000004 	.word	0x20000004
 8011860:	08011821 	.word	0x08011821
 8011864:	08018414 	.word	0x08018414

08011868 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8011868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801186a:	b085      	sub	sp, #20
 801186c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 801186e:	2300      	movs	r3, #0
 8011870:	607b      	str	r3, [r7, #4]
 8011872:	e048      	b.n	8011906 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8011874:	4929      	ldr	r1, [pc, #164]	; (801191c <_cbSendTaskList+0xb4>)
 8011876:	687a      	ldr	r2, [r7, #4]
 8011878:	4613      	mov	r3, r2
 801187a:	009b      	lsls	r3, r3, #2
 801187c:	4413      	add	r3, r2
 801187e:	009b      	lsls	r3, r3, #2
 8011880:	440b      	add	r3, r1
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	4618      	mov	r0, r3
 8011886:	f7fd fd83 	bl	800f390 <uxTaskGetStackHighWaterMark>
 801188a:	4601      	mov	r1, r0
 801188c:	4823      	ldr	r0, [pc, #140]	; (801191c <_cbSendTaskList+0xb4>)
 801188e:	687a      	ldr	r2, [r7, #4]
 8011890:	4613      	mov	r3, r2
 8011892:	009b      	lsls	r3, r3, #2
 8011894:	4413      	add	r3, r2
 8011896:	009b      	lsls	r3, r3, #2
 8011898:	4403      	add	r3, r0
 801189a:	3310      	adds	r3, #16
 801189c:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 801189e:	491f      	ldr	r1, [pc, #124]	; (801191c <_cbSendTaskList+0xb4>)
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	4613      	mov	r3, r2
 80118a4:	009b      	lsls	r3, r3, #2
 80118a6:	4413      	add	r3, r2
 80118a8:	009b      	lsls	r3, r3, #2
 80118aa:	440b      	add	r3, r1
 80118ac:	6818      	ldr	r0, [r3, #0]
 80118ae:	491b      	ldr	r1, [pc, #108]	; (801191c <_cbSendTaskList+0xb4>)
 80118b0:	687a      	ldr	r2, [r7, #4]
 80118b2:	4613      	mov	r3, r2
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	4413      	add	r3, r2
 80118b8:	009b      	lsls	r3, r3, #2
 80118ba:	440b      	add	r3, r1
 80118bc:	3304      	adds	r3, #4
 80118be:	6819      	ldr	r1, [r3, #0]
 80118c0:	4c16      	ldr	r4, [pc, #88]	; (801191c <_cbSendTaskList+0xb4>)
 80118c2:	687a      	ldr	r2, [r7, #4]
 80118c4:	4613      	mov	r3, r2
 80118c6:	009b      	lsls	r3, r3, #2
 80118c8:	4413      	add	r3, r2
 80118ca:	009b      	lsls	r3, r3, #2
 80118cc:	4423      	add	r3, r4
 80118ce:	3308      	adds	r3, #8
 80118d0:	681c      	ldr	r4, [r3, #0]
 80118d2:	4d12      	ldr	r5, [pc, #72]	; (801191c <_cbSendTaskList+0xb4>)
 80118d4:	687a      	ldr	r2, [r7, #4]
 80118d6:	4613      	mov	r3, r2
 80118d8:	009b      	lsls	r3, r3, #2
 80118da:	4413      	add	r3, r2
 80118dc:	009b      	lsls	r3, r3, #2
 80118de:	442b      	add	r3, r5
 80118e0:	330c      	adds	r3, #12
 80118e2:	681d      	ldr	r5, [r3, #0]
 80118e4:	4e0d      	ldr	r6, [pc, #52]	; (801191c <_cbSendTaskList+0xb4>)
 80118e6:	687a      	ldr	r2, [r7, #4]
 80118e8:	4613      	mov	r3, r2
 80118ea:	009b      	lsls	r3, r3, #2
 80118ec:	4413      	add	r3, r2
 80118ee:	009b      	lsls	r3, r3, #2
 80118f0:	4433      	add	r3, r6
 80118f2:	3310      	adds	r3, #16
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	9300      	str	r3, [sp, #0]
 80118f8:	462b      	mov	r3, r5
 80118fa:	4622      	mov	r2, r4
 80118fc:	f000 f8be 	bl	8011a7c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	3301      	adds	r3, #1
 8011904:	607b      	str	r3, [r7, #4]
 8011906:	4b06      	ldr	r3, [pc, #24]	; (8011920 <_cbSendTaskList+0xb8>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	429a      	cmp	r2, r3
 801190e:	d3b1      	bcc.n	8011874 <_cbSendTaskList+0xc>
  }
}
 8011910:	bf00      	nop
 8011912:	bf00      	nop
 8011914:	370c      	adds	r7, #12
 8011916:	46bd      	mov	sp, r7
 8011918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801191a:	bf00      	nop
 801191c:	200077e8 	.word	0x200077e8
 8011920:	20007888 	.word	0x20007888

08011924 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8011924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011928:	b082      	sub	sp, #8
 801192a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 801192c:	f7fd f9c2 	bl	800ecb4 <xTaskGetTickCountFromISR>
 8011930:	4603      	mov	r3, r0
 8011932:	2200      	movs	r2, #0
 8011934:	469a      	mov	sl, r3
 8011936:	4693      	mov	fp, r2
 8011938:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 801193c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011940:	4602      	mov	r2, r0
 8011942:	460b      	mov	r3, r1
 8011944:	f04f 0a00 	mov.w	sl, #0
 8011948:	f04f 0b00 	mov.w	fp, #0
 801194c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8011950:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8011954:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8011958:	4652      	mov	r2, sl
 801195a:	465b      	mov	r3, fp
 801195c:	1a14      	subs	r4, r2, r0
 801195e:	eb63 0501 	sbc.w	r5, r3, r1
 8011962:	f04f 0200 	mov.w	r2, #0
 8011966:	f04f 0300 	mov.w	r3, #0
 801196a:	00ab      	lsls	r3, r5, #2
 801196c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8011970:	00a2      	lsls	r2, r4, #2
 8011972:	4614      	mov	r4, r2
 8011974:	461d      	mov	r5, r3
 8011976:	eb14 0800 	adds.w	r8, r4, r0
 801197a:	eb45 0901 	adc.w	r9, r5, r1
 801197e:	f04f 0200 	mov.w	r2, #0
 8011982:	f04f 0300 	mov.w	r3, #0
 8011986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801198a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801198e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011992:	4690      	mov	r8, r2
 8011994:	4699      	mov	r9, r3
 8011996:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 801199a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 801199e:	4610      	mov	r0, r2
 80119a0:	4619      	mov	r1, r3
 80119a2:	3708      	adds	r7, #8
 80119a4:	46bd      	mov	sp, r7
 80119a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080119ac <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b086      	sub	sp, #24
 80119b0:	af02      	add	r7, sp, #8
 80119b2:	60f8      	str	r0, [r7, #12]
 80119b4:	60b9      	str	r1, [r7, #8]
 80119b6:	607a      	str	r2, [r7, #4]
 80119b8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80119ba:	2205      	movs	r2, #5
 80119bc:	492b      	ldr	r1, [pc, #172]	; (8011a6c <SYSVIEW_AddTask+0xc0>)
 80119be:	68b8      	ldr	r0, [r7, #8]
 80119c0:	f002 fab7 	bl	8013f32 <memcmp>
 80119c4:	4603      	mov	r3, r0
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d04b      	beq.n	8011a62 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80119ca:	4b29      	ldr	r3, [pc, #164]	; (8011a70 <SYSVIEW_AddTask+0xc4>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	2b07      	cmp	r3, #7
 80119d0:	d903      	bls.n	80119da <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80119d2:	4828      	ldr	r0, [pc, #160]	; (8011a74 <SYSVIEW_AddTask+0xc8>)
 80119d4:	f001 fc64 	bl	80132a0 <SEGGER_SYSVIEW_Warn>
    return;
 80119d8:	e044      	b.n	8011a64 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80119da:	4b25      	ldr	r3, [pc, #148]	; (8011a70 <SYSVIEW_AddTask+0xc4>)
 80119dc:	681a      	ldr	r2, [r3, #0]
 80119de:	4926      	ldr	r1, [pc, #152]	; (8011a78 <SYSVIEW_AddTask+0xcc>)
 80119e0:	4613      	mov	r3, r2
 80119e2:	009b      	lsls	r3, r3, #2
 80119e4:	4413      	add	r3, r2
 80119e6:	009b      	lsls	r3, r3, #2
 80119e8:	440b      	add	r3, r1
 80119ea:	68fa      	ldr	r2, [r7, #12]
 80119ec:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80119ee:	4b20      	ldr	r3, [pc, #128]	; (8011a70 <SYSVIEW_AddTask+0xc4>)
 80119f0:	681a      	ldr	r2, [r3, #0]
 80119f2:	4921      	ldr	r1, [pc, #132]	; (8011a78 <SYSVIEW_AddTask+0xcc>)
 80119f4:	4613      	mov	r3, r2
 80119f6:	009b      	lsls	r3, r3, #2
 80119f8:	4413      	add	r3, r2
 80119fa:	009b      	lsls	r3, r3, #2
 80119fc:	440b      	add	r3, r1
 80119fe:	3304      	adds	r3, #4
 8011a00:	68ba      	ldr	r2, [r7, #8]
 8011a02:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8011a04:	4b1a      	ldr	r3, [pc, #104]	; (8011a70 <SYSVIEW_AddTask+0xc4>)
 8011a06:	681a      	ldr	r2, [r3, #0]
 8011a08:	491b      	ldr	r1, [pc, #108]	; (8011a78 <SYSVIEW_AddTask+0xcc>)
 8011a0a:	4613      	mov	r3, r2
 8011a0c:	009b      	lsls	r3, r3, #2
 8011a0e:	4413      	add	r3, r2
 8011a10:	009b      	lsls	r3, r3, #2
 8011a12:	440b      	add	r3, r1
 8011a14:	3308      	adds	r3, #8
 8011a16:	687a      	ldr	r2, [r7, #4]
 8011a18:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8011a1a:	4b15      	ldr	r3, [pc, #84]	; (8011a70 <SYSVIEW_AddTask+0xc4>)
 8011a1c:	681a      	ldr	r2, [r3, #0]
 8011a1e:	4916      	ldr	r1, [pc, #88]	; (8011a78 <SYSVIEW_AddTask+0xcc>)
 8011a20:	4613      	mov	r3, r2
 8011a22:	009b      	lsls	r3, r3, #2
 8011a24:	4413      	add	r3, r2
 8011a26:	009b      	lsls	r3, r3, #2
 8011a28:	440b      	add	r3, r1
 8011a2a:	330c      	adds	r3, #12
 8011a2c:	683a      	ldr	r2, [r7, #0]
 8011a2e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8011a30:	4b0f      	ldr	r3, [pc, #60]	; (8011a70 <SYSVIEW_AddTask+0xc4>)
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	4910      	ldr	r1, [pc, #64]	; (8011a78 <SYSVIEW_AddTask+0xcc>)
 8011a36:	4613      	mov	r3, r2
 8011a38:	009b      	lsls	r3, r3, #2
 8011a3a:	4413      	add	r3, r2
 8011a3c:	009b      	lsls	r3, r3, #2
 8011a3e:	440b      	add	r3, r1
 8011a40:	3310      	adds	r3, #16
 8011a42:	69ba      	ldr	r2, [r7, #24]
 8011a44:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8011a46:	4b0a      	ldr	r3, [pc, #40]	; (8011a70 <SYSVIEW_AddTask+0xc4>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	4a08      	ldr	r2, [pc, #32]	; (8011a70 <SYSVIEW_AddTask+0xc4>)
 8011a4e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8011a50:	69bb      	ldr	r3, [r7, #24]
 8011a52:	9300      	str	r3, [sp, #0]
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	687a      	ldr	r2, [r7, #4]
 8011a58:	68b9      	ldr	r1, [r7, #8]
 8011a5a:	68f8      	ldr	r0, [r7, #12]
 8011a5c:	f000 f80e 	bl	8011a7c <SYSVIEW_SendTaskInfo>
 8011a60:	e000      	b.n	8011a64 <SYSVIEW_AddTask+0xb8>
    return;
 8011a62:	bf00      	nop

}
 8011a64:	3710      	adds	r7, #16
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
 8011a6a:	bf00      	nop
 8011a6c:	08016460 	.word	0x08016460
 8011a70:	20007888 	.word	0x20007888
 8011a74:	08016468 	.word	0x08016468
 8011a78:	200077e8 	.word	0x200077e8

08011a7c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b08a      	sub	sp, #40	; 0x28
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	60f8      	str	r0, [r7, #12]
 8011a84:	60b9      	str	r1, [r7, #8]
 8011a86:	607a      	str	r2, [r7, #4]
 8011a88:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8011a8a:	f107 0314 	add.w	r3, r7, #20
 8011a8e:	2214      	movs	r2, #20
 8011a90:	2100      	movs	r1, #0
 8011a92:	4618      	mov	r0, r3
 8011a94:	f002 fa5d 	bl	8013f52 <memset>
  TaskInfo.TaskID     = TaskID;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8011aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aaa:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8011aac:	f107 0314 	add.w	r3, r7, #20
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f000 ffff 	bl	8012ab4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8011ab6:	bf00      	nop
 8011ab8:	3728      	adds	r7, #40	; 0x28
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
	...

08011ac0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8011ac0:	b480      	push	{r7}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8011ac6:	4b24      	ldr	r3, [pc, #144]	; (8011b58 <_DoInit+0x98>)
 8011ac8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2203      	movs	r2, #3
 8011ace:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2203      	movs	r2, #3
 8011ad4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	4a20      	ldr	r2, [pc, #128]	; (8011b5c <_DoInit+0x9c>)
 8011ada:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	4a20      	ldr	r2, [pc, #128]	; (8011b60 <_DoInit+0xa0>)
 8011ae0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011ae8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2200      	movs	r2, #0
 8011aee:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2200      	movs	r2, #0
 8011af4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2200      	movs	r2, #0
 8011afa:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	4a17      	ldr	r2, [pc, #92]	; (8011b5c <_DoInit+0x9c>)
 8011b00:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	4a17      	ldr	r2, [pc, #92]	; (8011b64 <_DoInit+0xa4>)
 8011b06:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2210      	movs	r2, #16
 8011b0c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2200      	movs	r2, #0
 8011b12:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2200      	movs	r2, #0
 8011b18:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	3307      	adds	r3, #7
 8011b24:	4a10      	ldr	r2, [pc, #64]	; (8011b68 <_DoInit+0xa8>)
 8011b26:	6810      	ldr	r0, [r2, #0]
 8011b28:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8011b2a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	4a0e      	ldr	r2, [pc, #56]	; (8011b6c <_DoInit+0xac>)
 8011b32:	6810      	ldr	r0, [r2, #0]
 8011b34:	6018      	str	r0, [r3, #0]
 8011b36:	8891      	ldrh	r1, [r2, #4]
 8011b38:	7992      	ldrb	r2, [r2, #6]
 8011b3a:	8099      	strh	r1, [r3, #4]
 8011b3c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8011b3e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2220      	movs	r2, #32
 8011b46:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8011b48:	f3bf 8f5f 	dmb	sy
}
 8011b4c:	bf00      	nop
 8011b4e:	370c      	adds	r7, #12
 8011b50:	46bd      	mov	sp, r7
 8011b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b56:	4770      	bx	lr
 8011b58:	2000788c 	.word	0x2000788c
 8011b5c:	080164b8 	.word	0x080164b8
 8011b60:	20007934 	.word	0x20007934
 8011b64:	20007d34 	.word	0x20007d34
 8011b68:	080164c4 	.word	0x080164c4
 8011b6c:	080164c8 	.word	0x080164c8

08011b70 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b08c      	sub	sp, #48	; 0x30
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	60f8      	str	r0, [r7, #12]
 8011b78:	60b9      	str	r1, [r7, #8]
 8011b7a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8011b7c:	4b3e      	ldr	r3, [pc, #248]	; (8011c78 <SEGGER_RTT_ReadNoLock+0x108>)
 8011b7e:	623b      	str	r3, [r7, #32]
 8011b80:	6a3b      	ldr	r3, [r7, #32]
 8011b82:	781b      	ldrb	r3, [r3, #0]
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d101      	bne.n	8011b8e <SEGGER_RTT_ReadNoLock+0x1e>
 8011b8a:	f7ff ff99 	bl	8011ac0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8011b8e:	68fa      	ldr	r2, [r7, #12]
 8011b90:	4613      	mov	r3, r2
 8011b92:	005b      	lsls	r3, r3, #1
 8011b94:	4413      	add	r3, r2
 8011b96:	00db      	lsls	r3, r3, #3
 8011b98:	3360      	adds	r3, #96	; 0x60
 8011b9a:	4a37      	ldr	r2, [pc, #220]	; (8011c78 <SEGGER_RTT_ReadNoLock+0x108>)
 8011b9c:	4413      	add	r3, r2
 8011b9e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8011ba4:	69fb      	ldr	r3, [r7, #28]
 8011ba6:	691b      	ldr	r3, [r3, #16]
 8011ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8011baa:	69fb      	ldr	r3, [r7, #28]
 8011bac:	68db      	ldr	r3, [r3, #12]
 8011bae:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8011bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011bb6:	69bb      	ldr	r3, [r7, #24]
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d92b      	bls.n	8011c14 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8011bbc:	69fb      	ldr	r3, [r7, #28]
 8011bbe:	689a      	ldr	r2, [r3, #8]
 8011bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc2:	1ad3      	subs	r3, r2, r3
 8011bc4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8011bc6:	697a      	ldr	r2, [r7, #20]
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	bf28      	it	cs
 8011bce:	4613      	movcs	r3, r2
 8011bd0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8011bd2:	69fb      	ldr	r3, [r7, #28]
 8011bd4:	685a      	ldr	r2, [r3, #4]
 8011bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd8:	4413      	add	r3, r2
 8011bda:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8011bdc:	697a      	ldr	r2, [r7, #20]
 8011bde:	6939      	ldr	r1, [r7, #16]
 8011be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011be2:	f002 fa8b 	bl	80140fc <memcpy>
    NumBytesRead += NumBytesRem;
 8011be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	4413      	add	r3, r2
 8011bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8011bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	4413      	add	r3, r2
 8011bf4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8011bf6:	687a      	ldr	r2, [r7, #4]
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	1ad3      	subs	r3, r2, r3
 8011bfc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8011bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	4413      	add	r3, r2
 8011c04:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8011c06:	69fb      	ldr	r3, [r7, #28]
 8011c08:	689b      	ldr	r3, [r3, #8]
 8011c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d101      	bne.n	8011c14 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8011c10:	2300      	movs	r3, #0
 8011c12:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8011c14:	69ba      	ldr	r2, [r7, #24]
 8011c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c18:	1ad3      	subs	r3, r2, r3
 8011c1a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8011c1c:	697a      	ldr	r2, [r7, #20]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	4293      	cmp	r3, r2
 8011c22:	bf28      	it	cs
 8011c24:	4613      	movcs	r3, r2
 8011c26:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d019      	beq.n	8011c62 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8011c2e:	69fb      	ldr	r3, [r7, #28]
 8011c30:	685a      	ldr	r2, [r3, #4]
 8011c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c34:	4413      	add	r3, r2
 8011c36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8011c38:	697a      	ldr	r2, [r7, #20]
 8011c3a:	6939      	ldr	r1, [r7, #16]
 8011c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c3e:	f002 fa5d 	bl	80140fc <memcpy>
    NumBytesRead += NumBytesRem;
 8011c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	4413      	add	r3, r2
 8011c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8011c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	4413      	add	r3, r2
 8011c50:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	1ad3      	subs	r3, r2, r3
 8011c58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8011c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	4413      	add	r3, r2
 8011c60:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8011c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d002      	beq.n	8011c6e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8011c68:	69fb      	ldr	r3, [r7, #28]
 8011c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c6c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8011c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3730      	adds	r7, #48	; 0x30
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}
 8011c78:	2000788c 	.word	0x2000788c

08011c7c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b08c      	sub	sp, #48	; 0x30
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	607a      	str	r2, [r7, #4]
  //   4) RdOff >  WrOff => Space is sufficient
  //   5) RdOff >  WrOff => No space in buf
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	1c5a      	adds	r2, r3, #1
 8011c90:	4613      	mov	r3, r2
 8011c92:	005b      	lsls	r3, r3, #1
 8011c94:	4413      	add	r3, r2
 8011c96:	00db      	lsls	r3, r3, #3
 8011c98:	4a35      	ldr	r2, [pc, #212]	; (8011d70 <SEGGER_RTT_WriteSkipNoLock+0xf4>)
 8011c9a:	4413      	add	r3, r2
 8011c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RdOff = pRing->RdOff;
 8011c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca0:	691b      	ldr	r3, [r3, #16]
 8011ca2:	627b      	str	r3, [r7, #36]	; 0x24
  WrOff = pRing->WrOff;
 8011ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca6:	68db      	ldr	r3, [r3, #12]
 8011ca8:	623b      	str	r3, [r7, #32]
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 8011caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cac:	6a3b      	ldr	r3, [r7, #32]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d84f      	bhi.n	8011d52 <SEGGER_RTT_WriteSkipNoLock+0xd6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 8011cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cb4:	689a      	ldr	r2, [r3, #8]
 8011cb6:	6a3b      	ldr	r3, [r7, #32]
 8011cb8:	1ad3      	subs	r3, r2, r3
 8011cba:	3b01      	subs	r3, #1
 8011cbc:	61fb      	str	r3, [r7, #28]
    if (Avail >= NumBytes) {                            // Case 1)?
 8011cbe:	69fa      	ldr	r2, [r7, #28]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d315      	bcc.n	8011cf2 <SEGGER_RTT_WriteSkipNoLock+0x76>
CopyStraight:
 8011cc6:	bf00      	nop
 8011cc8:	e000      	b.n	8011ccc <SEGGER_RTT_WriteSkipNoLock+0x50>
      return 1;
    }
  } else {                                             // Potential case 4)
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
 8011cca:	bf00      	nop
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8011ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cce:	685a      	ldr	r2, [r3, #4]
 8011cd0:	6a3b      	ldr	r3, [r7, #32]
 8011cd2:	4413      	add	r3, r2
 8011cd4:	617b      	str	r3, [r7, #20]
      memcpy((void*)pDst, pData, NumBytes);
 8011cd6:	687a      	ldr	r2, [r7, #4]
 8011cd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011cda:	6978      	ldr	r0, [r7, #20]
 8011cdc:	f002 fa0e 	bl	80140fc <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8011ce0:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = WrOff + NumBytes;
 8011ce4:	6a3a      	ldr	r2, [r7, #32]
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	441a      	add	r2, r3
 8011cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cec:	60da      	str	r2, [r3, #12]
      return 1;
 8011cee:	2301      	movs	r3, #1
 8011cf0:	e039      	b.n	8011d66 <SEGGER_RTT_WriteSkipNoLock+0xea>
    Avail += RdOff;                                     // Space incl. wrap-around
 8011cf2:	69fa      	ldr	r2, [r7, #28]
 8011cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf6:	4413      	add	r3, r2
 8011cf8:	61fb      	str	r3, [r7, #28]
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
 8011cfa:	69fa      	ldr	r2, [r7, #28]
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	d330      	bcc.n	8011d64 <SEGGER_RTT_WriteSkipNoLock+0xe8>
      Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 8011d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d04:	689a      	ldr	r2, [r3, #8]
 8011d06:	6a3b      	ldr	r3, [r7, #32]
 8011d08:	1ad3      	subs	r3, r2, r3
 8011d0a:	61bb      	str	r3, [r7, #24]
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8011d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d0e:	685a      	ldr	r2, [r3, #4]
 8011d10:	6a3b      	ldr	r3, [r7, #32]
 8011d12:	4413      	add	r3, r2
 8011d14:	617b      	str	r3, [r7, #20]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 8011d16:	69ba      	ldr	r2, [r7, #24]
 8011d18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011d1a:	6978      	ldr	r0, [r7, #20]
 8011d1c:	f002 f9ee 	bl	80140fc <memcpy>
      NumBytes -= Rem;
 8011d20:	687a      	ldr	r2, [r7, #4]
 8011d22:	69bb      	ldr	r3, [r7, #24]
 8011d24:	1ad3      	subs	r3, r2, r3
 8011d26:	607b      	str	r3, [r7, #4]
      if (NumBytes) {
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d00a      	beq.n	8011d44 <SEGGER_RTT_WriteSkipNoLock+0xc8>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8011d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	617b      	str	r3, [r7, #20]
        memcpy((void*)pDst, pData + Rem, NumBytes);
 8011d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d36:	69bb      	ldr	r3, [r7, #24]
 8011d38:	4413      	add	r3, r2
 8011d3a:	687a      	ldr	r2, [r7, #4]
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	6978      	ldr	r0, [r7, #20]
 8011d40:	f002 f9dc 	bl	80140fc <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8011d44:	f3bf 8f5f 	dmb	sy
      pRing->WrOff = NumBytes;
 8011d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d4a:	687a      	ldr	r2, [r7, #4]
 8011d4c:	60da      	str	r2, [r3, #12]
      return 1;
 8011d4e:	2301      	movs	r3, #1
 8011d50:	e009      	b.n	8011d66 <SEGGER_RTT_WriteSkipNoLock+0xea>
    Avail = RdOff - WrOff - 1u;
 8011d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d54:	6a3b      	ldr	r3, [r7, #32]
 8011d56:	1ad3      	subs	r3, r2, r3
 8011d58:	3b01      	subs	r3, #1
 8011d5a:	61fb      	str	r3, [r7, #28]
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
 8011d5c:	69fa      	ldr	r2, [r7, #28]
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d2b2      	bcs.n	8011cca <SEGGER_RTT_WriteSkipNoLock+0x4e>
    }
  }
  return 0;     // No space in buffer
 8011d64:	2300      	movs	r3, #0
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3730      	adds	r7, #48	; 0x30
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}
 8011d6e:	bf00      	nop
 8011d70:	2000788c 	.word	0x2000788c

08011d74 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b088      	sub	sp, #32
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	60f8      	str	r0, [r7, #12]
 8011d7c:	60b9      	str	r1, [r7, #8]
 8011d7e:	607a      	str	r2, [r7, #4]
 8011d80:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8011d82:	4b3d      	ldr	r3, [pc, #244]	; (8011e78 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8011d84:	61bb      	str	r3, [r7, #24]
 8011d86:	69bb      	ldr	r3, [r7, #24]
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	b2db      	uxtb	r3, r3
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d101      	bne.n	8011d94 <SEGGER_RTT_AllocUpBuffer+0x20>
 8011d90:	f7ff fe96 	bl	8011ac0 <_DoInit>
  SEGGER_RTT_LOCK();
 8011d94:	f3ef 8311 	mrs	r3, BASEPRI
 8011d98:	f04f 0120 	mov.w	r1, #32
 8011d9c:	f381 8811 	msr	BASEPRI, r1
 8011da0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8011da2:	4b35      	ldr	r3, [pc, #212]	; (8011e78 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8011da4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8011da6:	2300      	movs	r3, #0
 8011da8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8011daa:	6939      	ldr	r1, [r7, #16]
 8011dac:	69fb      	ldr	r3, [r7, #28]
 8011dae:	1c5a      	adds	r2, r3, #1
 8011db0:	4613      	mov	r3, r2
 8011db2:	005b      	lsls	r3, r3, #1
 8011db4:	4413      	add	r3, r2
 8011db6:	00db      	lsls	r3, r3, #3
 8011db8:	440b      	add	r3, r1
 8011dba:	3304      	adds	r3, #4
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d008      	beq.n	8011dd4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8011dc2:	69fb      	ldr	r3, [r7, #28]
 8011dc4:	3301      	adds	r3, #1
 8011dc6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	691b      	ldr	r3, [r3, #16]
 8011dcc:	69fa      	ldr	r2, [r7, #28]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	dbeb      	blt.n	8011daa <SEGGER_RTT_AllocUpBuffer+0x36>
 8011dd2:	e000      	b.n	8011dd6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8011dd4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8011dd6:	693b      	ldr	r3, [r7, #16]
 8011dd8:	691b      	ldr	r3, [r3, #16]
 8011dda:	69fa      	ldr	r2, [r7, #28]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	da3f      	bge.n	8011e60 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8011de0:	6939      	ldr	r1, [r7, #16]
 8011de2:	69fb      	ldr	r3, [r7, #28]
 8011de4:	1c5a      	adds	r2, r3, #1
 8011de6:	4613      	mov	r3, r2
 8011de8:	005b      	lsls	r3, r3, #1
 8011dea:	4413      	add	r3, r2
 8011dec:	00db      	lsls	r3, r3, #3
 8011dee:	440b      	add	r3, r1
 8011df0:	68fa      	ldr	r2, [r7, #12]
 8011df2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8011df4:	6939      	ldr	r1, [r7, #16]
 8011df6:	69fb      	ldr	r3, [r7, #28]
 8011df8:	1c5a      	adds	r2, r3, #1
 8011dfa:	4613      	mov	r3, r2
 8011dfc:	005b      	lsls	r3, r3, #1
 8011dfe:	4413      	add	r3, r2
 8011e00:	00db      	lsls	r3, r3, #3
 8011e02:	440b      	add	r3, r1
 8011e04:	3304      	adds	r3, #4
 8011e06:	68ba      	ldr	r2, [r7, #8]
 8011e08:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8011e0a:	6939      	ldr	r1, [r7, #16]
 8011e0c:	69fa      	ldr	r2, [r7, #28]
 8011e0e:	4613      	mov	r3, r2
 8011e10:	005b      	lsls	r3, r3, #1
 8011e12:	4413      	add	r3, r2
 8011e14:	00db      	lsls	r3, r3, #3
 8011e16:	440b      	add	r3, r1
 8011e18:	3320      	adds	r3, #32
 8011e1a:	687a      	ldr	r2, [r7, #4]
 8011e1c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8011e1e:	6939      	ldr	r1, [r7, #16]
 8011e20:	69fa      	ldr	r2, [r7, #28]
 8011e22:	4613      	mov	r3, r2
 8011e24:	005b      	lsls	r3, r3, #1
 8011e26:	4413      	add	r3, r2
 8011e28:	00db      	lsls	r3, r3, #3
 8011e2a:	440b      	add	r3, r1
 8011e2c:	3328      	adds	r3, #40	; 0x28
 8011e2e:	2200      	movs	r2, #0
 8011e30:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8011e32:	6939      	ldr	r1, [r7, #16]
 8011e34:	69fa      	ldr	r2, [r7, #28]
 8011e36:	4613      	mov	r3, r2
 8011e38:	005b      	lsls	r3, r3, #1
 8011e3a:	4413      	add	r3, r2
 8011e3c:	00db      	lsls	r3, r3, #3
 8011e3e:	440b      	add	r3, r1
 8011e40:	3324      	adds	r3, #36	; 0x24
 8011e42:	2200      	movs	r2, #0
 8011e44:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8011e46:	6939      	ldr	r1, [r7, #16]
 8011e48:	69fa      	ldr	r2, [r7, #28]
 8011e4a:	4613      	mov	r3, r2
 8011e4c:	005b      	lsls	r3, r3, #1
 8011e4e:	4413      	add	r3, r2
 8011e50:	00db      	lsls	r3, r3, #3
 8011e52:	440b      	add	r3, r1
 8011e54:	332c      	adds	r3, #44	; 0x2c
 8011e56:	683a      	ldr	r2, [r7, #0]
 8011e58:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8011e5a:	f3bf 8f5f 	dmb	sy
 8011e5e:	e002      	b.n	8011e66 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8011e60:	f04f 33ff 	mov.w	r3, #4294967295
 8011e64:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8011e6c:	69fb      	ldr	r3, [r7, #28]
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3720      	adds	r7, #32
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}
 8011e76:	bf00      	nop
 8011e78:	2000788c 	.word	0x2000788c

08011e7c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b088      	sub	sp, #32
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	60f8      	str	r0, [r7, #12]
 8011e84:	60b9      	str	r1, [r7, #8]
 8011e86:	607a      	str	r2, [r7, #4]
 8011e88:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8011e8a:	4b33      	ldr	r3, [pc, #204]	; (8011f58 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8011e8c:	61bb      	str	r3, [r7, #24]
 8011e8e:	69bb      	ldr	r3, [r7, #24]
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d101      	bne.n	8011e9c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8011e98:	f7ff fe12 	bl	8011ac0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8011e9c:	4b2e      	ldr	r3, [pc, #184]	; (8011f58 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8011e9e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8011ea0:	697b      	ldr	r3, [r7, #20]
 8011ea2:	695b      	ldr	r3, [r3, #20]
 8011ea4:	461a      	mov	r2, r3
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	4293      	cmp	r3, r2
 8011eaa:	d24d      	bcs.n	8011f48 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8011eac:	f3ef 8311 	mrs	r3, BASEPRI
 8011eb0:	f04f 0120 	mov.w	r1, #32
 8011eb4:	f381 8811 	msr	BASEPRI, r1
 8011eb8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d031      	beq.n	8011f24 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8011ec0:	6979      	ldr	r1, [r7, #20]
 8011ec2:	68fa      	ldr	r2, [r7, #12]
 8011ec4:	4613      	mov	r3, r2
 8011ec6:	005b      	lsls	r3, r3, #1
 8011ec8:	4413      	add	r3, r2
 8011eca:	00db      	lsls	r3, r3, #3
 8011ecc:	440b      	add	r3, r1
 8011ece:	3360      	adds	r3, #96	; 0x60
 8011ed0:	68ba      	ldr	r2, [r7, #8]
 8011ed2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8011ed4:	6979      	ldr	r1, [r7, #20]
 8011ed6:	68fa      	ldr	r2, [r7, #12]
 8011ed8:	4613      	mov	r3, r2
 8011eda:	005b      	lsls	r3, r3, #1
 8011edc:	4413      	add	r3, r2
 8011ede:	00db      	lsls	r3, r3, #3
 8011ee0:	440b      	add	r3, r1
 8011ee2:	3364      	adds	r3, #100	; 0x64
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8011ee8:	6979      	ldr	r1, [r7, #20]
 8011eea:	68fa      	ldr	r2, [r7, #12]
 8011eec:	4613      	mov	r3, r2
 8011eee:	005b      	lsls	r3, r3, #1
 8011ef0:	4413      	add	r3, r2
 8011ef2:	00db      	lsls	r3, r3, #3
 8011ef4:	440b      	add	r3, r1
 8011ef6:	3368      	adds	r3, #104	; 0x68
 8011ef8:	683a      	ldr	r2, [r7, #0]
 8011efa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8011efc:	6979      	ldr	r1, [r7, #20]
 8011efe:	68fa      	ldr	r2, [r7, #12]
 8011f00:	4613      	mov	r3, r2
 8011f02:	005b      	lsls	r3, r3, #1
 8011f04:	4413      	add	r3, r2
 8011f06:	00db      	lsls	r3, r3, #3
 8011f08:	440b      	add	r3, r1
 8011f0a:	3370      	adds	r3, #112	; 0x70
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8011f10:	6979      	ldr	r1, [r7, #20]
 8011f12:	68fa      	ldr	r2, [r7, #12]
 8011f14:	4613      	mov	r3, r2
 8011f16:	005b      	lsls	r3, r3, #1
 8011f18:	4413      	add	r3, r2
 8011f1a:	00db      	lsls	r3, r3, #3
 8011f1c:	440b      	add	r3, r1
 8011f1e:	336c      	adds	r3, #108	; 0x6c
 8011f20:	2200      	movs	r2, #0
 8011f22:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8011f24:	6979      	ldr	r1, [r7, #20]
 8011f26:	68fa      	ldr	r2, [r7, #12]
 8011f28:	4613      	mov	r3, r2
 8011f2a:	005b      	lsls	r3, r3, #1
 8011f2c:	4413      	add	r3, r2
 8011f2e:	00db      	lsls	r3, r3, #3
 8011f30:	440b      	add	r3, r1
 8011f32:	3374      	adds	r3, #116	; 0x74
 8011f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f36:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8011f38:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8011f42:	2300      	movs	r3, #0
 8011f44:	61fb      	str	r3, [r7, #28]
 8011f46:	e002      	b.n	8011f4e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8011f48:	f04f 33ff 	mov.w	r3, #4294967295
 8011f4c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8011f4e:	69fb      	ldr	r3, [r7, #28]
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	3720      	adds	r7, #32
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}
 8011f58:	2000788c 	.word	0x2000788c

08011f5c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8011f5c:	b480      	push	{r7}
 8011f5e:	b087      	sub	sp, #28
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8011f68:	2300      	movs	r3, #0
 8011f6a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8011f6c:	e002      	b.n	8011f74 <_EncodeStr+0x18>
    Len++;
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	3301      	adds	r3, #1
 8011f72:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8011f74:	68ba      	ldr	r2, [r7, #8]
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	4413      	add	r3, r2
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d1f6      	bne.n	8011f6e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8011f80:	693a      	ldr	r2, [r7, #16]
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	429a      	cmp	r2, r3
 8011f86:	d901      	bls.n	8011f8c <_EncodeStr+0x30>
    Len = Limit;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8011f8c:	693b      	ldr	r3, [r7, #16]
 8011f8e:	2bfe      	cmp	r3, #254	; 0xfe
 8011f90:	d806      	bhi.n	8011fa0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	1c5a      	adds	r2, r3, #1
 8011f96:	60fa      	str	r2, [r7, #12]
 8011f98:	693a      	ldr	r2, [r7, #16]
 8011f9a:	b2d2      	uxtb	r2, r2
 8011f9c:	701a      	strb	r2, [r3, #0]
 8011f9e:	e011      	b.n	8011fc4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	1c5a      	adds	r2, r3, #1
 8011fa4:	60fa      	str	r2, [r7, #12]
 8011fa6:	22ff      	movs	r2, #255	; 0xff
 8011fa8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	1c5a      	adds	r2, r3, #1
 8011fae:	60fa      	str	r2, [r7, #12]
 8011fb0:	693a      	ldr	r2, [r7, #16]
 8011fb2:	b2d2      	uxtb	r2, r2
 8011fb4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	0a19      	lsrs	r1, r3, #8
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	1c5a      	adds	r2, r3, #1
 8011fbe:	60fa      	str	r2, [r7, #12]
 8011fc0:	b2ca      	uxtb	r2, r1
 8011fc2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8011fc8:	e00a      	b.n	8011fe0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8011fca:	68ba      	ldr	r2, [r7, #8]
 8011fcc:	1c53      	adds	r3, r2, #1
 8011fce:	60bb      	str	r3, [r7, #8]
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	1c59      	adds	r1, r3, #1
 8011fd4:	60f9      	str	r1, [r7, #12]
 8011fd6:	7812      	ldrb	r2, [r2, #0]
 8011fd8:	701a      	strb	r2, [r3, #0]
    n++;
 8011fda:	697b      	ldr	r3, [r7, #20]
 8011fdc:	3301      	adds	r3, #1
 8011fde:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8011fe0:	697a      	ldr	r2, [r7, #20]
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	d3f0      	bcc.n	8011fca <_EncodeStr+0x6e>
  }
  return pPayload;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	371c      	adds	r7, #28
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr

08011ff6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8011ff6:	b480      	push	{r7}
 8011ff8:	b083      	sub	sp, #12
 8011ffa:	af00      	add	r7, sp, #0
 8011ffc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	3304      	adds	r3, #4
}
 8012002:	4618      	mov	r0, r3
 8012004:	370c      	adds	r7, #12
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr
	...

08012010 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8012010:	b580      	push	{r7, lr}
 8012012:	b082      	sub	sp, #8
 8012014:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8012016:	4b35      	ldr	r3, [pc, #212]	; (80120ec <_HandleIncomingPacket+0xdc>)
 8012018:	7e1b      	ldrb	r3, [r3, #24]
 801201a:	4618      	mov	r0, r3
 801201c:	1cfb      	adds	r3, r7, #3
 801201e:	2201      	movs	r2, #1
 8012020:	4619      	mov	r1, r3
 8012022:	f7ff fda5 	bl	8011b70 <SEGGER_RTT_ReadNoLock>
 8012026:	4603      	mov	r3, r0
 8012028:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2b00      	cmp	r3, #0
 801202e:	dd59      	ble.n	80120e4 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8012030:	78fb      	ldrb	r3, [r7, #3]
 8012032:	2b80      	cmp	r3, #128	; 0x80
 8012034:	d032      	beq.n	801209c <_HandleIncomingPacket+0x8c>
 8012036:	2b80      	cmp	r3, #128	; 0x80
 8012038:	dc42      	bgt.n	80120c0 <_HandleIncomingPacket+0xb0>
 801203a:	2b07      	cmp	r3, #7
 801203c:	dc16      	bgt.n	801206c <_HandleIncomingPacket+0x5c>
 801203e:	2b00      	cmp	r3, #0
 8012040:	dd3e      	ble.n	80120c0 <_HandleIncomingPacket+0xb0>
 8012042:	3b01      	subs	r3, #1
 8012044:	2b06      	cmp	r3, #6
 8012046:	d83b      	bhi.n	80120c0 <_HandleIncomingPacket+0xb0>
 8012048:	a201      	add	r2, pc, #4	; (adr r2, 8012050 <_HandleIncomingPacket+0x40>)
 801204a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801204e:	bf00      	nop
 8012050:	08012073 	.word	0x08012073
 8012054:	08012079 	.word	0x08012079
 8012058:	0801207f 	.word	0x0801207f
 801205c:	08012085 	.word	0x08012085
 8012060:	0801208b 	.word	0x0801208b
 8012064:	08012091 	.word	0x08012091
 8012068:	08012097 	.word	0x08012097
 801206c:	2b7f      	cmp	r3, #127	; 0x7f
 801206e:	d034      	beq.n	80120da <_HandleIncomingPacket+0xca>
 8012070:	e026      	b.n	80120c0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8012072:	f000 fba5 	bl	80127c0 <SEGGER_SYSVIEW_Start>
      break;
 8012076:	e035      	b.n	80120e4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8012078:	f000 fc5c 	bl	8012934 <SEGGER_SYSVIEW_Stop>
      break;
 801207c:	e032      	b.n	80120e4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 801207e:	f000 fe35 	bl	8012cec <SEGGER_SYSVIEW_RecordSystime>
      break;
 8012082:	e02f      	b.n	80120e4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8012084:	f000 fdfa 	bl	8012c7c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8012088:	e02c      	b.n	80120e4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 801208a:	f000 fc79 	bl	8012980 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 801208e:	e029      	b.n	80120e4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8012090:	f001 f8c8 	bl	8013224 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8012094:	e026      	b.n	80120e4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8012096:	f001 f8a7 	bl	80131e8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 801209a:	e023      	b.n	80120e4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 801209c:	4b13      	ldr	r3, [pc, #76]	; (80120ec <_HandleIncomingPacket+0xdc>)
 801209e:	7e1b      	ldrb	r3, [r3, #24]
 80120a0:	4618      	mov	r0, r3
 80120a2:	1cfb      	adds	r3, r7, #3
 80120a4:	2201      	movs	r2, #1
 80120a6:	4619      	mov	r1, r3
 80120a8:	f7ff fd62 	bl	8011b70 <SEGGER_RTT_ReadNoLock>
 80120ac:	4603      	mov	r3, r0
 80120ae:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	dd13      	ble.n	80120de <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80120b6:	78fb      	ldrb	r3, [r7, #3]
 80120b8:	4618      	mov	r0, r3
 80120ba:	f001 f815 	bl	80130e8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80120be:	e00e      	b.n	80120de <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80120c0:	78fb      	ldrb	r3, [r7, #3]
 80120c2:	b25b      	sxtb	r3, r3
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	da0c      	bge.n	80120e2 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80120c8:	4b08      	ldr	r3, [pc, #32]	; (80120ec <_HandleIncomingPacket+0xdc>)
 80120ca:	7e1b      	ldrb	r3, [r3, #24]
 80120cc:	4618      	mov	r0, r3
 80120ce:	1cfb      	adds	r3, r7, #3
 80120d0:	2201      	movs	r2, #1
 80120d2:	4619      	mov	r1, r3
 80120d4:	f7ff fd4c 	bl	8011b70 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80120d8:	e003      	b.n	80120e2 <_HandleIncomingPacket+0xd2>
      break;
 80120da:	bf00      	nop
 80120dc:	e002      	b.n	80120e4 <_HandleIncomingPacket+0xd4>
      break;
 80120de:	bf00      	nop
 80120e0:	e000      	b.n	80120e4 <_HandleIncomingPacket+0xd4>
      break;
 80120e2:	bf00      	nop
    }
  }
}
 80120e4:	bf00      	nop
 80120e6:	3708      	adds	r7, #8
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	20009d4c 	.word	0x20009d4c

080120f0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b08c      	sub	sp, #48	; 0x30
 80120f4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80120f6:	2301      	movs	r3, #1
 80120f8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80120fa:	1d3b      	adds	r3, r7, #4
 80120fc:	3301      	adds	r3, #1
 80120fe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8012100:	69fb      	ldr	r3, [r7, #28]
 8012102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012104:	4b31      	ldr	r3, [pc, #196]	; (80121cc <_TrySendOverflowPacket+0xdc>)
 8012106:	695b      	ldr	r3, [r3, #20]
 8012108:	62bb      	str	r3, [r7, #40]	; 0x28
 801210a:	e00b      	b.n	8012124 <_TrySendOverflowPacket+0x34>
 801210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801210e:	b2da      	uxtb	r2, r3
 8012110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012112:	1c59      	adds	r1, r3, #1
 8012114:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012116:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801211a:	b2d2      	uxtb	r2, r2
 801211c:	701a      	strb	r2, [r3, #0]
 801211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012120:	09db      	lsrs	r3, r3, #7
 8012122:	62bb      	str	r3, [r7, #40]	; 0x28
 8012124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012126:	2b7f      	cmp	r3, #127	; 0x7f
 8012128:	d8f0      	bhi.n	801210c <_TrySendOverflowPacket+0x1c>
 801212a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801212c:	1c5a      	adds	r2, r3, #1
 801212e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012132:	b2d2      	uxtb	r2, r2
 8012134:	701a      	strb	r2, [r3, #0]
 8012136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012138:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 801213a:	4b25      	ldr	r3, [pc, #148]	; (80121d0 <_TrySendOverflowPacket+0xe0>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8012140:	4b22      	ldr	r3, [pc, #136]	; (80121cc <_TrySendOverflowPacket+0xdc>)
 8012142:	68db      	ldr	r3, [r3, #12]
 8012144:	69ba      	ldr	r2, [r7, #24]
 8012146:	1ad3      	subs	r3, r2, r3
 8012148:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 801214a:	69fb      	ldr	r3, [r7, #28]
 801214c:	627b      	str	r3, [r7, #36]	; 0x24
 801214e:	697b      	ldr	r3, [r7, #20]
 8012150:	623b      	str	r3, [r7, #32]
 8012152:	e00b      	b.n	801216c <_TrySendOverflowPacket+0x7c>
 8012154:	6a3b      	ldr	r3, [r7, #32]
 8012156:	b2da      	uxtb	r2, r3
 8012158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215a:	1c59      	adds	r1, r3, #1
 801215c:	6279      	str	r1, [r7, #36]	; 0x24
 801215e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012162:	b2d2      	uxtb	r2, r2
 8012164:	701a      	strb	r2, [r3, #0]
 8012166:	6a3b      	ldr	r3, [r7, #32]
 8012168:	09db      	lsrs	r3, r3, #7
 801216a:	623b      	str	r3, [r7, #32]
 801216c:	6a3b      	ldr	r3, [r7, #32]
 801216e:	2b7f      	cmp	r3, #127	; 0x7f
 8012170:	d8f0      	bhi.n	8012154 <_TrySendOverflowPacket+0x64>
 8012172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012174:	1c5a      	adds	r2, r3, #1
 8012176:	627a      	str	r2, [r7, #36]	; 0x24
 8012178:	6a3a      	ldr	r2, [r7, #32]
 801217a:	b2d2      	uxtb	r2, r2
 801217c:	701a      	strb	r2, [r3, #0]
 801217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012180:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8012182:	4b12      	ldr	r3, [pc, #72]	; (80121cc <_TrySendOverflowPacket+0xdc>)
 8012184:	785b      	ldrb	r3, [r3, #1]
 8012186:	4618      	mov	r0, r3
 8012188:	1d3b      	adds	r3, r7, #4
 801218a:	69fa      	ldr	r2, [r7, #28]
 801218c:	1ad3      	subs	r3, r2, r3
 801218e:	461a      	mov	r2, r3
 8012190:	1d3b      	adds	r3, r7, #4
 8012192:	4619      	mov	r1, r3
 8012194:	f7ff fd72 	bl	8011c7c <SEGGER_RTT_WriteSkipNoLock>
 8012198:	4603      	mov	r3, r0
 801219a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d009      	beq.n	80121b6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80121a2:	4a0a      	ldr	r2, [pc, #40]	; (80121cc <_TrySendOverflowPacket+0xdc>)
 80121a4:	69bb      	ldr	r3, [r7, #24]
 80121a6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80121a8:	4b08      	ldr	r3, [pc, #32]	; (80121cc <_TrySendOverflowPacket+0xdc>)
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	3b01      	subs	r3, #1
 80121ae:	b2da      	uxtb	r2, r3
 80121b0:	4b06      	ldr	r3, [pc, #24]	; (80121cc <_TrySendOverflowPacket+0xdc>)
 80121b2:	701a      	strb	r2, [r3, #0]
 80121b4:	e004      	b.n	80121c0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80121b6:	4b05      	ldr	r3, [pc, #20]	; (80121cc <_TrySendOverflowPacket+0xdc>)
 80121b8:	695b      	ldr	r3, [r3, #20]
 80121ba:	3301      	adds	r3, #1
 80121bc:	4a03      	ldr	r2, [pc, #12]	; (80121cc <_TrySendOverflowPacket+0xdc>)
 80121be:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80121c0:	693b      	ldr	r3, [r7, #16]
}
 80121c2:	4618      	mov	r0, r3
 80121c4:	3730      	adds	r7, #48	; 0x30
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}
 80121ca:	bf00      	nop
 80121cc:	20009d4c 	.word	0x20009d4c
 80121d0:	e0001004 	.word	0xe0001004

080121d4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b08a      	sub	sp, #40	; 0x28
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80121e0:	4b6c      	ldr	r3, [pc, #432]	; (8012394 <_SendPacket+0x1c0>)
 80121e2:	781b      	ldrb	r3, [r3, #0]
 80121e4:	2b01      	cmp	r3, #1
 80121e6:	d010      	beq.n	801220a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80121e8:	4b6a      	ldr	r3, [pc, #424]	; (8012394 <_SendPacket+0x1c0>)
 80121ea:	781b      	ldrb	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	f000 80a3 	beq.w	8012338 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80121f2:	4b68      	ldr	r3, [pc, #416]	; (8012394 <_SendPacket+0x1c0>)
 80121f4:	781b      	ldrb	r3, [r3, #0]
 80121f6:	2b02      	cmp	r3, #2
 80121f8:	d109      	bne.n	801220e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80121fa:	f7ff ff79 	bl	80120f0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80121fe:	4b65      	ldr	r3, [pc, #404]	; (8012394 <_SendPacket+0x1c0>)
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	2b01      	cmp	r3, #1
 8012204:	f040 809a 	bne.w	801233c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8012208:	e001      	b.n	801220e <_SendPacket+0x3a>
    goto Send;
 801220a:	bf00      	nop
 801220c:	e000      	b.n	8012210 <_SendPacket+0x3c>
Send:
 801220e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2b1f      	cmp	r3, #31
 8012214:	d809      	bhi.n	801222a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8012216:	4b5f      	ldr	r3, [pc, #380]	; (8012394 <_SendPacket+0x1c0>)
 8012218:	69da      	ldr	r2, [r3, #28]
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	fa22 f303 	lsr.w	r3, r2, r3
 8012220:	f003 0301 	and.w	r3, r3, #1
 8012224:	2b00      	cmp	r3, #0
 8012226:	f040 808b 	bne.w	8012340 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2b17      	cmp	r3, #23
 801222e:	d807      	bhi.n	8012240 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	3b01      	subs	r3, #1
 8012234:	60fb      	str	r3, [r7, #12]
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	b2da      	uxtb	r2, r3
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	701a      	strb	r2, [r3, #0]
 801223e:	e03d      	b.n	80122bc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8012240:	68ba      	ldr	r2, [r7, #8]
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	1ad3      	subs	r3, r2, r3
 8012246:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8012248:	69fb      	ldr	r3, [r7, #28]
 801224a:	2b7f      	cmp	r3, #127	; 0x7f
 801224c:	d912      	bls.n	8012274 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 801224e:	69fb      	ldr	r3, [r7, #28]
 8012250:	09da      	lsrs	r2, r3, #7
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	3b01      	subs	r3, #1
 8012256:	60fb      	str	r3, [r7, #12]
 8012258:	b2d2      	uxtb	r2, r2
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 801225e:	69fb      	ldr	r3, [r7, #28]
 8012260:	b2db      	uxtb	r3, r3
 8012262:	68fa      	ldr	r2, [r7, #12]
 8012264:	3a01      	subs	r2, #1
 8012266:	60fa      	str	r2, [r7, #12]
 8012268:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801226c:	b2da      	uxtb	r2, r3
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	701a      	strb	r2, [r3, #0]
 8012272:	e006      	b.n	8012282 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	3b01      	subs	r3, #1
 8012278:	60fb      	str	r3, [r7, #12]
 801227a:	69fb      	ldr	r3, [r7, #28]
 801227c:	b2da      	uxtb	r2, r3
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2b7f      	cmp	r3, #127	; 0x7f
 8012286:	d912      	bls.n	80122ae <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	09da      	lsrs	r2, r3, #7
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	3b01      	subs	r3, #1
 8012290:	60fb      	str	r3, [r7, #12]
 8012292:	b2d2      	uxtb	r2, r2
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	b2db      	uxtb	r3, r3
 801229c:	68fa      	ldr	r2, [r7, #12]
 801229e:	3a01      	subs	r2, #1
 80122a0:	60fa      	str	r2, [r7, #12]
 80122a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80122a6:	b2da      	uxtb	r2, r3
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	701a      	strb	r2, [r3, #0]
 80122ac:	e006      	b.n	80122bc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	3b01      	subs	r3, #1
 80122b2:	60fb      	str	r3, [r7, #12]
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	b2da      	uxtb	r2, r3
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80122bc:	4b36      	ldr	r3, [pc, #216]	; (8012398 <_SendPacket+0x1c4>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80122c2:	4b34      	ldr	r3, [pc, #208]	; (8012394 <_SendPacket+0x1c0>)
 80122c4:	68db      	ldr	r3, [r3, #12]
 80122c6:	69ba      	ldr	r2, [r7, #24]
 80122c8:	1ad3      	subs	r3, r2, r3
 80122ca:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	627b      	str	r3, [r7, #36]	; 0x24
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	623b      	str	r3, [r7, #32]
 80122d4:	e00b      	b.n	80122ee <_SendPacket+0x11a>
 80122d6:	6a3b      	ldr	r3, [r7, #32]
 80122d8:	b2da      	uxtb	r2, r3
 80122da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122dc:	1c59      	adds	r1, r3, #1
 80122de:	6279      	str	r1, [r7, #36]	; 0x24
 80122e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80122e4:	b2d2      	uxtb	r2, r2
 80122e6:	701a      	strb	r2, [r3, #0]
 80122e8:	6a3b      	ldr	r3, [r7, #32]
 80122ea:	09db      	lsrs	r3, r3, #7
 80122ec:	623b      	str	r3, [r7, #32]
 80122ee:	6a3b      	ldr	r3, [r7, #32]
 80122f0:	2b7f      	cmp	r3, #127	; 0x7f
 80122f2:	d8f0      	bhi.n	80122d6 <_SendPacket+0x102>
 80122f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f6:	1c5a      	adds	r2, r3, #1
 80122f8:	627a      	str	r2, [r7, #36]	; 0x24
 80122fa:	6a3a      	ldr	r2, [r7, #32]
 80122fc:	b2d2      	uxtb	r2, r2
 80122fe:	701a      	strb	r2, [r3, #0]
 8012300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012302:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8012304:	4b23      	ldr	r3, [pc, #140]	; (8012394 <_SendPacket+0x1c0>)
 8012306:	785b      	ldrb	r3, [r3, #1]
 8012308:	4618      	mov	r0, r3
 801230a:	68ba      	ldr	r2, [r7, #8]
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	1ad3      	subs	r3, r2, r3
 8012310:	461a      	mov	r2, r3
 8012312:	68f9      	ldr	r1, [r7, #12]
 8012314:	f7ff fcb2 	bl	8011c7c <SEGGER_RTT_WriteSkipNoLock>
 8012318:	4603      	mov	r3, r0
 801231a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d003      	beq.n	801232a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8012322:	4a1c      	ldr	r2, [pc, #112]	; (8012394 <_SendPacket+0x1c0>)
 8012324:	69bb      	ldr	r3, [r7, #24]
 8012326:	60d3      	str	r3, [r2, #12]
 8012328:	e00b      	b.n	8012342 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 801232a:	4b1a      	ldr	r3, [pc, #104]	; (8012394 <_SendPacket+0x1c0>)
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	3301      	adds	r3, #1
 8012330:	b2da      	uxtb	r2, r3
 8012332:	4b18      	ldr	r3, [pc, #96]	; (8012394 <_SendPacket+0x1c0>)
 8012334:	701a      	strb	r2, [r3, #0]
 8012336:	e004      	b.n	8012342 <_SendPacket+0x16e>
    goto SendDone;
 8012338:	bf00      	nop
 801233a:	e002      	b.n	8012342 <_SendPacket+0x16e>
      goto SendDone;
 801233c:	bf00      	nop
 801233e:	e000      	b.n	8012342 <_SendPacket+0x16e>
      goto SendDone;
 8012340:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8012342:	4b14      	ldr	r3, [pc, #80]	; (8012394 <_SendPacket+0x1c0>)
 8012344:	7e1b      	ldrb	r3, [r3, #24]
 8012346:	4619      	mov	r1, r3
 8012348:	4a14      	ldr	r2, [pc, #80]	; (801239c <_SendPacket+0x1c8>)
 801234a:	460b      	mov	r3, r1
 801234c:	005b      	lsls	r3, r3, #1
 801234e:	440b      	add	r3, r1
 8012350:	00db      	lsls	r3, r3, #3
 8012352:	4413      	add	r3, r2
 8012354:	336c      	adds	r3, #108	; 0x6c
 8012356:	681a      	ldr	r2, [r3, #0]
 8012358:	4b0e      	ldr	r3, [pc, #56]	; (8012394 <_SendPacket+0x1c0>)
 801235a:	7e1b      	ldrb	r3, [r3, #24]
 801235c:	4618      	mov	r0, r3
 801235e:	490f      	ldr	r1, [pc, #60]	; (801239c <_SendPacket+0x1c8>)
 8012360:	4603      	mov	r3, r0
 8012362:	005b      	lsls	r3, r3, #1
 8012364:	4403      	add	r3, r0
 8012366:	00db      	lsls	r3, r3, #3
 8012368:	440b      	add	r3, r1
 801236a:	3370      	adds	r3, #112	; 0x70
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	429a      	cmp	r2, r3
 8012370:	d00b      	beq.n	801238a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8012372:	4b08      	ldr	r3, [pc, #32]	; (8012394 <_SendPacket+0x1c0>)
 8012374:	789b      	ldrb	r3, [r3, #2]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d107      	bne.n	801238a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 801237a:	4b06      	ldr	r3, [pc, #24]	; (8012394 <_SendPacket+0x1c0>)
 801237c:	2201      	movs	r2, #1
 801237e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8012380:	f7ff fe46 	bl	8012010 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8012384:	4b03      	ldr	r3, [pc, #12]	; (8012394 <_SendPacket+0x1c0>)
 8012386:	2200      	movs	r2, #0
 8012388:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 801238a:	bf00      	nop
 801238c:	3728      	adds	r7, #40	; 0x28
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}
 8012392:	bf00      	nop
 8012394:	20009d4c 	.word	0x20009d4c
 8012398:	e0001004 	.word	0xe0001004
 801239c:	2000788c 	.word	0x2000788c

080123a0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b086      	sub	sp, #24
 80123a4:	af02      	add	r7, sp, #8
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	60b9      	str	r1, [r7, #8]
 80123aa:	607a      	str	r2, [r7, #4]
 80123ac:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80123ae:	2300      	movs	r3, #0
 80123b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80123b4:	4917      	ldr	r1, [pc, #92]	; (8012414 <SEGGER_SYSVIEW_Init+0x74>)
 80123b6:	4818      	ldr	r0, [pc, #96]	; (8012418 <SEGGER_SYSVIEW_Init+0x78>)
 80123b8:	f7ff fcdc 	bl	8011d74 <SEGGER_RTT_AllocUpBuffer>
 80123bc:	4603      	mov	r3, r0
 80123be:	b2da      	uxtb	r2, r3
 80123c0:	4b16      	ldr	r3, [pc, #88]	; (801241c <SEGGER_SYSVIEW_Init+0x7c>)
 80123c2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80123c4:	4b15      	ldr	r3, [pc, #84]	; (801241c <SEGGER_SYSVIEW_Init+0x7c>)
 80123c6:	785a      	ldrb	r2, [r3, #1]
 80123c8:	4b14      	ldr	r3, [pc, #80]	; (801241c <SEGGER_SYSVIEW_Init+0x7c>)
 80123ca:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80123cc:	4b13      	ldr	r3, [pc, #76]	; (801241c <SEGGER_SYSVIEW_Init+0x7c>)
 80123ce:	7e1b      	ldrb	r3, [r3, #24]
 80123d0:	4618      	mov	r0, r3
 80123d2:	2300      	movs	r3, #0
 80123d4:	9300      	str	r3, [sp, #0]
 80123d6:	2308      	movs	r3, #8
 80123d8:	4a11      	ldr	r2, [pc, #68]	; (8012420 <SEGGER_SYSVIEW_Init+0x80>)
 80123da:	490f      	ldr	r1, [pc, #60]	; (8012418 <SEGGER_SYSVIEW_Init+0x78>)
 80123dc:	f7ff fd4e 	bl	8011e7c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80123e0:	4b0e      	ldr	r3, [pc, #56]	; (801241c <SEGGER_SYSVIEW_Init+0x7c>)
 80123e2:	2200      	movs	r2, #0
 80123e4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80123e6:	4b0f      	ldr	r3, [pc, #60]	; (8012424 <SEGGER_SYSVIEW_Init+0x84>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	4a0c      	ldr	r2, [pc, #48]	; (801241c <SEGGER_SYSVIEW_Init+0x7c>)
 80123ec:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80123ee:	4a0b      	ldr	r2, [pc, #44]	; (801241c <SEGGER_SYSVIEW_Init+0x7c>)
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80123f4:	4a09      	ldr	r2, [pc, #36]	; (801241c <SEGGER_SYSVIEW_Init+0x7c>)
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80123fa:	4a08      	ldr	r2, [pc, #32]	; (801241c <SEGGER_SYSVIEW_Init+0x7c>)
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8012400:	4a06      	ldr	r2, [pc, #24]	; (801241c <SEGGER_SYSVIEW_Init+0x7c>)
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8012406:	4b05      	ldr	r3, [pc, #20]	; (801241c <SEGGER_SYSVIEW_Init+0x7c>)
 8012408:	2200      	movs	r2, #0
 801240a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 801240c:	bf00      	nop
 801240e:	3710      	adds	r7, #16
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}
 8012414:	20007d44 	.word	0x20007d44
 8012418:	080164d0 	.word	0x080164d0
 801241c:	20009d4c 	.word	0x20009d4c
 8012420:	20009d44 	.word	0x20009d44
 8012424:	e0001004 	.word	0xe0001004

08012428 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8012428:	b480      	push	{r7}
 801242a:	b083      	sub	sp, #12
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8012430:	4a04      	ldr	r2, [pc, #16]	; (8012444 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6113      	str	r3, [r2, #16]
}
 8012436:	bf00      	nop
 8012438:	370c      	adds	r7, #12
 801243a:	46bd      	mov	sp, r7
 801243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012440:	4770      	bx	lr
 8012442:	bf00      	nop
 8012444:	20009d4c 	.word	0x20009d4c

08012448 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8012448:	b580      	push	{r7, lr}
 801244a:	b084      	sub	sp, #16
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8012450:	f3ef 8311 	mrs	r3, BASEPRI
 8012454:	f04f 0120 	mov.w	r1, #32
 8012458:	f381 8811 	msr	BASEPRI, r1
 801245c:	60fb      	str	r3, [r7, #12]
 801245e:	4808      	ldr	r0, [pc, #32]	; (8012480 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8012460:	f7ff fdc9 	bl	8011ff6 <_PreparePacket>
 8012464:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8012466:	687a      	ldr	r2, [r7, #4]
 8012468:	68b9      	ldr	r1, [r7, #8]
 801246a:	68b8      	ldr	r0, [r7, #8]
 801246c:	f7ff feb2 	bl	80121d4 <_SendPacket>
  RECORD_END();
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f383 8811 	msr	BASEPRI, r3
}
 8012476:	bf00      	nop
 8012478:	3710      	adds	r7, #16
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}
 801247e:	bf00      	nop
 8012480:	20009d7c 	.word	0x20009d7c

08012484 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8012484:	b580      	push	{r7, lr}
 8012486:	b088      	sub	sp, #32
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801248e:	f3ef 8311 	mrs	r3, BASEPRI
 8012492:	f04f 0120 	mov.w	r1, #32
 8012496:	f381 8811 	msr	BASEPRI, r1
 801249a:	617b      	str	r3, [r7, #20]
 801249c:	4816      	ldr	r0, [pc, #88]	; (80124f8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 801249e:	f7ff fdaa 	bl	8011ff6 <_PreparePacket>
 80124a2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80124a4:	693b      	ldr	r3, [r7, #16]
 80124a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	61fb      	str	r3, [r7, #28]
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	61bb      	str	r3, [r7, #24]
 80124b0:	e00b      	b.n	80124ca <SEGGER_SYSVIEW_RecordU32+0x46>
 80124b2:	69bb      	ldr	r3, [r7, #24]
 80124b4:	b2da      	uxtb	r2, r3
 80124b6:	69fb      	ldr	r3, [r7, #28]
 80124b8:	1c59      	adds	r1, r3, #1
 80124ba:	61f9      	str	r1, [r7, #28]
 80124bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80124c0:	b2d2      	uxtb	r2, r2
 80124c2:	701a      	strb	r2, [r3, #0]
 80124c4:	69bb      	ldr	r3, [r7, #24]
 80124c6:	09db      	lsrs	r3, r3, #7
 80124c8:	61bb      	str	r3, [r7, #24]
 80124ca:	69bb      	ldr	r3, [r7, #24]
 80124cc:	2b7f      	cmp	r3, #127	; 0x7f
 80124ce:	d8f0      	bhi.n	80124b2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80124d0:	69fb      	ldr	r3, [r7, #28]
 80124d2:	1c5a      	adds	r2, r3, #1
 80124d4:	61fa      	str	r2, [r7, #28]
 80124d6:	69ba      	ldr	r2, [r7, #24]
 80124d8:	b2d2      	uxtb	r2, r2
 80124da:	701a      	strb	r2, [r3, #0]
 80124dc:	69fb      	ldr	r3, [r7, #28]
 80124de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80124e0:	687a      	ldr	r2, [r7, #4]
 80124e2:	68f9      	ldr	r1, [r7, #12]
 80124e4:	6938      	ldr	r0, [r7, #16]
 80124e6:	f7ff fe75 	bl	80121d4 <_SendPacket>
  RECORD_END();
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	f383 8811 	msr	BASEPRI, r3
}
 80124f0:	bf00      	nop
 80124f2:	3720      	adds	r7, #32
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}
 80124f8:	20009d7c 	.word	0x20009d7c

080124fc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b08c      	sub	sp, #48	; 0x30
 8012500:	af00      	add	r7, sp, #0
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	60b9      	str	r1, [r7, #8]
 8012506:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8012508:	f3ef 8311 	mrs	r3, BASEPRI
 801250c:	f04f 0120 	mov.w	r1, #32
 8012510:	f381 8811 	msr	BASEPRI, r1
 8012514:	61fb      	str	r3, [r7, #28]
 8012516:	4825      	ldr	r0, [pc, #148]	; (80125ac <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8012518:	f7ff fd6d 	bl	8011ff6 <_PreparePacket>
 801251c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 801251e:	69bb      	ldr	r3, [r7, #24]
 8012520:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	62bb      	str	r3, [r7, #40]	; 0x28
 801252a:	e00b      	b.n	8012544 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 801252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801252e:	b2da      	uxtb	r2, r3
 8012530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012532:	1c59      	adds	r1, r3, #1
 8012534:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012536:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801253a:	b2d2      	uxtb	r2, r2
 801253c:	701a      	strb	r2, [r3, #0]
 801253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012540:	09db      	lsrs	r3, r3, #7
 8012542:	62bb      	str	r3, [r7, #40]	; 0x28
 8012544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012546:	2b7f      	cmp	r3, #127	; 0x7f
 8012548:	d8f0      	bhi.n	801252c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 801254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801254c:	1c5a      	adds	r2, r3, #1
 801254e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012552:	b2d2      	uxtb	r2, r2
 8012554:	701a      	strb	r2, [r3, #0]
 8012556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012558:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	627b      	str	r3, [r7, #36]	; 0x24
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	623b      	str	r3, [r7, #32]
 8012562:	e00b      	b.n	801257c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8012564:	6a3b      	ldr	r3, [r7, #32]
 8012566:	b2da      	uxtb	r2, r3
 8012568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801256a:	1c59      	adds	r1, r3, #1
 801256c:	6279      	str	r1, [r7, #36]	; 0x24
 801256e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012572:	b2d2      	uxtb	r2, r2
 8012574:	701a      	strb	r2, [r3, #0]
 8012576:	6a3b      	ldr	r3, [r7, #32]
 8012578:	09db      	lsrs	r3, r3, #7
 801257a:	623b      	str	r3, [r7, #32]
 801257c:	6a3b      	ldr	r3, [r7, #32]
 801257e:	2b7f      	cmp	r3, #127	; 0x7f
 8012580:	d8f0      	bhi.n	8012564 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8012582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012584:	1c5a      	adds	r2, r3, #1
 8012586:	627a      	str	r2, [r7, #36]	; 0x24
 8012588:	6a3a      	ldr	r2, [r7, #32]
 801258a:	b2d2      	uxtb	r2, r2
 801258c:	701a      	strb	r2, [r3, #0]
 801258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012590:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8012592:	68fa      	ldr	r2, [r7, #12]
 8012594:	6979      	ldr	r1, [r7, #20]
 8012596:	69b8      	ldr	r0, [r7, #24]
 8012598:	f7ff fe1c 	bl	80121d4 <_SendPacket>
  RECORD_END();
 801259c:	69fb      	ldr	r3, [r7, #28]
 801259e:	f383 8811 	msr	BASEPRI, r3
}
 80125a2:	bf00      	nop
 80125a4:	3730      	adds	r7, #48	; 0x30
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	20009d7c 	.word	0x20009d7c

080125b0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b08e      	sub	sp, #56	; 0x38
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	60f8      	str	r0, [r7, #12]
 80125b8:	60b9      	str	r1, [r7, #8]
 80125ba:	607a      	str	r2, [r7, #4]
 80125bc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80125be:	f3ef 8311 	mrs	r3, BASEPRI
 80125c2:	f04f 0120 	mov.w	r1, #32
 80125c6:	f381 8811 	msr	BASEPRI, r1
 80125ca:	61fb      	str	r3, [r7, #28]
 80125cc:	4832      	ldr	r0, [pc, #200]	; (8012698 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80125ce:	f7ff fd12 	bl	8011ff6 <_PreparePacket>
 80125d2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80125d4:	69bb      	ldr	r3, [r7, #24]
 80125d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	637b      	str	r3, [r7, #52]	; 0x34
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	633b      	str	r3, [r7, #48]	; 0x30
 80125e0:	e00b      	b.n	80125fa <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80125e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e4:	b2da      	uxtb	r2, r3
 80125e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125e8:	1c59      	adds	r1, r3, #1
 80125ea:	6379      	str	r1, [r7, #52]	; 0x34
 80125ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80125f0:	b2d2      	uxtb	r2, r2
 80125f2:	701a      	strb	r2, [r3, #0]
 80125f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125f6:	09db      	lsrs	r3, r3, #7
 80125f8:	633b      	str	r3, [r7, #48]	; 0x30
 80125fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125fc:	2b7f      	cmp	r3, #127	; 0x7f
 80125fe:	d8f0      	bhi.n	80125e2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8012600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012602:	1c5a      	adds	r2, r3, #1
 8012604:	637a      	str	r2, [r7, #52]	; 0x34
 8012606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012608:	b2d2      	uxtb	r2, r2
 801260a:	701a      	strb	r2, [r3, #0]
 801260c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801260e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	62bb      	str	r3, [r7, #40]	; 0x28
 8012618:	e00b      	b.n	8012632 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 801261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801261c:	b2da      	uxtb	r2, r3
 801261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012620:	1c59      	adds	r1, r3, #1
 8012622:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012624:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012628:	b2d2      	uxtb	r2, r2
 801262a:	701a      	strb	r2, [r3, #0]
 801262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262e:	09db      	lsrs	r3, r3, #7
 8012630:	62bb      	str	r3, [r7, #40]	; 0x28
 8012632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012634:	2b7f      	cmp	r3, #127	; 0x7f
 8012636:	d8f0      	bhi.n	801261a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8012638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801263a:	1c5a      	adds	r2, r3, #1
 801263c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801263e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012640:	b2d2      	uxtb	r2, r2
 8012642:	701a      	strb	r2, [r3, #0]
 8012644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012646:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	627b      	str	r3, [r7, #36]	; 0x24
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	623b      	str	r3, [r7, #32]
 8012650:	e00b      	b.n	801266a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8012652:	6a3b      	ldr	r3, [r7, #32]
 8012654:	b2da      	uxtb	r2, r3
 8012656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012658:	1c59      	adds	r1, r3, #1
 801265a:	6279      	str	r1, [r7, #36]	; 0x24
 801265c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012660:	b2d2      	uxtb	r2, r2
 8012662:	701a      	strb	r2, [r3, #0]
 8012664:	6a3b      	ldr	r3, [r7, #32]
 8012666:	09db      	lsrs	r3, r3, #7
 8012668:	623b      	str	r3, [r7, #32]
 801266a:	6a3b      	ldr	r3, [r7, #32]
 801266c:	2b7f      	cmp	r3, #127	; 0x7f
 801266e:	d8f0      	bhi.n	8012652 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8012670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012672:	1c5a      	adds	r2, r3, #1
 8012674:	627a      	str	r2, [r7, #36]	; 0x24
 8012676:	6a3a      	ldr	r2, [r7, #32]
 8012678:	b2d2      	uxtb	r2, r2
 801267a:	701a      	strb	r2, [r3, #0]
 801267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8012680:	68fa      	ldr	r2, [r7, #12]
 8012682:	6979      	ldr	r1, [r7, #20]
 8012684:	69b8      	ldr	r0, [r7, #24]
 8012686:	f7ff fda5 	bl	80121d4 <_SendPacket>
  RECORD_END();
 801268a:	69fb      	ldr	r3, [r7, #28]
 801268c:	f383 8811 	msr	BASEPRI, r3
}
 8012690:	bf00      	nop
 8012692:	3738      	adds	r7, #56	; 0x38
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}
 8012698:	20009d7c 	.word	0x20009d7c

0801269c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 801269c:	b580      	push	{r7, lr}
 801269e:	b090      	sub	sp, #64	; 0x40
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
 80126a8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80126aa:	f3ef 8311 	mrs	r3, BASEPRI
 80126ae:	f04f 0120 	mov.w	r1, #32
 80126b2:	f381 8811 	msr	BASEPRI, r1
 80126b6:	61fb      	str	r3, [r7, #28]
 80126b8:	4840      	ldr	r0, [pc, #256]	; (80127bc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80126ba:	f7ff fc9c 	bl	8011ff6 <_PreparePacket>
 80126be:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80126c0:	69bb      	ldr	r3, [r7, #24]
 80126c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80126cc:	e00b      	b.n	80126e6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80126ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d0:	b2da      	uxtb	r2, r3
 80126d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126d4:	1c59      	adds	r1, r3, #1
 80126d6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80126d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80126dc:	b2d2      	uxtb	r2, r2
 80126de:	701a      	strb	r2, [r3, #0]
 80126e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e2:	09db      	lsrs	r3, r3, #7
 80126e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80126e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e8:	2b7f      	cmp	r3, #127	; 0x7f
 80126ea:	d8f0      	bhi.n	80126ce <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80126ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ee:	1c5a      	adds	r2, r3, #1
 80126f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80126f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126f4:	b2d2      	uxtb	r2, r2
 80126f6:	701a      	strb	r2, [r3, #0]
 80126f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	637b      	str	r3, [r7, #52]	; 0x34
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	633b      	str	r3, [r7, #48]	; 0x30
 8012704:	e00b      	b.n	801271e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8012706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012708:	b2da      	uxtb	r2, r3
 801270a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801270c:	1c59      	adds	r1, r3, #1
 801270e:	6379      	str	r1, [r7, #52]	; 0x34
 8012710:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012714:	b2d2      	uxtb	r2, r2
 8012716:	701a      	strb	r2, [r3, #0]
 8012718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801271a:	09db      	lsrs	r3, r3, #7
 801271c:	633b      	str	r3, [r7, #48]	; 0x30
 801271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012720:	2b7f      	cmp	r3, #127	; 0x7f
 8012722:	d8f0      	bhi.n	8012706 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8012724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012726:	1c5a      	adds	r2, r3, #1
 8012728:	637a      	str	r2, [r7, #52]	; 0x34
 801272a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801272c:	b2d2      	uxtb	r2, r2
 801272e:	701a      	strb	r2, [r3, #0]
 8012730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012732:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	62bb      	str	r3, [r7, #40]	; 0x28
 801273c:	e00b      	b.n	8012756 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 801273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012740:	b2da      	uxtb	r2, r3
 8012742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012744:	1c59      	adds	r1, r3, #1
 8012746:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012748:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801274c:	b2d2      	uxtb	r2, r2
 801274e:	701a      	strb	r2, [r3, #0]
 8012750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012752:	09db      	lsrs	r3, r3, #7
 8012754:	62bb      	str	r3, [r7, #40]	; 0x28
 8012756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012758:	2b7f      	cmp	r3, #127	; 0x7f
 801275a:	d8f0      	bhi.n	801273e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 801275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801275e:	1c5a      	adds	r2, r3, #1
 8012760:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012764:	b2d2      	uxtb	r2, r2
 8012766:	701a      	strb	r2, [r3, #0]
 8012768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 801276c:	697b      	ldr	r3, [r7, #20]
 801276e:	627b      	str	r3, [r7, #36]	; 0x24
 8012770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012772:	623b      	str	r3, [r7, #32]
 8012774:	e00b      	b.n	801278e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8012776:	6a3b      	ldr	r3, [r7, #32]
 8012778:	b2da      	uxtb	r2, r3
 801277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277c:	1c59      	adds	r1, r3, #1
 801277e:	6279      	str	r1, [r7, #36]	; 0x24
 8012780:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012784:	b2d2      	uxtb	r2, r2
 8012786:	701a      	strb	r2, [r3, #0]
 8012788:	6a3b      	ldr	r3, [r7, #32]
 801278a:	09db      	lsrs	r3, r3, #7
 801278c:	623b      	str	r3, [r7, #32]
 801278e:	6a3b      	ldr	r3, [r7, #32]
 8012790:	2b7f      	cmp	r3, #127	; 0x7f
 8012792:	d8f0      	bhi.n	8012776 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8012794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012796:	1c5a      	adds	r2, r3, #1
 8012798:	627a      	str	r2, [r7, #36]	; 0x24
 801279a:	6a3a      	ldr	r2, [r7, #32]
 801279c:	b2d2      	uxtb	r2, r2
 801279e:	701a      	strb	r2, [r3, #0]
 80127a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80127a4:	68fa      	ldr	r2, [r7, #12]
 80127a6:	6979      	ldr	r1, [r7, #20]
 80127a8:	69b8      	ldr	r0, [r7, #24]
 80127aa:	f7ff fd13 	bl	80121d4 <_SendPacket>
  RECORD_END();
 80127ae:	69fb      	ldr	r3, [r7, #28]
 80127b0:	f383 8811 	msr	BASEPRI, r3
}
 80127b4:	bf00      	nop
 80127b6:	3740      	adds	r7, #64	; 0x40
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}
 80127bc:	20009d7c 	.word	0x20009d7c

080127c0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b08c      	sub	sp, #48	; 0x30
 80127c4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80127c6:	4b58      	ldr	r3, [pc, #352]	; (8012928 <SEGGER_SYSVIEW_Start+0x168>)
 80127c8:	2201      	movs	r2, #1
 80127ca:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80127cc:	f3ef 8311 	mrs	r3, BASEPRI
 80127d0:	f04f 0120 	mov.w	r1, #32
 80127d4:	f381 8811 	msr	BASEPRI, r1
 80127d8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80127da:	4b53      	ldr	r3, [pc, #332]	; (8012928 <SEGGER_SYSVIEW_Start+0x168>)
 80127dc:	785b      	ldrb	r3, [r3, #1]
 80127de:	220a      	movs	r2, #10
 80127e0:	4952      	ldr	r1, [pc, #328]	; (801292c <SEGGER_SYSVIEW_Start+0x16c>)
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7ff fa4a 	bl	8011c7c <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80127ee:	200a      	movs	r0, #10
 80127f0:	f7ff fe2a 	bl	8012448 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80127f4:	f3ef 8311 	mrs	r3, BASEPRI
 80127f8:	f04f 0120 	mov.w	r1, #32
 80127fc:	f381 8811 	msr	BASEPRI, r1
 8012800:	60bb      	str	r3, [r7, #8]
 8012802:	484b      	ldr	r0, [pc, #300]	; (8012930 <SEGGER_SYSVIEW_Start+0x170>)
 8012804:	f7ff fbf7 	bl	8011ff6 <_PreparePacket>
 8012808:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012812:	4b45      	ldr	r3, [pc, #276]	; (8012928 <SEGGER_SYSVIEW_Start+0x168>)
 8012814:	685b      	ldr	r3, [r3, #4]
 8012816:	62bb      	str	r3, [r7, #40]	; 0x28
 8012818:	e00b      	b.n	8012832 <SEGGER_SYSVIEW_Start+0x72>
 801281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801281c:	b2da      	uxtb	r2, r3
 801281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012820:	1c59      	adds	r1, r3, #1
 8012822:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012824:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012828:	b2d2      	uxtb	r2, r2
 801282a:	701a      	strb	r2, [r3, #0]
 801282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801282e:	09db      	lsrs	r3, r3, #7
 8012830:	62bb      	str	r3, [r7, #40]	; 0x28
 8012832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012834:	2b7f      	cmp	r3, #127	; 0x7f
 8012836:	d8f0      	bhi.n	801281a <SEGGER_SYSVIEW_Start+0x5a>
 8012838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801283a:	1c5a      	adds	r2, r3, #1
 801283c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801283e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012840:	b2d2      	uxtb	r2, r2
 8012842:	701a      	strb	r2, [r3, #0]
 8012844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012846:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	627b      	str	r3, [r7, #36]	; 0x24
 801284c:	4b36      	ldr	r3, [pc, #216]	; (8012928 <SEGGER_SYSVIEW_Start+0x168>)
 801284e:	689b      	ldr	r3, [r3, #8]
 8012850:	623b      	str	r3, [r7, #32]
 8012852:	e00b      	b.n	801286c <SEGGER_SYSVIEW_Start+0xac>
 8012854:	6a3b      	ldr	r3, [r7, #32]
 8012856:	b2da      	uxtb	r2, r3
 8012858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801285a:	1c59      	adds	r1, r3, #1
 801285c:	6279      	str	r1, [r7, #36]	; 0x24
 801285e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012862:	b2d2      	uxtb	r2, r2
 8012864:	701a      	strb	r2, [r3, #0]
 8012866:	6a3b      	ldr	r3, [r7, #32]
 8012868:	09db      	lsrs	r3, r3, #7
 801286a:	623b      	str	r3, [r7, #32]
 801286c:	6a3b      	ldr	r3, [r7, #32]
 801286e:	2b7f      	cmp	r3, #127	; 0x7f
 8012870:	d8f0      	bhi.n	8012854 <SEGGER_SYSVIEW_Start+0x94>
 8012872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012874:	1c5a      	adds	r2, r3, #1
 8012876:	627a      	str	r2, [r7, #36]	; 0x24
 8012878:	6a3a      	ldr	r2, [r7, #32]
 801287a:	b2d2      	uxtb	r2, r2
 801287c:	701a      	strb	r2, [r3, #0]
 801287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012880:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	61fb      	str	r3, [r7, #28]
 8012886:	4b28      	ldr	r3, [pc, #160]	; (8012928 <SEGGER_SYSVIEW_Start+0x168>)
 8012888:	691b      	ldr	r3, [r3, #16]
 801288a:	61bb      	str	r3, [r7, #24]
 801288c:	e00b      	b.n	80128a6 <SEGGER_SYSVIEW_Start+0xe6>
 801288e:	69bb      	ldr	r3, [r7, #24]
 8012890:	b2da      	uxtb	r2, r3
 8012892:	69fb      	ldr	r3, [r7, #28]
 8012894:	1c59      	adds	r1, r3, #1
 8012896:	61f9      	str	r1, [r7, #28]
 8012898:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801289c:	b2d2      	uxtb	r2, r2
 801289e:	701a      	strb	r2, [r3, #0]
 80128a0:	69bb      	ldr	r3, [r7, #24]
 80128a2:	09db      	lsrs	r3, r3, #7
 80128a4:	61bb      	str	r3, [r7, #24]
 80128a6:	69bb      	ldr	r3, [r7, #24]
 80128a8:	2b7f      	cmp	r3, #127	; 0x7f
 80128aa:	d8f0      	bhi.n	801288e <SEGGER_SYSVIEW_Start+0xce>
 80128ac:	69fb      	ldr	r3, [r7, #28]
 80128ae:	1c5a      	adds	r2, r3, #1
 80128b0:	61fa      	str	r2, [r7, #28]
 80128b2:	69ba      	ldr	r2, [r7, #24]
 80128b4:	b2d2      	uxtb	r2, r2
 80128b6:	701a      	strb	r2, [r3, #0]
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	617b      	str	r3, [r7, #20]
 80128c0:	2300      	movs	r3, #0
 80128c2:	613b      	str	r3, [r7, #16]
 80128c4:	e00b      	b.n	80128de <SEGGER_SYSVIEW_Start+0x11e>
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	b2da      	uxtb	r2, r3
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	1c59      	adds	r1, r3, #1
 80128ce:	6179      	str	r1, [r7, #20]
 80128d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80128d4:	b2d2      	uxtb	r2, r2
 80128d6:	701a      	strb	r2, [r3, #0]
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	09db      	lsrs	r3, r3, #7
 80128dc:	613b      	str	r3, [r7, #16]
 80128de:	693b      	ldr	r3, [r7, #16]
 80128e0:	2b7f      	cmp	r3, #127	; 0x7f
 80128e2:	d8f0      	bhi.n	80128c6 <SEGGER_SYSVIEW_Start+0x106>
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	1c5a      	adds	r2, r3, #1
 80128e8:	617a      	str	r2, [r7, #20]
 80128ea:	693a      	ldr	r2, [r7, #16]
 80128ec:	b2d2      	uxtb	r2, r2
 80128ee:	701a      	strb	r2, [r3, #0]
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80128f4:	2218      	movs	r2, #24
 80128f6:	6839      	ldr	r1, [r7, #0]
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f7ff fc6b 	bl	80121d4 <_SendPacket>
      RECORD_END();
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8012904:	4b08      	ldr	r3, [pc, #32]	; (8012928 <SEGGER_SYSVIEW_Start+0x168>)
 8012906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012908:	2b00      	cmp	r3, #0
 801290a:	d002      	beq.n	8012912 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 801290c:	4b06      	ldr	r3, [pc, #24]	; (8012928 <SEGGER_SYSVIEW_Start+0x168>)
 801290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012910:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8012912:	f000 f9eb 	bl	8012cec <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8012916:	f000 f9b1 	bl	8012c7c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 801291a:	f000 fc83 	bl	8013224 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 801291e:	bf00      	nop
 8012920:	3730      	adds	r7, #48	; 0x30
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
 8012926:	bf00      	nop
 8012928:	20009d4c 	.word	0x20009d4c
 801292c:	0801841c 	.word	0x0801841c
 8012930:	20009d7c 	.word	0x20009d7c

08012934 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801293a:	f3ef 8311 	mrs	r3, BASEPRI
 801293e:	f04f 0120 	mov.w	r1, #32
 8012942:	f381 8811 	msr	BASEPRI, r1
 8012946:	607b      	str	r3, [r7, #4]
 8012948:	480b      	ldr	r0, [pc, #44]	; (8012978 <SEGGER_SYSVIEW_Stop+0x44>)
 801294a:	f7ff fb54 	bl	8011ff6 <_PreparePacket>
 801294e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8012950:	4b0a      	ldr	r3, [pc, #40]	; (801297c <SEGGER_SYSVIEW_Stop+0x48>)
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d007      	beq.n	8012968 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8012958:	220b      	movs	r2, #11
 801295a:	6839      	ldr	r1, [r7, #0]
 801295c:	6838      	ldr	r0, [r7, #0]
 801295e:	f7ff fc39 	bl	80121d4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8012962:	4b06      	ldr	r3, [pc, #24]	; (801297c <SEGGER_SYSVIEW_Stop+0x48>)
 8012964:	2200      	movs	r2, #0
 8012966:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	f383 8811 	msr	BASEPRI, r3
}
 801296e:	bf00      	nop
 8012970:	3708      	adds	r7, #8
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}
 8012976:	bf00      	nop
 8012978:	20009d7c 	.word	0x20009d7c
 801297c:	20009d4c 	.word	0x20009d4c

08012980 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8012980:	b580      	push	{r7, lr}
 8012982:	b08c      	sub	sp, #48	; 0x30
 8012984:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8012986:	f3ef 8311 	mrs	r3, BASEPRI
 801298a:	f04f 0120 	mov.w	r1, #32
 801298e:	f381 8811 	msr	BASEPRI, r1
 8012992:	60fb      	str	r3, [r7, #12]
 8012994:	4845      	ldr	r0, [pc, #276]	; (8012aac <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8012996:	f7ff fb2e 	bl	8011ff6 <_PreparePacket>
 801299a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80129a4:	4b42      	ldr	r3, [pc, #264]	; (8012ab0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80129a6:	685b      	ldr	r3, [r3, #4]
 80129a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80129aa:	e00b      	b.n	80129c4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80129ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ae:	b2da      	uxtb	r2, r3
 80129b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b2:	1c59      	adds	r1, r3, #1
 80129b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80129b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80129ba:	b2d2      	uxtb	r2, r2
 80129bc:	701a      	strb	r2, [r3, #0]
 80129be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c0:	09db      	lsrs	r3, r3, #7
 80129c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80129c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c6:	2b7f      	cmp	r3, #127	; 0x7f
 80129c8:	d8f0      	bhi.n	80129ac <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80129ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129cc:	1c5a      	adds	r2, r3, #1
 80129ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80129d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80129d2:	b2d2      	uxtb	r2, r2
 80129d4:	701a      	strb	r2, [r3, #0]
 80129d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	627b      	str	r3, [r7, #36]	; 0x24
 80129de:	4b34      	ldr	r3, [pc, #208]	; (8012ab0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80129e0:	689b      	ldr	r3, [r3, #8]
 80129e2:	623b      	str	r3, [r7, #32]
 80129e4:	e00b      	b.n	80129fe <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80129e6:	6a3b      	ldr	r3, [r7, #32]
 80129e8:	b2da      	uxtb	r2, r3
 80129ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ec:	1c59      	adds	r1, r3, #1
 80129ee:	6279      	str	r1, [r7, #36]	; 0x24
 80129f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80129f4:	b2d2      	uxtb	r2, r2
 80129f6:	701a      	strb	r2, [r3, #0]
 80129f8:	6a3b      	ldr	r3, [r7, #32]
 80129fa:	09db      	lsrs	r3, r3, #7
 80129fc:	623b      	str	r3, [r7, #32]
 80129fe:	6a3b      	ldr	r3, [r7, #32]
 8012a00:	2b7f      	cmp	r3, #127	; 0x7f
 8012a02:	d8f0      	bhi.n	80129e6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8012a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a06:	1c5a      	adds	r2, r3, #1
 8012a08:	627a      	str	r2, [r7, #36]	; 0x24
 8012a0a:	6a3a      	ldr	r2, [r7, #32]
 8012a0c:	b2d2      	uxtb	r2, r2
 8012a0e:	701a      	strb	r2, [r3, #0]
 8012a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	61fb      	str	r3, [r7, #28]
 8012a18:	4b25      	ldr	r3, [pc, #148]	; (8012ab0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8012a1a:	691b      	ldr	r3, [r3, #16]
 8012a1c:	61bb      	str	r3, [r7, #24]
 8012a1e:	e00b      	b.n	8012a38 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8012a20:	69bb      	ldr	r3, [r7, #24]
 8012a22:	b2da      	uxtb	r2, r3
 8012a24:	69fb      	ldr	r3, [r7, #28]
 8012a26:	1c59      	adds	r1, r3, #1
 8012a28:	61f9      	str	r1, [r7, #28]
 8012a2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012a2e:	b2d2      	uxtb	r2, r2
 8012a30:	701a      	strb	r2, [r3, #0]
 8012a32:	69bb      	ldr	r3, [r7, #24]
 8012a34:	09db      	lsrs	r3, r3, #7
 8012a36:	61bb      	str	r3, [r7, #24]
 8012a38:	69bb      	ldr	r3, [r7, #24]
 8012a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8012a3c:	d8f0      	bhi.n	8012a20 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8012a3e:	69fb      	ldr	r3, [r7, #28]
 8012a40:	1c5a      	adds	r2, r3, #1
 8012a42:	61fa      	str	r2, [r7, #28]
 8012a44:	69ba      	ldr	r2, [r7, #24]
 8012a46:	b2d2      	uxtb	r2, r2
 8012a48:	701a      	strb	r2, [r3, #0]
 8012a4a:	69fb      	ldr	r3, [r7, #28]
 8012a4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	617b      	str	r3, [r7, #20]
 8012a52:	2300      	movs	r3, #0
 8012a54:	613b      	str	r3, [r7, #16]
 8012a56:	e00b      	b.n	8012a70 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	b2da      	uxtb	r2, r3
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	1c59      	adds	r1, r3, #1
 8012a60:	6179      	str	r1, [r7, #20]
 8012a62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012a66:	b2d2      	uxtb	r2, r2
 8012a68:	701a      	strb	r2, [r3, #0]
 8012a6a:	693b      	ldr	r3, [r7, #16]
 8012a6c:	09db      	lsrs	r3, r3, #7
 8012a6e:	613b      	str	r3, [r7, #16]
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	2b7f      	cmp	r3, #127	; 0x7f
 8012a74:	d8f0      	bhi.n	8012a58 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	1c5a      	adds	r2, r3, #1
 8012a7a:	617a      	str	r2, [r7, #20]
 8012a7c:	693a      	ldr	r2, [r7, #16]
 8012a7e:	b2d2      	uxtb	r2, r2
 8012a80:	701a      	strb	r2, [r3, #0]
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8012a86:	2218      	movs	r2, #24
 8012a88:	6879      	ldr	r1, [r7, #4]
 8012a8a:	68b8      	ldr	r0, [r7, #8]
 8012a8c:	f7ff fba2 	bl	80121d4 <_SendPacket>
  RECORD_END();
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8012a96:	4b06      	ldr	r3, [pc, #24]	; (8012ab0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8012a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d002      	beq.n	8012aa4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8012a9e:	4b04      	ldr	r3, [pc, #16]	; (8012ab0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8012aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aa2:	4798      	blx	r3
  }
}
 8012aa4:	bf00      	nop
 8012aa6:	3730      	adds	r7, #48	; 0x30
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}
 8012aac:	20009d7c 	.word	0x20009d7c
 8012ab0:	20009d4c 	.word	0x20009d4c

08012ab4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b092      	sub	sp, #72	; 0x48
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8012abc:	f3ef 8311 	mrs	r3, BASEPRI
 8012ac0:	f04f 0120 	mov.w	r1, #32
 8012ac4:	f381 8811 	msr	BASEPRI, r1
 8012ac8:	617b      	str	r3, [r7, #20]
 8012aca:	486a      	ldr	r0, [pc, #424]	; (8012c74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8012acc:	f7ff fa93 	bl	8011ff6 <_PreparePacket>
 8012ad0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681a      	ldr	r2, [r3, #0]
 8012ade:	4b66      	ldr	r3, [pc, #408]	; (8012c78 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8012ae0:	691b      	ldr	r3, [r3, #16]
 8012ae2:	1ad3      	subs	r3, r2, r3
 8012ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8012ae6:	e00b      	b.n	8012b00 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8012ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012aea:	b2da      	uxtb	r2, r3
 8012aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012aee:	1c59      	adds	r1, r3, #1
 8012af0:	6479      	str	r1, [r7, #68]	; 0x44
 8012af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012af6:	b2d2      	uxtb	r2, r2
 8012af8:	701a      	strb	r2, [r3, #0]
 8012afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012afc:	09db      	lsrs	r3, r3, #7
 8012afe:	643b      	str	r3, [r7, #64]	; 0x40
 8012b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b02:	2b7f      	cmp	r3, #127	; 0x7f
 8012b04:	d8f0      	bhi.n	8012ae8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8012b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b08:	1c5a      	adds	r2, r3, #1
 8012b0a:	647a      	str	r2, [r7, #68]	; 0x44
 8012b0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012b0e:	b2d2      	uxtb	r2, r2
 8012b10:	701a      	strb	r2, [r3, #0]
 8012b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	689b      	ldr	r3, [r3, #8]
 8012b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b20:	e00b      	b.n	8012b3a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8012b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b24:	b2da      	uxtb	r2, r3
 8012b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b28:	1c59      	adds	r1, r3, #1
 8012b2a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8012b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012b30:	b2d2      	uxtb	r2, r2
 8012b32:	701a      	strb	r2, [r3, #0]
 8012b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b36:	09db      	lsrs	r3, r3, #7
 8012b38:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8012b3e:	d8f0      	bhi.n	8012b22 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8012b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b42:	1c5a      	adds	r2, r3, #1
 8012b44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8012b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b48:	b2d2      	uxtb	r2, r2
 8012b4a:	701a      	strb	r2, [r3, #0]
 8012b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b4e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	2220      	movs	r2, #32
 8012b56:	4619      	mov	r1, r3
 8012b58:	68f8      	ldr	r0, [r7, #12]
 8012b5a:	f7ff f9ff 	bl	8011f5c <_EncodeStr>
 8012b5e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8012b60:	2209      	movs	r2, #9
 8012b62:	68f9      	ldr	r1, [r7, #12]
 8012b64:	6938      	ldr	r0, [r7, #16]
 8012b66:	f7ff fb35 	bl	80121d4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	637b      	str	r3, [r7, #52]	; 0x34
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681a      	ldr	r2, [r3, #0]
 8012b76:	4b40      	ldr	r3, [pc, #256]	; (8012c78 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8012b78:	691b      	ldr	r3, [r3, #16]
 8012b7a:	1ad3      	subs	r3, r2, r3
 8012b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8012b7e:	e00b      	b.n	8012b98 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8012b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b82:	b2da      	uxtb	r2, r3
 8012b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b86:	1c59      	adds	r1, r3, #1
 8012b88:	6379      	str	r1, [r7, #52]	; 0x34
 8012b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012b8e:	b2d2      	uxtb	r2, r2
 8012b90:	701a      	strb	r2, [r3, #0]
 8012b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b94:	09db      	lsrs	r3, r3, #7
 8012b96:	633b      	str	r3, [r7, #48]	; 0x30
 8012b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8012b9c:	d8f0      	bhi.n	8012b80 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8012b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ba0:	1c5a      	adds	r2, r3, #1
 8012ba2:	637a      	str	r2, [r7, #52]	; 0x34
 8012ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ba6:	b2d2      	uxtb	r2, r2
 8012ba8:	701a      	strb	r2, [r3, #0]
 8012baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	68db      	ldr	r3, [r3, #12]
 8012bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8012bb8:	e00b      	b.n	8012bd2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8012bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bbc:	b2da      	uxtb	r2, r3
 8012bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc0:	1c59      	adds	r1, r3, #1
 8012bc2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012bc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012bc8:	b2d2      	uxtb	r2, r2
 8012bca:	701a      	strb	r2, [r3, #0]
 8012bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bce:	09db      	lsrs	r3, r3, #7
 8012bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8012bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8012bd6:	d8f0      	bhi.n	8012bba <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8012bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bda:	1c5a      	adds	r2, r3, #1
 8012bdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012be0:	b2d2      	uxtb	r2, r2
 8012be2:	701a      	strb	r2, [r3, #0]
 8012be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	627b      	str	r3, [r7, #36]	; 0x24
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	691b      	ldr	r3, [r3, #16]
 8012bf0:	623b      	str	r3, [r7, #32]
 8012bf2:	e00b      	b.n	8012c0c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8012bf4:	6a3b      	ldr	r3, [r7, #32]
 8012bf6:	b2da      	uxtb	r2, r3
 8012bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfa:	1c59      	adds	r1, r3, #1
 8012bfc:	6279      	str	r1, [r7, #36]	; 0x24
 8012bfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012c02:	b2d2      	uxtb	r2, r2
 8012c04:	701a      	strb	r2, [r3, #0]
 8012c06:	6a3b      	ldr	r3, [r7, #32]
 8012c08:	09db      	lsrs	r3, r3, #7
 8012c0a:	623b      	str	r3, [r7, #32]
 8012c0c:	6a3b      	ldr	r3, [r7, #32]
 8012c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8012c10:	d8f0      	bhi.n	8012bf4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8012c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c14:	1c5a      	adds	r2, r3, #1
 8012c16:	627a      	str	r2, [r7, #36]	; 0x24
 8012c18:	6a3a      	ldr	r2, [r7, #32]
 8012c1a:	b2d2      	uxtb	r2, r2
 8012c1c:	701a      	strb	r2, [r3, #0]
 8012c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	61fb      	str	r3, [r7, #28]
 8012c26:	2300      	movs	r3, #0
 8012c28:	61bb      	str	r3, [r7, #24]
 8012c2a:	e00b      	b.n	8012c44 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8012c2c:	69bb      	ldr	r3, [r7, #24]
 8012c2e:	b2da      	uxtb	r2, r3
 8012c30:	69fb      	ldr	r3, [r7, #28]
 8012c32:	1c59      	adds	r1, r3, #1
 8012c34:	61f9      	str	r1, [r7, #28]
 8012c36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012c3a:	b2d2      	uxtb	r2, r2
 8012c3c:	701a      	strb	r2, [r3, #0]
 8012c3e:	69bb      	ldr	r3, [r7, #24]
 8012c40:	09db      	lsrs	r3, r3, #7
 8012c42:	61bb      	str	r3, [r7, #24]
 8012c44:	69bb      	ldr	r3, [r7, #24]
 8012c46:	2b7f      	cmp	r3, #127	; 0x7f
 8012c48:	d8f0      	bhi.n	8012c2c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8012c4a:	69fb      	ldr	r3, [r7, #28]
 8012c4c:	1c5a      	adds	r2, r3, #1
 8012c4e:	61fa      	str	r2, [r7, #28]
 8012c50:	69ba      	ldr	r2, [r7, #24]
 8012c52:	b2d2      	uxtb	r2, r2
 8012c54:	701a      	strb	r2, [r3, #0]
 8012c56:	69fb      	ldr	r3, [r7, #28]
 8012c58:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8012c5a:	2215      	movs	r2, #21
 8012c5c:	68f9      	ldr	r1, [r7, #12]
 8012c5e:	6938      	ldr	r0, [r7, #16]
 8012c60:	f7ff fab8 	bl	80121d4 <_SendPacket>
  RECORD_END();
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	f383 8811 	msr	BASEPRI, r3
}
 8012c6a:	bf00      	nop
 8012c6c:	3748      	adds	r7, #72	; 0x48
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	20009d7c 	.word	0x20009d7c
 8012c78:	20009d4c 	.word	0x20009d4c

08012c7c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8012c80:	4b07      	ldr	r3, [pc, #28]	; (8012ca0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8012c82:	6a1b      	ldr	r3, [r3, #32]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d008      	beq.n	8012c9a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8012c88:	4b05      	ldr	r3, [pc, #20]	; (8012ca0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8012c8a:	6a1b      	ldr	r3, [r3, #32]
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d003      	beq.n	8012c9a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8012c92:	4b03      	ldr	r3, [pc, #12]	; (8012ca0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8012c94:	6a1b      	ldr	r3, [r3, #32]
 8012c96:	685b      	ldr	r3, [r3, #4]
 8012c98:	4798      	blx	r3
  }
}
 8012c9a:	bf00      	nop
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	20009d4c 	.word	0x20009d4c

08012ca4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b086      	sub	sp, #24
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8012cac:	f3ef 8311 	mrs	r3, BASEPRI
 8012cb0:	f04f 0120 	mov.w	r1, #32
 8012cb4:	f381 8811 	msr	BASEPRI, r1
 8012cb8:	617b      	str	r3, [r7, #20]
 8012cba:	480b      	ldr	r0, [pc, #44]	; (8012ce8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8012cbc:	f7ff f99b 	bl	8011ff6 <_PreparePacket>
 8012cc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8012cc2:	2280      	movs	r2, #128	; 0x80
 8012cc4:	6879      	ldr	r1, [r7, #4]
 8012cc6:	6938      	ldr	r0, [r7, #16]
 8012cc8:	f7ff f948 	bl	8011f5c <_EncodeStr>
 8012ccc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8012cce:	220e      	movs	r2, #14
 8012cd0:	68f9      	ldr	r1, [r7, #12]
 8012cd2:	6938      	ldr	r0, [r7, #16]
 8012cd4:	f7ff fa7e 	bl	80121d4 <_SendPacket>
  RECORD_END();
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	f383 8811 	msr	BASEPRI, r3
}
 8012cde:	bf00      	nop
 8012ce0:	3718      	adds	r7, #24
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	20009d7c 	.word	0x20009d7c

08012cec <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8012cec:	b590      	push	{r4, r7, lr}
 8012cee:	b083      	sub	sp, #12
 8012cf0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8012cf2:	4b15      	ldr	r3, [pc, #84]	; (8012d48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8012cf4:	6a1b      	ldr	r3, [r3, #32]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d01a      	beq.n	8012d30 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8012cfa:	4b13      	ldr	r3, [pc, #76]	; (8012d48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8012cfc:	6a1b      	ldr	r3, [r3, #32]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d015      	beq.n	8012d30 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8012d04:	4b10      	ldr	r3, [pc, #64]	; (8012d48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8012d06:	6a1b      	ldr	r3, [r3, #32]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	4798      	blx	r3
 8012d0c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8012d10:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8012d12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012d16:	f04f 0200 	mov.w	r2, #0
 8012d1a:	f04f 0300 	mov.w	r3, #0
 8012d1e:	000a      	movs	r2, r1
 8012d20:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8012d22:	4613      	mov	r3, r2
 8012d24:	461a      	mov	r2, r3
 8012d26:	4621      	mov	r1, r4
 8012d28:	200d      	movs	r0, #13
 8012d2a:	f7ff fbe7 	bl	80124fc <SEGGER_SYSVIEW_RecordU32x2>
 8012d2e:	e006      	b.n	8012d3e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8012d30:	4b06      	ldr	r3, [pc, #24]	; (8012d4c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	4619      	mov	r1, r3
 8012d36:	200c      	movs	r0, #12
 8012d38:	f7ff fba4 	bl	8012484 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8012d3c:	bf00      	nop
 8012d3e:	bf00      	nop
 8012d40:	370c      	adds	r7, #12
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd90      	pop	{r4, r7, pc}
 8012d46:	bf00      	nop
 8012d48:	20009d4c 	.word	0x20009d4c
 8012d4c:	e0001004 	.word	0xe0001004

08012d50 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b086      	sub	sp, #24
 8012d54:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8012d56:	f3ef 8311 	mrs	r3, BASEPRI
 8012d5a:	f04f 0120 	mov.w	r1, #32
 8012d5e:	f381 8811 	msr	BASEPRI, r1
 8012d62:	60fb      	str	r3, [r7, #12]
 8012d64:	4819      	ldr	r0, [pc, #100]	; (8012dcc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8012d66:	f7ff f946 	bl	8011ff6 <_PreparePacket>
 8012d6a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8012d70:	4b17      	ldr	r3, [pc, #92]	; (8012dd0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d78:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	617b      	str	r3, [r7, #20]
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	613b      	str	r3, [r7, #16]
 8012d82:	e00b      	b.n	8012d9c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	b2da      	uxtb	r2, r3
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	1c59      	adds	r1, r3, #1
 8012d8c:	6179      	str	r1, [r7, #20]
 8012d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012d92:	b2d2      	uxtb	r2, r2
 8012d94:	701a      	strb	r2, [r3, #0]
 8012d96:	693b      	ldr	r3, [r7, #16]
 8012d98:	09db      	lsrs	r3, r3, #7
 8012d9a:	613b      	str	r3, [r7, #16]
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8012da0:	d8f0      	bhi.n	8012d84 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	1c5a      	adds	r2, r3, #1
 8012da6:	617a      	str	r2, [r7, #20]
 8012da8:	693a      	ldr	r2, [r7, #16]
 8012daa:	b2d2      	uxtb	r2, r2
 8012dac:	701a      	strb	r2, [r3, #0]
 8012dae:	697b      	ldr	r3, [r7, #20]
 8012db0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8012db2:	2202      	movs	r2, #2
 8012db4:	6879      	ldr	r1, [r7, #4]
 8012db6:	68b8      	ldr	r0, [r7, #8]
 8012db8:	f7ff fa0c 	bl	80121d4 <_SendPacket>
  RECORD_END();
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	f383 8811 	msr	BASEPRI, r3
}
 8012dc2:	bf00      	nop
 8012dc4:	3718      	adds	r7, #24
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bd80      	pop	{r7, pc}
 8012dca:	bf00      	nop
 8012dcc:	20009d7c 	.word	0x20009d7c
 8012dd0:	e000ed04 	.word	0xe000ed04

08012dd4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b082      	sub	sp, #8
 8012dd8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8012dda:	f3ef 8311 	mrs	r3, BASEPRI
 8012dde:	f04f 0120 	mov.w	r1, #32
 8012de2:	f381 8811 	msr	BASEPRI, r1
 8012de6:	607b      	str	r3, [r7, #4]
 8012de8:	4807      	ldr	r0, [pc, #28]	; (8012e08 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8012dea:	f7ff f904 	bl	8011ff6 <_PreparePacket>
 8012dee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8012df0:	2203      	movs	r2, #3
 8012df2:	6839      	ldr	r1, [r7, #0]
 8012df4:	6838      	ldr	r0, [r7, #0]
 8012df6:	f7ff f9ed 	bl	80121d4 <_SendPacket>
  RECORD_END();
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	f383 8811 	msr	BASEPRI, r3
}
 8012e00:	bf00      	nop
 8012e02:	3708      	adds	r7, #8
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}
 8012e08:	20009d7c 	.word	0x20009d7c

08012e0c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b082      	sub	sp, #8
 8012e10:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8012e12:	f3ef 8311 	mrs	r3, BASEPRI
 8012e16:	f04f 0120 	mov.w	r1, #32
 8012e1a:	f381 8811 	msr	BASEPRI, r1
 8012e1e:	607b      	str	r3, [r7, #4]
 8012e20:	4807      	ldr	r0, [pc, #28]	; (8012e40 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8012e22:	f7ff f8e8 	bl	8011ff6 <_PreparePacket>
 8012e26:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8012e28:	2212      	movs	r2, #18
 8012e2a:	6839      	ldr	r1, [r7, #0]
 8012e2c:	6838      	ldr	r0, [r7, #0]
 8012e2e:	f7ff f9d1 	bl	80121d4 <_SendPacket>
  RECORD_END();
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f383 8811 	msr	BASEPRI, r3
}
 8012e38:	bf00      	nop
 8012e3a:	3708      	adds	r7, #8
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}
 8012e40:	20009d7c 	.word	0x20009d7c

08012e44 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b082      	sub	sp, #8
 8012e48:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8012e4a:	f3ef 8311 	mrs	r3, BASEPRI
 8012e4e:	f04f 0120 	mov.w	r1, #32
 8012e52:	f381 8811 	msr	BASEPRI, r1
 8012e56:	607b      	str	r3, [r7, #4]
 8012e58:	4807      	ldr	r0, [pc, #28]	; (8012e78 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8012e5a:	f7ff f8cc 	bl	8011ff6 <_PreparePacket>
 8012e5e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8012e60:	2211      	movs	r2, #17
 8012e62:	6839      	ldr	r1, [r7, #0]
 8012e64:	6838      	ldr	r0, [r7, #0]
 8012e66:	f7ff f9b5 	bl	80121d4 <_SendPacket>
  RECORD_END();
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f383 8811 	msr	BASEPRI, r3
}
 8012e70:	bf00      	nop
 8012e72:	3708      	adds	r7, #8
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd80      	pop	{r7, pc}
 8012e78:	20009d7c 	.word	0x20009d7c

08012e7c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b088      	sub	sp, #32
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8012e84:	f3ef 8311 	mrs	r3, BASEPRI
 8012e88:	f04f 0120 	mov.w	r1, #32
 8012e8c:	f381 8811 	msr	BASEPRI, r1
 8012e90:	617b      	str	r3, [r7, #20]
 8012e92:	4819      	ldr	r0, [pc, #100]	; (8012ef8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8012e94:	f7ff f8af 	bl	8011ff6 <_PreparePacket>
 8012e98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8012e9e:	4b17      	ldr	r3, [pc, #92]	; (8012efc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8012ea0:	691b      	ldr	r3, [r3, #16]
 8012ea2:	687a      	ldr	r2, [r7, #4]
 8012ea4:	1ad3      	subs	r3, r2, r3
 8012ea6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	61fb      	str	r3, [r7, #28]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	61bb      	str	r3, [r7, #24]
 8012eb0:	e00b      	b.n	8012eca <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8012eb2:	69bb      	ldr	r3, [r7, #24]
 8012eb4:	b2da      	uxtb	r2, r3
 8012eb6:	69fb      	ldr	r3, [r7, #28]
 8012eb8:	1c59      	adds	r1, r3, #1
 8012eba:	61f9      	str	r1, [r7, #28]
 8012ebc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012ec0:	b2d2      	uxtb	r2, r2
 8012ec2:	701a      	strb	r2, [r3, #0]
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	09db      	lsrs	r3, r3, #7
 8012ec8:	61bb      	str	r3, [r7, #24]
 8012eca:	69bb      	ldr	r3, [r7, #24]
 8012ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8012ece:	d8f0      	bhi.n	8012eb2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	1c5a      	adds	r2, r3, #1
 8012ed4:	61fa      	str	r2, [r7, #28]
 8012ed6:	69ba      	ldr	r2, [r7, #24]
 8012ed8:	b2d2      	uxtb	r2, r2
 8012eda:	701a      	strb	r2, [r3, #0]
 8012edc:	69fb      	ldr	r3, [r7, #28]
 8012ede:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8012ee0:	2208      	movs	r2, #8
 8012ee2:	68f9      	ldr	r1, [r7, #12]
 8012ee4:	6938      	ldr	r0, [r7, #16]
 8012ee6:	f7ff f975 	bl	80121d4 <_SendPacket>
  RECORD_END();
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	f383 8811 	msr	BASEPRI, r3
}
 8012ef0:	bf00      	nop
 8012ef2:	3720      	adds	r7, #32
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}
 8012ef8:	20009d7c 	.word	0x20009d7c
 8012efc:	20009d4c 	.word	0x20009d4c

08012f00 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b088      	sub	sp, #32
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8012f08:	f3ef 8311 	mrs	r3, BASEPRI
 8012f0c:	f04f 0120 	mov.w	r1, #32
 8012f10:	f381 8811 	msr	BASEPRI, r1
 8012f14:	617b      	str	r3, [r7, #20]
 8012f16:	4819      	ldr	r0, [pc, #100]	; (8012f7c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8012f18:	f7ff f86d 	bl	8011ff6 <_PreparePacket>
 8012f1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8012f22:	4b17      	ldr	r3, [pc, #92]	; (8012f80 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8012f24:	691b      	ldr	r3, [r3, #16]
 8012f26:	687a      	ldr	r2, [r7, #4]
 8012f28:	1ad3      	subs	r3, r2, r3
 8012f2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	61fb      	str	r3, [r7, #28]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	61bb      	str	r3, [r7, #24]
 8012f34:	e00b      	b.n	8012f4e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8012f36:	69bb      	ldr	r3, [r7, #24]
 8012f38:	b2da      	uxtb	r2, r3
 8012f3a:	69fb      	ldr	r3, [r7, #28]
 8012f3c:	1c59      	adds	r1, r3, #1
 8012f3e:	61f9      	str	r1, [r7, #28]
 8012f40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012f44:	b2d2      	uxtb	r2, r2
 8012f46:	701a      	strb	r2, [r3, #0]
 8012f48:	69bb      	ldr	r3, [r7, #24]
 8012f4a:	09db      	lsrs	r3, r3, #7
 8012f4c:	61bb      	str	r3, [r7, #24]
 8012f4e:	69bb      	ldr	r3, [r7, #24]
 8012f50:	2b7f      	cmp	r3, #127	; 0x7f
 8012f52:	d8f0      	bhi.n	8012f36 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8012f54:	69fb      	ldr	r3, [r7, #28]
 8012f56:	1c5a      	adds	r2, r3, #1
 8012f58:	61fa      	str	r2, [r7, #28]
 8012f5a:	69ba      	ldr	r2, [r7, #24]
 8012f5c:	b2d2      	uxtb	r2, r2
 8012f5e:	701a      	strb	r2, [r3, #0]
 8012f60:	69fb      	ldr	r3, [r7, #28]
 8012f62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8012f64:	2204      	movs	r2, #4
 8012f66:	68f9      	ldr	r1, [r7, #12]
 8012f68:	6938      	ldr	r0, [r7, #16]
 8012f6a:	f7ff f933 	bl	80121d4 <_SendPacket>
  RECORD_END();
 8012f6e:	697b      	ldr	r3, [r7, #20]
 8012f70:	f383 8811 	msr	BASEPRI, r3
}
 8012f74:	bf00      	nop
 8012f76:	3720      	adds	r7, #32
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}
 8012f7c:	20009d7c 	.word	0x20009d7c
 8012f80:	20009d4c 	.word	0x20009d4c

08012f84 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b088      	sub	sp, #32
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8012f8c:	f3ef 8311 	mrs	r3, BASEPRI
 8012f90:	f04f 0120 	mov.w	r1, #32
 8012f94:	f381 8811 	msr	BASEPRI, r1
 8012f98:	617b      	str	r3, [r7, #20]
 8012f9a:	4819      	ldr	r0, [pc, #100]	; (8013000 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8012f9c:	f7ff f82b 	bl	8011ff6 <_PreparePacket>
 8012fa0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8012fa6:	4b17      	ldr	r3, [pc, #92]	; (8013004 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8012fa8:	691b      	ldr	r3, [r3, #16]
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	1ad3      	subs	r3, r2, r3
 8012fae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	61fb      	str	r3, [r7, #28]
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	61bb      	str	r3, [r7, #24]
 8012fb8:	e00b      	b.n	8012fd2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8012fba:	69bb      	ldr	r3, [r7, #24]
 8012fbc:	b2da      	uxtb	r2, r3
 8012fbe:	69fb      	ldr	r3, [r7, #28]
 8012fc0:	1c59      	adds	r1, r3, #1
 8012fc2:	61f9      	str	r1, [r7, #28]
 8012fc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012fc8:	b2d2      	uxtb	r2, r2
 8012fca:	701a      	strb	r2, [r3, #0]
 8012fcc:	69bb      	ldr	r3, [r7, #24]
 8012fce:	09db      	lsrs	r3, r3, #7
 8012fd0:	61bb      	str	r3, [r7, #24]
 8012fd2:	69bb      	ldr	r3, [r7, #24]
 8012fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8012fd6:	d8f0      	bhi.n	8012fba <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8012fd8:	69fb      	ldr	r3, [r7, #28]
 8012fda:	1c5a      	adds	r2, r3, #1
 8012fdc:	61fa      	str	r2, [r7, #28]
 8012fde:	69ba      	ldr	r2, [r7, #24]
 8012fe0:	b2d2      	uxtb	r2, r2
 8012fe2:	701a      	strb	r2, [r3, #0]
 8012fe4:	69fb      	ldr	r3, [r7, #28]
 8012fe6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8012fe8:	2206      	movs	r2, #6
 8012fea:	68f9      	ldr	r1, [r7, #12]
 8012fec:	6938      	ldr	r0, [r7, #16]
 8012fee:	f7ff f8f1 	bl	80121d4 <_SendPacket>
  RECORD_END();
 8012ff2:	697b      	ldr	r3, [r7, #20]
 8012ff4:	f383 8811 	msr	BASEPRI, r3
}
 8012ff8:	bf00      	nop
 8012ffa:	3720      	adds	r7, #32
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}
 8013000:	20009d7c 	.word	0x20009d7c
 8013004:	20009d4c 	.word	0x20009d4c

08013008 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8013008:	b580      	push	{r7, lr}
 801300a:	b08a      	sub	sp, #40	; 0x28
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8013012:	f3ef 8311 	mrs	r3, BASEPRI
 8013016:	f04f 0120 	mov.w	r1, #32
 801301a:	f381 8811 	msr	BASEPRI, r1
 801301e:	617b      	str	r3, [r7, #20]
 8013020:	4827      	ldr	r0, [pc, #156]	; (80130c0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8013022:	f7fe ffe8 	bl	8011ff6 <_PreparePacket>
 8013026:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8013028:	693b      	ldr	r3, [r7, #16]
 801302a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 801302c:	4b25      	ldr	r3, [pc, #148]	; (80130c4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 801302e:	691b      	ldr	r3, [r3, #16]
 8013030:	687a      	ldr	r2, [r7, #4]
 8013032:	1ad3      	subs	r3, r2, r3
 8013034:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	627b      	str	r3, [r7, #36]	; 0x24
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	623b      	str	r3, [r7, #32]
 801303e:	e00b      	b.n	8013058 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8013040:	6a3b      	ldr	r3, [r7, #32]
 8013042:	b2da      	uxtb	r2, r3
 8013044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013046:	1c59      	adds	r1, r3, #1
 8013048:	6279      	str	r1, [r7, #36]	; 0x24
 801304a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801304e:	b2d2      	uxtb	r2, r2
 8013050:	701a      	strb	r2, [r3, #0]
 8013052:	6a3b      	ldr	r3, [r7, #32]
 8013054:	09db      	lsrs	r3, r3, #7
 8013056:	623b      	str	r3, [r7, #32]
 8013058:	6a3b      	ldr	r3, [r7, #32]
 801305a:	2b7f      	cmp	r3, #127	; 0x7f
 801305c:	d8f0      	bhi.n	8013040 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 801305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013060:	1c5a      	adds	r2, r3, #1
 8013062:	627a      	str	r2, [r7, #36]	; 0x24
 8013064:	6a3a      	ldr	r2, [r7, #32]
 8013066:	b2d2      	uxtb	r2, r2
 8013068:	701a      	strb	r2, [r3, #0]
 801306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801306c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	61fb      	str	r3, [r7, #28]
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	61bb      	str	r3, [r7, #24]
 8013076:	e00b      	b.n	8013090 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8013078:	69bb      	ldr	r3, [r7, #24]
 801307a:	b2da      	uxtb	r2, r3
 801307c:	69fb      	ldr	r3, [r7, #28]
 801307e:	1c59      	adds	r1, r3, #1
 8013080:	61f9      	str	r1, [r7, #28]
 8013082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8013086:	b2d2      	uxtb	r2, r2
 8013088:	701a      	strb	r2, [r3, #0]
 801308a:	69bb      	ldr	r3, [r7, #24]
 801308c:	09db      	lsrs	r3, r3, #7
 801308e:	61bb      	str	r3, [r7, #24]
 8013090:	69bb      	ldr	r3, [r7, #24]
 8013092:	2b7f      	cmp	r3, #127	; 0x7f
 8013094:	d8f0      	bhi.n	8013078 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8013096:	69fb      	ldr	r3, [r7, #28]
 8013098:	1c5a      	adds	r2, r3, #1
 801309a:	61fa      	str	r2, [r7, #28]
 801309c:	69ba      	ldr	r2, [r7, #24]
 801309e:	b2d2      	uxtb	r2, r2
 80130a0:	701a      	strb	r2, [r3, #0]
 80130a2:	69fb      	ldr	r3, [r7, #28]
 80130a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80130a6:	2207      	movs	r2, #7
 80130a8:	68f9      	ldr	r1, [r7, #12]
 80130aa:	6938      	ldr	r0, [r7, #16]
 80130ac:	f7ff f892 	bl	80121d4 <_SendPacket>
  RECORD_END();
 80130b0:	697b      	ldr	r3, [r7, #20]
 80130b2:	f383 8811 	msr	BASEPRI, r3
}
 80130b6:	bf00      	nop
 80130b8:	3728      	adds	r7, #40	; 0x28
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}
 80130be:	bf00      	nop
 80130c0:	20009d7c 	.word	0x20009d7c
 80130c4:	20009d4c 	.word	0x20009d4c

080130c8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80130c8:	b480      	push	{r7}
 80130ca:	b083      	sub	sp, #12
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80130d0:	4b04      	ldr	r3, [pc, #16]	; (80130e4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80130d2:	691b      	ldr	r3, [r3, #16]
 80130d4:	687a      	ldr	r2, [r7, #4]
 80130d6:	1ad3      	subs	r3, r2, r3
}
 80130d8:	4618      	mov	r0, r3
 80130da:	370c      	adds	r7, #12
 80130dc:	46bd      	mov	sp, r7
 80130de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e2:	4770      	bx	lr
 80130e4:	20009d4c 	.word	0x20009d4c

080130e8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b08c      	sub	sp, #48	; 0x30
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	4603      	mov	r3, r0
 80130f0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80130f2:	4b3b      	ldr	r3, [pc, #236]	; (80131e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d06d      	beq.n	80131d6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80130fa:	4b39      	ldr	r3, [pc, #228]	; (80131e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8013100:	2300      	movs	r3, #0
 8013102:	62bb      	str	r3, [r7, #40]	; 0x28
 8013104:	e008      	b.n	8013118 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8013106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013108:	691b      	ldr	r3, [r3, #16]
 801310a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 801310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310e:	2b00      	cmp	r3, #0
 8013110:	d007      	beq.n	8013122 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8013112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013114:	3301      	adds	r3, #1
 8013116:	62bb      	str	r3, [r7, #40]	; 0x28
 8013118:	79fb      	ldrb	r3, [r7, #7]
 801311a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801311c:	429a      	cmp	r2, r3
 801311e:	d3f2      	bcc.n	8013106 <SEGGER_SYSVIEW_SendModule+0x1e>
 8013120:	e000      	b.n	8013124 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8013122:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8013124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013126:	2b00      	cmp	r3, #0
 8013128:	d055      	beq.n	80131d6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801312a:	f3ef 8311 	mrs	r3, BASEPRI
 801312e:	f04f 0120 	mov.w	r1, #32
 8013132:	f381 8811 	msr	BASEPRI, r1
 8013136:	617b      	str	r3, [r7, #20]
 8013138:	482a      	ldr	r0, [pc, #168]	; (80131e4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 801313a:	f7fe ff5c 	bl	8011ff6 <_PreparePacket>
 801313e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	627b      	str	r3, [r7, #36]	; 0x24
 8013148:	79fb      	ldrb	r3, [r7, #7]
 801314a:	623b      	str	r3, [r7, #32]
 801314c:	e00b      	b.n	8013166 <SEGGER_SYSVIEW_SendModule+0x7e>
 801314e:	6a3b      	ldr	r3, [r7, #32]
 8013150:	b2da      	uxtb	r2, r3
 8013152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013154:	1c59      	adds	r1, r3, #1
 8013156:	6279      	str	r1, [r7, #36]	; 0x24
 8013158:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801315c:	b2d2      	uxtb	r2, r2
 801315e:	701a      	strb	r2, [r3, #0]
 8013160:	6a3b      	ldr	r3, [r7, #32]
 8013162:	09db      	lsrs	r3, r3, #7
 8013164:	623b      	str	r3, [r7, #32]
 8013166:	6a3b      	ldr	r3, [r7, #32]
 8013168:	2b7f      	cmp	r3, #127	; 0x7f
 801316a:	d8f0      	bhi.n	801314e <SEGGER_SYSVIEW_SendModule+0x66>
 801316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316e:	1c5a      	adds	r2, r3, #1
 8013170:	627a      	str	r2, [r7, #36]	; 0x24
 8013172:	6a3a      	ldr	r2, [r7, #32]
 8013174:	b2d2      	uxtb	r2, r2
 8013176:	701a      	strb	r2, [r3, #0]
 8013178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	61fb      	str	r3, [r7, #28]
 8013180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013182:	689b      	ldr	r3, [r3, #8]
 8013184:	61bb      	str	r3, [r7, #24]
 8013186:	e00b      	b.n	80131a0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8013188:	69bb      	ldr	r3, [r7, #24]
 801318a:	b2da      	uxtb	r2, r3
 801318c:	69fb      	ldr	r3, [r7, #28]
 801318e:	1c59      	adds	r1, r3, #1
 8013190:	61f9      	str	r1, [r7, #28]
 8013192:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8013196:	b2d2      	uxtb	r2, r2
 8013198:	701a      	strb	r2, [r3, #0]
 801319a:	69bb      	ldr	r3, [r7, #24]
 801319c:	09db      	lsrs	r3, r3, #7
 801319e:	61bb      	str	r3, [r7, #24]
 80131a0:	69bb      	ldr	r3, [r7, #24]
 80131a2:	2b7f      	cmp	r3, #127	; 0x7f
 80131a4:	d8f0      	bhi.n	8013188 <SEGGER_SYSVIEW_SendModule+0xa0>
 80131a6:	69fb      	ldr	r3, [r7, #28]
 80131a8:	1c5a      	adds	r2, r3, #1
 80131aa:	61fa      	str	r2, [r7, #28]
 80131ac:	69ba      	ldr	r2, [r7, #24]
 80131ae:	b2d2      	uxtb	r2, r2
 80131b0:	701a      	strb	r2, [r3, #0]
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80131b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	2280      	movs	r2, #128	; 0x80
 80131bc:	4619      	mov	r1, r3
 80131be:	68f8      	ldr	r0, [r7, #12]
 80131c0:	f7fe fecc 	bl	8011f5c <_EncodeStr>
 80131c4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80131c6:	2216      	movs	r2, #22
 80131c8:	68f9      	ldr	r1, [r7, #12]
 80131ca:	6938      	ldr	r0, [r7, #16]
 80131cc:	f7ff f802 	bl	80121d4 <_SendPacket>
      RECORD_END();
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80131d6:	bf00      	nop
 80131d8:	3730      	adds	r7, #48	; 0x30
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	20009d74 	.word	0x20009d74
 80131e4:	20009d7c 	.word	0x20009d7c

080131e8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80131ee:	4b0c      	ldr	r3, [pc, #48]	; (8013220 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d00f      	beq.n	8013216 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80131f6:	4b0a      	ldr	r3, [pc, #40]	; (8013220 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	68db      	ldr	r3, [r3, #12]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d002      	beq.n	801320a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	68db      	ldr	r3, [r3, #12]
 8013208:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	691b      	ldr	r3, [r3, #16]
 801320e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d1f2      	bne.n	80131fc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8013216:	bf00      	nop
 8013218:	3708      	adds	r7, #8
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}
 801321e:	bf00      	nop
 8013220:	20009d74 	.word	0x20009d74

08013224 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8013224:	b580      	push	{r7, lr}
 8013226:	b086      	sub	sp, #24
 8013228:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 801322a:	f3ef 8311 	mrs	r3, BASEPRI
 801322e:	f04f 0120 	mov.w	r1, #32
 8013232:	f381 8811 	msr	BASEPRI, r1
 8013236:	60fb      	str	r3, [r7, #12]
 8013238:	4817      	ldr	r0, [pc, #92]	; (8013298 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 801323a:	f7fe fedc 	bl	8011ff6 <_PreparePacket>
 801323e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	617b      	str	r3, [r7, #20]
 8013248:	4b14      	ldr	r3, [pc, #80]	; (801329c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 801324a:	781b      	ldrb	r3, [r3, #0]
 801324c:	613b      	str	r3, [r7, #16]
 801324e:	e00b      	b.n	8013268 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	b2da      	uxtb	r2, r3
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	1c59      	adds	r1, r3, #1
 8013258:	6179      	str	r1, [r7, #20]
 801325a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801325e:	b2d2      	uxtb	r2, r2
 8013260:	701a      	strb	r2, [r3, #0]
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	09db      	lsrs	r3, r3, #7
 8013266:	613b      	str	r3, [r7, #16]
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	2b7f      	cmp	r3, #127	; 0x7f
 801326c:	d8f0      	bhi.n	8013250 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	1c5a      	adds	r2, r3, #1
 8013272:	617a      	str	r2, [r7, #20]
 8013274:	693a      	ldr	r2, [r7, #16]
 8013276:	b2d2      	uxtb	r2, r2
 8013278:	701a      	strb	r2, [r3, #0]
 801327a:	697b      	ldr	r3, [r7, #20]
 801327c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 801327e:	221b      	movs	r2, #27
 8013280:	6879      	ldr	r1, [r7, #4]
 8013282:	68b8      	ldr	r0, [r7, #8]
 8013284:	f7fe ffa6 	bl	80121d4 <_SendPacket>
  RECORD_END();
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	f383 8811 	msr	BASEPRI, r3
}
 801328e:	bf00      	nop
 8013290:	3718      	adds	r7, #24
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
 8013296:	bf00      	nop
 8013298:	20009d7c 	.word	0x20009d7c
 801329c:	20009d78 	.word	0x20009d78

080132a0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b08a      	sub	sp, #40	; 0x28
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80132a8:	f3ef 8311 	mrs	r3, BASEPRI
 80132ac:	f04f 0120 	mov.w	r1, #32
 80132b0:	f381 8811 	msr	BASEPRI, r1
 80132b4:	617b      	str	r3, [r7, #20]
 80132b6:	4827      	ldr	r0, [pc, #156]	; (8013354 <SEGGER_SYSVIEW_Warn+0xb4>)
 80132b8:	f7fe fe9d 	bl	8011ff6 <_PreparePacket>
 80132bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80132be:	2280      	movs	r2, #128	; 0x80
 80132c0:	6879      	ldr	r1, [r7, #4]
 80132c2:	6938      	ldr	r0, [r7, #16]
 80132c4:	f7fe fe4a 	bl	8011f5c <_EncodeStr>
 80132c8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	627b      	str	r3, [r7, #36]	; 0x24
 80132ce:	2301      	movs	r3, #1
 80132d0:	623b      	str	r3, [r7, #32]
 80132d2:	e00b      	b.n	80132ec <SEGGER_SYSVIEW_Warn+0x4c>
 80132d4:	6a3b      	ldr	r3, [r7, #32]
 80132d6:	b2da      	uxtb	r2, r3
 80132d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132da:	1c59      	adds	r1, r3, #1
 80132dc:	6279      	str	r1, [r7, #36]	; 0x24
 80132de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80132e2:	b2d2      	uxtb	r2, r2
 80132e4:	701a      	strb	r2, [r3, #0]
 80132e6:	6a3b      	ldr	r3, [r7, #32]
 80132e8:	09db      	lsrs	r3, r3, #7
 80132ea:	623b      	str	r3, [r7, #32]
 80132ec:	6a3b      	ldr	r3, [r7, #32]
 80132ee:	2b7f      	cmp	r3, #127	; 0x7f
 80132f0:	d8f0      	bhi.n	80132d4 <SEGGER_SYSVIEW_Warn+0x34>
 80132f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f4:	1c5a      	adds	r2, r3, #1
 80132f6:	627a      	str	r2, [r7, #36]	; 0x24
 80132f8:	6a3a      	ldr	r2, [r7, #32]
 80132fa:	b2d2      	uxtb	r2, r2
 80132fc:	701a      	strb	r2, [r3, #0]
 80132fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013300:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	61fb      	str	r3, [r7, #28]
 8013306:	2300      	movs	r3, #0
 8013308:	61bb      	str	r3, [r7, #24]
 801330a:	e00b      	b.n	8013324 <SEGGER_SYSVIEW_Warn+0x84>
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	b2da      	uxtb	r2, r3
 8013310:	69fb      	ldr	r3, [r7, #28]
 8013312:	1c59      	adds	r1, r3, #1
 8013314:	61f9      	str	r1, [r7, #28]
 8013316:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801331a:	b2d2      	uxtb	r2, r2
 801331c:	701a      	strb	r2, [r3, #0]
 801331e:	69bb      	ldr	r3, [r7, #24]
 8013320:	09db      	lsrs	r3, r3, #7
 8013322:	61bb      	str	r3, [r7, #24]
 8013324:	69bb      	ldr	r3, [r7, #24]
 8013326:	2b7f      	cmp	r3, #127	; 0x7f
 8013328:	d8f0      	bhi.n	801330c <SEGGER_SYSVIEW_Warn+0x6c>
 801332a:	69fb      	ldr	r3, [r7, #28]
 801332c:	1c5a      	adds	r2, r3, #1
 801332e:	61fa      	str	r2, [r7, #28]
 8013330:	69ba      	ldr	r2, [r7, #24]
 8013332:	b2d2      	uxtb	r2, r2
 8013334:	701a      	strb	r2, [r3, #0]
 8013336:	69fb      	ldr	r3, [r7, #28]
 8013338:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 801333a:	221a      	movs	r2, #26
 801333c:	68f9      	ldr	r1, [r7, #12]
 801333e:	6938      	ldr	r0, [r7, #16]
 8013340:	f7fe ff48 	bl	80121d4 <_SendPacket>
  RECORD_END();
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	f383 8811 	msr	BASEPRI, r3
}
 801334a:	bf00      	nop
 801334c:	3728      	adds	r7, #40	; 0x28
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}
 8013352:	bf00      	nop
 8013354:	20009d7c 	.word	0x20009d7c

08013358 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013358:	b480      	push	{r7}
 801335a:	af00      	add	r7, sp, #0
	return 1;
 801335c:	2301      	movs	r3, #1
}
 801335e:	4618      	mov	r0, r3
 8013360:	46bd      	mov	sp, r7
 8013362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013366:	4770      	bx	lr

08013368 <_kill>:

int _kill(int pid, int sig)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b082      	sub	sp, #8
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
 8013370:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8013372:	f000 fe97 	bl	80140a4 <__errno>
 8013376:	4603      	mov	r3, r0
 8013378:	2216      	movs	r2, #22
 801337a:	601a      	str	r2, [r3, #0]
	return -1;
 801337c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013380:	4618      	mov	r0, r3
 8013382:	3708      	adds	r7, #8
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}

08013388 <_exit>:

void _exit (int status)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b082      	sub	sp, #8
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8013390:	f04f 31ff 	mov.w	r1, #4294967295
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f7ff ffe7 	bl	8013368 <_kill>
	while (1) {}		/* Make sure we hang here */
 801339a:	e7fe      	b.n	801339a <_exit+0x12>

0801339c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b086      	sub	sp, #24
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	60f8      	str	r0, [r7, #12]
 80133a4:	60b9      	str	r1, [r7, #8]
 80133a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80133a8:	2300      	movs	r3, #0
 80133aa:	617b      	str	r3, [r7, #20]
 80133ac:	e00a      	b.n	80133c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80133ae:	f3af 8000 	nop.w
 80133b2:	4601      	mov	r1, r0
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	1c5a      	adds	r2, r3, #1
 80133b8:	60ba      	str	r2, [r7, #8]
 80133ba:	b2ca      	uxtb	r2, r1
 80133bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	3301      	adds	r3, #1
 80133c2:	617b      	str	r3, [r7, #20]
 80133c4:	697a      	ldr	r2, [r7, #20]
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	429a      	cmp	r2, r3
 80133ca:	dbf0      	blt.n	80133ae <_read+0x12>
	}

return len;
 80133cc:	687b      	ldr	r3, [r7, #4]
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3718      	adds	r7, #24
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}

080133d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80133d6:	b480      	push	{r7}
 80133d8:	b083      	sub	sp, #12
 80133da:	af00      	add	r7, sp, #0
 80133dc:	6078      	str	r0, [r7, #4]
	return -1;
 80133de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80133e2:	4618      	mov	r0, r3
 80133e4:	370c      	adds	r7, #12
 80133e6:	46bd      	mov	sp, r7
 80133e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ec:	4770      	bx	lr

080133ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80133ee:	b480      	push	{r7}
 80133f0:	b083      	sub	sp, #12
 80133f2:	af00      	add	r7, sp, #0
 80133f4:	6078      	str	r0, [r7, #4]
 80133f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80133fe:	605a      	str	r2, [r3, #4]
	return 0;
 8013400:	2300      	movs	r3, #0
}
 8013402:	4618      	mov	r0, r3
 8013404:	370c      	adds	r7, #12
 8013406:	46bd      	mov	sp, r7
 8013408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340c:	4770      	bx	lr

0801340e <_isatty>:

int _isatty(int file)
{
 801340e:	b480      	push	{r7}
 8013410:	b083      	sub	sp, #12
 8013412:	af00      	add	r7, sp, #0
 8013414:	6078      	str	r0, [r7, #4]
	return 1;
 8013416:	2301      	movs	r3, #1
}
 8013418:	4618      	mov	r0, r3
 801341a:	370c      	adds	r7, #12
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr

08013424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013424:	b480      	push	{r7}
 8013426:	b085      	sub	sp, #20
 8013428:	af00      	add	r7, sp, #0
 801342a:	60f8      	str	r0, [r7, #12]
 801342c:	60b9      	str	r1, [r7, #8]
 801342e:	607a      	str	r2, [r7, #4]
	return 0;
 8013430:	2300      	movs	r3, #0
}
 8013432:	4618      	mov	r0, r3
 8013434:	3714      	adds	r7, #20
 8013436:	46bd      	mov	sp, r7
 8013438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343c:	4770      	bx	lr

0801343e <__cvt>:
 801343e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013442:	ec55 4b10 	vmov	r4, r5, d0
 8013446:	2d00      	cmp	r5, #0
 8013448:	460e      	mov	r6, r1
 801344a:	4619      	mov	r1, r3
 801344c:	462b      	mov	r3, r5
 801344e:	bfbb      	ittet	lt
 8013450:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013454:	461d      	movlt	r5, r3
 8013456:	2300      	movge	r3, #0
 8013458:	232d      	movlt	r3, #45	; 0x2d
 801345a:	700b      	strb	r3, [r1, #0]
 801345c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801345e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013462:	4691      	mov	r9, r2
 8013464:	f023 0820 	bic.w	r8, r3, #32
 8013468:	bfbc      	itt	lt
 801346a:	4622      	movlt	r2, r4
 801346c:	4614      	movlt	r4, r2
 801346e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013472:	d005      	beq.n	8013480 <__cvt+0x42>
 8013474:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013478:	d100      	bne.n	801347c <__cvt+0x3e>
 801347a:	3601      	adds	r6, #1
 801347c:	2102      	movs	r1, #2
 801347e:	e000      	b.n	8013482 <__cvt+0x44>
 8013480:	2103      	movs	r1, #3
 8013482:	ab03      	add	r3, sp, #12
 8013484:	9301      	str	r3, [sp, #4]
 8013486:	ab02      	add	r3, sp, #8
 8013488:	9300      	str	r3, [sp, #0]
 801348a:	ec45 4b10 	vmov	d0, r4, r5
 801348e:	4653      	mov	r3, sl
 8013490:	4632      	mov	r2, r6
 8013492:	f000 fec9 	bl	8014228 <_dtoa_r>
 8013496:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801349a:	4607      	mov	r7, r0
 801349c:	d102      	bne.n	80134a4 <__cvt+0x66>
 801349e:	f019 0f01 	tst.w	r9, #1
 80134a2:	d022      	beq.n	80134ea <__cvt+0xac>
 80134a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80134a8:	eb07 0906 	add.w	r9, r7, r6
 80134ac:	d110      	bne.n	80134d0 <__cvt+0x92>
 80134ae:	783b      	ldrb	r3, [r7, #0]
 80134b0:	2b30      	cmp	r3, #48	; 0x30
 80134b2:	d10a      	bne.n	80134ca <__cvt+0x8c>
 80134b4:	2200      	movs	r2, #0
 80134b6:	2300      	movs	r3, #0
 80134b8:	4620      	mov	r0, r4
 80134ba:	4629      	mov	r1, r5
 80134bc:	f7ed fb24 	bl	8000b08 <__aeabi_dcmpeq>
 80134c0:	b918      	cbnz	r0, 80134ca <__cvt+0x8c>
 80134c2:	f1c6 0601 	rsb	r6, r6, #1
 80134c6:	f8ca 6000 	str.w	r6, [sl]
 80134ca:	f8da 3000 	ldr.w	r3, [sl]
 80134ce:	4499      	add	r9, r3
 80134d0:	2200      	movs	r2, #0
 80134d2:	2300      	movs	r3, #0
 80134d4:	4620      	mov	r0, r4
 80134d6:	4629      	mov	r1, r5
 80134d8:	f7ed fb16 	bl	8000b08 <__aeabi_dcmpeq>
 80134dc:	b108      	cbz	r0, 80134e2 <__cvt+0xa4>
 80134de:	f8cd 900c 	str.w	r9, [sp, #12]
 80134e2:	2230      	movs	r2, #48	; 0x30
 80134e4:	9b03      	ldr	r3, [sp, #12]
 80134e6:	454b      	cmp	r3, r9
 80134e8:	d307      	bcc.n	80134fa <__cvt+0xbc>
 80134ea:	9b03      	ldr	r3, [sp, #12]
 80134ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80134ee:	1bdb      	subs	r3, r3, r7
 80134f0:	4638      	mov	r0, r7
 80134f2:	6013      	str	r3, [r2, #0]
 80134f4:	b004      	add	sp, #16
 80134f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134fa:	1c59      	adds	r1, r3, #1
 80134fc:	9103      	str	r1, [sp, #12]
 80134fe:	701a      	strb	r2, [r3, #0]
 8013500:	e7f0      	b.n	80134e4 <__cvt+0xa6>

08013502 <__exponent>:
 8013502:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013504:	4603      	mov	r3, r0
 8013506:	2900      	cmp	r1, #0
 8013508:	bfb8      	it	lt
 801350a:	4249      	neglt	r1, r1
 801350c:	f803 2b02 	strb.w	r2, [r3], #2
 8013510:	bfb4      	ite	lt
 8013512:	222d      	movlt	r2, #45	; 0x2d
 8013514:	222b      	movge	r2, #43	; 0x2b
 8013516:	2909      	cmp	r1, #9
 8013518:	7042      	strb	r2, [r0, #1]
 801351a:	dd2a      	ble.n	8013572 <__exponent+0x70>
 801351c:	f10d 0207 	add.w	r2, sp, #7
 8013520:	4617      	mov	r7, r2
 8013522:	260a      	movs	r6, #10
 8013524:	4694      	mov	ip, r2
 8013526:	fb91 f5f6 	sdiv	r5, r1, r6
 801352a:	fb06 1415 	mls	r4, r6, r5, r1
 801352e:	3430      	adds	r4, #48	; 0x30
 8013530:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013534:	460c      	mov	r4, r1
 8013536:	2c63      	cmp	r4, #99	; 0x63
 8013538:	f102 32ff 	add.w	r2, r2, #4294967295
 801353c:	4629      	mov	r1, r5
 801353e:	dcf1      	bgt.n	8013524 <__exponent+0x22>
 8013540:	3130      	adds	r1, #48	; 0x30
 8013542:	f1ac 0402 	sub.w	r4, ip, #2
 8013546:	f802 1c01 	strb.w	r1, [r2, #-1]
 801354a:	1c41      	adds	r1, r0, #1
 801354c:	4622      	mov	r2, r4
 801354e:	42ba      	cmp	r2, r7
 8013550:	d30a      	bcc.n	8013568 <__exponent+0x66>
 8013552:	f10d 0209 	add.w	r2, sp, #9
 8013556:	eba2 020c 	sub.w	r2, r2, ip
 801355a:	42bc      	cmp	r4, r7
 801355c:	bf88      	it	hi
 801355e:	2200      	movhi	r2, #0
 8013560:	4413      	add	r3, r2
 8013562:	1a18      	subs	r0, r3, r0
 8013564:	b003      	add	sp, #12
 8013566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013568:	f812 5b01 	ldrb.w	r5, [r2], #1
 801356c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013570:	e7ed      	b.n	801354e <__exponent+0x4c>
 8013572:	2330      	movs	r3, #48	; 0x30
 8013574:	3130      	adds	r1, #48	; 0x30
 8013576:	7083      	strb	r3, [r0, #2]
 8013578:	70c1      	strb	r1, [r0, #3]
 801357a:	1d03      	adds	r3, r0, #4
 801357c:	e7f1      	b.n	8013562 <__exponent+0x60>
	...

08013580 <_printf_float>:
 8013580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013584:	ed2d 8b02 	vpush	{d8}
 8013588:	b08d      	sub	sp, #52	; 0x34
 801358a:	460c      	mov	r4, r1
 801358c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013590:	4616      	mov	r6, r2
 8013592:	461f      	mov	r7, r3
 8013594:	4605      	mov	r5, r0
 8013596:	f000 fce5 	bl	8013f64 <_localeconv_r>
 801359a:	f8d0 a000 	ldr.w	sl, [r0]
 801359e:	4650      	mov	r0, sl
 80135a0:	f7ec fe86 	bl	80002b0 <strlen>
 80135a4:	2300      	movs	r3, #0
 80135a6:	930a      	str	r3, [sp, #40]	; 0x28
 80135a8:	6823      	ldr	r3, [r4, #0]
 80135aa:	9305      	str	r3, [sp, #20]
 80135ac:	f8d8 3000 	ldr.w	r3, [r8]
 80135b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80135b4:	3307      	adds	r3, #7
 80135b6:	f023 0307 	bic.w	r3, r3, #7
 80135ba:	f103 0208 	add.w	r2, r3, #8
 80135be:	f8c8 2000 	str.w	r2, [r8]
 80135c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80135c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80135ca:	9307      	str	r3, [sp, #28]
 80135cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80135d0:	ee08 0a10 	vmov	s16, r0
 80135d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80135d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135dc:	4b9e      	ldr	r3, [pc, #632]	; (8013858 <_printf_float+0x2d8>)
 80135de:	f04f 32ff 	mov.w	r2, #4294967295
 80135e2:	f7ed fac3 	bl	8000b6c <__aeabi_dcmpun>
 80135e6:	bb88      	cbnz	r0, 801364c <_printf_float+0xcc>
 80135e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135ec:	4b9a      	ldr	r3, [pc, #616]	; (8013858 <_printf_float+0x2d8>)
 80135ee:	f04f 32ff 	mov.w	r2, #4294967295
 80135f2:	f7ed fa9d 	bl	8000b30 <__aeabi_dcmple>
 80135f6:	bb48      	cbnz	r0, 801364c <_printf_float+0xcc>
 80135f8:	2200      	movs	r2, #0
 80135fa:	2300      	movs	r3, #0
 80135fc:	4640      	mov	r0, r8
 80135fe:	4649      	mov	r1, r9
 8013600:	f7ed fa8c 	bl	8000b1c <__aeabi_dcmplt>
 8013604:	b110      	cbz	r0, 801360c <_printf_float+0x8c>
 8013606:	232d      	movs	r3, #45	; 0x2d
 8013608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801360c:	4a93      	ldr	r2, [pc, #588]	; (801385c <_printf_float+0x2dc>)
 801360e:	4b94      	ldr	r3, [pc, #592]	; (8013860 <_printf_float+0x2e0>)
 8013610:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013614:	bf94      	ite	ls
 8013616:	4690      	movls	r8, r2
 8013618:	4698      	movhi	r8, r3
 801361a:	2303      	movs	r3, #3
 801361c:	6123      	str	r3, [r4, #16]
 801361e:	9b05      	ldr	r3, [sp, #20]
 8013620:	f023 0304 	bic.w	r3, r3, #4
 8013624:	6023      	str	r3, [r4, #0]
 8013626:	f04f 0900 	mov.w	r9, #0
 801362a:	9700      	str	r7, [sp, #0]
 801362c:	4633      	mov	r3, r6
 801362e:	aa0b      	add	r2, sp, #44	; 0x2c
 8013630:	4621      	mov	r1, r4
 8013632:	4628      	mov	r0, r5
 8013634:	f000 f9da 	bl	80139ec <_printf_common>
 8013638:	3001      	adds	r0, #1
 801363a:	f040 8090 	bne.w	801375e <_printf_float+0x1de>
 801363e:	f04f 30ff 	mov.w	r0, #4294967295
 8013642:	b00d      	add	sp, #52	; 0x34
 8013644:	ecbd 8b02 	vpop	{d8}
 8013648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801364c:	4642      	mov	r2, r8
 801364e:	464b      	mov	r3, r9
 8013650:	4640      	mov	r0, r8
 8013652:	4649      	mov	r1, r9
 8013654:	f7ed fa8a 	bl	8000b6c <__aeabi_dcmpun>
 8013658:	b140      	cbz	r0, 801366c <_printf_float+0xec>
 801365a:	464b      	mov	r3, r9
 801365c:	2b00      	cmp	r3, #0
 801365e:	bfbc      	itt	lt
 8013660:	232d      	movlt	r3, #45	; 0x2d
 8013662:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013666:	4a7f      	ldr	r2, [pc, #508]	; (8013864 <_printf_float+0x2e4>)
 8013668:	4b7f      	ldr	r3, [pc, #508]	; (8013868 <_printf_float+0x2e8>)
 801366a:	e7d1      	b.n	8013610 <_printf_float+0x90>
 801366c:	6863      	ldr	r3, [r4, #4]
 801366e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013672:	9206      	str	r2, [sp, #24]
 8013674:	1c5a      	adds	r2, r3, #1
 8013676:	d13f      	bne.n	80136f8 <_printf_float+0x178>
 8013678:	2306      	movs	r3, #6
 801367a:	6063      	str	r3, [r4, #4]
 801367c:	9b05      	ldr	r3, [sp, #20]
 801367e:	6861      	ldr	r1, [r4, #4]
 8013680:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013684:	2300      	movs	r3, #0
 8013686:	9303      	str	r3, [sp, #12]
 8013688:	ab0a      	add	r3, sp, #40	; 0x28
 801368a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801368e:	ab09      	add	r3, sp, #36	; 0x24
 8013690:	ec49 8b10 	vmov	d0, r8, r9
 8013694:	9300      	str	r3, [sp, #0]
 8013696:	6022      	str	r2, [r4, #0]
 8013698:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801369c:	4628      	mov	r0, r5
 801369e:	f7ff fece 	bl	801343e <__cvt>
 80136a2:	9b06      	ldr	r3, [sp, #24]
 80136a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80136a6:	2b47      	cmp	r3, #71	; 0x47
 80136a8:	4680      	mov	r8, r0
 80136aa:	d108      	bne.n	80136be <_printf_float+0x13e>
 80136ac:	1cc8      	adds	r0, r1, #3
 80136ae:	db02      	blt.n	80136b6 <_printf_float+0x136>
 80136b0:	6863      	ldr	r3, [r4, #4]
 80136b2:	4299      	cmp	r1, r3
 80136b4:	dd41      	ble.n	801373a <_printf_float+0x1ba>
 80136b6:	f1ab 0302 	sub.w	r3, fp, #2
 80136ba:	fa5f fb83 	uxtb.w	fp, r3
 80136be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80136c2:	d820      	bhi.n	8013706 <_printf_float+0x186>
 80136c4:	3901      	subs	r1, #1
 80136c6:	465a      	mov	r2, fp
 80136c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80136cc:	9109      	str	r1, [sp, #36]	; 0x24
 80136ce:	f7ff ff18 	bl	8013502 <__exponent>
 80136d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136d4:	1813      	adds	r3, r2, r0
 80136d6:	2a01      	cmp	r2, #1
 80136d8:	4681      	mov	r9, r0
 80136da:	6123      	str	r3, [r4, #16]
 80136dc:	dc02      	bgt.n	80136e4 <_printf_float+0x164>
 80136de:	6822      	ldr	r2, [r4, #0]
 80136e0:	07d2      	lsls	r2, r2, #31
 80136e2:	d501      	bpl.n	80136e8 <_printf_float+0x168>
 80136e4:	3301      	adds	r3, #1
 80136e6:	6123      	str	r3, [r4, #16]
 80136e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d09c      	beq.n	801362a <_printf_float+0xaa>
 80136f0:	232d      	movs	r3, #45	; 0x2d
 80136f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136f6:	e798      	b.n	801362a <_printf_float+0xaa>
 80136f8:	9a06      	ldr	r2, [sp, #24]
 80136fa:	2a47      	cmp	r2, #71	; 0x47
 80136fc:	d1be      	bne.n	801367c <_printf_float+0xfc>
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d1bc      	bne.n	801367c <_printf_float+0xfc>
 8013702:	2301      	movs	r3, #1
 8013704:	e7b9      	b.n	801367a <_printf_float+0xfa>
 8013706:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801370a:	d118      	bne.n	801373e <_printf_float+0x1be>
 801370c:	2900      	cmp	r1, #0
 801370e:	6863      	ldr	r3, [r4, #4]
 8013710:	dd0b      	ble.n	801372a <_printf_float+0x1aa>
 8013712:	6121      	str	r1, [r4, #16]
 8013714:	b913      	cbnz	r3, 801371c <_printf_float+0x19c>
 8013716:	6822      	ldr	r2, [r4, #0]
 8013718:	07d0      	lsls	r0, r2, #31
 801371a:	d502      	bpl.n	8013722 <_printf_float+0x1a2>
 801371c:	3301      	adds	r3, #1
 801371e:	440b      	add	r3, r1
 8013720:	6123      	str	r3, [r4, #16]
 8013722:	65a1      	str	r1, [r4, #88]	; 0x58
 8013724:	f04f 0900 	mov.w	r9, #0
 8013728:	e7de      	b.n	80136e8 <_printf_float+0x168>
 801372a:	b913      	cbnz	r3, 8013732 <_printf_float+0x1b2>
 801372c:	6822      	ldr	r2, [r4, #0]
 801372e:	07d2      	lsls	r2, r2, #31
 8013730:	d501      	bpl.n	8013736 <_printf_float+0x1b6>
 8013732:	3302      	adds	r3, #2
 8013734:	e7f4      	b.n	8013720 <_printf_float+0x1a0>
 8013736:	2301      	movs	r3, #1
 8013738:	e7f2      	b.n	8013720 <_printf_float+0x1a0>
 801373a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801373e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013740:	4299      	cmp	r1, r3
 8013742:	db05      	blt.n	8013750 <_printf_float+0x1d0>
 8013744:	6823      	ldr	r3, [r4, #0]
 8013746:	6121      	str	r1, [r4, #16]
 8013748:	07d8      	lsls	r0, r3, #31
 801374a:	d5ea      	bpl.n	8013722 <_printf_float+0x1a2>
 801374c:	1c4b      	adds	r3, r1, #1
 801374e:	e7e7      	b.n	8013720 <_printf_float+0x1a0>
 8013750:	2900      	cmp	r1, #0
 8013752:	bfd4      	ite	le
 8013754:	f1c1 0202 	rsble	r2, r1, #2
 8013758:	2201      	movgt	r2, #1
 801375a:	4413      	add	r3, r2
 801375c:	e7e0      	b.n	8013720 <_printf_float+0x1a0>
 801375e:	6823      	ldr	r3, [r4, #0]
 8013760:	055a      	lsls	r2, r3, #21
 8013762:	d407      	bmi.n	8013774 <_printf_float+0x1f4>
 8013764:	6923      	ldr	r3, [r4, #16]
 8013766:	4642      	mov	r2, r8
 8013768:	4631      	mov	r1, r6
 801376a:	4628      	mov	r0, r5
 801376c:	47b8      	blx	r7
 801376e:	3001      	adds	r0, #1
 8013770:	d12c      	bne.n	80137cc <_printf_float+0x24c>
 8013772:	e764      	b.n	801363e <_printf_float+0xbe>
 8013774:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013778:	f240 80e0 	bls.w	801393c <_printf_float+0x3bc>
 801377c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013780:	2200      	movs	r2, #0
 8013782:	2300      	movs	r3, #0
 8013784:	f7ed f9c0 	bl	8000b08 <__aeabi_dcmpeq>
 8013788:	2800      	cmp	r0, #0
 801378a:	d034      	beq.n	80137f6 <_printf_float+0x276>
 801378c:	4a37      	ldr	r2, [pc, #220]	; (801386c <_printf_float+0x2ec>)
 801378e:	2301      	movs	r3, #1
 8013790:	4631      	mov	r1, r6
 8013792:	4628      	mov	r0, r5
 8013794:	47b8      	blx	r7
 8013796:	3001      	adds	r0, #1
 8013798:	f43f af51 	beq.w	801363e <_printf_float+0xbe>
 801379c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80137a0:	429a      	cmp	r2, r3
 80137a2:	db02      	blt.n	80137aa <_printf_float+0x22a>
 80137a4:	6823      	ldr	r3, [r4, #0]
 80137a6:	07d8      	lsls	r0, r3, #31
 80137a8:	d510      	bpl.n	80137cc <_printf_float+0x24c>
 80137aa:	ee18 3a10 	vmov	r3, s16
 80137ae:	4652      	mov	r2, sl
 80137b0:	4631      	mov	r1, r6
 80137b2:	4628      	mov	r0, r5
 80137b4:	47b8      	blx	r7
 80137b6:	3001      	adds	r0, #1
 80137b8:	f43f af41 	beq.w	801363e <_printf_float+0xbe>
 80137bc:	f04f 0800 	mov.w	r8, #0
 80137c0:	f104 091a 	add.w	r9, r4, #26
 80137c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137c6:	3b01      	subs	r3, #1
 80137c8:	4543      	cmp	r3, r8
 80137ca:	dc09      	bgt.n	80137e0 <_printf_float+0x260>
 80137cc:	6823      	ldr	r3, [r4, #0]
 80137ce:	079b      	lsls	r3, r3, #30
 80137d0:	f100 8107 	bmi.w	80139e2 <_printf_float+0x462>
 80137d4:	68e0      	ldr	r0, [r4, #12]
 80137d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137d8:	4298      	cmp	r0, r3
 80137da:	bfb8      	it	lt
 80137dc:	4618      	movlt	r0, r3
 80137de:	e730      	b.n	8013642 <_printf_float+0xc2>
 80137e0:	2301      	movs	r3, #1
 80137e2:	464a      	mov	r2, r9
 80137e4:	4631      	mov	r1, r6
 80137e6:	4628      	mov	r0, r5
 80137e8:	47b8      	blx	r7
 80137ea:	3001      	adds	r0, #1
 80137ec:	f43f af27 	beq.w	801363e <_printf_float+0xbe>
 80137f0:	f108 0801 	add.w	r8, r8, #1
 80137f4:	e7e6      	b.n	80137c4 <_printf_float+0x244>
 80137f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	dc39      	bgt.n	8013870 <_printf_float+0x2f0>
 80137fc:	4a1b      	ldr	r2, [pc, #108]	; (801386c <_printf_float+0x2ec>)
 80137fe:	2301      	movs	r3, #1
 8013800:	4631      	mov	r1, r6
 8013802:	4628      	mov	r0, r5
 8013804:	47b8      	blx	r7
 8013806:	3001      	adds	r0, #1
 8013808:	f43f af19 	beq.w	801363e <_printf_float+0xbe>
 801380c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013810:	4313      	orrs	r3, r2
 8013812:	d102      	bne.n	801381a <_printf_float+0x29a>
 8013814:	6823      	ldr	r3, [r4, #0]
 8013816:	07d9      	lsls	r1, r3, #31
 8013818:	d5d8      	bpl.n	80137cc <_printf_float+0x24c>
 801381a:	ee18 3a10 	vmov	r3, s16
 801381e:	4652      	mov	r2, sl
 8013820:	4631      	mov	r1, r6
 8013822:	4628      	mov	r0, r5
 8013824:	47b8      	blx	r7
 8013826:	3001      	adds	r0, #1
 8013828:	f43f af09 	beq.w	801363e <_printf_float+0xbe>
 801382c:	f04f 0900 	mov.w	r9, #0
 8013830:	f104 0a1a 	add.w	sl, r4, #26
 8013834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013836:	425b      	negs	r3, r3
 8013838:	454b      	cmp	r3, r9
 801383a:	dc01      	bgt.n	8013840 <_printf_float+0x2c0>
 801383c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801383e:	e792      	b.n	8013766 <_printf_float+0x1e6>
 8013840:	2301      	movs	r3, #1
 8013842:	4652      	mov	r2, sl
 8013844:	4631      	mov	r1, r6
 8013846:	4628      	mov	r0, r5
 8013848:	47b8      	blx	r7
 801384a:	3001      	adds	r0, #1
 801384c:	f43f aef7 	beq.w	801363e <_printf_float+0xbe>
 8013850:	f109 0901 	add.w	r9, r9, #1
 8013854:	e7ee      	b.n	8013834 <_printf_float+0x2b4>
 8013856:	bf00      	nop
 8013858:	7fefffff 	.word	0x7fefffff
 801385c:	08018426 	.word	0x08018426
 8013860:	0801842a 	.word	0x0801842a
 8013864:	0801842e 	.word	0x0801842e
 8013868:	08018432 	.word	0x08018432
 801386c:	08018436 	.word	0x08018436
 8013870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013872:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013874:	429a      	cmp	r2, r3
 8013876:	bfa8      	it	ge
 8013878:	461a      	movge	r2, r3
 801387a:	2a00      	cmp	r2, #0
 801387c:	4691      	mov	r9, r2
 801387e:	dc37      	bgt.n	80138f0 <_printf_float+0x370>
 8013880:	f04f 0b00 	mov.w	fp, #0
 8013884:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013888:	f104 021a 	add.w	r2, r4, #26
 801388c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801388e:	9305      	str	r3, [sp, #20]
 8013890:	eba3 0309 	sub.w	r3, r3, r9
 8013894:	455b      	cmp	r3, fp
 8013896:	dc33      	bgt.n	8013900 <_printf_float+0x380>
 8013898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801389c:	429a      	cmp	r2, r3
 801389e:	db3b      	blt.n	8013918 <_printf_float+0x398>
 80138a0:	6823      	ldr	r3, [r4, #0]
 80138a2:	07da      	lsls	r2, r3, #31
 80138a4:	d438      	bmi.n	8013918 <_printf_float+0x398>
 80138a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80138aa:	eba2 0903 	sub.w	r9, r2, r3
 80138ae:	9b05      	ldr	r3, [sp, #20]
 80138b0:	1ad2      	subs	r2, r2, r3
 80138b2:	4591      	cmp	r9, r2
 80138b4:	bfa8      	it	ge
 80138b6:	4691      	movge	r9, r2
 80138b8:	f1b9 0f00 	cmp.w	r9, #0
 80138bc:	dc35      	bgt.n	801392a <_printf_float+0x3aa>
 80138be:	f04f 0800 	mov.w	r8, #0
 80138c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80138c6:	f104 0a1a 	add.w	sl, r4, #26
 80138ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80138ce:	1a9b      	subs	r3, r3, r2
 80138d0:	eba3 0309 	sub.w	r3, r3, r9
 80138d4:	4543      	cmp	r3, r8
 80138d6:	f77f af79 	ble.w	80137cc <_printf_float+0x24c>
 80138da:	2301      	movs	r3, #1
 80138dc:	4652      	mov	r2, sl
 80138de:	4631      	mov	r1, r6
 80138e0:	4628      	mov	r0, r5
 80138e2:	47b8      	blx	r7
 80138e4:	3001      	adds	r0, #1
 80138e6:	f43f aeaa 	beq.w	801363e <_printf_float+0xbe>
 80138ea:	f108 0801 	add.w	r8, r8, #1
 80138ee:	e7ec      	b.n	80138ca <_printf_float+0x34a>
 80138f0:	4613      	mov	r3, r2
 80138f2:	4631      	mov	r1, r6
 80138f4:	4642      	mov	r2, r8
 80138f6:	4628      	mov	r0, r5
 80138f8:	47b8      	blx	r7
 80138fa:	3001      	adds	r0, #1
 80138fc:	d1c0      	bne.n	8013880 <_printf_float+0x300>
 80138fe:	e69e      	b.n	801363e <_printf_float+0xbe>
 8013900:	2301      	movs	r3, #1
 8013902:	4631      	mov	r1, r6
 8013904:	4628      	mov	r0, r5
 8013906:	9205      	str	r2, [sp, #20]
 8013908:	47b8      	blx	r7
 801390a:	3001      	adds	r0, #1
 801390c:	f43f ae97 	beq.w	801363e <_printf_float+0xbe>
 8013910:	9a05      	ldr	r2, [sp, #20]
 8013912:	f10b 0b01 	add.w	fp, fp, #1
 8013916:	e7b9      	b.n	801388c <_printf_float+0x30c>
 8013918:	ee18 3a10 	vmov	r3, s16
 801391c:	4652      	mov	r2, sl
 801391e:	4631      	mov	r1, r6
 8013920:	4628      	mov	r0, r5
 8013922:	47b8      	blx	r7
 8013924:	3001      	adds	r0, #1
 8013926:	d1be      	bne.n	80138a6 <_printf_float+0x326>
 8013928:	e689      	b.n	801363e <_printf_float+0xbe>
 801392a:	9a05      	ldr	r2, [sp, #20]
 801392c:	464b      	mov	r3, r9
 801392e:	4442      	add	r2, r8
 8013930:	4631      	mov	r1, r6
 8013932:	4628      	mov	r0, r5
 8013934:	47b8      	blx	r7
 8013936:	3001      	adds	r0, #1
 8013938:	d1c1      	bne.n	80138be <_printf_float+0x33e>
 801393a:	e680      	b.n	801363e <_printf_float+0xbe>
 801393c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801393e:	2a01      	cmp	r2, #1
 8013940:	dc01      	bgt.n	8013946 <_printf_float+0x3c6>
 8013942:	07db      	lsls	r3, r3, #31
 8013944:	d53a      	bpl.n	80139bc <_printf_float+0x43c>
 8013946:	2301      	movs	r3, #1
 8013948:	4642      	mov	r2, r8
 801394a:	4631      	mov	r1, r6
 801394c:	4628      	mov	r0, r5
 801394e:	47b8      	blx	r7
 8013950:	3001      	adds	r0, #1
 8013952:	f43f ae74 	beq.w	801363e <_printf_float+0xbe>
 8013956:	ee18 3a10 	vmov	r3, s16
 801395a:	4652      	mov	r2, sl
 801395c:	4631      	mov	r1, r6
 801395e:	4628      	mov	r0, r5
 8013960:	47b8      	blx	r7
 8013962:	3001      	adds	r0, #1
 8013964:	f43f ae6b 	beq.w	801363e <_printf_float+0xbe>
 8013968:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801396c:	2200      	movs	r2, #0
 801396e:	2300      	movs	r3, #0
 8013970:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8013974:	f7ed f8c8 	bl	8000b08 <__aeabi_dcmpeq>
 8013978:	b9d8      	cbnz	r0, 80139b2 <_printf_float+0x432>
 801397a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801397e:	f108 0201 	add.w	r2, r8, #1
 8013982:	4631      	mov	r1, r6
 8013984:	4628      	mov	r0, r5
 8013986:	47b8      	blx	r7
 8013988:	3001      	adds	r0, #1
 801398a:	d10e      	bne.n	80139aa <_printf_float+0x42a>
 801398c:	e657      	b.n	801363e <_printf_float+0xbe>
 801398e:	2301      	movs	r3, #1
 8013990:	4652      	mov	r2, sl
 8013992:	4631      	mov	r1, r6
 8013994:	4628      	mov	r0, r5
 8013996:	47b8      	blx	r7
 8013998:	3001      	adds	r0, #1
 801399a:	f43f ae50 	beq.w	801363e <_printf_float+0xbe>
 801399e:	f108 0801 	add.w	r8, r8, #1
 80139a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139a4:	3b01      	subs	r3, #1
 80139a6:	4543      	cmp	r3, r8
 80139a8:	dcf1      	bgt.n	801398e <_printf_float+0x40e>
 80139aa:	464b      	mov	r3, r9
 80139ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80139b0:	e6da      	b.n	8013768 <_printf_float+0x1e8>
 80139b2:	f04f 0800 	mov.w	r8, #0
 80139b6:	f104 0a1a 	add.w	sl, r4, #26
 80139ba:	e7f2      	b.n	80139a2 <_printf_float+0x422>
 80139bc:	2301      	movs	r3, #1
 80139be:	4642      	mov	r2, r8
 80139c0:	e7df      	b.n	8013982 <_printf_float+0x402>
 80139c2:	2301      	movs	r3, #1
 80139c4:	464a      	mov	r2, r9
 80139c6:	4631      	mov	r1, r6
 80139c8:	4628      	mov	r0, r5
 80139ca:	47b8      	blx	r7
 80139cc:	3001      	adds	r0, #1
 80139ce:	f43f ae36 	beq.w	801363e <_printf_float+0xbe>
 80139d2:	f108 0801 	add.w	r8, r8, #1
 80139d6:	68e3      	ldr	r3, [r4, #12]
 80139d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80139da:	1a5b      	subs	r3, r3, r1
 80139dc:	4543      	cmp	r3, r8
 80139de:	dcf0      	bgt.n	80139c2 <_printf_float+0x442>
 80139e0:	e6f8      	b.n	80137d4 <_printf_float+0x254>
 80139e2:	f04f 0800 	mov.w	r8, #0
 80139e6:	f104 0919 	add.w	r9, r4, #25
 80139ea:	e7f4      	b.n	80139d6 <_printf_float+0x456>

080139ec <_printf_common>:
 80139ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139f0:	4616      	mov	r6, r2
 80139f2:	4699      	mov	r9, r3
 80139f4:	688a      	ldr	r2, [r1, #8]
 80139f6:	690b      	ldr	r3, [r1, #16]
 80139f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80139fc:	4293      	cmp	r3, r2
 80139fe:	bfb8      	it	lt
 8013a00:	4613      	movlt	r3, r2
 8013a02:	6033      	str	r3, [r6, #0]
 8013a04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013a08:	4607      	mov	r7, r0
 8013a0a:	460c      	mov	r4, r1
 8013a0c:	b10a      	cbz	r2, 8013a12 <_printf_common+0x26>
 8013a0e:	3301      	adds	r3, #1
 8013a10:	6033      	str	r3, [r6, #0]
 8013a12:	6823      	ldr	r3, [r4, #0]
 8013a14:	0699      	lsls	r1, r3, #26
 8013a16:	bf42      	ittt	mi
 8013a18:	6833      	ldrmi	r3, [r6, #0]
 8013a1a:	3302      	addmi	r3, #2
 8013a1c:	6033      	strmi	r3, [r6, #0]
 8013a1e:	6825      	ldr	r5, [r4, #0]
 8013a20:	f015 0506 	ands.w	r5, r5, #6
 8013a24:	d106      	bne.n	8013a34 <_printf_common+0x48>
 8013a26:	f104 0a19 	add.w	sl, r4, #25
 8013a2a:	68e3      	ldr	r3, [r4, #12]
 8013a2c:	6832      	ldr	r2, [r6, #0]
 8013a2e:	1a9b      	subs	r3, r3, r2
 8013a30:	42ab      	cmp	r3, r5
 8013a32:	dc26      	bgt.n	8013a82 <_printf_common+0x96>
 8013a34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013a38:	1e13      	subs	r3, r2, #0
 8013a3a:	6822      	ldr	r2, [r4, #0]
 8013a3c:	bf18      	it	ne
 8013a3e:	2301      	movne	r3, #1
 8013a40:	0692      	lsls	r2, r2, #26
 8013a42:	d42b      	bmi.n	8013a9c <_printf_common+0xb0>
 8013a44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a48:	4649      	mov	r1, r9
 8013a4a:	4638      	mov	r0, r7
 8013a4c:	47c0      	blx	r8
 8013a4e:	3001      	adds	r0, #1
 8013a50:	d01e      	beq.n	8013a90 <_printf_common+0xa4>
 8013a52:	6823      	ldr	r3, [r4, #0]
 8013a54:	6922      	ldr	r2, [r4, #16]
 8013a56:	f003 0306 	and.w	r3, r3, #6
 8013a5a:	2b04      	cmp	r3, #4
 8013a5c:	bf02      	ittt	eq
 8013a5e:	68e5      	ldreq	r5, [r4, #12]
 8013a60:	6833      	ldreq	r3, [r6, #0]
 8013a62:	1aed      	subeq	r5, r5, r3
 8013a64:	68a3      	ldr	r3, [r4, #8]
 8013a66:	bf0c      	ite	eq
 8013a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a6c:	2500      	movne	r5, #0
 8013a6e:	4293      	cmp	r3, r2
 8013a70:	bfc4      	itt	gt
 8013a72:	1a9b      	subgt	r3, r3, r2
 8013a74:	18ed      	addgt	r5, r5, r3
 8013a76:	2600      	movs	r6, #0
 8013a78:	341a      	adds	r4, #26
 8013a7a:	42b5      	cmp	r5, r6
 8013a7c:	d11a      	bne.n	8013ab4 <_printf_common+0xc8>
 8013a7e:	2000      	movs	r0, #0
 8013a80:	e008      	b.n	8013a94 <_printf_common+0xa8>
 8013a82:	2301      	movs	r3, #1
 8013a84:	4652      	mov	r2, sl
 8013a86:	4649      	mov	r1, r9
 8013a88:	4638      	mov	r0, r7
 8013a8a:	47c0      	blx	r8
 8013a8c:	3001      	adds	r0, #1
 8013a8e:	d103      	bne.n	8013a98 <_printf_common+0xac>
 8013a90:	f04f 30ff 	mov.w	r0, #4294967295
 8013a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a98:	3501      	adds	r5, #1
 8013a9a:	e7c6      	b.n	8013a2a <_printf_common+0x3e>
 8013a9c:	18e1      	adds	r1, r4, r3
 8013a9e:	1c5a      	adds	r2, r3, #1
 8013aa0:	2030      	movs	r0, #48	; 0x30
 8013aa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013aa6:	4422      	add	r2, r4
 8013aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013aac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013ab0:	3302      	adds	r3, #2
 8013ab2:	e7c7      	b.n	8013a44 <_printf_common+0x58>
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	4622      	mov	r2, r4
 8013ab8:	4649      	mov	r1, r9
 8013aba:	4638      	mov	r0, r7
 8013abc:	47c0      	blx	r8
 8013abe:	3001      	adds	r0, #1
 8013ac0:	d0e6      	beq.n	8013a90 <_printf_common+0xa4>
 8013ac2:	3601      	adds	r6, #1
 8013ac4:	e7d9      	b.n	8013a7a <_printf_common+0x8e>
	...

08013ac8 <_printf_i>:
 8013ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013acc:	7e0f      	ldrb	r7, [r1, #24]
 8013ace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013ad0:	2f78      	cmp	r7, #120	; 0x78
 8013ad2:	4691      	mov	r9, r2
 8013ad4:	4680      	mov	r8, r0
 8013ad6:	460c      	mov	r4, r1
 8013ad8:	469a      	mov	sl, r3
 8013ada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013ade:	d807      	bhi.n	8013af0 <_printf_i+0x28>
 8013ae0:	2f62      	cmp	r7, #98	; 0x62
 8013ae2:	d80a      	bhi.n	8013afa <_printf_i+0x32>
 8013ae4:	2f00      	cmp	r7, #0
 8013ae6:	f000 80d4 	beq.w	8013c92 <_printf_i+0x1ca>
 8013aea:	2f58      	cmp	r7, #88	; 0x58
 8013aec:	f000 80c0 	beq.w	8013c70 <_printf_i+0x1a8>
 8013af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013af4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013af8:	e03a      	b.n	8013b70 <_printf_i+0xa8>
 8013afa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013afe:	2b15      	cmp	r3, #21
 8013b00:	d8f6      	bhi.n	8013af0 <_printf_i+0x28>
 8013b02:	a101      	add	r1, pc, #4	; (adr r1, 8013b08 <_printf_i+0x40>)
 8013b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013b08:	08013b61 	.word	0x08013b61
 8013b0c:	08013b75 	.word	0x08013b75
 8013b10:	08013af1 	.word	0x08013af1
 8013b14:	08013af1 	.word	0x08013af1
 8013b18:	08013af1 	.word	0x08013af1
 8013b1c:	08013af1 	.word	0x08013af1
 8013b20:	08013b75 	.word	0x08013b75
 8013b24:	08013af1 	.word	0x08013af1
 8013b28:	08013af1 	.word	0x08013af1
 8013b2c:	08013af1 	.word	0x08013af1
 8013b30:	08013af1 	.word	0x08013af1
 8013b34:	08013c79 	.word	0x08013c79
 8013b38:	08013ba1 	.word	0x08013ba1
 8013b3c:	08013c33 	.word	0x08013c33
 8013b40:	08013af1 	.word	0x08013af1
 8013b44:	08013af1 	.word	0x08013af1
 8013b48:	08013c9b 	.word	0x08013c9b
 8013b4c:	08013af1 	.word	0x08013af1
 8013b50:	08013ba1 	.word	0x08013ba1
 8013b54:	08013af1 	.word	0x08013af1
 8013b58:	08013af1 	.word	0x08013af1
 8013b5c:	08013c3b 	.word	0x08013c3b
 8013b60:	682b      	ldr	r3, [r5, #0]
 8013b62:	1d1a      	adds	r2, r3, #4
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	602a      	str	r2, [r5, #0]
 8013b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013b70:	2301      	movs	r3, #1
 8013b72:	e09f      	b.n	8013cb4 <_printf_i+0x1ec>
 8013b74:	6820      	ldr	r0, [r4, #0]
 8013b76:	682b      	ldr	r3, [r5, #0]
 8013b78:	0607      	lsls	r7, r0, #24
 8013b7a:	f103 0104 	add.w	r1, r3, #4
 8013b7e:	6029      	str	r1, [r5, #0]
 8013b80:	d501      	bpl.n	8013b86 <_printf_i+0xbe>
 8013b82:	681e      	ldr	r6, [r3, #0]
 8013b84:	e003      	b.n	8013b8e <_printf_i+0xc6>
 8013b86:	0646      	lsls	r6, r0, #25
 8013b88:	d5fb      	bpl.n	8013b82 <_printf_i+0xba>
 8013b8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013b8e:	2e00      	cmp	r6, #0
 8013b90:	da03      	bge.n	8013b9a <_printf_i+0xd2>
 8013b92:	232d      	movs	r3, #45	; 0x2d
 8013b94:	4276      	negs	r6, r6
 8013b96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b9a:	485a      	ldr	r0, [pc, #360]	; (8013d04 <_printf_i+0x23c>)
 8013b9c:	230a      	movs	r3, #10
 8013b9e:	e012      	b.n	8013bc6 <_printf_i+0xfe>
 8013ba0:	682b      	ldr	r3, [r5, #0]
 8013ba2:	6820      	ldr	r0, [r4, #0]
 8013ba4:	1d19      	adds	r1, r3, #4
 8013ba6:	6029      	str	r1, [r5, #0]
 8013ba8:	0605      	lsls	r5, r0, #24
 8013baa:	d501      	bpl.n	8013bb0 <_printf_i+0xe8>
 8013bac:	681e      	ldr	r6, [r3, #0]
 8013bae:	e002      	b.n	8013bb6 <_printf_i+0xee>
 8013bb0:	0641      	lsls	r1, r0, #25
 8013bb2:	d5fb      	bpl.n	8013bac <_printf_i+0xe4>
 8013bb4:	881e      	ldrh	r6, [r3, #0]
 8013bb6:	4853      	ldr	r0, [pc, #332]	; (8013d04 <_printf_i+0x23c>)
 8013bb8:	2f6f      	cmp	r7, #111	; 0x6f
 8013bba:	bf0c      	ite	eq
 8013bbc:	2308      	moveq	r3, #8
 8013bbe:	230a      	movne	r3, #10
 8013bc0:	2100      	movs	r1, #0
 8013bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013bc6:	6865      	ldr	r5, [r4, #4]
 8013bc8:	60a5      	str	r5, [r4, #8]
 8013bca:	2d00      	cmp	r5, #0
 8013bcc:	bfa2      	ittt	ge
 8013bce:	6821      	ldrge	r1, [r4, #0]
 8013bd0:	f021 0104 	bicge.w	r1, r1, #4
 8013bd4:	6021      	strge	r1, [r4, #0]
 8013bd6:	b90e      	cbnz	r6, 8013bdc <_printf_i+0x114>
 8013bd8:	2d00      	cmp	r5, #0
 8013bda:	d04b      	beq.n	8013c74 <_printf_i+0x1ac>
 8013bdc:	4615      	mov	r5, r2
 8013bde:	fbb6 f1f3 	udiv	r1, r6, r3
 8013be2:	fb03 6711 	mls	r7, r3, r1, r6
 8013be6:	5dc7      	ldrb	r7, [r0, r7]
 8013be8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013bec:	4637      	mov	r7, r6
 8013bee:	42bb      	cmp	r3, r7
 8013bf0:	460e      	mov	r6, r1
 8013bf2:	d9f4      	bls.n	8013bde <_printf_i+0x116>
 8013bf4:	2b08      	cmp	r3, #8
 8013bf6:	d10b      	bne.n	8013c10 <_printf_i+0x148>
 8013bf8:	6823      	ldr	r3, [r4, #0]
 8013bfa:	07de      	lsls	r6, r3, #31
 8013bfc:	d508      	bpl.n	8013c10 <_printf_i+0x148>
 8013bfe:	6923      	ldr	r3, [r4, #16]
 8013c00:	6861      	ldr	r1, [r4, #4]
 8013c02:	4299      	cmp	r1, r3
 8013c04:	bfde      	ittt	le
 8013c06:	2330      	movle	r3, #48	; 0x30
 8013c08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013c0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013c10:	1b52      	subs	r2, r2, r5
 8013c12:	6122      	str	r2, [r4, #16]
 8013c14:	f8cd a000 	str.w	sl, [sp]
 8013c18:	464b      	mov	r3, r9
 8013c1a:	aa03      	add	r2, sp, #12
 8013c1c:	4621      	mov	r1, r4
 8013c1e:	4640      	mov	r0, r8
 8013c20:	f7ff fee4 	bl	80139ec <_printf_common>
 8013c24:	3001      	adds	r0, #1
 8013c26:	d14a      	bne.n	8013cbe <_printf_i+0x1f6>
 8013c28:	f04f 30ff 	mov.w	r0, #4294967295
 8013c2c:	b004      	add	sp, #16
 8013c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c32:	6823      	ldr	r3, [r4, #0]
 8013c34:	f043 0320 	orr.w	r3, r3, #32
 8013c38:	6023      	str	r3, [r4, #0]
 8013c3a:	4833      	ldr	r0, [pc, #204]	; (8013d08 <_printf_i+0x240>)
 8013c3c:	2778      	movs	r7, #120	; 0x78
 8013c3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013c42:	6823      	ldr	r3, [r4, #0]
 8013c44:	6829      	ldr	r1, [r5, #0]
 8013c46:	061f      	lsls	r7, r3, #24
 8013c48:	f851 6b04 	ldr.w	r6, [r1], #4
 8013c4c:	d402      	bmi.n	8013c54 <_printf_i+0x18c>
 8013c4e:	065f      	lsls	r7, r3, #25
 8013c50:	bf48      	it	mi
 8013c52:	b2b6      	uxthmi	r6, r6
 8013c54:	07df      	lsls	r7, r3, #31
 8013c56:	bf48      	it	mi
 8013c58:	f043 0320 	orrmi.w	r3, r3, #32
 8013c5c:	6029      	str	r1, [r5, #0]
 8013c5e:	bf48      	it	mi
 8013c60:	6023      	strmi	r3, [r4, #0]
 8013c62:	b91e      	cbnz	r6, 8013c6c <_printf_i+0x1a4>
 8013c64:	6823      	ldr	r3, [r4, #0]
 8013c66:	f023 0320 	bic.w	r3, r3, #32
 8013c6a:	6023      	str	r3, [r4, #0]
 8013c6c:	2310      	movs	r3, #16
 8013c6e:	e7a7      	b.n	8013bc0 <_printf_i+0xf8>
 8013c70:	4824      	ldr	r0, [pc, #144]	; (8013d04 <_printf_i+0x23c>)
 8013c72:	e7e4      	b.n	8013c3e <_printf_i+0x176>
 8013c74:	4615      	mov	r5, r2
 8013c76:	e7bd      	b.n	8013bf4 <_printf_i+0x12c>
 8013c78:	682b      	ldr	r3, [r5, #0]
 8013c7a:	6826      	ldr	r6, [r4, #0]
 8013c7c:	6961      	ldr	r1, [r4, #20]
 8013c7e:	1d18      	adds	r0, r3, #4
 8013c80:	6028      	str	r0, [r5, #0]
 8013c82:	0635      	lsls	r5, r6, #24
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	d501      	bpl.n	8013c8c <_printf_i+0x1c4>
 8013c88:	6019      	str	r1, [r3, #0]
 8013c8a:	e002      	b.n	8013c92 <_printf_i+0x1ca>
 8013c8c:	0670      	lsls	r0, r6, #25
 8013c8e:	d5fb      	bpl.n	8013c88 <_printf_i+0x1c0>
 8013c90:	8019      	strh	r1, [r3, #0]
 8013c92:	2300      	movs	r3, #0
 8013c94:	6123      	str	r3, [r4, #16]
 8013c96:	4615      	mov	r5, r2
 8013c98:	e7bc      	b.n	8013c14 <_printf_i+0x14c>
 8013c9a:	682b      	ldr	r3, [r5, #0]
 8013c9c:	1d1a      	adds	r2, r3, #4
 8013c9e:	602a      	str	r2, [r5, #0]
 8013ca0:	681d      	ldr	r5, [r3, #0]
 8013ca2:	6862      	ldr	r2, [r4, #4]
 8013ca4:	2100      	movs	r1, #0
 8013ca6:	4628      	mov	r0, r5
 8013ca8:	f7ec fab2 	bl	8000210 <memchr>
 8013cac:	b108      	cbz	r0, 8013cb2 <_printf_i+0x1ea>
 8013cae:	1b40      	subs	r0, r0, r5
 8013cb0:	6060      	str	r0, [r4, #4]
 8013cb2:	6863      	ldr	r3, [r4, #4]
 8013cb4:	6123      	str	r3, [r4, #16]
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013cbc:	e7aa      	b.n	8013c14 <_printf_i+0x14c>
 8013cbe:	6923      	ldr	r3, [r4, #16]
 8013cc0:	462a      	mov	r2, r5
 8013cc2:	4649      	mov	r1, r9
 8013cc4:	4640      	mov	r0, r8
 8013cc6:	47d0      	blx	sl
 8013cc8:	3001      	adds	r0, #1
 8013cca:	d0ad      	beq.n	8013c28 <_printf_i+0x160>
 8013ccc:	6823      	ldr	r3, [r4, #0]
 8013cce:	079b      	lsls	r3, r3, #30
 8013cd0:	d413      	bmi.n	8013cfa <_printf_i+0x232>
 8013cd2:	68e0      	ldr	r0, [r4, #12]
 8013cd4:	9b03      	ldr	r3, [sp, #12]
 8013cd6:	4298      	cmp	r0, r3
 8013cd8:	bfb8      	it	lt
 8013cda:	4618      	movlt	r0, r3
 8013cdc:	e7a6      	b.n	8013c2c <_printf_i+0x164>
 8013cde:	2301      	movs	r3, #1
 8013ce0:	4632      	mov	r2, r6
 8013ce2:	4649      	mov	r1, r9
 8013ce4:	4640      	mov	r0, r8
 8013ce6:	47d0      	blx	sl
 8013ce8:	3001      	adds	r0, #1
 8013cea:	d09d      	beq.n	8013c28 <_printf_i+0x160>
 8013cec:	3501      	adds	r5, #1
 8013cee:	68e3      	ldr	r3, [r4, #12]
 8013cf0:	9903      	ldr	r1, [sp, #12]
 8013cf2:	1a5b      	subs	r3, r3, r1
 8013cf4:	42ab      	cmp	r3, r5
 8013cf6:	dcf2      	bgt.n	8013cde <_printf_i+0x216>
 8013cf8:	e7eb      	b.n	8013cd2 <_printf_i+0x20a>
 8013cfa:	2500      	movs	r5, #0
 8013cfc:	f104 0619 	add.w	r6, r4, #25
 8013d00:	e7f5      	b.n	8013cee <_printf_i+0x226>
 8013d02:	bf00      	nop
 8013d04:	08018438 	.word	0x08018438
 8013d08:	08018449 	.word	0x08018449

08013d0c <std>:
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	b510      	push	{r4, lr}
 8013d10:	4604      	mov	r4, r0
 8013d12:	e9c0 3300 	strd	r3, r3, [r0]
 8013d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d1a:	6083      	str	r3, [r0, #8]
 8013d1c:	8181      	strh	r1, [r0, #12]
 8013d1e:	6643      	str	r3, [r0, #100]	; 0x64
 8013d20:	81c2      	strh	r2, [r0, #14]
 8013d22:	6183      	str	r3, [r0, #24]
 8013d24:	4619      	mov	r1, r3
 8013d26:	2208      	movs	r2, #8
 8013d28:	305c      	adds	r0, #92	; 0x5c
 8013d2a:	f000 f912 	bl	8013f52 <memset>
 8013d2e:	4b05      	ldr	r3, [pc, #20]	; (8013d44 <std+0x38>)
 8013d30:	6263      	str	r3, [r4, #36]	; 0x24
 8013d32:	4b05      	ldr	r3, [pc, #20]	; (8013d48 <std+0x3c>)
 8013d34:	62a3      	str	r3, [r4, #40]	; 0x28
 8013d36:	4b05      	ldr	r3, [pc, #20]	; (8013d4c <std+0x40>)
 8013d38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013d3a:	4b05      	ldr	r3, [pc, #20]	; (8013d50 <std+0x44>)
 8013d3c:	6224      	str	r4, [r4, #32]
 8013d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8013d40:	bd10      	pop	{r4, pc}
 8013d42:	bf00      	nop
 8013d44:	08013ead 	.word	0x08013ead
 8013d48:	08013ecf 	.word	0x08013ecf
 8013d4c:	08013f07 	.word	0x08013f07
 8013d50:	08013f2b 	.word	0x08013f2b

08013d54 <stdio_exit_handler>:
 8013d54:	4a02      	ldr	r2, [pc, #8]	; (8013d60 <stdio_exit_handler+0xc>)
 8013d56:	4903      	ldr	r1, [pc, #12]	; (8013d64 <stdio_exit_handler+0x10>)
 8013d58:	4803      	ldr	r0, [pc, #12]	; (8013d68 <stdio_exit_handler+0x14>)
 8013d5a:	f000 b869 	b.w	8013e30 <_fwalk_sglue>
 8013d5e:	bf00      	nop
 8013d60:	2000003c 	.word	0x2000003c
 8013d64:	08015ac1 	.word	0x08015ac1
 8013d68:	20000048 	.word	0x20000048

08013d6c <cleanup_stdio>:
 8013d6c:	6841      	ldr	r1, [r0, #4]
 8013d6e:	4b0c      	ldr	r3, [pc, #48]	; (8013da0 <cleanup_stdio+0x34>)
 8013d70:	4299      	cmp	r1, r3
 8013d72:	b510      	push	{r4, lr}
 8013d74:	4604      	mov	r4, r0
 8013d76:	d001      	beq.n	8013d7c <cleanup_stdio+0x10>
 8013d78:	f001 fea2 	bl	8015ac0 <_fflush_r>
 8013d7c:	68a1      	ldr	r1, [r4, #8]
 8013d7e:	4b09      	ldr	r3, [pc, #36]	; (8013da4 <cleanup_stdio+0x38>)
 8013d80:	4299      	cmp	r1, r3
 8013d82:	d002      	beq.n	8013d8a <cleanup_stdio+0x1e>
 8013d84:	4620      	mov	r0, r4
 8013d86:	f001 fe9b 	bl	8015ac0 <_fflush_r>
 8013d8a:	68e1      	ldr	r1, [r4, #12]
 8013d8c:	4b06      	ldr	r3, [pc, #24]	; (8013da8 <cleanup_stdio+0x3c>)
 8013d8e:	4299      	cmp	r1, r3
 8013d90:	d004      	beq.n	8013d9c <cleanup_stdio+0x30>
 8013d92:	4620      	mov	r0, r4
 8013d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d98:	f001 be92 	b.w	8015ac0 <_fflush_r>
 8013d9c:	bd10      	pop	{r4, pc}
 8013d9e:	bf00      	nop
 8013da0:	20009e60 	.word	0x20009e60
 8013da4:	20009ec8 	.word	0x20009ec8
 8013da8:	20009f30 	.word	0x20009f30

08013dac <global_stdio_init.part.0>:
 8013dac:	b510      	push	{r4, lr}
 8013dae:	4b0b      	ldr	r3, [pc, #44]	; (8013ddc <global_stdio_init.part.0+0x30>)
 8013db0:	4c0b      	ldr	r4, [pc, #44]	; (8013de0 <global_stdio_init.part.0+0x34>)
 8013db2:	4a0c      	ldr	r2, [pc, #48]	; (8013de4 <global_stdio_init.part.0+0x38>)
 8013db4:	601a      	str	r2, [r3, #0]
 8013db6:	4620      	mov	r0, r4
 8013db8:	2200      	movs	r2, #0
 8013dba:	2104      	movs	r1, #4
 8013dbc:	f7ff ffa6 	bl	8013d0c <std>
 8013dc0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013dc4:	2201      	movs	r2, #1
 8013dc6:	2109      	movs	r1, #9
 8013dc8:	f7ff ffa0 	bl	8013d0c <std>
 8013dcc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013dd0:	2202      	movs	r2, #2
 8013dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dd6:	2112      	movs	r1, #18
 8013dd8:	f7ff bf98 	b.w	8013d0c <std>
 8013ddc:	20009f98 	.word	0x20009f98
 8013de0:	20009e60 	.word	0x20009e60
 8013de4:	08013d55 	.word	0x08013d55

08013de8 <__sfp_lock_acquire>:
 8013de8:	4801      	ldr	r0, [pc, #4]	; (8013df0 <__sfp_lock_acquire+0x8>)
 8013dea:	f000 b985 	b.w	80140f8 <__retarget_lock_acquire_recursive>
 8013dee:	bf00      	nop
 8013df0:	20009fa1 	.word	0x20009fa1

08013df4 <__sfp_lock_release>:
 8013df4:	4801      	ldr	r0, [pc, #4]	; (8013dfc <__sfp_lock_release+0x8>)
 8013df6:	f000 b980 	b.w	80140fa <__retarget_lock_release_recursive>
 8013dfa:	bf00      	nop
 8013dfc:	20009fa1 	.word	0x20009fa1

08013e00 <__sinit>:
 8013e00:	b510      	push	{r4, lr}
 8013e02:	4604      	mov	r4, r0
 8013e04:	f7ff fff0 	bl	8013de8 <__sfp_lock_acquire>
 8013e08:	6a23      	ldr	r3, [r4, #32]
 8013e0a:	b11b      	cbz	r3, 8013e14 <__sinit+0x14>
 8013e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e10:	f7ff bff0 	b.w	8013df4 <__sfp_lock_release>
 8013e14:	4b04      	ldr	r3, [pc, #16]	; (8013e28 <__sinit+0x28>)
 8013e16:	6223      	str	r3, [r4, #32]
 8013e18:	4b04      	ldr	r3, [pc, #16]	; (8013e2c <__sinit+0x2c>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d1f5      	bne.n	8013e0c <__sinit+0xc>
 8013e20:	f7ff ffc4 	bl	8013dac <global_stdio_init.part.0>
 8013e24:	e7f2      	b.n	8013e0c <__sinit+0xc>
 8013e26:	bf00      	nop
 8013e28:	08013d6d 	.word	0x08013d6d
 8013e2c:	20009f98 	.word	0x20009f98

08013e30 <_fwalk_sglue>:
 8013e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e34:	4607      	mov	r7, r0
 8013e36:	4688      	mov	r8, r1
 8013e38:	4614      	mov	r4, r2
 8013e3a:	2600      	movs	r6, #0
 8013e3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e40:	f1b9 0901 	subs.w	r9, r9, #1
 8013e44:	d505      	bpl.n	8013e52 <_fwalk_sglue+0x22>
 8013e46:	6824      	ldr	r4, [r4, #0]
 8013e48:	2c00      	cmp	r4, #0
 8013e4a:	d1f7      	bne.n	8013e3c <_fwalk_sglue+0xc>
 8013e4c:	4630      	mov	r0, r6
 8013e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e52:	89ab      	ldrh	r3, [r5, #12]
 8013e54:	2b01      	cmp	r3, #1
 8013e56:	d907      	bls.n	8013e68 <_fwalk_sglue+0x38>
 8013e58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e5c:	3301      	adds	r3, #1
 8013e5e:	d003      	beq.n	8013e68 <_fwalk_sglue+0x38>
 8013e60:	4629      	mov	r1, r5
 8013e62:	4638      	mov	r0, r7
 8013e64:	47c0      	blx	r8
 8013e66:	4306      	orrs	r6, r0
 8013e68:	3568      	adds	r5, #104	; 0x68
 8013e6a:	e7e9      	b.n	8013e40 <_fwalk_sglue+0x10>

08013e6c <siprintf>:
 8013e6c:	b40e      	push	{r1, r2, r3}
 8013e6e:	b500      	push	{lr}
 8013e70:	b09c      	sub	sp, #112	; 0x70
 8013e72:	ab1d      	add	r3, sp, #116	; 0x74
 8013e74:	9002      	str	r0, [sp, #8]
 8013e76:	9006      	str	r0, [sp, #24]
 8013e78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013e7c:	4809      	ldr	r0, [pc, #36]	; (8013ea4 <siprintf+0x38>)
 8013e7e:	9107      	str	r1, [sp, #28]
 8013e80:	9104      	str	r1, [sp, #16]
 8013e82:	4909      	ldr	r1, [pc, #36]	; (8013ea8 <siprintf+0x3c>)
 8013e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e88:	9105      	str	r1, [sp, #20]
 8013e8a:	6800      	ldr	r0, [r0, #0]
 8013e8c:	9301      	str	r3, [sp, #4]
 8013e8e:	a902      	add	r1, sp, #8
 8013e90:	f001 fc92 	bl	80157b8 <_svfiprintf_r>
 8013e94:	9b02      	ldr	r3, [sp, #8]
 8013e96:	2200      	movs	r2, #0
 8013e98:	701a      	strb	r2, [r3, #0]
 8013e9a:	b01c      	add	sp, #112	; 0x70
 8013e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ea0:	b003      	add	sp, #12
 8013ea2:	4770      	bx	lr
 8013ea4:	20000094 	.word	0x20000094
 8013ea8:	ffff0208 	.word	0xffff0208

08013eac <__sread>:
 8013eac:	b510      	push	{r4, lr}
 8013eae:	460c      	mov	r4, r1
 8013eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eb4:	f000 f8d2 	bl	801405c <_read_r>
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	bfab      	itete	ge
 8013ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8013ec0:	181b      	addge	r3, r3, r0
 8013ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013ec6:	bfac      	ite	ge
 8013ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8013eca:	81a3      	strhlt	r3, [r4, #12]
 8013ecc:	bd10      	pop	{r4, pc}

08013ece <__swrite>:
 8013ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed2:	461f      	mov	r7, r3
 8013ed4:	898b      	ldrh	r3, [r1, #12]
 8013ed6:	05db      	lsls	r3, r3, #23
 8013ed8:	4605      	mov	r5, r0
 8013eda:	460c      	mov	r4, r1
 8013edc:	4616      	mov	r6, r2
 8013ede:	d505      	bpl.n	8013eec <__swrite+0x1e>
 8013ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ee4:	2302      	movs	r3, #2
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	f000 f8a6 	bl	8014038 <_lseek_r>
 8013eec:	89a3      	ldrh	r3, [r4, #12]
 8013eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ef6:	81a3      	strh	r3, [r4, #12]
 8013ef8:	4632      	mov	r2, r6
 8013efa:	463b      	mov	r3, r7
 8013efc:	4628      	mov	r0, r5
 8013efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f02:	f000 b8bd 	b.w	8014080 <_write_r>

08013f06 <__sseek>:
 8013f06:	b510      	push	{r4, lr}
 8013f08:	460c      	mov	r4, r1
 8013f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f0e:	f000 f893 	bl	8014038 <_lseek_r>
 8013f12:	1c43      	adds	r3, r0, #1
 8013f14:	89a3      	ldrh	r3, [r4, #12]
 8013f16:	bf15      	itete	ne
 8013f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8013f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013f22:	81a3      	strheq	r3, [r4, #12]
 8013f24:	bf18      	it	ne
 8013f26:	81a3      	strhne	r3, [r4, #12]
 8013f28:	bd10      	pop	{r4, pc}

08013f2a <__sclose>:
 8013f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f2e:	f000 b81d 	b.w	8013f6c <_close_r>

08013f32 <memcmp>:
 8013f32:	b510      	push	{r4, lr}
 8013f34:	3901      	subs	r1, #1
 8013f36:	4402      	add	r2, r0
 8013f38:	4290      	cmp	r0, r2
 8013f3a:	d101      	bne.n	8013f40 <memcmp+0xe>
 8013f3c:	2000      	movs	r0, #0
 8013f3e:	e005      	b.n	8013f4c <memcmp+0x1a>
 8013f40:	7803      	ldrb	r3, [r0, #0]
 8013f42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013f46:	42a3      	cmp	r3, r4
 8013f48:	d001      	beq.n	8013f4e <memcmp+0x1c>
 8013f4a:	1b18      	subs	r0, r3, r4
 8013f4c:	bd10      	pop	{r4, pc}
 8013f4e:	3001      	adds	r0, #1
 8013f50:	e7f2      	b.n	8013f38 <memcmp+0x6>

08013f52 <memset>:
 8013f52:	4402      	add	r2, r0
 8013f54:	4603      	mov	r3, r0
 8013f56:	4293      	cmp	r3, r2
 8013f58:	d100      	bne.n	8013f5c <memset+0xa>
 8013f5a:	4770      	bx	lr
 8013f5c:	f803 1b01 	strb.w	r1, [r3], #1
 8013f60:	e7f9      	b.n	8013f56 <memset+0x4>
	...

08013f64 <_localeconv_r>:
 8013f64:	4800      	ldr	r0, [pc, #0]	; (8013f68 <_localeconv_r+0x4>)
 8013f66:	4770      	bx	lr
 8013f68:	20000188 	.word	0x20000188

08013f6c <_close_r>:
 8013f6c:	b538      	push	{r3, r4, r5, lr}
 8013f6e:	4d06      	ldr	r5, [pc, #24]	; (8013f88 <_close_r+0x1c>)
 8013f70:	2300      	movs	r3, #0
 8013f72:	4604      	mov	r4, r0
 8013f74:	4608      	mov	r0, r1
 8013f76:	602b      	str	r3, [r5, #0]
 8013f78:	f7ff fa2d 	bl	80133d6 <_close>
 8013f7c:	1c43      	adds	r3, r0, #1
 8013f7e:	d102      	bne.n	8013f86 <_close_r+0x1a>
 8013f80:	682b      	ldr	r3, [r5, #0]
 8013f82:	b103      	cbz	r3, 8013f86 <_close_r+0x1a>
 8013f84:	6023      	str	r3, [r4, #0]
 8013f86:	bd38      	pop	{r3, r4, r5, pc}
 8013f88:	20009f9c 	.word	0x20009f9c

08013f8c <_reclaim_reent>:
 8013f8c:	4b29      	ldr	r3, [pc, #164]	; (8014034 <_reclaim_reent+0xa8>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	4283      	cmp	r3, r0
 8013f92:	b570      	push	{r4, r5, r6, lr}
 8013f94:	4604      	mov	r4, r0
 8013f96:	d04b      	beq.n	8014030 <_reclaim_reent+0xa4>
 8013f98:	69c3      	ldr	r3, [r0, #28]
 8013f9a:	b143      	cbz	r3, 8013fae <_reclaim_reent+0x22>
 8013f9c:	68db      	ldr	r3, [r3, #12]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d144      	bne.n	801402c <_reclaim_reent+0xa0>
 8013fa2:	69e3      	ldr	r3, [r4, #28]
 8013fa4:	6819      	ldr	r1, [r3, #0]
 8013fa6:	b111      	cbz	r1, 8013fae <_reclaim_reent+0x22>
 8013fa8:	4620      	mov	r0, r4
 8013faa:	f000 ff2f 	bl	8014e0c <_free_r>
 8013fae:	6961      	ldr	r1, [r4, #20]
 8013fb0:	b111      	cbz	r1, 8013fb8 <_reclaim_reent+0x2c>
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	f000 ff2a 	bl	8014e0c <_free_r>
 8013fb8:	69e1      	ldr	r1, [r4, #28]
 8013fba:	b111      	cbz	r1, 8013fc2 <_reclaim_reent+0x36>
 8013fbc:	4620      	mov	r0, r4
 8013fbe:	f000 ff25 	bl	8014e0c <_free_r>
 8013fc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013fc4:	b111      	cbz	r1, 8013fcc <_reclaim_reent+0x40>
 8013fc6:	4620      	mov	r0, r4
 8013fc8:	f000 ff20 	bl	8014e0c <_free_r>
 8013fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fce:	b111      	cbz	r1, 8013fd6 <_reclaim_reent+0x4a>
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	f000 ff1b 	bl	8014e0c <_free_r>
 8013fd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013fd8:	b111      	cbz	r1, 8013fe0 <_reclaim_reent+0x54>
 8013fda:	4620      	mov	r0, r4
 8013fdc:	f000 ff16 	bl	8014e0c <_free_r>
 8013fe0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013fe2:	b111      	cbz	r1, 8013fea <_reclaim_reent+0x5e>
 8013fe4:	4620      	mov	r0, r4
 8013fe6:	f000 ff11 	bl	8014e0c <_free_r>
 8013fea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8013fec:	b111      	cbz	r1, 8013ff4 <_reclaim_reent+0x68>
 8013fee:	4620      	mov	r0, r4
 8013ff0:	f000 ff0c 	bl	8014e0c <_free_r>
 8013ff4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013ff6:	b111      	cbz	r1, 8013ffe <_reclaim_reent+0x72>
 8013ff8:	4620      	mov	r0, r4
 8013ffa:	f000 ff07 	bl	8014e0c <_free_r>
 8013ffe:	6a23      	ldr	r3, [r4, #32]
 8014000:	b1b3      	cbz	r3, 8014030 <_reclaim_reent+0xa4>
 8014002:	4620      	mov	r0, r4
 8014004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014008:	4718      	bx	r3
 801400a:	5949      	ldr	r1, [r1, r5]
 801400c:	b941      	cbnz	r1, 8014020 <_reclaim_reent+0x94>
 801400e:	3504      	adds	r5, #4
 8014010:	69e3      	ldr	r3, [r4, #28]
 8014012:	2d80      	cmp	r5, #128	; 0x80
 8014014:	68d9      	ldr	r1, [r3, #12]
 8014016:	d1f8      	bne.n	801400a <_reclaim_reent+0x7e>
 8014018:	4620      	mov	r0, r4
 801401a:	f000 fef7 	bl	8014e0c <_free_r>
 801401e:	e7c0      	b.n	8013fa2 <_reclaim_reent+0x16>
 8014020:	680e      	ldr	r6, [r1, #0]
 8014022:	4620      	mov	r0, r4
 8014024:	f000 fef2 	bl	8014e0c <_free_r>
 8014028:	4631      	mov	r1, r6
 801402a:	e7ef      	b.n	801400c <_reclaim_reent+0x80>
 801402c:	2500      	movs	r5, #0
 801402e:	e7ef      	b.n	8014010 <_reclaim_reent+0x84>
 8014030:	bd70      	pop	{r4, r5, r6, pc}
 8014032:	bf00      	nop
 8014034:	20000094 	.word	0x20000094

08014038 <_lseek_r>:
 8014038:	b538      	push	{r3, r4, r5, lr}
 801403a:	4d07      	ldr	r5, [pc, #28]	; (8014058 <_lseek_r+0x20>)
 801403c:	4604      	mov	r4, r0
 801403e:	4608      	mov	r0, r1
 8014040:	4611      	mov	r1, r2
 8014042:	2200      	movs	r2, #0
 8014044:	602a      	str	r2, [r5, #0]
 8014046:	461a      	mov	r2, r3
 8014048:	f7ff f9ec 	bl	8013424 <_lseek>
 801404c:	1c43      	adds	r3, r0, #1
 801404e:	d102      	bne.n	8014056 <_lseek_r+0x1e>
 8014050:	682b      	ldr	r3, [r5, #0]
 8014052:	b103      	cbz	r3, 8014056 <_lseek_r+0x1e>
 8014054:	6023      	str	r3, [r4, #0]
 8014056:	bd38      	pop	{r3, r4, r5, pc}
 8014058:	20009f9c 	.word	0x20009f9c

0801405c <_read_r>:
 801405c:	b538      	push	{r3, r4, r5, lr}
 801405e:	4d07      	ldr	r5, [pc, #28]	; (801407c <_read_r+0x20>)
 8014060:	4604      	mov	r4, r0
 8014062:	4608      	mov	r0, r1
 8014064:	4611      	mov	r1, r2
 8014066:	2200      	movs	r2, #0
 8014068:	602a      	str	r2, [r5, #0]
 801406a:	461a      	mov	r2, r3
 801406c:	f7ff f996 	bl	801339c <_read>
 8014070:	1c43      	adds	r3, r0, #1
 8014072:	d102      	bne.n	801407a <_read_r+0x1e>
 8014074:	682b      	ldr	r3, [r5, #0]
 8014076:	b103      	cbz	r3, 801407a <_read_r+0x1e>
 8014078:	6023      	str	r3, [r4, #0]
 801407a:	bd38      	pop	{r3, r4, r5, pc}
 801407c:	20009f9c 	.word	0x20009f9c

08014080 <_write_r>:
 8014080:	b538      	push	{r3, r4, r5, lr}
 8014082:	4d07      	ldr	r5, [pc, #28]	; (80140a0 <_write_r+0x20>)
 8014084:	4604      	mov	r4, r0
 8014086:	4608      	mov	r0, r1
 8014088:	4611      	mov	r1, r2
 801408a:	2200      	movs	r2, #0
 801408c:	602a      	str	r2, [r5, #0]
 801408e:	461a      	mov	r2, r3
 8014090:	f7ec ff48 	bl	8000f24 <_write>
 8014094:	1c43      	adds	r3, r0, #1
 8014096:	d102      	bne.n	801409e <_write_r+0x1e>
 8014098:	682b      	ldr	r3, [r5, #0]
 801409a:	b103      	cbz	r3, 801409e <_write_r+0x1e>
 801409c:	6023      	str	r3, [r4, #0]
 801409e:	bd38      	pop	{r3, r4, r5, pc}
 80140a0:	20009f9c 	.word	0x20009f9c

080140a4 <__errno>:
 80140a4:	4b01      	ldr	r3, [pc, #4]	; (80140ac <__errno+0x8>)
 80140a6:	6818      	ldr	r0, [r3, #0]
 80140a8:	4770      	bx	lr
 80140aa:	bf00      	nop
 80140ac:	20000094 	.word	0x20000094

080140b0 <__libc_init_array>:
 80140b0:	b570      	push	{r4, r5, r6, lr}
 80140b2:	4d0d      	ldr	r5, [pc, #52]	; (80140e8 <__libc_init_array+0x38>)
 80140b4:	4c0d      	ldr	r4, [pc, #52]	; (80140ec <__libc_init_array+0x3c>)
 80140b6:	1b64      	subs	r4, r4, r5
 80140b8:	10a4      	asrs	r4, r4, #2
 80140ba:	2600      	movs	r6, #0
 80140bc:	42a6      	cmp	r6, r4
 80140be:	d109      	bne.n	80140d4 <__libc_init_array+0x24>
 80140c0:	4d0b      	ldr	r5, [pc, #44]	; (80140f0 <__libc_init_array+0x40>)
 80140c2:	4c0c      	ldr	r4, [pc, #48]	; (80140f4 <__libc_init_array+0x44>)
 80140c4:	f002 f892 	bl	80161ec <_init>
 80140c8:	1b64      	subs	r4, r4, r5
 80140ca:	10a4      	asrs	r4, r4, #2
 80140cc:	2600      	movs	r6, #0
 80140ce:	42a6      	cmp	r6, r4
 80140d0:	d105      	bne.n	80140de <__libc_init_array+0x2e>
 80140d2:	bd70      	pop	{r4, r5, r6, pc}
 80140d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80140d8:	4798      	blx	r3
 80140da:	3601      	adds	r6, #1
 80140dc:	e7ee      	b.n	80140bc <__libc_init_array+0xc>
 80140de:	f855 3b04 	ldr.w	r3, [r5], #4
 80140e2:	4798      	blx	r3
 80140e4:	3601      	adds	r6, #1
 80140e6:	e7f2      	b.n	80140ce <__libc_init_array+0x1e>
 80140e8:	0801879c 	.word	0x0801879c
 80140ec:	0801879c 	.word	0x0801879c
 80140f0:	0801879c 	.word	0x0801879c
 80140f4:	080187a0 	.word	0x080187a0

080140f8 <__retarget_lock_acquire_recursive>:
 80140f8:	4770      	bx	lr

080140fa <__retarget_lock_release_recursive>:
 80140fa:	4770      	bx	lr

080140fc <memcpy>:
 80140fc:	440a      	add	r2, r1
 80140fe:	4291      	cmp	r1, r2
 8014100:	f100 33ff 	add.w	r3, r0, #4294967295
 8014104:	d100      	bne.n	8014108 <memcpy+0xc>
 8014106:	4770      	bx	lr
 8014108:	b510      	push	{r4, lr}
 801410a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801410e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014112:	4291      	cmp	r1, r2
 8014114:	d1f9      	bne.n	801410a <memcpy+0xe>
 8014116:	bd10      	pop	{r4, pc}

08014118 <quorem>:
 8014118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801411c:	6903      	ldr	r3, [r0, #16]
 801411e:	690c      	ldr	r4, [r1, #16]
 8014120:	42a3      	cmp	r3, r4
 8014122:	4607      	mov	r7, r0
 8014124:	db7e      	blt.n	8014224 <quorem+0x10c>
 8014126:	3c01      	subs	r4, #1
 8014128:	f101 0814 	add.w	r8, r1, #20
 801412c:	f100 0514 	add.w	r5, r0, #20
 8014130:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014134:	9301      	str	r3, [sp, #4]
 8014136:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801413a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801413e:	3301      	adds	r3, #1
 8014140:	429a      	cmp	r2, r3
 8014142:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014146:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801414a:	fbb2 f6f3 	udiv	r6, r2, r3
 801414e:	d331      	bcc.n	80141b4 <quorem+0x9c>
 8014150:	f04f 0e00 	mov.w	lr, #0
 8014154:	4640      	mov	r0, r8
 8014156:	46ac      	mov	ip, r5
 8014158:	46f2      	mov	sl, lr
 801415a:	f850 2b04 	ldr.w	r2, [r0], #4
 801415e:	b293      	uxth	r3, r2
 8014160:	fb06 e303 	mla	r3, r6, r3, lr
 8014164:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014168:	0c1a      	lsrs	r2, r3, #16
 801416a:	b29b      	uxth	r3, r3
 801416c:	ebaa 0303 	sub.w	r3, sl, r3
 8014170:	f8dc a000 	ldr.w	sl, [ip]
 8014174:	fa13 f38a 	uxtah	r3, r3, sl
 8014178:	fb06 220e 	mla	r2, r6, lr, r2
 801417c:	9300      	str	r3, [sp, #0]
 801417e:	9b00      	ldr	r3, [sp, #0]
 8014180:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014184:	b292      	uxth	r2, r2
 8014186:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801418a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801418e:	f8bd 3000 	ldrh.w	r3, [sp]
 8014192:	4581      	cmp	r9, r0
 8014194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014198:	f84c 3b04 	str.w	r3, [ip], #4
 801419c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80141a0:	d2db      	bcs.n	801415a <quorem+0x42>
 80141a2:	f855 300b 	ldr.w	r3, [r5, fp]
 80141a6:	b92b      	cbnz	r3, 80141b4 <quorem+0x9c>
 80141a8:	9b01      	ldr	r3, [sp, #4]
 80141aa:	3b04      	subs	r3, #4
 80141ac:	429d      	cmp	r5, r3
 80141ae:	461a      	mov	r2, r3
 80141b0:	d32c      	bcc.n	801420c <quorem+0xf4>
 80141b2:	613c      	str	r4, [r7, #16]
 80141b4:	4638      	mov	r0, r7
 80141b6:	f001 f9a5 	bl	8015504 <__mcmp>
 80141ba:	2800      	cmp	r0, #0
 80141bc:	db22      	blt.n	8014204 <quorem+0xec>
 80141be:	3601      	adds	r6, #1
 80141c0:	4629      	mov	r1, r5
 80141c2:	2000      	movs	r0, #0
 80141c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80141c8:	f8d1 c000 	ldr.w	ip, [r1]
 80141cc:	b293      	uxth	r3, r2
 80141ce:	1ac3      	subs	r3, r0, r3
 80141d0:	0c12      	lsrs	r2, r2, #16
 80141d2:	fa13 f38c 	uxtah	r3, r3, ip
 80141d6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80141da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80141de:	b29b      	uxth	r3, r3
 80141e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141e4:	45c1      	cmp	r9, r8
 80141e6:	f841 3b04 	str.w	r3, [r1], #4
 80141ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80141ee:	d2e9      	bcs.n	80141c4 <quorem+0xac>
 80141f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80141f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80141f8:	b922      	cbnz	r2, 8014204 <quorem+0xec>
 80141fa:	3b04      	subs	r3, #4
 80141fc:	429d      	cmp	r5, r3
 80141fe:	461a      	mov	r2, r3
 8014200:	d30a      	bcc.n	8014218 <quorem+0x100>
 8014202:	613c      	str	r4, [r7, #16]
 8014204:	4630      	mov	r0, r6
 8014206:	b003      	add	sp, #12
 8014208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801420c:	6812      	ldr	r2, [r2, #0]
 801420e:	3b04      	subs	r3, #4
 8014210:	2a00      	cmp	r2, #0
 8014212:	d1ce      	bne.n	80141b2 <quorem+0x9a>
 8014214:	3c01      	subs	r4, #1
 8014216:	e7c9      	b.n	80141ac <quorem+0x94>
 8014218:	6812      	ldr	r2, [r2, #0]
 801421a:	3b04      	subs	r3, #4
 801421c:	2a00      	cmp	r2, #0
 801421e:	d1f0      	bne.n	8014202 <quorem+0xea>
 8014220:	3c01      	subs	r4, #1
 8014222:	e7eb      	b.n	80141fc <quorem+0xe4>
 8014224:	2000      	movs	r0, #0
 8014226:	e7ee      	b.n	8014206 <quorem+0xee>

08014228 <_dtoa_r>:
 8014228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801422c:	ed2d 8b04 	vpush	{d8-d9}
 8014230:	69c5      	ldr	r5, [r0, #28]
 8014232:	b093      	sub	sp, #76	; 0x4c
 8014234:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014238:	ec57 6b10 	vmov	r6, r7, d0
 801423c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014240:	9107      	str	r1, [sp, #28]
 8014242:	4604      	mov	r4, r0
 8014244:	920a      	str	r2, [sp, #40]	; 0x28
 8014246:	930d      	str	r3, [sp, #52]	; 0x34
 8014248:	b975      	cbnz	r5, 8014268 <_dtoa_r+0x40>
 801424a:	2010      	movs	r0, #16
 801424c:	f000 fe2a 	bl	8014ea4 <malloc>
 8014250:	4602      	mov	r2, r0
 8014252:	61e0      	str	r0, [r4, #28]
 8014254:	b920      	cbnz	r0, 8014260 <_dtoa_r+0x38>
 8014256:	4bae      	ldr	r3, [pc, #696]	; (8014510 <_dtoa_r+0x2e8>)
 8014258:	21ef      	movs	r1, #239	; 0xef
 801425a:	48ae      	ldr	r0, [pc, #696]	; (8014514 <_dtoa_r+0x2ec>)
 801425c:	f001 fc82 	bl	8015b64 <__assert_func>
 8014260:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014264:	6005      	str	r5, [r0, #0]
 8014266:	60c5      	str	r5, [r0, #12]
 8014268:	69e3      	ldr	r3, [r4, #28]
 801426a:	6819      	ldr	r1, [r3, #0]
 801426c:	b151      	cbz	r1, 8014284 <_dtoa_r+0x5c>
 801426e:	685a      	ldr	r2, [r3, #4]
 8014270:	604a      	str	r2, [r1, #4]
 8014272:	2301      	movs	r3, #1
 8014274:	4093      	lsls	r3, r2
 8014276:	608b      	str	r3, [r1, #8]
 8014278:	4620      	mov	r0, r4
 801427a:	f000 ff07 	bl	801508c <_Bfree>
 801427e:	69e3      	ldr	r3, [r4, #28]
 8014280:	2200      	movs	r2, #0
 8014282:	601a      	str	r2, [r3, #0]
 8014284:	1e3b      	subs	r3, r7, #0
 8014286:	bfbb      	ittet	lt
 8014288:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801428c:	9303      	strlt	r3, [sp, #12]
 801428e:	2300      	movge	r3, #0
 8014290:	2201      	movlt	r2, #1
 8014292:	bfac      	ite	ge
 8014294:	f8c8 3000 	strge.w	r3, [r8]
 8014298:	f8c8 2000 	strlt.w	r2, [r8]
 801429c:	4b9e      	ldr	r3, [pc, #632]	; (8014518 <_dtoa_r+0x2f0>)
 801429e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80142a2:	ea33 0308 	bics.w	r3, r3, r8
 80142a6:	d11b      	bne.n	80142e0 <_dtoa_r+0xb8>
 80142a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80142aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80142ae:	6013      	str	r3, [r2, #0]
 80142b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80142b4:	4333      	orrs	r3, r6
 80142b6:	f000 8593 	beq.w	8014de0 <_dtoa_r+0xbb8>
 80142ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80142bc:	b963      	cbnz	r3, 80142d8 <_dtoa_r+0xb0>
 80142be:	4b97      	ldr	r3, [pc, #604]	; (801451c <_dtoa_r+0x2f4>)
 80142c0:	e027      	b.n	8014312 <_dtoa_r+0xea>
 80142c2:	4b97      	ldr	r3, [pc, #604]	; (8014520 <_dtoa_r+0x2f8>)
 80142c4:	9300      	str	r3, [sp, #0]
 80142c6:	3308      	adds	r3, #8
 80142c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80142ca:	6013      	str	r3, [r2, #0]
 80142cc:	9800      	ldr	r0, [sp, #0]
 80142ce:	b013      	add	sp, #76	; 0x4c
 80142d0:	ecbd 8b04 	vpop	{d8-d9}
 80142d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142d8:	4b90      	ldr	r3, [pc, #576]	; (801451c <_dtoa_r+0x2f4>)
 80142da:	9300      	str	r3, [sp, #0]
 80142dc:	3303      	adds	r3, #3
 80142de:	e7f3      	b.n	80142c8 <_dtoa_r+0xa0>
 80142e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80142e4:	2200      	movs	r2, #0
 80142e6:	ec51 0b17 	vmov	r0, r1, d7
 80142ea:	eeb0 8a47 	vmov.f32	s16, s14
 80142ee:	eef0 8a67 	vmov.f32	s17, s15
 80142f2:	2300      	movs	r3, #0
 80142f4:	f7ec fc08 	bl	8000b08 <__aeabi_dcmpeq>
 80142f8:	4681      	mov	r9, r0
 80142fa:	b160      	cbz	r0, 8014316 <_dtoa_r+0xee>
 80142fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80142fe:	2301      	movs	r3, #1
 8014300:	6013      	str	r3, [r2, #0]
 8014302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014304:	2b00      	cmp	r3, #0
 8014306:	f000 8568 	beq.w	8014dda <_dtoa_r+0xbb2>
 801430a:	4b86      	ldr	r3, [pc, #536]	; (8014524 <_dtoa_r+0x2fc>)
 801430c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801430e:	6013      	str	r3, [r2, #0]
 8014310:	3b01      	subs	r3, #1
 8014312:	9300      	str	r3, [sp, #0]
 8014314:	e7da      	b.n	80142cc <_dtoa_r+0xa4>
 8014316:	aa10      	add	r2, sp, #64	; 0x40
 8014318:	a911      	add	r1, sp, #68	; 0x44
 801431a:	4620      	mov	r0, r4
 801431c:	eeb0 0a48 	vmov.f32	s0, s16
 8014320:	eef0 0a68 	vmov.f32	s1, s17
 8014324:	f001 f994 	bl	8015650 <__d2b>
 8014328:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801432c:	4682      	mov	sl, r0
 801432e:	2d00      	cmp	r5, #0
 8014330:	d07f      	beq.n	8014432 <_dtoa_r+0x20a>
 8014332:	ee18 3a90 	vmov	r3, s17
 8014336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801433a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801433e:	ec51 0b18 	vmov	r0, r1, d8
 8014342:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014346:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801434a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801434e:	4619      	mov	r1, r3
 8014350:	2200      	movs	r2, #0
 8014352:	4b75      	ldr	r3, [pc, #468]	; (8014528 <_dtoa_r+0x300>)
 8014354:	f7eb ffb8 	bl	80002c8 <__aeabi_dsub>
 8014358:	a367      	add	r3, pc, #412	; (adr r3, 80144f8 <_dtoa_r+0x2d0>)
 801435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801435e:	f7ec f96b 	bl	8000638 <__aeabi_dmul>
 8014362:	a367      	add	r3, pc, #412	; (adr r3, 8014500 <_dtoa_r+0x2d8>)
 8014364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014368:	f7eb ffb0 	bl	80002cc <__adddf3>
 801436c:	4606      	mov	r6, r0
 801436e:	4628      	mov	r0, r5
 8014370:	460f      	mov	r7, r1
 8014372:	f7ec f8f7 	bl	8000564 <__aeabi_i2d>
 8014376:	a364      	add	r3, pc, #400	; (adr r3, 8014508 <_dtoa_r+0x2e0>)
 8014378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801437c:	f7ec f95c 	bl	8000638 <__aeabi_dmul>
 8014380:	4602      	mov	r2, r0
 8014382:	460b      	mov	r3, r1
 8014384:	4630      	mov	r0, r6
 8014386:	4639      	mov	r1, r7
 8014388:	f7eb ffa0 	bl	80002cc <__adddf3>
 801438c:	4606      	mov	r6, r0
 801438e:	460f      	mov	r7, r1
 8014390:	f7ec fc02 	bl	8000b98 <__aeabi_d2iz>
 8014394:	2200      	movs	r2, #0
 8014396:	4683      	mov	fp, r0
 8014398:	2300      	movs	r3, #0
 801439a:	4630      	mov	r0, r6
 801439c:	4639      	mov	r1, r7
 801439e:	f7ec fbbd 	bl	8000b1c <__aeabi_dcmplt>
 80143a2:	b148      	cbz	r0, 80143b8 <_dtoa_r+0x190>
 80143a4:	4658      	mov	r0, fp
 80143a6:	f7ec f8dd 	bl	8000564 <__aeabi_i2d>
 80143aa:	4632      	mov	r2, r6
 80143ac:	463b      	mov	r3, r7
 80143ae:	f7ec fbab 	bl	8000b08 <__aeabi_dcmpeq>
 80143b2:	b908      	cbnz	r0, 80143b8 <_dtoa_r+0x190>
 80143b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80143b8:	f1bb 0f16 	cmp.w	fp, #22
 80143bc:	d857      	bhi.n	801446e <_dtoa_r+0x246>
 80143be:	4b5b      	ldr	r3, [pc, #364]	; (801452c <_dtoa_r+0x304>)
 80143c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80143c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c8:	ec51 0b18 	vmov	r0, r1, d8
 80143cc:	f7ec fba6 	bl	8000b1c <__aeabi_dcmplt>
 80143d0:	2800      	cmp	r0, #0
 80143d2:	d04e      	beq.n	8014472 <_dtoa_r+0x24a>
 80143d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80143d8:	2300      	movs	r3, #0
 80143da:	930c      	str	r3, [sp, #48]	; 0x30
 80143dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80143de:	1b5b      	subs	r3, r3, r5
 80143e0:	1e5a      	subs	r2, r3, #1
 80143e2:	bf45      	ittet	mi
 80143e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80143e8:	9305      	strmi	r3, [sp, #20]
 80143ea:	2300      	movpl	r3, #0
 80143ec:	2300      	movmi	r3, #0
 80143ee:	9206      	str	r2, [sp, #24]
 80143f0:	bf54      	ite	pl
 80143f2:	9305      	strpl	r3, [sp, #20]
 80143f4:	9306      	strmi	r3, [sp, #24]
 80143f6:	f1bb 0f00 	cmp.w	fp, #0
 80143fa:	db3c      	blt.n	8014476 <_dtoa_r+0x24e>
 80143fc:	9b06      	ldr	r3, [sp, #24]
 80143fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014402:	445b      	add	r3, fp
 8014404:	9306      	str	r3, [sp, #24]
 8014406:	2300      	movs	r3, #0
 8014408:	9308      	str	r3, [sp, #32]
 801440a:	9b07      	ldr	r3, [sp, #28]
 801440c:	2b09      	cmp	r3, #9
 801440e:	d868      	bhi.n	80144e2 <_dtoa_r+0x2ba>
 8014410:	2b05      	cmp	r3, #5
 8014412:	bfc4      	itt	gt
 8014414:	3b04      	subgt	r3, #4
 8014416:	9307      	strgt	r3, [sp, #28]
 8014418:	9b07      	ldr	r3, [sp, #28]
 801441a:	f1a3 0302 	sub.w	r3, r3, #2
 801441e:	bfcc      	ite	gt
 8014420:	2500      	movgt	r5, #0
 8014422:	2501      	movle	r5, #1
 8014424:	2b03      	cmp	r3, #3
 8014426:	f200 8085 	bhi.w	8014534 <_dtoa_r+0x30c>
 801442a:	e8df f003 	tbb	[pc, r3]
 801442e:	3b2e      	.short	0x3b2e
 8014430:	5839      	.short	0x5839
 8014432:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014436:	441d      	add	r5, r3
 8014438:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801443c:	2b20      	cmp	r3, #32
 801443e:	bfc1      	itttt	gt
 8014440:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014444:	fa08 f803 	lslgt.w	r8, r8, r3
 8014448:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801444c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8014450:	bfd6      	itet	le
 8014452:	f1c3 0320 	rsble	r3, r3, #32
 8014456:	ea48 0003 	orrgt.w	r0, r8, r3
 801445a:	fa06 f003 	lslle.w	r0, r6, r3
 801445e:	f7ec f871 	bl	8000544 <__aeabi_ui2d>
 8014462:	2201      	movs	r2, #1
 8014464:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8014468:	3d01      	subs	r5, #1
 801446a:	920e      	str	r2, [sp, #56]	; 0x38
 801446c:	e76f      	b.n	801434e <_dtoa_r+0x126>
 801446e:	2301      	movs	r3, #1
 8014470:	e7b3      	b.n	80143da <_dtoa_r+0x1b2>
 8014472:	900c      	str	r0, [sp, #48]	; 0x30
 8014474:	e7b2      	b.n	80143dc <_dtoa_r+0x1b4>
 8014476:	9b05      	ldr	r3, [sp, #20]
 8014478:	eba3 030b 	sub.w	r3, r3, fp
 801447c:	9305      	str	r3, [sp, #20]
 801447e:	f1cb 0300 	rsb	r3, fp, #0
 8014482:	9308      	str	r3, [sp, #32]
 8014484:	2300      	movs	r3, #0
 8014486:	930b      	str	r3, [sp, #44]	; 0x2c
 8014488:	e7bf      	b.n	801440a <_dtoa_r+0x1e2>
 801448a:	2300      	movs	r3, #0
 801448c:	9309      	str	r3, [sp, #36]	; 0x24
 801448e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014490:	2b00      	cmp	r3, #0
 8014492:	dc52      	bgt.n	801453a <_dtoa_r+0x312>
 8014494:	2301      	movs	r3, #1
 8014496:	9301      	str	r3, [sp, #4]
 8014498:	9304      	str	r3, [sp, #16]
 801449a:	461a      	mov	r2, r3
 801449c:	920a      	str	r2, [sp, #40]	; 0x28
 801449e:	e00b      	b.n	80144b8 <_dtoa_r+0x290>
 80144a0:	2301      	movs	r3, #1
 80144a2:	e7f3      	b.n	801448c <_dtoa_r+0x264>
 80144a4:	2300      	movs	r3, #0
 80144a6:	9309      	str	r3, [sp, #36]	; 0x24
 80144a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144aa:	445b      	add	r3, fp
 80144ac:	9301      	str	r3, [sp, #4]
 80144ae:	3301      	adds	r3, #1
 80144b0:	2b01      	cmp	r3, #1
 80144b2:	9304      	str	r3, [sp, #16]
 80144b4:	bfb8      	it	lt
 80144b6:	2301      	movlt	r3, #1
 80144b8:	69e0      	ldr	r0, [r4, #28]
 80144ba:	2100      	movs	r1, #0
 80144bc:	2204      	movs	r2, #4
 80144be:	f102 0614 	add.w	r6, r2, #20
 80144c2:	429e      	cmp	r6, r3
 80144c4:	d93d      	bls.n	8014542 <_dtoa_r+0x31a>
 80144c6:	6041      	str	r1, [r0, #4]
 80144c8:	4620      	mov	r0, r4
 80144ca:	f000 fd9f 	bl	801500c <_Balloc>
 80144ce:	9000      	str	r0, [sp, #0]
 80144d0:	2800      	cmp	r0, #0
 80144d2:	d139      	bne.n	8014548 <_dtoa_r+0x320>
 80144d4:	4b16      	ldr	r3, [pc, #88]	; (8014530 <_dtoa_r+0x308>)
 80144d6:	4602      	mov	r2, r0
 80144d8:	f240 11af 	movw	r1, #431	; 0x1af
 80144dc:	e6bd      	b.n	801425a <_dtoa_r+0x32>
 80144de:	2301      	movs	r3, #1
 80144e0:	e7e1      	b.n	80144a6 <_dtoa_r+0x27e>
 80144e2:	2501      	movs	r5, #1
 80144e4:	2300      	movs	r3, #0
 80144e6:	9307      	str	r3, [sp, #28]
 80144e8:	9509      	str	r5, [sp, #36]	; 0x24
 80144ea:	f04f 33ff 	mov.w	r3, #4294967295
 80144ee:	9301      	str	r3, [sp, #4]
 80144f0:	9304      	str	r3, [sp, #16]
 80144f2:	2200      	movs	r2, #0
 80144f4:	2312      	movs	r3, #18
 80144f6:	e7d1      	b.n	801449c <_dtoa_r+0x274>
 80144f8:	636f4361 	.word	0x636f4361
 80144fc:	3fd287a7 	.word	0x3fd287a7
 8014500:	8b60c8b3 	.word	0x8b60c8b3
 8014504:	3fc68a28 	.word	0x3fc68a28
 8014508:	509f79fb 	.word	0x509f79fb
 801450c:	3fd34413 	.word	0x3fd34413
 8014510:	08018467 	.word	0x08018467
 8014514:	0801847e 	.word	0x0801847e
 8014518:	7ff00000 	.word	0x7ff00000
 801451c:	08018463 	.word	0x08018463
 8014520:	0801845a 	.word	0x0801845a
 8014524:	08018437 	.word	0x08018437
 8014528:	3ff80000 	.word	0x3ff80000
 801452c:	08018568 	.word	0x08018568
 8014530:	080184d6 	.word	0x080184d6
 8014534:	2301      	movs	r3, #1
 8014536:	9309      	str	r3, [sp, #36]	; 0x24
 8014538:	e7d7      	b.n	80144ea <_dtoa_r+0x2c2>
 801453a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801453c:	9301      	str	r3, [sp, #4]
 801453e:	9304      	str	r3, [sp, #16]
 8014540:	e7ba      	b.n	80144b8 <_dtoa_r+0x290>
 8014542:	3101      	adds	r1, #1
 8014544:	0052      	lsls	r2, r2, #1
 8014546:	e7ba      	b.n	80144be <_dtoa_r+0x296>
 8014548:	69e3      	ldr	r3, [r4, #28]
 801454a:	9a00      	ldr	r2, [sp, #0]
 801454c:	601a      	str	r2, [r3, #0]
 801454e:	9b04      	ldr	r3, [sp, #16]
 8014550:	2b0e      	cmp	r3, #14
 8014552:	f200 80a8 	bhi.w	80146a6 <_dtoa_r+0x47e>
 8014556:	2d00      	cmp	r5, #0
 8014558:	f000 80a5 	beq.w	80146a6 <_dtoa_r+0x47e>
 801455c:	f1bb 0f00 	cmp.w	fp, #0
 8014560:	dd38      	ble.n	80145d4 <_dtoa_r+0x3ac>
 8014562:	4bc0      	ldr	r3, [pc, #768]	; (8014864 <_dtoa_r+0x63c>)
 8014564:	f00b 020f 	and.w	r2, fp, #15
 8014568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801456c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014570:	e9d3 6700 	ldrd	r6, r7, [r3]
 8014574:	ea4f 182b 	mov.w	r8, fp, asr #4
 8014578:	d019      	beq.n	80145ae <_dtoa_r+0x386>
 801457a:	4bbb      	ldr	r3, [pc, #748]	; (8014868 <_dtoa_r+0x640>)
 801457c:	ec51 0b18 	vmov	r0, r1, d8
 8014580:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014584:	f7ec f982 	bl	800088c <__aeabi_ddiv>
 8014588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801458c:	f008 080f 	and.w	r8, r8, #15
 8014590:	2503      	movs	r5, #3
 8014592:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8014868 <_dtoa_r+0x640>
 8014596:	f1b8 0f00 	cmp.w	r8, #0
 801459a:	d10a      	bne.n	80145b2 <_dtoa_r+0x38a>
 801459c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145a0:	4632      	mov	r2, r6
 80145a2:	463b      	mov	r3, r7
 80145a4:	f7ec f972 	bl	800088c <__aeabi_ddiv>
 80145a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80145ac:	e02b      	b.n	8014606 <_dtoa_r+0x3de>
 80145ae:	2502      	movs	r5, #2
 80145b0:	e7ef      	b.n	8014592 <_dtoa_r+0x36a>
 80145b2:	f018 0f01 	tst.w	r8, #1
 80145b6:	d008      	beq.n	80145ca <_dtoa_r+0x3a2>
 80145b8:	4630      	mov	r0, r6
 80145ba:	4639      	mov	r1, r7
 80145bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80145c0:	f7ec f83a 	bl	8000638 <__aeabi_dmul>
 80145c4:	3501      	adds	r5, #1
 80145c6:	4606      	mov	r6, r0
 80145c8:	460f      	mov	r7, r1
 80145ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80145ce:	f109 0908 	add.w	r9, r9, #8
 80145d2:	e7e0      	b.n	8014596 <_dtoa_r+0x36e>
 80145d4:	f000 809f 	beq.w	8014716 <_dtoa_r+0x4ee>
 80145d8:	f1cb 0600 	rsb	r6, fp, #0
 80145dc:	4ba1      	ldr	r3, [pc, #644]	; (8014864 <_dtoa_r+0x63c>)
 80145de:	4fa2      	ldr	r7, [pc, #648]	; (8014868 <_dtoa_r+0x640>)
 80145e0:	f006 020f 	and.w	r2, r6, #15
 80145e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80145e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ec:	ec51 0b18 	vmov	r0, r1, d8
 80145f0:	f7ec f822 	bl	8000638 <__aeabi_dmul>
 80145f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80145f8:	1136      	asrs	r6, r6, #4
 80145fa:	2300      	movs	r3, #0
 80145fc:	2502      	movs	r5, #2
 80145fe:	2e00      	cmp	r6, #0
 8014600:	d17e      	bne.n	8014700 <_dtoa_r+0x4d8>
 8014602:	2b00      	cmp	r3, #0
 8014604:	d1d0      	bne.n	80145a8 <_dtoa_r+0x380>
 8014606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014608:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801460c:	2b00      	cmp	r3, #0
 801460e:	f000 8084 	beq.w	801471a <_dtoa_r+0x4f2>
 8014612:	4b96      	ldr	r3, [pc, #600]	; (801486c <_dtoa_r+0x644>)
 8014614:	2200      	movs	r2, #0
 8014616:	4640      	mov	r0, r8
 8014618:	4649      	mov	r1, r9
 801461a:	f7ec fa7f 	bl	8000b1c <__aeabi_dcmplt>
 801461e:	2800      	cmp	r0, #0
 8014620:	d07b      	beq.n	801471a <_dtoa_r+0x4f2>
 8014622:	9b04      	ldr	r3, [sp, #16]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d078      	beq.n	801471a <_dtoa_r+0x4f2>
 8014628:	9b01      	ldr	r3, [sp, #4]
 801462a:	2b00      	cmp	r3, #0
 801462c:	dd39      	ble.n	80146a2 <_dtoa_r+0x47a>
 801462e:	4b90      	ldr	r3, [pc, #576]	; (8014870 <_dtoa_r+0x648>)
 8014630:	2200      	movs	r2, #0
 8014632:	4640      	mov	r0, r8
 8014634:	4649      	mov	r1, r9
 8014636:	f7eb ffff 	bl	8000638 <__aeabi_dmul>
 801463a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801463e:	9e01      	ldr	r6, [sp, #4]
 8014640:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014644:	3501      	adds	r5, #1
 8014646:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801464a:	4628      	mov	r0, r5
 801464c:	f7eb ff8a 	bl	8000564 <__aeabi_i2d>
 8014650:	4642      	mov	r2, r8
 8014652:	464b      	mov	r3, r9
 8014654:	f7eb fff0 	bl	8000638 <__aeabi_dmul>
 8014658:	4b86      	ldr	r3, [pc, #536]	; (8014874 <_dtoa_r+0x64c>)
 801465a:	2200      	movs	r2, #0
 801465c:	f7eb fe36 	bl	80002cc <__adddf3>
 8014660:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014668:	9303      	str	r3, [sp, #12]
 801466a:	2e00      	cmp	r6, #0
 801466c:	d158      	bne.n	8014720 <_dtoa_r+0x4f8>
 801466e:	4b82      	ldr	r3, [pc, #520]	; (8014878 <_dtoa_r+0x650>)
 8014670:	2200      	movs	r2, #0
 8014672:	4640      	mov	r0, r8
 8014674:	4649      	mov	r1, r9
 8014676:	f7eb fe27 	bl	80002c8 <__aeabi_dsub>
 801467a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801467e:	4680      	mov	r8, r0
 8014680:	4689      	mov	r9, r1
 8014682:	f7ec fa69 	bl	8000b58 <__aeabi_dcmpgt>
 8014686:	2800      	cmp	r0, #0
 8014688:	f040 8296 	bne.w	8014bb8 <_dtoa_r+0x990>
 801468c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014690:	4640      	mov	r0, r8
 8014692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014696:	4649      	mov	r1, r9
 8014698:	f7ec fa40 	bl	8000b1c <__aeabi_dcmplt>
 801469c:	2800      	cmp	r0, #0
 801469e:	f040 8289 	bne.w	8014bb4 <_dtoa_r+0x98c>
 80146a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80146a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	f2c0 814e 	blt.w	801494a <_dtoa_r+0x722>
 80146ae:	f1bb 0f0e 	cmp.w	fp, #14
 80146b2:	f300 814a 	bgt.w	801494a <_dtoa_r+0x722>
 80146b6:	4b6b      	ldr	r3, [pc, #428]	; (8014864 <_dtoa_r+0x63c>)
 80146b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80146bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80146c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	f280 80dc 	bge.w	8014880 <_dtoa_r+0x658>
 80146c8:	9b04      	ldr	r3, [sp, #16]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	f300 80d8 	bgt.w	8014880 <_dtoa_r+0x658>
 80146d0:	f040 826f 	bne.w	8014bb2 <_dtoa_r+0x98a>
 80146d4:	4b68      	ldr	r3, [pc, #416]	; (8014878 <_dtoa_r+0x650>)
 80146d6:	2200      	movs	r2, #0
 80146d8:	4640      	mov	r0, r8
 80146da:	4649      	mov	r1, r9
 80146dc:	f7eb ffac 	bl	8000638 <__aeabi_dmul>
 80146e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80146e4:	f7ec fa2e 	bl	8000b44 <__aeabi_dcmpge>
 80146e8:	9e04      	ldr	r6, [sp, #16]
 80146ea:	4637      	mov	r7, r6
 80146ec:	2800      	cmp	r0, #0
 80146ee:	f040 8245 	bne.w	8014b7c <_dtoa_r+0x954>
 80146f2:	9d00      	ldr	r5, [sp, #0]
 80146f4:	2331      	movs	r3, #49	; 0x31
 80146f6:	f805 3b01 	strb.w	r3, [r5], #1
 80146fa:	f10b 0b01 	add.w	fp, fp, #1
 80146fe:	e241      	b.n	8014b84 <_dtoa_r+0x95c>
 8014700:	07f2      	lsls	r2, r6, #31
 8014702:	d505      	bpl.n	8014710 <_dtoa_r+0x4e8>
 8014704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014708:	f7eb ff96 	bl	8000638 <__aeabi_dmul>
 801470c:	3501      	adds	r5, #1
 801470e:	2301      	movs	r3, #1
 8014710:	1076      	asrs	r6, r6, #1
 8014712:	3708      	adds	r7, #8
 8014714:	e773      	b.n	80145fe <_dtoa_r+0x3d6>
 8014716:	2502      	movs	r5, #2
 8014718:	e775      	b.n	8014606 <_dtoa_r+0x3de>
 801471a:	9e04      	ldr	r6, [sp, #16]
 801471c:	465f      	mov	r7, fp
 801471e:	e792      	b.n	8014646 <_dtoa_r+0x41e>
 8014720:	9900      	ldr	r1, [sp, #0]
 8014722:	4b50      	ldr	r3, [pc, #320]	; (8014864 <_dtoa_r+0x63c>)
 8014724:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014728:	4431      	add	r1, r6
 801472a:	9102      	str	r1, [sp, #8]
 801472c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801472e:	eeb0 9a47 	vmov.f32	s18, s14
 8014732:	eef0 9a67 	vmov.f32	s19, s15
 8014736:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801473a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801473e:	2900      	cmp	r1, #0
 8014740:	d044      	beq.n	80147cc <_dtoa_r+0x5a4>
 8014742:	494e      	ldr	r1, [pc, #312]	; (801487c <_dtoa_r+0x654>)
 8014744:	2000      	movs	r0, #0
 8014746:	f7ec f8a1 	bl	800088c <__aeabi_ddiv>
 801474a:	ec53 2b19 	vmov	r2, r3, d9
 801474e:	f7eb fdbb 	bl	80002c8 <__aeabi_dsub>
 8014752:	9d00      	ldr	r5, [sp, #0]
 8014754:	ec41 0b19 	vmov	d9, r0, r1
 8014758:	4649      	mov	r1, r9
 801475a:	4640      	mov	r0, r8
 801475c:	f7ec fa1c 	bl	8000b98 <__aeabi_d2iz>
 8014760:	4606      	mov	r6, r0
 8014762:	f7eb feff 	bl	8000564 <__aeabi_i2d>
 8014766:	4602      	mov	r2, r0
 8014768:	460b      	mov	r3, r1
 801476a:	4640      	mov	r0, r8
 801476c:	4649      	mov	r1, r9
 801476e:	f7eb fdab 	bl	80002c8 <__aeabi_dsub>
 8014772:	3630      	adds	r6, #48	; 0x30
 8014774:	f805 6b01 	strb.w	r6, [r5], #1
 8014778:	ec53 2b19 	vmov	r2, r3, d9
 801477c:	4680      	mov	r8, r0
 801477e:	4689      	mov	r9, r1
 8014780:	f7ec f9cc 	bl	8000b1c <__aeabi_dcmplt>
 8014784:	2800      	cmp	r0, #0
 8014786:	d164      	bne.n	8014852 <_dtoa_r+0x62a>
 8014788:	4642      	mov	r2, r8
 801478a:	464b      	mov	r3, r9
 801478c:	4937      	ldr	r1, [pc, #220]	; (801486c <_dtoa_r+0x644>)
 801478e:	2000      	movs	r0, #0
 8014790:	f7eb fd9a 	bl	80002c8 <__aeabi_dsub>
 8014794:	ec53 2b19 	vmov	r2, r3, d9
 8014798:	f7ec f9c0 	bl	8000b1c <__aeabi_dcmplt>
 801479c:	2800      	cmp	r0, #0
 801479e:	f040 80b6 	bne.w	801490e <_dtoa_r+0x6e6>
 80147a2:	9b02      	ldr	r3, [sp, #8]
 80147a4:	429d      	cmp	r5, r3
 80147a6:	f43f af7c 	beq.w	80146a2 <_dtoa_r+0x47a>
 80147aa:	4b31      	ldr	r3, [pc, #196]	; (8014870 <_dtoa_r+0x648>)
 80147ac:	ec51 0b19 	vmov	r0, r1, d9
 80147b0:	2200      	movs	r2, #0
 80147b2:	f7eb ff41 	bl	8000638 <__aeabi_dmul>
 80147b6:	4b2e      	ldr	r3, [pc, #184]	; (8014870 <_dtoa_r+0x648>)
 80147b8:	ec41 0b19 	vmov	d9, r0, r1
 80147bc:	2200      	movs	r2, #0
 80147be:	4640      	mov	r0, r8
 80147c0:	4649      	mov	r1, r9
 80147c2:	f7eb ff39 	bl	8000638 <__aeabi_dmul>
 80147c6:	4680      	mov	r8, r0
 80147c8:	4689      	mov	r9, r1
 80147ca:	e7c5      	b.n	8014758 <_dtoa_r+0x530>
 80147cc:	ec51 0b17 	vmov	r0, r1, d7
 80147d0:	f7eb ff32 	bl	8000638 <__aeabi_dmul>
 80147d4:	9b02      	ldr	r3, [sp, #8]
 80147d6:	9d00      	ldr	r5, [sp, #0]
 80147d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80147da:	ec41 0b19 	vmov	d9, r0, r1
 80147de:	4649      	mov	r1, r9
 80147e0:	4640      	mov	r0, r8
 80147e2:	f7ec f9d9 	bl	8000b98 <__aeabi_d2iz>
 80147e6:	4606      	mov	r6, r0
 80147e8:	f7eb febc 	bl	8000564 <__aeabi_i2d>
 80147ec:	3630      	adds	r6, #48	; 0x30
 80147ee:	4602      	mov	r2, r0
 80147f0:	460b      	mov	r3, r1
 80147f2:	4640      	mov	r0, r8
 80147f4:	4649      	mov	r1, r9
 80147f6:	f7eb fd67 	bl	80002c8 <__aeabi_dsub>
 80147fa:	f805 6b01 	strb.w	r6, [r5], #1
 80147fe:	9b02      	ldr	r3, [sp, #8]
 8014800:	429d      	cmp	r5, r3
 8014802:	4680      	mov	r8, r0
 8014804:	4689      	mov	r9, r1
 8014806:	f04f 0200 	mov.w	r2, #0
 801480a:	d124      	bne.n	8014856 <_dtoa_r+0x62e>
 801480c:	4b1b      	ldr	r3, [pc, #108]	; (801487c <_dtoa_r+0x654>)
 801480e:	ec51 0b19 	vmov	r0, r1, d9
 8014812:	f7eb fd5b 	bl	80002cc <__adddf3>
 8014816:	4602      	mov	r2, r0
 8014818:	460b      	mov	r3, r1
 801481a:	4640      	mov	r0, r8
 801481c:	4649      	mov	r1, r9
 801481e:	f7ec f99b 	bl	8000b58 <__aeabi_dcmpgt>
 8014822:	2800      	cmp	r0, #0
 8014824:	d173      	bne.n	801490e <_dtoa_r+0x6e6>
 8014826:	ec53 2b19 	vmov	r2, r3, d9
 801482a:	4914      	ldr	r1, [pc, #80]	; (801487c <_dtoa_r+0x654>)
 801482c:	2000      	movs	r0, #0
 801482e:	f7eb fd4b 	bl	80002c8 <__aeabi_dsub>
 8014832:	4602      	mov	r2, r0
 8014834:	460b      	mov	r3, r1
 8014836:	4640      	mov	r0, r8
 8014838:	4649      	mov	r1, r9
 801483a:	f7ec f96f 	bl	8000b1c <__aeabi_dcmplt>
 801483e:	2800      	cmp	r0, #0
 8014840:	f43f af2f 	beq.w	80146a2 <_dtoa_r+0x47a>
 8014844:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014846:	1e6b      	subs	r3, r5, #1
 8014848:	930f      	str	r3, [sp, #60]	; 0x3c
 801484a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801484e:	2b30      	cmp	r3, #48	; 0x30
 8014850:	d0f8      	beq.n	8014844 <_dtoa_r+0x61c>
 8014852:	46bb      	mov	fp, r7
 8014854:	e04a      	b.n	80148ec <_dtoa_r+0x6c4>
 8014856:	4b06      	ldr	r3, [pc, #24]	; (8014870 <_dtoa_r+0x648>)
 8014858:	f7eb feee 	bl	8000638 <__aeabi_dmul>
 801485c:	4680      	mov	r8, r0
 801485e:	4689      	mov	r9, r1
 8014860:	e7bd      	b.n	80147de <_dtoa_r+0x5b6>
 8014862:	bf00      	nop
 8014864:	08018568 	.word	0x08018568
 8014868:	08018540 	.word	0x08018540
 801486c:	3ff00000 	.word	0x3ff00000
 8014870:	40240000 	.word	0x40240000
 8014874:	401c0000 	.word	0x401c0000
 8014878:	40140000 	.word	0x40140000
 801487c:	3fe00000 	.word	0x3fe00000
 8014880:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014884:	9d00      	ldr	r5, [sp, #0]
 8014886:	4642      	mov	r2, r8
 8014888:	464b      	mov	r3, r9
 801488a:	4630      	mov	r0, r6
 801488c:	4639      	mov	r1, r7
 801488e:	f7eb fffd 	bl	800088c <__aeabi_ddiv>
 8014892:	f7ec f981 	bl	8000b98 <__aeabi_d2iz>
 8014896:	9001      	str	r0, [sp, #4]
 8014898:	f7eb fe64 	bl	8000564 <__aeabi_i2d>
 801489c:	4642      	mov	r2, r8
 801489e:	464b      	mov	r3, r9
 80148a0:	f7eb feca 	bl	8000638 <__aeabi_dmul>
 80148a4:	4602      	mov	r2, r0
 80148a6:	460b      	mov	r3, r1
 80148a8:	4630      	mov	r0, r6
 80148aa:	4639      	mov	r1, r7
 80148ac:	f7eb fd0c 	bl	80002c8 <__aeabi_dsub>
 80148b0:	9e01      	ldr	r6, [sp, #4]
 80148b2:	9f04      	ldr	r7, [sp, #16]
 80148b4:	3630      	adds	r6, #48	; 0x30
 80148b6:	f805 6b01 	strb.w	r6, [r5], #1
 80148ba:	9e00      	ldr	r6, [sp, #0]
 80148bc:	1bae      	subs	r6, r5, r6
 80148be:	42b7      	cmp	r7, r6
 80148c0:	4602      	mov	r2, r0
 80148c2:	460b      	mov	r3, r1
 80148c4:	d134      	bne.n	8014930 <_dtoa_r+0x708>
 80148c6:	f7eb fd01 	bl	80002cc <__adddf3>
 80148ca:	4642      	mov	r2, r8
 80148cc:	464b      	mov	r3, r9
 80148ce:	4606      	mov	r6, r0
 80148d0:	460f      	mov	r7, r1
 80148d2:	f7ec f941 	bl	8000b58 <__aeabi_dcmpgt>
 80148d6:	b9c8      	cbnz	r0, 801490c <_dtoa_r+0x6e4>
 80148d8:	4642      	mov	r2, r8
 80148da:	464b      	mov	r3, r9
 80148dc:	4630      	mov	r0, r6
 80148de:	4639      	mov	r1, r7
 80148e0:	f7ec f912 	bl	8000b08 <__aeabi_dcmpeq>
 80148e4:	b110      	cbz	r0, 80148ec <_dtoa_r+0x6c4>
 80148e6:	9b01      	ldr	r3, [sp, #4]
 80148e8:	07db      	lsls	r3, r3, #31
 80148ea:	d40f      	bmi.n	801490c <_dtoa_r+0x6e4>
 80148ec:	4651      	mov	r1, sl
 80148ee:	4620      	mov	r0, r4
 80148f0:	f000 fbcc 	bl	801508c <_Bfree>
 80148f4:	2300      	movs	r3, #0
 80148f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80148f8:	702b      	strb	r3, [r5, #0]
 80148fa:	f10b 0301 	add.w	r3, fp, #1
 80148fe:	6013      	str	r3, [r2, #0]
 8014900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014902:	2b00      	cmp	r3, #0
 8014904:	f43f ace2 	beq.w	80142cc <_dtoa_r+0xa4>
 8014908:	601d      	str	r5, [r3, #0]
 801490a:	e4df      	b.n	80142cc <_dtoa_r+0xa4>
 801490c:	465f      	mov	r7, fp
 801490e:	462b      	mov	r3, r5
 8014910:	461d      	mov	r5, r3
 8014912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014916:	2a39      	cmp	r2, #57	; 0x39
 8014918:	d106      	bne.n	8014928 <_dtoa_r+0x700>
 801491a:	9a00      	ldr	r2, [sp, #0]
 801491c:	429a      	cmp	r2, r3
 801491e:	d1f7      	bne.n	8014910 <_dtoa_r+0x6e8>
 8014920:	9900      	ldr	r1, [sp, #0]
 8014922:	2230      	movs	r2, #48	; 0x30
 8014924:	3701      	adds	r7, #1
 8014926:	700a      	strb	r2, [r1, #0]
 8014928:	781a      	ldrb	r2, [r3, #0]
 801492a:	3201      	adds	r2, #1
 801492c:	701a      	strb	r2, [r3, #0]
 801492e:	e790      	b.n	8014852 <_dtoa_r+0x62a>
 8014930:	4ba3      	ldr	r3, [pc, #652]	; (8014bc0 <_dtoa_r+0x998>)
 8014932:	2200      	movs	r2, #0
 8014934:	f7eb fe80 	bl	8000638 <__aeabi_dmul>
 8014938:	2200      	movs	r2, #0
 801493a:	2300      	movs	r3, #0
 801493c:	4606      	mov	r6, r0
 801493e:	460f      	mov	r7, r1
 8014940:	f7ec f8e2 	bl	8000b08 <__aeabi_dcmpeq>
 8014944:	2800      	cmp	r0, #0
 8014946:	d09e      	beq.n	8014886 <_dtoa_r+0x65e>
 8014948:	e7d0      	b.n	80148ec <_dtoa_r+0x6c4>
 801494a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801494c:	2a00      	cmp	r2, #0
 801494e:	f000 80ca 	beq.w	8014ae6 <_dtoa_r+0x8be>
 8014952:	9a07      	ldr	r2, [sp, #28]
 8014954:	2a01      	cmp	r2, #1
 8014956:	f300 80ad 	bgt.w	8014ab4 <_dtoa_r+0x88c>
 801495a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801495c:	2a00      	cmp	r2, #0
 801495e:	f000 80a5 	beq.w	8014aac <_dtoa_r+0x884>
 8014962:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014966:	9e08      	ldr	r6, [sp, #32]
 8014968:	9d05      	ldr	r5, [sp, #20]
 801496a:	9a05      	ldr	r2, [sp, #20]
 801496c:	441a      	add	r2, r3
 801496e:	9205      	str	r2, [sp, #20]
 8014970:	9a06      	ldr	r2, [sp, #24]
 8014972:	2101      	movs	r1, #1
 8014974:	441a      	add	r2, r3
 8014976:	4620      	mov	r0, r4
 8014978:	9206      	str	r2, [sp, #24]
 801497a:	f000 fc3d 	bl	80151f8 <__i2b>
 801497e:	4607      	mov	r7, r0
 8014980:	b165      	cbz	r5, 801499c <_dtoa_r+0x774>
 8014982:	9b06      	ldr	r3, [sp, #24]
 8014984:	2b00      	cmp	r3, #0
 8014986:	dd09      	ble.n	801499c <_dtoa_r+0x774>
 8014988:	42ab      	cmp	r3, r5
 801498a:	9a05      	ldr	r2, [sp, #20]
 801498c:	bfa8      	it	ge
 801498e:	462b      	movge	r3, r5
 8014990:	1ad2      	subs	r2, r2, r3
 8014992:	9205      	str	r2, [sp, #20]
 8014994:	9a06      	ldr	r2, [sp, #24]
 8014996:	1aed      	subs	r5, r5, r3
 8014998:	1ad3      	subs	r3, r2, r3
 801499a:	9306      	str	r3, [sp, #24]
 801499c:	9b08      	ldr	r3, [sp, #32]
 801499e:	b1f3      	cbz	r3, 80149de <_dtoa_r+0x7b6>
 80149a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	f000 80a3 	beq.w	8014aee <_dtoa_r+0x8c6>
 80149a8:	2e00      	cmp	r6, #0
 80149aa:	dd10      	ble.n	80149ce <_dtoa_r+0x7a6>
 80149ac:	4639      	mov	r1, r7
 80149ae:	4632      	mov	r2, r6
 80149b0:	4620      	mov	r0, r4
 80149b2:	f000 fce1 	bl	8015378 <__pow5mult>
 80149b6:	4652      	mov	r2, sl
 80149b8:	4601      	mov	r1, r0
 80149ba:	4607      	mov	r7, r0
 80149bc:	4620      	mov	r0, r4
 80149be:	f000 fc31 	bl	8015224 <__multiply>
 80149c2:	4651      	mov	r1, sl
 80149c4:	4680      	mov	r8, r0
 80149c6:	4620      	mov	r0, r4
 80149c8:	f000 fb60 	bl	801508c <_Bfree>
 80149cc:	46c2      	mov	sl, r8
 80149ce:	9b08      	ldr	r3, [sp, #32]
 80149d0:	1b9a      	subs	r2, r3, r6
 80149d2:	d004      	beq.n	80149de <_dtoa_r+0x7b6>
 80149d4:	4651      	mov	r1, sl
 80149d6:	4620      	mov	r0, r4
 80149d8:	f000 fcce 	bl	8015378 <__pow5mult>
 80149dc:	4682      	mov	sl, r0
 80149de:	2101      	movs	r1, #1
 80149e0:	4620      	mov	r0, r4
 80149e2:	f000 fc09 	bl	80151f8 <__i2b>
 80149e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	4606      	mov	r6, r0
 80149ec:	f340 8081 	ble.w	8014af2 <_dtoa_r+0x8ca>
 80149f0:	461a      	mov	r2, r3
 80149f2:	4601      	mov	r1, r0
 80149f4:	4620      	mov	r0, r4
 80149f6:	f000 fcbf 	bl	8015378 <__pow5mult>
 80149fa:	9b07      	ldr	r3, [sp, #28]
 80149fc:	2b01      	cmp	r3, #1
 80149fe:	4606      	mov	r6, r0
 8014a00:	dd7a      	ble.n	8014af8 <_dtoa_r+0x8d0>
 8014a02:	f04f 0800 	mov.w	r8, #0
 8014a06:	6933      	ldr	r3, [r6, #16]
 8014a08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014a0c:	6918      	ldr	r0, [r3, #16]
 8014a0e:	f000 fba5 	bl	801515c <__hi0bits>
 8014a12:	f1c0 0020 	rsb	r0, r0, #32
 8014a16:	9b06      	ldr	r3, [sp, #24]
 8014a18:	4418      	add	r0, r3
 8014a1a:	f010 001f 	ands.w	r0, r0, #31
 8014a1e:	f000 8094 	beq.w	8014b4a <_dtoa_r+0x922>
 8014a22:	f1c0 0320 	rsb	r3, r0, #32
 8014a26:	2b04      	cmp	r3, #4
 8014a28:	f340 8085 	ble.w	8014b36 <_dtoa_r+0x90e>
 8014a2c:	9b05      	ldr	r3, [sp, #20]
 8014a2e:	f1c0 001c 	rsb	r0, r0, #28
 8014a32:	4403      	add	r3, r0
 8014a34:	9305      	str	r3, [sp, #20]
 8014a36:	9b06      	ldr	r3, [sp, #24]
 8014a38:	4403      	add	r3, r0
 8014a3a:	4405      	add	r5, r0
 8014a3c:	9306      	str	r3, [sp, #24]
 8014a3e:	9b05      	ldr	r3, [sp, #20]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	dd05      	ble.n	8014a50 <_dtoa_r+0x828>
 8014a44:	4651      	mov	r1, sl
 8014a46:	461a      	mov	r2, r3
 8014a48:	4620      	mov	r0, r4
 8014a4a:	f000 fcef 	bl	801542c <__lshift>
 8014a4e:	4682      	mov	sl, r0
 8014a50:	9b06      	ldr	r3, [sp, #24]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	dd05      	ble.n	8014a62 <_dtoa_r+0x83a>
 8014a56:	4631      	mov	r1, r6
 8014a58:	461a      	mov	r2, r3
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	f000 fce6 	bl	801542c <__lshift>
 8014a60:	4606      	mov	r6, r0
 8014a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d072      	beq.n	8014b4e <_dtoa_r+0x926>
 8014a68:	4631      	mov	r1, r6
 8014a6a:	4650      	mov	r0, sl
 8014a6c:	f000 fd4a 	bl	8015504 <__mcmp>
 8014a70:	2800      	cmp	r0, #0
 8014a72:	da6c      	bge.n	8014b4e <_dtoa_r+0x926>
 8014a74:	2300      	movs	r3, #0
 8014a76:	4651      	mov	r1, sl
 8014a78:	220a      	movs	r2, #10
 8014a7a:	4620      	mov	r0, r4
 8014a7c:	f000 fb28 	bl	80150d0 <__multadd>
 8014a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014a86:	4682      	mov	sl, r0
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	f000 81b0 	beq.w	8014dee <_dtoa_r+0xbc6>
 8014a8e:	2300      	movs	r3, #0
 8014a90:	4639      	mov	r1, r7
 8014a92:	220a      	movs	r2, #10
 8014a94:	4620      	mov	r0, r4
 8014a96:	f000 fb1b 	bl	80150d0 <__multadd>
 8014a9a:	9b01      	ldr	r3, [sp, #4]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	4607      	mov	r7, r0
 8014aa0:	f300 8096 	bgt.w	8014bd0 <_dtoa_r+0x9a8>
 8014aa4:	9b07      	ldr	r3, [sp, #28]
 8014aa6:	2b02      	cmp	r3, #2
 8014aa8:	dc59      	bgt.n	8014b5e <_dtoa_r+0x936>
 8014aaa:	e091      	b.n	8014bd0 <_dtoa_r+0x9a8>
 8014aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014aae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014ab2:	e758      	b.n	8014966 <_dtoa_r+0x73e>
 8014ab4:	9b04      	ldr	r3, [sp, #16]
 8014ab6:	1e5e      	subs	r6, r3, #1
 8014ab8:	9b08      	ldr	r3, [sp, #32]
 8014aba:	42b3      	cmp	r3, r6
 8014abc:	bfbf      	itttt	lt
 8014abe:	9b08      	ldrlt	r3, [sp, #32]
 8014ac0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8014ac2:	9608      	strlt	r6, [sp, #32]
 8014ac4:	1af3      	sublt	r3, r6, r3
 8014ac6:	bfb4      	ite	lt
 8014ac8:	18d2      	addlt	r2, r2, r3
 8014aca:	1b9e      	subge	r6, r3, r6
 8014acc:	9b04      	ldr	r3, [sp, #16]
 8014ace:	bfbc      	itt	lt
 8014ad0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8014ad2:	2600      	movlt	r6, #0
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	bfb7      	itett	lt
 8014ad8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8014adc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8014ae0:	1a9d      	sublt	r5, r3, r2
 8014ae2:	2300      	movlt	r3, #0
 8014ae4:	e741      	b.n	801496a <_dtoa_r+0x742>
 8014ae6:	9e08      	ldr	r6, [sp, #32]
 8014ae8:	9d05      	ldr	r5, [sp, #20]
 8014aea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014aec:	e748      	b.n	8014980 <_dtoa_r+0x758>
 8014aee:	9a08      	ldr	r2, [sp, #32]
 8014af0:	e770      	b.n	80149d4 <_dtoa_r+0x7ac>
 8014af2:	9b07      	ldr	r3, [sp, #28]
 8014af4:	2b01      	cmp	r3, #1
 8014af6:	dc19      	bgt.n	8014b2c <_dtoa_r+0x904>
 8014af8:	9b02      	ldr	r3, [sp, #8]
 8014afa:	b9bb      	cbnz	r3, 8014b2c <_dtoa_r+0x904>
 8014afc:	9b03      	ldr	r3, [sp, #12]
 8014afe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014b02:	b99b      	cbnz	r3, 8014b2c <_dtoa_r+0x904>
 8014b04:	9b03      	ldr	r3, [sp, #12]
 8014b06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b0a:	0d1b      	lsrs	r3, r3, #20
 8014b0c:	051b      	lsls	r3, r3, #20
 8014b0e:	b183      	cbz	r3, 8014b32 <_dtoa_r+0x90a>
 8014b10:	9b05      	ldr	r3, [sp, #20]
 8014b12:	3301      	adds	r3, #1
 8014b14:	9305      	str	r3, [sp, #20]
 8014b16:	9b06      	ldr	r3, [sp, #24]
 8014b18:	3301      	adds	r3, #1
 8014b1a:	9306      	str	r3, [sp, #24]
 8014b1c:	f04f 0801 	mov.w	r8, #1
 8014b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	f47f af6f 	bne.w	8014a06 <_dtoa_r+0x7de>
 8014b28:	2001      	movs	r0, #1
 8014b2a:	e774      	b.n	8014a16 <_dtoa_r+0x7ee>
 8014b2c:	f04f 0800 	mov.w	r8, #0
 8014b30:	e7f6      	b.n	8014b20 <_dtoa_r+0x8f8>
 8014b32:	4698      	mov	r8, r3
 8014b34:	e7f4      	b.n	8014b20 <_dtoa_r+0x8f8>
 8014b36:	d082      	beq.n	8014a3e <_dtoa_r+0x816>
 8014b38:	9a05      	ldr	r2, [sp, #20]
 8014b3a:	331c      	adds	r3, #28
 8014b3c:	441a      	add	r2, r3
 8014b3e:	9205      	str	r2, [sp, #20]
 8014b40:	9a06      	ldr	r2, [sp, #24]
 8014b42:	441a      	add	r2, r3
 8014b44:	441d      	add	r5, r3
 8014b46:	9206      	str	r2, [sp, #24]
 8014b48:	e779      	b.n	8014a3e <_dtoa_r+0x816>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	e7f4      	b.n	8014b38 <_dtoa_r+0x910>
 8014b4e:	9b04      	ldr	r3, [sp, #16]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	dc37      	bgt.n	8014bc4 <_dtoa_r+0x99c>
 8014b54:	9b07      	ldr	r3, [sp, #28]
 8014b56:	2b02      	cmp	r3, #2
 8014b58:	dd34      	ble.n	8014bc4 <_dtoa_r+0x99c>
 8014b5a:	9b04      	ldr	r3, [sp, #16]
 8014b5c:	9301      	str	r3, [sp, #4]
 8014b5e:	9b01      	ldr	r3, [sp, #4]
 8014b60:	b963      	cbnz	r3, 8014b7c <_dtoa_r+0x954>
 8014b62:	4631      	mov	r1, r6
 8014b64:	2205      	movs	r2, #5
 8014b66:	4620      	mov	r0, r4
 8014b68:	f000 fab2 	bl	80150d0 <__multadd>
 8014b6c:	4601      	mov	r1, r0
 8014b6e:	4606      	mov	r6, r0
 8014b70:	4650      	mov	r0, sl
 8014b72:	f000 fcc7 	bl	8015504 <__mcmp>
 8014b76:	2800      	cmp	r0, #0
 8014b78:	f73f adbb 	bgt.w	80146f2 <_dtoa_r+0x4ca>
 8014b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b7e:	9d00      	ldr	r5, [sp, #0]
 8014b80:	ea6f 0b03 	mvn.w	fp, r3
 8014b84:	f04f 0800 	mov.w	r8, #0
 8014b88:	4631      	mov	r1, r6
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	f000 fa7e 	bl	801508c <_Bfree>
 8014b90:	2f00      	cmp	r7, #0
 8014b92:	f43f aeab 	beq.w	80148ec <_dtoa_r+0x6c4>
 8014b96:	f1b8 0f00 	cmp.w	r8, #0
 8014b9a:	d005      	beq.n	8014ba8 <_dtoa_r+0x980>
 8014b9c:	45b8      	cmp	r8, r7
 8014b9e:	d003      	beq.n	8014ba8 <_dtoa_r+0x980>
 8014ba0:	4641      	mov	r1, r8
 8014ba2:	4620      	mov	r0, r4
 8014ba4:	f000 fa72 	bl	801508c <_Bfree>
 8014ba8:	4639      	mov	r1, r7
 8014baa:	4620      	mov	r0, r4
 8014bac:	f000 fa6e 	bl	801508c <_Bfree>
 8014bb0:	e69c      	b.n	80148ec <_dtoa_r+0x6c4>
 8014bb2:	2600      	movs	r6, #0
 8014bb4:	4637      	mov	r7, r6
 8014bb6:	e7e1      	b.n	8014b7c <_dtoa_r+0x954>
 8014bb8:	46bb      	mov	fp, r7
 8014bba:	4637      	mov	r7, r6
 8014bbc:	e599      	b.n	80146f2 <_dtoa_r+0x4ca>
 8014bbe:	bf00      	nop
 8014bc0:	40240000 	.word	0x40240000
 8014bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	f000 80c8 	beq.w	8014d5c <_dtoa_r+0xb34>
 8014bcc:	9b04      	ldr	r3, [sp, #16]
 8014bce:	9301      	str	r3, [sp, #4]
 8014bd0:	2d00      	cmp	r5, #0
 8014bd2:	dd05      	ble.n	8014be0 <_dtoa_r+0x9b8>
 8014bd4:	4639      	mov	r1, r7
 8014bd6:	462a      	mov	r2, r5
 8014bd8:	4620      	mov	r0, r4
 8014bda:	f000 fc27 	bl	801542c <__lshift>
 8014bde:	4607      	mov	r7, r0
 8014be0:	f1b8 0f00 	cmp.w	r8, #0
 8014be4:	d05b      	beq.n	8014c9e <_dtoa_r+0xa76>
 8014be6:	6879      	ldr	r1, [r7, #4]
 8014be8:	4620      	mov	r0, r4
 8014bea:	f000 fa0f 	bl	801500c <_Balloc>
 8014bee:	4605      	mov	r5, r0
 8014bf0:	b928      	cbnz	r0, 8014bfe <_dtoa_r+0x9d6>
 8014bf2:	4b83      	ldr	r3, [pc, #524]	; (8014e00 <_dtoa_r+0xbd8>)
 8014bf4:	4602      	mov	r2, r0
 8014bf6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8014bfa:	f7ff bb2e 	b.w	801425a <_dtoa_r+0x32>
 8014bfe:	693a      	ldr	r2, [r7, #16]
 8014c00:	3202      	adds	r2, #2
 8014c02:	0092      	lsls	r2, r2, #2
 8014c04:	f107 010c 	add.w	r1, r7, #12
 8014c08:	300c      	adds	r0, #12
 8014c0a:	f7ff fa77 	bl	80140fc <memcpy>
 8014c0e:	2201      	movs	r2, #1
 8014c10:	4629      	mov	r1, r5
 8014c12:	4620      	mov	r0, r4
 8014c14:	f000 fc0a 	bl	801542c <__lshift>
 8014c18:	9b00      	ldr	r3, [sp, #0]
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	9304      	str	r3, [sp, #16]
 8014c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c22:	4413      	add	r3, r2
 8014c24:	9308      	str	r3, [sp, #32]
 8014c26:	9b02      	ldr	r3, [sp, #8]
 8014c28:	f003 0301 	and.w	r3, r3, #1
 8014c2c:	46b8      	mov	r8, r7
 8014c2e:	9306      	str	r3, [sp, #24]
 8014c30:	4607      	mov	r7, r0
 8014c32:	9b04      	ldr	r3, [sp, #16]
 8014c34:	4631      	mov	r1, r6
 8014c36:	3b01      	subs	r3, #1
 8014c38:	4650      	mov	r0, sl
 8014c3a:	9301      	str	r3, [sp, #4]
 8014c3c:	f7ff fa6c 	bl	8014118 <quorem>
 8014c40:	4641      	mov	r1, r8
 8014c42:	9002      	str	r0, [sp, #8]
 8014c44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014c48:	4650      	mov	r0, sl
 8014c4a:	f000 fc5b 	bl	8015504 <__mcmp>
 8014c4e:	463a      	mov	r2, r7
 8014c50:	9005      	str	r0, [sp, #20]
 8014c52:	4631      	mov	r1, r6
 8014c54:	4620      	mov	r0, r4
 8014c56:	f000 fc71 	bl	801553c <__mdiff>
 8014c5a:	68c2      	ldr	r2, [r0, #12]
 8014c5c:	4605      	mov	r5, r0
 8014c5e:	bb02      	cbnz	r2, 8014ca2 <_dtoa_r+0xa7a>
 8014c60:	4601      	mov	r1, r0
 8014c62:	4650      	mov	r0, sl
 8014c64:	f000 fc4e 	bl	8015504 <__mcmp>
 8014c68:	4602      	mov	r2, r0
 8014c6a:	4629      	mov	r1, r5
 8014c6c:	4620      	mov	r0, r4
 8014c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8014c70:	f000 fa0c 	bl	801508c <_Bfree>
 8014c74:	9b07      	ldr	r3, [sp, #28]
 8014c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c78:	9d04      	ldr	r5, [sp, #16]
 8014c7a:	ea43 0102 	orr.w	r1, r3, r2
 8014c7e:	9b06      	ldr	r3, [sp, #24]
 8014c80:	4319      	orrs	r1, r3
 8014c82:	d110      	bne.n	8014ca6 <_dtoa_r+0xa7e>
 8014c84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014c88:	d029      	beq.n	8014cde <_dtoa_r+0xab6>
 8014c8a:	9b05      	ldr	r3, [sp, #20]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	dd02      	ble.n	8014c96 <_dtoa_r+0xa6e>
 8014c90:	9b02      	ldr	r3, [sp, #8]
 8014c92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8014c96:	9b01      	ldr	r3, [sp, #4]
 8014c98:	f883 9000 	strb.w	r9, [r3]
 8014c9c:	e774      	b.n	8014b88 <_dtoa_r+0x960>
 8014c9e:	4638      	mov	r0, r7
 8014ca0:	e7ba      	b.n	8014c18 <_dtoa_r+0x9f0>
 8014ca2:	2201      	movs	r2, #1
 8014ca4:	e7e1      	b.n	8014c6a <_dtoa_r+0xa42>
 8014ca6:	9b05      	ldr	r3, [sp, #20]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	db04      	blt.n	8014cb6 <_dtoa_r+0xa8e>
 8014cac:	9907      	ldr	r1, [sp, #28]
 8014cae:	430b      	orrs	r3, r1
 8014cb0:	9906      	ldr	r1, [sp, #24]
 8014cb2:	430b      	orrs	r3, r1
 8014cb4:	d120      	bne.n	8014cf8 <_dtoa_r+0xad0>
 8014cb6:	2a00      	cmp	r2, #0
 8014cb8:	dded      	ble.n	8014c96 <_dtoa_r+0xa6e>
 8014cba:	4651      	mov	r1, sl
 8014cbc:	2201      	movs	r2, #1
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	f000 fbb4 	bl	801542c <__lshift>
 8014cc4:	4631      	mov	r1, r6
 8014cc6:	4682      	mov	sl, r0
 8014cc8:	f000 fc1c 	bl	8015504 <__mcmp>
 8014ccc:	2800      	cmp	r0, #0
 8014cce:	dc03      	bgt.n	8014cd8 <_dtoa_r+0xab0>
 8014cd0:	d1e1      	bne.n	8014c96 <_dtoa_r+0xa6e>
 8014cd2:	f019 0f01 	tst.w	r9, #1
 8014cd6:	d0de      	beq.n	8014c96 <_dtoa_r+0xa6e>
 8014cd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014cdc:	d1d8      	bne.n	8014c90 <_dtoa_r+0xa68>
 8014cde:	9a01      	ldr	r2, [sp, #4]
 8014ce0:	2339      	movs	r3, #57	; 0x39
 8014ce2:	7013      	strb	r3, [r2, #0]
 8014ce4:	462b      	mov	r3, r5
 8014ce6:	461d      	mov	r5, r3
 8014ce8:	3b01      	subs	r3, #1
 8014cea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014cee:	2a39      	cmp	r2, #57	; 0x39
 8014cf0:	d06c      	beq.n	8014dcc <_dtoa_r+0xba4>
 8014cf2:	3201      	adds	r2, #1
 8014cf4:	701a      	strb	r2, [r3, #0]
 8014cf6:	e747      	b.n	8014b88 <_dtoa_r+0x960>
 8014cf8:	2a00      	cmp	r2, #0
 8014cfa:	dd07      	ble.n	8014d0c <_dtoa_r+0xae4>
 8014cfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014d00:	d0ed      	beq.n	8014cde <_dtoa_r+0xab6>
 8014d02:	9a01      	ldr	r2, [sp, #4]
 8014d04:	f109 0301 	add.w	r3, r9, #1
 8014d08:	7013      	strb	r3, [r2, #0]
 8014d0a:	e73d      	b.n	8014b88 <_dtoa_r+0x960>
 8014d0c:	9b04      	ldr	r3, [sp, #16]
 8014d0e:	9a08      	ldr	r2, [sp, #32]
 8014d10:	f803 9c01 	strb.w	r9, [r3, #-1]
 8014d14:	4293      	cmp	r3, r2
 8014d16:	d043      	beq.n	8014da0 <_dtoa_r+0xb78>
 8014d18:	4651      	mov	r1, sl
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	220a      	movs	r2, #10
 8014d1e:	4620      	mov	r0, r4
 8014d20:	f000 f9d6 	bl	80150d0 <__multadd>
 8014d24:	45b8      	cmp	r8, r7
 8014d26:	4682      	mov	sl, r0
 8014d28:	f04f 0300 	mov.w	r3, #0
 8014d2c:	f04f 020a 	mov.w	r2, #10
 8014d30:	4641      	mov	r1, r8
 8014d32:	4620      	mov	r0, r4
 8014d34:	d107      	bne.n	8014d46 <_dtoa_r+0xb1e>
 8014d36:	f000 f9cb 	bl	80150d0 <__multadd>
 8014d3a:	4680      	mov	r8, r0
 8014d3c:	4607      	mov	r7, r0
 8014d3e:	9b04      	ldr	r3, [sp, #16]
 8014d40:	3301      	adds	r3, #1
 8014d42:	9304      	str	r3, [sp, #16]
 8014d44:	e775      	b.n	8014c32 <_dtoa_r+0xa0a>
 8014d46:	f000 f9c3 	bl	80150d0 <__multadd>
 8014d4a:	4639      	mov	r1, r7
 8014d4c:	4680      	mov	r8, r0
 8014d4e:	2300      	movs	r3, #0
 8014d50:	220a      	movs	r2, #10
 8014d52:	4620      	mov	r0, r4
 8014d54:	f000 f9bc 	bl	80150d0 <__multadd>
 8014d58:	4607      	mov	r7, r0
 8014d5a:	e7f0      	b.n	8014d3e <_dtoa_r+0xb16>
 8014d5c:	9b04      	ldr	r3, [sp, #16]
 8014d5e:	9301      	str	r3, [sp, #4]
 8014d60:	9d00      	ldr	r5, [sp, #0]
 8014d62:	4631      	mov	r1, r6
 8014d64:	4650      	mov	r0, sl
 8014d66:	f7ff f9d7 	bl	8014118 <quorem>
 8014d6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014d6e:	9b00      	ldr	r3, [sp, #0]
 8014d70:	f805 9b01 	strb.w	r9, [r5], #1
 8014d74:	1aea      	subs	r2, r5, r3
 8014d76:	9b01      	ldr	r3, [sp, #4]
 8014d78:	4293      	cmp	r3, r2
 8014d7a:	dd07      	ble.n	8014d8c <_dtoa_r+0xb64>
 8014d7c:	4651      	mov	r1, sl
 8014d7e:	2300      	movs	r3, #0
 8014d80:	220a      	movs	r2, #10
 8014d82:	4620      	mov	r0, r4
 8014d84:	f000 f9a4 	bl	80150d0 <__multadd>
 8014d88:	4682      	mov	sl, r0
 8014d8a:	e7ea      	b.n	8014d62 <_dtoa_r+0xb3a>
 8014d8c:	9b01      	ldr	r3, [sp, #4]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	bfc8      	it	gt
 8014d92:	461d      	movgt	r5, r3
 8014d94:	9b00      	ldr	r3, [sp, #0]
 8014d96:	bfd8      	it	le
 8014d98:	2501      	movle	r5, #1
 8014d9a:	441d      	add	r5, r3
 8014d9c:	f04f 0800 	mov.w	r8, #0
 8014da0:	4651      	mov	r1, sl
 8014da2:	2201      	movs	r2, #1
 8014da4:	4620      	mov	r0, r4
 8014da6:	f000 fb41 	bl	801542c <__lshift>
 8014daa:	4631      	mov	r1, r6
 8014dac:	4682      	mov	sl, r0
 8014dae:	f000 fba9 	bl	8015504 <__mcmp>
 8014db2:	2800      	cmp	r0, #0
 8014db4:	dc96      	bgt.n	8014ce4 <_dtoa_r+0xabc>
 8014db6:	d102      	bne.n	8014dbe <_dtoa_r+0xb96>
 8014db8:	f019 0f01 	tst.w	r9, #1
 8014dbc:	d192      	bne.n	8014ce4 <_dtoa_r+0xabc>
 8014dbe:	462b      	mov	r3, r5
 8014dc0:	461d      	mov	r5, r3
 8014dc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014dc6:	2a30      	cmp	r2, #48	; 0x30
 8014dc8:	d0fa      	beq.n	8014dc0 <_dtoa_r+0xb98>
 8014dca:	e6dd      	b.n	8014b88 <_dtoa_r+0x960>
 8014dcc:	9a00      	ldr	r2, [sp, #0]
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	d189      	bne.n	8014ce6 <_dtoa_r+0xabe>
 8014dd2:	f10b 0b01 	add.w	fp, fp, #1
 8014dd6:	2331      	movs	r3, #49	; 0x31
 8014dd8:	e796      	b.n	8014d08 <_dtoa_r+0xae0>
 8014dda:	4b0a      	ldr	r3, [pc, #40]	; (8014e04 <_dtoa_r+0xbdc>)
 8014ddc:	f7ff ba99 	b.w	8014312 <_dtoa_r+0xea>
 8014de0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	f47f aa6d 	bne.w	80142c2 <_dtoa_r+0x9a>
 8014de8:	4b07      	ldr	r3, [pc, #28]	; (8014e08 <_dtoa_r+0xbe0>)
 8014dea:	f7ff ba92 	b.w	8014312 <_dtoa_r+0xea>
 8014dee:	9b01      	ldr	r3, [sp, #4]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	dcb5      	bgt.n	8014d60 <_dtoa_r+0xb38>
 8014df4:	9b07      	ldr	r3, [sp, #28]
 8014df6:	2b02      	cmp	r3, #2
 8014df8:	f73f aeb1 	bgt.w	8014b5e <_dtoa_r+0x936>
 8014dfc:	e7b0      	b.n	8014d60 <_dtoa_r+0xb38>
 8014dfe:	bf00      	nop
 8014e00:	080184d6 	.word	0x080184d6
 8014e04:	08018436 	.word	0x08018436
 8014e08:	0801845a 	.word	0x0801845a

08014e0c <_free_r>:
 8014e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e0e:	2900      	cmp	r1, #0
 8014e10:	d044      	beq.n	8014e9c <_free_r+0x90>
 8014e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e16:	9001      	str	r0, [sp, #4]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8014e1e:	bfb8      	it	lt
 8014e20:	18e4      	addlt	r4, r4, r3
 8014e22:	f000 f8e7 	bl	8014ff4 <__malloc_lock>
 8014e26:	4a1e      	ldr	r2, [pc, #120]	; (8014ea0 <_free_r+0x94>)
 8014e28:	9801      	ldr	r0, [sp, #4]
 8014e2a:	6813      	ldr	r3, [r2, #0]
 8014e2c:	b933      	cbnz	r3, 8014e3c <_free_r+0x30>
 8014e2e:	6063      	str	r3, [r4, #4]
 8014e30:	6014      	str	r4, [r2, #0]
 8014e32:	b003      	add	sp, #12
 8014e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e38:	f000 b8e2 	b.w	8015000 <__malloc_unlock>
 8014e3c:	42a3      	cmp	r3, r4
 8014e3e:	d908      	bls.n	8014e52 <_free_r+0x46>
 8014e40:	6825      	ldr	r5, [r4, #0]
 8014e42:	1961      	adds	r1, r4, r5
 8014e44:	428b      	cmp	r3, r1
 8014e46:	bf01      	itttt	eq
 8014e48:	6819      	ldreq	r1, [r3, #0]
 8014e4a:	685b      	ldreq	r3, [r3, #4]
 8014e4c:	1949      	addeq	r1, r1, r5
 8014e4e:	6021      	streq	r1, [r4, #0]
 8014e50:	e7ed      	b.n	8014e2e <_free_r+0x22>
 8014e52:	461a      	mov	r2, r3
 8014e54:	685b      	ldr	r3, [r3, #4]
 8014e56:	b10b      	cbz	r3, 8014e5c <_free_r+0x50>
 8014e58:	42a3      	cmp	r3, r4
 8014e5a:	d9fa      	bls.n	8014e52 <_free_r+0x46>
 8014e5c:	6811      	ldr	r1, [r2, #0]
 8014e5e:	1855      	adds	r5, r2, r1
 8014e60:	42a5      	cmp	r5, r4
 8014e62:	d10b      	bne.n	8014e7c <_free_r+0x70>
 8014e64:	6824      	ldr	r4, [r4, #0]
 8014e66:	4421      	add	r1, r4
 8014e68:	1854      	adds	r4, r2, r1
 8014e6a:	42a3      	cmp	r3, r4
 8014e6c:	6011      	str	r1, [r2, #0]
 8014e6e:	d1e0      	bne.n	8014e32 <_free_r+0x26>
 8014e70:	681c      	ldr	r4, [r3, #0]
 8014e72:	685b      	ldr	r3, [r3, #4]
 8014e74:	6053      	str	r3, [r2, #4]
 8014e76:	440c      	add	r4, r1
 8014e78:	6014      	str	r4, [r2, #0]
 8014e7a:	e7da      	b.n	8014e32 <_free_r+0x26>
 8014e7c:	d902      	bls.n	8014e84 <_free_r+0x78>
 8014e7e:	230c      	movs	r3, #12
 8014e80:	6003      	str	r3, [r0, #0]
 8014e82:	e7d6      	b.n	8014e32 <_free_r+0x26>
 8014e84:	6825      	ldr	r5, [r4, #0]
 8014e86:	1961      	adds	r1, r4, r5
 8014e88:	428b      	cmp	r3, r1
 8014e8a:	bf04      	itt	eq
 8014e8c:	6819      	ldreq	r1, [r3, #0]
 8014e8e:	685b      	ldreq	r3, [r3, #4]
 8014e90:	6063      	str	r3, [r4, #4]
 8014e92:	bf04      	itt	eq
 8014e94:	1949      	addeq	r1, r1, r5
 8014e96:	6021      	streq	r1, [r4, #0]
 8014e98:	6054      	str	r4, [r2, #4]
 8014e9a:	e7ca      	b.n	8014e32 <_free_r+0x26>
 8014e9c:	b003      	add	sp, #12
 8014e9e:	bd30      	pop	{r4, r5, pc}
 8014ea0:	20009fa4 	.word	0x20009fa4

08014ea4 <malloc>:
 8014ea4:	4b02      	ldr	r3, [pc, #8]	; (8014eb0 <malloc+0xc>)
 8014ea6:	4601      	mov	r1, r0
 8014ea8:	6818      	ldr	r0, [r3, #0]
 8014eaa:	f000 b823 	b.w	8014ef4 <_malloc_r>
 8014eae:	bf00      	nop
 8014eb0:	20000094 	.word	0x20000094

08014eb4 <sbrk_aligned>:
 8014eb4:	b570      	push	{r4, r5, r6, lr}
 8014eb6:	4e0e      	ldr	r6, [pc, #56]	; (8014ef0 <sbrk_aligned+0x3c>)
 8014eb8:	460c      	mov	r4, r1
 8014eba:	6831      	ldr	r1, [r6, #0]
 8014ebc:	4605      	mov	r5, r0
 8014ebe:	b911      	cbnz	r1, 8014ec6 <sbrk_aligned+0x12>
 8014ec0:	f000 fe40 	bl	8015b44 <_sbrk_r>
 8014ec4:	6030      	str	r0, [r6, #0]
 8014ec6:	4621      	mov	r1, r4
 8014ec8:	4628      	mov	r0, r5
 8014eca:	f000 fe3b 	bl	8015b44 <_sbrk_r>
 8014ece:	1c43      	adds	r3, r0, #1
 8014ed0:	d00a      	beq.n	8014ee8 <sbrk_aligned+0x34>
 8014ed2:	1cc4      	adds	r4, r0, #3
 8014ed4:	f024 0403 	bic.w	r4, r4, #3
 8014ed8:	42a0      	cmp	r0, r4
 8014eda:	d007      	beq.n	8014eec <sbrk_aligned+0x38>
 8014edc:	1a21      	subs	r1, r4, r0
 8014ede:	4628      	mov	r0, r5
 8014ee0:	f000 fe30 	bl	8015b44 <_sbrk_r>
 8014ee4:	3001      	adds	r0, #1
 8014ee6:	d101      	bne.n	8014eec <sbrk_aligned+0x38>
 8014ee8:	f04f 34ff 	mov.w	r4, #4294967295
 8014eec:	4620      	mov	r0, r4
 8014eee:	bd70      	pop	{r4, r5, r6, pc}
 8014ef0:	20009fa8 	.word	0x20009fa8

08014ef4 <_malloc_r>:
 8014ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ef8:	1ccd      	adds	r5, r1, #3
 8014efa:	f025 0503 	bic.w	r5, r5, #3
 8014efe:	3508      	adds	r5, #8
 8014f00:	2d0c      	cmp	r5, #12
 8014f02:	bf38      	it	cc
 8014f04:	250c      	movcc	r5, #12
 8014f06:	2d00      	cmp	r5, #0
 8014f08:	4607      	mov	r7, r0
 8014f0a:	db01      	blt.n	8014f10 <_malloc_r+0x1c>
 8014f0c:	42a9      	cmp	r1, r5
 8014f0e:	d905      	bls.n	8014f1c <_malloc_r+0x28>
 8014f10:	230c      	movs	r3, #12
 8014f12:	603b      	str	r3, [r7, #0]
 8014f14:	2600      	movs	r6, #0
 8014f16:	4630      	mov	r0, r6
 8014f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014ff0 <_malloc_r+0xfc>
 8014f20:	f000 f868 	bl	8014ff4 <__malloc_lock>
 8014f24:	f8d8 3000 	ldr.w	r3, [r8]
 8014f28:	461c      	mov	r4, r3
 8014f2a:	bb5c      	cbnz	r4, 8014f84 <_malloc_r+0x90>
 8014f2c:	4629      	mov	r1, r5
 8014f2e:	4638      	mov	r0, r7
 8014f30:	f7ff ffc0 	bl	8014eb4 <sbrk_aligned>
 8014f34:	1c43      	adds	r3, r0, #1
 8014f36:	4604      	mov	r4, r0
 8014f38:	d155      	bne.n	8014fe6 <_malloc_r+0xf2>
 8014f3a:	f8d8 4000 	ldr.w	r4, [r8]
 8014f3e:	4626      	mov	r6, r4
 8014f40:	2e00      	cmp	r6, #0
 8014f42:	d145      	bne.n	8014fd0 <_malloc_r+0xdc>
 8014f44:	2c00      	cmp	r4, #0
 8014f46:	d048      	beq.n	8014fda <_malloc_r+0xe6>
 8014f48:	6823      	ldr	r3, [r4, #0]
 8014f4a:	4631      	mov	r1, r6
 8014f4c:	4638      	mov	r0, r7
 8014f4e:	eb04 0903 	add.w	r9, r4, r3
 8014f52:	f000 fdf7 	bl	8015b44 <_sbrk_r>
 8014f56:	4581      	cmp	r9, r0
 8014f58:	d13f      	bne.n	8014fda <_malloc_r+0xe6>
 8014f5a:	6821      	ldr	r1, [r4, #0]
 8014f5c:	1a6d      	subs	r5, r5, r1
 8014f5e:	4629      	mov	r1, r5
 8014f60:	4638      	mov	r0, r7
 8014f62:	f7ff ffa7 	bl	8014eb4 <sbrk_aligned>
 8014f66:	3001      	adds	r0, #1
 8014f68:	d037      	beq.n	8014fda <_malloc_r+0xe6>
 8014f6a:	6823      	ldr	r3, [r4, #0]
 8014f6c:	442b      	add	r3, r5
 8014f6e:	6023      	str	r3, [r4, #0]
 8014f70:	f8d8 3000 	ldr.w	r3, [r8]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d038      	beq.n	8014fea <_malloc_r+0xf6>
 8014f78:	685a      	ldr	r2, [r3, #4]
 8014f7a:	42a2      	cmp	r2, r4
 8014f7c:	d12b      	bne.n	8014fd6 <_malloc_r+0xe2>
 8014f7e:	2200      	movs	r2, #0
 8014f80:	605a      	str	r2, [r3, #4]
 8014f82:	e00f      	b.n	8014fa4 <_malloc_r+0xb0>
 8014f84:	6822      	ldr	r2, [r4, #0]
 8014f86:	1b52      	subs	r2, r2, r5
 8014f88:	d41f      	bmi.n	8014fca <_malloc_r+0xd6>
 8014f8a:	2a0b      	cmp	r2, #11
 8014f8c:	d917      	bls.n	8014fbe <_malloc_r+0xca>
 8014f8e:	1961      	adds	r1, r4, r5
 8014f90:	42a3      	cmp	r3, r4
 8014f92:	6025      	str	r5, [r4, #0]
 8014f94:	bf18      	it	ne
 8014f96:	6059      	strne	r1, [r3, #4]
 8014f98:	6863      	ldr	r3, [r4, #4]
 8014f9a:	bf08      	it	eq
 8014f9c:	f8c8 1000 	streq.w	r1, [r8]
 8014fa0:	5162      	str	r2, [r4, r5]
 8014fa2:	604b      	str	r3, [r1, #4]
 8014fa4:	4638      	mov	r0, r7
 8014fa6:	f104 060b 	add.w	r6, r4, #11
 8014faa:	f000 f829 	bl	8015000 <__malloc_unlock>
 8014fae:	f026 0607 	bic.w	r6, r6, #7
 8014fb2:	1d23      	adds	r3, r4, #4
 8014fb4:	1af2      	subs	r2, r6, r3
 8014fb6:	d0ae      	beq.n	8014f16 <_malloc_r+0x22>
 8014fb8:	1b9b      	subs	r3, r3, r6
 8014fba:	50a3      	str	r3, [r4, r2]
 8014fbc:	e7ab      	b.n	8014f16 <_malloc_r+0x22>
 8014fbe:	42a3      	cmp	r3, r4
 8014fc0:	6862      	ldr	r2, [r4, #4]
 8014fc2:	d1dd      	bne.n	8014f80 <_malloc_r+0x8c>
 8014fc4:	f8c8 2000 	str.w	r2, [r8]
 8014fc8:	e7ec      	b.n	8014fa4 <_malloc_r+0xb0>
 8014fca:	4623      	mov	r3, r4
 8014fcc:	6864      	ldr	r4, [r4, #4]
 8014fce:	e7ac      	b.n	8014f2a <_malloc_r+0x36>
 8014fd0:	4634      	mov	r4, r6
 8014fd2:	6876      	ldr	r6, [r6, #4]
 8014fd4:	e7b4      	b.n	8014f40 <_malloc_r+0x4c>
 8014fd6:	4613      	mov	r3, r2
 8014fd8:	e7cc      	b.n	8014f74 <_malloc_r+0x80>
 8014fda:	230c      	movs	r3, #12
 8014fdc:	603b      	str	r3, [r7, #0]
 8014fde:	4638      	mov	r0, r7
 8014fe0:	f000 f80e 	bl	8015000 <__malloc_unlock>
 8014fe4:	e797      	b.n	8014f16 <_malloc_r+0x22>
 8014fe6:	6025      	str	r5, [r4, #0]
 8014fe8:	e7dc      	b.n	8014fa4 <_malloc_r+0xb0>
 8014fea:	605b      	str	r3, [r3, #4]
 8014fec:	deff      	udf	#255	; 0xff
 8014fee:	bf00      	nop
 8014ff0:	20009fa4 	.word	0x20009fa4

08014ff4 <__malloc_lock>:
 8014ff4:	4801      	ldr	r0, [pc, #4]	; (8014ffc <__malloc_lock+0x8>)
 8014ff6:	f7ff b87f 	b.w	80140f8 <__retarget_lock_acquire_recursive>
 8014ffa:	bf00      	nop
 8014ffc:	20009fa0 	.word	0x20009fa0

08015000 <__malloc_unlock>:
 8015000:	4801      	ldr	r0, [pc, #4]	; (8015008 <__malloc_unlock+0x8>)
 8015002:	f7ff b87a 	b.w	80140fa <__retarget_lock_release_recursive>
 8015006:	bf00      	nop
 8015008:	20009fa0 	.word	0x20009fa0

0801500c <_Balloc>:
 801500c:	b570      	push	{r4, r5, r6, lr}
 801500e:	69c6      	ldr	r6, [r0, #28]
 8015010:	4604      	mov	r4, r0
 8015012:	460d      	mov	r5, r1
 8015014:	b976      	cbnz	r6, 8015034 <_Balloc+0x28>
 8015016:	2010      	movs	r0, #16
 8015018:	f7ff ff44 	bl	8014ea4 <malloc>
 801501c:	4602      	mov	r2, r0
 801501e:	61e0      	str	r0, [r4, #28]
 8015020:	b920      	cbnz	r0, 801502c <_Balloc+0x20>
 8015022:	4b18      	ldr	r3, [pc, #96]	; (8015084 <_Balloc+0x78>)
 8015024:	4818      	ldr	r0, [pc, #96]	; (8015088 <_Balloc+0x7c>)
 8015026:	216b      	movs	r1, #107	; 0x6b
 8015028:	f000 fd9c 	bl	8015b64 <__assert_func>
 801502c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015030:	6006      	str	r6, [r0, #0]
 8015032:	60c6      	str	r6, [r0, #12]
 8015034:	69e6      	ldr	r6, [r4, #28]
 8015036:	68f3      	ldr	r3, [r6, #12]
 8015038:	b183      	cbz	r3, 801505c <_Balloc+0x50>
 801503a:	69e3      	ldr	r3, [r4, #28]
 801503c:	68db      	ldr	r3, [r3, #12]
 801503e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015042:	b9b8      	cbnz	r0, 8015074 <_Balloc+0x68>
 8015044:	2101      	movs	r1, #1
 8015046:	fa01 f605 	lsl.w	r6, r1, r5
 801504a:	1d72      	adds	r2, r6, #5
 801504c:	0092      	lsls	r2, r2, #2
 801504e:	4620      	mov	r0, r4
 8015050:	f000 fda6 	bl	8015ba0 <_calloc_r>
 8015054:	b160      	cbz	r0, 8015070 <_Balloc+0x64>
 8015056:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801505a:	e00e      	b.n	801507a <_Balloc+0x6e>
 801505c:	2221      	movs	r2, #33	; 0x21
 801505e:	2104      	movs	r1, #4
 8015060:	4620      	mov	r0, r4
 8015062:	f000 fd9d 	bl	8015ba0 <_calloc_r>
 8015066:	69e3      	ldr	r3, [r4, #28]
 8015068:	60f0      	str	r0, [r6, #12]
 801506a:	68db      	ldr	r3, [r3, #12]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d1e4      	bne.n	801503a <_Balloc+0x2e>
 8015070:	2000      	movs	r0, #0
 8015072:	bd70      	pop	{r4, r5, r6, pc}
 8015074:	6802      	ldr	r2, [r0, #0]
 8015076:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801507a:	2300      	movs	r3, #0
 801507c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015080:	e7f7      	b.n	8015072 <_Balloc+0x66>
 8015082:	bf00      	nop
 8015084:	08018467 	.word	0x08018467
 8015088:	080184e7 	.word	0x080184e7

0801508c <_Bfree>:
 801508c:	b570      	push	{r4, r5, r6, lr}
 801508e:	69c6      	ldr	r6, [r0, #28]
 8015090:	4605      	mov	r5, r0
 8015092:	460c      	mov	r4, r1
 8015094:	b976      	cbnz	r6, 80150b4 <_Bfree+0x28>
 8015096:	2010      	movs	r0, #16
 8015098:	f7ff ff04 	bl	8014ea4 <malloc>
 801509c:	4602      	mov	r2, r0
 801509e:	61e8      	str	r0, [r5, #28]
 80150a0:	b920      	cbnz	r0, 80150ac <_Bfree+0x20>
 80150a2:	4b09      	ldr	r3, [pc, #36]	; (80150c8 <_Bfree+0x3c>)
 80150a4:	4809      	ldr	r0, [pc, #36]	; (80150cc <_Bfree+0x40>)
 80150a6:	218f      	movs	r1, #143	; 0x8f
 80150a8:	f000 fd5c 	bl	8015b64 <__assert_func>
 80150ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80150b0:	6006      	str	r6, [r0, #0]
 80150b2:	60c6      	str	r6, [r0, #12]
 80150b4:	b13c      	cbz	r4, 80150c6 <_Bfree+0x3a>
 80150b6:	69eb      	ldr	r3, [r5, #28]
 80150b8:	6862      	ldr	r2, [r4, #4]
 80150ba:	68db      	ldr	r3, [r3, #12]
 80150bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80150c0:	6021      	str	r1, [r4, #0]
 80150c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80150c6:	bd70      	pop	{r4, r5, r6, pc}
 80150c8:	08018467 	.word	0x08018467
 80150cc:	080184e7 	.word	0x080184e7

080150d0 <__multadd>:
 80150d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150d4:	690d      	ldr	r5, [r1, #16]
 80150d6:	4607      	mov	r7, r0
 80150d8:	460c      	mov	r4, r1
 80150da:	461e      	mov	r6, r3
 80150dc:	f101 0c14 	add.w	ip, r1, #20
 80150e0:	2000      	movs	r0, #0
 80150e2:	f8dc 3000 	ldr.w	r3, [ip]
 80150e6:	b299      	uxth	r1, r3
 80150e8:	fb02 6101 	mla	r1, r2, r1, r6
 80150ec:	0c1e      	lsrs	r6, r3, #16
 80150ee:	0c0b      	lsrs	r3, r1, #16
 80150f0:	fb02 3306 	mla	r3, r2, r6, r3
 80150f4:	b289      	uxth	r1, r1
 80150f6:	3001      	adds	r0, #1
 80150f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80150fc:	4285      	cmp	r5, r0
 80150fe:	f84c 1b04 	str.w	r1, [ip], #4
 8015102:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015106:	dcec      	bgt.n	80150e2 <__multadd+0x12>
 8015108:	b30e      	cbz	r6, 801514e <__multadd+0x7e>
 801510a:	68a3      	ldr	r3, [r4, #8]
 801510c:	42ab      	cmp	r3, r5
 801510e:	dc19      	bgt.n	8015144 <__multadd+0x74>
 8015110:	6861      	ldr	r1, [r4, #4]
 8015112:	4638      	mov	r0, r7
 8015114:	3101      	adds	r1, #1
 8015116:	f7ff ff79 	bl	801500c <_Balloc>
 801511a:	4680      	mov	r8, r0
 801511c:	b928      	cbnz	r0, 801512a <__multadd+0x5a>
 801511e:	4602      	mov	r2, r0
 8015120:	4b0c      	ldr	r3, [pc, #48]	; (8015154 <__multadd+0x84>)
 8015122:	480d      	ldr	r0, [pc, #52]	; (8015158 <__multadd+0x88>)
 8015124:	21ba      	movs	r1, #186	; 0xba
 8015126:	f000 fd1d 	bl	8015b64 <__assert_func>
 801512a:	6922      	ldr	r2, [r4, #16]
 801512c:	3202      	adds	r2, #2
 801512e:	f104 010c 	add.w	r1, r4, #12
 8015132:	0092      	lsls	r2, r2, #2
 8015134:	300c      	adds	r0, #12
 8015136:	f7fe ffe1 	bl	80140fc <memcpy>
 801513a:	4621      	mov	r1, r4
 801513c:	4638      	mov	r0, r7
 801513e:	f7ff ffa5 	bl	801508c <_Bfree>
 8015142:	4644      	mov	r4, r8
 8015144:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015148:	3501      	adds	r5, #1
 801514a:	615e      	str	r6, [r3, #20]
 801514c:	6125      	str	r5, [r4, #16]
 801514e:	4620      	mov	r0, r4
 8015150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015154:	080184d6 	.word	0x080184d6
 8015158:	080184e7 	.word	0x080184e7

0801515c <__hi0bits>:
 801515c:	0c03      	lsrs	r3, r0, #16
 801515e:	041b      	lsls	r3, r3, #16
 8015160:	b9d3      	cbnz	r3, 8015198 <__hi0bits+0x3c>
 8015162:	0400      	lsls	r0, r0, #16
 8015164:	2310      	movs	r3, #16
 8015166:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801516a:	bf04      	itt	eq
 801516c:	0200      	lsleq	r0, r0, #8
 801516e:	3308      	addeq	r3, #8
 8015170:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015174:	bf04      	itt	eq
 8015176:	0100      	lsleq	r0, r0, #4
 8015178:	3304      	addeq	r3, #4
 801517a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801517e:	bf04      	itt	eq
 8015180:	0080      	lsleq	r0, r0, #2
 8015182:	3302      	addeq	r3, #2
 8015184:	2800      	cmp	r0, #0
 8015186:	db05      	blt.n	8015194 <__hi0bits+0x38>
 8015188:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801518c:	f103 0301 	add.w	r3, r3, #1
 8015190:	bf08      	it	eq
 8015192:	2320      	moveq	r3, #32
 8015194:	4618      	mov	r0, r3
 8015196:	4770      	bx	lr
 8015198:	2300      	movs	r3, #0
 801519a:	e7e4      	b.n	8015166 <__hi0bits+0xa>

0801519c <__lo0bits>:
 801519c:	6803      	ldr	r3, [r0, #0]
 801519e:	f013 0207 	ands.w	r2, r3, #7
 80151a2:	d00c      	beq.n	80151be <__lo0bits+0x22>
 80151a4:	07d9      	lsls	r1, r3, #31
 80151a6:	d422      	bmi.n	80151ee <__lo0bits+0x52>
 80151a8:	079a      	lsls	r2, r3, #30
 80151aa:	bf49      	itett	mi
 80151ac:	085b      	lsrmi	r3, r3, #1
 80151ae:	089b      	lsrpl	r3, r3, #2
 80151b0:	6003      	strmi	r3, [r0, #0]
 80151b2:	2201      	movmi	r2, #1
 80151b4:	bf5c      	itt	pl
 80151b6:	6003      	strpl	r3, [r0, #0]
 80151b8:	2202      	movpl	r2, #2
 80151ba:	4610      	mov	r0, r2
 80151bc:	4770      	bx	lr
 80151be:	b299      	uxth	r1, r3
 80151c0:	b909      	cbnz	r1, 80151c6 <__lo0bits+0x2a>
 80151c2:	0c1b      	lsrs	r3, r3, #16
 80151c4:	2210      	movs	r2, #16
 80151c6:	b2d9      	uxtb	r1, r3
 80151c8:	b909      	cbnz	r1, 80151ce <__lo0bits+0x32>
 80151ca:	3208      	adds	r2, #8
 80151cc:	0a1b      	lsrs	r3, r3, #8
 80151ce:	0719      	lsls	r1, r3, #28
 80151d0:	bf04      	itt	eq
 80151d2:	091b      	lsreq	r3, r3, #4
 80151d4:	3204      	addeq	r2, #4
 80151d6:	0799      	lsls	r1, r3, #30
 80151d8:	bf04      	itt	eq
 80151da:	089b      	lsreq	r3, r3, #2
 80151dc:	3202      	addeq	r2, #2
 80151de:	07d9      	lsls	r1, r3, #31
 80151e0:	d403      	bmi.n	80151ea <__lo0bits+0x4e>
 80151e2:	085b      	lsrs	r3, r3, #1
 80151e4:	f102 0201 	add.w	r2, r2, #1
 80151e8:	d003      	beq.n	80151f2 <__lo0bits+0x56>
 80151ea:	6003      	str	r3, [r0, #0]
 80151ec:	e7e5      	b.n	80151ba <__lo0bits+0x1e>
 80151ee:	2200      	movs	r2, #0
 80151f0:	e7e3      	b.n	80151ba <__lo0bits+0x1e>
 80151f2:	2220      	movs	r2, #32
 80151f4:	e7e1      	b.n	80151ba <__lo0bits+0x1e>
	...

080151f8 <__i2b>:
 80151f8:	b510      	push	{r4, lr}
 80151fa:	460c      	mov	r4, r1
 80151fc:	2101      	movs	r1, #1
 80151fe:	f7ff ff05 	bl	801500c <_Balloc>
 8015202:	4602      	mov	r2, r0
 8015204:	b928      	cbnz	r0, 8015212 <__i2b+0x1a>
 8015206:	4b05      	ldr	r3, [pc, #20]	; (801521c <__i2b+0x24>)
 8015208:	4805      	ldr	r0, [pc, #20]	; (8015220 <__i2b+0x28>)
 801520a:	f240 1145 	movw	r1, #325	; 0x145
 801520e:	f000 fca9 	bl	8015b64 <__assert_func>
 8015212:	2301      	movs	r3, #1
 8015214:	6144      	str	r4, [r0, #20]
 8015216:	6103      	str	r3, [r0, #16]
 8015218:	bd10      	pop	{r4, pc}
 801521a:	bf00      	nop
 801521c:	080184d6 	.word	0x080184d6
 8015220:	080184e7 	.word	0x080184e7

08015224 <__multiply>:
 8015224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015228:	4691      	mov	r9, r2
 801522a:	690a      	ldr	r2, [r1, #16]
 801522c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015230:	429a      	cmp	r2, r3
 8015232:	bfb8      	it	lt
 8015234:	460b      	movlt	r3, r1
 8015236:	460c      	mov	r4, r1
 8015238:	bfbc      	itt	lt
 801523a:	464c      	movlt	r4, r9
 801523c:	4699      	movlt	r9, r3
 801523e:	6927      	ldr	r7, [r4, #16]
 8015240:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015244:	68a3      	ldr	r3, [r4, #8]
 8015246:	6861      	ldr	r1, [r4, #4]
 8015248:	eb07 060a 	add.w	r6, r7, sl
 801524c:	42b3      	cmp	r3, r6
 801524e:	b085      	sub	sp, #20
 8015250:	bfb8      	it	lt
 8015252:	3101      	addlt	r1, #1
 8015254:	f7ff feda 	bl	801500c <_Balloc>
 8015258:	b930      	cbnz	r0, 8015268 <__multiply+0x44>
 801525a:	4602      	mov	r2, r0
 801525c:	4b44      	ldr	r3, [pc, #272]	; (8015370 <__multiply+0x14c>)
 801525e:	4845      	ldr	r0, [pc, #276]	; (8015374 <__multiply+0x150>)
 8015260:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015264:	f000 fc7e 	bl	8015b64 <__assert_func>
 8015268:	f100 0514 	add.w	r5, r0, #20
 801526c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015270:	462b      	mov	r3, r5
 8015272:	2200      	movs	r2, #0
 8015274:	4543      	cmp	r3, r8
 8015276:	d321      	bcc.n	80152bc <__multiply+0x98>
 8015278:	f104 0314 	add.w	r3, r4, #20
 801527c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015280:	f109 0314 	add.w	r3, r9, #20
 8015284:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015288:	9202      	str	r2, [sp, #8]
 801528a:	1b3a      	subs	r2, r7, r4
 801528c:	3a15      	subs	r2, #21
 801528e:	f022 0203 	bic.w	r2, r2, #3
 8015292:	3204      	adds	r2, #4
 8015294:	f104 0115 	add.w	r1, r4, #21
 8015298:	428f      	cmp	r7, r1
 801529a:	bf38      	it	cc
 801529c:	2204      	movcc	r2, #4
 801529e:	9201      	str	r2, [sp, #4]
 80152a0:	9a02      	ldr	r2, [sp, #8]
 80152a2:	9303      	str	r3, [sp, #12]
 80152a4:	429a      	cmp	r2, r3
 80152a6:	d80c      	bhi.n	80152c2 <__multiply+0x9e>
 80152a8:	2e00      	cmp	r6, #0
 80152aa:	dd03      	ble.n	80152b4 <__multiply+0x90>
 80152ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d05b      	beq.n	801536c <__multiply+0x148>
 80152b4:	6106      	str	r6, [r0, #16]
 80152b6:	b005      	add	sp, #20
 80152b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152bc:	f843 2b04 	str.w	r2, [r3], #4
 80152c0:	e7d8      	b.n	8015274 <__multiply+0x50>
 80152c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80152c6:	f1ba 0f00 	cmp.w	sl, #0
 80152ca:	d024      	beq.n	8015316 <__multiply+0xf2>
 80152cc:	f104 0e14 	add.w	lr, r4, #20
 80152d0:	46a9      	mov	r9, r5
 80152d2:	f04f 0c00 	mov.w	ip, #0
 80152d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80152da:	f8d9 1000 	ldr.w	r1, [r9]
 80152de:	fa1f fb82 	uxth.w	fp, r2
 80152e2:	b289      	uxth	r1, r1
 80152e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80152e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80152ec:	f8d9 2000 	ldr.w	r2, [r9]
 80152f0:	4461      	add	r1, ip
 80152f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80152f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80152fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80152fe:	b289      	uxth	r1, r1
 8015300:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015304:	4577      	cmp	r7, lr
 8015306:	f849 1b04 	str.w	r1, [r9], #4
 801530a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801530e:	d8e2      	bhi.n	80152d6 <__multiply+0xb2>
 8015310:	9a01      	ldr	r2, [sp, #4]
 8015312:	f845 c002 	str.w	ip, [r5, r2]
 8015316:	9a03      	ldr	r2, [sp, #12]
 8015318:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801531c:	3304      	adds	r3, #4
 801531e:	f1b9 0f00 	cmp.w	r9, #0
 8015322:	d021      	beq.n	8015368 <__multiply+0x144>
 8015324:	6829      	ldr	r1, [r5, #0]
 8015326:	f104 0c14 	add.w	ip, r4, #20
 801532a:	46ae      	mov	lr, r5
 801532c:	f04f 0a00 	mov.w	sl, #0
 8015330:	f8bc b000 	ldrh.w	fp, [ip]
 8015334:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015338:	fb09 220b 	mla	r2, r9, fp, r2
 801533c:	4452      	add	r2, sl
 801533e:	b289      	uxth	r1, r1
 8015340:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015344:	f84e 1b04 	str.w	r1, [lr], #4
 8015348:	f85c 1b04 	ldr.w	r1, [ip], #4
 801534c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015350:	f8be 1000 	ldrh.w	r1, [lr]
 8015354:	fb09 110a 	mla	r1, r9, sl, r1
 8015358:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801535c:	4567      	cmp	r7, ip
 801535e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015362:	d8e5      	bhi.n	8015330 <__multiply+0x10c>
 8015364:	9a01      	ldr	r2, [sp, #4]
 8015366:	50a9      	str	r1, [r5, r2]
 8015368:	3504      	adds	r5, #4
 801536a:	e799      	b.n	80152a0 <__multiply+0x7c>
 801536c:	3e01      	subs	r6, #1
 801536e:	e79b      	b.n	80152a8 <__multiply+0x84>
 8015370:	080184d6 	.word	0x080184d6
 8015374:	080184e7 	.word	0x080184e7

08015378 <__pow5mult>:
 8015378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801537c:	4615      	mov	r5, r2
 801537e:	f012 0203 	ands.w	r2, r2, #3
 8015382:	4606      	mov	r6, r0
 8015384:	460f      	mov	r7, r1
 8015386:	d007      	beq.n	8015398 <__pow5mult+0x20>
 8015388:	4c25      	ldr	r4, [pc, #148]	; (8015420 <__pow5mult+0xa8>)
 801538a:	3a01      	subs	r2, #1
 801538c:	2300      	movs	r3, #0
 801538e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015392:	f7ff fe9d 	bl	80150d0 <__multadd>
 8015396:	4607      	mov	r7, r0
 8015398:	10ad      	asrs	r5, r5, #2
 801539a:	d03d      	beq.n	8015418 <__pow5mult+0xa0>
 801539c:	69f4      	ldr	r4, [r6, #28]
 801539e:	b97c      	cbnz	r4, 80153c0 <__pow5mult+0x48>
 80153a0:	2010      	movs	r0, #16
 80153a2:	f7ff fd7f 	bl	8014ea4 <malloc>
 80153a6:	4602      	mov	r2, r0
 80153a8:	61f0      	str	r0, [r6, #28]
 80153aa:	b928      	cbnz	r0, 80153b8 <__pow5mult+0x40>
 80153ac:	4b1d      	ldr	r3, [pc, #116]	; (8015424 <__pow5mult+0xac>)
 80153ae:	481e      	ldr	r0, [pc, #120]	; (8015428 <__pow5mult+0xb0>)
 80153b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80153b4:	f000 fbd6 	bl	8015b64 <__assert_func>
 80153b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80153bc:	6004      	str	r4, [r0, #0]
 80153be:	60c4      	str	r4, [r0, #12]
 80153c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80153c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80153c8:	b94c      	cbnz	r4, 80153de <__pow5mult+0x66>
 80153ca:	f240 2171 	movw	r1, #625	; 0x271
 80153ce:	4630      	mov	r0, r6
 80153d0:	f7ff ff12 	bl	80151f8 <__i2b>
 80153d4:	2300      	movs	r3, #0
 80153d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80153da:	4604      	mov	r4, r0
 80153dc:	6003      	str	r3, [r0, #0]
 80153de:	f04f 0900 	mov.w	r9, #0
 80153e2:	07eb      	lsls	r3, r5, #31
 80153e4:	d50a      	bpl.n	80153fc <__pow5mult+0x84>
 80153e6:	4639      	mov	r1, r7
 80153e8:	4622      	mov	r2, r4
 80153ea:	4630      	mov	r0, r6
 80153ec:	f7ff ff1a 	bl	8015224 <__multiply>
 80153f0:	4639      	mov	r1, r7
 80153f2:	4680      	mov	r8, r0
 80153f4:	4630      	mov	r0, r6
 80153f6:	f7ff fe49 	bl	801508c <_Bfree>
 80153fa:	4647      	mov	r7, r8
 80153fc:	106d      	asrs	r5, r5, #1
 80153fe:	d00b      	beq.n	8015418 <__pow5mult+0xa0>
 8015400:	6820      	ldr	r0, [r4, #0]
 8015402:	b938      	cbnz	r0, 8015414 <__pow5mult+0x9c>
 8015404:	4622      	mov	r2, r4
 8015406:	4621      	mov	r1, r4
 8015408:	4630      	mov	r0, r6
 801540a:	f7ff ff0b 	bl	8015224 <__multiply>
 801540e:	6020      	str	r0, [r4, #0]
 8015410:	f8c0 9000 	str.w	r9, [r0]
 8015414:	4604      	mov	r4, r0
 8015416:	e7e4      	b.n	80153e2 <__pow5mult+0x6a>
 8015418:	4638      	mov	r0, r7
 801541a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801541e:	bf00      	nop
 8015420:	08018630 	.word	0x08018630
 8015424:	08018467 	.word	0x08018467
 8015428:	080184e7 	.word	0x080184e7

0801542c <__lshift>:
 801542c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015430:	460c      	mov	r4, r1
 8015432:	6849      	ldr	r1, [r1, #4]
 8015434:	6923      	ldr	r3, [r4, #16]
 8015436:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801543a:	68a3      	ldr	r3, [r4, #8]
 801543c:	4607      	mov	r7, r0
 801543e:	4691      	mov	r9, r2
 8015440:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015444:	f108 0601 	add.w	r6, r8, #1
 8015448:	42b3      	cmp	r3, r6
 801544a:	db0b      	blt.n	8015464 <__lshift+0x38>
 801544c:	4638      	mov	r0, r7
 801544e:	f7ff fddd 	bl	801500c <_Balloc>
 8015452:	4605      	mov	r5, r0
 8015454:	b948      	cbnz	r0, 801546a <__lshift+0x3e>
 8015456:	4602      	mov	r2, r0
 8015458:	4b28      	ldr	r3, [pc, #160]	; (80154fc <__lshift+0xd0>)
 801545a:	4829      	ldr	r0, [pc, #164]	; (8015500 <__lshift+0xd4>)
 801545c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015460:	f000 fb80 	bl	8015b64 <__assert_func>
 8015464:	3101      	adds	r1, #1
 8015466:	005b      	lsls	r3, r3, #1
 8015468:	e7ee      	b.n	8015448 <__lshift+0x1c>
 801546a:	2300      	movs	r3, #0
 801546c:	f100 0114 	add.w	r1, r0, #20
 8015470:	f100 0210 	add.w	r2, r0, #16
 8015474:	4618      	mov	r0, r3
 8015476:	4553      	cmp	r3, sl
 8015478:	db33      	blt.n	80154e2 <__lshift+0xb6>
 801547a:	6920      	ldr	r0, [r4, #16]
 801547c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015480:	f104 0314 	add.w	r3, r4, #20
 8015484:	f019 091f 	ands.w	r9, r9, #31
 8015488:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801548c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015490:	d02b      	beq.n	80154ea <__lshift+0xbe>
 8015492:	f1c9 0e20 	rsb	lr, r9, #32
 8015496:	468a      	mov	sl, r1
 8015498:	2200      	movs	r2, #0
 801549a:	6818      	ldr	r0, [r3, #0]
 801549c:	fa00 f009 	lsl.w	r0, r0, r9
 80154a0:	4310      	orrs	r0, r2
 80154a2:	f84a 0b04 	str.w	r0, [sl], #4
 80154a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80154aa:	459c      	cmp	ip, r3
 80154ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80154b0:	d8f3      	bhi.n	801549a <__lshift+0x6e>
 80154b2:	ebac 0304 	sub.w	r3, ip, r4
 80154b6:	3b15      	subs	r3, #21
 80154b8:	f023 0303 	bic.w	r3, r3, #3
 80154bc:	3304      	adds	r3, #4
 80154be:	f104 0015 	add.w	r0, r4, #21
 80154c2:	4584      	cmp	ip, r0
 80154c4:	bf38      	it	cc
 80154c6:	2304      	movcc	r3, #4
 80154c8:	50ca      	str	r2, [r1, r3]
 80154ca:	b10a      	cbz	r2, 80154d0 <__lshift+0xa4>
 80154cc:	f108 0602 	add.w	r6, r8, #2
 80154d0:	3e01      	subs	r6, #1
 80154d2:	4638      	mov	r0, r7
 80154d4:	612e      	str	r6, [r5, #16]
 80154d6:	4621      	mov	r1, r4
 80154d8:	f7ff fdd8 	bl	801508c <_Bfree>
 80154dc:	4628      	mov	r0, r5
 80154de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80154e6:	3301      	adds	r3, #1
 80154e8:	e7c5      	b.n	8015476 <__lshift+0x4a>
 80154ea:	3904      	subs	r1, #4
 80154ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80154f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80154f4:	459c      	cmp	ip, r3
 80154f6:	d8f9      	bhi.n	80154ec <__lshift+0xc0>
 80154f8:	e7ea      	b.n	80154d0 <__lshift+0xa4>
 80154fa:	bf00      	nop
 80154fc:	080184d6 	.word	0x080184d6
 8015500:	080184e7 	.word	0x080184e7

08015504 <__mcmp>:
 8015504:	b530      	push	{r4, r5, lr}
 8015506:	6902      	ldr	r2, [r0, #16]
 8015508:	690c      	ldr	r4, [r1, #16]
 801550a:	1b12      	subs	r2, r2, r4
 801550c:	d10e      	bne.n	801552c <__mcmp+0x28>
 801550e:	f100 0314 	add.w	r3, r0, #20
 8015512:	3114      	adds	r1, #20
 8015514:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015518:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801551c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015520:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015524:	42a5      	cmp	r5, r4
 8015526:	d003      	beq.n	8015530 <__mcmp+0x2c>
 8015528:	d305      	bcc.n	8015536 <__mcmp+0x32>
 801552a:	2201      	movs	r2, #1
 801552c:	4610      	mov	r0, r2
 801552e:	bd30      	pop	{r4, r5, pc}
 8015530:	4283      	cmp	r3, r0
 8015532:	d3f3      	bcc.n	801551c <__mcmp+0x18>
 8015534:	e7fa      	b.n	801552c <__mcmp+0x28>
 8015536:	f04f 32ff 	mov.w	r2, #4294967295
 801553a:	e7f7      	b.n	801552c <__mcmp+0x28>

0801553c <__mdiff>:
 801553c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015540:	460c      	mov	r4, r1
 8015542:	4606      	mov	r6, r0
 8015544:	4611      	mov	r1, r2
 8015546:	4620      	mov	r0, r4
 8015548:	4690      	mov	r8, r2
 801554a:	f7ff ffdb 	bl	8015504 <__mcmp>
 801554e:	1e05      	subs	r5, r0, #0
 8015550:	d110      	bne.n	8015574 <__mdiff+0x38>
 8015552:	4629      	mov	r1, r5
 8015554:	4630      	mov	r0, r6
 8015556:	f7ff fd59 	bl	801500c <_Balloc>
 801555a:	b930      	cbnz	r0, 801556a <__mdiff+0x2e>
 801555c:	4b3a      	ldr	r3, [pc, #232]	; (8015648 <__mdiff+0x10c>)
 801555e:	4602      	mov	r2, r0
 8015560:	f240 2137 	movw	r1, #567	; 0x237
 8015564:	4839      	ldr	r0, [pc, #228]	; (801564c <__mdiff+0x110>)
 8015566:	f000 fafd 	bl	8015b64 <__assert_func>
 801556a:	2301      	movs	r3, #1
 801556c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015574:	bfa4      	itt	ge
 8015576:	4643      	movge	r3, r8
 8015578:	46a0      	movge	r8, r4
 801557a:	4630      	mov	r0, r6
 801557c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015580:	bfa6      	itte	ge
 8015582:	461c      	movge	r4, r3
 8015584:	2500      	movge	r5, #0
 8015586:	2501      	movlt	r5, #1
 8015588:	f7ff fd40 	bl	801500c <_Balloc>
 801558c:	b920      	cbnz	r0, 8015598 <__mdiff+0x5c>
 801558e:	4b2e      	ldr	r3, [pc, #184]	; (8015648 <__mdiff+0x10c>)
 8015590:	4602      	mov	r2, r0
 8015592:	f240 2145 	movw	r1, #581	; 0x245
 8015596:	e7e5      	b.n	8015564 <__mdiff+0x28>
 8015598:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801559c:	6926      	ldr	r6, [r4, #16]
 801559e:	60c5      	str	r5, [r0, #12]
 80155a0:	f104 0914 	add.w	r9, r4, #20
 80155a4:	f108 0514 	add.w	r5, r8, #20
 80155a8:	f100 0e14 	add.w	lr, r0, #20
 80155ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80155b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80155b4:	f108 0210 	add.w	r2, r8, #16
 80155b8:	46f2      	mov	sl, lr
 80155ba:	2100      	movs	r1, #0
 80155bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80155c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80155c4:	fa11 f88b 	uxtah	r8, r1, fp
 80155c8:	b299      	uxth	r1, r3
 80155ca:	0c1b      	lsrs	r3, r3, #16
 80155cc:	eba8 0801 	sub.w	r8, r8, r1
 80155d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80155d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80155d8:	fa1f f888 	uxth.w	r8, r8
 80155dc:	1419      	asrs	r1, r3, #16
 80155de:	454e      	cmp	r6, r9
 80155e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80155e4:	f84a 3b04 	str.w	r3, [sl], #4
 80155e8:	d8e8      	bhi.n	80155bc <__mdiff+0x80>
 80155ea:	1b33      	subs	r3, r6, r4
 80155ec:	3b15      	subs	r3, #21
 80155ee:	f023 0303 	bic.w	r3, r3, #3
 80155f2:	3304      	adds	r3, #4
 80155f4:	3415      	adds	r4, #21
 80155f6:	42a6      	cmp	r6, r4
 80155f8:	bf38      	it	cc
 80155fa:	2304      	movcc	r3, #4
 80155fc:	441d      	add	r5, r3
 80155fe:	4473      	add	r3, lr
 8015600:	469e      	mov	lr, r3
 8015602:	462e      	mov	r6, r5
 8015604:	4566      	cmp	r6, ip
 8015606:	d30e      	bcc.n	8015626 <__mdiff+0xea>
 8015608:	f10c 0203 	add.w	r2, ip, #3
 801560c:	1b52      	subs	r2, r2, r5
 801560e:	f022 0203 	bic.w	r2, r2, #3
 8015612:	3d03      	subs	r5, #3
 8015614:	45ac      	cmp	ip, r5
 8015616:	bf38      	it	cc
 8015618:	2200      	movcc	r2, #0
 801561a:	4413      	add	r3, r2
 801561c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015620:	b17a      	cbz	r2, 8015642 <__mdiff+0x106>
 8015622:	6107      	str	r7, [r0, #16]
 8015624:	e7a4      	b.n	8015570 <__mdiff+0x34>
 8015626:	f856 8b04 	ldr.w	r8, [r6], #4
 801562a:	fa11 f288 	uxtah	r2, r1, r8
 801562e:	1414      	asrs	r4, r2, #16
 8015630:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015634:	b292      	uxth	r2, r2
 8015636:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801563a:	f84e 2b04 	str.w	r2, [lr], #4
 801563e:	1421      	asrs	r1, r4, #16
 8015640:	e7e0      	b.n	8015604 <__mdiff+0xc8>
 8015642:	3f01      	subs	r7, #1
 8015644:	e7ea      	b.n	801561c <__mdiff+0xe0>
 8015646:	bf00      	nop
 8015648:	080184d6 	.word	0x080184d6
 801564c:	080184e7 	.word	0x080184e7

08015650 <__d2b>:
 8015650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015654:	460f      	mov	r7, r1
 8015656:	2101      	movs	r1, #1
 8015658:	ec59 8b10 	vmov	r8, r9, d0
 801565c:	4616      	mov	r6, r2
 801565e:	f7ff fcd5 	bl	801500c <_Balloc>
 8015662:	4604      	mov	r4, r0
 8015664:	b930      	cbnz	r0, 8015674 <__d2b+0x24>
 8015666:	4602      	mov	r2, r0
 8015668:	4b24      	ldr	r3, [pc, #144]	; (80156fc <__d2b+0xac>)
 801566a:	4825      	ldr	r0, [pc, #148]	; (8015700 <__d2b+0xb0>)
 801566c:	f240 310f 	movw	r1, #783	; 0x30f
 8015670:	f000 fa78 	bl	8015b64 <__assert_func>
 8015674:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801567c:	bb2d      	cbnz	r5, 80156ca <__d2b+0x7a>
 801567e:	9301      	str	r3, [sp, #4]
 8015680:	f1b8 0300 	subs.w	r3, r8, #0
 8015684:	d026      	beq.n	80156d4 <__d2b+0x84>
 8015686:	4668      	mov	r0, sp
 8015688:	9300      	str	r3, [sp, #0]
 801568a:	f7ff fd87 	bl	801519c <__lo0bits>
 801568e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015692:	b1e8      	cbz	r0, 80156d0 <__d2b+0x80>
 8015694:	f1c0 0320 	rsb	r3, r0, #32
 8015698:	fa02 f303 	lsl.w	r3, r2, r3
 801569c:	430b      	orrs	r3, r1
 801569e:	40c2      	lsrs	r2, r0
 80156a0:	6163      	str	r3, [r4, #20]
 80156a2:	9201      	str	r2, [sp, #4]
 80156a4:	9b01      	ldr	r3, [sp, #4]
 80156a6:	61a3      	str	r3, [r4, #24]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	bf14      	ite	ne
 80156ac:	2202      	movne	r2, #2
 80156ae:	2201      	moveq	r2, #1
 80156b0:	6122      	str	r2, [r4, #16]
 80156b2:	b1bd      	cbz	r5, 80156e4 <__d2b+0x94>
 80156b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80156b8:	4405      	add	r5, r0
 80156ba:	603d      	str	r5, [r7, #0]
 80156bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80156c0:	6030      	str	r0, [r6, #0]
 80156c2:	4620      	mov	r0, r4
 80156c4:	b003      	add	sp, #12
 80156c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80156ce:	e7d6      	b.n	801567e <__d2b+0x2e>
 80156d0:	6161      	str	r1, [r4, #20]
 80156d2:	e7e7      	b.n	80156a4 <__d2b+0x54>
 80156d4:	a801      	add	r0, sp, #4
 80156d6:	f7ff fd61 	bl	801519c <__lo0bits>
 80156da:	9b01      	ldr	r3, [sp, #4]
 80156dc:	6163      	str	r3, [r4, #20]
 80156de:	3020      	adds	r0, #32
 80156e0:	2201      	movs	r2, #1
 80156e2:	e7e5      	b.n	80156b0 <__d2b+0x60>
 80156e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80156e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80156ec:	6038      	str	r0, [r7, #0]
 80156ee:	6918      	ldr	r0, [r3, #16]
 80156f0:	f7ff fd34 	bl	801515c <__hi0bits>
 80156f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80156f8:	e7e2      	b.n	80156c0 <__d2b+0x70>
 80156fa:	bf00      	nop
 80156fc:	080184d6 	.word	0x080184d6
 8015700:	080184e7 	.word	0x080184e7

08015704 <__ssputs_r>:
 8015704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015708:	688e      	ldr	r6, [r1, #8]
 801570a:	461f      	mov	r7, r3
 801570c:	42be      	cmp	r6, r7
 801570e:	680b      	ldr	r3, [r1, #0]
 8015710:	4682      	mov	sl, r0
 8015712:	460c      	mov	r4, r1
 8015714:	4690      	mov	r8, r2
 8015716:	d82c      	bhi.n	8015772 <__ssputs_r+0x6e>
 8015718:	898a      	ldrh	r2, [r1, #12]
 801571a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801571e:	d026      	beq.n	801576e <__ssputs_r+0x6a>
 8015720:	6965      	ldr	r5, [r4, #20]
 8015722:	6909      	ldr	r1, [r1, #16]
 8015724:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015728:	eba3 0901 	sub.w	r9, r3, r1
 801572c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015730:	1c7b      	adds	r3, r7, #1
 8015732:	444b      	add	r3, r9
 8015734:	106d      	asrs	r5, r5, #1
 8015736:	429d      	cmp	r5, r3
 8015738:	bf38      	it	cc
 801573a:	461d      	movcc	r5, r3
 801573c:	0553      	lsls	r3, r2, #21
 801573e:	d527      	bpl.n	8015790 <__ssputs_r+0x8c>
 8015740:	4629      	mov	r1, r5
 8015742:	f7ff fbd7 	bl	8014ef4 <_malloc_r>
 8015746:	4606      	mov	r6, r0
 8015748:	b360      	cbz	r0, 80157a4 <__ssputs_r+0xa0>
 801574a:	6921      	ldr	r1, [r4, #16]
 801574c:	464a      	mov	r2, r9
 801574e:	f7fe fcd5 	bl	80140fc <memcpy>
 8015752:	89a3      	ldrh	r3, [r4, #12]
 8015754:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801575c:	81a3      	strh	r3, [r4, #12]
 801575e:	6126      	str	r6, [r4, #16]
 8015760:	6165      	str	r5, [r4, #20]
 8015762:	444e      	add	r6, r9
 8015764:	eba5 0509 	sub.w	r5, r5, r9
 8015768:	6026      	str	r6, [r4, #0]
 801576a:	60a5      	str	r5, [r4, #8]
 801576c:	463e      	mov	r6, r7
 801576e:	42be      	cmp	r6, r7
 8015770:	d900      	bls.n	8015774 <__ssputs_r+0x70>
 8015772:	463e      	mov	r6, r7
 8015774:	6820      	ldr	r0, [r4, #0]
 8015776:	4632      	mov	r2, r6
 8015778:	4641      	mov	r1, r8
 801577a:	f000 f9c9 	bl	8015b10 <memmove>
 801577e:	68a3      	ldr	r3, [r4, #8]
 8015780:	1b9b      	subs	r3, r3, r6
 8015782:	60a3      	str	r3, [r4, #8]
 8015784:	6823      	ldr	r3, [r4, #0]
 8015786:	4433      	add	r3, r6
 8015788:	6023      	str	r3, [r4, #0]
 801578a:	2000      	movs	r0, #0
 801578c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015790:	462a      	mov	r2, r5
 8015792:	f000 fa2d 	bl	8015bf0 <_realloc_r>
 8015796:	4606      	mov	r6, r0
 8015798:	2800      	cmp	r0, #0
 801579a:	d1e0      	bne.n	801575e <__ssputs_r+0x5a>
 801579c:	6921      	ldr	r1, [r4, #16]
 801579e:	4650      	mov	r0, sl
 80157a0:	f7ff fb34 	bl	8014e0c <_free_r>
 80157a4:	230c      	movs	r3, #12
 80157a6:	f8ca 3000 	str.w	r3, [sl]
 80157aa:	89a3      	ldrh	r3, [r4, #12]
 80157ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157b0:	81a3      	strh	r3, [r4, #12]
 80157b2:	f04f 30ff 	mov.w	r0, #4294967295
 80157b6:	e7e9      	b.n	801578c <__ssputs_r+0x88>

080157b8 <_svfiprintf_r>:
 80157b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157bc:	4698      	mov	r8, r3
 80157be:	898b      	ldrh	r3, [r1, #12]
 80157c0:	061b      	lsls	r3, r3, #24
 80157c2:	b09d      	sub	sp, #116	; 0x74
 80157c4:	4607      	mov	r7, r0
 80157c6:	460d      	mov	r5, r1
 80157c8:	4614      	mov	r4, r2
 80157ca:	d50e      	bpl.n	80157ea <_svfiprintf_r+0x32>
 80157cc:	690b      	ldr	r3, [r1, #16]
 80157ce:	b963      	cbnz	r3, 80157ea <_svfiprintf_r+0x32>
 80157d0:	2140      	movs	r1, #64	; 0x40
 80157d2:	f7ff fb8f 	bl	8014ef4 <_malloc_r>
 80157d6:	6028      	str	r0, [r5, #0]
 80157d8:	6128      	str	r0, [r5, #16]
 80157da:	b920      	cbnz	r0, 80157e6 <_svfiprintf_r+0x2e>
 80157dc:	230c      	movs	r3, #12
 80157de:	603b      	str	r3, [r7, #0]
 80157e0:	f04f 30ff 	mov.w	r0, #4294967295
 80157e4:	e0d0      	b.n	8015988 <_svfiprintf_r+0x1d0>
 80157e6:	2340      	movs	r3, #64	; 0x40
 80157e8:	616b      	str	r3, [r5, #20]
 80157ea:	2300      	movs	r3, #0
 80157ec:	9309      	str	r3, [sp, #36]	; 0x24
 80157ee:	2320      	movs	r3, #32
 80157f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80157f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80157f8:	2330      	movs	r3, #48	; 0x30
 80157fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80159a0 <_svfiprintf_r+0x1e8>
 80157fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015802:	f04f 0901 	mov.w	r9, #1
 8015806:	4623      	mov	r3, r4
 8015808:	469a      	mov	sl, r3
 801580a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801580e:	b10a      	cbz	r2, 8015814 <_svfiprintf_r+0x5c>
 8015810:	2a25      	cmp	r2, #37	; 0x25
 8015812:	d1f9      	bne.n	8015808 <_svfiprintf_r+0x50>
 8015814:	ebba 0b04 	subs.w	fp, sl, r4
 8015818:	d00b      	beq.n	8015832 <_svfiprintf_r+0x7a>
 801581a:	465b      	mov	r3, fp
 801581c:	4622      	mov	r2, r4
 801581e:	4629      	mov	r1, r5
 8015820:	4638      	mov	r0, r7
 8015822:	f7ff ff6f 	bl	8015704 <__ssputs_r>
 8015826:	3001      	adds	r0, #1
 8015828:	f000 80a9 	beq.w	801597e <_svfiprintf_r+0x1c6>
 801582c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801582e:	445a      	add	r2, fp
 8015830:	9209      	str	r2, [sp, #36]	; 0x24
 8015832:	f89a 3000 	ldrb.w	r3, [sl]
 8015836:	2b00      	cmp	r3, #0
 8015838:	f000 80a1 	beq.w	801597e <_svfiprintf_r+0x1c6>
 801583c:	2300      	movs	r3, #0
 801583e:	f04f 32ff 	mov.w	r2, #4294967295
 8015842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015846:	f10a 0a01 	add.w	sl, sl, #1
 801584a:	9304      	str	r3, [sp, #16]
 801584c:	9307      	str	r3, [sp, #28]
 801584e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015852:	931a      	str	r3, [sp, #104]	; 0x68
 8015854:	4654      	mov	r4, sl
 8015856:	2205      	movs	r2, #5
 8015858:	f814 1b01 	ldrb.w	r1, [r4], #1
 801585c:	4850      	ldr	r0, [pc, #320]	; (80159a0 <_svfiprintf_r+0x1e8>)
 801585e:	f7ea fcd7 	bl	8000210 <memchr>
 8015862:	9a04      	ldr	r2, [sp, #16]
 8015864:	b9d8      	cbnz	r0, 801589e <_svfiprintf_r+0xe6>
 8015866:	06d0      	lsls	r0, r2, #27
 8015868:	bf44      	itt	mi
 801586a:	2320      	movmi	r3, #32
 801586c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015870:	0711      	lsls	r1, r2, #28
 8015872:	bf44      	itt	mi
 8015874:	232b      	movmi	r3, #43	; 0x2b
 8015876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801587a:	f89a 3000 	ldrb.w	r3, [sl]
 801587e:	2b2a      	cmp	r3, #42	; 0x2a
 8015880:	d015      	beq.n	80158ae <_svfiprintf_r+0xf6>
 8015882:	9a07      	ldr	r2, [sp, #28]
 8015884:	4654      	mov	r4, sl
 8015886:	2000      	movs	r0, #0
 8015888:	f04f 0c0a 	mov.w	ip, #10
 801588c:	4621      	mov	r1, r4
 801588e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015892:	3b30      	subs	r3, #48	; 0x30
 8015894:	2b09      	cmp	r3, #9
 8015896:	d94d      	bls.n	8015934 <_svfiprintf_r+0x17c>
 8015898:	b1b0      	cbz	r0, 80158c8 <_svfiprintf_r+0x110>
 801589a:	9207      	str	r2, [sp, #28]
 801589c:	e014      	b.n	80158c8 <_svfiprintf_r+0x110>
 801589e:	eba0 0308 	sub.w	r3, r0, r8
 80158a2:	fa09 f303 	lsl.w	r3, r9, r3
 80158a6:	4313      	orrs	r3, r2
 80158a8:	9304      	str	r3, [sp, #16]
 80158aa:	46a2      	mov	sl, r4
 80158ac:	e7d2      	b.n	8015854 <_svfiprintf_r+0x9c>
 80158ae:	9b03      	ldr	r3, [sp, #12]
 80158b0:	1d19      	adds	r1, r3, #4
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	9103      	str	r1, [sp, #12]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	bfbb      	ittet	lt
 80158ba:	425b      	neglt	r3, r3
 80158bc:	f042 0202 	orrlt.w	r2, r2, #2
 80158c0:	9307      	strge	r3, [sp, #28]
 80158c2:	9307      	strlt	r3, [sp, #28]
 80158c4:	bfb8      	it	lt
 80158c6:	9204      	strlt	r2, [sp, #16]
 80158c8:	7823      	ldrb	r3, [r4, #0]
 80158ca:	2b2e      	cmp	r3, #46	; 0x2e
 80158cc:	d10c      	bne.n	80158e8 <_svfiprintf_r+0x130>
 80158ce:	7863      	ldrb	r3, [r4, #1]
 80158d0:	2b2a      	cmp	r3, #42	; 0x2a
 80158d2:	d134      	bne.n	801593e <_svfiprintf_r+0x186>
 80158d4:	9b03      	ldr	r3, [sp, #12]
 80158d6:	1d1a      	adds	r2, r3, #4
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	9203      	str	r2, [sp, #12]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	bfb8      	it	lt
 80158e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80158e4:	3402      	adds	r4, #2
 80158e6:	9305      	str	r3, [sp, #20]
 80158e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80159b0 <_svfiprintf_r+0x1f8>
 80158ec:	7821      	ldrb	r1, [r4, #0]
 80158ee:	2203      	movs	r2, #3
 80158f0:	4650      	mov	r0, sl
 80158f2:	f7ea fc8d 	bl	8000210 <memchr>
 80158f6:	b138      	cbz	r0, 8015908 <_svfiprintf_r+0x150>
 80158f8:	9b04      	ldr	r3, [sp, #16]
 80158fa:	eba0 000a 	sub.w	r0, r0, sl
 80158fe:	2240      	movs	r2, #64	; 0x40
 8015900:	4082      	lsls	r2, r0
 8015902:	4313      	orrs	r3, r2
 8015904:	3401      	adds	r4, #1
 8015906:	9304      	str	r3, [sp, #16]
 8015908:	f814 1b01 	ldrb.w	r1, [r4], #1
 801590c:	4825      	ldr	r0, [pc, #148]	; (80159a4 <_svfiprintf_r+0x1ec>)
 801590e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015912:	2206      	movs	r2, #6
 8015914:	f7ea fc7c 	bl	8000210 <memchr>
 8015918:	2800      	cmp	r0, #0
 801591a:	d038      	beq.n	801598e <_svfiprintf_r+0x1d6>
 801591c:	4b22      	ldr	r3, [pc, #136]	; (80159a8 <_svfiprintf_r+0x1f0>)
 801591e:	bb1b      	cbnz	r3, 8015968 <_svfiprintf_r+0x1b0>
 8015920:	9b03      	ldr	r3, [sp, #12]
 8015922:	3307      	adds	r3, #7
 8015924:	f023 0307 	bic.w	r3, r3, #7
 8015928:	3308      	adds	r3, #8
 801592a:	9303      	str	r3, [sp, #12]
 801592c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801592e:	4433      	add	r3, r6
 8015930:	9309      	str	r3, [sp, #36]	; 0x24
 8015932:	e768      	b.n	8015806 <_svfiprintf_r+0x4e>
 8015934:	fb0c 3202 	mla	r2, ip, r2, r3
 8015938:	460c      	mov	r4, r1
 801593a:	2001      	movs	r0, #1
 801593c:	e7a6      	b.n	801588c <_svfiprintf_r+0xd4>
 801593e:	2300      	movs	r3, #0
 8015940:	3401      	adds	r4, #1
 8015942:	9305      	str	r3, [sp, #20]
 8015944:	4619      	mov	r1, r3
 8015946:	f04f 0c0a 	mov.w	ip, #10
 801594a:	4620      	mov	r0, r4
 801594c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015950:	3a30      	subs	r2, #48	; 0x30
 8015952:	2a09      	cmp	r2, #9
 8015954:	d903      	bls.n	801595e <_svfiprintf_r+0x1a6>
 8015956:	2b00      	cmp	r3, #0
 8015958:	d0c6      	beq.n	80158e8 <_svfiprintf_r+0x130>
 801595a:	9105      	str	r1, [sp, #20]
 801595c:	e7c4      	b.n	80158e8 <_svfiprintf_r+0x130>
 801595e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015962:	4604      	mov	r4, r0
 8015964:	2301      	movs	r3, #1
 8015966:	e7f0      	b.n	801594a <_svfiprintf_r+0x192>
 8015968:	ab03      	add	r3, sp, #12
 801596a:	9300      	str	r3, [sp, #0]
 801596c:	462a      	mov	r2, r5
 801596e:	4b0f      	ldr	r3, [pc, #60]	; (80159ac <_svfiprintf_r+0x1f4>)
 8015970:	a904      	add	r1, sp, #16
 8015972:	4638      	mov	r0, r7
 8015974:	f7fd fe04 	bl	8013580 <_printf_float>
 8015978:	1c42      	adds	r2, r0, #1
 801597a:	4606      	mov	r6, r0
 801597c:	d1d6      	bne.n	801592c <_svfiprintf_r+0x174>
 801597e:	89ab      	ldrh	r3, [r5, #12]
 8015980:	065b      	lsls	r3, r3, #25
 8015982:	f53f af2d 	bmi.w	80157e0 <_svfiprintf_r+0x28>
 8015986:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015988:	b01d      	add	sp, #116	; 0x74
 801598a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801598e:	ab03      	add	r3, sp, #12
 8015990:	9300      	str	r3, [sp, #0]
 8015992:	462a      	mov	r2, r5
 8015994:	4b05      	ldr	r3, [pc, #20]	; (80159ac <_svfiprintf_r+0x1f4>)
 8015996:	a904      	add	r1, sp, #16
 8015998:	4638      	mov	r0, r7
 801599a:	f7fe f895 	bl	8013ac8 <_printf_i>
 801599e:	e7eb      	b.n	8015978 <_svfiprintf_r+0x1c0>
 80159a0:	0801863c 	.word	0x0801863c
 80159a4:	08018646 	.word	0x08018646
 80159a8:	08013581 	.word	0x08013581
 80159ac:	08015705 	.word	0x08015705
 80159b0:	08018642 	.word	0x08018642

080159b4 <__sflush_r>:
 80159b4:	898a      	ldrh	r2, [r1, #12]
 80159b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159ba:	4605      	mov	r5, r0
 80159bc:	0710      	lsls	r0, r2, #28
 80159be:	460c      	mov	r4, r1
 80159c0:	d458      	bmi.n	8015a74 <__sflush_r+0xc0>
 80159c2:	684b      	ldr	r3, [r1, #4]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	dc05      	bgt.n	80159d4 <__sflush_r+0x20>
 80159c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	dc02      	bgt.n	80159d4 <__sflush_r+0x20>
 80159ce:	2000      	movs	r0, #0
 80159d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159d6:	2e00      	cmp	r6, #0
 80159d8:	d0f9      	beq.n	80159ce <__sflush_r+0x1a>
 80159da:	2300      	movs	r3, #0
 80159dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80159e0:	682f      	ldr	r7, [r5, #0]
 80159e2:	6a21      	ldr	r1, [r4, #32]
 80159e4:	602b      	str	r3, [r5, #0]
 80159e6:	d032      	beq.n	8015a4e <__sflush_r+0x9a>
 80159e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80159ea:	89a3      	ldrh	r3, [r4, #12]
 80159ec:	075a      	lsls	r2, r3, #29
 80159ee:	d505      	bpl.n	80159fc <__sflush_r+0x48>
 80159f0:	6863      	ldr	r3, [r4, #4]
 80159f2:	1ac0      	subs	r0, r0, r3
 80159f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80159f6:	b10b      	cbz	r3, 80159fc <__sflush_r+0x48>
 80159f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80159fa:	1ac0      	subs	r0, r0, r3
 80159fc:	2300      	movs	r3, #0
 80159fe:	4602      	mov	r2, r0
 8015a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015a02:	6a21      	ldr	r1, [r4, #32]
 8015a04:	4628      	mov	r0, r5
 8015a06:	47b0      	blx	r6
 8015a08:	1c43      	adds	r3, r0, #1
 8015a0a:	89a3      	ldrh	r3, [r4, #12]
 8015a0c:	d106      	bne.n	8015a1c <__sflush_r+0x68>
 8015a0e:	6829      	ldr	r1, [r5, #0]
 8015a10:	291d      	cmp	r1, #29
 8015a12:	d82b      	bhi.n	8015a6c <__sflush_r+0xb8>
 8015a14:	4a29      	ldr	r2, [pc, #164]	; (8015abc <__sflush_r+0x108>)
 8015a16:	410a      	asrs	r2, r1
 8015a18:	07d6      	lsls	r6, r2, #31
 8015a1a:	d427      	bmi.n	8015a6c <__sflush_r+0xb8>
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	6062      	str	r2, [r4, #4]
 8015a20:	04d9      	lsls	r1, r3, #19
 8015a22:	6922      	ldr	r2, [r4, #16]
 8015a24:	6022      	str	r2, [r4, #0]
 8015a26:	d504      	bpl.n	8015a32 <__sflush_r+0x7e>
 8015a28:	1c42      	adds	r2, r0, #1
 8015a2a:	d101      	bne.n	8015a30 <__sflush_r+0x7c>
 8015a2c:	682b      	ldr	r3, [r5, #0]
 8015a2e:	b903      	cbnz	r3, 8015a32 <__sflush_r+0x7e>
 8015a30:	6560      	str	r0, [r4, #84]	; 0x54
 8015a32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a34:	602f      	str	r7, [r5, #0]
 8015a36:	2900      	cmp	r1, #0
 8015a38:	d0c9      	beq.n	80159ce <__sflush_r+0x1a>
 8015a3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a3e:	4299      	cmp	r1, r3
 8015a40:	d002      	beq.n	8015a48 <__sflush_r+0x94>
 8015a42:	4628      	mov	r0, r5
 8015a44:	f7ff f9e2 	bl	8014e0c <_free_r>
 8015a48:	2000      	movs	r0, #0
 8015a4a:	6360      	str	r0, [r4, #52]	; 0x34
 8015a4c:	e7c0      	b.n	80159d0 <__sflush_r+0x1c>
 8015a4e:	2301      	movs	r3, #1
 8015a50:	4628      	mov	r0, r5
 8015a52:	47b0      	blx	r6
 8015a54:	1c41      	adds	r1, r0, #1
 8015a56:	d1c8      	bne.n	80159ea <__sflush_r+0x36>
 8015a58:	682b      	ldr	r3, [r5, #0]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d0c5      	beq.n	80159ea <__sflush_r+0x36>
 8015a5e:	2b1d      	cmp	r3, #29
 8015a60:	d001      	beq.n	8015a66 <__sflush_r+0xb2>
 8015a62:	2b16      	cmp	r3, #22
 8015a64:	d101      	bne.n	8015a6a <__sflush_r+0xb6>
 8015a66:	602f      	str	r7, [r5, #0]
 8015a68:	e7b1      	b.n	80159ce <__sflush_r+0x1a>
 8015a6a:	89a3      	ldrh	r3, [r4, #12]
 8015a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a70:	81a3      	strh	r3, [r4, #12]
 8015a72:	e7ad      	b.n	80159d0 <__sflush_r+0x1c>
 8015a74:	690f      	ldr	r7, [r1, #16]
 8015a76:	2f00      	cmp	r7, #0
 8015a78:	d0a9      	beq.n	80159ce <__sflush_r+0x1a>
 8015a7a:	0793      	lsls	r3, r2, #30
 8015a7c:	680e      	ldr	r6, [r1, #0]
 8015a7e:	bf08      	it	eq
 8015a80:	694b      	ldreq	r3, [r1, #20]
 8015a82:	600f      	str	r7, [r1, #0]
 8015a84:	bf18      	it	ne
 8015a86:	2300      	movne	r3, #0
 8015a88:	eba6 0807 	sub.w	r8, r6, r7
 8015a8c:	608b      	str	r3, [r1, #8]
 8015a8e:	f1b8 0f00 	cmp.w	r8, #0
 8015a92:	dd9c      	ble.n	80159ce <__sflush_r+0x1a>
 8015a94:	6a21      	ldr	r1, [r4, #32]
 8015a96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015a98:	4643      	mov	r3, r8
 8015a9a:	463a      	mov	r2, r7
 8015a9c:	4628      	mov	r0, r5
 8015a9e:	47b0      	blx	r6
 8015aa0:	2800      	cmp	r0, #0
 8015aa2:	dc06      	bgt.n	8015ab2 <__sflush_r+0xfe>
 8015aa4:	89a3      	ldrh	r3, [r4, #12]
 8015aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015aaa:	81a3      	strh	r3, [r4, #12]
 8015aac:	f04f 30ff 	mov.w	r0, #4294967295
 8015ab0:	e78e      	b.n	80159d0 <__sflush_r+0x1c>
 8015ab2:	4407      	add	r7, r0
 8015ab4:	eba8 0800 	sub.w	r8, r8, r0
 8015ab8:	e7e9      	b.n	8015a8e <__sflush_r+0xda>
 8015aba:	bf00      	nop
 8015abc:	dfbffffe 	.word	0xdfbffffe

08015ac0 <_fflush_r>:
 8015ac0:	b538      	push	{r3, r4, r5, lr}
 8015ac2:	690b      	ldr	r3, [r1, #16]
 8015ac4:	4605      	mov	r5, r0
 8015ac6:	460c      	mov	r4, r1
 8015ac8:	b913      	cbnz	r3, 8015ad0 <_fflush_r+0x10>
 8015aca:	2500      	movs	r5, #0
 8015acc:	4628      	mov	r0, r5
 8015ace:	bd38      	pop	{r3, r4, r5, pc}
 8015ad0:	b118      	cbz	r0, 8015ada <_fflush_r+0x1a>
 8015ad2:	6a03      	ldr	r3, [r0, #32]
 8015ad4:	b90b      	cbnz	r3, 8015ada <_fflush_r+0x1a>
 8015ad6:	f7fe f993 	bl	8013e00 <__sinit>
 8015ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d0f3      	beq.n	8015aca <_fflush_r+0xa>
 8015ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015ae4:	07d0      	lsls	r0, r2, #31
 8015ae6:	d404      	bmi.n	8015af2 <_fflush_r+0x32>
 8015ae8:	0599      	lsls	r1, r3, #22
 8015aea:	d402      	bmi.n	8015af2 <_fflush_r+0x32>
 8015aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015aee:	f7fe fb03 	bl	80140f8 <__retarget_lock_acquire_recursive>
 8015af2:	4628      	mov	r0, r5
 8015af4:	4621      	mov	r1, r4
 8015af6:	f7ff ff5d 	bl	80159b4 <__sflush_r>
 8015afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015afc:	07da      	lsls	r2, r3, #31
 8015afe:	4605      	mov	r5, r0
 8015b00:	d4e4      	bmi.n	8015acc <_fflush_r+0xc>
 8015b02:	89a3      	ldrh	r3, [r4, #12]
 8015b04:	059b      	lsls	r3, r3, #22
 8015b06:	d4e1      	bmi.n	8015acc <_fflush_r+0xc>
 8015b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b0a:	f7fe faf6 	bl	80140fa <__retarget_lock_release_recursive>
 8015b0e:	e7dd      	b.n	8015acc <_fflush_r+0xc>

08015b10 <memmove>:
 8015b10:	4288      	cmp	r0, r1
 8015b12:	b510      	push	{r4, lr}
 8015b14:	eb01 0402 	add.w	r4, r1, r2
 8015b18:	d902      	bls.n	8015b20 <memmove+0x10>
 8015b1a:	4284      	cmp	r4, r0
 8015b1c:	4623      	mov	r3, r4
 8015b1e:	d807      	bhi.n	8015b30 <memmove+0x20>
 8015b20:	1e43      	subs	r3, r0, #1
 8015b22:	42a1      	cmp	r1, r4
 8015b24:	d008      	beq.n	8015b38 <memmove+0x28>
 8015b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015b2e:	e7f8      	b.n	8015b22 <memmove+0x12>
 8015b30:	4402      	add	r2, r0
 8015b32:	4601      	mov	r1, r0
 8015b34:	428a      	cmp	r2, r1
 8015b36:	d100      	bne.n	8015b3a <memmove+0x2a>
 8015b38:	bd10      	pop	{r4, pc}
 8015b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015b42:	e7f7      	b.n	8015b34 <memmove+0x24>

08015b44 <_sbrk_r>:
 8015b44:	b538      	push	{r3, r4, r5, lr}
 8015b46:	4d06      	ldr	r5, [pc, #24]	; (8015b60 <_sbrk_r+0x1c>)
 8015b48:	2300      	movs	r3, #0
 8015b4a:	4604      	mov	r4, r0
 8015b4c:	4608      	mov	r0, r1
 8015b4e:	602b      	str	r3, [r5, #0]
 8015b50:	f7ec fd56 	bl	8002600 <_sbrk>
 8015b54:	1c43      	adds	r3, r0, #1
 8015b56:	d102      	bne.n	8015b5e <_sbrk_r+0x1a>
 8015b58:	682b      	ldr	r3, [r5, #0]
 8015b5a:	b103      	cbz	r3, 8015b5e <_sbrk_r+0x1a>
 8015b5c:	6023      	str	r3, [r4, #0]
 8015b5e:	bd38      	pop	{r3, r4, r5, pc}
 8015b60:	20009f9c 	.word	0x20009f9c

08015b64 <__assert_func>:
 8015b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015b66:	4614      	mov	r4, r2
 8015b68:	461a      	mov	r2, r3
 8015b6a:	4b09      	ldr	r3, [pc, #36]	; (8015b90 <__assert_func+0x2c>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	4605      	mov	r5, r0
 8015b70:	68d8      	ldr	r0, [r3, #12]
 8015b72:	b14c      	cbz	r4, 8015b88 <__assert_func+0x24>
 8015b74:	4b07      	ldr	r3, [pc, #28]	; (8015b94 <__assert_func+0x30>)
 8015b76:	9100      	str	r1, [sp, #0]
 8015b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015b7c:	4906      	ldr	r1, [pc, #24]	; (8015b98 <__assert_func+0x34>)
 8015b7e:	462b      	mov	r3, r5
 8015b80:	f000 f872 	bl	8015c68 <fiprintf>
 8015b84:	f000 f882 	bl	8015c8c <abort>
 8015b88:	4b04      	ldr	r3, [pc, #16]	; (8015b9c <__assert_func+0x38>)
 8015b8a:	461c      	mov	r4, r3
 8015b8c:	e7f3      	b.n	8015b76 <__assert_func+0x12>
 8015b8e:	bf00      	nop
 8015b90:	20000094 	.word	0x20000094
 8015b94:	08018657 	.word	0x08018657
 8015b98:	08018664 	.word	0x08018664
 8015b9c:	08018692 	.word	0x08018692

08015ba0 <_calloc_r>:
 8015ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015ba2:	fba1 2402 	umull	r2, r4, r1, r2
 8015ba6:	b94c      	cbnz	r4, 8015bbc <_calloc_r+0x1c>
 8015ba8:	4611      	mov	r1, r2
 8015baa:	9201      	str	r2, [sp, #4]
 8015bac:	f7ff f9a2 	bl	8014ef4 <_malloc_r>
 8015bb0:	9a01      	ldr	r2, [sp, #4]
 8015bb2:	4605      	mov	r5, r0
 8015bb4:	b930      	cbnz	r0, 8015bc4 <_calloc_r+0x24>
 8015bb6:	4628      	mov	r0, r5
 8015bb8:	b003      	add	sp, #12
 8015bba:	bd30      	pop	{r4, r5, pc}
 8015bbc:	220c      	movs	r2, #12
 8015bbe:	6002      	str	r2, [r0, #0]
 8015bc0:	2500      	movs	r5, #0
 8015bc2:	e7f8      	b.n	8015bb6 <_calloc_r+0x16>
 8015bc4:	4621      	mov	r1, r4
 8015bc6:	f7fe f9c4 	bl	8013f52 <memset>
 8015bca:	e7f4      	b.n	8015bb6 <_calloc_r+0x16>

08015bcc <__ascii_mbtowc>:
 8015bcc:	b082      	sub	sp, #8
 8015bce:	b901      	cbnz	r1, 8015bd2 <__ascii_mbtowc+0x6>
 8015bd0:	a901      	add	r1, sp, #4
 8015bd2:	b142      	cbz	r2, 8015be6 <__ascii_mbtowc+0x1a>
 8015bd4:	b14b      	cbz	r3, 8015bea <__ascii_mbtowc+0x1e>
 8015bd6:	7813      	ldrb	r3, [r2, #0]
 8015bd8:	600b      	str	r3, [r1, #0]
 8015bda:	7812      	ldrb	r2, [r2, #0]
 8015bdc:	1e10      	subs	r0, r2, #0
 8015bde:	bf18      	it	ne
 8015be0:	2001      	movne	r0, #1
 8015be2:	b002      	add	sp, #8
 8015be4:	4770      	bx	lr
 8015be6:	4610      	mov	r0, r2
 8015be8:	e7fb      	b.n	8015be2 <__ascii_mbtowc+0x16>
 8015bea:	f06f 0001 	mvn.w	r0, #1
 8015bee:	e7f8      	b.n	8015be2 <__ascii_mbtowc+0x16>

08015bf0 <_realloc_r>:
 8015bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bf4:	4680      	mov	r8, r0
 8015bf6:	4614      	mov	r4, r2
 8015bf8:	460e      	mov	r6, r1
 8015bfa:	b921      	cbnz	r1, 8015c06 <_realloc_r+0x16>
 8015bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c00:	4611      	mov	r1, r2
 8015c02:	f7ff b977 	b.w	8014ef4 <_malloc_r>
 8015c06:	b92a      	cbnz	r2, 8015c14 <_realloc_r+0x24>
 8015c08:	f7ff f900 	bl	8014e0c <_free_r>
 8015c0c:	4625      	mov	r5, r4
 8015c0e:	4628      	mov	r0, r5
 8015c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c14:	f000 f841 	bl	8015c9a <_malloc_usable_size_r>
 8015c18:	4284      	cmp	r4, r0
 8015c1a:	4607      	mov	r7, r0
 8015c1c:	d802      	bhi.n	8015c24 <_realloc_r+0x34>
 8015c1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015c22:	d812      	bhi.n	8015c4a <_realloc_r+0x5a>
 8015c24:	4621      	mov	r1, r4
 8015c26:	4640      	mov	r0, r8
 8015c28:	f7ff f964 	bl	8014ef4 <_malloc_r>
 8015c2c:	4605      	mov	r5, r0
 8015c2e:	2800      	cmp	r0, #0
 8015c30:	d0ed      	beq.n	8015c0e <_realloc_r+0x1e>
 8015c32:	42bc      	cmp	r4, r7
 8015c34:	4622      	mov	r2, r4
 8015c36:	4631      	mov	r1, r6
 8015c38:	bf28      	it	cs
 8015c3a:	463a      	movcs	r2, r7
 8015c3c:	f7fe fa5e 	bl	80140fc <memcpy>
 8015c40:	4631      	mov	r1, r6
 8015c42:	4640      	mov	r0, r8
 8015c44:	f7ff f8e2 	bl	8014e0c <_free_r>
 8015c48:	e7e1      	b.n	8015c0e <_realloc_r+0x1e>
 8015c4a:	4635      	mov	r5, r6
 8015c4c:	e7df      	b.n	8015c0e <_realloc_r+0x1e>

08015c4e <__ascii_wctomb>:
 8015c4e:	b149      	cbz	r1, 8015c64 <__ascii_wctomb+0x16>
 8015c50:	2aff      	cmp	r2, #255	; 0xff
 8015c52:	bf85      	ittet	hi
 8015c54:	238a      	movhi	r3, #138	; 0x8a
 8015c56:	6003      	strhi	r3, [r0, #0]
 8015c58:	700a      	strbls	r2, [r1, #0]
 8015c5a:	f04f 30ff 	movhi.w	r0, #4294967295
 8015c5e:	bf98      	it	ls
 8015c60:	2001      	movls	r0, #1
 8015c62:	4770      	bx	lr
 8015c64:	4608      	mov	r0, r1
 8015c66:	4770      	bx	lr

08015c68 <fiprintf>:
 8015c68:	b40e      	push	{r1, r2, r3}
 8015c6a:	b503      	push	{r0, r1, lr}
 8015c6c:	4601      	mov	r1, r0
 8015c6e:	ab03      	add	r3, sp, #12
 8015c70:	4805      	ldr	r0, [pc, #20]	; (8015c88 <fiprintf+0x20>)
 8015c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c76:	6800      	ldr	r0, [r0, #0]
 8015c78:	9301      	str	r3, [sp, #4]
 8015c7a:	f000 f83f 	bl	8015cfc <_vfiprintf_r>
 8015c7e:	b002      	add	sp, #8
 8015c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c84:	b003      	add	sp, #12
 8015c86:	4770      	bx	lr
 8015c88:	20000094 	.word	0x20000094

08015c8c <abort>:
 8015c8c:	b508      	push	{r3, lr}
 8015c8e:	2006      	movs	r0, #6
 8015c90:	f000 fa0c 	bl	80160ac <raise>
 8015c94:	2001      	movs	r0, #1
 8015c96:	f7fd fb77 	bl	8013388 <_exit>

08015c9a <_malloc_usable_size_r>:
 8015c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c9e:	1f18      	subs	r0, r3, #4
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	bfbc      	itt	lt
 8015ca4:	580b      	ldrlt	r3, [r1, r0]
 8015ca6:	18c0      	addlt	r0, r0, r3
 8015ca8:	4770      	bx	lr

08015caa <__sfputc_r>:
 8015caa:	6893      	ldr	r3, [r2, #8]
 8015cac:	3b01      	subs	r3, #1
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	b410      	push	{r4}
 8015cb2:	6093      	str	r3, [r2, #8]
 8015cb4:	da08      	bge.n	8015cc8 <__sfputc_r+0x1e>
 8015cb6:	6994      	ldr	r4, [r2, #24]
 8015cb8:	42a3      	cmp	r3, r4
 8015cba:	db01      	blt.n	8015cc0 <__sfputc_r+0x16>
 8015cbc:	290a      	cmp	r1, #10
 8015cbe:	d103      	bne.n	8015cc8 <__sfputc_r+0x1e>
 8015cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cc4:	f000 b934 	b.w	8015f30 <__swbuf_r>
 8015cc8:	6813      	ldr	r3, [r2, #0]
 8015cca:	1c58      	adds	r0, r3, #1
 8015ccc:	6010      	str	r0, [r2, #0]
 8015cce:	7019      	strb	r1, [r3, #0]
 8015cd0:	4608      	mov	r0, r1
 8015cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cd6:	4770      	bx	lr

08015cd8 <__sfputs_r>:
 8015cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cda:	4606      	mov	r6, r0
 8015cdc:	460f      	mov	r7, r1
 8015cde:	4614      	mov	r4, r2
 8015ce0:	18d5      	adds	r5, r2, r3
 8015ce2:	42ac      	cmp	r4, r5
 8015ce4:	d101      	bne.n	8015cea <__sfputs_r+0x12>
 8015ce6:	2000      	movs	r0, #0
 8015ce8:	e007      	b.n	8015cfa <__sfputs_r+0x22>
 8015cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cee:	463a      	mov	r2, r7
 8015cf0:	4630      	mov	r0, r6
 8015cf2:	f7ff ffda 	bl	8015caa <__sfputc_r>
 8015cf6:	1c43      	adds	r3, r0, #1
 8015cf8:	d1f3      	bne.n	8015ce2 <__sfputs_r+0xa>
 8015cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015cfc <_vfiprintf_r>:
 8015cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d00:	460d      	mov	r5, r1
 8015d02:	b09d      	sub	sp, #116	; 0x74
 8015d04:	4614      	mov	r4, r2
 8015d06:	4698      	mov	r8, r3
 8015d08:	4606      	mov	r6, r0
 8015d0a:	b118      	cbz	r0, 8015d14 <_vfiprintf_r+0x18>
 8015d0c:	6a03      	ldr	r3, [r0, #32]
 8015d0e:	b90b      	cbnz	r3, 8015d14 <_vfiprintf_r+0x18>
 8015d10:	f7fe f876 	bl	8013e00 <__sinit>
 8015d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d16:	07d9      	lsls	r1, r3, #31
 8015d18:	d405      	bmi.n	8015d26 <_vfiprintf_r+0x2a>
 8015d1a:	89ab      	ldrh	r3, [r5, #12]
 8015d1c:	059a      	lsls	r2, r3, #22
 8015d1e:	d402      	bmi.n	8015d26 <_vfiprintf_r+0x2a>
 8015d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d22:	f7fe f9e9 	bl	80140f8 <__retarget_lock_acquire_recursive>
 8015d26:	89ab      	ldrh	r3, [r5, #12]
 8015d28:	071b      	lsls	r3, r3, #28
 8015d2a:	d501      	bpl.n	8015d30 <_vfiprintf_r+0x34>
 8015d2c:	692b      	ldr	r3, [r5, #16]
 8015d2e:	b99b      	cbnz	r3, 8015d58 <_vfiprintf_r+0x5c>
 8015d30:	4629      	mov	r1, r5
 8015d32:	4630      	mov	r0, r6
 8015d34:	f000 f93a 	bl	8015fac <__swsetup_r>
 8015d38:	b170      	cbz	r0, 8015d58 <_vfiprintf_r+0x5c>
 8015d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d3c:	07dc      	lsls	r4, r3, #31
 8015d3e:	d504      	bpl.n	8015d4a <_vfiprintf_r+0x4e>
 8015d40:	f04f 30ff 	mov.w	r0, #4294967295
 8015d44:	b01d      	add	sp, #116	; 0x74
 8015d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d4a:	89ab      	ldrh	r3, [r5, #12]
 8015d4c:	0598      	lsls	r0, r3, #22
 8015d4e:	d4f7      	bmi.n	8015d40 <_vfiprintf_r+0x44>
 8015d50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d52:	f7fe f9d2 	bl	80140fa <__retarget_lock_release_recursive>
 8015d56:	e7f3      	b.n	8015d40 <_vfiprintf_r+0x44>
 8015d58:	2300      	movs	r3, #0
 8015d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8015d5c:	2320      	movs	r3, #32
 8015d5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015d62:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d66:	2330      	movs	r3, #48	; 0x30
 8015d68:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015f1c <_vfiprintf_r+0x220>
 8015d6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015d70:	f04f 0901 	mov.w	r9, #1
 8015d74:	4623      	mov	r3, r4
 8015d76:	469a      	mov	sl, r3
 8015d78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d7c:	b10a      	cbz	r2, 8015d82 <_vfiprintf_r+0x86>
 8015d7e:	2a25      	cmp	r2, #37	; 0x25
 8015d80:	d1f9      	bne.n	8015d76 <_vfiprintf_r+0x7a>
 8015d82:	ebba 0b04 	subs.w	fp, sl, r4
 8015d86:	d00b      	beq.n	8015da0 <_vfiprintf_r+0xa4>
 8015d88:	465b      	mov	r3, fp
 8015d8a:	4622      	mov	r2, r4
 8015d8c:	4629      	mov	r1, r5
 8015d8e:	4630      	mov	r0, r6
 8015d90:	f7ff ffa2 	bl	8015cd8 <__sfputs_r>
 8015d94:	3001      	adds	r0, #1
 8015d96:	f000 80a9 	beq.w	8015eec <_vfiprintf_r+0x1f0>
 8015d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d9c:	445a      	add	r2, fp
 8015d9e:	9209      	str	r2, [sp, #36]	; 0x24
 8015da0:	f89a 3000 	ldrb.w	r3, [sl]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	f000 80a1 	beq.w	8015eec <_vfiprintf_r+0x1f0>
 8015daa:	2300      	movs	r3, #0
 8015dac:	f04f 32ff 	mov.w	r2, #4294967295
 8015db0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015db4:	f10a 0a01 	add.w	sl, sl, #1
 8015db8:	9304      	str	r3, [sp, #16]
 8015dba:	9307      	str	r3, [sp, #28]
 8015dbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015dc0:	931a      	str	r3, [sp, #104]	; 0x68
 8015dc2:	4654      	mov	r4, sl
 8015dc4:	2205      	movs	r2, #5
 8015dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dca:	4854      	ldr	r0, [pc, #336]	; (8015f1c <_vfiprintf_r+0x220>)
 8015dcc:	f7ea fa20 	bl	8000210 <memchr>
 8015dd0:	9a04      	ldr	r2, [sp, #16]
 8015dd2:	b9d8      	cbnz	r0, 8015e0c <_vfiprintf_r+0x110>
 8015dd4:	06d1      	lsls	r1, r2, #27
 8015dd6:	bf44      	itt	mi
 8015dd8:	2320      	movmi	r3, #32
 8015dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015dde:	0713      	lsls	r3, r2, #28
 8015de0:	bf44      	itt	mi
 8015de2:	232b      	movmi	r3, #43	; 0x2b
 8015de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015de8:	f89a 3000 	ldrb.w	r3, [sl]
 8015dec:	2b2a      	cmp	r3, #42	; 0x2a
 8015dee:	d015      	beq.n	8015e1c <_vfiprintf_r+0x120>
 8015df0:	9a07      	ldr	r2, [sp, #28]
 8015df2:	4654      	mov	r4, sl
 8015df4:	2000      	movs	r0, #0
 8015df6:	f04f 0c0a 	mov.w	ip, #10
 8015dfa:	4621      	mov	r1, r4
 8015dfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e00:	3b30      	subs	r3, #48	; 0x30
 8015e02:	2b09      	cmp	r3, #9
 8015e04:	d94d      	bls.n	8015ea2 <_vfiprintf_r+0x1a6>
 8015e06:	b1b0      	cbz	r0, 8015e36 <_vfiprintf_r+0x13a>
 8015e08:	9207      	str	r2, [sp, #28]
 8015e0a:	e014      	b.n	8015e36 <_vfiprintf_r+0x13a>
 8015e0c:	eba0 0308 	sub.w	r3, r0, r8
 8015e10:	fa09 f303 	lsl.w	r3, r9, r3
 8015e14:	4313      	orrs	r3, r2
 8015e16:	9304      	str	r3, [sp, #16]
 8015e18:	46a2      	mov	sl, r4
 8015e1a:	e7d2      	b.n	8015dc2 <_vfiprintf_r+0xc6>
 8015e1c:	9b03      	ldr	r3, [sp, #12]
 8015e1e:	1d19      	adds	r1, r3, #4
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	9103      	str	r1, [sp, #12]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	bfbb      	ittet	lt
 8015e28:	425b      	neglt	r3, r3
 8015e2a:	f042 0202 	orrlt.w	r2, r2, #2
 8015e2e:	9307      	strge	r3, [sp, #28]
 8015e30:	9307      	strlt	r3, [sp, #28]
 8015e32:	bfb8      	it	lt
 8015e34:	9204      	strlt	r2, [sp, #16]
 8015e36:	7823      	ldrb	r3, [r4, #0]
 8015e38:	2b2e      	cmp	r3, #46	; 0x2e
 8015e3a:	d10c      	bne.n	8015e56 <_vfiprintf_r+0x15a>
 8015e3c:	7863      	ldrb	r3, [r4, #1]
 8015e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8015e40:	d134      	bne.n	8015eac <_vfiprintf_r+0x1b0>
 8015e42:	9b03      	ldr	r3, [sp, #12]
 8015e44:	1d1a      	adds	r2, r3, #4
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	9203      	str	r2, [sp, #12]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	bfb8      	it	lt
 8015e4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015e52:	3402      	adds	r4, #2
 8015e54:	9305      	str	r3, [sp, #20]
 8015e56:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015f2c <_vfiprintf_r+0x230>
 8015e5a:	7821      	ldrb	r1, [r4, #0]
 8015e5c:	2203      	movs	r2, #3
 8015e5e:	4650      	mov	r0, sl
 8015e60:	f7ea f9d6 	bl	8000210 <memchr>
 8015e64:	b138      	cbz	r0, 8015e76 <_vfiprintf_r+0x17a>
 8015e66:	9b04      	ldr	r3, [sp, #16]
 8015e68:	eba0 000a 	sub.w	r0, r0, sl
 8015e6c:	2240      	movs	r2, #64	; 0x40
 8015e6e:	4082      	lsls	r2, r0
 8015e70:	4313      	orrs	r3, r2
 8015e72:	3401      	adds	r4, #1
 8015e74:	9304      	str	r3, [sp, #16]
 8015e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e7a:	4829      	ldr	r0, [pc, #164]	; (8015f20 <_vfiprintf_r+0x224>)
 8015e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015e80:	2206      	movs	r2, #6
 8015e82:	f7ea f9c5 	bl	8000210 <memchr>
 8015e86:	2800      	cmp	r0, #0
 8015e88:	d03f      	beq.n	8015f0a <_vfiprintf_r+0x20e>
 8015e8a:	4b26      	ldr	r3, [pc, #152]	; (8015f24 <_vfiprintf_r+0x228>)
 8015e8c:	bb1b      	cbnz	r3, 8015ed6 <_vfiprintf_r+0x1da>
 8015e8e:	9b03      	ldr	r3, [sp, #12]
 8015e90:	3307      	adds	r3, #7
 8015e92:	f023 0307 	bic.w	r3, r3, #7
 8015e96:	3308      	adds	r3, #8
 8015e98:	9303      	str	r3, [sp, #12]
 8015e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e9c:	443b      	add	r3, r7
 8015e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8015ea0:	e768      	b.n	8015d74 <_vfiprintf_r+0x78>
 8015ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ea6:	460c      	mov	r4, r1
 8015ea8:	2001      	movs	r0, #1
 8015eaa:	e7a6      	b.n	8015dfa <_vfiprintf_r+0xfe>
 8015eac:	2300      	movs	r3, #0
 8015eae:	3401      	adds	r4, #1
 8015eb0:	9305      	str	r3, [sp, #20]
 8015eb2:	4619      	mov	r1, r3
 8015eb4:	f04f 0c0a 	mov.w	ip, #10
 8015eb8:	4620      	mov	r0, r4
 8015eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ebe:	3a30      	subs	r2, #48	; 0x30
 8015ec0:	2a09      	cmp	r2, #9
 8015ec2:	d903      	bls.n	8015ecc <_vfiprintf_r+0x1d0>
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d0c6      	beq.n	8015e56 <_vfiprintf_r+0x15a>
 8015ec8:	9105      	str	r1, [sp, #20]
 8015eca:	e7c4      	b.n	8015e56 <_vfiprintf_r+0x15a>
 8015ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8015ed0:	4604      	mov	r4, r0
 8015ed2:	2301      	movs	r3, #1
 8015ed4:	e7f0      	b.n	8015eb8 <_vfiprintf_r+0x1bc>
 8015ed6:	ab03      	add	r3, sp, #12
 8015ed8:	9300      	str	r3, [sp, #0]
 8015eda:	462a      	mov	r2, r5
 8015edc:	4b12      	ldr	r3, [pc, #72]	; (8015f28 <_vfiprintf_r+0x22c>)
 8015ede:	a904      	add	r1, sp, #16
 8015ee0:	4630      	mov	r0, r6
 8015ee2:	f7fd fb4d 	bl	8013580 <_printf_float>
 8015ee6:	4607      	mov	r7, r0
 8015ee8:	1c78      	adds	r0, r7, #1
 8015eea:	d1d6      	bne.n	8015e9a <_vfiprintf_r+0x19e>
 8015eec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015eee:	07d9      	lsls	r1, r3, #31
 8015ef0:	d405      	bmi.n	8015efe <_vfiprintf_r+0x202>
 8015ef2:	89ab      	ldrh	r3, [r5, #12]
 8015ef4:	059a      	lsls	r2, r3, #22
 8015ef6:	d402      	bmi.n	8015efe <_vfiprintf_r+0x202>
 8015ef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015efa:	f7fe f8fe 	bl	80140fa <__retarget_lock_release_recursive>
 8015efe:	89ab      	ldrh	r3, [r5, #12]
 8015f00:	065b      	lsls	r3, r3, #25
 8015f02:	f53f af1d 	bmi.w	8015d40 <_vfiprintf_r+0x44>
 8015f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f08:	e71c      	b.n	8015d44 <_vfiprintf_r+0x48>
 8015f0a:	ab03      	add	r3, sp, #12
 8015f0c:	9300      	str	r3, [sp, #0]
 8015f0e:	462a      	mov	r2, r5
 8015f10:	4b05      	ldr	r3, [pc, #20]	; (8015f28 <_vfiprintf_r+0x22c>)
 8015f12:	a904      	add	r1, sp, #16
 8015f14:	4630      	mov	r0, r6
 8015f16:	f7fd fdd7 	bl	8013ac8 <_printf_i>
 8015f1a:	e7e4      	b.n	8015ee6 <_vfiprintf_r+0x1ea>
 8015f1c:	0801863c 	.word	0x0801863c
 8015f20:	08018646 	.word	0x08018646
 8015f24:	08013581 	.word	0x08013581
 8015f28:	08015cd9 	.word	0x08015cd9
 8015f2c:	08018642 	.word	0x08018642

08015f30 <__swbuf_r>:
 8015f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f32:	460e      	mov	r6, r1
 8015f34:	4614      	mov	r4, r2
 8015f36:	4605      	mov	r5, r0
 8015f38:	b118      	cbz	r0, 8015f42 <__swbuf_r+0x12>
 8015f3a:	6a03      	ldr	r3, [r0, #32]
 8015f3c:	b90b      	cbnz	r3, 8015f42 <__swbuf_r+0x12>
 8015f3e:	f7fd ff5f 	bl	8013e00 <__sinit>
 8015f42:	69a3      	ldr	r3, [r4, #24]
 8015f44:	60a3      	str	r3, [r4, #8]
 8015f46:	89a3      	ldrh	r3, [r4, #12]
 8015f48:	071a      	lsls	r2, r3, #28
 8015f4a:	d525      	bpl.n	8015f98 <__swbuf_r+0x68>
 8015f4c:	6923      	ldr	r3, [r4, #16]
 8015f4e:	b31b      	cbz	r3, 8015f98 <__swbuf_r+0x68>
 8015f50:	6823      	ldr	r3, [r4, #0]
 8015f52:	6922      	ldr	r2, [r4, #16]
 8015f54:	1a98      	subs	r0, r3, r2
 8015f56:	6963      	ldr	r3, [r4, #20]
 8015f58:	b2f6      	uxtb	r6, r6
 8015f5a:	4283      	cmp	r3, r0
 8015f5c:	4637      	mov	r7, r6
 8015f5e:	dc04      	bgt.n	8015f6a <__swbuf_r+0x3a>
 8015f60:	4621      	mov	r1, r4
 8015f62:	4628      	mov	r0, r5
 8015f64:	f7ff fdac 	bl	8015ac0 <_fflush_r>
 8015f68:	b9e0      	cbnz	r0, 8015fa4 <__swbuf_r+0x74>
 8015f6a:	68a3      	ldr	r3, [r4, #8]
 8015f6c:	3b01      	subs	r3, #1
 8015f6e:	60a3      	str	r3, [r4, #8]
 8015f70:	6823      	ldr	r3, [r4, #0]
 8015f72:	1c5a      	adds	r2, r3, #1
 8015f74:	6022      	str	r2, [r4, #0]
 8015f76:	701e      	strb	r6, [r3, #0]
 8015f78:	6962      	ldr	r2, [r4, #20]
 8015f7a:	1c43      	adds	r3, r0, #1
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	d004      	beq.n	8015f8a <__swbuf_r+0x5a>
 8015f80:	89a3      	ldrh	r3, [r4, #12]
 8015f82:	07db      	lsls	r3, r3, #31
 8015f84:	d506      	bpl.n	8015f94 <__swbuf_r+0x64>
 8015f86:	2e0a      	cmp	r6, #10
 8015f88:	d104      	bne.n	8015f94 <__swbuf_r+0x64>
 8015f8a:	4621      	mov	r1, r4
 8015f8c:	4628      	mov	r0, r5
 8015f8e:	f7ff fd97 	bl	8015ac0 <_fflush_r>
 8015f92:	b938      	cbnz	r0, 8015fa4 <__swbuf_r+0x74>
 8015f94:	4638      	mov	r0, r7
 8015f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f98:	4621      	mov	r1, r4
 8015f9a:	4628      	mov	r0, r5
 8015f9c:	f000 f806 	bl	8015fac <__swsetup_r>
 8015fa0:	2800      	cmp	r0, #0
 8015fa2:	d0d5      	beq.n	8015f50 <__swbuf_r+0x20>
 8015fa4:	f04f 37ff 	mov.w	r7, #4294967295
 8015fa8:	e7f4      	b.n	8015f94 <__swbuf_r+0x64>
	...

08015fac <__swsetup_r>:
 8015fac:	b538      	push	{r3, r4, r5, lr}
 8015fae:	4b2a      	ldr	r3, [pc, #168]	; (8016058 <__swsetup_r+0xac>)
 8015fb0:	4605      	mov	r5, r0
 8015fb2:	6818      	ldr	r0, [r3, #0]
 8015fb4:	460c      	mov	r4, r1
 8015fb6:	b118      	cbz	r0, 8015fc0 <__swsetup_r+0x14>
 8015fb8:	6a03      	ldr	r3, [r0, #32]
 8015fba:	b90b      	cbnz	r3, 8015fc0 <__swsetup_r+0x14>
 8015fbc:	f7fd ff20 	bl	8013e00 <__sinit>
 8015fc0:	89a3      	ldrh	r3, [r4, #12]
 8015fc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015fc6:	0718      	lsls	r0, r3, #28
 8015fc8:	d422      	bmi.n	8016010 <__swsetup_r+0x64>
 8015fca:	06d9      	lsls	r1, r3, #27
 8015fcc:	d407      	bmi.n	8015fde <__swsetup_r+0x32>
 8015fce:	2309      	movs	r3, #9
 8015fd0:	602b      	str	r3, [r5, #0]
 8015fd2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015fd6:	81a3      	strh	r3, [r4, #12]
 8015fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8015fdc:	e034      	b.n	8016048 <__swsetup_r+0x9c>
 8015fde:	0758      	lsls	r0, r3, #29
 8015fe0:	d512      	bpl.n	8016008 <__swsetup_r+0x5c>
 8015fe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015fe4:	b141      	cbz	r1, 8015ff8 <__swsetup_r+0x4c>
 8015fe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015fea:	4299      	cmp	r1, r3
 8015fec:	d002      	beq.n	8015ff4 <__swsetup_r+0x48>
 8015fee:	4628      	mov	r0, r5
 8015ff0:	f7fe ff0c 	bl	8014e0c <_free_r>
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	6363      	str	r3, [r4, #52]	; 0x34
 8015ff8:	89a3      	ldrh	r3, [r4, #12]
 8015ffa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015ffe:	81a3      	strh	r3, [r4, #12]
 8016000:	2300      	movs	r3, #0
 8016002:	6063      	str	r3, [r4, #4]
 8016004:	6923      	ldr	r3, [r4, #16]
 8016006:	6023      	str	r3, [r4, #0]
 8016008:	89a3      	ldrh	r3, [r4, #12]
 801600a:	f043 0308 	orr.w	r3, r3, #8
 801600e:	81a3      	strh	r3, [r4, #12]
 8016010:	6923      	ldr	r3, [r4, #16]
 8016012:	b94b      	cbnz	r3, 8016028 <__swsetup_r+0x7c>
 8016014:	89a3      	ldrh	r3, [r4, #12]
 8016016:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801601a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801601e:	d003      	beq.n	8016028 <__swsetup_r+0x7c>
 8016020:	4621      	mov	r1, r4
 8016022:	4628      	mov	r0, r5
 8016024:	f000 f884 	bl	8016130 <__smakebuf_r>
 8016028:	89a0      	ldrh	r0, [r4, #12]
 801602a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801602e:	f010 0301 	ands.w	r3, r0, #1
 8016032:	d00a      	beq.n	801604a <__swsetup_r+0x9e>
 8016034:	2300      	movs	r3, #0
 8016036:	60a3      	str	r3, [r4, #8]
 8016038:	6963      	ldr	r3, [r4, #20]
 801603a:	425b      	negs	r3, r3
 801603c:	61a3      	str	r3, [r4, #24]
 801603e:	6923      	ldr	r3, [r4, #16]
 8016040:	b943      	cbnz	r3, 8016054 <__swsetup_r+0xa8>
 8016042:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016046:	d1c4      	bne.n	8015fd2 <__swsetup_r+0x26>
 8016048:	bd38      	pop	{r3, r4, r5, pc}
 801604a:	0781      	lsls	r1, r0, #30
 801604c:	bf58      	it	pl
 801604e:	6963      	ldrpl	r3, [r4, #20]
 8016050:	60a3      	str	r3, [r4, #8]
 8016052:	e7f4      	b.n	801603e <__swsetup_r+0x92>
 8016054:	2000      	movs	r0, #0
 8016056:	e7f7      	b.n	8016048 <__swsetup_r+0x9c>
 8016058:	20000094 	.word	0x20000094

0801605c <_raise_r>:
 801605c:	291f      	cmp	r1, #31
 801605e:	b538      	push	{r3, r4, r5, lr}
 8016060:	4604      	mov	r4, r0
 8016062:	460d      	mov	r5, r1
 8016064:	d904      	bls.n	8016070 <_raise_r+0x14>
 8016066:	2316      	movs	r3, #22
 8016068:	6003      	str	r3, [r0, #0]
 801606a:	f04f 30ff 	mov.w	r0, #4294967295
 801606e:	bd38      	pop	{r3, r4, r5, pc}
 8016070:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016072:	b112      	cbz	r2, 801607a <_raise_r+0x1e>
 8016074:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016078:	b94b      	cbnz	r3, 801608e <_raise_r+0x32>
 801607a:	4620      	mov	r0, r4
 801607c:	f000 f830 	bl	80160e0 <_getpid_r>
 8016080:	462a      	mov	r2, r5
 8016082:	4601      	mov	r1, r0
 8016084:	4620      	mov	r0, r4
 8016086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801608a:	f000 b817 	b.w	80160bc <_kill_r>
 801608e:	2b01      	cmp	r3, #1
 8016090:	d00a      	beq.n	80160a8 <_raise_r+0x4c>
 8016092:	1c59      	adds	r1, r3, #1
 8016094:	d103      	bne.n	801609e <_raise_r+0x42>
 8016096:	2316      	movs	r3, #22
 8016098:	6003      	str	r3, [r0, #0]
 801609a:	2001      	movs	r0, #1
 801609c:	e7e7      	b.n	801606e <_raise_r+0x12>
 801609e:	2400      	movs	r4, #0
 80160a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80160a4:	4628      	mov	r0, r5
 80160a6:	4798      	blx	r3
 80160a8:	2000      	movs	r0, #0
 80160aa:	e7e0      	b.n	801606e <_raise_r+0x12>

080160ac <raise>:
 80160ac:	4b02      	ldr	r3, [pc, #8]	; (80160b8 <raise+0xc>)
 80160ae:	4601      	mov	r1, r0
 80160b0:	6818      	ldr	r0, [r3, #0]
 80160b2:	f7ff bfd3 	b.w	801605c <_raise_r>
 80160b6:	bf00      	nop
 80160b8:	20000094 	.word	0x20000094

080160bc <_kill_r>:
 80160bc:	b538      	push	{r3, r4, r5, lr}
 80160be:	4d07      	ldr	r5, [pc, #28]	; (80160dc <_kill_r+0x20>)
 80160c0:	2300      	movs	r3, #0
 80160c2:	4604      	mov	r4, r0
 80160c4:	4608      	mov	r0, r1
 80160c6:	4611      	mov	r1, r2
 80160c8:	602b      	str	r3, [r5, #0]
 80160ca:	f7fd f94d 	bl	8013368 <_kill>
 80160ce:	1c43      	adds	r3, r0, #1
 80160d0:	d102      	bne.n	80160d8 <_kill_r+0x1c>
 80160d2:	682b      	ldr	r3, [r5, #0]
 80160d4:	b103      	cbz	r3, 80160d8 <_kill_r+0x1c>
 80160d6:	6023      	str	r3, [r4, #0]
 80160d8:	bd38      	pop	{r3, r4, r5, pc}
 80160da:	bf00      	nop
 80160dc:	20009f9c 	.word	0x20009f9c

080160e0 <_getpid_r>:
 80160e0:	f7fd b93a 	b.w	8013358 <_getpid>

080160e4 <__swhatbuf_r>:
 80160e4:	b570      	push	{r4, r5, r6, lr}
 80160e6:	460c      	mov	r4, r1
 80160e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160ec:	2900      	cmp	r1, #0
 80160ee:	b096      	sub	sp, #88	; 0x58
 80160f0:	4615      	mov	r5, r2
 80160f2:	461e      	mov	r6, r3
 80160f4:	da0d      	bge.n	8016112 <__swhatbuf_r+0x2e>
 80160f6:	89a3      	ldrh	r3, [r4, #12]
 80160f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80160fc:	f04f 0100 	mov.w	r1, #0
 8016100:	bf0c      	ite	eq
 8016102:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016106:	2340      	movne	r3, #64	; 0x40
 8016108:	2000      	movs	r0, #0
 801610a:	6031      	str	r1, [r6, #0]
 801610c:	602b      	str	r3, [r5, #0]
 801610e:	b016      	add	sp, #88	; 0x58
 8016110:	bd70      	pop	{r4, r5, r6, pc}
 8016112:	466a      	mov	r2, sp
 8016114:	f000 f848 	bl	80161a8 <_fstat_r>
 8016118:	2800      	cmp	r0, #0
 801611a:	dbec      	blt.n	80160f6 <__swhatbuf_r+0x12>
 801611c:	9901      	ldr	r1, [sp, #4]
 801611e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016122:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016126:	4259      	negs	r1, r3
 8016128:	4159      	adcs	r1, r3
 801612a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801612e:	e7eb      	b.n	8016108 <__swhatbuf_r+0x24>

08016130 <__smakebuf_r>:
 8016130:	898b      	ldrh	r3, [r1, #12]
 8016132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016134:	079d      	lsls	r5, r3, #30
 8016136:	4606      	mov	r6, r0
 8016138:	460c      	mov	r4, r1
 801613a:	d507      	bpl.n	801614c <__smakebuf_r+0x1c>
 801613c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016140:	6023      	str	r3, [r4, #0]
 8016142:	6123      	str	r3, [r4, #16]
 8016144:	2301      	movs	r3, #1
 8016146:	6163      	str	r3, [r4, #20]
 8016148:	b002      	add	sp, #8
 801614a:	bd70      	pop	{r4, r5, r6, pc}
 801614c:	ab01      	add	r3, sp, #4
 801614e:	466a      	mov	r2, sp
 8016150:	f7ff ffc8 	bl	80160e4 <__swhatbuf_r>
 8016154:	9900      	ldr	r1, [sp, #0]
 8016156:	4605      	mov	r5, r0
 8016158:	4630      	mov	r0, r6
 801615a:	f7fe fecb 	bl	8014ef4 <_malloc_r>
 801615e:	b948      	cbnz	r0, 8016174 <__smakebuf_r+0x44>
 8016160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016164:	059a      	lsls	r2, r3, #22
 8016166:	d4ef      	bmi.n	8016148 <__smakebuf_r+0x18>
 8016168:	f023 0303 	bic.w	r3, r3, #3
 801616c:	f043 0302 	orr.w	r3, r3, #2
 8016170:	81a3      	strh	r3, [r4, #12]
 8016172:	e7e3      	b.n	801613c <__smakebuf_r+0xc>
 8016174:	89a3      	ldrh	r3, [r4, #12]
 8016176:	6020      	str	r0, [r4, #0]
 8016178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801617c:	81a3      	strh	r3, [r4, #12]
 801617e:	9b00      	ldr	r3, [sp, #0]
 8016180:	6163      	str	r3, [r4, #20]
 8016182:	9b01      	ldr	r3, [sp, #4]
 8016184:	6120      	str	r0, [r4, #16]
 8016186:	b15b      	cbz	r3, 80161a0 <__smakebuf_r+0x70>
 8016188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801618c:	4630      	mov	r0, r6
 801618e:	f000 f81d 	bl	80161cc <_isatty_r>
 8016192:	b128      	cbz	r0, 80161a0 <__smakebuf_r+0x70>
 8016194:	89a3      	ldrh	r3, [r4, #12]
 8016196:	f023 0303 	bic.w	r3, r3, #3
 801619a:	f043 0301 	orr.w	r3, r3, #1
 801619e:	81a3      	strh	r3, [r4, #12]
 80161a0:	89a3      	ldrh	r3, [r4, #12]
 80161a2:	431d      	orrs	r5, r3
 80161a4:	81a5      	strh	r5, [r4, #12]
 80161a6:	e7cf      	b.n	8016148 <__smakebuf_r+0x18>

080161a8 <_fstat_r>:
 80161a8:	b538      	push	{r3, r4, r5, lr}
 80161aa:	4d07      	ldr	r5, [pc, #28]	; (80161c8 <_fstat_r+0x20>)
 80161ac:	2300      	movs	r3, #0
 80161ae:	4604      	mov	r4, r0
 80161b0:	4608      	mov	r0, r1
 80161b2:	4611      	mov	r1, r2
 80161b4:	602b      	str	r3, [r5, #0]
 80161b6:	f7fd f91a 	bl	80133ee <_fstat>
 80161ba:	1c43      	adds	r3, r0, #1
 80161bc:	d102      	bne.n	80161c4 <_fstat_r+0x1c>
 80161be:	682b      	ldr	r3, [r5, #0]
 80161c0:	b103      	cbz	r3, 80161c4 <_fstat_r+0x1c>
 80161c2:	6023      	str	r3, [r4, #0]
 80161c4:	bd38      	pop	{r3, r4, r5, pc}
 80161c6:	bf00      	nop
 80161c8:	20009f9c 	.word	0x20009f9c

080161cc <_isatty_r>:
 80161cc:	b538      	push	{r3, r4, r5, lr}
 80161ce:	4d06      	ldr	r5, [pc, #24]	; (80161e8 <_isatty_r+0x1c>)
 80161d0:	2300      	movs	r3, #0
 80161d2:	4604      	mov	r4, r0
 80161d4:	4608      	mov	r0, r1
 80161d6:	602b      	str	r3, [r5, #0]
 80161d8:	f7fd f919 	bl	801340e <_isatty>
 80161dc:	1c43      	adds	r3, r0, #1
 80161de:	d102      	bne.n	80161e6 <_isatty_r+0x1a>
 80161e0:	682b      	ldr	r3, [r5, #0]
 80161e2:	b103      	cbz	r3, 80161e6 <_isatty_r+0x1a>
 80161e4:	6023      	str	r3, [r4, #0]
 80161e6:	bd38      	pop	{r3, r4, r5, pc}
 80161e8:	20009f9c 	.word	0x20009f9c

080161ec <_init>:
 80161ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161ee:	bf00      	nop
 80161f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80161f2:	bc08      	pop	{r3}
 80161f4:	469e      	mov	lr, r3
 80161f6:	4770      	bx	lr

080161f8 <_fini>:
 80161f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161fa:	bf00      	nop
 80161fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80161fe:	bc08      	pop	{r3}
 8016200:	469e      	mov	lr, r3
 8016202:	4770      	bx	lr
