
RTOS_project_101124.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000140ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024c4  080142c0  080142c0  000242c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016784  08016784  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08016784  08016784  00026784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801678c  0801678c  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801678c  0801678c  0002678c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016790  08016790  00026790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08016794  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007730  20000204  08016998  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20007934  08016998  00037934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028373  00000000  00000000  00030277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005685  00000000  00000000  000585ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022a0  00000000  00000000  0005dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001afd  00000000  00000000  0005ff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002af0e  00000000  00000000  00061a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002de9d  00000000  00000000  0008c91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f66b6  00000000  00000000  000ba7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a38c  00000000  00000000  001b0e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001bb1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080142a4 	.word	0x080142a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	080142a4 	.word	0x080142a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
extern TIM_HandleTypeDef htim11;
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <configureTimerForRunTimeStats+0x10>)
 8000eea:	f007 fc9d 	bl	8008828 <HAL_TIM_Base_Start_IT>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20002898 	.word	0x20002898

08000ef8 <getRunTimeCounterValue>:
extern volatile unsigned long ulHighFrequencyTimerTicks;

__weak unsigned long getRunTimeCounterValue(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <getRunTimeCounterValue+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20002994 	.word	0x20002994

08000f10 <vPortSuppressTicksAndSleep>:
/* USER CODE END 1 */

/* USER CODE BEGIN VPORT_SUPPORT_TICKS_AND_SLEEP */
__weak void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  // Generated when configUSE_TICKLESS_IDLE == 2.
  // Function called in tasks.c (in portTASK_FUNCTION).
  // TO BE COMPLETED or TO BE REPLACED by a user one, overriding that weak one.
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_write>:
#define ADC_RESOLUTION 4095
#define ADC_SAMPLES 100

extern UART_HandleTypeDef huart2;

int _write(int fd, char *ptr, int len){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d002      	beq.n	8000f3c <_write+0x18>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d111      	bne.n	8000f60 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <_write+0x48>)
 8000f48:	f008 f8ed 	bl	8009126 <HAL_UART_Transmit>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <_write+0x36>
            return len;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	e004      	b.n	8000f64 <_write+0x40>
        else
            return -1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e001      	b.n	8000f64 <_write+0x40>
    }
    return -1;
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200028e0 	.word	0x200028e0

08000f70 <process_adc_buffer>:

// Process half a buffer full of data
static inline void process_adc_buffer(uint16_t *buffer){
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    uint32_t sum1 = 0, sum2 = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < ADC_SAMPLES; ++i) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e016      	b.n	8000fb4 <process_adc_buffer+0x44>
        sum1 += buffer[i * 2];
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	4413      	add	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]
        sum2 += buffer[1 + i * 2];
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4413      	add	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < ADC_SAMPLES; ++i) {
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b63      	cmp	r3, #99	; 0x63
 8000fb8:	dde5      	ble.n	8000f86 <process_adc_buffer+0x16>
    }

    vref_avg = sum2 / ADC_SAMPLES;
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4a30      	ldr	r2, [pc, #192]	; (8001080 <process_adc_buffer+0x110>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <process_adc_buffer+0x114>)
 8000fc8:	801a      	strh	r2, [r3, #0]
    temp_avg = sum1 / ADC_SAMPLES;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	4a2c      	ldr	r2, [pc, #176]	; (8001080 <process_adc_buffer+0x110>)
 8000fce:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <process_adc_buffer+0x118>)
 8000fd8:	801a      	strh	r2, [r3, #0]

    // VDDA can be calculated based on the measured vref and the calibration data
    vdda = (float) VREFINT_CAL_VREF * (float) *VREFINT_CAL_ADDR / vref_avg / 1000;
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <process_adc_buffer+0x11c>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001090 <process_adc_buffer+0x120>
 8000fea:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <process_adc_buffer+0x114>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ffe:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001094 <process_adc_buffer+0x124>
 8001002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <process_adc_buffer+0x128>)
 8001008:	edc3 7a00 	vstr	s15, [r3]

    // Knowing vdda and the resolution of adc - the actual voltage can be calculated
    vref = (float) vdda / ADC_RESOLUTION * vref_avg;
 800100c:	4b22      	ldr	r3, [pc, #136]	; (8001098 <process_adc_buffer+0x128>)
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	eddf 6a22 	vldr	s13, [pc, #136]	; 800109c <process_adc_buffer+0x12c>
 8001016:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <process_adc_buffer+0x114>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <process_adc_buffer+0x130>)
 800102c:	edc3 7a00 	vstr	s15, [r3]
    //vref = __LL_ADC_CALC_VREFANALOG_VOLTAGE(vref_avg, ADC_RESOLUTION_12B);

    temp = (float) ( (float)( (float)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP) / (float)(*TEMPSENSOR_CAL2_ADDR - *TEMPSENSOR_CAL1_ADDR)) * (temp_avg - *TEMPSENSOR_CAL1_ADDR) + TEMPSENSOR_CAL1_TEMP);
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <process_adc_buffer+0x134>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <process_adc_buffer+0x138>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001044:	eddf 6a19 	vldr	s13, [pc, #100]	; 80010ac <process_adc_buffer+0x13c>
 8001048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <process_adc_buffer+0x118>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <process_adc_buffer+0x138>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001064:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001068:	ee77 7a87 	vadd.f32	s15, s15, s14
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <process_adc_buffer+0x140>)
 800106e:	edc3 7a00 	vstr	s15, [r3]
    //temp = __LL_ADC_CALC_TEMPERATURE(vref, temp_avg, ADC_RESOLUTION_12B);
}
 8001072:	bf00      	nop
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	51eb851f 	.word	0x51eb851f
 8001084:	20000224 	.word	0x20000224
 8001088:	20000226 	.word	0x20000226
 800108c:	1fff7a2a 	.word	0x1fff7a2a
 8001090:	454e4000 	.word	0x454e4000
 8001094:	447a0000 	.word	0x447a0000
 8001098:	20000228 	.word	0x20000228
 800109c:	457ff000 	.word	0x457ff000
 80010a0:	2000022c 	.word	0x2000022c
 80010a4:	1fff7a2e 	.word	0x1fff7a2e
 80010a8:	1fff7a2c 	.word	0x1fff7a2c
 80010ac:	42a00000 	.word	0x42a00000
 80010b0:	20000230 	.word	0x20000230

080010b4 <buffclear>:
	int i=0;
	while(*buf++!='\0'){
	i++;}
	return i;
}
void buffclear(char*string){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff f8f7 	bl	80002b0 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	72fb      	strb	r3, [r7, #11]
	for(int i=0;i<len;i++){
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e007      	b.n	80010dc <buffclear+0x28>
		string[i]='\0';
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<len;i++){
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3301      	adds	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dbf3      	blt.n	80010cc <buffclear+0x18>
	}
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <send_uart>:

void send_uart(char*string){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff f8d9 	bl	80002b0 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, len, 2000);
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	b29a      	uxth	r2, r3
 8001106:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <send_uart+0x30>)
 800110e:	f008 f80a 	bl	8009126 <HAL_UART_Transmit>
	buffclear(string);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffce 	bl	80010b4 <buffclear>
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200028e0 	.word	0x200028e0

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112a:	f001 faf1 	bl	8002710 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112e:	f000 f8c9 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001132:	f000 fb97 	bl	8001864 <MX_GPIO_Init>
  MX_DMA_Init();
 8001136:	f000 fb75 	bl	8001824 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800113a:	f000 fb49 	bl	80017d0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800113e:	f000 fa13 	bl	8001568 <MX_RTC_Init>
  MX_SPI2_Init();
 8001142:	f000 fa9d 	bl	8001680 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001146:	f008 fb63 	bl	8009810 <MX_FATFS_Init>
  MX_ADC1_Init();
 800114a:	f000 f92b 	bl	80013a4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800114e:	f000 f98b 	bl	8001468 <MX_ADC2_Init>
  MX_I2C1_Init();
 8001152:	f000 f9db 	bl	800150c <MX_I2C1_Init>
  MX_TIM3_Init();
 8001156:	f000 fac9 	bl	80016ec <MX_TIM3_Init>
  MX_TIM11_Init();
 800115a:	f000 fb15 	bl	8001788 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800115e:	f00b fde1 	bl	800cd24 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  MutexOne = xSemaphoreCreateMutex();
 8001162:	2001      	movs	r0, #1
 8001164:	f00c fa57 	bl	800d616 <xQueueCreateMutex>
 8001168:	4603      	mov	r3, r0
 800116a:	4a3b      	ldr	r2, [pc, #236]	; (8001258 <main+0x134>)
 800116c:	6013      	str	r3, [r2, #0]
  binarySemaphoreISR = xSemaphoreCreateBinary();
 800116e:	2203      	movs	r2, #3
 8001170:	2100      	movs	r1, #0
 8001172:	2001      	movs	r0, #1
 8001174:	f00c f9d8 	bl	800d528 <xQueueGenericCreate>
 8001178:	4603      	mov	r3, r0
 800117a:	4a38      	ldr	r2, [pc, #224]	; (800125c <main+0x138>)
 800117c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  buttonPressTimer = xTimerCreate("ButtonPressTimer", pdMS_TO_TICKS(150), pdTRUE, NULL, vTimerCallback);
 800117e:	4b38      	ldr	r3, [pc, #224]	; (8001260 <main+0x13c>)
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	2201      	movs	r2, #1
 8001186:	2196      	movs	r1, #150	; 0x96
 8001188:	4836      	ldr	r0, [pc, #216]	; (8001264 <main+0x140>)
 800118a:	f00e fa21 	bl	800f5d0 <xTimerCreate>
 800118e:	4603      	mov	r3, r0
 8001190:	4a35      	ldr	r2, [pc, #212]	; (8001268 <main+0x144>)
 8001192:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idleTask */
  idleTaskHandle = osThreadNew(StartDefaultTask, NULL, &idleTask_attributes);
 8001194:	4a35      	ldr	r2, [pc, #212]	; (800126c <main+0x148>)
 8001196:	2100      	movs	r1, #0
 8001198:	4835      	ldr	r0, [pc, #212]	; (8001270 <main+0x14c>)
 800119a:	f00b fe0d 	bl	800cdb8 <osThreadNew>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a34      	ldr	r2, [pc, #208]	; (8001274 <main+0x150>)
 80011a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(vUARTtask,"UART_Task", 128, NULL, 2, &UART_Handle);// at 256-Stack Size HELP doesn't prints on OLED SCREEN. ONLY GOD KNOWS WHY!!
 80011a4:	4b34      	ldr	r3, [pc, #208]	; (8001278 <main+0x154>)
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	2302      	movs	r3, #2
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2300      	movs	r3, #0
 80011ae:	2280      	movs	r2, #128	; 0x80
 80011b0:	4932      	ldr	r1, [pc, #200]	; (800127c <main+0x158>)
 80011b2:	4833      	ldr	r0, [pc, #204]	; (8001280 <main+0x15c>)
 80011b4:	f00d f975 	bl	800e4a2 <xTaskCreate>
  xTaskCreate(vRCWLtask,"RCWL_Tsk", 512, NULL, 2, &RCWL_Handle);
 80011b8:	4b32      	ldr	r3, [pc, #200]	; (8001284 <main+0x160>)
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	2302      	movs	r3, #2
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2300      	movs	r3, #0
 80011c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c6:	4930      	ldr	r1, [pc, #192]	; (8001288 <main+0x164>)
 80011c8:	4830      	ldr	r0, [pc, #192]	; (800128c <main+0x168>)
 80011ca:	f00d f96a 	bl	800e4a2 <xTaskCreate>
  xTaskCreate(vMQ135task,"MQ135_Task", 512, NULL, 2, &MQ135_Handle);
 80011ce:	4b30      	ldr	r3, [pc, #192]	; (8001290 <main+0x16c>)
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	2302      	movs	r3, #2
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011dc:	492d      	ldr	r1, [pc, #180]	; (8001294 <main+0x170>)
 80011de:	482e      	ldr	r0, [pc, #184]	; (8001298 <main+0x174>)
 80011e0:	f00d f95f 	bl	800e4a2 <xTaskCreate>
  xTaskCreate(vInternalTemptask,"Temp_Task", 512, NULL, 2, &InternalTemp_Handle);
 80011e4:	4b2d      	ldr	r3, [pc, #180]	; (800129c <main+0x178>)
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	2302      	movs	r3, #2
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2300      	movs	r3, #0
 80011ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f2:	492b      	ldr	r1, [pc, #172]	; (80012a0 <main+0x17c>)
 80011f4:	482b      	ldr	r0, [pc, #172]	; (80012a4 <main+0x180>)
 80011f6:	f00d f954 	bl	800e4a2 <xTaskCreate>
  xTaskCreate(vRTCtask,"RTC_Task", 512, NULL, 2, &RTC_Handle);///////
 80011fa:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <main+0x184>)
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	2302      	movs	r3, #2
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2300      	movs	r3, #0
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	4928      	ldr	r1, [pc, #160]	; (80012ac <main+0x188>)
 800120a:	4829      	ldr	r0, [pc, #164]	; (80012b0 <main+0x18c>)
 800120c:	f00d f949 	bl	800e4a2 <xTaskCreate>
  xTaskCreate(vSwitchtask,"Switch_Task", 1024, NULL, 3, &Switch_Handle);
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <main+0x190>)
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	2303      	movs	r3, #3
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2300      	movs	r3, #0
 800121a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121e:	4926      	ldr	r1, [pc, #152]	; (80012b8 <main+0x194>)
 8001220:	4826      	ldr	r0, [pc, #152]	; (80012bc <main+0x198>)
 8001222:	f00d f93e 	bl	800e4a2 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  SDCard_Init();
 8001226:	f000 fbb3 	bl	8001990 <SDCard_Init>
  MX_FREERTOS_Init();
 800122a:	f000 fbd3 	bl	80019d4 <MX_FREERTOS_Init>
  SSD1306_Init();
 800122e:	f00f f96d 	bl	801050c <SSD1306_Init>
  SSD1306_Clear();
 8001232:	f00f fb90 	bl	8010956 <SSD1306_Clear>

  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001236:	f00b fd99 	bl	800cd6c <osKernelStart>
  {
//  	SSD1306_GotoXY (10,10); // goto 10, 10
//		SSD1306_Puts("HELLOOOOOOOOWERT", &Font_7x10, 1);
//		SSD1306_UpdateScreen();
  	char motionState[20];
  	sprintf(motionState,"Motion");
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4920      	ldr	r1, [pc, #128]	; (80012c0 <main+0x19c>)
 800123e:	4618      	mov	r0, r3
 8001240:	f010 fe80 	bl	8011f44 <siprintf>
  	send_SDCard(motionState);
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fbfc 	bl	8001a44 <send_SDCard>
  	HAL_Delay(500);
 800124c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001250:	f001 faa0 	bl	8002794 <HAL_Delay>
  {
 8001254:	e7f1      	b.n	800123a <main+0x116>
 8001256:	bf00      	nop
 8001258:	20002940 	.word	0x20002940
 800125c:	20002944 	.word	0x20002944
 8001260:	08001e6d 	.word	0x08001e6d
 8001264:	080142cc 	.word	0x080142cc
 8001268:	20002948 	.word	0x20002948
 800126c:	080144d4 	.word	0x080144d4
 8001270:	08001f3d 	.word	0x08001f3d
 8001274:	20002924 	.word	0x20002924
 8001278:	20002930 	.word	0x20002930
 800127c:	080142e0 	.word	0x080142e0
 8001280:	08001ab5 	.word	0x08001ab5
 8001284:	20002928 	.word	0x20002928
 8001288:	080142ec 	.word	0x080142ec
 800128c:	08001c99 	.word	0x08001c99
 8001290:	20002934 	.word	0x20002934
 8001294:	080142f8 	.word	0x080142f8
 8001298:	08001df1 	.word	0x08001df1
 800129c:	20002938 	.word	0x20002938
 80012a0:	08014304 	.word	0x08014304
 80012a4:	08001c15 	.word	0x08001c15
 80012a8:	2000292c 	.word	0x2000292c
 80012ac:	08014310 	.word	0x08014310
 80012b0:	08001d1d 	.word	0x08001d1d
 80012b4:	2000293c 	.word	0x2000293c
 80012b8:	0801431c 	.word	0x0801431c
 80012bc:	08001ac1 	.word	0x08001ac1
 80012c0:	08014328 	.word	0x08014328

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	; 0x50
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	2234      	movs	r2, #52	; 0x34
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f010 fe99 	bl	801200a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	4b2b      	ldr	r3, [pc, #172]	; (800139c <SystemClock_Config+0xd8>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a2a      	ldr	r2, [pc, #168]	; (800139c <SystemClock_Config+0xd8>)
 80012f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <SystemClock_Config+0xd8>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001304:	2300      	movs	r3, #0
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <SystemClock_Config+0xdc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001310:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <SystemClock_Config+0xdc>)
 8001312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <SystemClock_Config+0xdc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001324:	230a      	movs	r3, #10
 8001326:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001328:	2301      	movs	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800132c:	2301      	movs	r3, #1
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001330:	2310      	movs	r3, #16
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001334:	2301      	movs	r3, #1
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800133c:	2300      	movs	r3, #0
 800133e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001340:	2308      	movs	r3, #8
 8001342:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001344:	2354      	movs	r3, #84	; 0x54
 8001346:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001348:	2302      	movs	r3, #2
 800134a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800134c:	2302      	movs	r3, #2
 800134e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001350:	2302      	movs	r3, #2
 8001352:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4618      	mov	r0, r3
 800135a:	f005 ff1d 	bl	8007198 <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001364:	f000 fe20 	bl	8001fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136c:	2302      	movs	r3, #2
 800136e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001378:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	2102      	movs	r1, #2
 8001384:	4618      	mov	r0, r3
 8001386:	f005 f861 	bl	800644c <HAL_RCC_ClockConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001390:	f000 fe0a 	bl	8001fa8 <Error_Handler>
  }
}
 8001394:	bf00      	nop
 8001396:	3750      	adds	r7, #80	; 0x50
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013aa:	463b      	mov	r3, r7
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <MX_ADC1_Init+0xb8>)
 80013b8:	4a29      	ldr	r2, [pc, #164]	; (8001460 <MX_ADC1_Init+0xbc>)
 80013ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <MX_ADC1_Init+0xb8>)
 80013be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <MX_ADC1_Init+0xb8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013ca:	4b24      	ldr	r3, [pc, #144]	; (800145c <MX_ADC1_Init+0xb8>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <MX_ADC1_Init+0xb8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_ADC1_Init+0xb8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <MX_ADC1_Init+0xb8>)
 80013e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <MX_ADC1_Init+0xb8>)
 80013e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_ADC1_Init+0xb8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_ADC1_Init+0xb8>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_ADC1_Init+0xb8>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <MX_ADC1_Init+0xb8>)
 8001404:	2201      	movs	r2, #1
 8001406:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001408:	4814      	ldr	r0, [pc, #80]	; (800145c <MX_ADC1_Init+0xb8>)
 800140a:	f001 f9e7 	bl	80027dc <HAL_ADC_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001414:	f000 fdc8 	bl	8001fa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_ADC1_Init+0xc0>)
 800141a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800141c:	2301      	movs	r3, #1
 800141e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001420:	2307      	movs	r3, #7
 8001422:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	4619      	mov	r1, r3
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <MX_ADC1_Init+0xb8>)
 800142a:	f001 fcd3 	bl	8002dd4 <HAL_ADC_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001434:	f000 fdb8 	bl	8001fa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001438:	2311      	movs	r3, #17
 800143a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800143c:	2302      	movs	r3, #2
 800143e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001440:	463b      	mov	r3, r7
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_ADC1_Init+0xb8>)
 8001446:	f001 fcc5 	bl	8002dd4 <HAL_ADC_ConfigChannel>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001450:	f000 fdaa 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20002694 	.word	0x20002694
 8001460:	40012000 	.word	0x40012000
 8001464:	10000012 	.word	0x10000012

08001468 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146e:	463b      	mov	r3, r7
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <MX_ADC2_Init+0x98>)
 800147c:	4a21      	ldr	r2, [pc, #132]	; (8001504 <MX_ADC2_Init+0x9c>)
 800147e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <MX_ADC2_Init+0x98>)
 8001482:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001486:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <MX_ADC2_Init+0x98>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <MX_ADC2_Init+0x98>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_ADC2_Init+0x98>)
 8001496:	2200      	movs	r2, #0
 8001498:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <MX_ADC2_Init+0x98>)
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_ADC2_Init+0x98>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <MX_ADC2_Init+0x98>)
 80014aa:	4a17      	ldr	r2, [pc, #92]	; (8001508 <MX_ADC2_Init+0xa0>)
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_ADC2_Init+0x98>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_ADC2_Init+0x98>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_ADC2_Init+0x98>)
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_ADC2_Init+0x98>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014c8:	480d      	ldr	r0, [pc, #52]	; (8001500 <MX_ADC2_Init+0x98>)
 80014ca:	f001 f987 	bl	80027dc <HAL_ADC_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80014d4:	f000 fd68 	bl	8001fa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014d8:	2301      	movs	r3, #1
 80014da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014dc:	2301      	movs	r3, #1
 80014de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80014e0:	2307      	movs	r3, #7
 80014e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_ADC2_Init+0x98>)
 80014ea:	f001 fc73 	bl	8002dd4 <HAL_ADC_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80014f4:	f000 fd58 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200026dc 	.word	0x200026dc
 8001504:	40012100 	.word	0x40012100
 8001508:	0f000001 	.word	0x0f000001

0800150c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_I2C1_Init+0x50>)
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <MX_I2C1_Init+0x54>)
 8001514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_I2C1_Init+0x50>)
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <MX_I2C1_Init+0x58>)
 800151a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_I2C1_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_I2C1_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_I2C1_Init+0x50>)
 800152a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800152e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <MX_I2C1_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_I2C1_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <MX_I2C1_Init+0x50>)
 800154a:	f002 fd53 	bl	8003ff4 <HAL_I2C_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001554:	f000 fd28 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20002784 	.word	0x20002784
 8001560:	40005400 	.word	0x40005400
 8001564:	00061a80 	.word	0x00061a80

08001568 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b090      	sub	sp, #64	; 0x40
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800156e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800157e:	2300      	movs	r3, #0
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001582:	463b      	mov	r3, r7
 8001584:	2228      	movs	r2, #40	; 0x28
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f010 fd3e 	bl	801200a <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800158e:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <MX_RTC_Init+0x110>)
 8001590:	4a3a      	ldr	r2, [pc, #232]	; (800167c <MX_RTC_Init+0x114>)
 8001592:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001594:	4b38      	ldr	r3, [pc, #224]	; (8001678 <MX_RTC_Init+0x110>)
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800159a:	4b37      	ldr	r3, [pc, #220]	; (8001678 <MX_RTC_Init+0x110>)
 800159c:	227f      	movs	r2, #127	; 0x7f
 800159e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015a0:	4b35      	ldr	r3, [pc, #212]	; (8001678 <MX_RTC_Init+0x110>)
 80015a2:	22ff      	movs	r2, #255	; 0xff
 80015a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015a6:	4b34      	ldr	r3, [pc, #208]	; (8001678 <MX_RTC_Init+0x110>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015ac:	4b32      	ldr	r3, [pc, #200]	; (8001678 <MX_RTC_Init+0x110>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <MX_RTC_Init+0x110>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015b8:	482f      	ldr	r0, [pc, #188]	; (8001678 <MX_RTC_Init+0x110>)
 80015ba:	f006 f88b 	bl	80076d4 <HAL_RTC_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80015c4:	f000 fcf0 	bl	8001fa8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 80015c8:	2311      	movs	r3, #17
 80015ca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 42;
 80015ce:	232a      	movs	r3, #42	; 0x2a
 80015d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 30;
 80015d4:	231e      	movs	r3, #30
 80015d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015da:	2300      	movs	r3, #0
 80015dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80015e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e6:	2200      	movs	r2, #0
 80015e8:	4619      	mov	r1, r3
 80015ea:	4823      	ldr	r0, [pc, #140]	; (8001678 <MX_RTC_Init+0x110>)
 80015ec:	f006 f8e8 	bl	80077c0 <HAL_RTC_SetTime>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80015f6:	f000 fcd7 	bl	8001fa8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80015fa:	2307      	movs	r3, #7
 80015fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 8001600:	2311      	movs	r3, #17
 8001602:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 10;
 8001606:	230a      	movs	r3, #10
 8001608:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 24;
 800160c:	2318      	movs	r3, #24
 800160e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001616:	2200      	movs	r2, #0
 8001618:	4619      	mov	r1, r3
 800161a:	4817      	ldr	r0, [pc, #92]	; (8001678 <MX_RTC_Init+0x110>)
 800161c:	f006 f9c8 	bl	80079b0 <HAL_RTC_SetDate>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001626:	f000 fcbf 	bl	8001fa8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800164e:	2301      	movs	r3, #1
 8001650:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800165a:	463b      	mov	r3, r7
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_RTC_Init+0x110>)
 8001662:	f006 fa78 	bl	8007b56 <HAL_RTC_SetAlarm>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800166c:	f000 fc9c 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	3740      	adds	r7, #64	; 0x40
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200027d8 	.word	0x200027d8
 800167c:	40002800 	.word	0x40002800

08001680 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <MX_SPI2_Init+0x64>)
 8001686:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <MX_SPI2_Init+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <MX_SPI2_Init+0x64>)
 800168c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001690:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_SPI2_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <MX_SPI2_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_SPI2_Init+0x64>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_SPI2_Init+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_SPI2_Init+0x64>)
 80016ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_SPI2_Init+0x64>)
 80016b4:	2208      	movs	r2, #8
 80016b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <MX_SPI2_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_SPI2_Init+0x64>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <MX_SPI2_Init+0x64>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_SPI2_Init+0x64>)
 80016cc:	220a      	movs	r2, #10
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <MX_SPI2_Init+0x64>)
 80016d2:	f006 fc27 	bl	8007f24 <HAL_SPI_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016dc:	f000 fc64 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200027f8 	.word	0x200027f8
 80016e8:	40003800 	.word	0x40003800

080016ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	463b      	mov	r3, r7
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_TIM3_Init+0x94>)
 800170a:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <MX_TIM3_Init+0x98>)
 800170c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <MX_TIM3_Init+0x94>)
 8001710:	f240 3247 	movw	r2, #839	; 0x347
 8001714:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_TIM3_Init+0x94>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_TIM3_Init+0x94>)
 800171e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001722:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <MX_TIM3_Init+0x94>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_TIM3_Init+0x94>)
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001730:	4813      	ldr	r0, [pc, #76]	; (8001780 <MX_TIM3_Init+0x94>)
 8001732:	f007 f829 	bl	8008788 <HAL_TIM_Base_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800173c:	f000 fc34 	bl	8001fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001744:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4619      	mov	r1, r3
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <MX_TIM3_Init+0x94>)
 800174e:	f007 f9e3 	bl	8008b18 <HAL_TIM_ConfigClockSource>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001758:	f000 fc26 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800175c:	2320      	movs	r3, #32
 800175e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001764:	463b      	mov	r3, r7
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_TIM3_Init+0x94>)
 800176a:	f007 fbff 	bl	8008f6c <HAL_TIMEx_MasterConfigSynchronization>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001774:	f000 fc18 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20002850 	.word	0x20002850
 8001784:	40000400 	.word	0x40000400

08001788 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_TIM11_Init+0x40>)
 800178e:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <MX_TIM11_Init+0x44>)
 8001790:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <MX_TIM11_Init+0x40>)
 8001794:	2200      	movs	r2, #0
 8001796:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <MX_TIM11_Init+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_TIM11_Init+0x40>)
 80017a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <MX_TIM11_Init+0x40>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_TIM11_Init+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_TIM11_Init+0x40>)
 80017b4:	f006 ffe8 	bl	8008788 <HAL_TIM_Base_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80017be:	f000 fbf3 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20002898 	.word	0x20002898
 80017cc:	40014800 	.word	0x40014800

080017d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <MX_USART2_UART_Init+0x50>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_USART2_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_USART2_UART_Init+0x4c>)
 8001808:	f007 fc40 	bl	800908c <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001812:	f000 fbc9 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200028e0 	.word	0x200028e0
 8001820:	40004400 	.word	0x40004400

08001824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_DMA_Init+0x3c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <MX_DMA_Init+0x3c>)
 8001834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_DMA_Init+0x3c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2101      	movs	r1, #1
 800184a:	2038      	movs	r0, #56	; 0x38
 800184c:	f001 fe2a 	bl	80034a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001850:	2038      	movs	r0, #56	; 0x38
 8001852:	f001 fe43 	bl	80034dc <HAL_NVIC_EnableIRQ>

}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b41      	ldr	r3, [pc, #260]	; (8001984 <MX_GPIO_Init+0x120>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a40      	ldr	r2, [pc, #256]	; (8001984 <MX_GPIO_Init+0x120>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <MX_GPIO_Init+0x120>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <MX_GPIO_Init+0x120>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a39      	ldr	r2, [pc, #228]	; (8001984 <MX_GPIO_Init+0x120>)
 80018a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b37      	ldr	r3, [pc, #220]	; (8001984 <MX_GPIO_Init+0x120>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	4b33      	ldr	r3, [pc, #204]	; (8001984 <MX_GPIO_Init+0x120>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a32      	ldr	r2, [pc, #200]	; (8001984 <MX_GPIO_Init+0x120>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <MX_GPIO_Init+0x120>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <MX_GPIO_Init+0x120>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a2b      	ldr	r2, [pc, #172]	; (8001984 <MX_GPIO_Init+0x120>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b29      	ldr	r3, [pc, #164]	; (8001984 <MX_GPIO_Init+0x120>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2108      	movs	r1, #8
 80018ee:	4826      	ldr	r0, [pc, #152]	; (8001988 <MX_GPIO_Init+0x124>)
 80018f0:	f002 fb4e 	bl	8003f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2120      	movs	r1, #32
 80018f8:	4824      	ldr	r0, [pc, #144]	; (800198c <MX_GPIO_Init+0x128>)
 80018fa:	f002 fb49 	bl	8003f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80018fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001904:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800190a:	2301      	movs	r3, #1
 800190c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	481c      	ldr	r0, [pc, #112]	; (8001988 <MX_GPIO_Init+0x124>)
 8001916:	f002 f98f 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800191a:	2308      	movs	r3, #8
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	4815      	ldr	r0, [pc, #84]	; (8001988 <MX_GPIO_Init+0x124>)
 8001932:	f002 f981 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001936:	2320      	movs	r3, #32
 8001938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193a:	2301      	movs	r3, #1
 800193c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	480f      	ldr	r0, [pc, #60]	; (800198c <MX_GPIO_Init+0x128>)
 800194e:	f002 f973 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : RCWL_Pin */
  GPIO_InitStruct.Pin = RCWL_Pin;
 8001952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RCWL_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	4809      	ldr	r0, [pc, #36]	; (800198c <MX_GPIO_Init+0x128>)
 8001968:	f002 f966 	bl	8003c38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2105      	movs	r1, #5
 8001970:	2028      	movs	r0, #40	; 0x28
 8001972:	f001 fd97 	bl	80034a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001976:	2028      	movs	r0, #40	; 0x28
 8001978:	f001 fdb0 	bl	80034dc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	; 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	40020800 	.word	0x40020800
 800198c:	40020000 	.word	0x40020000

08001990 <SDCard_Init>:

/* USER CODE BEGIN 4 */

void SDCard_Init(void){
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	fresult=f_mount(&fs,"",0);
 8001994:	2200      	movs	r2, #0
 8001996:	490a      	ldr	r1, [pc, #40]	; (80019c0 <SDCard_Init+0x30>)
 8001998:	480a      	ldr	r0, [pc, #40]	; (80019c4 <SDCard_Init+0x34>)
 800199a:	f00a f9cb 	bl	800bd34 <f_mount>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <SDCard_Init+0x38>)
 80019a4:	701a      	strb	r2, [r3, #0]
	if(fresult!=FR_OK){
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <SDCard_Init+0x38>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <SDCard_Init+0x26>
		send_uart("error in mounting SD card ....\n\r");
 80019ae:	4807      	ldr	r0, [pc, #28]	; (80019cc <SDCard_Init+0x3c>)
 80019b0:	f7ff fb9e 	bl	80010f0 <send_uart>
	}
	else{
		send_uart("SD card mounted\n\r");
	}
}
 80019b4:	e002      	b.n	80019bc <SDCard_Init+0x2c>
		send_uart("SD card mounted\n\r");
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <SDCard_Init+0x40>)
 80019b8:	f7ff fb9a 	bl	80010f0 <send_uart>
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	08014330 	.word	0x08014330
 80019c4:	20000234 	.word	0x20000234
 80019c8:	200022a0 	.word	0x200022a0
 80019cc:	08014334 	.word	0x08014334
 80019d0:	08014358 	.word	0x08014358

080019d4 <MX_FREERTOS_Init>:


void MX_FREERTOS_Init(void){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	vQueueAddToRegistry(binarySemaphoreISR, "binary_semaphore_ISR");
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_FREERTOS_Init+0x20>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4906      	ldr	r1, [pc, #24]	; (80019f8 <MX_FREERTOS_Init+0x24>)
 80019de:	4618      	mov	r0, r3
 80019e0:	f00c fc7a 	bl	800e2d8 <vQueueAddToRegistry>
	vQueueAddToRegistry(MutexOne, "Mutex_One");
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <MX_FREERTOS_Init+0x28>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4905      	ldr	r1, [pc, #20]	; (8001a00 <MX_FREERTOS_Init+0x2c>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f00c fc74 	bl	800e2d8 <vQueueAddToRegistry>
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20002944 	.word	0x20002944
 80019f8:	0801436c 	.word	0x0801436c
 80019fc:	20002940 	.word	0x20002940
 8001a00:	08014384 	.word	0x08014384

08001a04 <send_OLED>:


void send_OLED(char*string, uint8_t y){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	70fb      	strb	r3, [r7, #3]
	if(help){
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <send_OLED+0x38>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00c      	beq.n	8001a32 <send_OLED+0x2e>
		SSD1306_GotoXY (5,y); // goto 10, 10
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	2005      	movs	r0, #5
 8001a20:	f00e fede 	bl	80107e0 <SSD1306_GotoXY>
		SSD1306_Puts(string, &Font_7x10, 1);
 8001a24:	2201      	movs	r2, #1
 8001a26:	4906      	ldr	r1, [pc, #24]	; (8001a40 <send_OLED+0x3c>)
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f00e ff6f 	bl	801090c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001a2e:	f00e fe31 	bl	8010694 <SSD1306_UpdateScreen>
	}
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	20000028 	.word	0x20000028

08001a44 <send_SDCard>:


void send_SDCard(char*string){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
		count++;
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <send_SDCard+0x5c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3301      	adds	r3, #1
 8001a52:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <send_SDCard+0x5c>)
 8001a54:	6013      	str	r3, [r2, #0]
		fresult=f_open(&fil, "data.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_OPEN_APPEND);
 8001a56:	2232      	movs	r2, #50	; 0x32
 8001a58:	4912      	ldr	r1, [pc, #72]	; (8001aa4 <send_SDCard+0x60>)
 8001a5a:	4813      	ldr	r0, [pc, #76]	; (8001aa8 <send_SDCard+0x64>)
 8001a5c:	f00a f9ce 	bl	800bdfc <f_open>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <send_SDCard+0x68>)
 8001a66:	701a      	strb	r2, [r3, #0]
		strcat(string, "\n\r");
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7fe fc21 	bl	80002b0 <strlen>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <send_SDCard+0x6c>)
 8001a78:	8811      	ldrh	r1, [r2, #0]
 8001a7a:	7892      	ldrb	r2, [r2, #2]
 8001a7c:	8019      	strh	r1, [r3, #0]
 8001a7e:	709a      	strb	r2, [r3, #2]
		fresult = f_puts(string,&fil);
 8001a80:	4909      	ldr	r1, [pc, #36]	; (8001aa8 <send_SDCard+0x64>)
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f00a ff7c 	bl	800c980 <f_puts>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <send_SDCard+0x68>)
 8001a8e:	701a      	strb	r2, [r3, #0]
		f_close(&fil);
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <send_SDCard+0x64>)
 8001a92:	f00a fecf 	bl	800c834 <f_close>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20002678 	.word	0x20002678
 8001aa4:	08014390 	.word	0x08014390
 8001aa8:	20001270 	.word	0x20001270
 8001aac:	200022a0 	.word	0x200022a0
 8001ab0:	0801439c 	.word	0x0801439c

08001ab4 <vUARTtask>:

void vUARTtask(void *pvParameters){
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
//	uint16_t count=0;
	while(1){
 8001abc:	e7fe      	b.n	8001abc <vUARTtask+0x8>
	...

08001ac0 <vSwitchtask>:
//		send_uart(buffer);
//		vTaskDelay(50);
	}
}

void vSwitchtask(void *pvParameters){
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	6078      	str	r0, [r7, #4]
	while(1){
		if(xSemaphoreTake(binarySemaphoreISR, portMAX_DELAY)==pdTRUE ){
 8001ac8:	4b43      	ldr	r3, [pc, #268]	; (8001bd8 <vSwitchtask+0x118>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f00c f929 	bl	800dd28 <xQueueSemaphoreTake>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d1f5      	bne.n	8001ac8 <vSwitchtask+0x8>
			if (!isButtonPressed) {
 8001adc:	4b3f      	ldr	r3, [pc, #252]	; (8001bdc <vSwitchtask+0x11c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d155      	bne.n	8001b90 <vSwitchtask+0xd0>
				pressStartTime = xTaskGetTickCount();
 8001ae4:	f00c ffc8 	bl	800ea78 <xTaskGetTickCount>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a3d      	ldr	r2, [pc, #244]	; (8001be0 <vSwitchtask+0x120>)
 8001aec:	6013      	str	r3, [r2, #0]
				isButtonPressed = pdTRUE;
 8001aee:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <vSwitchtask+0x11c>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
				xTimerStart(buttonPressTimer, 0);
 8001af4:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <vSwitchtask+0x124>)
 8001af6:	681c      	ldr	r4, [r3, #0]
 8001af8:	f00c ffbe 	bl	800ea78 <xTaskGetTickCount>
 8001afc:	4602      	mov	r2, r0
 8001afe:	2300      	movs	r3, #0
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2300      	movs	r3, #0
 8001b04:	2101      	movs	r1, #1
 8001b06:	4620      	mov	r0, r4
 8001b08:	f00d fdbe 	bl	800f688 <xTimerGenericCommand>


				help=0;
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <vSwitchtask+0x128>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
				sprintf(help_str,"HELP");
 8001b12:	4936      	ldr	r1, [pc, #216]	; (8001bec <vSwitchtask+0x12c>)
 8001b14:	4836      	ldr	r0, [pc, #216]	; (8001bf0 <vSwitchtask+0x130>)
 8001b16:	f010 fa15 	bl	8011f44 <siprintf>
				fresult=f_open(&fil, "data.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_OPEN_APPEND);
 8001b1a:	2232      	movs	r2, #50	; 0x32
 8001b1c:	4935      	ldr	r1, [pc, #212]	; (8001bf4 <vSwitchtask+0x134>)
 8001b1e:	4836      	ldr	r0, [pc, #216]	; (8001bf8 <vSwitchtask+0x138>)
 8001b20:	f00a f96c 	bl	800bdfc <f_open>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <vSwitchtask+0x13c>)
 8001b2a:	701a      	strb	r2, [r3, #0]
				strcat(help_str,"\n\r");
 8001b2c:	4830      	ldr	r0, [pc, #192]	; (8001bf0 <vSwitchtask+0x130>)
 8001b2e:	f7fe fbbf 	bl	80002b0 <strlen>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <vSwitchtask+0x130>)
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <vSwitchtask+0x140>)
 8001b3c:	8811      	ldrh	r1, [r2, #0]
 8001b3e:	7892      	ldrb	r2, [r2, #2]
 8001b40:	8019      	strh	r1, [r3, #0]
 8001b42:	709a      	strb	r2, [r3, #2]
				fresult = f_puts(help_str,&fil);
 8001b44:	492c      	ldr	r1, [pc, #176]	; (8001bf8 <vSwitchtask+0x138>)
 8001b46:	482a      	ldr	r0, [pc, #168]	; (8001bf0 <vSwitchtask+0x130>)
 8001b48:	f00a ff1a 	bl	800c980 <f_puts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <vSwitchtask+0x13c>)
 8001b52:	701a      	strb	r2, [r3, #0]
				f_close(&fil);
 8001b54:	4828      	ldr	r0, [pc, #160]	; (8001bf8 <vSwitchtask+0x138>)
 8001b56:	f00a fe6d 	bl	800c834 <f_close>


				SSD1306_Clear();
 8001b5a:	f00e fefc 	bl	8010956 <SSD1306_Clear>
				vTaskDelay(20);
 8001b5e:	2014      	movs	r0, #20
 8001b60:	f00c fe00 	bl	800e764 <vTaskDelay>
				SSD1306_GotoXY (25,20);
 8001b64:	2114      	movs	r1, #20
 8001b66:	2019      	movs	r0, #25
 8001b68:	f00e fe3a 	bl	80107e0 <SSD1306_GotoXY>
				SSD1306_Puts("HELP", &Font_16x26, 1);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4925      	ldr	r1, [pc, #148]	; (8001c04 <vSwitchtask+0x144>)
 8001b70:	481e      	ldr	r0, [pc, #120]	; (8001bec <vSwitchtask+0x12c>)
 8001b72:	f00e fecb 	bl	801090c <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8001b76:	f00e fd8d 	bl	8010694 <SSD1306_UpdateScreen>
				send_uart("Button Pressed\r\n");
 8001b7a:	4823      	ldr	r0, [pc, #140]	; (8001c08 <vSwitchtask+0x148>)
 8001b7c:	f7ff fab8 	bl	80010f0 <send_uart>
				vTaskDelay(970);
 8001b80:	f240 30ca 	movw	r0, #970	; 0x3ca
 8001b84:	f00c fdee 	bl	800e764 <vTaskDelay>


				help=1;
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <vSwitchtask+0x128>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e01e      	b.n	8001bce <vSwitchtask+0x10e>
			}
			else {
				pressEndTime = xTaskGetTickCount();
 8001b90:	f00c ff72 	bl	800ea78 <xTaskGetTickCount>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <vSwitchtask+0x14c>)
 8001b98:	6013      	str	r3, [r2, #0]
				isButtonPressed = pdFALSE;
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <vSwitchtask+0x11c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
				xTimerStop(buttonPressTimer, 0);
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <vSwitchtask+0x124>)
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	2200      	movs	r2, #0
 8001bac:	2103      	movs	r1, #3
 8001bae:	f00d fd6b 	bl	800f688 <xTimerGenericCommand>
				uint32_t pressDurationMs = (pressEndTime - pressStartTime) * portTICK_PERIOD_MS;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <vSwitchtask+0x14c>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <vSwitchtask+0x120>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
				if (pressDurationMs > 3000) {
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d902      	bls.n	8001bce <vSwitchtask+0x10e>
					send_uart("Nurse\r\n");
 8001bc8:	4811      	ldr	r0, [pc, #68]	; (8001c10 <vSwitchtask+0x150>)
 8001bca:	f7ff fa91 	bl	80010f0 <send_uart>
				}
			}
			vTaskDelay(20);
 8001bce:	2014      	movs	r0, #20
 8001bd0:	f00c fdc8 	bl	800e764 <vTaskDelay>
		if(xSemaphoreTake(binarySemaphoreISR, portMAX_DELAY)==pdTRUE ){
 8001bd4:	e778      	b.n	8001ac8 <vSwitchtask+0x8>
 8001bd6:	bf00      	nop
 8001bd8:	20002944 	.word	0x20002944
 8001bdc:	20002674 	.word	0x20002674
 8001be0:	2000266c 	.word	0x2000266c
 8001be4:	20002948 	.word	0x20002948
 8001be8:	20000000 	.word	0x20000000
 8001bec:	080143a0 	.word	0x080143a0
 8001bf0:	20002340 	.word	0x20002340
 8001bf4:	08014390 	.word	0x08014390
 8001bf8:	20001270 	.word	0x20001270
 8001bfc:	200022a0 	.word	0x200022a0
 8001c00:	0801439c 	.word	0x0801439c
 8001c04:	20000030 	.word	0x20000030
 8001c08:	080143a8 	.word	0x080143a8
 8001c0c:	20002670 	.word	0x20002670
 8001c10:	080143bc 	.word	0x080143bc

08001c14 <vInternalTemptask>:
		}
	}
}

void vInternalTemptask(void *pvParameters){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim3); // First get the timer running
 8001c1c:	4817      	ldr	r0, [pc, #92]	; (8001c7c <vInternalTemptask+0x68>)
 8001c1e:	f006 fe03 	bl	8008828 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, ADC_SAMPLES * 2 * 2); // Now fire up the ADC DMA
 8001c22:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001c26:	4916      	ldr	r1, [pc, #88]	; (8001c80 <vInternalTemptask+0x6c>)
 8001c28:	4816      	ldr	r0, [pc, #88]	; (8001c84 <vInternalTemptask+0x70>)
 8001c2a:	f000 ffab 	bl	8002b84 <HAL_ADC_Start_DMA>
	while(1){
		sprintf(tempState,"Temp = %4.2f C",temp);// to get raw value call temp_avg variable
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <vInternalTemptask+0x74>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fca8 	bl	8000588 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4913      	ldr	r1, [pc, #76]	; (8001c8c <vInternalTemptask+0x78>)
 8001c3e:	4814      	ldr	r0, [pc, #80]	; (8001c90 <vInternalTemptask+0x7c>)
 8001c40:	f010 f980 	bl	8011f44 <siprintf>
		if(xSemaphoreTake(MutexOne, portMAX_DELAY)==pdTRUE){
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <vInternalTemptask+0x80>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f00c f86b 	bl	800dd28 <xQueueSemaphoreTake>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d10d      	bne.n	8001c74 <vInternalTemptask+0x60>
			send_OLED(tempState, 50);
 8001c58:	2132      	movs	r1, #50	; 0x32
 8001c5a:	480d      	ldr	r0, [pc, #52]	; (8001c90 <vInternalTemptask+0x7c>)
 8001c5c:	f7ff fed2 	bl	8001a04 <send_OLED>
//			send_SDCard(tempState);
			send_uart(tempState);
 8001c60:	480b      	ldr	r0, [pc, #44]	; (8001c90 <vInternalTemptask+0x7c>)
 8001c62:	f7ff fa45 	bl	80010f0 <send_uart>
			xSemaphoreGive(MutexOne);
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <vInternalTemptask+0x80>)
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	f00b fd54 	bl	800d71c <xQueueGenericSend>
		}
		vTaskDelay(20);
 8001c74:	2014      	movs	r0, #20
 8001c76:	f00c fd75 	bl	800e764 <vTaskDelay>
		sprintf(tempState,"Temp = %4.2f C",temp);// to get raw value call temp_avg variable
 8001c7a:	e7d8      	b.n	8001c2e <vInternalTemptask+0x1a>
 8001c7c:	20002850 	.word	0x20002850
 8001c80:	2000234c 	.word	0x2000234c
 8001c84:	20002694 	.word	0x20002694
 8001c88:	20000230 	.word	0x20000230
 8001c8c:	080143c4 	.word	0x080143c4
 8001c90:	2000230c 	.word	0x2000230c
 8001c94:	20002940 	.word	0x20002940

08001c98 <vRCWLtask>:
	}
}


void vRCWLtask(void *pvParameters){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	while(1){
		uint8_t rcwl = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ca4:	4817      	ldr	r0, [pc, #92]	; (8001d04 <vRCWLtask+0x6c>)
 8001ca6:	f002 f95b 	bl	8003f60 <HAL_GPIO_ReadPin>
 8001caa:	4603      	mov	r3, r0
 8001cac:	73fb      	strb	r3, [r7, #15]
		char *rcwl_state = (rcwl == 1) ? "HIGH" : "LOW ";
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <vRCWLtask+0x20>
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <vRCWLtask+0x70>)
 8001cb6:	e000      	b.n	8001cba <vRCWLtask+0x22>
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <vRCWLtask+0x74>)
 8001cba:	60bb      	str	r3, [r7, #8]
		sprintf(motionState,"Motion: %s", rcwl_state);
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	4914      	ldr	r1, [pc, #80]	; (8001d10 <vRCWLtask+0x78>)
 8001cc0:	4814      	ldr	r0, [pc, #80]	; (8001d14 <vRCWLtask+0x7c>)
 8001cc2:	f010 f93f 	bl	8011f44 <siprintf>
		if(xSemaphoreTake(MutexOne, portMAX_DELAY)==pdTRUE){
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <vRCWLtask+0x80>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f04f 31ff 	mov.w	r1, #4294967295
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f00c f82a 	bl	800dd28 <xQueueSemaphoreTake>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d110      	bne.n	8001cfc <vRCWLtask+0x64>
			send_OLED(motionState, 30);
 8001cda:	211e      	movs	r1, #30
 8001cdc:	480d      	ldr	r0, [pc, #52]	; (8001d14 <vRCWLtask+0x7c>)
 8001cde:	f7ff fe91 	bl	8001a04 <send_OLED>
			send_SDCard(motionState);
 8001ce2:	480c      	ldr	r0, [pc, #48]	; (8001d14 <vRCWLtask+0x7c>)
 8001ce4:	f7ff feae 	bl	8001a44 <send_SDCard>
			send_uart(motionState);
 8001ce8:	480a      	ldr	r0, [pc, #40]	; (8001d14 <vRCWLtask+0x7c>)
 8001cea:	f7ff fa01 	bl	80010f0 <send_uart>
			xSemaphoreGive(MutexOne);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <vRCWLtask+0x80>)
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	f00b fd10 	bl	800d71c <xQueueGenericSend>
		}
		vTaskDelay(20);
 8001cfc:	2014      	movs	r0, #20
 8001cfe:	f00c fd31 	bl	800e764 <vTaskDelay>
	while(1){
 8001d02:	e7cd      	b.n	8001ca0 <vRCWLtask+0x8>
 8001d04:	40020000 	.word	0x40020000
 8001d08:	080143d4 	.word	0x080143d4
 8001d0c:	080143dc 	.word	0x080143dc
 8001d10:	080143e4 	.word	0x080143e4
 8001d14:	200022a4 	.word	0x200022a4
 8001d18:	20002940 	.word	0x20002940

08001d1c <vRTCtask>:
	}
}

void vRTCtask(void *pvParameters){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b0a2      	sub	sp, #136	; 0x88
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	6078      	str	r0, [r7, #4]
	while(1){
		char time[60];
		char date[60];
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001d24:	2200      	movs	r2, #0
 8001d26:	492c      	ldr	r1, [pc, #176]	; (8001dd8 <vRTCtask+0xbc>)
 8001d28:	482c      	ldr	r0, [pc, #176]	; (8001ddc <vRTCtask+0xc0>)
 8001d2a:	f005 fde3 	bl	80078f4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	492b      	ldr	r1, [pc, #172]	; (8001de0 <vRTCtask+0xc4>)
 8001d32:	482a      	ldr	r0, [pc, #168]	; (8001ddc <vRTCtask+0xc0>)
 8001d34:	f005 fec0 	bl	8007ab8 <HAL_RTC_GetDate>
		sprintf(date,"Date :%02d.%02d.%02d",sDate.Date, sDate.Month, sDate.Year);
 8001d38:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <vRTCtask+0xc4>)
 8001d3a:	789b      	ldrb	r3, [r3, #2]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <vRTCtask+0xc4>)
 8001d40:	785b      	ldrb	r3, [r3, #1]
 8001d42:	4619      	mov	r1, r3
 8001d44:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <vRTCtask+0xc4>)
 8001d46:	78db      	ldrb	r3, [r3, #3]
 8001d48:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4924      	ldr	r1, [pc, #144]	; (8001de4 <vRTCtask+0xc8>)
 8001d52:	f010 f8f7 	bl	8011f44 <siprintf>
		sprintf(time,"Time :%02d.%02d.%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <vRTCtask+0xbc>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <vRTCtask+0xbc>)
 8001d5e:	785b      	ldrb	r3, [r3, #1]
 8001d60:	4619      	mov	r1, r3
 8001d62:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <vRTCtask+0xbc>)
 8001d64:	789b      	ldrb	r3, [r3, #2]
 8001d66:	f107 0008 	add.w	r0, r7, #8
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	491e      	ldr	r1, [pc, #120]	; (8001de8 <vRTCtask+0xcc>)
 8001d70:	f010 f8e8 	bl	8011f44 <siprintf>
		if(xSemaphoreTake(MutexOne, portMAX_DELAY)==pdTRUE){
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <vRTCtask+0xd0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f00b ffd3 	bl	800dd28 <xQueueSemaphoreTake>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d122      	bne.n	8001dce <vRTCtask+0xb2>
			send_OLED(date, 10);
 8001d88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d8c:	210a      	movs	r1, #10
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fe38 	bl	8001a04 <send_OLED>
			send_OLED(time, 20);
 8001d94:	f107 0308 	add.w	r3, r7, #8
 8001d98:	2114      	movs	r1, #20
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fe32 	bl	8001a04 <send_OLED>
//			send_SDCard(date);
			vTaskDelay(5);
 8001da0:	2005      	movs	r0, #5
 8001da2:	f00c fcdf 	bl	800e764 <vTaskDelay>
//			send_SDCard(time);
			vTaskDelay(5);
 8001da6:	2005      	movs	r0, #5
 8001da8:	f00c fcdc 	bl	800e764 <vTaskDelay>
			send_uart(date);
 8001dac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f99d 	bl	80010f0 <send_uart>
			send_uart(time);
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f998 	bl	80010f0 <send_uart>
			xSemaphoreGive(MutexOne);
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <vRTCtask+0xd0>)
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	f00b fca7 	bl	800d71c <xQueueGenericSend>
		}
		vTaskDelay(10);
 8001dce:	200a      	movs	r0, #10
 8001dd0:	f00c fcc8 	bl	800e764 <vTaskDelay>
	while(1){
 8001dd4:	e7a6      	b.n	8001d24 <vRTCtask+0x8>
 8001dd6:	bf00      	nop
 8001dd8:	2000267c 	.word	0x2000267c
 8001ddc:	200027d8 	.word	0x200027d8
 8001de0:	20002690 	.word	0x20002690
 8001de4:	080143f0 	.word	0x080143f0
 8001de8:	08014408 	.word	0x08014408
 8001dec:	20002940 	.word	0x20002940

08001df0 <vMQ135task>:
	}
}

void vMQ135task(void *pvParameters){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_ADC_Start(&hadc2);
 8001df8:	4818      	ldr	r0, [pc, #96]	; (8001e5c <vMQ135task+0x6c>)
 8001dfa:	f000 fd33 	bl	8002864 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001dfe:	f04f 31ff 	mov.w	r1, #4294967295
 8001e02:	4816      	ldr	r0, [pc, #88]	; (8001e5c <vMQ135task+0x6c>)
 8001e04:	f000 fe33 	bl	8002a6e <HAL_ADC_PollForConversion>
		uint16_t adc_value= HAL_ADC_GetValue(&hadc2);
 8001e08:	4814      	ldr	r0, [pc, #80]	; (8001e5c <vMQ135task+0x6c>)
 8001e0a:	f000 ffcb 	bl	8002da4 <HAL_ADC_GetValue>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	81fb      	strh	r3, [r7, #14]
		HAL_ADC_Stop(&hadc2);
 8001e12:	4812      	ldr	r0, [pc, #72]	; (8001e5c <vMQ135task+0x6c>)
 8001e14:	f000 fdf8 	bl	8002a08 <HAL_ADC_Stop>
		sprintf(adcVal,"AQI is %d   ",adc_value);
 8001e18:	89fb      	ldrh	r3, [r7, #14]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4910      	ldr	r1, [pc, #64]	; (8001e60 <vMQ135task+0x70>)
 8001e1e:	4811      	ldr	r0, [pc, #68]	; (8001e64 <vMQ135task+0x74>)
 8001e20:	f010 f890 	bl	8011f44 <siprintf>
		if(xSemaphoreTake(MutexOne, portMAX_DELAY)==pdTRUE){
 8001e24:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <vMQ135task+0x78>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f00b ff7b 	bl	800dd28 <xQueueSemaphoreTake>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d10d      	bne.n	8001e54 <vMQ135task+0x64>
			send_OLED(adcVal, 40);
 8001e38:	2128      	movs	r1, #40	; 0x28
 8001e3a:	480a      	ldr	r0, [pc, #40]	; (8001e64 <vMQ135task+0x74>)
 8001e3c:	f7ff fde2 	bl	8001a04 <send_OLED>
//			send_SDCard(adcVal);
			send_uart(adcVal);
 8001e40:	4808      	ldr	r0, [pc, #32]	; (8001e64 <vMQ135task+0x74>)
 8001e42:	f7ff f955 	bl	80010f0 <send_uart>
			xSemaphoreGive(MutexOne);
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <vMQ135task+0x78>)
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2100      	movs	r1, #0
 8001e50:	f00b fc64 	bl	800d71c <xQueueGenericSend>
		}
		vTaskDelay(20);
 8001e54:	2014      	movs	r0, #20
 8001e56:	f00c fc85 	bl	800e764 <vTaskDelay>
	while(1){
 8001e5a:	e7cd      	b.n	8001df8 <vMQ135task+0x8>
 8001e5c:	200026dc 	.word	0x200026dc
 8001e60:	08014420 	.word	0x08014420
 8001e64:	200022d8 	.word	0x200022d8
 8001e68:	20002940 	.word	0x20002940

08001e6c <vTimerCallback>:
	}
}

void vTimerCallback(TimerHandle_t xTimer) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
    // Handle cases where the button is held but not released
    if (isButtonPressed) {
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <vTimerCallback+0x44>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d015      	beq.n	8001ea8 <vTimerCallback+0x3c>
        pressEndTime = xTaskGetTickCount();
 8001e7c:	f00c fdfc 	bl	800ea78 <xTaskGetTickCount>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4a0c      	ldr	r2, [pc, #48]	; (8001eb4 <vTimerCallback+0x48>)
 8001e84:	6013      	str	r3, [r2, #0]
        uint32_t pressDurationMs = (pressEndTime - pressStartTime) * portTICK_PERIOD_MS;
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <vTimerCallback+0x48>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <vTimerCallback+0x4c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	60fb      	str	r3, [r7, #12]

        if (pressDurationMs > 3000) {
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d902      	bls.n	8001ea2 <vTimerCallback+0x36>
            send_uart("Help Resolved by Nurse\r\n");
 8001e9c:	4807      	ldr	r0, [pc, #28]	; (8001ebc <vTimerCallback+0x50>)
 8001e9e:	f7ff f927 	bl	80010f0 <send_uart>
        }
        isButtonPressed = pdFALSE;
 8001ea2:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <vTimerCallback+0x44>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
    }
}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20002674 	.word	0x20002674
 8001eb4:	20002670 	.word	0x20002670
 8001eb8:	2000266c 	.word	0x2000266c
 8001ebc:	08014430 	.word	0x08014430

08001ec0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
    process_adc_buffer(&adc_buffer[0]); // We're half way through the buffer, so can safely deal with first half
 8001ec8:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001eca:	f7ff f851 	bl	8000f70 <process_adc_buffer>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000234c 	.word	0x2000234c

08001edc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
    process_adc_buffer(&adc_buffer[ADC_SAMPLES * 2]); // We're all the way through the buffer, so deal with second half
 8001ee4:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <HAL_ADC_ConvCpltCallback+0x18>)
 8001ee6:	f7ff f843 	bl	8000f70 <process_adc_buffer>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200024dc 	.word	0x200024dc

08001ef8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR( binarySemaphoreISR, &xHigherPriorityTaskWoken );
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f107 020c 	add.w	r2, r7, #12
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f00b fd9c 	bl	800da4e <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_GPIO_EXTI_Callback+0x34>
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_GPIO_EXTI_Callback+0x40>)
 8001f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f3bf 8f4f 	dsb	sy
 8001f28:	f3bf 8f6f 	isb	sy
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20002944 	.word	0x20002944
 8001f38:	e000ed04 	.word	0xe000ed04

08001f3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f00a ffc9 	bl	800cedc <osDelay>
 8001f4a:	e7fb      	b.n	8001f44 <StartDefaultTask+0x8>

08001f4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM3) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d111      	bne.n	8001f82 <HAL_TIM_PeriodElapsedCallback+0x36>
		if (tim_cnt % 500 == 0)
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f64:	fba3 1302 	umull	r1, r3, r3, r2
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d104      	bne.n	8001f82 <HAL_TIM_PeriodElapsedCallback+0x36>
//				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		tim_cnt++;
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f80:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_TIM_PeriodElapsedCallback+0x44>
    HAL_IncTick();
 8001f8c:	f000 fbe2 	bl	8002754 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	20000220 	.word	0x20000220
 8001fa0:	10624dd3 	.word	0x10624dd3
 8001fa4:	40001000 	.word	0x40001000

08001fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fac:	b672      	cpsid	i
}
 8001fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <Error_Handler+0x8>
	...

08001fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_MspInit+0x54>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a11      	ldr	r2, [pc, #68]	; (8002008 <HAL_MspInit+0x54>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_MspInit+0x54>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_MspInit+0x54>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_MspInit+0x54>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_MspInit+0x54>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	210f      	movs	r1, #15
 8001ff6:	f06f 0001 	mvn.w	r0, #1
 8001ffa:	f001 fa53 	bl	80034a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a39      	ldr	r2, [pc, #228]	; (8002110 <HAL_ADC_MspInit+0x104>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d13f      	bne.n	80020ae <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b38      	ldr	r3, [pc, #224]	; (8002114 <HAL_ADC_MspInit+0x108>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a37      	ldr	r2, [pc, #220]	; (8002114 <HAL_ADC_MspInit+0x108>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b35      	ldr	r3, [pc, #212]	; (8002114 <HAL_ADC_MspInit+0x108>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800204a:	4b33      	ldr	r3, [pc, #204]	; (8002118 <HAL_ADC_MspInit+0x10c>)
 800204c:	4a33      	ldr	r2, [pc, #204]	; (800211c <HAL_ADC_MspInit+0x110>)
 800204e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002050:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_ADC_MspInit+0x10c>)
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_ADC_MspInit+0x10c>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800205c:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <HAL_ADC_MspInit+0x10c>)
 800205e:	2200      	movs	r2, #0
 8002060:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002062:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_ADC_MspInit+0x10c>)
 8002064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002068:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800206a:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <HAL_ADC_MspInit+0x10c>)
 800206c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002070:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_ADC_MspInit+0x10c>)
 8002074:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002078:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800207a:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_ADC_MspInit+0x10c>)
 800207c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002080:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <HAL_ADC_MspInit+0x10c>)
 8002084:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002088:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_ADC_MspInit+0x10c>)
 800208c:	2200      	movs	r2, #0
 800208e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002090:	4821      	ldr	r0, [pc, #132]	; (8002118 <HAL_ADC_MspInit+0x10c>)
 8002092:	f001 fa31 	bl	80034f8 <HAL_DMA_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 800209c:	f7ff ff84 	bl	8001fa8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a1d      	ldr	r2, [pc, #116]	; (8002118 <HAL_ADC_MspInit+0x10c>)
 80020a4:	639a      	str	r2, [r3, #56]	; 0x38
 80020a6:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <HAL_ADC_MspInit+0x10c>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80020ac:	e02c      	b.n	8002108 <HAL_ADC_MspInit+0xfc>
  else if(hadc->Instance==ADC2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <HAL_ADC_MspInit+0x114>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d127      	bne.n	8002108 <HAL_ADC_MspInit+0xfc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_ADC_MspInit+0x108>)
 80020be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <HAL_ADC_MspInit+0x108>)
 80020c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c6:	6453      	str	r3, [r2, #68]	; 0x44
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_ADC_MspInit+0x108>)
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_ADC_MspInit+0x108>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <HAL_ADC_MspInit+0x108>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6313      	str	r3, [r2, #48]	; 0x30
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_ADC_MspInit+0x108>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MQ135_Pin;
 80020f0:	2302      	movs	r3, #2
 80020f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f4:	2303      	movs	r3, #3
 80020f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MQ135_GPIO_Port, &GPIO_InitStruct);
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4619      	mov	r1, r3
 8002102:	4808      	ldr	r0, [pc, #32]	; (8002124 <HAL_ADC_MspInit+0x118>)
 8002104:	f001 fd98 	bl	8003c38 <HAL_GPIO_Init>
}
 8002108:	bf00      	nop
 800210a:	3728      	adds	r7, #40	; 0x28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40012000 	.word	0x40012000
 8002114:	40023800 	.word	0x40023800
 8002118:	20002724 	.word	0x20002724
 800211c:	40026410 	.word	0x40026410
 8002120:	40012100 	.word	0x40012100
 8002124:	40020000 	.word	0x40020000

08002128 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a21      	ldr	r2, [pc, #132]	; (80021cc <HAL_I2C_MspInit+0xa4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d13c      	bne.n	80021c4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_I2C_MspInit+0xa8>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <HAL_I2C_MspInit+0xa8>)
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_I2C_MspInit+0xa8>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002166:	f44f 7310 	mov.w	r3, #576	; 0x240
 800216a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800216c:	2312      	movs	r3, #18
 800216e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002174:	2303      	movs	r3, #3
 8002176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002178:	2304      	movs	r3, #4
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	4814      	ldr	r0, [pc, #80]	; (80021d4 <HAL_I2C_MspInit+0xac>)
 8002184:	f001 fd58 	bl	8003c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_I2C_MspInit+0xa8>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <HAL_I2C_MspInit+0xa8>)
 8002192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002196:	6413      	str	r3, [r2, #64]	; 0x40
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_I2C_MspInit+0xa8>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2105      	movs	r1, #5
 80021a8:	201f      	movs	r0, #31
 80021aa:	f001 f97b 	bl	80034a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80021ae:	201f      	movs	r0, #31
 80021b0:	f001 f994 	bl	80034dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2105      	movs	r1, #5
 80021b8:	2020      	movs	r0, #32
 80021ba:	f001 f973 	bl	80034a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80021be:	2020      	movs	r0, #32
 80021c0:	f001 f98c 	bl	80034dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021c4:	bf00      	nop
 80021c6:	3728      	adds	r7, #40	; 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40005400 	.word	0x40005400
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020400 	.word	0x40020400

080021d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b09a      	sub	sp, #104	; 0x68
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	225c      	movs	r2, #92	; 0x5c
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f00f ff0e 	bl	801200a <memset>
  if(hrtc->Instance==RTC)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a0c      	ldr	r2, [pc, #48]	; (8002224 <HAL_RTC_MspInit+0x4c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d111      	bne.n	800221c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021f8:	2320      	movs	r3, #32
 80021fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002200:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	4618      	mov	r0, r3
 8002208:	f004 fa6c 	bl	80066e4 <HAL_RCCEx_PeriphCLKConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002212:	f7ff fec9 	bl	8001fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_RTC_MspInit+0x50>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800221c:	bf00      	nop
 800221e:	3768      	adds	r7, #104	; 0x68
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40002800 	.word	0x40002800
 8002228:	42470e3c 	.word	0x42470e3c

0800222c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a30      	ldr	r2, [pc, #192]	; (800230c <HAL_SPI_MspInit+0xe0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d15a      	bne.n	8002304 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <HAL_SPI_MspInit+0xe4>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	4a2e      	ldr	r2, [pc, #184]	; (8002310 <HAL_SPI_MspInit+0xe4>)
 8002258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
 800225e:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <HAL_SPI_MspInit+0xe4>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b28      	ldr	r3, [pc, #160]	; (8002310 <HAL_SPI_MspInit+0xe4>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a27      	ldr	r2, [pc, #156]	; (8002310 <HAL_SPI_MspInit+0xe4>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b25      	ldr	r3, [pc, #148]	; (8002310 <HAL_SPI_MspInit+0xe4>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	4b21      	ldr	r3, [pc, #132]	; (8002310 <HAL_SPI_MspInit+0xe4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a20      	ldr	r2, [pc, #128]	; (8002310 <HAL_SPI_MspInit+0xe4>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_SPI_MspInit+0xe4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022a2:	2302      	movs	r3, #2
 80022a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ae:	2303      	movs	r3, #3
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80022b2:	2307      	movs	r3, #7
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	4815      	ldr	r0, [pc, #84]	; (8002314 <HAL_SPI_MspInit+0xe8>)
 80022be:	f001 fcbb 	bl	8003c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022c2:	2304      	movs	r3, #4
 80022c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ce:	2303      	movs	r3, #3
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022d2:	2305      	movs	r3, #5
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	480d      	ldr	r0, [pc, #52]	; (8002314 <HAL_SPI_MspInit+0xe8>)
 80022de:	f001 fcab 	bl	8003c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022f4:	2305      	movs	r3, #5
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <HAL_SPI_MspInit+0xec>)
 8002300:	f001 fc9a 	bl	8003c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002304:	bf00      	nop
 8002306:	3728      	adds	r7, #40	; 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40003800 	.word	0x40003800
 8002310:	40023800 	.word	0x40023800
 8002314:	40020800 	.word	0x40020800
 8002318:	40020400 	.word	0x40020400

0800231c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a18      	ldr	r2, [pc, #96]	; (800238c <HAL_TIM_Base_MspInit+0x70>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d10e      	bne.n	800234c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_TIM_Base_MspInit+0x74>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a16      	ldr	r2, [pc, #88]	; (8002390 <HAL_TIM_Base_MspInit+0x74>)
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <HAL_TIM_Base_MspInit+0x74>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800234a:	e01a      	b.n	8002382 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a10      	ldr	r2, [pc, #64]	; (8002394 <HAL_TIM_Base_MspInit+0x78>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d115      	bne.n	8002382 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <HAL_TIM_Base_MspInit+0x74>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <HAL_TIM_Base_MspInit+0x74>)
 8002360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_TIM_Base_MspInit+0x74>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2105      	movs	r1, #5
 8002376:	201a      	movs	r0, #26
 8002378:	f001 f894 	bl	80034a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800237c:	201a      	movs	r0, #26
 800237e:	f001 f8ad 	bl	80034dc <HAL_NVIC_EnableIRQ>
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40000400 	.word	0x40000400
 8002390:	40023800 	.word	0x40023800
 8002394:	40014800 	.word	0x40014800

08002398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a19      	ldr	r2, [pc, #100]	; (800241c <HAL_UART_MspInit+0x84>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d12b      	bne.n	8002412 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_UART_MspInit+0x88>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a17      	ldr	r2, [pc, #92]	; (8002420 <HAL_UART_MspInit+0x88>)
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_UART_MspInit+0x88>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_UART_MspInit+0x88>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a10      	ldr	r2, [pc, #64]	; (8002420 <HAL_UART_MspInit+0x88>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_UART_MspInit+0x88>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 80023f2:	230c      	movs	r3, #12
 80023f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002402:	2307      	movs	r3, #7
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <HAL_UART_MspInit+0x8c>)
 800240e:	f001 fc13 	bl	8003c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	; 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40004400 	.word	0x40004400
 8002420:	40023800 	.word	0x40023800
 8002424:	40020000 	.word	0x40020000

08002428 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08e      	sub	sp, #56	; 0x38
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	4b33      	ldr	r3, [pc, #204]	; (800250c <HAL_InitTick+0xe4>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	4a32      	ldr	r2, [pc, #200]	; (800250c <HAL_InitTick+0xe4>)
 8002442:	f043 0310 	orr.w	r3, r3, #16
 8002446:	6413      	str	r3, [r2, #64]	; 0x40
 8002448:	4b30      	ldr	r3, [pc, #192]	; (800250c <HAL_InitTick+0xe4>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002454:	f107 0210 	add.w	r2, r7, #16
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f004 f90e 	bl	8006680 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800246e:	f004 f8df 	bl	8006630 <HAL_RCC_GetPCLK1Freq>
 8002472:	6378      	str	r0, [r7, #52]	; 0x34
 8002474:	e004      	b.n	8002480 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002476:	f004 f8db 	bl	8006630 <HAL_RCC_GetPCLK1Freq>
 800247a:	4603      	mov	r3, r0
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002482:	4a23      	ldr	r2, [pc, #140]	; (8002510 <HAL_InitTick+0xe8>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	0c9b      	lsrs	r3, r3, #18
 800248a:	3b01      	subs	r3, #1
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800248e:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_InitTick+0xec>)
 8002490:	4a21      	ldr	r2, [pc, #132]	; (8002518 <HAL_InitTick+0xf0>)
 8002492:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002494:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <HAL_InitTick+0xec>)
 8002496:	f240 32e7 	movw	r2, #999	; 0x3e7
 800249a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <HAL_InitTick+0xec>)
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <HAL_InitTick+0xec>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_InitTick+0xec>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_InitTick+0xec>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80024b4:	4817      	ldr	r0, [pc, #92]	; (8002514 <HAL_InitTick+0xec>)
 80024b6:	f006 f967 	bl	8008788 <HAL_TIM_Base_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80024c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d11b      	bne.n	8002500 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80024c8:	4812      	ldr	r0, [pc, #72]	; (8002514 <HAL_InitTick+0xec>)
 80024ca:	f006 f9ad 	bl	8008828 <HAL_TIM_Base_Start_IT>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80024d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d111      	bne.n	8002500 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024dc:	2036      	movs	r0, #54	; 0x36
 80024de:	f000 fffd 	bl	80034dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b0f      	cmp	r3, #15
 80024e6:	d808      	bhi.n	80024fa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80024e8:	2200      	movs	r2, #0
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	2036      	movs	r0, #54	; 0x36
 80024ee:	f000 ffd9 	bl	80034a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_InitTick+0xf4>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e002      	b.n	8002500 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002500:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002504:	4618      	mov	r0, r3
 8002506:	3738      	adds	r7, #56	; 0x38
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	431bde83 	.word	0x431bde83
 8002514:	2000294c 	.word	0x2000294c
 8002518:	40001000 	.word	0x40001000
 800251c:	20000008 	.word	0x20000008

08002520 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002524:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <SDTimer_Handler+0x40>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <SDTimer_Handler+0x1c>
    Timer1--;
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <SDTimer_Handler+0x40>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b2da      	uxtb	r2, r3
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <SDTimer_Handler+0x40>)
 800253a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <SDTimer_Handler+0x44>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d006      	beq.n	8002554 <SDTimer_Handler+0x34>
    Timer2--;
 8002546:	4b07      	ldr	r3, [pc, #28]	; (8002564 <SDTimer_Handler+0x44>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b2da      	uxtb	r2, r3
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <SDTimer_Handler+0x44>)
 8002552:	701a      	strb	r2, [r3, #0]
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20002999 	.word	0x20002999
 8002564:	2000299a 	.word	0x2000299a

08002568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800256c:	e7fe      	b.n	800256c <NMI_Handler+0x4>

0800256e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002572:	e7fe      	b.n	8002572 <HardFault_Handler+0x4>

08002574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002578:	e7fe      	b.n	8002578 <MemManage_Handler+0x4>

0800257a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800257e:	e7fe      	b.n	800257e <BusFault_Handler+0x4>

08002580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002584:	e7fe      	b.n	8002584 <UsageFault_Handler+0x4>

08002586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800259a:	f006 f9b5 	bl	8008908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20002898 	.word	0x20002898

080025a8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <I2C1_EV_IRQHandler+0x10>)
 80025ae:	f002 f891 	bl	80046d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20002784 	.word	0x20002784

080025bc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <I2C1_ER_IRQHandler+0x10>)
 80025c2:	f002 f9da 	bl	800497a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20002784 	.word	0x20002784

080025d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80025d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025d8:	f001 fcf4 	bl	8003fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}

080025e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	 FatFsCnt++;
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <TIM6_DAC_IRQHandler+0x30>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <TIM6_DAC_IRQHandler+0x30>)
 80025f0:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <TIM6_DAC_IRQHandler+0x30>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b09      	cmp	r3, #9
 80025fa:	d904      	bls.n	8002606 <TIM6_DAC_IRQHandler+0x26>
	  {
	    FatFsCnt = 0;
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <TIM6_DAC_IRQHandler+0x30>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002602:	f7ff ff8d 	bl	8002520 <SDTimer_Handler>
	  }

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002606:	4803      	ldr	r0, [pc, #12]	; (8002614 <TIM6_DAC_IRQHandler+0x34>)
 8002608:	f006 f97e 	bl	8008908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20002998 	.word	0x20002998
 8002614:	2000294c 	.word	0x2000294c

08002618 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <DMA2_Stream0_IRQHandler+0x10>)
 800261e:	f001 f893 	bl	8003748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20002724 	.word	0x20002724

0800262c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <_sbrk+0x5c>)
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <_sbrk+0x60>)
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <_sbrk+0x64>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <_sbrk+0x68>)
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <_sbrk+0x64>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	429a      	cmp	r2, r3
 800265a:	d207      	bcs.n	800266c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800265c:	f00f fd7e 	bl	801215c <__errno>
 8002660:	4603      	mov	r3, r0
 8002662:	220c      	movs	r2, #12
 8002664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	e009      	b.n	8002680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <_sbrk+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <_sbrk+0x64>)
 800267c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20020000 	.word	0x20020000
 800268c:	00000800 	.word	0x00000800
 8002690:	2000299c 	.word	0x2000299c
 8002694:	20007938 	.word	0x20007938

08002698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <SystemInit+0x20>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <SystemInit+0x20>)
 80026a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c0:	480d      	ldr	r0, [pc, #52]	; (80026f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026c2:	490e      	ldr	r1, [pc, #56]	; (80026fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c8:	e002      	b.n	80026d0 <LoopCopyDataInit>

080026ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ce:	3304      	adds	r3, #4

080026d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d4:	d3f9      	bcc.n	80026ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d6:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026d8:	4c0b      	ldr	r4, [pc, #44]	; (8002708 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026dc:	e001      	b.n	80026e2 <LoopFillZerobss>

080026de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e0:	3204      	adds	r2, #4

080026e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e4:	d3fb      	bcc.n	80026de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026e6:	f7ff ffd7 	bl	8002698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ea:	f00f fd3d 	bl	8012168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ee:	f7fe fd19 	bl	8001124 <main>
  bx  lr    
 80026f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026fc:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002700:	08016794 	.word	0x08016794
  ldr r2, =_sbss
 8002704:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002708:	20007934 	.word	0x20007934

0800270c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800270c:	e7fe      	b.n	800270c <ADC_IRQHandler>
	...

08002710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_Init+0x40>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <HAL_Init+0x40>)
 800271a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800271e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_Init+0x40>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <HAL_Init+0x40>)
 8002726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <HAL_Init+0x40>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a07      	ldr	r2, [pc, #28]	; (8002750 <HAL_Init+0x40>)
 8002732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002738:	2003      	movs	r0, #3
 800273a:	f000 fea8 	bl	800348e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800273e:	200f      	movs	r0, #15
 8002740:	f7ff fe72 	bl	8002428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002744:	f7ff fc36 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40023c00 	.word	0x40023c00

08002754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_IncTick+0x20>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_IncTick+0x24>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4413      	add	r3, r2
 8002764:	4a04      	ldr	r2, [pc, #16]	; (8002778 <HAL_IncTick+0x24>)
 8002766:	6013      	str	r3, [r2, #0]
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	2000000c 	.word	0x2000000c
 8002778:	200029a0 	.word	0x200029a0

0800277c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return uwTick;
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_GetTick+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	200029a0 	.word	0x200029a0

08002794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800279c:	f7ff ffee 	bl	800277c <HAL_GetTick>
 80027a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d005      	beq.n	80027ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <HAL_Delay+0x44>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ba:	bf00      	nop
 80027bc:	f7ff ffde 	bl	800277c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d8f7      	bhi.n	80027bc <HAL_Delay+0x28>
  {
  }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000000c 	.word	0x2000000c

080027dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e033      	b.n	800285a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff fc06 	bl	800200c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b00      	cmp	r3, #0
 8002818:	d118      	bne.n	800284c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002822:	f023 0302 	bic.w	r3, r3, #2
 8002826:	f043 0202 	orr.w	r2, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fc02 	bl	8003038 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
 800284a:	e001      	b.n	8002850 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_ADC_Start+0x1a>
 800287a:	2302      	movs	r3, #2
 800287c:	e0b2      	b.n	80029e4 <HAL_ADC_Start+0x180>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d018      	beq.n	80028c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028a4:	4b52      	ldr	r3, [pc, #328]	; (80029f0 <HAL_ADC_Start+0x18c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <HAL_ADC_Start+0x190>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0c9a      	lsrs	r2, r3, #18
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028b8:	e002      	b.n	80028c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	3b01      	subs	r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f9      	bne.n	80028ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d17a      	bne.n	80029ca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002912:	d106      	bne.n	8002922 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	f023 0206 	bic.w	r2, r3, #6
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	645a      	str	r2, [r3, #68]	; 0x44
 8002920:	e002      	b.n	8002928 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002930:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <HAL_ADC_Start+0x194>)
 8002932:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800293c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	2b00      	cmp	r3, #0
 8002948:	d12a      	bne.n	80029a0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <HAL_ADC_Start+0x198>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d015      	beq.n	8002980 <HAL_ADC_Start+0x11c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a29      	ldr	r2, [pc, #164]	; (8002a00 <HAL_ADC_Start+0x19c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d105      	bne.n	800296a <HAL_ADC_Start+0x106>
 800295e:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <HAL_ADC_Start+0x194>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a25      	ldr	r2, [pc, #148]	; (8002a04 <HAL_ADC_Start+0x1a0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d136      	bne.n	80029e2 <HAL_ADC_Start+0x17e>
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <HAL_ADC_Start+0x194>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b00      	cmp	r3, #0
 800297e:	d130      	bne.n	80029e2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d129      	bne.n	80029e2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	e020      	b.n	80029e2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a15      	ldr	r2, [pc, #84]	; (80029fc <HAL_ADC_Start+0x198>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d11b      	bne.n	80029e2 <HAL_ADC_Start+0x17e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d114      	bne.n	80029e2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	e00b      	b.n	80029e2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f043 0210 	orr.w	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	20000004 	.word	0x20000004
 80029f4:	431bde83 	.word	0x431bde83
 80029f8:	40012300 	.word	0x40012300
 80029fc:	40012000 	.word	0x40012000
 8002a00:	40012100 	.word	0x40012100
 8002a04:	40012200 	.word	0x40012200

08002a08 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_Stop+0x16>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e021      	b.n	8002a62 <HAL_ADC_Stop+0x5a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0201 	bic.w	r2, r2, #1
 8002a34:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a4c:	f023 0301 	bic.w	r3, r3, #1
 8002a50:	f043 0201 	orr.w	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8a:	d113      	bne.n	8002ab4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f043 0220 	orr.w	r2, r3, #32
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e063      	b.n	8002b7c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002ab4:	f7ff fe62 	bl	800277c <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002aba:	e021      	b.n	8002b00 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d01d      	beq.n	8002b00 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <HAL_ADC_PollForConversion+0x6c>
 8002aca:	f7ff fe57 	bl	800277c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d212      	bcs.n	8002b00 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d00b      	beq.n	8002b00 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f043 0204 	orr.w	r2, r3, #4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e03d      	b.n	8002b7c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d1d6      	bne.n	8002abc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f06f 0212 	mvn.w	r2, #18
 8002b16:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d123      	bne.n	8002b7a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d11f      	bne.n	8002b7a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d006      	beq.n	8002b56 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d111      	bne.n	8002b7a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d105      	bne.n	8002b7a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_Start_DMA+0x1e>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e0e9      	b.n	8002d76 <HAL_ADC_Start_DMA+0x1f2>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d018      	beq.n	8002bea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bc8:	4b6d      	ldr	r3, [pc, #436]	; (8002d80 <HAL_ADC_Start_DMA+0x1fc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a6d      	ldr	r2, [pc, #436]	; (8002d84 <HAL_ADC_Start_DMA+0x200>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	0c9a      	lsrs	r2, r3, #18
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bdc:	e002      	b.n	8002be4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f9      	bne.n	8002bde <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf8:	d107      	bne.n	8002c0a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c08:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	f040 80a1 	bne.w	8002d5c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c58:	d106      	bne.n	8002c68 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f023 0206 	bic.w	r2, r3, #6
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	645a      	str	r2, [r3, #68]	; 0x44
 8002c66:	e002      	b.n	8002c6e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c76:	4b44      	ldr	r3, [pc, #272]	; (8002d88 <HAL_ADC_Start_DMA+0x204>)
 8002c78:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	4a43      	ldr	r2, [pc, #268]	; (8002d8c <HAL_ADC_Start_DMA+0x208>)
 8002c80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	4a42      	ldr	r2, [pc, #264]	; (8002d90 <HAL_ADC_Start_DMA+0x20c>)
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	4a41      	ldr	r2, [pc, #260]	; (8002d94 <HAL_ADC_Start_DMA+0x210>)
 8002c90:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002caa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	334c      	adds	r3, #76	; 0x4c
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f000 fcc2 	bl	8003654 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d12a      	bne.n	8002d32 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2d      	ldr	r2, [pc, #180]	; (8002d98 <HAL_ADC_Start_DMA+0x214>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d015      	beq.n	8002d12 <HAL_ADC_Start_DMA+0x18e>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a2c      	ldr	r2, [pc, #176]	; (8002d9c <HAL_ADC_Start_DMA+0x218>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d105      	bne.n	8002cfc <HAL_ADC_Start_DMA+0x178>
 8002cf0:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_ADC_Start_DMA+0x204>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <HAL_ADC_Start_DMA+0x21c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d136      	bne.n	8002d74 <HAL_ADC_Start_DMA+0x1f0>
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_ADC_Start_DMA+0x204>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d130      	bne.n	8002d74 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d129      	bne.n	8002d74 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	e020      	b.n	8002d74 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <HAL_ADC_Start_DMA+0x214>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d11b      	bne.n	8002d74 <HAL_ADC_Start_DMA+0x1f0>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d114      	bne.n	8002d74 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	e00b      	b.n	8002d74 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f043 0210 	orr.w	r2, r3, #16
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000004 	.word	0x20000004
 8002d84:	431bde83 	.word	0x431bde83
 8002d88:	40012300 	.word	0x40012300
 8002d8c:	08003231 	.word	0x08003231
 8002d90:	080032eb 	.word	0x080032eb
 8002d94:	08003307 	.word	0x08003307
 8002d98:	40012000 	.word	0x40012000
 8002d9c:	40012100 	.word	0x40012100
 8002da0:	40012200 	.word	0x40012200

08002da4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x1c>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e113      	b.n	8003018 <HAL_ADC_ConfigChannel+0x244>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b09      	cmp	r3, #9
 8002dfe:	d925      	bls.n	8002e4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68d9      	ldr	r1, [r3, #12]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4613      	mov	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4413      	add	r3, r2
 8002e14:	3b1e      	subs	r3, #30
 8002e16:	2207      	movs	r2, #7
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43da      	mvns	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	400a      	ands	r2, r1
 8002e24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68d9      	ldr	r1, [r3, #12]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	4618      	mov	r0, r3
 8002e38:	4603      	mov	r3, r0
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4403      	add	r3, r0
 8002e3e:	3b1e      	subs	r3, #30
 8002e40:	409a      	lsls	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	e022      	b.n	8002e92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6919      	ldr	r1, [r3, #16]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	2207      	movs	r2, #7
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43da      	mvns	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6919      	ldr	r1, [r3, #16]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	4618      	mov	r0, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4403      	add	r3, r0
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b06      	cmp	r3, #6
 8002e98:	d824      	bhi.n	8002ee4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3b05      	subs	r3, #5
 8002eac:	221f      	movs	r2, #31
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	400a      	ands	r2, r1
 8002eba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	4618      	mov	r0, r3
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3b05      	subs	r3, #5
 8002ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ee2:	e04c      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b0c      	cmp	r3, #12
 8002eea:	d824      	bhi.n	8002f36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	3b23      	subs	r3, #35	; 0x23
 8002efe:	221f      	movs	r2, #31
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43da      	mvns	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	3b23      	subs	r3, #35	; 0x23
 8002f28:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
 8002f34:	e023      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	3b41      	subs	r3, #65	; 0x41
 8002f48:	221f      	movs	r2, #31
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	400a      	ands	r2, r1
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	4618      	mov	r0, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	3b41      	subs	r3, #65	; 0x41
 8002f72:	fa00 f203 	lsl.w	r2, r0, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f7e:	4b29      	ldr	r3, [pc, #164]	; (8003024 <HAL_ADC_ConfigChannel+0x250>)
 8002f80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a28      	ldr	r2, [pc, #160]	; (8003028 <HAL_ADC_ConfigChannel+0x254>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d10f      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x1d8>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b12      	cmp	r3, #18
 8002f92:	d10b      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <HAL_ADC_ConfigChannel+0x254>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d12b      	bne.n	800300e <HAL_ADC_ConfigChannel+0x23a>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_ADC_ConfigChannel+0x258>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d003      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x1f4>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b11      	cmp	r3, #17
 8002fc6:	d122      	bne.n	800300e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a11      	ldr	r2, [pc, #68]	; (800302c <HAL_ADC_ConfigChannel+0x258>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d111      	bne.n	800300e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_ADC_ConfigChannel+0x25c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a11      	ldr	r2, [pc, #68]	; (8003034 <HAL_ADC_ConfigChannel+0x260>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	0c9a      	lsrs	r2, r3, #18
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003000:	e002      	b.n	8003008 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	3b01      	subs	r3, #1
 8003006:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f9      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40012300 	.word	0x40012300
 8003028:	40012000 	.word	0x40012000
 800302c:	10000012 	.word	0x10000012
 8003030:	20000004 	.word	0x20000004
 8003034:	431bde83 	.word	0x431bde83

08003038 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003040:	4b79      	ldr	r3, [pc, #484]	; (8003228 <ADC_Init+0x1f0>)
 8003042:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	431a      	orrs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800306c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	021a      	lsls	r2, r3, #8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003090:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6899      	ldr	r1, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	4a58      	ldr	r2, [pc, #352]	; (800322c <ADC_Init+0x1f4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d022      	beq.n	8003116 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6899      	ldr	r1, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003100:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	e00f      	b.n	8003136 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003124:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003134:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0202 	bic.w	r2, r2, #2
 8003144:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6899      	ldr	r1, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	7e1b      	ldrb	r3, [r3, #24]
 8003150:	005a      	lsls	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01b      	beq.n	800319c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003172:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003182:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	3b01      	subs	r3, #1
 8003190:	035a      	lsls	r2, r3, #13
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	e007      	b.n	80031ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	051a      	lsls	r2, r3, #20
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6899      	ldr	r1, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031ee:	025a      	lsls	r2, r3, #9
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6899      	ldr	r1, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	029a      	lsls	r2, r3, #10
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40012300 	.word	0x40012300
 800322c:	0f000001 	.word	0x0f000001

08003230 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003246:	2b00      	cmp	r3, #0
 8003248:	d13c      	bne.n	80032c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d12b      	bne.n	80032bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003268:	2b00      	cmp	r3, #0
 800326a:	d127      	bne.n	80032bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003276:	2b00      	cmp	r3, #0
 8003278:	d006      	beq.n	8003288 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003284:	2b00      	cmp	r3, #0
 8003286:	d119      	bne.n	80032bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0220 	bic.w	r2, r2, #32
 8003296:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7fe fe0d 	bl	8001edc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032c2:	e00e      	b.n	80032e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7ff fd74 	bl	8002dbe <HAL_ADC_ErrorCallback>
}
 80032d6:	e004      	b.n	80032e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
}
 80032e2:	bf00      	nop
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f7fe fde1 	bl	8001ec0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2240      	movs	r2, #64	; 0x40
 8003318:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	f043 0204 	orr.w	r2, r3, #4
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f7ff fd49 	bl	8002dbe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <__NVIC_SetPriorityGrouping+0x44>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003350:	4013      	ands	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800335c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003366:	4a04      	ldr	r2, [pc, #16]	; (8003378 <__NVIC_SetPriorityGrouping+0x44>)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	60d3      	str	r3, [r2, #12]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003380:	4b04      	ldr	r3, [pc, #16]	; (8003394 <__NVIC_GetPriorityGrouping+0x18>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	f003 0307 	and.w	r3, r3, #7
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	db0b      	blt.n	80033c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	f003 021f 	and.w	r2, r3, #31
 80033b0:	4907      	ldr	r1, [pc, #28]	; (80033d0 <__NVIC_EnableIRQ+0x38>)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	2001      	movs	r0, #1
 80033ba:	fa00 f202 	lsl.w	r2, r0, r2
 80033be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000e100 	.word	0xe000e100

080033d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	6039      	str	r1, [r7, #0]
 80033de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	db0a      	blt.n	80033fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	490c      	ldr	r1, [pc, #48]	; (8003420 <__NVIC_SetPriority+0x4c>)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	0112      	lsls	r2, r2, #4
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	440b      	add	r3, r1
 80033f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033fc:	e00a      	b.n	8003414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	4908      	ldr	r1, [pc, #32]	; (8003424 <__NVIC_SetPriority+0x50>)
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	3b04      	subs	r3, #4
 800340c:	0112      	lsls	r2, r2, #4
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	440b      	add	r3, r1
 8003412:	761a      	strb	r2, [r3, #24]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000e100 	.word	0xe000e100
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	; 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f1c3 0307 	rsb	r3, r3, #7
 8003442:	2b04      	cmp	r3, #4
 8003444:	bf28      	it	cs
 8003446:	2304      	movcs	r3, #4
 8003448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3304      	adds	r3, #4
 800344e:	2b06      	cmp	r3, #6
 8003450:	d902      	bls.n	8003458 <NVIC_EncodePriority+0x30>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3b03      	subs	r3, #3
 8003456:	e000      	b.n	800345a <NVIC_EncodePriority+0x32>
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345c:	f04f 32ff 	mov.w	r2, #4294967295
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43da      	mvns	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	401a      	ands	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003470:	f04f 31ff 	mov.w	r1, #4294967295
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	43d9      	mvns	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	4313      	orrs	r3, r2
         );
}
 8003482:	4618      	mov	r0, r3
 8003484:	3724      	adds	r7, #36	; 0x24
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff ff4c 	bl	8003334 <__NVIC_SetPriorityGrouping>
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b6:	f7ff ff61 	bl	800337c <__NVIC_GetPriorityGrouping>
 80034ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	6978      	ldr	r0, [r7, #20]
 80034c2:	f7ff ffb1 	bl	8003428 <NVIC_EncodePriority>
 80034c6:	4602      	mov	r2, r0
 80034c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ff80 	bl	80033d4 <__NVIC_SetPriority>
}
 80034d4:	bf00      	nop
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff ff54 	bl	8003398 <__NVIC_EnableIRQ>
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003504:	f7ff f93a 	bl	800277c <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e099      	b.n	8003648 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003534:	e00f      	b.n	8003556 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003536:	f7ff f921 	bl	800277c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b05      	cmp	r3, #5
 8003542:	d908      	bls.n	8003556 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2203      	movs	r2, #3
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e078      	b.n	8003648 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e8      	bne.n	8003536 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4b38      	ldr	r3, [pc, #224]	; (8003650 <HAL_DMA_Init+0x158>)
 8003570:	4013      	ands	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003582:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d107      	bne.n	80035c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	4313      	orrs	r3, r2
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f023 0307 	bic.w	r3, r3, #7
 80035d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d117      	bne.n	800361a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00e      	beq.n	800361a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fa9f 	bl	8003b40 <DMA_CheckFifoParam>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2240      	movs	r2, #64	; 0x40
 800360c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003616:	2301      	movs	r3, #1
 8003618:	e016      	b.n	8003648 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fa56 	bl	8003ad4 <DMA_CalcBaseAndBitshift>
 8003628:	4603      	mov	r3, r0
 800362a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	223f      	movs	r2, #63	; 0x3f
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	f010803f 	.word	0xf010803f

08003654 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_DMA_Start_IT+0x26>
 8003676:	2302      	movs	r3, #2
 8003678:	e040      	b.n	80036fc <HAL_DMA_Start_IT+0xa8>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d12f      	bne.n	80036ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f9e8 	bl	8003a78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	223f      	movs	r2, #63	; 0x3f
 80036ae:	409a      	lsls	r2, r3
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0216 	orr.w	r2, r2, #22
 80036c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0208 	orr.w	r2, r2, #8
 80036da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	e005      	b.n	80036fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
 80036f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d004      	beq.n	8003722 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2280      	movs	r2, #128	; 0x80
 800371c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e00c      	b.n	800373c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2205      	movs	r2, #5
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003754:	4b8e      	ldr	r3, [pc, #568]	; (8003990 <HAL_DMA_IRQHandler+0x248>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a8e      	ldr	r2, [pc, #568]	; (8003994 <HAL_DMA_IRQHandler+0x24c>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	0a9b      	lsrs	r3, r3, #10
 8003760:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003772:	2208      	movs	r2, #8
 8003774:	409a      	lsls	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01a      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d013      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0204 	bic.w	r2, r2, #4
 800379a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a0:	2208      	movs	r2, #8
 80037a2:	409a      	lsls	r2, r3
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ac:	f043 0201 	orr.w	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	2201      	movs	r2, #1
 80037ba:	409a      	lsls	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d012      	beq.n	80037ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d6:	2201      	movs	r2, #1
 80037d8:	409a      	lsls	r2, r3
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	f043 0202 	orr.w	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	2204      	movs	r2, #4
 80037f0:	409a      	lsls	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d012      	beq.n	8003820 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380c:	2204      	movs	r2, #4
 800380e:	409a      	lsls	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003818:	f043 0204 	orr.w	r2, r3, #4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003824:	2210      	movs	r2, #16
 8003826:	409a      	lsls	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d043      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d03c      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003842:	2210      	movs	r2, #16
 8003844:	409a      	lsls	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d018      	beq.n	800388a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d108      	bne.n	8003878 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d024      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	4798      	blx	r3
 8003876:	e01f      	b.n	80038b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01b      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e016      	b.n	80038b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d107      	bne.n	80038a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0208 	bic.w	r2, r2, #8
 80038a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	2220      	movs	r2, #32
 80038be:	409a      	lsls	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 808f 	beq.w	80039e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8087 	beq.w	80039e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	2220      	movs	r2, #32
 80038e0:	409a      	lsls	r2, r3
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b05      	cmp	r3, #5
 80038f0:	d136      	bne.n	8003960 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0216 	bic.w	r2, r2, #22
 8003900:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003910:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d103      	bne.n	8003922 <HAL_DMA_IRQHandler+0x1da>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0208 	bic.w	r2, r2, #8
 8003930:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003936:	223f      	movs	r2, #63	; 0x3f
 8003938:	409a      	lsls	r2, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003952:	2b00      	cmp	r3, #0
 8003954:	d07e      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4798      	blx	r3
        }
        return;
 800395e:	e079      	b.n	8003a54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d01d      	beq.n	80039aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10d      	bne.n	8003998 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	2b00      	cmp	r3, #0
 8003982:	d031      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
 800398c:	e02c      	b.n	80039e8 <HAL_DMA_IRQHandler+0x2a0>
 800398e:	bf00      	nop
 8003990:	20000004 	.word	0x20000004
 8003994:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d023      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
 80039a8:	e01e      	b.n	80039e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10f      	bne.n	80039d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0210 	bic.w	r2, r2, #16
 80039c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d032      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d022      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2205      	movs	r2, #5
 8003a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	3301      	adds	r3, #1
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d307      	bcc.n	8003a30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f2      	bne.n	8003a14 <HAL_DMA_IRQHandler+0x2cc>
 8003a2e:	e000      	b.n	8003a32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
 8003a52:	e000      	b.n	8003a56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a54:	bf00      	nop
    }
  }
}
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a6a:	b2db      	uxtb	r3, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d108      	bne.n	8003ab8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ab6:	e007      	b.n	8003ac8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	60da      	str	r2, [r3, #12]
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	3b10      	subs	r3, #16
 8003ae4:	4a14      	ldr	r2, [pc, #80]	; (8003b38 <DMA_CalcBaseAndBitshift+0x64>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aee:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <DMA_CalcBaseAndBitshift+0x68>)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d909      	bls.n	8003b16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b0a:	f023 0303 	bic.w	r3, r3, #3
 8003b0e:	1d1a      	adds	r2, r3, #4
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	659a      	str	r2, [r3, #88]	; 0x58
 8003b14:	e007      	b.n	8003b26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	aaaaaaab 	.word	0xaaaaaaab
 8003b3c:	08014510 	.word	0x08014510

08003b40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d11f      	bne.n	8003b9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d856      	bhi.n	8003c0e <DMA_CheckFifoParam+0xce>
 8003b60:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <DMA_CheckFifoParam+0x28>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003b8b 	.word	0x08003b8b
 8003b70:	08003b79 	.word	0x08003b79
 8003b74:	08003c0f 	.word	0x08003c0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d046      	beq.n	8003c12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b88:	e043      	b.n	8003c12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b92:	d140      	bne.n	8003c16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b98:	e03d      	b.n	8003c16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba2:	d121      	bne.n	8003be8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d837      	bhi.n	8003c1a <DMA_CheckFifoParam+0xda>
 8003baa:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <DMA_CheckFifoParam+0x70>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003bc1 	.word	0x08003bc1
 8003bb4:	08003bc7 	.word	0x08003bc7
 8003bb8:	08003bc1 	.word	0x08003bc1
 8003bbc:	08003bd9 	.word	0x08003bd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc4:	e030      	b.n	8003c28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d025      	beq.n	8003c1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd6:	e022      	b.n	8003c1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003be0:	d11f      	bne.n	8003c22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003be6:	e01c      	b.n	8003c22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d903      	bls.n	8003bf6 <DMA_CheckFifoParam+0xb6>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d003      	beq.n	8003bfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bf4:	e018      	b.n	8003c28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8003bfa:	e015      	b.n	8003c28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00e      	beq.n	8003c26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c0c:	e00b      	b.n	8003c26 <DMA_CheckFifoParam+0xe6>
      break;
 8003c0e:	bf00      	nop
 8003c10:	e00a      	b.n	8003c28 <DMA_CheckFifoParam+0xe8>
      break;
 8003c12:	bf00      	nop
 8003c14:	e008      	b.n	8003c28 <DMA_CheckFifoParam+0xe8>
      break;
 8003c16:	bf00      	nop
 8003c18:	e006      	b.n	8003c28 <DMA_CheckFifoParam+0xe8>
      break;
 8003c1a:	bf00      	nop
 8003c1c:	e004      	b.n	8003c28 <DMA_CheckFifoParam+0xe8>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e002      	b.n	8003c28 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c22:	bf00      	nop
 8003c24:	e000      	b.n	8003c28 <DMA_CheckFifoParam+0xe8>
      break;
 8003c26:	bf00      	nop
    }
  } 
  
  return status; 
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop

08003c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b089      	sub	sp, #36	; 0x24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61fb      	str	r3, [r7, #28]
 8003c52:	e165      	b.n	8003f20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c54:	2201      	movs	r2, #1
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4013      	ands	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	f040 8154 	bne.w	8003f1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d005      	beq.n	8003c8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d130      	bne.n	8003cec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	2203      	movs	r2, #3
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 0201 	and.w	r2, r3, #1
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d017      	beq.n	8003d28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	2203      	movs	r2, #3
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d123      	bne.n	8003d7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	08da      	lsrs	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3208      	adds	r2, #8
 8003d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	220f      	movs	r2, #15
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	08da      	lsrs	r2, r3, #3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3208      	adds	r2, #8
 8003d76:	69b9      	ldr	r1, [r7, #24]
 8003d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	2203      	movs	r2, #3
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 0203 	and.w	r2, r3, #3
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 80ae 	beq.w	8003f1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	4b5d      	ldr	r3, [pc, #372]	; (8003f38 <HAL_GPIO_Init+0x300>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	4a5c      	ldr	r2, [pc, #368]	; (8003f38 <HAL_GPIO_Init+0x300>)
 8003dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dce:	4b5a      	ldr	r3, [pc, #360]	; (8003f38 <HAL_GPIO_Init+0x300>)
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dda:	4a58      	ldr	r2, [pc, #352]	; (8003f3c <HAL_GPIO_Init+0x304>)
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	3302      	adds	r3, #2
 8003de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	220f      	movs	r2, #15
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a4f      	ldr	r2, [pc, #316]	; (8003f40 <HAL_GPIO_Init+0x308>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d025      	beq.n	8003e52 <HAL_GPIO_Init+0x21a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a4e      	ldr	r2, [pc, #312]	; (8003f44 <HAL_GPIO_Init+0x30c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01f      	beq.n	8003e4e <HAL_GPIO_Init+0x216>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a4d      	ldr	r2, [pc, #308]	; (8003f48 <HAL_GPIO_Init+0x310>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d019      	beq.n	8003e4a <HAL_GPIO_Init+0x212>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a4c      	ldr	r2, [pc, #304]	; (8003f4c <HAL_GPIO_Init+0x314>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <HAL_GPIO_Init+0x20e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a4b      	ldr	r2, [pc, #300]	; (8003f50 <HAL_GPIO_Init+0x318>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00d      	beq.n	8003e42 <HAL_GPIO_Init+0x20a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a4a      	ldr	r2, [pc, #296]	; (8003f54 <HAL_GPIO_Init+0x31c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d007      	beq.n	8003e3e <HAL_GPIO_Init+0x206>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a49      	ldr	r2, [pc, #292]	; (8003f58 <HAL_GPIO_Init+0x320>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d101      	bne.n	8003e3a <HAL_GPIO_Init+0x202>
 8003e36:	2306      	movs	r3, #6
 8003e38:	e00c      	b.n	8003e54 <HAL_GPIO_Init+0x21c>
 8003e3a:	2307      	movs	r3, #7
 8003e3c:	e00a      	b.n	8003e54 <HAL_GPIO_Init+0x21c>
 8003e3e:	2305      	movs	r3, #5
 8003e40:	e008      	b.n	8003e54 <HAL_GPIO_Init+0x21c>
 8003e42:	2304      	movs	r3, #4
 8003e44:	e006      	b.n	8003e54 <HAL_GPIO_Init+0x21c>
 8003e46:	2303      	movs	r3, #3
 8003e48:	e004      	b.n	8003e54 <HAL_GPIO_Init+0x21c>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e002      	b.n	8003e54 <HAL_GPIO_Init+0x21c>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <HAL_GPIO_Init+0x21c>
 8003e52:	2300      	movs	r3, #0
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	f002 0203 	and.w	r2, r2, #3
 8003e5a:	0092      	lsls	r2, r2, #2
 8003e5c:	4093      	lsls	r3, r2
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e64:	4935      	ldr	r1, [pc, #212]	; (8003f3c <HAL_GPIO_Init+0x304>)
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	089b      	lsrs	r3, r3, #2
 8003e6a:	3302      	adds	r3, #2
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e72:	4b3a      	ldr	r3, [pc, #232]	; (8003f5c <HAL_GPIO_Init+0x324>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e96:	4a31      	ldr	r2, [pc, #196]	; (8003f5c <HAL_GPIO_Init+0x324>)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e9c:	4b2f      	ldr	r3, [pc, #188]	; (8003f5c <HAL_GPIO_Init+0x324>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ec0:	4a26      	ldr	r2, [pc, #152]	; (8003f5c <HAL_GPIO_Init+0x324>)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ec6:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <HAL_GPIO_Init+0x324>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eea:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <HAL_GPIO_Init+0x324>)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <HAL_GPIO_Init+0x324>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f14:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <HAL_GPIO_Init+0x324>)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	61fb      	str	r3, [r7, #28]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	2b0f      	cmp	r3, #15
 8003f24:	f67f ae96 	bls.w	8003c54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	3724      	adds	r7, #36	; 0x24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	40013800 	.word	0x40013800
 8003f40:	40020000 	.word	0x40020000
 8003f44:	40020400 	.word	0x40020400
 8003f48:	40020800 	.word	0x40020800
 8003f4c:	40020c00 	.word	0x40020c00
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40021400 	.word	0x40021400
 8003f58:	40021800 	.word	0x40021800
 8003f5c:	40013c00 	.word	0x40013c00

08003f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	887b      	ldrh	r3, [r7, #2]
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
 8003f7c:	e001      	b.n	8003f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	807b      	strh	r3, [r7, #2]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fa0:	787b      	ldrb	r3, [r7, #1]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fa6:	887a      	ldrh	r2, [r7, #2]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fac:	e003      	b.n	8003fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fae:	887b      	ldrh	r3, [r7, #2]
 8003fb0:	041a      	lsls	r2, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	619a      	str	r2, [r3, #24]
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fce:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d006      	beq.n	8003fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fda:	4a05      	ldr	r2, [pc, #20]	; (8003ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fdc:	88fb      	ldrh	r3, [r7, #6]
 8003fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd ff88 	bl	8001ef8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40013c00 	.word	0x40013c00

08003ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e12b      	b.n	800425e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fe f884 	bl	8002128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2224      	movs	r2, #36	; 0x24
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004046:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004056:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004058:	f002 faea 	bl	8006630 <HAL_RCC_GetPCLK1Freq>
 800405c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4a81      	ldr	r2, [pc, #516]	; (8004268 <HAL_I2C_Init+0x274>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d807      	bhi.n	8004078 <HAL_I2C_Init+0x84>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a80      	ldr	r2, [pc, #512]	; (800426c <HAL_I2C_Init+0x278>)
 800406c:	4293      	cmp	r3, r2
 800406e:	bf94      	ite	ls
 8004070:	2301      	movls	r3, #1
 8004072:	2300      	movhi	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e006      	b.n	8004086 <HAL_I2C_Init+0x92>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a7d      	ldr	r2, [pc, #500]	; (8004270 <HAL_I2C_Init+0x27c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	bf94      	ite	ls
 8004080:	2301      	movls	r3, #1
 8004082:	2300      	movhi	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e0e7      	b.n	800425e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a78      	ldr	r2, [pc, #480]	; (8004274 <HAL_I2C_Init+0x280>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	0c9b      	lsrs	r3, r3, #18
 8004098:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a6a      	ldr	r2, [pc, #424]	; (8004268 <HAL_I2C_Init+0x274>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d802      	bhi.n	80040c8 <HAL_I2C_Init+0xd4>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	3301      	adds	r3, #1
 80040c6:	e009      	b.n	80040dc <HAL_I2C_Init+0xe8>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	4a69      	ldr	r2, [pc, #420]	; (8004278 <HAL_I2C_Init+0x284>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	099b      	lsrs	r3, r3, #6
 80040da:	3301      	adds	r3, #1
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	430b      	orrs	r3, r1
 80040e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	495c      	ldr	r1, [pc, #368]	; (8004268 <HAL_I2C_Init+0x274>)
 80040f8:	428b      	cmp	r3, r1
 80040fa:	d819      	bhi.n	8004130 <HAL_I2C_Init+0x13c>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1e59      	subs	r1, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	fbb1 f3f3 	udiv	r3, r1, r3
 800410a:	1c59      	adds	r1, r3, #1
 800410c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004110:	400b      	ands	r3, r1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_I2C_Init+0x138>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1e59      	subs	r1, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	fbb1 f3f3 	udiv	r3, r1, r3
 8004124:	3301      	adds	r3, #1
 8004126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412a:	e051      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 800412c:	2304      	movs	r3, #4
 800412e:	e04f      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d111      	bne.n	800415c <HAL_I2C_Init+0x168>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1e58      	subs	r0, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	440b      	add	r3, r1
 8004146:	fbb0 f3f3 	udiv	r3, r0, r3
 800414a:	3301      	adds	r3, #1
 800414c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e012      	b.n	8004182 <HAL_I2C_Init+0x18e>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1e58      	subs	r0, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	0099      	lsls	r1, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004172:	3301      	adds	r3, #1
 8004174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Init+0x196>
 8004186:	2301      	movs	r3, #1
 8004188:	e022      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10e      	bne.n	80041b0 <HAL_I2C_Init+0x1bc>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1e58      	subs	r0, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6859      	ldr	r1, [r3, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	440b      	add	r3, r1
 80041a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a4:	3301      	adds	r3, #1
 80041a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ae:	e00f      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1e58      	subs	r0, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6859      	ldr	r1, [r3, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	0099      	lsls	r1, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c6:	3301      	adds	r3, #1
 80041c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	6809      	ldr	r1, [r1, #0]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6911      	ldr	r1, [r2, #16]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68d2      	ldr	r2, [r2, #12]
 800420a:	4311      	orrs	r1, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	430b      	orrs	r3, r1
 8004212:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	000186a0 	.word	0x000186a0
 800426c:	001e847f 	.word	0x001e847f
 8004270:	003d08ff 	.word	0x003d08ff
 8004274:	431bde83 	.word	0x431bde83
 8004278:	10624dd3 	.word	0x10624dd3

0800427c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	461a      	mov	r2, r3
 8004288:	460b      	mov	r3, r1
 800428a:	817b      	strh	r3, [r7, #10]
 800428c:	4613      	mov	r3, r2
 800428e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004290:	f7fe fa74 	bl	800277c <HAL_GetTick>
 8004294:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b20      	cmp	r3, #32
 80042a0:	f040 80e0 	bne.w	8004464 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	2319      	movs	r3, #25
 80042aa:	2201      	movs	r2, #1
 80042ac:	4970      	ldr	r1, [pc, #448]	; (8004470 <HAL_I2C_Master_Transmit+0x1f4>)
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f001 fef8 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042ba:	2302      	movs	r3, #2
 80042bc:	e0d3      	b.n	8004466 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_I2C_Master_Transmit+0x50>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0cc      	b.n	8004466 <HAL_I2C_Master_Transmit+0x1ea>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d007      	beq.n	80042f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004300:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2221      	movs	r2, #33	; 0x21
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2210      	movs	r2, #16
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	893a      	ldrh	r2, [r7, #8]
 8004322:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4a50      	ldr	r2, [pc, #320]	; (8004474 <HAL_I2C_Master_Transmit+0x1f8>)
 8004332:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004334:	8979      	ldrh	r1, [r7, #10]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	6a3a      	ldr	r2, [r7, #32]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f001 fd88 	bl	8005e50 <I2C_MasterRequestWrite>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e08d      	b.n	8004466 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004360:	e066      	b.n	8004430 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	6a39      	ldr	r1, [r7, #32]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f001 ff72 	bl	8006250 <I2C_WaitOnTXEFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	2b04      	cmp	r3, #4
 8004378:	d107      	bne.n	800438a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004388:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e06b      	b.n	8004466 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	781a      	ldrb	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d11b      	bne.n	8004404 <HAL_I2C_Master_Transmit+0x188>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d017      	beq.n	8004404 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	6a39      	ldr	r1, [r7, #32]
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f001 ff62 	bl	80062d2 <I2C_WaitOnBTFFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00d      	beq.n	8004430 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	2b04      	cmp	r3, #4
 800441a:	d107      	bne.n	800442c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e01a      	b.n	8004466 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004434:	2b00      	cmp	r3, #0
 8004436:	d194      	bne.n	8004362 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	e000      	b.n	8004466 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004464:	2302      	movs	r3, #2
  }
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	00100002 	.word	0x00100002
 8004474:	ffff0000 	.word	0xffff0000

08004478 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08a      	sub	sp, #40	; 0x28
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	460b      	mov	r3, r1
 8004486:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004488:	f7fe f978 	bl	800277c <HAL_GetTick>
 800448c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b20      	cmp	r3, #32
 800449c:	f040 8111 	bne.w	80046c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	2319      	movs	r3, #25
 80044a6:	2201      	movs	r2, #1
 80044a8:	4988      	ldr	r1, [pc, #544]	; (80046cc <HAL_I2C_IsDeviceReady+0x254>)
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f001 fdfa 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
 80044b8:	e104      	b.n	80046c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_I2C_IsDeviceReady+0x50>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e0fd      	b.n	80046c4 <HAL_I2C_IsDeviceReady+0x24c>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d007      	beq.n	80044ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0201 	orr.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2224      	movs	r2, #36	; 0x24
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a70      	ldr	r2, [pc, #448]	; (80046d0 <HAL_I2C_IsDeviceReady+0x258>)
 8004510:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004520:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2200      	movs	r2, #0
 800452a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f001 fdb8 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00d      	beq.n	8004556 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004548:	d103      	bne.n	8004552 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0b6      	b.n	80046c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004564:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004566:	f7fe f909 	bl	800277c <HAL_GetTick>
 800456a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b02      	cmp	r3, #2
 8004578:	bf0c      	ite	eq
 800457a:	2301      	moveq	r3, #1
 800457c:	2300      	movne	r3, #0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004590:	bf0c      	ite	eq
 8004592:	2301      	moveq	r3, #1
 8004594:	2300      	movne	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800459a:	e025      	b.n	80045e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800459c:	f7fe f8ee 	bl	800277c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d302      	bcc.n	80045b2 <HAL_I2C_IsDeviceReady+0x13a>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d103      	bne.n	80045ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	22a0      	movs	r2, #160	; 0xa0
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	bf0c      	ite	eq
 80045c8:	2301      	moveq	r3, #1
 80045ca:	2300      	movne	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045de:	bf0c      	ite	eq
 80045e0:	2301      	moveq	r3, #1
 80045e2:	2300      	movne	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2ba0      	cmp	r3, #160	; 0xa0
 80045f2:	d005      	beq.n	8004600 <HAL_I2C_IsDeviceReady+0x188>
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <HAL_I2C_IsDeviceReady+0x188>
 80045fa:	7dbb      	ldrb	r3, [r7, #22]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0cd      	beq.n	800459c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d129      	bne.n	800466a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004624:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	2319      	movs	r3, #25
 8004642:	2201      	movs	r2, #1
 8004644:	4921      	ldr	r1, [pc, #132]	; (80046cc <HAL_I2C_IsDeviceReady+0x254>)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f001 fd2c 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e036      	b.n	80046c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	e02c      	b.n	80046c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004678:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004682:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	2319      	movs	r3, #25
 800468a:	2201      	movs	r2, #1
 800468c:	490f      	ldr	r1, [pc, #60]	; (80046cc <HAL_I2C_IsDeviceReady+0x254>)
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f001 fd08 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e012      	b.n	80046c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	3301      	adds	r3, #1
 80046a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	f4ff af32 	bcc.w	8004512 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3720      	adds	r7, #32
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	00100002 	.word	0x00100002
 80046d0:	ffff0000 	.word	0xffff0000

080046d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b10      	cmp	r3, #16
 8004702:	d003      	beq.n	800470c <HAL_I2C_EV_IRQHandler+0x38>
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	f040 80b1 	bne.w	800486e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10d      	bne.n	8004742 <HAL_I2C_EV_IRQHandler+0x6e>
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800472c:	d003      	beq.n	8004736 <HAL_I2C_EV_IRQHandler+0x62>
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004734:	d101      	bne.n	800473a <HAL_I2C_EV_IRQHandler+0x66>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <HAL_I2C_EV_IRQHandler+0x68>
 800473a:	2300      	movs	r3, #0
 800473c:	2b01      	cmp	r3, #1
 800473e:	f000 8114 	beq.w	800496a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00b      	beq.n	8004764 <HAL_I2C_EV_IRQHandler+0x90>
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004752:	2b00      	cmp	r3, #0
 8004754:	d006      	beq.n	8004764 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f001 fe5d 	bl	8006416 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 fd5e 	bl	800521e <I2C_Master_SB>
 8004762:	e083      	b.n	800486c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d008      	beq.n	8004780 <HAL_I2C_EV_IRQHandler+0xac>
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fdd6 	bl	800532a <I2C_Master_ADD10>
 800477e:	e075      	b.n	800486c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <HAL_I2C_EV_IRQHandler+0xc8>
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fdf2 	bl	800537e <I2C_Master_ADDR>
 800479a:	e067      	b.n	800486c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d036      	beq.n	8004814 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b4:	f000 80db 	beq.w	800496e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00d      	beq.n	80047de <HAL_I2C_EV_IRQHandler+0x10a>
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_I2C_EV_IRQHandler+0x10a>
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d103      	bne.n	80047de <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f9d6 	bl	8004b88 <I2C_MasterTransmit_TXE>
 80047dc:	e046      	b.n	800486c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 80c2 	beq.w	800496e <HAL_I2C_EV_IRQHandler+0x29a>
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 80bc 	beq.w	800496e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047f6:	7bbb      	ldrb	r3, [r7, #14]
 80047f8:	2b21      	cmp	r3, #33	; 0x21
 80047fa:	d103      	bne.n	8004804 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fa5f 	bl	8004cc0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004802:	e0b4      	b.n	800496e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	2b40      	cmp	r3, #64	; 0x40
 8004808:	f040 80b1 	bne.w	800496e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 facd 	bl	8004dac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004812:	e0ac      	b.n	800496e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800481e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004822:	f000 80a4 	beq.w	800496e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00d      	beq.n	800484c <HAL_I2C_EV_IRQHandler+0x178>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <HAL_I2C_EV_IRQHandler+0x178>
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d103      	bne.n	800484c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fb45 	bl	8004ed4 <I2C_MasterReceive_RXNE>
 800484a:	e00f      	b.n	800486c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 808b 	beq.w	800496e <HAL_I2C_EV_IRQHandler+0x29a>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8085 	beq.w	800496e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fbf0 	bl	800504a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486a:	e080      	b.n	800496e <HAL_I2C_EV_IRQHandler+0x29a>
 800486c:	e07f      	b.n	800496e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d004      	beq.n	8004880 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	61fb      	str	r3, [r7, #28]
 800487e:	e007      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d011      	beq.n	80048be <HAL_I2C_EV_IRQHandler+0x1ea>
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00c      	beq.n	80048be <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80048b4:	69b9      	ldr	r1, [r7, #24]
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 ffb0 	bl	800581c <I2C_Slave_ADDR>
 80048bc:	e05a      	b.n	8004974 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_I2C_EV_IRQHandler+0x206>
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 ffea 	bl	80058ac <I2C_Slave_STOPF>
 80048d8:	e04c      	b.n	8004974 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048da:	7bbb      	ldrb	r3, [r7, #14]
 80048dc:	2b21      	cmp	r3, #33	; 0x21
 80048de:	d002      	beq.n	80048e6 <HAL_I2C_EV_IRQHandler+0x212>
 80048e0:	7bbb      	ldrb	r3, [r7, #14]
 80048e2:	2b29      	cmp	r3, #41	; 0x29
 80048e4:	d120      	bne.n	8004928 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <HAL_I2C_EV_IRQHandler+0x238>
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d008      	beq.n	800490c <HAL_I2C_EV_IRQHandler+0x238>
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d103      	bne.n	800490c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fecb 	bl	80056a0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800490a:	e032      	b.n	8004972 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d02d      	beq.n	8004972 <HAL_I2C_EV_IRQHandler+0x29e>
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491c:	2b00      	cmp	r3, #0
 800491e:	d028      	beq.n	8004972 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fefa 	bl	800571a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004926:	e024      	b.n	8004972 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00d      	beq.n	800494e <HAL_I2C_EV_IRQHandler+0x27a>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_I2C_EV_IRQHandler+0x27a>
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d103      	bne.n	800494e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 ff08 	bl	800575c <I2C_SlaveReceive_RXNE>
 800494c:	e012      	b.n	8004974 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00d      	beq.n	8004974 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 ff38 	bl	80057d8 <I2C_SlaveReceive_BTF>
 8004968:	e004      	b.n	8004974 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800496a:	bf00      	nop
 800496c:	e002      	b.n	8004974 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800496e:	bf00      	nop
 8004970:	e000      	b.n	8004974 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004972:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004974:	3720      	adds	r7, #32
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b08a      	sub	sp, #40	; 0x28
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004992:	2300      	movs	r3, #0
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00d      	beq.n	80049c4 <HAL_I2C_ER_IRQHandler+0x4a>
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00d      	beq.n	80049ea <HAL_I2C_ER_IRQHandler+0x70>
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	f043 0302 	orr.w	r3, r3, #2
 80049de:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80049e8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d03e      	beq.n	8004a72 <HAL_I2C_ER_IRQHandler+0xf8>
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d039      	beq.n	8004a72 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80049fe:	7efb      	ldrb	r3, [r7, #27]
 8004a00:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a18:	7ebb      	ldrb	r3, [r7, #26]
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d112      	bne.n	8004a44 <HAL_I2C_ER_IRQHandler+0xca>
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10f      	bne.n	8004a44 <HAL_I2C_ER_IRQHandler+0xca>
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
 8004a26:	2b21      	cmp	r3, #33	; 0x21
 8004a28:	d008      	beq.n	8004a3c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004a2a:	7cfb      	ldrb	r3, [r7, #19]
 8004a2c:	2b29      	cmp	r3, #41	; 0x29
 8004a2e:	d005      	beq.n	8004a3c <HAL_I2C_ER_IRQHandler+0xc2>
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	2b28      	cmp	r3, #40	; 0x28
 8004a34:	d106      	bne.n	8004a44 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b21      	cmp	r3, #33	; 0x21
 8004a3a:	d103      	bne.n	8004a44 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f001 f865 	bl	8005b0c <I2C_Slave_AF>
 8004a42:	e016      	b.n	8004a72 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a4c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	f043 0304 	orr.w	r3, r3, #4
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a56:	7efb      	ldrb	r3, [r7, #27]
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d002      	beq.n	8004a62 <HAL_I2C_ER_IRQHandler+0xe8>
 8004a5c:	7efb      	ldrb	r3, [r7, #27]
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	d107      	bne.n	8004a72 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a70:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00d      	beq.n	8004a98 <HAL_I2C_ER_IRQHandler+0x11e>
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d008      	beq.n	8004a98 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	f043 0308 	orr.w	r3, r3, #8
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004a96:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d008      	beq.n	8004ab0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f001 f89e 	bl	8005bec <I2C_ITError>
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	3728      	adds	r7, #40	; 0x28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
 8004b14:	4613      	mov	r3, r2
 8004b16:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d150      	bne.n	8004c50 <I2C_MasterTransmit_TXE+0xc8>
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b21      	cmp	r3, #33	; 0x21
 8004bb2:	d14d      	bne.n	8004c50 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d01d      	beq.n	8004bf6 <I2C_MasterTransmit_TXE+0x6e>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d01a      	beq.n	8004bf6 <I2C_MasterTransmit_TXE+0x6e>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bc6:	d016      	beq.n	8004bf6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bd6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2211      	movs	r2, #17
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7ff ff62 	bl	8004ab8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bf4:	e060      	b.n	8004cb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c04:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c14:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d107      	bne.n	8004c40 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff ff7d 	bl	8004b38 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c3e:	e03b      	b.n	8004cb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ff35 	bl	8004ab8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c4e:	e033      	b.n	8004cb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	2b21      	cmp	r3, #33	; 0x21
 8004c54:	d005      	beq.n	8004c62 <I2C_MasterTransmit_TXE+0xda>
 8004c56:	7bbb      	ldrb	r3, [r7, #14]
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d12d      	bne.n	8004cb8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	2b22      	cmp	r3, #34	; 0x22
 8004c60:	d12a      	bne.n	8004cb8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d108      	bne.n	8004c7e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c7c:	e01c      	b.n	8004cb8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b40      	cmp	r3, #64	; 0x40
 8004c88:	d103      	bne.n	8004c92 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f88e 	bl	8004dac <I2C_MemoryTransmit_TXE_BTF>
}
 8004c90:	e012      	b.n	8004cb8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	781a      	ldrb	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cb6:	e7ff      	b.n	8004cb8 <I2C_MasterTransmit_TXE+0x130>
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b21      	cmp	r3, #33	; 0x21
 8004cd8:	d164      	bne.n	8004da4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d012      	beq.n	8004d0a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	781a      	ldrb	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d08:	e04c      	b.n	8004da4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d01d      	beq.n	8004d4c <I2C_MasterTransmit_BTF+0x8c>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	d01a      	beq.n	8004d4c <I2C_MasterTransmit_BTF+0x8c>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d1c:	d016      	beq.n	8004d4c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d2c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2211      	movs	r2, #17
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff feb7 	bl	8004ab8 <HAL_I2C_MasterTxCpltCallback>
}
 8004d4a:	e02b      	b.n	8004da4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d5a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d6a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	d107      	bne.n	8004d96 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff fed2 	bl	8004b38 <HAL_I2C_MemTxCpltCallback>
}
 8004d94:	e006      	b.n	8004da4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff fe8a 	bl	8004ab8 <HAL_I2C_MasterTxCpltCallback>
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d11d      	bne.n	8004e00 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d10b      	bne.n	8004de4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ddc:	1c9a      	adds	r2, r3, #2
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004de2:	e073      	b.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	121b      	asrs	r3, r3, #8
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004dfe:	e065      	b.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d10b      	bne.n	8004e20 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e1e:	e055      	b.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d151      	bne.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b22      	cmp	r3, #34	; 0x22
 8004e2c:	d10d      	bne.n	8004e4a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e48:	e040      	b.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d015      	beq.n	8004e80 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b21      	cmp	r3, #33	; 0x21
 8004e58:	d112      	bne.n	8004e80 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	781a      	ldrb	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e7e:	e025      	b.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d120      	bne.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b21      	cmp	r3, #33	; 0x21
 8004e8e:	d11d      	bne.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e9e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff fe36 	bl	8004b38 <HAL_I2C_MemTxCpltCallback>
}
 8004ecc:	bf00      	nop
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b22      	cmp	r3, #34	; 0x22
 8004ee6:	f040 80ac 	bne.w	8005042 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d921      	bls.n	8004f3c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	f040 808c 	bne.w	8005042 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f38:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004f3a:	e082      	b.n	8005042 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d075      	beq.n	8005030 <I2C_MasterReceive_RXNE+0x15c>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d002      	beq.n	8004f50 <I2C_MasterReceive_RXNE+0x7c>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d16f      	bne.n	8005030 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f001 f9ff 	bl	8006354 <I2C_WaitOnSTOPRequestThroughIT>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d142      	bne.n	8004fe2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f7a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d10a      	bne.n	8004fcc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff fdc1 	bl	8004b4c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fca:	e03a      	b.n	8005042 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2212      	movs	r2, #18
 8004fd8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff fd76 	bl	8004acc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fe0:	e02f      	b.n	8005042 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ff0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff fd99 	bl	8004b60 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800502e:	e008      	b.n	8005042 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503e:	605a      	str	r2, [r3, #4]
}
 8005040:	e7ff      	b.n	8005042 <I2C_MasterReceive_RXNE+0x16e>
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b04      	cmp	r3, #4
 8005060:	d11b      	bne.n	800509a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005070:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005098:	e0bd      	b.n	8005216 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d129      	bne.n	80050f8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d00a      	beq.n	80050d0 <I2C_MasterReceive_BTF+0x86>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d007      	beq.n	80050d0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050f6:	e08e      	b.n	8005216 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d176      	bne.n	80051f0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d002      	beq.n	800510e <I2C_MasterReceive_BTF+0xc4>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b10      	cmp	r3, #16
 800510c:	d108      	bne.n	8005120 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e019      	b.n	8005154 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b04      	cmp	r3, #4
 8005124:	d002      	beq.n	800512c <I2C_MasterReceive_BTF+0xe2>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d108      	bne.n	800513e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	e00a      	b.n	8005154 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b10      	cmp	r3, #16
 8005142:	d007      	beq.n	8005154 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005152:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051ae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b40      	cmp	r3, #64	; 0x40
 80051c2:	d10a      	bne.n	80051da <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff fcba 	bl	8004b4c <HAL_I2C_MemRxCpltCallback>
}
 80051d8:	e01d      	b.n	8005216 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2212      	movs	r2, #18
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff fc6f 	bl	8004acc <HAL_I2C_MasterRxCpltCallback>
}
 80051ee:	e012      	b.n	8005216 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b40      	cmp	r3, #64	; 0x40
 8005230:	d117      	bne.n	8005262 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523e:	b2db      	uxtb	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800524a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800524c:	e067      	b.n	800531e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f043 0301 	orr.w	r3, r3, #1
 8005258:	b2da      	uxtb	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	611a      	str	r2, [r3, #16]
}
 8005260:	e05d      	b.n	800531e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800526a:	d133      	bne.n	80052d4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b21      	cmp	r3, #33	; 0x21
 8005276:	d109      	bne.n	800528c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527c:	b2db      	uxtb	r3, r3
 800527e:	461a      	mov	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005288:	611a      	str	r2, [r3, #16]
 800528a:	e008      	b.n	800529e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	b2da      	uxtb	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d004      	beq.n	80052b0 <I2C_Master_SB+0x92>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d108      	bne.n	80052c2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d032      	beq.n	800531e <I2C_Master_SB+0x100>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d02d      	beq.n	800531e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d0:	605a      	str	r2, [r3, #4]
}
 80052d2:	e024      	b.n	800531e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10e      	bne.n	80052fa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	11db      	asrs	r3, r3, #7
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	f003 0306 	and.w	r3, r3, #6
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f063 030f 	orn	r3, r3, #15
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	611a      	str	r2, [r3, #16]
}
 80052f8:	e011      	b.n	800531e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d10d      	bne.n	800531e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	b29b      	uxth	r3, r3
 8005308:	11db      	asrs	r3, r3, #7
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f003 0306 	and.w	r3, r3, #6
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f063 030e 	orn	r3, r3, #14
 8005316:	b2da      	uxtb	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	611a      	str	r2, [r3, #16]
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	b2da      	uxtb	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <I2C_Master_ADD10+0x26>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d108      	bne.n	8005362 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00c      	beq.n	8005372 <I2C_Master_ADD10+0x48>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005370:	605a      	str	r2, [r3, #4]
  }
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800537e:	b480      	push	{r7}
 8005380:	b091      	sub	sp, #68	; 0x44
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800538c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b22      	cmp	r3, #34	; 0x22
 80053a6:	f040 8169 	bne.w	800567c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10f      	bne.n	80053d2 <I2C_Master_ADDR+0x54>
 80053b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053b6:	2b40      	cmp	r3, #64	; 0x40
 80053b8:	d10b      	bne.n	80053d2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ba:	2300      	movs	r3, #0
 80053bc:	633b      	str	r3, [r7, #48]	; 0x30
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	633b      	str	r3, [r7, #48]	; 0x30
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	633b      	str	r3, [r7, #48]	; 0x30
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	e160      	b.n	8005694 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11d      	bne.n	8005416 <I2C_Master_ADDR+0x98>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053e2:	d118      	bne.n	8005416 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e4:	2300      	movs	r3, #0
 80053e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005408:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	651a      	str	r2, [r3, #80]	; 0x50
 8005414:	e13e      	b.n	8005694 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d113      	bne.n	8005448 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005420:	2300      	movs	r3, #0
 8005422:	62bb      	str	r3, [r7, #40]	; 0x28
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	62bb      	str	r3, [r7, #40]	; 0x28
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e115      	b.n	8005674 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b01      	cmp	r3, #1
 8005450:	f040 808a 	bne.w	8005568 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800545a:	d137      	bne.n	80054cc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800547a:	d113      	bne.n	80054a4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800548a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548c:	2300      	movs	r3, #0
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	e0e7      	b.n	8005674 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a4:	2300      	movs	r3, #0
 80054a6:	623b      	str	r3, [r7, #32]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	623b      	str	r3, [r7, #32]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	623b      	str	r3, [r7, #32]
 80054b8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	e0d3      	b.n	8005674 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80054cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d02e      	beq.n	8005530 <I2C_Master_ADDR+0x1b2>
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d02b      	beq.n	8005530 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	2b12      	cmp	r3, #18
 80054dc:	d102      	bne.n	80054e4 <I2C_Master_ADDR+0x166>
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d125      	bne.n	8005530 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d00e      	beq.n	8005508 <I2C_Master_ADDR+0x18a>
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d00b      	beq.n	8005508 <I2C_Master_ADDR+0x18a>
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	2b10      	cmp	r3, #16
 80054f4:	d008      	beq.n	8005508 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	e007      	b.n	8005518 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005516:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005518:	2300      	movs	r3, #0
 800551a:	61fb      	str	r3, [r7, #28]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	61fb      	str	r3, [r7, #28]
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	e0a1      	b.n	8005674 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005540:	2300      	movs	r3, #0
 8005542:	61bb      	str	r3, [r7, #24]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	61bb      	str	r3, [r7, #24]
 8005554:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	e085      	b.n	8005674 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d14d      	bne.n	800560e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	2b04      	cmp	r3, #4
 8005576:	d016      	beq.n	80055a6 <I2C_Master_ADDR+0x228>
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	2b02      	cmp	r3, #2
 800557c:	d013      	beq.n	80055a6 <I2C_Master_ADDR+0x228>
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	2b10      	cmp	r3, #16
 8005582:	d010      	beq.n	80055a6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005592:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	e007      	b.n	80055b6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055b4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c4:	d117      	bne.n	80055f6 <I2C_Master_ADDR+0x278>
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055cc:	d00b      	beq.n	80055e6 <I2C_Master_ADDR+0x268>
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d008      	beq.n	80055e6 <I2C_Master_ADDR+0x268>
 80055d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d005      	beq.n	80055e6 <I2C_Master_ADDR+0x268>
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d002      	beq.n	80055e6 <I2C_Master_ADDR+0x268>
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d107      	bne.n	80055f6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	e032      	b.n	8005674 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800561c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800562c:	d117      	bne.n	800565e <I2C_Master_ADDR+0x2e0>
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005634:	d00b      	beq.n	800564e <I2C_Master_ADDR+0x2d0>
 8005636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005638:	2b01      	cmp	r3, #1
 800563a:	d008      	beq.n	800564e <I2C_Master_ADDR+0x2d0>
 800563c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563e:	2b08      	cmp	r3, #8
 8005640:	d005      	beq.n	800564e <I2C_Master_ADDR+0x2d0>
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	2b10      	cmp	r3, #16
 8005646:	d002      	beq.n	800564e <I2C_Master_ADDR+0x2d0>
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	2b20      	cmp	r3, #32
 800564c:	d107      	bne.n	800565e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800565c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800565e:	2300      	movs	r3, #0
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800567a:	e00b      	b.n	8005694 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
}
 8005692:	e7ff      	b.n	8005694 <I2C_Master_ADDR+0x316>
 8005694:	bf00      	nop
 8005696:	3744      	adds	r7, #68	; 0x44
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d02b      	beq.n	8005712 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	781a      	ldrb	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d114      	bne.n	8005712 <I2C_SlaveTransmit_TXE+0x72>
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	2b29      	cmp	r3, #41	; 0x29
 80056ec:	d111      	bne.n	8005712 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2221      	movs	r2, #33	; 0x21
 8005702:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2228      	movs	r2, #40	; 0x28
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7ff f9e7 	bl	8004ae0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d011      	beq.n	8005750 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	781a      	ldrb	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d02c      	beq.n	80057d0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d114      	bne.n	80057d0 <I2C_SlaveReceive_RXNE+0x74>
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	2b2a      	cmp	r3, #42	; 0x2a
 80057aa:	d111      	bne.n	80057d0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2222      	movs	r2, #34	; 0x22
 80057c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2228      	movs	r2, #40	; 0x28
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff f992 	bl	8004af4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d012      	beq.n	8005810 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005830:	b2db      	uxtb	r3, r3
 8005832:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005836:	2b28      	cmp	r3, #40	; 0x28
 8005838:	d125      	bne.n	8005886 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005848:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	81bb      	strh	r3, [r7, #12]
 8005868:	e002      	b.n	8005870 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005878:	89ba      	ldrh	r2, [r7, #12]
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff f942 	bl	8004b08 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005884:	e00e      	b.n	80058a4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005886:	2300      	movs	r3, #0
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	60bb      	str	r3, [r7, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80058cc:	2300      	movs	r3, #0
 80058ce:	60bb      	str	r3, [r7, #8]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	60bb      	str	r3, [r7, #8]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005908:	d172      	bne.n	80059f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b22      	cmp	r3, #34	; 0x22
 800590e:	d002      	beq.n	8005916 <I2C_Slave_STOPF+0x6a>
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b2a      	cmp	r3, #42	; 0x2a
 8005914:	d135      	bne.n	8005982 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	b29a      	uxth	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f043 0204 	orr.w	r2, r3, #4
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005948:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe f884 	bl	8003a5c <HAL_DMA_GetState>
 8005954:	4603      	mov	r3, r0
 8005956:	2b01      	cmp	r3, #1
 8005958:	d049      	beq.n	80059ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	4a69      	ldr	r2, [pc, #420]	; (8005b04 <I2C_Slave_STOPF+0x258>)
 8005960:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	4618      	mov	r0, r3
 8005968:	f7fd fecc 	bl	8003704 <HAL_DMA_Abort_IT>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d03d      	beq.n	80059ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800597c:	4610      	mov	r0, r2
 800597e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005980:	e035      	b.n	80059ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	b29a      	uxth	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f043 0204 	orr.w	r2, r3, #4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe f84e 	bl	8003a5c <HAL_DMA_GetState>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d014      	beq.n	80059f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	4a4e      	ldr	r2, [pc, #312]	; (8005b04 <I2C_Slave_STOPF+0x258>)
 80059cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fd fe96 	bl	8003704 <HAL_DMA_Abort_IT>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d008      	beq.n	80059f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059e8:	4610      	mov	r0, r2
 80059ea:	4798      	blx	r3
 80059ec:	e000      	b.n	80059f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d03e      	beq.n	8005a78 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d112      	bne.n	8005a2e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a38:	2b40      	cmp	r3, #64	; 0x40
 8005a3a:	d112      	bne.n	8005a62 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691a      	ldr	r2, [r3, #16]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	f043 0204 	orr.w	r2, r3, #4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f8b3 	bl	8005bec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005a86:	e039      	b.n	8005afc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a8c:	d109      	bne.n	8005aa2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2228      	movs	r2, #40	; 0x28
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff f829 	bl	8004af4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b28      	cmp	r3, #40	; 0x28
 8005aac:	d111      	bne.n	8005ad2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a15      	ldr	r2, [pc, #84]	; (8005b08 <I2C_Slave_STOPF+0x25c>)
 8005ab2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff f82a 	bl	8004b24 <HAL_I2C_ListenCpltCallback>
}
 8005ad0:	e014      	b.n	8005afc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	2b22      	cmp	r3, #34	; 0x22
 8005ad8:	d002      	beq.n	8005ae0 <I2C_Slave_STOPF+0x234>
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	2b22      	cmp	r3, #34	; 0x22
 8005ade:	d10d      	bne.n	8005afc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fe fffc 	bl	8004af4 <HAL_I2C_SlaveRxCpltCallback>
}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	08005f55 	.word	0x08005f55
 8005b08:	ffff0000 	.word	0xffff0000

08005b0c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d002      	beq.n	8005b2e <I2C_Slave_AF+0x22>
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d129      	bne.n	8005b82 <I2C_Slave_AF+0x76>
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	2b28      	cmp	r3, #40	; 0x28
 8005b32:	d126      	bne.n	8005b82 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a2c      	ldr	r2, [pc, #176]	; (8005be8 <I2C_Slave_AF+0xdc>)
 8005b38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b48:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b52:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b62:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fe ffd2 	bl	8004b24 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005b80:	e02e      	b.n	8005be0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	2b21      	cmp	r3, #33	; 0x21
 8005b86:	d126      	bne.n	8005bd6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a17      	ldr	r2, [pc, #92]	; (8005be8 <I2C_Slave_AF+0xdc>)
 8005b8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2221      	movs	r2, #33	; 0x21
 8005b92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bb2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bbc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bcc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fe ff86 	bl	8004ae0 <HAL_I2C_SlaveTxCpltCallback>
}
 8005bd4:	e004      	b.n	8005be0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bde:	615a      	str	r2, [r3, #20]
}
 8005be0:	bf00      	nop
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	ffff0000 	.word	0xffff0000

08005bec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c04:	7bbb      	ldrb	r3, [r7, #14]
 8005c06:	2b10      	cmp	r3, #16
 8005c08:	d002      	beq.n	8005c10 <I2C_ITError+0x24>
 8005c0a:	7bbb      	ldrb	r3, [r7, #14]
 8005c0c:	2b40      	cmp	r3, #64	; 0x40
 8005c0e:	d10a      	bne.n	8005c26 <I2C_ITError+0x3a>
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b22      	cmp	r3, #34	; 0x22
 8005c14:	d107      	bne.n	8005c26 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c2c:	2b28      	cmp	r3, #40	; 0x28
 8005c2e:	d107      	bne.n	8005c40 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2228      	movs	r2, #40	; 0x28
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c3e:	e015      	b.n	8005c6c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c4e:	d00a      	beq.n	8005c66 <I2C_ITError+0x7a>
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	2b60      	cmp	r3, #96	; 0x60
 8005c54:	d007      	beq.n	8005c66 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c7a:	d162      	bne.n	8005d42 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d020      	beq.n	8005cdc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9e:	4a6a      	ldr	r2, [pc, #424]	; (8005e48 <I2C_ITError+0x25c>)
 8005ca0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fd fd2c 	bl	8003704 <HAL_DMA_Abort_IT>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 8089 	beq.w	8005dc6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	4798      	blx	r3
 8005cda:	e074      	b.n	8005dc6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	4a59      	ldr	r2, [pc, #356]	; (8005e48 <I2C_ITError+0x25c>)
 8005ce2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fd fd0b 	bl	8003704 <HAL_DMA_Abort_IT>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d068      	beq.n	8005dc6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	d10b      	bne.n	8005d1a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0201 	bic.w	r2, r2, #1
 8005d28:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	4798      	blx	r3
 8005d40:	e041      	b.n	8005dc6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b60      	cmp	r3, #96	; 0x60
 8005d4c:	d125      	bne.n	8005d9a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d66:	2b40      	cmp	r3, #64	; 0x40
 8005d68:	d10b      	bne.n	8005d82 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fe feee 	bl	8004b74 <HAL_I2C_AbortCpltCallback>
 8005d98:	e015      	b.n	8005dc6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d10b      	bne.n	8005dc0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7fe fecd 	bl	8004b60 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10e      	bne.n	8005df4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d109      	bne.n	8005df4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d007      	beq.n	8005e04 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e02:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d113      	bne.n	8005e40 <I2C_ITError+0x254>
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	2b28      	cmp	r3, #40	; 0x28
 8005e1c:	d110      	bne.n	8005e40 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <I2C_ITError+0x260>)
 8005e22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7fe fe72 	bl	8004b24 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e40:	bf00      	nop
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	08005f55 	.word	0x08005f55
 8005e4c:	ffff0000 	.word	0xffff0000

08005e50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b088      	sub	sp, #32
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d006      	beq.n	8005e7a <I2C_MasterRequestWrite+0x2a>
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d003      	beq.n	8005e7a <I2C_MasterRequestWrite+0x2a>
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e78:	d108      	bne.n	8005e8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	e00b      	b.n	8005ea4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e90:	2b12      	cmp	r3, #18
 8005e92:	d107      	bne.n	8005ea4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 f8f7 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00d      	beq.n	8005ed8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eca:	d103      	bne.n	8005ed4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e035      	b.n	8005f44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ee0:	d108      	bne.n	8005ef4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ee2:	897b      	ldrh	r3, [r7, #10]
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ef0:	611a      	str	r2, [r3, #16]
 8005ef2:	e01b      	b.n	8005f2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ef4:	897b      	ldrh	r3, [r7, #10]
 8005ef6:	11db      	asrs	r3, r3, #7
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	f003 0306 	and.w	r3, r3, #6
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	f063 030f 	orn	r3, r3, #15
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	490e      	ldr	r1, [pc, #56]	; (8005f4c <I2C_MasterRequestWrite+0xfc>)
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f91d 	bl	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e010      	b.n	8005f44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f22:	897b      	ldrh	r3, [r7, #10]
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	4907      	ldr	r1, [pc, #28]	; (8005f50 <I2C_MasterRequestWrite+0x100>)
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 f90d 	bl	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	00010008 	.word	0x00010008
 8005f50:	00010002 	.word	0x00010002

08005f54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f6e:	4b4b      	ldr	r3, [pc, #300]	; (800609c <I2C_DMAAbort+0x148>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	08db      	lsrs	r3, r3, #3
 8005f74:	4a4a      	ldr	r2, [pc, #296]	; (80060a0 <I2C_DMAAbort+0x14c>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	0a1a      	lsrs	r2, r3, #8
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	00da      	lsls	r2, r3, #3
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	f043 0220 	orr.w	r2, r3, #32
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005f9a:	e00a      	b.n	8005fb2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb0:	d0ea      	beq.n	8005f88 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	2200      	movs	r2, #0
 8005fd0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	2200      	movs	r2, #0
 8006006:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b60      	cmp	r3, #96	; 0x60
 8006022:	d10e      	bne.n	8006042 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	2200      	movs	r2, #0
 8006038:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800603a:	6978      	ldr	r0, [r7, #20]
 800603c:	f7fe fd9a 	bl	8004b74 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006040:	e027      	b.n	8006092 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006042:	7cfb      	ldrb	r3, [r7, #19]
 8006044:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006048:	2b28      	cmp	r3, #40	; 0x28
 800604a:	d117      	bne.n	800607c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800606a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2200      	movs	r2, #0
 8006070:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2228      	movs	r2, #40	; 0x28
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800607a:	e007      	b.n	800608c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800608c:	6978      	ldr	r0, [r7, #20]
 800608e:	f7fe fd67 	bl	8004b60 <HAL_I2C_ErrorCallback>
}
 8006092:	bf00      	nop
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000004 	.word	0x20000004
 80060a0:	14f8b589 	.word	0x14f8b589

080060a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	603b      	str	r3, [r7, #0]
 80060b0:	4613      	mov	r3, r2
 80060b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060b4:	e025      	b.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d021      	beq.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060be:	f7fc fb5d 	bl	800277c <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d302      	bcc.n	80060d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d116      	bne.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2220      	movs	r2, #32
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f043 0220 	orr.w	r2, r3, #32
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e023      	b.n	800614a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	0c1b      	lsrs	r3, r3, #16
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	d10d      	bne.n	8006128 <I2C_WaitOnFlagUntilTimeout+0x84>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	43da      	mvns	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4013      	ands	r3, r2
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	e00c      	b.n	8006142 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	43da      	mvns	r2, r3
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4013      	ands	r3, r2
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	bf0c      	ite	eq
 800613a:	2301      	moveq	r3, #1
 800613c:	2300      	movne	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	429a      	cmp	r2, r3
 8006146:	d0b6      	beq.n	80060b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006160:	e051      	b.n	8006206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800616c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006170:	d123      	bne.n	80061ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006180:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800618a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f043 0204 	orr.w	r2, r3, #4
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e046      	b.n	8006248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d021      	beq.n	8006206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c2:	f7fc fadb 	bl	800277c <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d302      	bcc.n	80061d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d116      	bne.n	8006206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e020      	b.n	8006248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	0c1b      	lsrs	r3, r3, #16
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	d10c      	bne.n	800622a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	43da      	mvns	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4013      	ands	r3, r2
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	bf14      	ite	ne
 8006222:	2301      	movne	r3, #1
 8006224:	2300      	moveq	r3, #0
 8006226:	b2db      	uxtb	r3, r3
 8006228:	e00b      	b.n	8006242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	43da      	mvns	r2, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	4013      	ands	r3, r2
 8006236:	b29b      	uxth	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	bf14      	ite	ne
 800623c:	2301      	movne	r3, #1
 800623e:	2300      	moveq	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d18d      	bne.n	8006162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800625c:	e02d      	b.n	80062ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f8aa 	bl	80063b8 <I2C_IsAcknowledgeFailed>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e02d      	b.n	80062ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006274:	d021      	beq.n	80062ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006276:	f7fc fa81 	bl	800277c <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	d302      	bcc.n	800628c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d116      	bne.n	80062ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2220      	movs	r2, #32
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	f043 0220 	orr.w	r2, r3, #32
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e007      	b.n	80062ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c4:	2b80      	cmp	r3, #128	; 0x80
 80062c6:	d1ca      	bne.n	800625e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062de:	e02d      	b.n	800633c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f869 	bl	80063b8 <I2C_IsAcknowledgeFailed>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e02d      	b.n	800634c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d021      	beq.n	800633c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f8:	f7fc fa40 	bl	800277c <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	429a      	cmp	r2, r3
 8006306:	d302      	bcc.n	800630e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d116      	bne.n	800633c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	f043 0220 	orr.w	r2, r3, #32
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e007      	b.n	800634c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b04      	cmp	r3, #4
 8006348:	d1ca      	bne.n	80062e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006360:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	08db      	lsrs	r3, r3, #3
 8006366:	4a13      	ldr	r2, [pc, #76]	; (80063b4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	0a1a      	lsrs	r2, r3, #8
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3b01      	subs	r3, #1
 800637a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d107      	bne.n	8006392 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	f043 0220 	orr.w	r2, r3, #32
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e008      	b.n	80063a4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800639c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a0:	d0e9      	beq.n	8006376 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	20000004 	.word	0x20000004
 80063b4:	14f8b589 	.word	0x14f8b589

080063b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ce:	d11b      	bne.n	8006408 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	f043 0204 	orr.w	r2, r3, #4
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006426:	d103      	bne.n	8006430 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800642e:	e007      	b.n	8006440 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006438:	d102      	bne.n	8006440 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2208      	movs	r2, #8
 800643e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e0cc      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006460:	4b68      	ldr	r3, [pc, #416]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d90c      	bls.n	8006488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800646e:	4b65      	ldr	r3, [pc, #404]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006476:	4b63      	ldr	r3, [pc, #396]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d001      	beq.n	8006488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e0b8      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d020      	beq.n	80064d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064a0:	4b59      	ldr	r3, [pc, #356]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	4a58      	ldr	r2, [pc, #352]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064b8:	4b53      	ldr	r3, [pc, #332]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4a52      	ldr	r2, [pc, #328]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064c4:	4b50      	ldr	r3, [pc, #320]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	494d      	ldr	r1, [pc, #308]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d044      	beq.n	800656c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d107      	bne.n	80064fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ea:	4b47      	ldr	r3, [pc, #284]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d119      	bne.n	800652a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e07f      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d003      	beq.n	800650a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006506:	2b03      	cmp	r3, #3
 8006508:	d107      	bne.n	800651a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800650a:	4b3f      	ldr	r3, [pc, #252]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e06f      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651a:	4b3b      	ldr	r3, [pc, #236]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e067      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800652a:	4b37      	ldr	r3, [pc, #220]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f023 0203 	bic.w	r2, r3, #3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	4934      	ldr	r1, [pc, #208]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 8006538:	4313      	orrs	r3, r2
 800653a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800653c:	f7fc f91e 	bl	800277c <HAL_GetTick>
 8006540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006542:	e00a      	b.n	800655a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006544:	f7fc f91a 	bl	800277c <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006552:	4293      	cmp	r3, r2
 8006554:	d901      	bls.n	800655a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e04f      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655a:	4b2b      	ldr	r3, [pc, #172]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 020c 	and.w	r2, r3, #12
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	429a      	cmp	r2, r3
 800656a:	d1eb      	bne.n	8006544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800656c:	4b25      	ldr	r3, [pc, #148]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 030f 	and.w	r3, r3, #15
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d20c      	bcs.n	8006594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657a:	4b22      	ldr	r3, [pc, #136]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006582:	4b20      	ldr	r3, [pc, #128]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d001      	beq.n	8006594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e032      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d008      	beq.n	80065b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065a0:	4b19      	ldr	r3, [pc, #100]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	4916      	ldr	r1, [pc, #88]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065be:	4b12      	ldr	r3, [pc, #72]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	490e      	ldr	r1, [pc, #56]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065d2:	f000 fbb1 	bl	8006d38 <HAL_RCC_GetSysClockFreq>
 80065d6:	4602      	mov	r2, r0
 80065d8:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	091b      	lsrs	r3, r3, #4
 80065de:	f003 030f 	and.w	r3, r3, #15
 80065e2:	490a      	ldr	r1, [pc, #40]	; (800660c <HAL_RCC_ClockConfig+0x1c0>)
 80065e4:	5ccb      	ldrb	r3, [r1, r3]
 80065e6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ea:	4a09      	ldr	r2, [pc, #36]	; (8006610 <HAL_RCC_ClockConfig+0x1c4>)
 80065ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065ee:	4b09      	ldr	r3, [pc, #36]	; (8006614 <HAL_RCC_ClockConfig+0x1c8>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fb ff18 	bl	8002428 <HAL_InitTick>

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	40023c00 	.word	0x40023c00
 8006608:	40023800 	.word	0x40023800
 800660c:	080144f8 	.word	0x080144f8
 8006610:	20000004 	.word	0x20000004
 8006614:	20000008 	.word	0x20000008

08006618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800661c:	4b03      	ldr	r3, [pc, #12]	; (800662c <HAL_RCC_GetHCLKFreq+0x14>)
 800661e:	681b      	ldr	r3, [r3, #0]
}
 8006620:	4618      	mov	r0, r3
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	20000004 	.word	0x20000004

08006630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006634:	f7ff fff0 	bl	8006618 <HAL_RCC_GetHCLKFreq>
 8006638:	4602      	mov	r2, r0
 800663a:	4b05      	ldr	r3, [pc, #20]	; (8006650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	0a9b      	lsrs	r3, r3, #10
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	4903      	ldr	r1, [pc, #12]	; (8006654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006646:	5ccb      	ldrb	r3, [r1, r3]
 8006648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800664c:	4618      	mov	r0, r3
 800664e:	bd80      	pop	{r7, pc}
 8006650:	40023800 	.word	0x40023800
 8006654:	08014508 	.word	0x08014508

08006658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800665c:	f7ff ffdc 	bl	8006618 <HAL_RCC_GetHCLKFreq>
 8006660:	4602      	mov	r2, r0
 8006662:	4b05      	ldr	r3, [pc, #20]	; (8006678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	0b5b      	lsrs	r3, r3, #13
 8006668:	f003 0307 	and.w	r3, r3, #7
 800666c:	4903      	ldr	r1, [pc, #12]	; (800667c <HAL_RCC_GetPCLK2Freq+0x24>)
 800666e:	5ccb      	ldrb	r3, [r1, r3]
 8006670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006674:	4618      	mov	r0, r3
 8006676:	bd80      	pop	{r7, pc}
 8006678:	40023800 	.word	0x40023800
 800667c:	08014508 	.word	0x08014508

08006680 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	220f      	movs	r2, #15
 800668e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006690:	4b12      	ldr	r3, [pc, #72]	; (80066dc <HAL_RCC_GetClockConfig+0x5c>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 0203 	and.w	r2, r3, #3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800669c:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <HAL_RCC_GetClockConfig+0x5c>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80066a8:	4b0c      	ldr	r3, [pc, #48]	; (80066dc <HAL_RCC_GetClockConfig+0x5c>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80066b4:	4b09      	ldr	r3, [pc, #36]	; (80066dc <HAL_RCC_GetClockConfig+0x5c>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	08db      	lsrs	r3, r3, #3
 80066ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066c2:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <HAL_RCC_GetClockConfig+0x60>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 020f 	and.w	r2, r3, #15
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	601a      	str	r2, [r3, #0]
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	40023800 	.word	0x40023800
 80066e0:	40023c00 	.word	0x40023c00

080066e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08c      	sub	sp, #48	; 0x30
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d010      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800671c:	4b6f      	ldr	r3, [pc, #444]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800671e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006722:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672a:	496c      	ldr	r1, [pc, #432]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800673a:	2301      	movs	r3, #1
 800673c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d010      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800674a:	4b64      	ldr	r3, [pc, #400]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800674c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006750:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006758:	4960      	ldr	r1, [pc, #384]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800675a:	4313      	orrs	r3, r2
 800675c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006768:	2301      	movs	r3, #1
 800676a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d017      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006778:	4b58      	ldr	r3, [pc, #352]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800677a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800677e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	4955      	ldr	r1, [pc, #340]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006788:	4313      	orrs	r3, r2
 800678a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006796:	d101      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006798:	2301      	movs	r3, #1
 800679a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80067a4:	2301      	movs	r3, #1
 80067a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d017      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80067b4:	4b49      	ldr	r3, [pc, #292]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c2:	4946      	ldr	r1, [pc, #280]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067d2:	d101      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80067d4:	2301      	movs	r3, #1
 80067d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80067e0:	2301      	movs	r3, #1
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0320 	and.w	r3, r3, #32
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 808a 	beq.w	8006906 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067f2:	2300      	movs	r3, #0
 80067f4:	60bb      	str	r3, [r7, #8]
 80067f6:	4b39      	ldr	r3, [pc, #228]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	4a38      	ldr	r2, [pc, #224]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80067fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006800:	6413      	str	r3, [r2, #64]	; 0x40
 8006802:	4b36      	ldr	r3, [pc, #216]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680a:	60bb      	str	r3, [r7, #8]
 800680c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800680e:	4b34      	ldr	r3, [pc, #208]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a33      	ldr	r2, [pc, #204]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006818:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800681a:	f7fb ffaf 	bl	800277c <HAL_GetTick>
 800681e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006820:	e008      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006822:	f7fb ffab 	bl	800277c <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e278      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006834:	4b2a      	ldr	r3, [pc, #168]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0f0      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006840:	4b26      	ldr	r3, [pc, #152]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006848:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d02f      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006858:	6a3a      	ldr	r2, [r7, #32]
 800685a:	429a      	cmp	r2, r3
 800685c:	d028      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800685e:	4b1f      	ldr	r3, [pc, #124]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006866:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006868:	4b1e      	ldr	r3, [pc, #120]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800686a:	2201      	movs	r2, #1
 800686c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800686e:	4b1d      	ldr	r3, [pc, #116]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006874:	4a19      	ldr	r2, [pc, #100]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800687a:	4b18      	ldr	r3, [pc, #96]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800687c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b01      	cmp	r3, #1
 8006884:	d114      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006886:	f7fb ff79 	bl	800277c <HAL_GetTick>
 800688a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800688c:	e00a      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800688e:	f7fb ff75 	bl	800277c <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	f241 3288 	movw	r2, #5000	; 0x1388
 800689c:	4293      	cmp	r3, r2
 800689e:	d901      	bls.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e240      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068a4:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0ee      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068bc:	d114      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80068be:	4b07      	ldr	r3, [pc, #28]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d2:	4902      	ldr	r1, [pc, #8]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	608b      	str	r3, [r1, #8]
 80068d8:	e00c      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80068da:	bf00      	nop
 80068dc:	40023800 	.word	0x40023800
 80068e0:	40007000 	.word	0x40007000
 80068e4:	42470e40 	.word	0x42470e40
 80068e8:	4b4a      	ldr	r3, [pc, #296]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	4a49      	ldr	r2, [pc, #292]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80068ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80068f2:	6093      	str	r3, [r2, #8]
 80068f4:	4b47      	ldr	r3, [pc, #284]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80068f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006900:	4944      	ldr	r1, [pc, #272]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006902:	4313      	orrs	r3, r2
 8006904:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0310 	and.w	r3, r3, #16
 800690e:	2b00      	cmp	r3, #0
 8006910:	d004      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006918:	4b3f      	ldr	r3, [pc, #252]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800691a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006928:	4b3a      	ldr	r3, [pc, #232]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800692a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800692e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006936:	4937      	ldr	r1, [pc, #220]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006938:	4313      	orrs	r3, r2
 800693a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800694a:	4b32      	ldr	r3, [pc, #200]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800694c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006950:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006958:	492e      	ldr	r1, [pc, #184]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800695a:	4313      	orrs	r3, r2
 800695c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006968:	2b00      	cmp	r3, #0
 800696a:	d011      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800696c:	4b29      	ldr	r3, [pc, #164]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800696e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006972:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697a:	4926      	ldr	r1, [pc, #152]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800697c:	4313      	orrs	r3, r2
 800697e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800698a:	d101      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800698c:	2301      	movs	r3, #1
 800698e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800699c:	4b1d      	ldr	r3, [pc, #116]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800699e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069aa:	491a      	ldr	r1, [pc, #104]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d011      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80069be:	4b15      	ldr	r3, [pc, #84]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069cc:	4911      	ldr	r1, [pc, #68]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069dc:	d101      	bne.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80069de:	2301      	movs	r3, #1
 80069e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d005      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f0:	f040 80ff 	bne.w	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80069f4:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069fa:	f7fb febf 	bl	800277c <HAL_GetTick>
 80069fe:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a00:	e00e      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006a02:	f7fb febb 	bl	800277c <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d907      	bls.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e188      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006a14:	40023800 	.word	0x40023800
 8006a18:	424711e0 	.word	0x424711e0
 8006a1c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a20:	4b7e      	ldr	r3, [pc, #504]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1ea      	bne.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d009      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d028      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d124      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006a54:	4b71      	ldr	r3, [pc, #452]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a5a:	0c1b      	lsrs	r3, r3, #16
 8006a5c:	f003 0303 	and.w	r3, r3, #3
 8006a60:	3301      	adds	r3, #1
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a66:	4b6d      	ldr	r3, [pc, #436]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a6c:	0e1b      	lsrs	r3, r3, #24
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	019b      	lsls	r3, r3, #6
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	085b      	lsrs	r3, r3, #1
 8006a84:	3b01      	subs	r3, #1
 8006a86:	041b      	lsls	r3, r3, #16
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	061b      	lsls	r3, r3, #24
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	071b      	lsls	r3, r3, #28
 8006a96:	4961      	ldr	r1, [pc, #388]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ab2:	d00a      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d035      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ac8:	d130      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006aca:	4b54      	ldr	r3, [pc, #336]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ad0:	0c1b      	lsrs	r3, r3, #16
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006adc:	4b4f      	ldr	r3, [pc, #316]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ae2:	0f1b      	lsrs	r3, r3, #28
 8006ae4:	f003 0307 	and.w	r3, r3, #7
 8006ae8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	019b      	lsls	r3, r3, #6
 8006af4:	431a      	orrs	r2, r3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	085b      	lsrs	r3, r3, #1
 8006afa:	3b01      	subs	r3, #1
 8006afc:	041b      	lsls	r3, r3, #16
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	061b      	lsls	r3, r3, #24
 8006b06:	431a      	orrs	r2, r3
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	071b      	lsls	r3, r3, #28
 8006b0c:	4943      	ldr	r1, [pc, #268]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b14:	4b41      	ldr	r3, [pc, #260]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b1a:	f023 021f 	bic.w	r2, r3, #31
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	3b01      	subs	r3, #1
 8006b24:	493d      	ldr	r1, [pc, #244]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d029      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b40:	d124      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006b42:	4b36      	ldr	r3, [pc, #216]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b48:	0c1b      	lsrs	r3, r3, #16
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	3301      	adds	r3, #1
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b54:	4b31      	ldr	r3, [pc, #196]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b5a:	0f1b      	lsrs	r3, r3, #28
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	019b      	lsls	r3, r3, #6
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	3b01      	subs	r3, #1
 8006b76:	041b      	lsls	r3, r3, #16
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	061b      	lsls	r3, r3, #24
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	071b      	lsls	r3, r3, #28
 8006b84:	4925      	ldr	r1, [pc, #148]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d016      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	019b      	lsls	r3, r3, #6
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	085b      	lsrs	r3, r3, #1
 8006baa:	3b01      	subs	r3, #1
 8006bac:	041b      	lsls	r3, r3, #16
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	061b      	lsls	r3, r3, #24
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	071b      	lsls	r3, r3, #28
 8006bbe:	4917      	ldr	r1, [pc, #92]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bc6:	4b16      	ldr	r3, [pc, #88]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006bc8:	2201      	movs	r2, #1
 8006bca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bcc:	f7fb fdd6 	bl	800277c <HAL_GetTick>
 8006bd0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bd4:	f7fb fdd2 	bl	800277c <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e09f      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006be6:	4b0d      	ldr	r3, [pc, #52]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0f0      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	f040 8095 	bne.w	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c00:	f7fb fdbc 	bl	800277c <HAL_GetTick>
 8006c04:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c06:	e00f      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006c08:	f7fb fdb8 	bl	800277c <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d908      	bls.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e085      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006c1a:	bf00      	nop
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	42470068 	.word	0x42470068
 8006c24:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c28:	4b41      	ldr	r3, [pc, #260]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c34:	d0e8      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0304 	and.w	r3, r3, #4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d009      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d02b      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d127      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006c5e:	4b34      	ldr	r3, [pc, #208]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c64:	0c1b      	lsrs	r3, r3, #16
 8006c66:	f003 0303 	and.w	r3, r3, #3
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	699a      	ldr	r2, [r3, #24]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	019b      	lsls	r3, r3, #6
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	085b      	lsrs	r3, r3, #1
 8006c80:	3b01      	subs	r3, #1
 8006c82:	041b      	lsls	r3, r3, #16
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	061b      	lsls	r3, r3, #24
 8006c8c:	4928      	ldr	r1, [pc, #160]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c94:	4b26      	ldr	r3, [pc, #152]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c9a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	021b      	lsls	r3, r3, #8
 8006ca6:	4922      	ldr	r1, [pc, #136]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01d      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cc2:	d118      	bne.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006cc4:	4b1a      	ldr	r3, [pc, #104]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cca:	0e1b      	lsrs	r3, r3, #24
 8006ccc:	f003 030f 	and.w	r3, r3, #15
 8006cd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	019b      	lsls	r3, r3, #6
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	085b      	lsrs	r3, r3, #1
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	041b      	lsls	r3, r3, #16
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	061b      	lsls	r3, r3, #24
 8006cee:	4910      	ldr	r1, [pc, #64]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006cf6:	4b0f      	ldr	r3, [pc, #60]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cfc:	f7fb fd3e 	bl	800277c <HAL_GetTick>
 8006d00:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d02:	e008      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d04:	f7fb fd3a 	bl	800277c <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e007      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d16:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d22:	d1ef      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3730      	adds	r7, #48	; 0x30
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	40023800 	.word	0x40023800
 8006d34:	42470070 	.word	0x42470070

08006d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d3c:	b0ae      	sub	sp, #184	; 0xb8
 8006d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d5e:	4bcb      	ldr	r3, [pc, #812]	; (800708c <HAL_RCC_GetSysClockFreq+0x354>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 030c 	and.w	r3, r3, #12
 8006d66:	2b0c      	cmp	r3, #12
 8006d68:	f200 8206 	bhi.w	8007178 <HAL_RCC_GetSysClockFreq+0x440>
 8006d6c:	a201      	add	r2, pc, #4	; (adr r2, 8006d74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d72:	bf00      	nop
 8006d74:	08006da9 	.word	0x08006da9
 8006d78:	08007179 	.word	0x08007179
 8006d7c:	08007179 	.word	0x08007179
 8006d80:	08007179 	.word	0x08007179
 8006d84:	08006db1 	.word	0x08006db1
 8006d88:	08007179 	.word	0x08007179
 8006d8c:	08007179 	.word	0x08007179
 8006d90:	08007179 	.word	0x08007179
 8006d94:	08006db9 	.word	0x08006db9
 8006d98:	08007179 	.word	0x08007179
 8006d9c:	08007179 	.word	0x08007179
 8006da0:	08007179 	.word	0x08007179
 8006da4:	08006fa9 	.word	0x08006fa9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006da8:	4bb9      	ldr	r3, [pc, #740]	; (8007090 <HAL_RCC_GetSysClockFreq+0x358>)
 8006daa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006dae:	e1e7      	b.n	8007180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006db0:	4bb8      	ldr	r3, [pc, #736]	; (8007094 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006db6:	e1e3      	b.n	8007180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006db8:	4bb4      	ldr	r3, [pc, #720]	; (800708c <HAL_RCC_GetSysClockFreq+0x354>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dc4:	4bb1      	ldr	r3, [pc, #708]	; (800708c <HAL_RCC_GetSysClockFreq+0x354>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d071      	beq.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dd0:	4bae      	ldr	r3, [pc, #696]	; (800708c <HAL_RCC_GetSysClockFreq+0x354>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	099b      	lsrs	r3, r3, #6
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ddc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dec:	2300      	movs	r3, #0
 8006dee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006df6:	4622      	mov	r2, r4
 8006df8:	462b      	mov	r3, r5
 8006dfa:	f04f 0000 	mov.w	r0, #0
 8006dfe:	f04f 0100 	mov.w	r1, #0
 8006e02:	0159      	lsls	r1, r3, #5
 8006e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e08:	0150      	lsls	r0, r2, #5
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4621      	mov	r1, r4
 8006e10:	1a51      	subs	r1, r2, r1
 8006e12:	6439      	str	r1, [r7, #64]	; 0x40
 8006e14:	4629      	mov	r1, r5
 8006e16:	eb63 0301 	sbc.w	r3, r3, r1
 8006e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006e28:	4649      	mov	r1, r9
 8006e2a:	018b      	lsls	r3, r1, #6
 8006e2c:	4641      	mov	r1, r8
 8006e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e32:	4641      	mov	r1, r8
 8006e34:	018a      	lsls	r2, r1, #6
 8006e36:	4641      	mov	r1, r8
 8006e38:	1a51      	subs	r1, r2, r1
 8006e3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8006e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	f04f 0300 	mov.w	r3, #0
 8006e4c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006e50:	4649      	mov	r1, r9
 8006e52:	00cb      	lsls	r3, r1, #3
 8006e54:	4641      	mov	r1, r8
 8006e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e5a:	4641      	mov	r1, r8
 8006e5c:	00ca      	lsls	r2, r1, #3
 8006e5e:	4610      	mov	r0, r2
 8006e60:	4619      	mov	r1, r3
 8006e62:	4603      	mov	r3, r0
 8006e64:	4622      	mov	r2, r4
 8006e66:	189b      	adds	r3, r3, r2
 8006e68:	633b      	str	r3, [r7, #48]	; 0x30
 8006e6a:	462b      	mov	r3, r5
 8006e6c:	460a      	mov	r2, r1
 8006e6e:	eb42 0303 	adc.w	r3, r2, r3
 8006e72:	637b      	str	r3, [r7, #52]	; 0x34
 8006e74:	f04f 0200 	mov.w	r2, #0
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e80:	4629      	mov	r1, r5
 8006e82:	024b      	lsls	r3, r1, #9
 8006e84:	4621      	mov	r1, r4
 8006e86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	024a      	lsls	r2, r1, #9
 8006e8e:	4610      	mov	r0, r2
 8006e90:	4619      	mov	r1, r3
 8006e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ea0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006ea4:	f7f9 fea0 	bl	8000be8 <__aeabi_uldivmod>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4613      	mov	r3, r2
 8006eae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006eb2:	e067      	b.n	8006f84 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eb4:	4b75      	ldr	r3, [pc, #468]	; (800708c <HAL_RCC_GetSysClockFreq+0x354>)
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	099b      	lsrs	r3, r3, #6
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ec0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006ec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ecc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ece:	2300      	movs	r3, #0
 8006ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ed2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006ed6:	4622      	mov	r2, r4
 8006ed8:	462b      	mov	r3, r5
 8006eda:	f04f 0000 	mov.w	r0, #0
 8006ede:	f04f 0100 	mov.w	r1, #0
 8006ee2:	0159      	lsls	r1, r3, #5
 8006ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ee8:	0150      	lsls	r0, r2, #5
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4621      	mov	r1, r4
 8006ef0:	1a51      	subs	r1, r2, r1
 8006ef2:	62b9      	str	r1, [r7, #40]	; 0x28
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8006efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006efc:	f04f 0200 	mov.w	r2, #0
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006f08:	4649      	mov	r1, r9
 8006f0a:	018b      	lsls	r3, r1, #6
 8006f0c:	4641      	mov	r1, r8
 8006f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f12:	4641      	mov	r1, r8
 8006f14:	018a      	lsls	r2, r1, #6
 8006f16:	4641      	mov	r1, r8
 8006f18:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f1c:	4649      	mov	r1, r9
 8006f1e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f36:	4692      	mov	sl, r2
 8006f38:	469b      	mov	fp, r3
 8006f3a:	4623      	mov	r3, r4
 8006f3c:	eb1a 0303 	adds.w	r3, sl, r3
 8006f40:	623b      	str	r3, [r7, #32]
 8006f42:	462b      	mov	r3, r5
 8006f44:	eb4b 0303 	adc.w	r3, fp, r3
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	f04f 0300 	mov.w	r3, #0
 8006f52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006f56:	4629      	mov	r1, r5
 8006f58:	028b      	lsls	r3, r1, #10
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f60:	4621      	mov	r1, r4
 8006f62:	028a      	lsls	r2, r1, #10
 8006f64:	4610      	mov	r0, r2
 8006f66:	4619      	mov	r1, r3
 8006f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	673b      	str	r3, [r7, #112]	; 0x70
 8006f70:	677a      	str	r2, [r7, #116]	; 0x74
 8006f72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006f76:	f7f9 fe37 	bl	8000be8 <__aeabi_uldivmod>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4613      	mov	r3, r2
 8006f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f84:	4b41      	ldr	r3, [pc, #260]	; (800708c <HAL_RCC_GetSysClockFreq+0x354>)
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	0c1b      	lsrs	r3, r3, #16
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	3301      	adds	r3, #1
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006fa6:	e0eb      	b.n	8007180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fa8:	4b38      	ldr	r3, [pc, #224]	; (800708c <HAL_RCC_GetSysClockFreq+0x354>)
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fb4:	4b35      	ldr	r3, [pc, #212]	; (800708c <HAL_RCC_GetSysClockFreq+0x354>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d06b      	beq.n	8007098 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fc0:	4b32      	ldr	r3, [pc, #200]	; (800708c <HAL_RCC_GetSysClockFreq+0x354>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	099b      	lsrs	r3, r3, #6
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd2:	663b      	str	r3, [r7, #96]	; 0x60
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	667b      	str	r3, [r7, #100]	; 0x64
 8006fd8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006fdc:	4622      	mov	r2, r4
 8006fde:	462b      	mov	r3, r5
 8006fe0:	f04f 0000 	mov.w	r0, #0
 8006fe4:	f04f 0100 	mov.w	r1, #0
 8006fe8:	0159      	lsls	r1, r3, #5
 8006fea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fee:	0150      	lsls	r0, r2, #5
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	1a51      	subs	r1, r2, r1
 8006ff8:	61b9      	str	r1, [r7, #24]
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	eb63 0301 	sbc.w	r3, r3, r1
 8007000:	61fb      	str	r3, [r7, #28]
 8007002:	f04f 0200 	mov.w	r2, #0
 8007006:	f04f 0300 	mov.w	r3, #0
 800700a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800700e:	4659      	mov	r1, fp
 8007010:	018b      	lsls	r3, r1, #6
 8007012:	4651      	mov	r1, sl
 8007014:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007018:	4651      	mov	r1, sl
 800701a:	018a      	lsls	r2, r1, #6
 800701c:	4651      	mov	r1, sl
 800701e:	ebb2 0801 	subs.w	r8, r2, r1
 8007022:	4659      	mov	r1, fp
 8007024:	eb63 0901 	sbc.w	r9, r3, r1
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007034:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007038:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800703c:	4690      	mov	r8, r2
 800703e:	4699      	mov	r9, r3
 8007040:	4623      	mov	r3, r4
 8007042:	eb18 0303 	adds.w	r3, r8, r3
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	462b      	mov	r3, r5
 800704a:	eb49 0303 	adc.w	r3, r9, r3
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	f04f 0200 	mov.w	r2, #0
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800705c:	4629      	mov	r1, r5
 800705e:	024b      	lsls	r3, r1, #9
 8007060:	4621      	mov	r1, r4
 8007062:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007066:	4621      	mov	r1, r4
 8007068:	024a      	lsls	r2, r1, #9
 800706a:	4610      	mov	r0, r2
 800706c:	4619      	mov	r1, r3
 800706e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007072:	2200      	movs	r2, #0
 8007074:	65bb      	str	r3, [r7, #88]	; 0x58
 8007076:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007078:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800707c:	f7f9 fdb4 	bl	8000be8 <__aeabi_uldivmod>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4613      	mov	r3, r2
 8007086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800708a:	e065      	b.n	8007158 <HAL_RCC_GetSysClockFreq+0x420>
 800708c:	40023800 	.word	0x40023800
 8007090:	00f42400 	.word	0x00f42400
 8007094:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007098:	4b3d      	ldr	r3, [pc, #244]	; (8007190 <HAL_RCC_GetSysClockFreq+0x458>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	099b      	lsrs	r3, r3, #6
 800709e:	2200      	movs	r2, #0
 80070a0:	4618      	mov	r0, r3
 80070a2:	4611      	mov	r1, r2
 80070a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80070a8:	653b      	str	r3, [r7, #80]	; 0x50
 80070aa:	2300      	movs	r3, #0
 80070ac:	657b      	str	r3, [r7, #84]	; 0x54
 80070ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80070b2:	4642      	mov	r2, r8
 80070b4:	464b      	mov	r3, r9
 80070b6:	f04f 0000 	mov.w	r0, #0
 80070ba:	f04f 0100 	mov.w	r1, #0
 80070be:	0159      	lsls	r1, r3, #5
 80070c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070c4:	0150      	lsls	r0, r2, #5
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4641      	mov	r1, r8
 80070cc:	1a51      	subs	r1, r2, r1
 80070ce:	60b9      	str	r1, [r7, #8]
 80070d0:	4649      	mov	r1, r9
 80070d2:	eb63 0301 	sbc.w	r3, r3, r1
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	f04f 0200 	mov.w	r2, #0
 80070dc:	f04f 0300 	mov.w	r3, #0
 80070e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80070e4:	4659      	mov	r1, fp
 80070e6:	018b      	lsls	r3, r1, #6
 80070e8:	4651      	mov	r1, sl
 80070ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070ee:	4651      	mov	r1, sl
 80070f0:	018a      	lsls	r2, r1, #6
 80070f2:	4651      	mov	r1, sl
 80070f4:	1a54      	subs	r4, r2, r1
 80070f6:	4659      	mov	r1, fp
 80070f8:	eb63 0501 	sbc.w	r5, r3, r1
 80070fc:	f04f 0200 	mov.w	r2, #0
 8007100:	f04f 0300 	mov.w	r3, #0
 8007104:	00eb      	lsls	r3, r5, #3
 8007106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800710a:	00e2      	lsls	r2, r4, #3
 800710c:	4614      	mov	r4, r2
 800710e:	461d      	mov	r5, r3
 8007110:	4643      	mov	r3, r8
 8007112:	18e3      	adds	r3, r4, r3
 8007114:	603b      	str	r3, [r7, #0]
 8007116:	464b      	mov	r3, r9
 8007118:	eb45 0303 	adc.w	r3, r5, r3
 800711c:	607b      	str	r3, [r7, #4]
 800711e:	f04f 0200 	mov.w	r2, #0
 8007122:	f04f 0300 	mov.w	r3, #0
 8007126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800712a:	4629      	mov	r1, r5
 800712c:	028b      	lsls	r3, r1, #10
 800712e:	4621      	mov	r1, r4
 8007130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007134:	4621      	mov	r1, r4
 8007136:	028a      	lsls	r2, r1, #10
 8007138:	4610      	mov	r0, r2
 800713a:	4619      	mov	r1, r3
 800713c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007140:	2200      	movs	r2, #0
 8007142:	64bb      	str	r3, [r7, #72]	; 0x48
 8007144:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007146:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800714a:	f7f9 fd4d 	bl	8000be8 <__aeabi_uldivmod>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4613      	mov	r3, r2
 8007154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007158:	4b0d      	ldr	r3, [pc, #52]	; (8007190 <HAL_RCC_GetSysClockFreq+0x458>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	0f1b      	lsrs	r3, r3, #28
 800715e:	f003 0307 	and.w	r3, r3, #7
 8007162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800716a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800716e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007172:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007176:	e003      	b.n	8007180 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007178:	4b06      	ldr	r3, [pc, #24]	; (8007194 <HAL_RCC_GetSysClockFreq+0x45c>)
 800717a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800717e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007180:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007184:	4618      	mov	r0, r3
 8007186:	37b8      	adds	r7, #184	; 0xb8
 8007188:	46bd      	mov	sp, r7
 800718a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800718e:	bf00      	nop
 8007190:	40023800 	.word	0x40023800
 8007194:	00f42400 	.word	0x00f42400

08007198 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e28d      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 8083 	beq.w	80072be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80071b8:	4b94      	ldr	r3, [pc, #592]	; (800740c <HAL_RCC_OscConfig+0x274>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f003 030c 	and.w	r3, r3, #12
 80071c0:	2b04      	cmp	r3, #4
 80071c2:	d019      	beq.n	80071f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071c4:	4b91      	ldr	r3, [pc, #580]	; (800740c <HAL_RCC_OscConfig+0x274>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d106      	bne.n	80071de <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071d0:	4b8e      	ldr	r3, [pc, #568]	; (800740c <HAL_RCC_OscConfig+0x274>)
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071dc:	d00c      	beq.n	80071f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071de:	4b8b      	ldr	r3, [pc, #556]	; (800740c <HAL_RCC_OscConfig+0x274>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071e6:	2b0c      	cmp	r3, #12
 80071e8:	d112      	bne.n	8007210 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071ea:	4b88      	ldr	r3, [pc, #544]	; (800740c <HAL_RCC_OscConfig+0x274>)
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071f6:	d10b      	bne.n	8007210 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f8:	4b84      	ldr	r3, [pc, #528]	; (800740c <HAL_RCC_OscConfig+0x274>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d05b      	beq.n	80072bc <HAL_RCC_OscConfig+0x124>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d157      	bne.n	80072bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e25a      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007218:	d106      	bne.n	8007228 <HAL_RCC_OscConfig+0x90>
 800721a:	4b7c      	ldr	r3, [pc, #496]	; (800740c <HAL_RCC_OscConfig+0x274>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a7b      	ldr	r2, [pc, #492]	; (800740c <HAL_RCC_OscConfig+0x274>)
 8007220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007224:	6013      	str	r3, [r2, #0]
 8007226:	e01d      	b.n	8007264 <HAL_RCC_OscConfig+0xcc>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007230:	d10c      	bne.n	800724c <HAL_RCC_OscConfig+0xb4>
 8007232:	4b76      	ldr	r3, [pc, #472]	; (800740c <HAL_RCC_OscConfig+0x274>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a75      	ldr	r2, [pc, #468]	; (800740c <HAL_RCC_OscConfig+0x274>)
 8007238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	4b73      	ldr	r3, [pc, #460]	; (800740c <HAL_RCC_OscConfig+0x274>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a72      	ldr	r2, [pc, #456]	; (800740c <HAL_RCC_OscConfig+0x274>)
 8007244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	e00b      	b.n	8007264 <HAL_RCC_OscConfig+0xcc>
 800724c:	4b6f      	ldr	r3, [pc, #444]	; (800740c <HAL_RCC_OscConfig+0x274>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a6e      	ldr	r2, [pc, #440]	; (800740c <HAL_RCC_OscConfig+0x274>)
 8007252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	4b6c      	ldr	r3, [pc, #432]	; (800740c <HAL_RCC_OscConfig+0x274>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a6b      	ldr	r2, [pc, #428]	; (800740c <HAL_RCC_OscConfig+0x274>)
 800725e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d013      	beq.n	8007294 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800726c:	f7fb fa86 	bl	800277c <HAL_GetTick>
 8007270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007272:	e008      	b.n	8007286 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007274:	f7fb fa82 	bl	800277c <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b64      	cmp	r3, #100	; 0x64
 8007280:	d901      	bls.n	8007286 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e21f      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007286:	4b61      	ldr	r3, [pc, #388]	; (800740c <HAL_RCC_OscConfig+0x274>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0f0      	beq.n	8007274 <HAL_RCC_OscConfig+0xdc>
 8007292:	e014      	b.n	80072be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007294:	f7fb fa72 	bl	800277c <HAL_GetTick>
 8007298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800729a:	e008      	b.n	80072ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800729c:	f7fb fa6e 	bl	800277c <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b64      	cmp	r3, #100	; 0x64
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e20b      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072ae:	4b57      	ldr	r3, [pc, #348]	; (800740c <HAL_RCC_OscConfig+0x274>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1f0      	bne.n	800729c <HAL_RCC_OscConfig+0x104>
 80072ba:	e000      	b.n	80072be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d06f      	beq.n	80073aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80072ca:	4b50      	ldr	r3, [pc, #320]	; (800740c <HAL_RCC_OscConfig+0x274>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 030c 	and.w	r3, r3, #12
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d017      	beq.n	8007306 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072d6:	4b4d      	ldr	r3, [pc, #308]	; (800740c <HAL_RCC_OscConfig+0x274>)
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80072de:	2b08      	cmp	r3, #8
 80072e0:	d105      	bne.n	80072ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072e2:	4b4a      	ldr	r3, [pc, #296]	; (800740c <HAL_RCC_OscConfig+0x274>)
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00b      	beq.n	8007306 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072ee:	4b47      	ldr	r3, [pc, #284]	; (800740c <HAL_RCC_OscConfig+0x274>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072f6:	2b0c      	cmp	r3, #12
 80072f8:	d11c      	bne.n	8007334 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072fa:	4b44      	ldr	r3, [pc, #272]	; (800740c <HAL_RCC_OscConfig+0x274>)
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d116      	bne.n	8007334 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007306:	4b41      	ldr	r3, [pc, #260]	; (800740c <HAL_RCC_OscConfig+0x274>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d005      	beq.n	800731e <HAL_RCC_OscConfig+0x186>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d001      	beq.n	800731e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e1d3      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800731e:	4b3b      	ldr	r3, [pc, #236]	; (800740c <HAL_RCC_OscConfig+0x274>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	4937      	ldr	r1, [pc, #220]	; (800740c <HAL_RCC_OscConfig+0x274>)
 800732e:	4313      	orrs	r3, r2
 8007330:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007332:	e03a      	b.n	80073aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d020      	beq.n	800737e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800733c:	4b34      	ldr	r3, [pc, #208]	; (8007410 <HAL_RCC_OscConfig+0x278>)
 800733e:	2201      	movs	r2, #1
 8007340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007342:	f7fb fa1b 	bl	800277c <HAL_GetTick>
 8007346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007348:	e008      	b.n	800735c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800734a:	f7fb fa17 	bl	800277c <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	2b02      	cmp	r3, #2
 8007356:	d901      	bls.n	800735c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e1b4      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800735c:	4b2b      	ldr	r3, [pc, #172]	; (800740c <HAL_RCC_OscConfig+0x274>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d0f0      	beq.n	800734a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007368:	4b28      	ldr	r3, [pc, #160]	; (800740c <HAL_RCC_OscConfig+0x274>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	4925      	ldr	r1, [pc, #148]	; (800740c <HAL_RCC_OscConfig+0x274>)
 8007378:	4313      	orrs	r3, r2
 800737a:	600b      	str	r3, [r1, #0]
 800737c:	e015      	b.n	80073aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800737e:	4b24      	ldr	r3, [pc, #144]	; (8007410 <HAL_RCC_OscConfig+0x278>)
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007384:	f7fb f9fa 	bl	800277c <HAL_GetTick>
 8007388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800738c:	f7fb f9f6 	bl	800277c <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e193      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800739e:	4b1b      	ldr	r3, [pc, #108]	; (800740c <HAL_RCC_OscConfig+0x274>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1f0      	bne.n	800738c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d036      	beq.n	8007424 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d016      	beq.n	80073ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073be:	4b15      	ldr	r3, [pc, #84]	; (8007414 <HAL_RCC_OscConfig+0x27c>)
 80073c0:	2201      	movs	r2, #1
 80073c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c4:	f7fb f9da 	bl	800277c <HAL_GetTick>
 80073c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073cc:	f7fb f9d6 	bl	800277c <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e173      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073de:	4b0b      	ldr	r3, [pc, #44]	; (800740c <HAL_RCC_OscConfig+0x274>)
 80073e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0f0      	beq.n	80073cc <HAL_RCC_OscConfig+0x234>
 80073ea:	e01b      	b.n	8007424 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073ec:	4b09      	ldr	r3, [pc, #36]	; (8007414 <HAL_RCC_OscConfig+0x27c>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f2:	f7fb f9c3 	bl	800277c <HAL_GetTick>
 80073f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073f8:	e00e      	b.n	8007418 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073fa:	f7fb f9bf 	bl	800277c <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d907      	bls.n	8007418 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e15c      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
 800740c:	40023800 	.word	0x40023800
 8007410:	42470000 	.word	0x42470000
 8007414:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007418:	4b8a      	ldr	r3, [pc, #552]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 800741a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1ea      	bne.n	80073fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8097 	beq.w	8007560 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007432:	2300      	movs	r3, #0
 8007434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007436:	4b83      	ldr	r3, [pc, #524]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10f      	bne.n	8007462 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007442:	2300      	movs	r3, #0
 8007444:	60bb      	str	r3, [r7, #8]
 8007446:	4b7f      	ldr	r3, [pc, #508]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	4a7e      	ldr	r2, [pc, #504]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 800744c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007450:	6413      	str	r3, [r2, #64]	; 0x40
 8007452:	4b7c      	ldr	r3, [pc, #496]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800745a:	60bb      	str	r3, [r7, #8]
 800745c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800745e:	2301      	movs	r3, #1
 8007460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007462:	4b79      	ldr	r3, [pc, #484]	; (8007648 <HAL_RCC_OscConfig+0x4b0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746a:	2b00      	cmp	r3, #0
 800746c:	d118      	bne.n	80074a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800746e:	4b76      	ldr	r3, [pc, #472]	; (8007648 <HAL_RCC_OscConfig+0x4b0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a75      	ldr	r2, [pc, #468]	; (8007648 <HAL_RCC_OscConfig+0x4b0>)
 8007474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800747a:	f7fb f97f 	bl	800277c <HAL_GetTick>
 800747e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007480:	e008      	b.n	8007494 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007482:	f7fb f97b 	bl	800277c <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	2b02      	cmp	r3, #2
 800748e:	d901      	bls.n	8007494 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e118      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007494:	4b6c      	ldr	r3, [pc, #432]	; (8007648 <HAL_RCC_OscConfig+0x4b0>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800749c:	2b00      	cmp	r3, #0
 800749e:	d0f0      	beq.n	8007482 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d106      	bne.n	80074b6 <HAL_RCC_OscConfig+0x31e>
 80074a8:	4b66      	ldr	r3, [pc, #408]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 80074aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ac:	4a65      	ldr	r2, [pc, #404]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 80074ae:	f043 0301 	orr.w	r3, r3, #1
 80074b2:	6713      	str	r3, [r2, #112]	; 0x70
 80074b4:	e01c      	b.n	80074f0 <HAL_RCC_OscConfig+0x358>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	2b05      	cmp	r3, #5
 80074bc:	d10c      	bne.n	80074d8 <HAL_RCC_OscConfig+0x340>
 80074be:	4b61      	ldr	r3, [pc, #388]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 80074c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c2:	4a60      	ldr	r2, [pc, #384]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 80074c4:	f043 0304 	orr.w	r3, r3, #4
 80074c8:	6713      	str	r3, [r2, #112]	; 0x70
 80074ca:	4b5e      	ldr	r3, [pc, #376]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 80074cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ce:	4a5d      	ldr	r2, [pc, #372]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 80074d0:	f043 0301 	orr.w	r3, r3, #1
 80074d4:	6713      	str	r3, [r2, #112]	; 0x70
 80074d6:	e00b      	b.n	80074f0 <HAL_RCC_OscConfig+0x358>
 80074d8:	4b5a      	ldr	r3, [pc, #360]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 80074da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074dc:	4a59      	ldr	r2, [pc, #356]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 80074de:	f023 0301 	bic.w	r3, r3, #1
 80074e2:	6713      	str	r3, [r2, #112]	; 0x70
 80074e4:	4b57      	ldr	r3, [pc, #348]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 80074e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e8:	4a56      	ldr	r2, [pc, #344]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 80074ea:	f023 0304 	bic.w	r3, r3, #4
 80074ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d015      	beq.n	8007524 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f8:	f7fb f940 	bl	800277c <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074fe:	e00a      	b.n	8007516 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007500:	f7fb f93c 	bl	800277c <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	f241 3288 	movw	r2, #5000	; 0x1388
 800750e:	4293      	cmp	r3, r2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e0d7      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007516:	4b4b      	ldr	r3, [pc, #300]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 8007518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0ee      	beq.n	8007500 <HAL_RCC_OscConfig+0x368>
 8007522:	e014      	b.n	800754e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007524:	f7fb f92a 	bl	800277c <HAL_GetTick>
 8007528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800752a:	e00a      	b.n	8007542 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800752c:	f7fb f926 	bl	800277c <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	f241 3288 	movw	r2, #5000	; 0x1388
 800753a:	4293      	cmp	r3, r2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e0c1      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007542:	4b40      	ldr	r3, [pc, #256]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 8007544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1ee      	bne.n	800752c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d105      	bne.n	8007560 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007554:	4b3b      	ldr	r3, [pc, #236]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 8007556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007558:	4a3a      	ldr	r2, [pc, #232]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 800755a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800755e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 80ad 	beq.w	80076c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800756a:	4b36      	ldr	r3, [pc, #216]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f003 030c 	and.w	r3, r3, #12
 8007572:	2b08      	cmp	r3, #8
 8007574:	d060      	beq.n	8007638 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d145      	bne.n	800760a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800757e:	4b33      	ldr	r3, [pc, #204]	; (800764c <HAL_RCC_OscConfig+0x4b4>)
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007584:	f7fb f8fa 	bl	800277c <HAL_GetTick>
 8007588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800758a:	e008      	b.n	800759e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800758c:	f7fb f8f6 	bl	800277c <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	2b02      	cmp	r3, #2
 8007598:	d901      	bls.n	800759e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e093      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800759e:	4b29      	ldr	r3, [pc, #164]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1f0      	bne.n	800758c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	69da      	ldr	r2, [r3, #28]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	019b      	lsls	r3, r3, #6
 80075ba:	431a      	orrs	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c0:	085b      	lsrs	r3, r3, #1
 80075c2:	3b01      	subs	r3, #1
 80075c4:	041b      	lsls	r3, r3, #16
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	061b      	lsls	r3, r3, #24
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d4:	071b      	lsls	r3, r3, #28
 80075d6:	491b      	ldr	r1, [pc, #108]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075dc:	4b1b      	ldr	r3, [pc, #108]	; (800764c <HAL_RCC_OscConfig+0x4b4>)
 80075de:	2201      	movs	r2, #1
 80075e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e2:	f7fb f8cb 	bl	800277c <HAL_GetTick>
 80075e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075e8:	e008      	b.n	80075fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075ea:	f7fb f8c7 	bl	800277c <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d901      	bls.n	80075fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e064      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075fc:	4b11      	ldr	r3, [pc, #68]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0f0      	beq.n	80075ea <HAL_RCC_OscConfig+0x452>
 8007608:	e05c      	b.n	80076c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800760a:	4b10      	ldr	r3, [pc, #64]	; (800764c <HAL_RCC_OscConfig+0x4b4>)
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007610:	f7fb f8b4 	bl	800277c <HAL_GetTick>
 8007614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007616:	e008      	b.n	800762a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007618:	f7fb f8b0 	bl	800277c <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e04d      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800762a:	4b06      	ldr	r3, [pc, #24]	; (8007644 <HAL_RCC_OscConfig+0x4ac>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1f0      	bne.n	8007618 <HAL_RCC_OscConfig+0x480>
 8007636:	e045      	b.n	80076c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d107      	bne.n	8007650 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e040      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
 8007644:	40023800 	.word	0x40023800
 8007648:	40007000 	.word	0x40007000
 800764c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007650:	4b1f      	ldr	r3, [pc, #124]	; (80076d0 <HAL_RCC_OscConfig+0x538>)
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d030      	beq.n	80076c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007668:	429a      	cmp	r2, r3
 800766a:	d129      	bne.n	80076c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007676:	429a      	cmp	r2, r3
 8007678:	d122      	bne.n	80076c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007680:	4013      	ands	r3, r2
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007686:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007688:	4293      	cmp	r3, r2
 800768a:	d119      	bne.n	80076c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007696:	085b      	lsrs	r3, r3, #1
 8007698:	3b01      	subs	r3, #1
 800769a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800769c:	429a      	cmp	r2, r3
 800769e:	d10f      	bne.n	80076c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d107      	bne.n	80076c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076bc:	429a      	cmp	r2, r3
 80076be:	d001      	beq.n	80076c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e000      	b.n	80076c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	40023800 	.word	0x40023800

080076d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e066      	b.n	80077b8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	7f5b      	ldrb	r3, [r3, #29]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d105      	bne.n	8007700 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7fa fd6c 	bl	80021d8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	22ca      	movs	r2, #202	; 0xca
 800770c:	625a      	str	r2, [r3, #36]	; 0x24
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2253      	movs	r2, #83	; 0x53
 8007714:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fb6f 	bl	8007dfa <RTC_EnterInitMode>
 800771c:	4603      	mov	r3, r0
 800771e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007720:	7bfb      	ldrb	r3, [r7, #15]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d12c      	bne.n	8007780 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	6812      	ldr	r2, [r2, #0]
 8007730:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007738:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6899      	ldr	r1, [r3, #8]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	68d2      	ldr	r2, [r2, #12]
 8007760:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6919      	ldr	r1, [r3, #16]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	041a      	lsls	r2, r3, #16
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fb76 	bl	8007e68 <RTC_ExitInitMode>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d113      	bne.n	80077ae <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007794:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	699a      	ldr	r2, [r3, #24]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	22ff      	movs	r2, #255	; 0xff
 80077b4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80077c0:	b590      	push	{r4, r7, lr}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	7f1b      	ldrb	r3, [r3, #28]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d101      	bne.n	80077dc <HAL_RTC_SetTime+0x1c>
 80077d8:	2302      	movs	r3, #2
 80077da:	e087      	b.n	80078ec <HAL_RTC_SetTime+0x12c>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2201      	movs	r2, #1
 80077e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2202      	movs	r2, #2
 80077e6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d126      	bne.n	800783c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d102      	bne.n	8007802 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2200      	movs	r2, #0
 8007800:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	4618      	mov	r0, r3
 8007808:	f000 fb53 	bl	8007eb2 <RTC_ByteToBcd2>
 800780c:	4603      	mov	r3, r0
 800780e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	4618      	mov	r0, r3
 8007816:	f000 fb4c 	bl	8007eb2 <RTC_ByteToBcd2>
 800781a:	4603      	mov	r3, r0
 800781c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800781e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	789b      	ldrb	r3, [r3, #2]
 8007824:	4618      	mov	r0, r3
 8007826:	f000 fb44 	bl	8007eb2 <RTC_ByteToBcd2>
 800782a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800782c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	78db      	ldrb	r3, [r3, #3]
 8007834:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007836:	4313      	orrs	r3, r2
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	e018      	b.n	800786e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007846:	2b00      	cmp	r3, #0
 8007848:	d102      	bne.n	8007850 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2200      	movs	r2, #0
 800784e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800785c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007862:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	78db      	ldrb	r3, [r3, #3]
 8007868:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800786a:	4313      	orrs	r3, r2
 800786c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	22ca      	movs	r2, #202	; 0xca
 8007874:	625a      	str	r2, [r3, #36]	; 0x24
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2253      	movs	r2, #83	; 0x53
 800787c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 fabb 	bl	8007dfa <RTC_EnterInitMode>
 8007884:	4603      	mov	r3, r0
 8007886:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007888:	7cfb      	ldrb	r3, [r7, #19]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d120      	bne.n	80078d0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007898:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800789c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6899      	ldr	r1, [r3, #8]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	431a      	orrs	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 face 	bl	8007e68 <RTC_ExitInitMode>
 80078cc:	4603      	mov	r3, r0
 80078ce:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80078d0:	7cfb      	ldrb	r3, [r7, #19]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d102      	bne.n	80078dc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2201      	movs	r2, #1
 80078da:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	22ff      	movs	r2, #255	; 0xff
 80078e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	771a      	strb	r2, [r3, #28]

  return status;
 80078ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	371c      	adds	r7, #28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd90      	pop	{r4, r7, pc}

080078f4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007926:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800792a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	0c1b      	lsrs	r3, r3, #16
 8007930:	b2db      	uxtb	r3, r3
 8007932:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007936:	b2da      	uxtb	r2, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	0a1b      	lsrs	r3, r3, #8
 8007940:	b2db      	uxtb	r3, r3
 8007942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007946:	b2da      	uxtb	r2, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	b2db      	uxtb	r3, r3
 8007950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007954:	b2da      	uxtb	r2, r3
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	0d9b      	lsrs	r3, r3, #22
 800795e:	b2db      	uxtb	r3, r3
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	b2da      	uxtb	r2, r3
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d11a      	bne.n	80079a6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	4618      	mov	r0, r3
 8007976:	f000 fab9 	bl	8007eec <RTC_Bcd2ToByte>
 800797a:	4603      	mov	r3, r0
 800797c:	461a      	mov	r2, r3
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 fab0 	bl	8007eec <RTC_Bcd2ToByte>
 800798c:	4603      	mov	r3, r0
 800798e:	461a      	mov	r2, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	789b      	ldrb	r3, [r3, #2]
 8007998:	4618      	mov	r0, r3
 800799a:	f000 faa7 	bl	8007eec <RTC_Bcd2ToByte>
 800799e:	4603      	mov	r3, r0
 80079a0:	461a      	mov	r2, r3
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80079b0:	b590      	push	{r4, r7, lr}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	7f1b      	ldrb	r3, [r3, #28]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_RTC_SetDate+0x1c>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e071      	b.n	8007ab0 <HAL_RTC_SetDate+0x100>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2202      	movs	r2, #2
 80079d6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10e      	bne.n	80079fc <HAL_RTC_SetDate+0x4c>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	785b      	ldrb	r3, [r3, #1]
 80079e2:	f003 0310 	and.w	r3, r3, #16
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d008      	beq.n	80079fc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	f023 0310 	bic.w	r3, r3, #16
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	330a      	adds	r3, #10
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d11c      	bne.n	8007a3c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	78db      	ldrb	r3, [r3, #3]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fa53 	bl	8007eb2 <RTC_ByteToBcd2>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	785b      	ldrb	r3, [r3, #1]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 fa4c 	bl	8007eb2 <RTC_ByteToBcd2>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a1e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	789b      	ldrb	r3, [r3, #2]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 fa44 	bl	8007eb2 <RTC_ByteToBcd2>
 8007a2a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007a2c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]
 8007a3a:	e00e      	b.n	8007a5a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	78db      	ldrb	r3, [r3, #3]
 8007a40:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	785b      	ldrb	r3, [r3, #1]
 8007a46:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a48:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007a4e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a56:	4313      	orrs	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	22ca      	movs	r2, #202	; 0xca
 8007a60:	625a      	str	r2, [r3, #36]	; 0x24
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2253      	movs	r2, #83	; 0x53
 8007a68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f9c5 	bl	8007dfa <RTC_EnterInitMode>
 8007a70:	4603      	mov	r3, r0
 8007a72:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007a74:	7cfb      	ldrb	r3, [r7, #19]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10c      	bne.n	8007a94 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a88:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 f9ec 	bl	8007e68 <RTC_ExitInitMode>
 8007a90:	4603      	mov	r3, r0
 8007a92:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007a94:	7cfb      	ldrb	r3, [r7, #19]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d102      	bne.n	8007aa0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	22ff      	movs	r2, #255	; 0xff
 8007aa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	771a      	strb	r2, [r3, #28]

  return status;
 8007aae:	7cfb      	ldrb	r3, [r7, #19]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	371c      	adds	r7, #28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd90      	pop	{r4, r7, pc}

08007ab8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007ad2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ad6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	0c1b      	lsrs	r3, r3, #16
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	0a1b      	lsrs	r3, r3, #8
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	f003 031f 	and.w	r3, r3, #31
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	0b5b      	lsrs	r3, r3, #13
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d11a      	bne.n	8007b4c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	78db      	ldrb	r3, [r3, #3]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f9e6 	bl	8007eec <RTC_Bcd2ToByte>
 8007b20:	4603      	mov	r3, r0
 8007b22:	461a      	mov	r2, r3
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	785b      	ldrb	r3, [r3, #1]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 f9dd 	bl	8007eec <RTC_Bcd2ToByte>
 8007b32:	4603      	mov	r3, r0
 8007b34:	461a      	mov	r2, r3
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	789b      	ldrb	r3, [r3, #2]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 f9d4 	bl	8007eec <RTC_Bcd2ToByte>
 8007b44:	4603      	mov	r3, r0
 8007b46:	461a      	mov	r2, r3
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007b56:	b590      	push	{r4, r7, lr}
 8007b58:	b089      	sub	sp, #36	; 0x24
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	7f1b      	ldrb	r3, [r3, #28]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d101      	bne.n	8007b7a <HAL_RTC_SetAlarm+0x24>
 8007b76:	2302      	movs	r3, #2
 8007b78:	e113      	b.n	8007da2 <HAL_RTC_SetAlarm+0x24c>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2202      	movs	r2, #2
 8007b84:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d137      	bne.n	8007bfc <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d102      	bne.n	8007ba0 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 f984 	bl	8007eb2 <RTC_ByteToBcd2>
 8007baa:	4603      	mov	r3, r0
 8007bac:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	785b      	ldrb	r3, [r3, #1]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 f97d 	bl	8007eb2 <RTC_ByteToBcd2>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007bbc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	789b      	ldrb	r3, [r3, #2]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 f975 	bl	8007eb2 <RTC_ByteToBcd2>
 8007bc8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007bca:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	78db      	ldrb	r3, [r3, #3]
 8007bd2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007bd4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 f967 	bl	8007eb2 <RTC_ByteToBcd2>
 8007be4:	4603      	mov	r3, r0
 8007be6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007be8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007bf0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	61fb      	str	r3, [r7, #28]
 8007bfa:	e023      	b.n	8007c44 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d102      	bne.n	8007c10 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	785b      	ldrb	r3, [r3, #1]
 8007c1a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007c1c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007c22:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	78db      	ldrb	r3, [r3, #3]
 8007c28:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007c2a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c32:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007c34:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007c3a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007c40:	4313      	orrs	r3, r2
 8007c42:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	22ca      	movs	r2, #202	; 0xca
 8007c56:	625a      	str	r2, [r3, #36]	; 0x24
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2253      	movs	r2, #83	; 0x53
 8007c5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c68:	d148      	bne.n	8007cfc <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689a      	ldr	r2, [r3, #8]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c78:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689a      	ldr	r2, [r3, #8]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c88:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007c9a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c9c:	f7fa fd6e 	bl	800277c <HAL_GetTick>
 8007ca0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007ca2:	e013      	b.n	8007ccc <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ca4:	f7fa fd6a 	bl	800277c <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cb2:	d90b      	bls.n	8007ccc <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	22ff      	movs	r2, #255	; 0xff
 8007cba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2203      	movs	r2, #3
 8007cc0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e06a      	b.n	8007da2 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d0e4      	beq.n	8007ca4 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cf8:	609a      	str	r2, [r3, #8]
 8007cfa:	e047      	b.n	8007d8c <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d0a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d1a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007d2c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d2e:	f7fa fd25 	bl	800277c <HAL_GetTick>
 8007d32:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007d34:	e013      	b.n	8007d5e <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d36:	f7fa fd21 	bl	800277c <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d44:	d90b      	bls.n	8007d5e <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	22ff      	movs	r2, #255	; 0xff
 8007d4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2203      	movs	r2, #3
 8007d52:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e021      	b.n	8007da2 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d0e4      	beq.n	8007d36 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	69fa      	ldr	r2, [r7, #28]
 8007d72:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d8a:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	22ff      	movs	r2, #255	; 0xff
 8007d92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2201      	movs	r2, #1
 8007d98:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3724      	adds	r7, #36	; 0x24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd90      	pop	{r4, r7, pc}

08007daa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68da      	ldr	r2, [r3, #12]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007dc4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007dc6:	f7fa fcd9 	bl	800277c <HAL_GetTick>
 8007dca:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007dcc:	e009      	b.n	8007de2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007dce:	f7fa fcd5 	bl	800277c <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ddc:	d901      	bls.n	8007de2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e007      	b.n	8007df2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0ee      	beq.n	8007dce <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d122      	bne.n	8007e5e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e26:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e28:	f7fa fca8 	bl	800277c <HAL_GetTick>
 8007e2c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007e2e:	e00c      	b.n	8007e4a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e30:	f7fa fca4 	bl	800277c <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e3e:	d904      	bls.n	8007e4a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2204      	movs	r2, #4
 8007e44:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d102      	bne.n	8007e5e <RTC_EnterInitMode+0x64>
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d1e8      	bne.n	8007e30 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68da      	ldr	r2, [r3, #12]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e82:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7ff ff89 	bl	8007daa <HAL_RTC_WaitForSynchro>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d004      	beq.n	8007ea8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2204      	movs	r2, #4
 8007ea2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	4603      	mov	r3, r0
 8007eba:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007ec0:	e005      	b.n	8007ece <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	3b0a      	subs	r3, #10
 8007ecc:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	2b09      	cmp	r3, #9
 8007ed2:	d8f6      	bhi.n	8007ec2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
 8007ed6:	011b      	lsls	r3, r3, #4
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	79fb      	ldrb	r3, [r7, #7]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	b2db      	uxtb	r3, r3
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007efa:	79fb      	ldrb	r3, [r7, #7]
 8007efc:	091b      	lsrs	r3, r3, #4
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	461a      	mov	r2, r3
 8007f02:	0092      	lsls	r2, r2, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007f0a:	79fb      	ldrb	r3, [r7, #7]
 8007f0c:	f003 030f 	and.w	r3, r3, #15
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	4413      	add	r3, r2
 8007f16:	b2db      	uxtb	r3, r3
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e07b      	b.n	800802e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d108      	bne.n	8007f50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f46:	d009      	beq.n	8007f5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	61da      	str	r2, [r3, #28]
 8007f4e:	e005      	b.n	8007f5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d106      	bne.n	8007f7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fa f958 	bl	800222c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe0:	ea42 0103 	orr.w	r1, r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	0c1b      	lsrs	r3, r3, #16
 8007ffa:	f003 0104 	and.w	r1, r3, #4
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	f003 0210 	and.w	r2, r3, #16
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69da      	ldr	r2, [r3, #28]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800801c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b088      	sub	sp, #32
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	603b      	str	r3, [r7, #0]
 8008042:	4613      	mov	r3, r2
 8008044:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008050:	2b01      	cmp	r3, #1
 8008052:	d101      	bne.n	8008058 <HAL_SPI_Transmit+0x22>
 8008054:	2302      	movs	r3, #2
 8008056:	e126      	b.n	80082a6 <HAL_SPI_Transmit+0x270>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008060:	f7fa fb8c 	bl	800277c <HAL_GetTick>
 8008064:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008066:	88fb      	ldrh	r3, [r7, #6]
 8008068:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b01      	cmp	r3, #1
 8008074:	d002      	beq.n	800807c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008076:	2302      	movs	r3, #2
 8008078:	77fb      	strb	r3, [r7, #31]
    goto error;
 800807a:	e10b      	b.n	8008294 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <HAL_SPI_Transmit+0x52>
 8008082:	88fb      	ldrh	r3, [r7, #6]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d102      	bne.n	800808e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800808c:	e102      	b.n	8008294 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2203      	movs	r2, #3
 8008092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	88fa      	ldrh	r2, [r7, #6]
 80080a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	88fa      	ldrh	r2, [r7, #6]
 80080ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d4:	d10f      	bne.n	80080f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008100:	2b40      	cmp	r3, #64	; 0x40
 8008102:	d007      	beq.n	8008114 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008112:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800811c:	d14b      	bne.n	80081b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <HAL_SPI_Transmit+0xf6>
 8008126:	8afb      	ldrh	r3, [r7, #22]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d13e      	bne.n	80081aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008130:	881a      	ldrh	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813c:	1c9a      	adds	r2, r3, #2
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008146:	b29b      	uxth	r3, r3
 8008148:	3b01      	subs	r3, #1
 800814a:	b29a      	uxth	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008150:	e02b      	b.n	80081aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b02      	cmp	r3, #2
 800815e:	d112      	bne.n	8008186 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008164:	881a      	ldrh	r2, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008170:	1c9a      	adds	r2, r3, #2
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800817a:	b29b      	uxth	r3, r3
 800817c:	3b01      	subs	r3, #1
 800817e:	b29a      	uxth	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	86da      	strh	r2, [r3, #54]	; 0x36
 8008184:	e011      	b.n	80081aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008186:	f7fa faf9 	bl	800277c <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	429a      	cmp	r2, r3
 8008194:	d803      	bhi.n	800819e <HAL_SPI_Transmit+0x168>
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819c:	d102      	bne.n	80081a4 <HAL_SPI_Transmit+0x16e>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80081a8:	e074      	b.n	8008294 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1ce      	bne.n	8008152 <HAL_SPI_Transmit+0x11c>
 80081b4:	e04c      	b.n	8008250 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <HAL_SPI_Transmit+0x18e>
 80081be:	8afb      	ldrh	r3, [r7, #22]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d140      	bne.n	8008246 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	330c      	adds	r3, #12
 80081ce:	7812      	ldrb	r2, [r2, #0]
 80081d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80081ea:	e02c      	b.n	8008246 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d113      	bne.n	8008222 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	330c      	adds	r3, #12
 8008204:	7812      	ldrb	r2, [r2, #0]
 8008206:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008216:	b29b      	uxth	r3, r3
 8008218:	3b01      	subs	r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008220:	e011      	b.n	8008246 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008222:	f7fa faab 	bl	800277c <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	429a      	cmp	r2, r3
 8008230:	d803      	bhi.n	800823a <HAL_SPI_Transmit+0x204>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008238:	d102      	bne.n	8008240 <HAL_SPI_Transmit+0x20a>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d102      	bne.n	8008246 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008244:	e026      	b.n	8008294 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800824a:	b29b      	uxth	r3, r3
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1cd      	bne.n	80081ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 fa55 	bl	8008704 <SPI_EndRxTxTransaction>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2220      	movs	r2, #32
 8008264:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10a      	bne.n	8008284 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800826e:	2300      	movs	r3, #0
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	613b      	str	r3, [r7, #16]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	613b      	str	r3, [r7, #16]
 8008282:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008288:	2b00      	cmp	r3, #0
 800828a:	d002      	beq.n	8008292 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	77fb      	strb	r3, [r7, #31]
 8008290:	e000      	b.n	8008294 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008292:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80082a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3720      	adds	r7, #32
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b08c      	sub	sp, #48	; 0x30
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
 80082ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80082bc:	2301      	movs	r3, #1
 80082be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d101      	bne.n	80082d4 <HAL_SPI_TransmitReceive+0x26>
 80082d0:	2302      	movs	r3, #2
 80082d2:	e18a      	b.n	80085ea <HAL_SPI_TransmitReceive+0x33c>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082dc:	f7fa fa4e 	bl	800277c <HAL_GetTick>
 80082e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80082f2:	887b      	ldrh	r3, [r7, #2]
 80082f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80082f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d00f      	beq.n	800831e <HAL_SPI_TransmitReceive+0x70>
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008304:	d107      	bne.n	8008316 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d103      	bne.n	8008316 <HAL_SPI_TransmitReceive+0x68>
 800830e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008312:	2b04      	cmp	r3, #4
 8008314:	d003      	beq.n	800831e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008316:	2302      	movs	r3, #2
 8008318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800831c:	e15b      	b.n	80085d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <HAL_SPI_TransmitReceive+0x82>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d002      	beq.n	8008330 <HAL_SPI_TransmitReceive+0x82>
 800832a:	887b      	ldrh	r3, [r7, #2]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d103      	bne.n	8008338 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008336:	e14e      	b.n	80085d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b04      	cmp	r3, #4
 8008342:	d003      	beq.n	800834c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2205      	movs	r2, #5
 8008348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	887a      	ldrh	r2, [r7, #2]
 800835c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	887a      	ldrh	r2, [r7, #2]
 8008362:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	887a      	ldrh	r2, [r7, #2]
 800836e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	887a      	ldrh	r2, [r7, #2]
 8008374:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838c:	2b40      	cmp	r3, #64	; 0x40
 800838e:	d007      	beq.n	80083a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800839e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083a8:	d178      	bne.n	800849c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d002      	beq.n	80083b8 <HAL_SPI_TransmitReceive+0x10a>
 80083b2:	8b7b      	ldrh	r3, [r7, #26]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d166      	bne.n	8008486 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083bc:	881a      	ldrh	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c8:	1c9a      	adds	r2, r3, #2
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	3b01      	subs	r3, #1
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083dc:	e053      	b.n	8008486 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d11b      	bne.n	8008424 <HAL_SPI_TransmitReceive+0x176>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d016      	beq.n	8008424 <HAL_SPI_TransmitReceive+0x176>
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d113      	bne.n	8008424 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008400:	881a      	ldrh	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	1c9a      	adds	r2, r3, #2
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008416:	b29b      	uxth	r3, r3
 8008418:	3b01      	subs	r3, #1
 800841a:	b29a      	uxth	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b01      	cmp	r3, #1
 8008430:	d119      	bne.n	8008466 <HAL_SPI_TransmitReceive+0x1b8>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008436:	b29b      	uxth	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d014      	beq.n	8008466 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68da      	ldr	r2, [r3, #12]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	b292      	uxth	r2, r2
 8008448:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844e:	1c9a      	adds	r2, r3, #2
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008458:	b29b      	uxth	r3, r3
 800845a:	3b01      	subs	r3, #1
 800845c:	b29a      	uxth	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008462:	2301      	movs	r3, #1
 8008464:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008466:	f7fa f989 	bl	800277c <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008472:	429a      	cmp	r2, r3
 8008474:	d807      	bhi.n	8008486 <HAL_SPI_TransmitReceive+0x1d8>
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847c:	d003      	beq.n	8008486 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008484:	e0a7      	b.n	80085d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800848a:	b29b      	uxth	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1a6      	bne.n	80083de <HAL_SPI_TransmitReceive+0x130>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008494:	b29b      	uxth	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1a1      	bne.n	80083de <HAL_SPI_TransmitReceive+0x130>
 800849a:	e07c      	b.n	8008596 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <HAL_SPI_TransmitReceive+0x1fc>
 80084a4:	8b7b      	ldrh	r3, [r7, #26]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d16b      	bne.n	8008582 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	330c      	adds	r3, #12
 80084b4:	7812      	ldrb	r2, [r2, #0]
 80084b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	3b01      	subs	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084d0:	e057      	b.n	8008582 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f003 0302 	and.w	r3, r3, #2
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d11c      	bne.n	800851a <HAL_SPI_TransmitReceive+0x26c>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d017      	beq.n	800851a <HAL_SPI_TransmitReceive+0x26c>
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d114      	bne.n	800851a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	330c      	adds	r3, #12
 80084fa:	7812      	ldrb	r2, [r2, #0]
 80084fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800850c:	b29b      	uxth	r3, r3
 800850e:	3b01      	subs	r3, #1
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008516:	2300      	movs	r3, #0
 8008518:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	2b01      	cmp	r3, #1
 8008526:	d119      	bne.n	800855c <HAL_SPI_TransmitReceive+0x2ae>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800852c:	b29b      	uxth	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d014      	beq.n	800855c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853c:	b2d2      	uxtb	r2, r2
 800853e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800854e:	b29b      	uxth	r3, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	b29a      	uxth	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008558:	2301      	movs	r3, #1
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800855c:	f7fa f90e 	bl	800277c <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008568:	429a      	cmp	r2, r3
 800856a:	d803      	bhi.n	8008574 <HAL_SPI_TransmitReceive+0x2c6>
 800856c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008572:	d102      	bne.n	800857a <HAL_SPI_TransmitReceive+0x2cc>
 8008574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008576:	2b00      	cmp	r3, #0
 8008578:	d103      	bne.n	8008582 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008580:	e029      	b.n	80085d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008586:	b29b      	uxth	r3, r3
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1a2      	bne.n	80084d2 <HAL_SPI_TransmitReceive+0x224>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008590:	b29b      	uxth	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d19d      	bne.n	80084d2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 f8b2 	bl	8008704 <SPI_EndRxTxTransaction>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d006      	beq.n	80085b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2220      	movs	r2, #32
 80085b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80085b2:	e010      	b.n	80085d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10b      	bne.n	80085d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085bc:	2300      	movs	r3, #0
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	617b      	str	r3, [r7, #20]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	e000      	b.n	80085d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80085d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80085e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3730      	adds	r7, #48	; 0x30
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
	...

080085f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	603b      	str	r3, [r7, #0]
 8008600:	4613      	mov	r3, r2
 8008602:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008604:	f7fa f8ba 	bl	800277c <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860c:	1a9b      	subs	r3, r3, r2
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	4413      	add	r3, r2
 8008612:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008614:	f7fa f8b2 	bl	800277c <HAL_GetTick>
 8008618:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800861a:	4b39      	ldr	r3, [pc, #228]	; (8008700 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	015b      	lsls	r3, r3, #5
 8008620:	0d1b      	lsrs	r3, r3, #20
 8008622:	69fa      	ldr	r2, [r7, #28]
 8008624:	fb02 f303 	mul.w	r3, r2, r3
 8008628:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800862a:	e054      	b.n	80086d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008632:	d050      	beq.n	80086d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008634:	f7fa f8a2 	bl	800277c <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	69fa      	ldr	r2, [r7, #28]
 8008640:	429a      	cmp	r2, r3
 8008642:	d902      	bls.n	800864a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d13d      	bne.n	80086c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008658:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008662:	d111      	bne.n	8008688 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800866c:	d004      	beq.n	8008678 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008676:	d107      	bne.n	8008688 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008686:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008690:	d10f      	bne.n	80086b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e017      	b.n	80086f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	4013      	ands	r3, r2
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	bf0c      	ite	eq
 80086e6:	2301      	moveq	r3, #1
 80086e8:	2300      	movne	r3, #0
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	461a      	mov	r2, r3
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d19b      	bne.n	800862c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3720      	adds	r7, #32
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20000004 	.word	0x20000004

08008704 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b088      	sub	sp, #32
 8008708:	af02      	add	r7, sp, #8
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008710:	4b1b      	ldr	r3, [pc, #108]	; (8008780 <SPI_EndRxTxTransaction+0x7c>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a1b      	ldr	r2, [pc, #108]	; (8008784 <SPI_EndRxTxTransaction+0x80>)
 8008716:	fba2 2303 	umull	r2, r3, r2, r3
 800871a:	0d5b      	lsrs	r3, r3, #21
 800871c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008720:	fb02 f303 	mul.w	r3, r2, r3
 8008724:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800872e:	d112      	bne.n	8008756 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2200      	movs	r2, #0
 8008738:	2180      	movs	r1, #128	; 0x80
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f7ff ff5a 	bl	80085f4 <SPI_WaitFlagStateUntilTimeout>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d016      	beq.n	8008774 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800874a:	f043 0220 	orr.w	r2, r3, #32
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e00f      	b.n	8008776 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00a      	beq.n	8008772 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	3b01      	subs	r3, #1
 8008760:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876c:	2b80      	cmp	r3, #128	; 0x80
 800876e:	d0f2      	beq.n	8008756 <SPI_EndRxTxTransaction+0x52>
 8008770:	e000      	b.n	8008774 <SPI_EndRxTxTransaction+0x70>
        break;
 8008772:	bf00      	nop
  }

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000004 	.word	0x20000004
 8008784:	165e9f81 	.word	0x165e9f81

08008788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e041      	b.n	800881e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d106      	bne.n	80087b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7f9 fdb4 	bl	800231c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2202      	movs	r2, #2
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3304      	adds	r3, #4
 80087c4:	4619      	mov	r1, r3
 80087c6:	4610      	mov	r0, r2
 80087c8:	f000 fa96 	bl	8008cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b01      	cmp	r3, #1
 800883a:	d001      	beq.n	8008840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e04e      	b.n	80088de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68da      	ldr	r2, [r3, #12]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f042 0201 	orr.w	r2, r2, #1
 8008856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a23      	ldr	r2, [pc, #140]	; (80088ec <HAL_TIM_Base_Start_IT+0xc4>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d022      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x80>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800886a:	d01d      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x80>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a1f      	ldr	r2, [pc, #124]	; (80088f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d018      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x80>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a1e      	ldr	r2, [pc, #120]	; (80088f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d013      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x80>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a1c      	ldr	r2, [pc, #112]	; (80088f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d00e      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x80>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a1b      	ldr	r2, [pc, #108]	; (80088fc <HAL_TIM_Base_Start_IT+0xd4>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d009      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x80>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a19      	ldr	r2, [pc, #100]	; (8008900 <HAL_TIM_Base_Start_IT+0xd8>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d004      	beq.n	80088a8 <HAL_TIM_Base_Start_IT+0x80>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a18      	ldr	r2, [pc, #96]	; (8008904 <HAL_TIM_Base_Start_IT+0xdc>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d111      	bne.n	80088cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f003 0307 	and.w	r3, r3, #7
 80088b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2b06      	cmp	r3, #6
 80088b8:	d010      	beq.n	80088dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f042 0201 	orr.w	r2, r2, #1
 80088c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ca:	e007      	b.n	80088dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f042 0201 	orr.w	r2, r2, #1
 80088da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	40010000 	.word	0x40010000
 80088f0:	40000400 	.word	0x40000400
 80088f4:	40000800 	.word	0x40000800
 80088f8:	40000c00 	.word	0x40000c00
 80088fc:	40010400 	.word	0x40010400
 8008900:	40014000 	.word	0x40014000
 8008904:	40001800 	.word	0x40001800

08008908 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b02      	cmp	r3, #2
 800891c:	d122      	bne.n	8008964 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b02      	cmp	r3, #2
 800892a:	d11b      	bne.n	8008964 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f06f 0202 	mvn.w	r2, #2
 8008934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	f003 0303 	and.w	r3, r3, #3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f9b5 	bl	8008cba <HAL_TIM_IC_CaptureCallback>
 8008950:	e005      	b.n	800895e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f9a7 	bl	8008ca6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f9b8 	bl	8008cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	f003 0304 	and.w	r3, r3, #4
 800896e:	2b04      	cmp	r3, #4
 8008970:	d122      	bne.n	80089b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b04      	cmp	r3, #4
 800897e:	d11b      	bne.n	80089b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f06f 0204 	mvn.w	r2, #4
 8008988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2202      	movs	r2, #2
 800898e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f98b 	bl	8008cba <HAL_TIM_IC_CaptureCallback>
 80089a4:	e005      	b.n	80089b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f97d 	bl	8008ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f98e 	bl	8008cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	f003 0308 	and.w	r3, r3, #8
 80089c2:	2b08      	cmp	r3, #8
 80089c4:	d122      	bne.n	8008a0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f003 0308 	and.w	r3, r3, #8
 80089d0:	2b08      	cmp	r3, #8
 80089d2:	d11b      	bne.n	8008a0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f06f 0208 	mvn.w	r2, #8
 80089dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2204      	movs	r2, #4
 80089e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d003      	beq.n	80089fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f961 	bl	8008cba <HAL_TIM_IC_CaptureCallback>
 80089f8:	e005      	b.n	8008a06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f953 	bl	8008ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f964 	bl	8008cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	f003 0310 	and.w	r3, r3, #16
 8008a16:	2b10      	cmp	r3, #16
 8008a18:	d122      	bne.n	8008a60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f003 0310 	and.w	r3, r3, #16
 8008a24:	2b10      	cmp	r3, #16
 8008a26:	d11b      	bne.n	8008a60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f06f 0210 	mvn.w	r2, #16
 8008a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2208      	movs	r2, #8
 8008a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f937 	bl	8008cba <HAL_TIM_IC_CaptureCallback>
 8008a4c:	e005      	b.n	8008a5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f929 	bl	8008ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f93a 	bl	8008cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d10e      	bne.n	8008a8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d107      	bne.n	8008a8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f06f 0201 	mvn.w	r2, #1
 8008a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7f9 fa60 	bl	8001f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a96:	2b80      	cmp	r3, #128	; 0x80
 8008a98:	d10e      	bne.n	8008ab8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa4:	2b80      	cmp	r3, #128	; 0x80
 8008aa6:	d107      	bne.n	8008ab8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fae0 	bl	8009078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac2:	2b40      	cmp	r3, #64	; 0x40
 8008ac4:	d10e      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad0:	2b40      	cmp	r3, #64	; 0x40
 8008ad2:	d107      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f8ff 	bl	8008ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	f003 0320 	and.w	r3, r3, #32
 8008aee:	2b20      	cmp	r3, #32
 8008af0:	d10e      	bne.n	8008b10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f003 0320 	and.w	r3, r3, #32
 8008afc:	2b20      	cmp	r3, #32
 8008afe:	d107      	bne.n	8008b10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f06f 0220 	mvn.w	r2, #32
 8008b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 faaa 	bl	8009064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d101      	bne.n	8008b34 <HAL_TIM_ConfigClockSource+0x1c>
 8008b30:	2302      	movs	r3, #2
 8008b32:	e0b4      	b.n	8008c9e <HAL_TIM_ConfigClockSource+0x186>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b6c:	d03e      	beq.n	8008bec <HAL_TIM_ConfigClockSource+0xd4>
 8008b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b72:	f200 8087 	bhi.w	8008c84 <HAL_TIM_ConfigClockSource+0x16c>
 8008b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b7a:	f000 8086 	beq.w	8008c8a <HAL_TIM_ConfigClockSource+0x172>
 8008b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b82:	d87f      	bhi.n	8008c84 <HAL_TIM_ConfigClockSource+0x16c>
 8008b84:	2b70      	cmp	r3, #112	; 0x70
 8008b86:	d01a      	beq.n	8008bbe <HAL_TIM_ConfigClockSource+0xa6>
 8008b88:	2b70      	cmp	r3, #112	; 0x70
 8008b8a:	d87b      	bhi.n	8008c84 <HAL_TIM_ConfigClockSource+0x16c>
 8008b8c:	2b60      	cmp	r3, #96	; 0x60
 8008b8e:	d050      	beq.n	8008c32 <HAL_TIM_ConfigClockSource+0x11a>
 8008b90:	2b60      	cmp	r3, #96	; 0x60
 8008b92:	d877      	bhi.n	8008c84 <HAL_TIM_ConfigClockSource+0x16c>
 8008b94:	2b50      	cmp	r3, #80	; 0x50
 8008b96:	d03c      	beq.n	8008c12 <HAL_TIM_ConfigClockSource+0xfa>
 8008b98:	2b50      	cmp	r3, #80	; 0x50
 8008b9a:	d873      	bhi.n	8008c84 <HAL_TIM_ConfigClockSource+0x16c>
 8008b9c:	2b40      	cmp	r3, #64	; 0x40
 8008b9e:	d058      	beq.n	8008c52 <HAL_TIM_ConfigClockSource+0x13a>
 8008ba0:	2b40      	cmp	r3, #64	; 0x40
 8008ba2:	d86f      	bhi.n	8008c84 <HAL_TIM_ConfigClockSource+0x16c>
 8008ba4:	2b30      	cmp	r3, #48	; 0x30
 8008ba6:	d064      	beq.n	8008c72 <HAL_TIM_ConfigClockSource+0x15a>
 8008ba8:	2b30      	cmp	r3, #48	; 0x30
 8008baa:	d86b      	bhi.n	8008c84 <HAL_TIM_ConfigClockSource+0x16c>
 8008bac:	2b20      	cmp	r3, #32
 8008bae:	d060      	beq.n	8008c72 <HAL_TIM_ConfigClockSource+0x15a>
 8008bb0:	2b20      	cmp	r3, #32
 8008bb2:	d867      	bhi.n	8008c84 <HAL_TIM_ConfigClockSource+0x16c>
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d05c      	beq.n	8008c72 <HAL_TIM_ConfigClockSource+0x15a>
 8008bb8:	2b10      	cmp	r3, #16
 8008bba:	d05a      	beq.n	8008c72 <HAL_TIM_ConfigClockSource+0x15a>
 8008bbc:	e062      	b.n	8008c84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	6899      	ldr	r1, [r3, #8]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	685a      	ldr	r2, [r3, #4]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	f000 f9ad 	bl	8008f2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008be0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	609a      	str	r2, [r3, #8]
      break;
 8008bea:	e04f      	b.n	8008c8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6818      	ldr	r0, [r3, #0]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	6899      	ldr	r1, [r3, #8]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	f000 f996 	bl	8008f2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689a      	ldr	r2, [r3, #8]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c0e:	609a      	str	r2, [r3, #8]
      break;
 8008c10:	e03c      	b.n	8008c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	6859      	ldr	r1, [r3, #4]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f000 f90a 	bl	8008e38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2150      	movs	r1, #80	; 0x50
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 f963 	bl	8008ef6 <TIM_ITRx_SetConfig>
      break;
 8008c30:	e02c      	b.n	8008c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6818      	ldr	r0, [r3, #0]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	6859      	ldr	r1, [r3, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f000 f929 	bl	8008e96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2160      	movs	r1, #96	; 0x60
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 f953 	bl	8008ef6 <TIM_ITRx_SetConfig>
      break;
 8008c50:	e01c      	b.n	8008c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6818      	ldr	r0, [r3, #0]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	6859      	ldr	r1, [r3, #4]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	f000 f8ea 	bl	8008e38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2140      	movs	r1, #64	; 0x40
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 f943 	bl	8008ef6 <TIM_ITRx_SetConfig>
      break;
 8008c70:	e00c      	b.n	8008c8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	f000 f93a 	bl	8008ef6 <TIM_ITRx_SetConfig>
      break;
 8008c82:	e003      	b.n	8008c8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	73fb      	strb	r3, [r7, #15]
      break;
 8008c88:	e000      	b.n	8008c8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cae:	bf00      	nop
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b083      	sub	sp, #12
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008cc2:	bf00      	nop
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b083      	sub	sp, #12
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cd6:	bf00      	nop
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b083      	sub	sp, #12
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cea:	bf00      	nop
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
	...

08008cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a40      	ldr	r2, [pc, #256]	; (8008e0c <TIM_Base_SetConfig+0x114>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d013      	beq.n	8008d38 <TIM_Base_SetConfig+0x40>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d16:	d00f      	beq.n	8008d38 <TIM_Base_SetConfig+0x40>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a3d      	ldr	r2, [pc, #244]	; (8008e10 <TIM_Base_SetConfig+0x118>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d00b      	beq.n	8008d38 <TIM_Base_SetConfig+0x40>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a3c      	ldr	r2, [pc, #240]	; (8008e14 <TIM_Base_SetConfig+0x11c>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d007      	beq.n	8008d38 <TIM_Base_SetConfig+0x40>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a3b      	ldr	r2, [pc, #236]	; (8008e18 <TIM_Base_SetConfig+0x120>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d003      	beq.n	8008d38 <TIM_Base_SetConfig+0x40>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a3a      	ldr	r2, [pc, #232]	; (8008e1c <TIM_Base_SetConfig+0x124>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d108      	bne.n	8008d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a2f      	ldr	r2, [pc, #188]	; (8008e0c <TIM_Base_SetConfig+0x114>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d02b      	beq.n	8008daa <TIM_Base_SetConfig+0xb2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d58:	d027      	beq.n	8008daa <TIM_Base_SetConfig+0xb2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a2c      	ldr	r2, [pc, #176]	; (8008e10 <TIM_Base_SetConfig+0x118>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d023      	beq.n	8008daa <TIM_Base_SetConfig+0xb2>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a2b      	ldr	r2, [pc, #172]	; (8008e14 <TIM_Base_SetConfig+0x11c>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d01f      	beq.n	8008daa <TIM_Base_SetConfig+0xb2>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a2a      	ldr	r2, [pc, #168]	; (8008e18 <TIM_Base_SetConfig+0x120>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d01b      	beq.n	8008daa <TIM_Base_SetConfig+0xb2>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a29      	ldr	r2, [pc, #164]	; (8008e1c <TIM_Base_SetConfig+0x124>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d017      	beq.n	8008daa <TIM_Base_SetConfig+0xb2>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a28      	ldr	r2, [pc, #160]	; (8008e20 <TIM_Base_SetConfig+0x128>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d013      	beq.n	8008daa <TIM_Base_SetConfig+0xb2>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a27      	ldr	r2, [pc, #156]	; (8008e24 <TIM_Base_SetConfig+0x12c>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d00f      	beq.n	8008daa <TIM_Base_SetConfig+0xb2>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a26      	ldr	r2, [pc, #152]	; (8008e28 <TIM_Base_SetConfig+0x130>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d00b      	beq.n	8008daa <TIM_Base_SetConfig+0xb2>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a25      	ldr	r2, [pc, #148]	; (8008e2c <TIM_Base_SetConfig+0x134>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d007      	beq.n	8008daa <TIM_Base_SetConfig+0xb2>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a24      	ldr	r2, [pc, #144]	; (8008e30 <TIM_Base_SetConfig+0x138>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d003      	beq.n	8008daa <TIM_Base_SetConfig+0xb2>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a23      	ldr	r2, [pc, #140]	; (8008e34 <TIM_Base_SetConfig+0x13c>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d108      	bne.n	8008dbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	689a      	ldr	r2, [r3, #8]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a0a      	ldr	r2, [pc, #40]	; (8008e0c <TIM_Base_SetConfig+0x114>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d003      	beq.n	8008df0 <TIM_Base_SetConfig+0xf8>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a0c      	ldr	r2, [pc, #48]	; (8008e1c <TIM_Base_SetConfig+0x124>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d103      	bne.n	8008df8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	691a      	ldr	r2, [r3, #16]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	615a      	str	r2, [r3, #20]
}
 8008dfe:	bf00      	nop
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	40010000 	.word	0x40010000
 8008e10:	40000400 	.word	0x40000400
 8008e14:	40000800 	.word	0x40000800
 8008e18:	40000c00 	.word	0x40000c00
 8008e1c:	40010400 	.word	0x40010400
 8008e20:	40014000 	.word	0x40014000
 8008e24:	40014400 	.word	0x40014400
 8008e28:	40014800 	.word	0x40014800
 8008e2c:	40001800 	.word	0x40001800
 8008e30:	40001c00 	.word	0x40001c00
 8008e34:	40002000 	.word	0x40002000

08008e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6a1b      	ldr	r3, [r3, #32]
 8008e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	f023 0201 	bic.w	r2, r3, #1
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	011b      	lsls	r3, r3, #4
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f023 030a 	bic.w	r3, r3, #10
 8008e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	621a      	str	r2, [r3, #32]
}
 8008e8a:	bf00      	nop
 8008e8c:	371c      	adds	r7, #28
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b087      	sub	sp, #28
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	60f8      	str	r0, [r7, #12]
 8008e9e:	60b9      	str	r1, [r7, #8]
 8008ea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	f023 0210 	bic.w	r2, r3, #16
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	031b      	lsls	r3, r3, #12
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ed2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	011b      	lsls	r3, r3, #4
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	621a      	str	r2, [r3, #32]
}
 8008eea:	bf00      	nop
 8008eec:	371c      	adds	r7, #28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b085      	sub	sp, #20
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	f043 0307 	orr.w	r3, r3, #7
 8008f18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	609a      	str	r2, [r3, #8]
}
 8008f20:	bf00      	nop
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
 8008f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	021a      	lsls	r2, r3, #8
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	609a      	str	r2, [r3, #8]
}
 8008f60:	bf00      	nop
 8008f62:	371c      	adds	r7, #28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d101      	bne.n	8008f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f80:	2302      	movs	r3, #2
 8008f82:	e05a      	b.n	800903a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a21      	ldr	r2, [pc, #132]	; (8009048 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d022      	beq.n	800900e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fd0:	d01d      	beq.n	800900e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a1d      	ldr	r2, [pc, #116]	; (800904c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d018      	beq.n	800900e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a1b      	ldr	r2, [pc, #108]	; (8009050 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d013      	beq.n	800900e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a1a      	ldr	r2, [pc, #104]	; (8009054 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d00e      	beq.n	800900e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a18      	ldr	r2, [pc, #96]	; (8009058 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d009      	beq.n	800900e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a17      	ldr	r2, [pc, #92]	; (800905c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d004      	beq.n	800900e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a15      	ldr	r2, [pc, #84]	; (8009060 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d10c      	bne.n	8009028 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009014:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	4313      	orrs	r3, r2
 800901e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	40010000 	.word	0x40010000
 800904c:	40000400 	.word	0x40000400
 8009050:	40000800 	.word	0x40000800
 8009054:	40000c00 	.word	0x40000c00
 8009058:	40010400 	.word	0x40010400
 800905c:	40014000 	.word	0x40014000
 8009060:	40001800 	.word	0x40001800

08009064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e03f      	b.n	800911e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d106      	bne.n	80090b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7f9 f970 	bl	8002398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2224      	movs	r2, #36	; 0x24
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68da      	ldr	r2, [r3, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f929 	bl	8009328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	691a      	ldr	r2, [r3, #16]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	695a      	ldr	r2, [r3, #20]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68da      	ldr	r2, [r3, #12]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2220      	movs	r2, #32
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2220      	movs	r2, #32
 8009118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b08a      	sub	sp, #40	; 0x28
 800912a:	af02      	add	r7, sp, #8
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	603b      	str	r3, [r7, #0]
 8009132:	4613      	mov	r3, r2
 8009134:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b20      	cmp	r3, #32
 8009144:	d17c      	bne.n	8009240 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <HAL_UART_Transmit+0x2c>
 800914c:	88fb      	ldrh	r3, [r7, #6]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e075      	b.n	8009242 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800915c:	2b01      	cmp	r3, #1
 800915e:	d101      	bne.n	8009164 <HAL_UART_Transmit+0x3e>
 8009160:	2302      	movs	r3, #2
 8009162:	e06e      	b.n	8009242 <HAL_UART_Transmit+0x11c>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2221      	movs	r2, #33	; 0x21
 8009176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800917a:	f7f9 faff 	bl	800277c <HAL_GetTick>
 800917e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	88fa      	ldrh	r2, [r7, #6]
 8009184:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	88fa      	ldrh	r2, [r7, #6]
 800918a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009194:	d108      	bne.n	80091a8 <HAL_UART_Transmit+0x82>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d104      	bne.n	80091a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800919e:	2300      	movs	r3, #0
 80091a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	61bb      	str	r3, [r7, #24]
 80091a6:	e003      	b.n	80091b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091ac:	2300      	movs	r3, #0
 80091ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80091b8:	e02a      	b.n	8009210 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2200      	movs	r2, #0
 80091c2:	2180      	movs	r1, #128	; 0x80
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 f840 	bl	800924a <UART_WaitOnFlagUntilTimeout>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e036      	b.n	8009242 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10b      	bne.n	80091f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	3302      	adds	r3, #2
 80091ee:	61bb      	str	r3, [r7, #24]
 80091f0:	e007      	b.n	8009202 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	781a      	ldrb	r2, [r3, #0]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	3301      	adds	r3, #1
 8009200:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009206:	b29b      	uxth	r3, r3
 8009208:	3b01      	subs	r3, #1
 800920a:	b29a      	uxth	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009214:	b29b      	uxth	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1cf      	bne.n	80091ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2200      	movs	r2, #0
 8009222:	2140      	movs	r1, #64	; 0x40
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 f810 	bl	800924a <UART_WaitOnFlagUntilTimeout>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e006      	b.n	8009242 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2220      	movs	r2, #32
 8009238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	e000      	b.n	8009242 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009240:	2302      	movs	r3, #2
  }
}
 8009242:	4618      	mov	r0, r3
 8009244:	3720      	adds	r7, #32
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b090      	sub	sp, #64	; 0x40
 800924e:	af00      	add	r7, sp, #0
 8009250:	60f8      	str	r0, [r7, #12]
 8009252:	60b9      	str	r1, [r7, #8]
 8009254:	603b      	str	r3, [r7, #0]
 8009256:	4613      	mov	r3, r2
 8009258:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800925a:	e050      	b.n	80092fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800925c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800925e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009262:	d04c      	beq.n	80092fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009266:	2b00      	cmp	r3, #0
 8009268:	d007      	beq.n	800927a <UART_WaitOnFlagUntilTimeout+0x30>
 800926a:	f7f9 fa87 	bl	800277c <HAL_GetTick>
 800926e:	4602      	mov	r2, r0
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009276:	429a      	cmp	r2, r3
 8009278:	d241      	bcs.n	80092fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	330c      	adds	r3, #12
 8009280:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009284:	e853 3f00 	ldrex	r3, [r3]
 8009288:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	330c      	adds	r3, #12
 8009298:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800929a:	637a      	str	r2, [r7, #52]	; 0x34
 800929c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092a2:	e841 2300 	strex	r3, r2, [r1]
 80092a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80092a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1e5      	bne.n	800927a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3314      	adds	r3, #20
 80092b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	613b      	str	r3, [r7, #16]
   return(result);
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f023 0301 	bic.w	r3, r3, #1
 80092c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3314      	adds	r3, #20
 80092cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ce:	623a      	str	r2, [r7, #32]
 80092d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	69f9      	ldr	r1, [r7, #28]
 80092d4:	6a3a      	ldr	r2, [r7, #32]
 80092d6:	e841 2300 	strex	r3, r2, [r1]
 80092da:	61bb      	str	r3, [r7, #24]
   return(result);
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1e5      	bne.n	80092ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2220      	movs	r2, #32
 80092e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2220      	movs	r2, #32
 80092ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e00f      	b.n	800931e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	4013      	ands	r3, r2
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	429a      	cmp	r2, r3
 800930c:	bf0c      	ite	eq
 800930e:	2301      	moveq	r3, #1
 8009310:	2300      	movne	r3, #0
 8009312:	b2db      	uxtb	r3, r3
 8009314:	461a      	mov	r2, r3
 8009316:	79fb      	ldrb	r3, [r7, #7]
 8009318:	429a      	cmp	r2, r3
 800931a:	d09f      	beq.n	800925c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3740      	adds	r7, #64	; 0x40
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
	...

08009328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800932c:	b0c0      	sub	sp, #256	; 0x100
 800932e:	af00      	add	r7, sp, #0
 8009330:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009344:	68d9      	ldr	r1, [r3, #12]
 8009346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	ea40 0301 	orr.w	r3, r0, r1
 8009350:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	431a      	orrs	r2, r3
 8009360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	431a      	orrs	r2, r3
 8009368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	4313      	orrs	r3, r2
 8009370:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009380:	f021 010c 	bic.w	r1, r1, #12
 8009384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800938e:	430b      	orrs	r3, r1
 8009390:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800939e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a2:	6999      	ldr	r1, [r3, #24]
 80093a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	ea40 0301 	orr.w	r3, r0, r1
 80093ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	4b8f      	ldr	r3, [pc, #572]	; (80095f4 <UART_SetConfig+0x2cc>)
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d005      	beq.n	80093c8 <UART_SetConfig+0xa0>
 80093bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	4b8d      	ldr	r3, [pc, #564]	; (80095f8 <UART_SetConfig+0x2d0>)
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d104      	bne.n	80093d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093c8:	f7fd f946 	bl	8006658 <HAL_RCC_GetPCLK2Freq>
 80093cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80093d0:	e003      	b.n	80093da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093d2:	f7fd f92d 	bl	8006630 <HAL_RCC_GetPCLK1Freq>
 80093d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093de:	69db      	ldr	r3, [r3, #28]
 80093e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093e4:	f040 810c 	bne.w	8009600 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093ec:	2200      	movs	r2, #0
 80093ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80093f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80093f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80093fa:	4622      	mov	r2, r4
 80093fc:	462b      	mov	r3, r5
 80093fe:	1891      	adds	r1, r2, r2
 8009400:	65b9      	str	r1, [r7, #88]	; 0x58
 8009402:	415b      	adcs	r3, r3
 8009404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009406:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800940a:	4621      	mov	r1, r4
 800940c:	eb12 0801 	adds.w	r8, r2, r1
 8009410:	4629      	mov	r1, r5
 8009412:	eb43 0901 	adc.w	r9, r3, r1
 8009416:	f04f 0200 	mov.w	r2, #0
 800941a:	f04f 0300 	mov.w	r3, #0
 800941e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800942a:	4690      	mov	r8, r2
 800942c:	4699      	mov	r9, r3
 800942e:	4623      	mov	r3, r4
 8009430:	eb18 0303 	adds.w	r3, r8, r3
 8009434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009438:	462b      	mov	r3, r5
 800943a:	eb49 0303 	adc.w	r3, r9, r3
 800943e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800944e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009452:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009456:	460b      	mov	r3, r1
 8009458:	18db      	adds	r3, r3, r3
 800945a:	653b      	str	r3, [r7, #80]	; 0x50
 800945c:	4613      	mov	r3, r2
 800945e:	eb42 0303 	adc.w	r3, r2, r3
 8009462:	657b      	str	r3, [r7, #84]	; 0x54
 8009464:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009468:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800946c:	f7f7 fbbc 	bl	8000be8 <__aeabi_uldivmod>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4b61      	ldr	r3, [pc, #388]	; (80095fc <UART_SetConfig+0x2d4>)
 8009476:	fba3 2302 	umull	r2, r3, r3, r2
 800947a:	095b      	lsrs	r3, r3, #5
 800947c:	011c      	lsls	r4, r3, #4
 800947e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009482:	2200      	movs	r2, #0
 8009484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009488:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800948c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009490:	4642      	mov	r2, r8
 8009492:	464b      	mov	r3, r9
 8009494:	1891      	adds	r1, r2, r2
 8009496:	64b9      	str	r1, [r7, #72]	; 0x48
 8009498:	415b      	adcs	r3, r3
 800949a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800949c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80094a0:	4641      	mov	r1, r8
 80094a2:	eb12 0a01 	adds.w	sl, r2, r1
 80094a6:	4649      	mov	r1, r9
 80094a8:	eb43 0b01 	adc.w	fp, r3, r1
 80094ac:	f04f 0200 	mov.w	r2, #0
 80094b0:	f04f 0300 	mov.w	r3, #0
 80094b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80094b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80094bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094c0:	4692      	mov	sl, r2
 80094c2:	469b      	mov	fp, r3
 80094c4:	4643      	mov	r3, r8
 80094c6:	eb1a 0303 	adds.w	r3, sl, r3
 80094ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094ce:	464b      	mov	r3, r9
 80094d0:	eb4b 0303 	adc.w	r3, fp, r3
 80094d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80094e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80094ec:	460b      	mov	r3, r1
 80094ee:	18db      	adds	r3, r3, r3
 80094f0:	643b      	str	r3, [r7, #64]	; 0x40
 80094f2:	4613      	mov	r3, r2
 80094f4:	eb42 0303 	adc.w	r3, r2, r3
 80094f8:	647b      	str	r3, [r7, #68]	; 0x44
 80094fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80094fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009502:	f7f7 fb71 	bl	8000be8 <__aeabi_uldivmod>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4611      	mov	r1, r2
 800950c:	4b3b      	ldr	r3, [pc, #236]	; (80095fc <UART_SetConfig+0x2d4>)
 800950e:	fba3 2301 	umull	r2, r3, r3, r1
 8009512:	095b      	lsrs	r3, r3, #5
 8009514:	2264      	movs	r2, #100	; 0x64
 8009516:	fb02 f303 	mul.w	r3, r2, r3
 800951a:	1acb      	subs	r3, r1, r3
 800951c:	00db      	lsls	r3, r3, #3
 800951e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009522:	4b36      	ldr	r3, [pc, #216]	; (80095fc <UART_SetConfig+0x2d4>)
 8009524:	fba3 2302 	umull	r2, r3, r3, r2
 8009528:	095b      	lsrs	r3, r3, #5
 800952a:	005b      	lsls	r3, r3, #1
 800952c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009530:	441c      	add	r4, r3
 8009532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009536:	2200      	movs	r2, #0
 8009538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800953c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009540:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009544:	4642      	mov	r2, r8
 8009546:	464b      	mov	r3, r9
 8009548:	1891      	adds	r1, r2, r2
 800954a:	63b9      	str	r1, [r7, #56]	; 0x38
 800954c:	415b      	adcs	r3, r3
 800954e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009550:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009554:	4641      	mov	r1, r8
 8009556:	1851      	adds	r1, r2, r1
 8009558:	6339      	str	r1, [r7, #48]	; 0x30
 800955a:	4649      	mov	r1, r9
 800955c:	414b      	adcs	r3, r1
 800955e:	637b      	str	r3, [r7, #52]	; 0x34
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	f04f 0300 	mov.w	r3, #0
 8009568:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800956c:	4659      	mov	r1, fp
 800956e:	00cb      	lsls	r3, r1, #3
 8009570:	4651      	mov	r1, sl
 8009572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009576:	4651      	mov	r1, sl
 8009578:	00ca      	lsls	r2, r1, #3
 800957a:	4610      	mov	r0, r2
 800957c:	4619      	mov	r1, r3
 800957e:	4603      	mov	r3, r0
 8009580:	4642      	mov	r2, r8
 8009582:	189b      	adds	r3, r3, r2
 8009584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009588:	464b      	mov	r3, r9
 800958a:	460a      	mov	r2, r1
 800958c:	eb42 0303 	adc.w	r3, r2, r3
 8009590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80095a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80095a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80095a8:	460b      	mov	r3, r1
 80095aa:	18db      	adds	r3, r3, r3
 80095ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80095ae:	4613      	mov	r3, r2
 80095b0:	eb42 0303 	adc.w	r3, r2, r3
 80095b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80095be:	f7f7 fb13 	bl	8000be8 <__aeabi_uldivmod>
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	4b0d      	ldr	r3, [pc, #52]	; (80095fc <UART_SetConfig+0x2d4>)
 80095c8:	fba3 1302 	umull	r1, r3, r3, r2
 80095cc:	095b      	lsrs	r3, r3, #5
 80095ce:	2164      	movs	r1, #100	; 0x64
 80095d0:	fb01 f303 	mul.w	r3, r1, r3
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	3332      	adds	r3, #50	; 0x32
 80095da:	4a08      	ldr	r2, [pc, #32]	; (80095fc <UART_SetConfig+0x2d4>)
 80095dc:	fba2 2303 	umull	r2, r3, r2, r3
 80095e0:	095b      	lsrs	r3, r3, #5
 80095e2:	f003 0207 	and.w	r2, r3, #7
 80095e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4422      	add	r2, r4
 80095ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80095f0:	e106      	b.n	8009800 <UART_SetConfig+0x4d8>
 80095f2:	bf00      	nop
 80095f4:	40011000 	.word	0x40011000
 80095f8:	40011400 	.word	0x40011400
 80095fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009604:	2200      	movs	r2, #0
 8009606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800960a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800960e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009612:	4642      	mov	r2, r8
 8009614:	464b      	mov	r3, r9
 8009616:	1891      	adds	r1, r2, r2
 8009618:	6239      	str	r1, [r7, #32]
 800961a:	415b      	adcs	r3, r3
 800961c:	627b      	str	r3, [r7, #36]	; 0x24
 800961e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009622:	4641      	mov	r1, r8
 8009624:	1854      	adds	r4, r2, r1
 8009626:	4649      	mov	r1, r9
 8009628:	eb43 0501 	adc.w	r5, r3, r1
 800962c:	f04f 0200 	mov.w	r2, #0
 8009630:	f04f 0300 	mov.w	r3, #0
 8009634:	00eb      	lsls	r3, r5, #3
 8009636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800963a:	00e2      	lsls	r2, r4, #3
 800963c:	4614      	mov	r4, r2
 800963e:	461d      	mov	r5, r3
 8009640:	4643      	mov	r3, r8
 8009642:	18e3      	adds	r3, r4, r3
 8009644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009648:	464b      	mov	r3, r9
 800964a:	eb45 0303 	adc.w	r3, r5, r3
 800964e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800965e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009662:	f04f 0200 	mov.w	r2, #0
 8009666:	f04f 0300 	mov.w	r3, #0
 800966a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800966e:	4629      	mov	r1, r5
 8009670:	008b      	lsls	r3, r1, #2
 8009672:	4621      	mov	r1, r4
 8009674:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009678:	4621      	mov	r1, r4
 800967a:	008a      	lsls	r2, r1, #2
 800967c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009680:	f7f7 fab2 	bl	8000be8 <__aeabi_uldivmod>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	4b60      	ldr	r3, [pc, #384]	; (800980c <UART_SetConfig+0x4e4>)
 800968a:	fba3 2302 	umull	r2, r3, r3, r2
 800968e:	095b      	lsrs	r3, r3, #5
 8009690:	011c      	lsls	r4, r3, #4
 8009692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009696:	2200      	movs	r2, #0
 8009698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800969c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80096a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80096a4:	4642      	mov	r2, r8
 80096a6:	464b      	mov	r3, r9
 80096a8:	1891      	adds	r1, r2, r2
 80096aa:	61b9      	str	r1, [r7, #24]
 80096ac:	415b      	adcs	r3, r3
 80096ae:	61fb      	str	r3, [r7, #28]
 80096b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096b4:	4641      	mov	r1, r8
 80096b6:	1851      	adds	r1, r2, r1
 80096b8:	6139      	str	r1, [r7, #16]
 80096ba:	4649      	mov	r1, r9
 80096bc:	414b      	adcs	r3, r1
 80096be:	617b      	str	r3, [r7, #20]
 80096c0:	f04f 0200 	mov.w	r2, #0
 80096c4:	f04f 0300 	mov.w	r3, #0
 80096c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096cc:	4659      	mov	r1, fp
 80096ce:	00cb      	lsls	r3, r1, #3
 80096d0:	4651      	mov	r1, sl
 80096d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096d6:	4651      	mov	r1, sl
 80096d8:	00ca      	lsls	r2, r1, #3
 80096da:	4610      	mov	r0, r2
 80096dc:	4619      	mov	r1, r3
 80096de:	4603      	mov	r3, r0
 80096e0:	4642      	mov	r2, r8
 80096e2:	189b      	adds	r3, r3, r2
 80096e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096e8:	464b      	mov	r3, r9
 80096ea:	460a      	mov	r2, r1
 80096ec:	eb42 0303 	adc.w	r3, r2, r3
 80096f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80096fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009700:	f04f 0200 	mov.w	r2, #0
 8009704:	f04f 0300 	mov.w	r3, #0
 8009708:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800970c:	4649      	mov	r1, r9
 800970e:	008b      	lsls	r3, r1, #2
 8009710:	4641      	mov	r1, r8
 8009712:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009716:	4641      	mov	r1, r8
 8009718:	008a      	lsls	r2, r1, #2
 800971a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800971e:	f7f7 fa63 	bl	8000be8 <__aeabi_uldivmod>
 8009722:	4602      	mov	r2, r0
 8009724:	460b      	mov	r3, r1
 8009726:	4611      	mov	r1, r2
 8009728:	4b38      	ldr	r3, [pc, #224]	; (800980c <UART_SetConfig+0x4e4>)
 800972a:	fba3 2301 	umull	r2, r3, r3, r1
 800972e:	095b      	lsrs	r3, r3, #5
 8009730:	2264      	movs	r2, #100	; 0x64
 8009732:	fb02 f303 	mul.w	r3, r2, r3
 8009736:	1acb      	subs	r3, r1, r3
 8009738:	011b      	lsls	r3, r3, #4
 800973a:	3332      	adds	r3, #50	; 0x32
 800973c:	4a33      	ldr	r2, [pc, #204]	; (800980c <UART_SetConfig+0x4e4>)
 800973e:	fba2 2303 	umull	r2, r3, r2, r3
 8009742:	095b      	lsrs	r3, r3, #5
 8009744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009748:	441c      	add	r4, r3
 800974a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800974e:	2200      	movs	r2, #0
 8009750:	673b      	str	r3, [r7, #112]	; 0x70
 8009752:	677a      	str	r2, [r7, #116]	; 0x74
 8009754:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009758:	4642      	mov	r2, r8
 800975a:	464b      	mov	r3, r9
 800975c:	1891      	adds	r1, r2, r2
 800975e:	60b9      	str	r1, [r7, #8]
 8009760:	415b      	adcs	r3, r3
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009768:	4641      	mov	r1, r8
 800976a:	1851      	adds	r1, r2, r1
 800976c:	6039      	str	r1, [r7, #0]
 800976e:	4649      	mov	r1, r9
 8009770:	414b      	adcs	r3, r1
 8009772:	607b      	str	r3, [r7, #4]
 8009774:	f04f 0200 	mov.w	r2, #0
 8009778:	f04f 0300 	mov.w	r3, #0
 800977c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009780:	4659      	mov	r1, fp
 8009782:	00cb      	lsls	r3, r1, #3
 8009784:	4651      	mov	r1, sl
 8009786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800978a:	4651      	mov	r1, sl
 800978c:	00ca      	lsls	r2, r1, #3
 800978e:	4610      	mov	r0, r2
 8009790:	4619      	mov	r1, r3
 8009792:	4603      	mov	r3, r0
 8009794:	4642      	mov	r2, r8
 8009796:	189b      	adds	r3, r3, r2
 8009798:	66bb      	str	r3, [r7, #104]	; 0x68
 800979a:	464b      	mov	r3, r9
 800979c:	460a      	mov	r2, r1
 800979e:	eb42 0303 	adc.w	r3, r2, r3
 80097a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	663b      	str	r3, [r7, #96]	; 0x60
 80097ae:	667a      	str	r2, [r7, #100]	; 0x64
 80097b0:	f04f 0200 	mov.w	r2, #0
 80097b4:	f04f 0300 	mov.w	r3, #0
 80097b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80097bc:	4649      	mov	r1, r9
 80097be:	008b      	lsls	r3, r1, #2
 80097c0:	4641      	mov	r1, r8
 80097c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097c6:	4641      	mov	r1, r8
 80097c8:	008a      	lsls	r2, r1, #2
 80097ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80097ce:	f7f7 fa0b 	bl	8000be8 <__aeabi_uldivmod>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4b0d      	ldr	r3, [pc, #52]	; (800980c <UART_SetConfig+0x4e4>)
 80097d8:	fba3 1302 	umull	r1, r3, r3, r2
 80097dc:	095b      	lsrs	r3, r3, #5
 80097de:	2164      	movs	r1, #100	; 0x64
 80097e0:	fb01 f303 	mul.w	r3, r1, r3
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	011b      	lsls	r3, r3, #4
 80097e8:	3332      	adds	r3, #50	; 0x32
 80097ea:	4a08      	ldr	r2, [pc, #32]	; (800980c <UART_SetConfig+0x4e4>)
 80097ec:	fba2 2303 	umull	r2, r3, r2, r3
 80097f0:	095b      	lsrs	r3, r3, #5
 80097f2:	f003 020f 	and.w	r2, r3, #15
 80097f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4422      	add	r2, r4
 80097fe:	609a      	str	r2, [r3, #8]
}
 8009800:	bf00      	nop
 8009802:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009806:	46bd      	mov	sp, r7
 8009808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800980c:	51eb851f 	.word	0x51eb851f

08009810 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009814:	4904      	ldr	r1, [pc, #16]	; (8009828 <MX_FATFS_Init+0x18>)
 8009816:	4805      	ldr	r0, [pc, #20]	; (800982c <MX_FATFS_Init+0x1c>)
 8009818:	f003 f922 	bl	800ca60 <FATFS_LinkDriver>
 800981c:	4603      	mov	r3, r0
 800981e:	461a      	mov	r2, r3
 8009820:	4b03      	ldr	r3, [pc, #12]	; (8009830 <MX_FATFS_Init+0x20>)
 8009822:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009824:	bf00      	nop
 8009826:	bd80      	pop	{r7, pc}
 8009828:	200029a8 	.word	0x200029a8
 800982c:	20000010 	.word	0x20000010
 8009830:	200029a4 	.word	0x200029a4

08009834 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009834:	b480      	push	{r7}
 8009836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009838:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800983a:	4618      	mov	r0, r3
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	4618      	mov	r0, r3
 8009852:	f007 fad7 	bl	8010e04 <SD_disk_initialize>
 8009856:	4603      	mov	r3, r0
 8009858:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800985a:	4618      	mov	r0, r3
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b082      	sub	sp, #8
 8009866:	af00      	add	r7, sp, #0
 8009868:	4603      	mov	r3, r0
 800986a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800986c:	79fb      	ldrb	r3, [r7, #7]
 800986e:	4618      	mov	r0, r3
 8009870:	f007 fbae 	bl	8010fd0 <SD_disk_status>
 8009874:	4603      	mov	r3, r0
 8009876:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009878:	4618      	mov	r0, r3
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	60b9      	str	r1, [r7, #8]
 8009888:	607a      	str	r2, [r7, #4]
 800988a:	603b      	str	r3, [r7, #0]
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8009890:	7bf8      	ldrb	r0, [r7, #15]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	68b9      	ldr	r1, [r7, #8]
 8009898:	f007 fbb0 	bl	8010ffc <SD_disk_read>
 800989c:	4603      	mov	r3, r0
 800989e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60b9      	str	r1, [r7, #8]
 80098b0:	607a      	str	r2, [r7, #4]
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	4603      	mov	r3, r0
 80098b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80098b8:	7bf8      	ldrb	r0, [r7, #15]
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	68b9      	ldr	r1, [r7, #8]
 80098c0:	f007 fc06 	bl	80110d0 <SD_disk_write>
 80098c4:	4603      	mov	r3, r0
 80098c6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	603a      	str	r2, [r7, #0]
 80098da:	71fb      	strb	r3, [r7, #7]
 80098dc:	460b      	mov	r3, r1
 80098de:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 80098e0:	79fb      	ldrb	r3, [r7, #7]
 80098e2:	79b9      	ldrb	r1, [r7, #6]
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f007 fc76 	bl	80111d8 <SD_disk_ioctl>
 80098ec:	4603      	mov	r3, r0
 80098ee:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009902:	79fb      	ldrb	r3, [r7, #7]
 8009904:	4a08      	ldr	r2, [pc, #32]	; (8009928 <disk_status+0x30>)
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	79fa      	ldrb	r2, [r7, #7]
 8009910:	4905      	ldr	r1, [pc, #20]	; (8009928 <disk_status+0x30>)
 8009912:	440a      	add	r2, r1
 8009914:	7a12      	ldrb	r2, [r2, #8]
 8009916:	4610      	mov	r0, r2
 8009918:	4798      	blx	r3
 800991a:	4603      	mov	r3, r0
 800991c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800991e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009920:	4618      	mov	r0, r3
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	200029d4 	.word	0x200029d4

0800992c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	4603      	mov	r3, r0
 8009934:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	4a0d      	ldr	r2, [pc, #52]	; (8009974 <disk_initialize+0x48>)
 800993e:	5cd3      	ldrb	r3, [r2, r3]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d111      	bne.n	8009968 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009944:	79fb      	ldrb	r3, [r7, #7]
 8009946:	4a0b      	ldr	r2, [pc, #44]	; (8009974 <disk_initialize+0x48>)
 8009948:	2101      	movs	r1, #1
 800994a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800994c:	79fb      	ldrb	r3, [r7, #7]
 800994e:	4a09      	ldr	r2, [pc, #36]	; (8009974 <disk_initialize+0x48>)
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	79fa      	ldrb	r2, [r7, #7]
 800995a:	4906      	ldr	r1, [pc, #24]	; (8009974 <disk_initialize+0x48>)
 800995c:	440a      	add	r2, r1
 800995e:	7a12      	ldrb	r2, [r2, #8]
 8009960:	4610      	mov	r0, r2
 8009962:	4798      	blx	r3
 8009964:	4603      	mov	r3, r0
 8009966:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009968:	7bfb      	ldrb	r3, [r7, #15]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	200029d4 	.word	0x200029d4

08009978 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009978:	b590      	push	{r4, r7, lr}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	60b9      	str	r1, [r7, #8]
 8009980:	607a      	str	r2, [r7, #4]
 8009982:	603b      	str	r3, [r7, #0]
 8009984:	4603      	mov	r3, r0
 8009986:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009988:	7bfb      	ldrb	r3, [r7, #15]
 800998a:	4a0a      	ldr	r2, [pc, #40]	; (80099b4 <disk_read+0x3c>)
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	689c      	ldr	r4, [r3, #8]
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	4a07      	ldr	r2, [pc, #28]	; (80099b4 <disk_read+0x3c>)
 8009998:	4413      	add	r3, r2
 800999a:	7a18      	ldrb	r0, [r3, #8]
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	68b9      	ldr	r1, [r7, #8]
 80099a2:	47a0      	blx	r4
 80099a4:	4603      	mov	r3, r0
 80099a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80099a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	371c      	adds	r7, #28
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd90      	pop	{r4, r7, pc}
 80099b2:	bf00      	nop
 80099b4:	200029d4 	.word	0x200029d4

080099b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80099b8:	b590      	push	{r4, r7, lr}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	607a      	str	r2, [r7, #4]
 80099c2:	603b      	str	r3, [r7, #0]
 80099c4:	4603      	mov	r3, r0
 80099c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	4a0a      	ldr	r2, [pc, #40]	; (80099f4 <disk_write+0x3c>)
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	68dc      	ldr	r4, [r3, #12]
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
 80099d6:	4a07      	ldr	r2, [pc, #28]	; (80099f4 <disk_write+0x3c>)
 80099d8:	4413      	add	r3, r2
 80099da:	7a18      	ldrb	r0, [r3, #8]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	68b9      	ldr	r1, [r7, #8]
 80099e2:	47a0      	blx	r4
 80099e4:	4603      	mov	r3, r0
 80099e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	371c      	adds	r7, #28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd90      	pop	{r4, r7, pc}
 80099f2:	bf00      	nop
 80099f4:	200029d4 	.word	0x200029d4

080099f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	603a      	str	r2, [r7, #0]
 8009a02:	71fb      	strb	r3, [r7, #7]
 8009a04:	460b      	mov	r3, r1
 8009a06:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009a08:	79fb      	ldrb	r3, [r7, #7]
 8009a0a:	4a09      	ldr	r2, [pc, #36]	; (8009a30 <disk_ioctl+0x38>)
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4413      	add	r3, r2
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	79fa      	ldrb	r2, [r7, #7]
 8009a16:	4906      	ldr	r1, [pc, #24]	; (8009a30 <disk_ioctl+0x38>)
 8009a18:	440a      	add	r2, r1
 8009a1a:	7a10      	ldrb	r0, [r2, #8]
 8009a1c:	79b9      	ldrb	r1, [r7, #6]
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	4798      	blx	r3
 8009a22:	4603      	mov	r3, r0
 8009a24:	73fb      	strb	r3, [r7, #15]
  return res;
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	200029d4 	.word	0x200029d4

08009a34 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009a44:	89fb      	ldrh	r3, [r7, #14]
 8009a46:	021b      	lsls	r3, r3, #8
 8009a48:	b21a      	sxth	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	b21b      	sxth	r3, r3
 8009a50:	4313      	orrs	r3, r2
 8009a52:	b21b      	sxth	r3, r3
 8009a54:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009a56:	89fb      	ldrh	r3, [r7, #14]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3303      	adds	r3, #3
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	021b      	lsls	r3, r3, #8
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	3202      	adds	r2, #2
 8009a7c:	7812      	ldrb	r2, [r2, #0]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	021b      	lsls	r3, r3, #8
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	3201      	adds	r2, #1
 8009a8a:	7812      	ldrb	r2, [r2, #0]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	021b      	lsls	r3, r3, #8
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	7812      	ldrb	r2, [r2, #0]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]
	return rv;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3714      	adds	r7, #20
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	607a      	str	r2, [r7, #4]
 8009abc:	887a      	ldrh	r2, [r7, #2]
 8009abe:	b2d2      	uxtb	r2, r2
 8009ac0:	701a      	strb	r2, [r3, #0]
 8009ac2:	887b      	ldrh	r3, [r7, #2]
 8009ac4:	0a1b      	lsrs	r3, r3, #8
 8009ac6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	607a      	str	r2, [r7, #4]
 8009ace:	887a      	ldrh	r2, [r7, #2]
 8009ad0:	b2d2      	uxtb	r2, r2
 8009ad2:	701a      	strb	r2, [r3, #0]
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	1c5a      	adds	r2, r3, #1
 8009aee:	607a      	str	r2, [r7, #4]
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	b2d2      	uxtb	r2, r2
 8009af4:	701a      	strb	r2, [r3, #0]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	0a1b      	lsrs	r3, r3, #8
 8009afa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	607a      	str	r2, [r7, #4]
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	b2d2      	uxtb	r2, r2
 8009b06:	701a      	strb	r2, [r3, #0]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	0a1b      	lsrs	r3, r3, #8
 8009b0c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	b2d2      	uxtb	r2, r2
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	0a1b      	lsrs	r3, r3, #8
 8009b1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	607a      	str	r2, [r7, #4]
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	b2d2      	uxtb	r2, r2
 8009b2a:	701a      	strb	r2, [r3, #0]
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009b38:	b480      	push	{r7}
 8009b3a:	b087      	sub	sp, #28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00d      	beq.n	8009b6e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	1c53      	adds	r3, r2, #1
 8009b56:	613b      	str	r3, [r7, #16]
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	1c59      	adds	r1, r3, #1
 8009b5c:	6179      	str	r1, [r7, #20]
 8009b5e:	7812      	ldrb	r2, [r2, #0]
 8009b60:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	3b01      	subs	r3, #1
 8009b66:	607b      	str	r3, [r7, #4]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1f1      	bne.n	8009b52 <mem_cpy+0x1a>
	}
}
 8009b6e:	bf00      	nop
 8009b70:	371c      	adds	r7, #28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr

08009b7a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b7a:	b480      	push	{r7}
 8009b7c:	b087      	sub	sp, #28
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	60f8      	str	r0, [r7, #12]
 8009b82:	60b9      	str	r1, [r7, #8]
 8009b84:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	617a      	str	r2, [r7, #20]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	b2d2      	uxtb	r2, r2
 8009b94:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	607b      	str	r3, [r7, #4]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1f3      	bne.n	8009b8a <mem_set+0x10>
}
 8009ba2:	bf00      	nop
 8009ba4:	bf00      	nop
 8009ba6:	371c      	adds	r7, #28
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009bb0:	b480      	push	{r7}
 8009bb2:	b089      	sub	sp, #36	; 0x24
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	61fb      	str	r3, [r7, #28]
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	61fa      	str	r2, [r7, #28]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	61ba      	str	r2, [r7, #24]
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	1acb      	subs	r3, r1, r3
 8009bdc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	607b      	str	r3, [r7, #4]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d002      	beq.n	8009bf0 <mem_cmp+0x40>
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0eb      	beq.n	8009bc8 <mem_cmp+0x18>

	return r;
 8009bf0:	697b      	ldr	r3, [r7, #20]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3724      	adds	r7, #36	; 0x24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009bfe:	b480      	push	{r7}
 8009c00:	b083      	sub	sp, #12
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009c08:	e002      	b.n	8009c10 <chk_chr+0x12>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	607b      	str	r3, [r7, #4]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d005      	beq.n	8009c24 <chk_chr+0x26>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d1f2      	bne.n	8009c0a <chk_chr+0xc>
	return *str;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	781b      	ldrb	r3, [r3, #0]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d009      	beq.n	8009c56 <lock_fs+0x22>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f003 f807 	bl	800cc5a <ff_req_grant>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d001      	beq.n	8009c56 <lock_fs+0x22>
 8009c52:	2301      	movs	r3, #1
 8009c54:	e000      	b.n	8009c58 <lock_fs+0x24>
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00d      	beq.n	8009c8e <unlock_fs+0x2e>
 8009c72:	78fb      	ldrb	r3, [r7, #3]
 8009c74:	2b0c      	cmp	r3, #12
 8009c76:	d00a      	beq.n	8009c8e <unlock_fs+0x2e>
 8009c78:	78fb      	ldrb	r3, [r7, #3]
 8009c7a:	2b0b      	cmp	r3, #11
 8009c7c:	d007      	beq.n	8009c8e <unlock_fs+0x2e>
 8009c7e:	78fb      	ldrb	r3, [r7, #3]
 8009c80:	2b0f      	cmp	r3, #15
 8009c82:	d004      	beq.n	8009c8e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	695b      	ldr	r3, [r3, #20]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f002 fffb 	bl	800cc84 <ff_rel_grant>
	}
}
 8009c8e:	bf00      	nop
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
	...

08009c98 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	60bb      	str	r3, [r7, #8]
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	60fb      	str	r3, [r7, #12]
 8009caa:	e029      	b.n	8009d00 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009cac:	4a27      	ldr	r2, [pc, #156]	; (8009d4c <chk_lock+0xb4>)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	011b      	lsls	r3, r3, #4
 8009cb2:	4413      	add	r3, r2
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d01d      	beq.n	8009cf6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009cba:	4a24      	ldr	r2, [pc, #144]	; (8009d4c <chk_lock+0xb4>)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	011b      	lsls	r3, r3, #4
 8009cc0:	4413      	add	r3, r2
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d116      	bne.n	8009cfa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009ccc:	4a1f      	ldr	r2, [pc, #124]	; (8009d4c <chk_lock+0xb4>)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	011b      	lsls	r3, r3, #4
 8009cd2:	4413      	add	r3, r2
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d10c      	bne.n	8009cfa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ce0:	4a1a      	ldr	r2, [pc, #104]	; (8009d4c <chk_lock+0xb4>)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	011b      	lsls	r3, r3, #4
 8009ce6:	4413      	add	r3, r2
 8009ce8:	3308      	adds	r3, #8
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d102      	bne.n	8009cfa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009cf4:	e007      	b.n	8009d06 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	60fb      	str	r3, [r7, #12]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d9d2      	bls.n	8009cac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d109      	bne.n	8009d20 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d102      	bne.n	8009d18 <chk_lock+0x80>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d101      	bne.n	8009d1c <chk_lock+0x84>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e010      	b.n	8009d3e <chk_lock+0xa6>
 8009d1c:	2312      	movs	r3, #18
 8009d1e:	e00e      	b.n	8009d3e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d108      	bne.n	8009d38 <chk_lock+0xa0>
 8009d26:	4a09      	ldr	r2, [pc, #36]	; (8009d4c <chk_lock+0xb4>)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	011b      	lsls	r3, r3, #4
 8009d2c:	4413      	add	r3, r2
 8009d2e:	330c      	adds	r3, #12
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d36:	d101      	bne.n	8009d3c <chk_lock+0xa4>
 8009d38:	2310      	movs	r3, #16
 8009d3a:	e000      	b.n	8009d3e <chk_lock+0xa6>
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	200029b4 	.word	0x200029b4

08009d50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d56:	2300      	movs	r3, #0
 8009d58:	607b      	str	r3, [r7, #4]
 8009d5a:	e002      	b.n	8009d62 <enq_lock+0x12>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	607b      	str	r3, [r7, #4]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d806      	bhi.n	8009d76 <enq_lock+0x26>
 8009d68:	4a09      	ldr	r2, [pc, #36]	; (8009d90 <enq_lock+0x40>)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	011b      	lsls	r3, r3, #4
 8009d6e:	4413      	add	r3, r2
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1f2      	bne.n	8009d5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	bf14      	ite	ne
 8009d7c:	2301      	movne	r3, #1
 8009d7e:	2300      	moveq	r3, #0
 8009d80:	b2db      	uxtb	r3, r3
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	200029b4 	.word	0x200029b4

08009d94 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d9e:	2300      	movs	r3, #0
 8009da0:	60fb      	str	r3, [r7, #12]
 8009da2:	e01f      	b.n	8009de4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009da4:	4a41      	ldr	r2, [pc, #260]	; (8009eac <inc_lock+0x118>)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	011b      	lsls	r3, r3, #4
 8009daa:	4413      	add	r3, r2
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d113      	bne.n	8009dde <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009db6:	4a3d      	ldr	r2, [pc, #244]	; (8009eac <inc_lock+0x118>)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	011b      	lsls	r3, r3, #4
 8009dbc:	4413      	add	r3, r2
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d109      	bne.n	8009dde <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009dca:	4a38      	ldr	r2, [pc, #224]	; (8009eac <inc_lock+0x118>)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	011b      	lsls	r3, r3, #4
 8009dd0:	4413      	add	r3, r2
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d006      	beq.n	8009dec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3301      	adds	r3, #1
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d9dc      	bls.n	8009da4 <inc_lock+0x10>
 8009dea:	e000      	b.n	8009dee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009dec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d132      	bne.n	8009e5a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009df4:	2300      	movs	r3, #0
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	e002      	b.n	8009e00 <inc_lock+0x6c>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d806      	bhi.n	8009e14 <inc_lock+0x80>
 8009e06:	4a29      	ldr	r2, [pc, #164]	; (8009eac <inc_lock+0x118>)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	011b      	lsls	r3, r3, #4
 8009e0c:	4413      	add	r3, r2
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1f2      	bne.n	8009dfa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d101      	bne.n	8009e1e <inc_lock+0x8a>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e040      	b.n	8009ea0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	4922      	ldr	r1, [pc, #136]	; (8009eac <inc_lock+0x118>)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	011b      	lsls	r3, r3, #4
 8009e28:	440b      	add	r3, r1
 8009e2a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	689a      	ldr	r2, [r3, #8]
 8009e30:	491e      	ldr	r1, [pc, #120]	; (8009eac <inc_lock+0x118>)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	011b      	lsls	r3, r3, #4
 8009e36:	440b      	add	r3, r1
 8009e38:	3304      	adds	r3, #4
 8009e3a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	695a      	ldr	r2, [r3, #20]
 8009e40:	491a      	ldr	r1, [pc, #104]	; (8009eac <inc_lock+0x118>)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	011b      	lsls	r3, r3, #4
 8009e46:	440b      	add	r3, r1
 8009e48:	3308      	adds	r3, #8
 8009e4a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009e4c:	4a17      	ldr	r2, [pc, #92]	; (8009eac <inc_lock+0x118>)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	011b      	lsls	r3, r3, #4
 8009e52:	4413      	add	r3, r2
 8009e54:	330c      	adds	r3, #12
 8009e56:	2200      	movs	r2, #0
 8009e58:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d009      	beq.n	8009e74 <inc_lock+0xe0>
 8009e60:	4a12      	ldr	r2, [pc, #72]	; (8009eac <inc_lock+0x118>)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	011b      	lsls	r3, r3, #4
 8009e66:	4413      	add	r3, r2
 8009e68:	330c      	adds	r3, #12
 8009e6a:	881b      	ldrh	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d001      	beq.n	8009e74 <inc_lock+0xe0>
 8009e70:	2300      	movs	r3, #0
 8009e72:	e015      	b.n	8009ea0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d108      	bne.n	8009e8c <inc_lock+0xf8>
 8009e7a:	4a0c      	ldr	r2, [pc, #48]	; (8009eac <inc_lock+0x118>)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	011b      	lsls	r3, r3, #4
 8009e80:	4413      	add	r3, r2
 8009e82:	330c      	adds	r3, #12
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	3301      	adds	r3, #1
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	e001      	b.n	8009e90 <inc_lock+0xfc>
 8009e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e90:	4906      	ldr	r1, [pc, #24]	; (8009eac <inc_lock+0x118>)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	011b      	lsls	r3, r3, #4
 8009e96:	440b      	add	r3, r1
 8009e98:	330c      	adds	r3, #12
 8009e9a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	3301      	adds	r3, #1
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	200029b4 	.word	0x200029b4

08009eb0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	607b      	str	r3, [r7, #4]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d825      	bhi.n	8009f10 <dec_lock+0x60>
		n = Files[i].ctr;
 8009ec4:	4a17      	ldr	r2, [pc, #92]	; (8009f24 <dec_lock+0x74>)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	011b      	lsls	r3, r3, #4
 8009eca:	4413      	add	r3, r2
 8009ecc:	330c      	adds	r3, #12
 8009ece:	881b      	ldrh	r3, [r3, #0]
 8009ed0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009ed2:	89fb      	ldrh	r3, [r7, #14]
 8009ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ed8:	d101      	bne.n	8009ede <dec_lock+0x2e>
 8009eda:	2300      	movs	r3, #0
 8009edc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009ede:	89fb      	ldrh	r3, [r7, #14]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d002      	beq.n	8009eea <dec_lock+0x3a>
 8009ee4:	89fb      	ldrh	r3, [r7, #14]
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009eea:	4a0e      	ldr	r2, [pc, #56]	; (8009f24 <dec_lock+0x74>)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	011b      	lsls	r3, r3, #4
 8009ef0:	4413      	add	r3, r2
 8009ef2:	330c      	adds	r3, #12
 8009ef4:	89fa      	ldrh	r2, [r7, #14]
 8009ef6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009ef8:	89fb      	ldrh	r3, [r7, #14]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d105      	bne.n	8009f0a <dec_lock+0x5a>
 8009efe:	4a09      	ldr	r2, [pc, #36]	; (8009f24 <dec_lock+0x74>)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	011b      	lsls	r3, r3, #4
 8009f04:	4413      	add	r3, r2
 8009f06:	2200      	movs	r2, #0
 8009f08:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	737b      	strb	r3, [r7, #13]
 8009f0e:	e001      	b.n	8009f14 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009f10:	2302      	movs	r3, #2
 8009f12:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009f14:	7b7b      	ldrb	r3, [r7, #13]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	200029b4 	.word	0x200029b4

08009f28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009f30:	2300      	movs	r3, #0
 8009f32:	60fb      	str	r3, [r7, #12]
 8009f34:	e010      	b.n	8009f58 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009f36:	4a0d      	ldr	r2, [pc, #52]	; (8009f6c <clear_lock+0x44>)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	011b      	lsls	r3, r3, #4
 8009f3c:	4413      	add	r3, r2
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d105      	bne.n	8009f52 <clear_lock+0x2a>
 8009f46:	4a09      	ldr	r2, [pc, #36]	; (8009f6c <clear_lock+0x44>)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	011b      	lsls	r3, r3, #4
 8009f4c:	4413      	add	r3, r2
 8009f4e:	2200      	movs	r2, #0
 8009f50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	3301      	adds	r3, #1
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d9eb      	bls.n	8009f36 <clear_lock+0xe>
	}
}
 8009f5e:	bf00      	nop
 8009f60:	bf00      	nop
 8009f62:	3714      	adds	r7, #20
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	200029b4 	.word	0x200029b4

08009f70 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	78db      	ldrb	r3, [r3, #3]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d034      	beq.n	8009fee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f88:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	7858      	ldrb	r0, [r3, #1]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009f94:	2301      	movs	r3, #1
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	f7ff fd0e 	bl	80099b8 <disk_write>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d002      	beq.n	8009fa8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	73fb      	strb	r3, [r7, #15]
 8009fa6:	e022      	b.n	8009fee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb2:	697a      	ldr	r2, [r7, #20]
 8009fb4:	1ad2      	subs	r2, r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d217      	bcs.n	8009fee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	789b      	ldrb	r3, [r3, #2]
 8009fc2:	613b      	str	r3, [r7, #16]
 8009fc4:	e010      	b.n	8009fe8 <sync_window+0x78>
					wsect += fs->fsize;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	697a      	ldr	r2, [r7, #20]
 8009fcc:	4413      	add	r3, r2
 8009fce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	7858      	ldrb	r0, [r3, #1]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009fda:	2301      	movs	r3, #1
 8009fdc:	697a      	ldr	r2, [r7, #20]
 8009fde:	f7ff fceb 	bl	80099b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	613b      	str	r3, [r7, #16]
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d8eb      	bhi.n	8009fc6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3718      	adds	r7, #24
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d01b      	beq.n	800a048 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7ff ffad 	bl	8009f70 <sync_window>
 800a016:	4603      	mov	r3, r0
 800a018:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d113      	bne.n	800a048 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	7858      	ldrb	r0, [r3, #1]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a02a:	2301      	movs	r3, #1
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	f7ff fca3 	bl	8009978 <disk_read>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d004      	beq.n	800a042 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a038:	f04f 33ff 	mov.w	r3, #4294967295
 800a03c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a03e:	2301      	movs	r3, #1
 800a040:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800a048:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
	...

0800a054 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff ff87 	bl	8009f70 <sync_window>
 800a062:	4603      	mov	r3, r0
 800a064:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a066:	7bfb      	ldrb	r3, [r7, #15]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d159      	bne.n	800a120 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	2b03      	cmp	r3, #3
 800a072:	d149      	bne.n	800a108 <sync_fs+0xb4>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	791b      	ldrb	r3, [r3, #4]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d145      	bne.n	800a108 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	899b      	ldrh	r3, [r3, #12]
 800a086:	461a      	mov	r2, r3
 800a088:	2100      	movs	r1, #0
 800a08a:	f7ff fd76 	bl	8009b7a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	333c      	adds	r3, #60	; 0x3c
 800a092:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a096:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7ff fd05 	bl	8009aaa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	333c      	adds	r3, #60	; 0x3c
 800a0a4:	4921      	ldr	r1, [pc, #132]	; (800a12c <sync_fs+0xd8>)
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff fd1a 	bl	8009ae0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	333c      	adds	r3, #60	; 0x3c
 800a0b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a0b4:	491e      	ldr	r1, [pc, #120]	; (800a130 <sync_fs+0xdc>)
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff fd12 	bl	8009ae0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	333c      	adds	r3, #60	; 0x3c
 800a0c0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	69db      	ldr	r3, [r3, #28]
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	f7ff fd08 	bl	8009ae0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	333c      	adds	r3, #60	; 0x3c
 800a0d4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4610      	mov	r0, r2
 800a0e0:	f7ff fcfe 	bl	8009ae0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e8:	1c5a      	adds	r2, r3, #1
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	7858      	ldrb	r0, [r3, #1]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	f7ff fc5b 	bl	80099b8 <disk_write>
			fs->fsi_flag = 0;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	785b      	ldrb	r3, [r3, #1]
 800a10c:	2200      	movs	r2, #0
 800a10e:	2100      	movs	r1, #0
 800a110:	4618      	mov	r0, r3
 800a112:	f7ff fc71 	bl	80099f8 <disk_ioctl>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <sync_fs+0xcc>
 800a11c:	2301      	movs	r3, #1
 800a11e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a120:	7bfb      	ldrb	r3, [r7, #15]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	41615252 	.word	0x41615252
 800a130:	61417272 	.word	0x61417272

0800a134 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	3b02      	subs	r3, #2
 800a142:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a1b      	ldr	r3, [r3, #32]
 800a148:	3b02      	subs	r3, #2
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d301      	bcc.n	800a154 <clust2sect+0x20>
 800a150:	2300      	movs	r3, #0
 800a152:	e008      	b.n	800a166 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	895b      	ldrh	r3, [r3, #10]
 800a158:	461a      	mov	r2, r3
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	fb03 f202 	mul.w	r2, r3, r2
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a164:	4413      	add	r3, r2
}
 800a166:	4618      	mov	r0, r3
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b086      	sub	sp, #24
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d904      	bls.n	800a192 <get_fat+0x20>
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	6a1b      	ldr	r3, [r3, #32]
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d302      	bcc.n	800a198 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a192:	2301      	movs	r3, #1
 800a194:	617b      	str	r3, [r7, #20]
 800a196:	e0bb      	b.n	800a310 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a198:	f04f 33ff 	mov.w	r3, #4294967295
 800a19c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	2b03      	cmp	r3, #3
 800a1a4:	f000 8083 	beq.w	800a2ae <get_fat+0x13c>
 800a1a8:	2b03      	cmp	r3, #3
 800a1aa:	f300 80a7 	bgt.w	800a2fc <get_fat+0x18a>
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d002      	beq.n	800a1b8 <get_fat+0x46>
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d056      	beq.n	800a264 <get_fat+0xf2>
 800a1b6:	e0a1      	b.n	800a2fc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	085b      	lsrs	r3, r3, #1
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	899b      	ldrh	r3, [r3, #12]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1d6:	4413      	add	r3, r2
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6938      	ldr	r0, [r7, #16]
 800a1dc:	f7ff ff0c 	bl	8009ff8 <move_window>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f040 808d 	bne.w	800a302 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	1c5a      	adds	r2, r3, #1
 800a1ec:	60fa      	str	r2, [r7, #12]
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	8992      	ldrh	r2, [r2, #12]
 800a1f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1f6:	fb01 f202 	mul.w	r2, r1, r2
 800a1fa:	1a9b      	subs	r3, r3, r2
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	4413      	add	r3, r2
 800a200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a204:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	899b      	ldrh	r3, [r3, #12]
 800a20e:	4619      	mov	r1, r3
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	fbb3 f3f1 	udiv	r3, r3, r1
 800a216:	4413      	add	r3, r2
 800a218:	4619      	mov	r1, r3
 800a21a:	6938      	ldr	r0, [r7, #16]
 800a21c:	f7ff feec 	bl	8009ff8 <move_window>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d16f      	bne.n	800a306 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	899b      	ldrh	r3, [r3, #12]
 800a22a:	461a      	mov	r2, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a232:	fb01 f202 	mul.w	r2, r1, r2
 800a236:	1a9b      	subs	r3, r3, r2
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	4413      	add	r3, r2
 800a23c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a240:	021b      	lsls	r3, r3, #8
 800a242:	461a      	mov	r2, r3
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	4313      	orrs	r3, r2
 800a248:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	f003 0301 	and.w	r3, r3, #1
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <get_fat+0xe8>
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	091b      	lsrs	r3, r3, #4
 800a258:	e002      	b.n	800a260 <get_fat+0xee>
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a260:	617b      	str	r3, [r7, #20]
			break;
 800a262:	e055      	b.n	800a310 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	899b      	ldrh	r3, [r3, #12]
 800a26c:	085b      	lsrs	r3, r3, #1
 800a26e:	b29b      	uxth	r3, r3
 800a270:	4619      	mov	r1, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	fbb3 f3f1 	udiv	r3, r3, r1
 800a278:	4413      	add	r3, r2
 800a27a:	4619      	mov	r1, r3
 800a27c:	6938      	ldr	r0, [r7, #16]
 800a27e:	f7ff febb 	bl	8009ff8 <move_window>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d140      	bne.n	800a30a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	005b      	lsls	r3, r3, #1
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	8992      	ldrh	r2, [r2, #12]
 800a296:	fbb3 f0f2 	udiv	r0, r3, r2
 800a29a:	fb00 f202 	mul.w	r2, r0, r2
 800a29e:	1a9b      	subs	r3, r3, r2
 800a2a0:	440b      	add	r3, r1
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7ff fbc6 	bl	8009a34 <ld_word>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	617b      	str	r3, [r7, #20]
			break;
 800a2ac:	e030      	b.n	800a310 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	899b      	ldrh	r3, [r3, #12]
 800a2b6:	089b      	lsrs	r3, r3, #2
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2c2:	4413      	add	r3, r2
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	6938      	ldr	r0, [r7, #16]
 800a2c8:	f7ff fe96 	bl	8009ff8 <move_window>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d11d      	bne.n	800a30e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	8992      	ldrh	r2, [r2, #12]
 800a2e0:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2e4:	fb00 f202 	mul.w	r2, r0, r2
 800a2e8:	1a9b      	subs	r3, r3, r2
 800a2ea:	440b      	add	r3, r1
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff fbb9 	bl	8009a64 <ld_dword>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a2f8:	617b      	str	r3, [r7, #20]
			break;
 800a2fa:	e009      	b.n	800a310 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	617b      	str	r3, [r7, #20]
 800a300:	e006      	b.n	800a310 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a302:	bf00      	nop
 800a304:	e004      	b.n	800a310 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a306:	bf00      	nop
 800a308:	e002      	b.n	800a310 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a30a:	bf00      	nop
 800a30c:	e000      	b.n	800a310 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a30e:	bf00      	nop
		}
	}

	return val;
 800a310:	697b      	ldr	r3, [r7, #20]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a31a:	b590      	push	{r4, r7, lr}
 800a31c:	b089      	sub	sp, #36	; 0x24
 800a31e:	af00      	add	r7, sp, #0
 800a320:	60f8      	str	r0, [r7, #12]
 800a322:	60b9      	str	r1, [r7, #8]
 800a324:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a326:	2302      	movs	r3, #2
 800a328:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	f240 8109 	bls.w	800a544 <put_fat+0x22a>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	429a      	cmp	r2, r3
 800a33a:	f080 8103 	bcs.w	800a544 <put_fat+0x22a>
		switch (fs->fs_type) {
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	2b03      	cmp	r3, #3
 800a344:	f000 80b6 	beq.w	800a4b4 <put_fat+0x19a>
 800a348:	2b03      	cmp	r3, #3
 800a34a:	f300 80fb 	bgt.w	800a544 <put_fat+0x22a>
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d003      	beq.n	800a35a <put_fat+0x40>
 800a352:	2b02      	cmp	r3, #2
 800a354:	f000 8083 	beq.w	800a45e <put_fat+0x144>
 800a358:	e0f4      	b.n	800a544 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	61bb      	str	r3, [r7, #24]
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	085b      	lsrs	r3, r3, #1
 800a362:	69ba      	ldr	r2, [r7, #24]
 800a364:	4413      	add	r3, r2
 800a366:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	899b      	ldrh	r3, [r3, #12]
 800a370:	4619      	mov	r1, r3
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	fbb3 f3f1 	udiv	r3, r3, r1
 800a378:	4413      	add	r3, r2
 800a37a:	4619      	mov	r1, r3
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f7ff fe3b 	bl	8009ff8 <move_window>
 800a382:	4603      	mov	r3, r0
 800a384:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a386:	7ffb      	ldrb	r3, [r7, #31]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f040 80d4 	bne.w	800a536 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	1c5a      	adds	r2, r3, #1
 800a398:	61ba      	str	r2, [r7, #24]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	8992      	ldrh	r2, [r2, #12]
 800a39e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3a2:	fb00 f202 	mul.w	r2, r0, r2
 800a3a6:	1a9b      	subs	r3, r3, r2
 800a3a8:	440b      	add	r3, r1
 800a3aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00d      	beq.n	800a3d2 <put_fat+0xb8>
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	b25b      	sxtb	r3, r3
 800a3bc:	f003 030f 	and.w	r3, r3, #15
 800a3c0:	b25a      	sxtb	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	b25b      	sxtb	r3, r3
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	b25b      	sxtb	r3, r3
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	e001      	b.n	800a3d6 <put_fat+0xbc>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	899b      	ldrh	r3, [r3, #12]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3f0:	4413      	add	r3, r2
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f7ff fdff 	bl	8009ff8 <move_window>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3fe:	7ffb      	ldrb	r3, [r7, #31]
 800a400:	2b00      	cmp	r3, #0
 800a402:	f040 809a 	bne.w	800a53a <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	899b      	ldrh	r3, [r3, #12]
 800a410:	461a      	mov	r2, r3
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	fbb3 f0f2 	udiv	r0, r3, r2
 800a418:	fb00 f202 	mul.w	r2, r0, r2
 800a41c:	1a9b      	subs	r3, r3, r2
 800a41e:	440b      	add	r3, r1
 800a420:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	f003 0301 	and.w	r3, r3, #1
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d003      	beq.n	800a434 <put_fat+0x11a>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	091b      	lsrs	r3, r3, #4
 800a430:	b2db      	uxtb	r3, r3
 800a432:	e00e      	b.n	800a452 <put_fat+0x138>
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	b25b      	sxtb	r3, r3
 800a43a:	f023 030f 	bic.w	r3, r3, #15
 800a43e:	b25a      	sxtb	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	0a1b      	lsrs	r3, r3, #8
 800a444:	b25b      	sxtb	r3, r3
 800a446:	f003 030f 	and.w	r3, r3, #15
 800a44a:	b25b      	sxtb	r3, r3
 800a44c:	4313      	orrs	r3, r2
 800a44e:	b25b      	sxtb	r3, r3
 800a450:	b2db      	uxtb	r3, r3
 800a452:	697a      	ldr	r2, [r7, #20]
 800a454:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2201      	movs	r2, #1
 800a45a:	70da      	strb	r2, [r3, #3]
			break;
 800a45c:	e072      	b.n	800a544 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	899b      	ldrh	r3, [r3, #12]
 800a466:	085b      	lsrs	r3, r3, #1
 800a468:	b29b      	uxth	r3, r3
 800a46a:	4619      	mov	r1, r3
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a472:	4413      	add	r3, r2
 800a474:	4619      	mov	r1, r3
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f7ff fdbe 	bl	8009ff8 <move_window>
 800a47c:	4603      	mov	r3, r0
 800a47e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a480:	7ffb      	ldrb	r3, [r7, #31]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d15b      	bne.n	800a53e <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	005b      	lsls	r3, r3, #1
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	8992      	ldrh	r2, [r2, #12]
 800a494:	fbb3 f0f2 	udiv	r0, r3, r2
 800a498:	fb00 f202 	mul.w	r2, r0, r2
 800a49c:	1a9b      	subs	r3, r3, r2
 800a49e:	440b      	add	r3, r1
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	b292      	uxth	r2, r2
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7ff faff 	bl	8009aaa <st_word>
			fs->wflag = 1;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	70da      	strb	r2, [r3, #3]
			break;
 800a4b2:	e047      	b.n	800a544 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	899b      	ldrh	r3, [r3, #12]
 800a4bc:	089b      	lsrs	r3, r3, #2
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4c8:	4413      	add	r3, r2
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f7ff fd93 	bl	8009ff8 <move_window>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4d6:	7ffb      	ldrb	r3, [r7, #31]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d132      	bne.n	800a542 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	8992      	ldrh	r2, [r2, #12]
 800a4f0:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4f4:	fb00 f202 	mul.w	r2, r0, r2
 800a4f8:	1a9b      	subs	r3, r3, r2
 800a4fa:	440b      	add	r3, r1
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7ff fab1 	bl	8009a64 <ld_dword>
 800a502:	4603      	mov	r3, r0
 800a504:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a508:	4323      	orrs	r3, r4
 800a50a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	8992      	ldrh	r2, [r2, #12]
 800a51a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a51e:	fb00 f202 	mul.w	r2, r0, r2
 800a522:	1a9b      	subs	r3, r3, r2
 800a524:	440b      	add	r3, r1
 800a526:	6879      	ldr	r1, [r7, #4]
 800a528:	4618      	mov	r0, r3
 800a52a:	f7ff fad9 	bl	8009ae0 <st_dword>
			fs->wflag = 1;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2201      	movs	r2, #1
 800a532:	70da      	strb	r2, [r3, #3]
			break;
 800a534:	e006      	b.n	800a544 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a536:	bf00      	nop
 800a538:	e004      	b.n	800a544 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a53a:	bf00      	nop
 800a53c:	e002      	b.n	800a544 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a53e:	bf00      	nop
 800a540:	e000      	b.n	800a544 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a542:	bf00      	nop
		}
	}
	return res;
 800a544:	7ffb      	ldrb	r3, [r7, #31]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3724      	adds	r7, #36	; 0x24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd90      	pop	{r4, r7, pc}

0800a54e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b088      	sub	sp, #32
 800a552:	af00      	add	r7, sp, #0
 800a554:	60f8      	str	r0, [r7, #12]
 800a556:	60b9      	str	r1, [r7, #8]
 800a558:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d904      	bls.n	800a574 <remove_chain+0x26>
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	6a1b      	ldr	r3, [r3, #32]
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	429a      	cmp	r2, r3
 800a572:	d301      	bcc.n	800a578 <remove_chain+0x2a>
 800a574:	2302      	movs	r3, #2
 800a576:	e04b      	b.n	800a610 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00c      	beq.n	800a598 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a57e:	f04f 32ff 	mov.w	r2, #4294967295
 800a582:	6879      	ldr	r1, [r7, #4]
 800a584:	69b8      	ldr	r0, [r7, #24]
 800a586:	f7ff fec8 	bl	800a31a <put_fat>
 800a58a:	4603      	mov	r3, r0
 800a58c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a58e:	7ffb      	ldrb	r3, [r7, #31]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <remove_chain+0x4a>
 800a594:	7ffb      	ldrb	r3, [r7, #31]
 800a596:	e03b      	b.n	800a610 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a598:	68b9      	ldr	r1, [r7, #8]
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f7ff fde9 	bl	800a172 <get_fat>
 800a5a0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d031      	beq.n	800a60c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d101      	bne.n	800a5b2 <remove_chain+0x64>
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	e02e      	b.n	800a610 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b8:	d101      	bne.n	800a5be <remove_chain+0x70>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e028      	b.n	800a610 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a5be:	2200      	movs	r2, #0
 800a5c0:	68b9      	ldr	r1, [r7, #8]
 800a5c2:	69b8      	ldr	r0, [r7, #24]
 800a5c4:	f7ff fea9 	bl	800a31a <put_fat>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a5cc:	7ffb      	ldrb	r3, [r7, #31]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <remove_chain+0x88>
 800a5d2:	7ffb      	ldrb	r3, [r7, #31]
 800a5d4:	e01c      	b.n	800a610 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	69da      	ldr	r2, [r3, #28]
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	3b02      	subs	r3, #2
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d20b      	bcs.n	800a5fc <remove_chain+0xae>
			fs->free_clst++;
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	69db      	ldr	r3, [r3, #28]
 800a5e8:	1c5a      	adds	r2, r3, #1
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	791b      	ldrb	r3, [r3, #4]
 800a5f2:	f043 0301 	orr.w	r3, r3, #1
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	6a1b      	ldr	r3, [r3, #32]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	429a      	cmp	r2, r3
 800a608:	d3c6      	bcc.n	800a598 <remove_chain+0x4a>
 800a60a:	e000      	b.n	800a60e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a60c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3720      	adds	r7, #32
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10d      	bne.n	800a64a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d004      	beq.n	800a644 <create_chain+0x2c>
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	6a1b      	ldr	r3, [r3, #32]
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	429a      	cmp	r2, r3
 800a642:	d31b      	bcc.n	800a67c <create_chain+0x64>
 800a644:	2301      	movs	r3, #1
 800a646:	61bb      	str	r3, [r7, #24]
 800a648:	e018      	b.n	800a67c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7ff fd90 	bl	800a172 <get_fat>
 800a652:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d801      	bhi.n	800a65e <create_chain+0x46>
 800a65a:	2301      	movs	r3, #1
 800a65c:	e070      	b.n	800a740 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a664:	d101      	bne.n	800a66a <create_chain+0x52>
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	e06a      	b.n	800a740 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	6a1b      	ldr	r3, [r3, #32]
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	429a      	cmp	r2, r3
 800a672:	d201      	bcs.n	800a678 <create_chain+0x60>
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	e063      	b.n	800a740 <create_chain+0x128>
		scl = clst;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	3301      	adds	r3, #1
 800a684:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	69fa      	ldr	r2, [r7, #28]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d307      	bcc.n	800a6a0 <create_chain+0x88>
				ncl = 2;
 800a690:	2302      	movs	r3, #2
 800a692:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a694:	69fa      	ldr	r2, [r7, #28]
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d901      	bls.n	800a6a0 <create_chain+0x88>
 800a69c:	2300      	movs	r3, #0
 800a69e:	e04f      	b.n	800a740 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a6a0:	69f9      	ldr	r1, [r7, #28]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7ff fd65 	bl	800a172 <get_fat>
 800a6a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00e      	beq.n	800a6ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d003      	beq.n	800a6be <create_chain+0xa6>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6bc:	d101      	bne.n	800a6c2 <create_chain+0xaa>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	e03e      	b.n	800a740 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a6c2:	69fa      	ldr	r2, [r7, #28]
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d1da      	bne.n	800a680 <create_chain+0x68>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	e038      	b.n	800a740 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a6ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d4:	69f9      	ldr	r1, [r7, #28]
 800a6d6:	6938      	ldr	r0, [r7, #16]
 800a6d8:	f7ff fe1f 	bl	800a31a <put_fat>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a6e0:	7dfb      	ldrb	r3, [r7, #23]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d109      	bne.n	800a6fa <create_chain+0xe2>
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d006      	beq.n	800a6fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a6ec:	69fa      	ldr	r2, [r7, #28]
 800a6ee:	6839      	ldr	r1, [r7, #0]
 800a6f0:	6938      	ldr	r0, [r7, #16]
 800a6f2:	f7ff fe12 	bl	800a31a <put_fat>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a6fa:	7dfb      	ldrb	r3, [r7, #23]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d116      	bne.n	800a72e <create_chain+0x116>
		fs->last_clst = ncl;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	69fa      	ldr	r2, [r7, #28]
 800a704:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	69da      	ldr	r2, [r3, #28]
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	3b02      	subs	r3, #2
 800a710:	429a      	cmp	r2, r3
 800a712:	d804      	bhi.n	800a71e <create_chain+0x106>
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	69db      	ldr	r3, [r3, #28]
 800a718:	1e5a      	subs	r2, r3, #1
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	791b      	ldrb	r3, [r3, #4]
 800a722:	f043 0301 	orr.w	r3, r3, #1
 800a726:	b2da      	uxtb	r2, r3
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	711a      	strb	r2, [r3, #4]
 800a72c:	e007      	b.n	800a73e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a72e:	7dfb      	ldrb	r3, [r7, #23]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d102      	bne.n	800a73a <create_chain+0x122>
 800a734:	f04f 33ff 	mov.w	r3, #4294967295
 800a738:	e000      	b.n	800a73c <create_chain+0x124>
 800a73a:	2301      	movs	r3, #1
 800a73c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a73e:	69fb      	ldr	r3, [r7, #28]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3720      	adds	r7, #32
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a748:	b480      	push	{r7}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75c:	3304      	adds	r3, #4
 800a75e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	899b      	ldrh	r3, [r3, #12]
 800a764:	461a      	mov	r2, r3
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	fbb3 f3f2 	udiv	r3, r3, r2
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	8952      	ldrh	r2, [r2, #10]
 800a770:	fbb3 f3f2 	udiv	r3, r3, r2
 800a774:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	1d1a      	adds	r2, r3, #4
 800a77a:	613a      	str	r2, [r7, #16]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <clmt_clust+0x42>
 800a786:	2300      	movs	r3, #0
 800a788:	e010      	b.n	800a7ac <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d307      	bcc.n	800a7a2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	1ad3      	subs	r3, r2, r3
 800a798:	617b      	str	r3, [r7, #20]
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	3304      	adds	r3, #4
 800a79e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a7a0:	e7e9      	b.n	800a776 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a7a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	4413      	add	r3, r2
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	371c      	adds	r7, #28
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7ce:	d204      	bcs.n	800a7da <dir_sdi+0x22>
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	f003 031f 	and.w	r3, r3, #31
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d001      	beq.n	800a7de <dir_sdi+0x26>
		return FR_INT_ERR;
 800a7da:	2302      	movs	r3, #2
 800a7dc:	e071      	b.n	800a8c2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d106      	bne.n	800a7fe <dir_sdi+0x46>
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d902      	bls.n	800a7fe <dir_sdi+0x46>
		clst = fs->dirbase;
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10c      	bne.n	800a81e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	095b      	lsrs	r3, r3, #5
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	8912      	ldrh	r2, [r2, #8]
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d301      	bcc.n	800a814 <dir_sdi+0x5c>
 800a810:	2302      	movs	r3, #2
 800a812:	e056      	b.n	800a8c2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	61da      	str	r2, [r3, #28]
 800a81c:	e02d      	b.n	800a87a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	895b      	ldrh	r3, [r3, #10]
 800a822:	461a      	mov	r2, r3
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	899b      	ldrh	r3, [r3, #12]
 800a828:	fb02 f303 	mul.w	r3, r2, r3
 800a82c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a82e:	e019      	b.n	800a864 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6979      	ldr	r1, [r7, #20]
 800a834:	4618      	mov	r0, r3
 800a836:	f7ff fc9c 	bl	800a172 <get_fat>
 800a83a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a842:	d101      	bne.n	800a848 <dir_sdi+0x90>
 800a844:	2301      	movs	r3, #1
 800a846:	e03c      	b.n	800a8c2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d904      	bls.n	800a858 <dir_sdi+0xa0>
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	429a      	cmp	r2, r3
 800a856:	d301      	bcc.n	800a85c <dir_sdi+0xa4>
 800a858:	2302      	movs	r3, #2
 800a85a:	e032      	b.n	800a8c2 <dir_sdi+0x10a>
			ofs -= csz;
 800a85c:	683a      	ldr	r2, [r7, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d2e1      	bcs.n	800a830 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a86c:	6979      	ldr	r1, [r7, #20]
 800a86e:	6938      	ldr	r0, [r7, #16]
 800a870:	f7ff fc60 	bl	800a134 <clust2sect>
 800a874:	4602      	mov	r2, r0
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	69db      	ldr	r3, [r3, #28]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d101      	bne.n	800a88c <dir_sdi+0xd4>
 800a888:	2302      	movs	r3, #2
 800a88a:	e01a      	b.n	800a8c2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	69da      	ldr	r2, [r3, #28]
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	899b      	ldrh	r3, [r3, #12]
 800a894:	4619      	mov	r1, r3
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	fbb3 f3f1 	udiv	r3, r3, r1
 800a89c:	441a      	add	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	899b      	ldrh	r3, [r3, #12]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8b4:	fb00 f202 	mul.w	r2, r0, r2
 800a8b8:	1a9b      	subs	r3, r3, r2
 800a8ba:	18ca      	adds	r2, r1, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3718      	adds	r7, #24
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b086      	sub	sp, #24
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	695b      	ldr	r3, [r3, #20]
 800a8de:	3320      	adds	r3, #32
 800a8e0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	69db      	ldr	r3, [r3, #28]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d003      	beq.n	800a8f2 <dir_next+0x28>
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8f0:	d301      	bcc.n	800a8f6 <dir_next+0x2c>
 800a8f2:	2304      	movs	r3, #4
 800a8f4:	e0bb      	b.n	800aa6e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	899b      	ldrh	r3, [r3, #12]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800a902:	fb01 f202 	mul.w	r2, r1, r2
 800a906:	1a9b      	subs	r3, r3, r2
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f040 809d 	bne.w	800aa48 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10b      	bne.n	800a938 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	095b      	lsrs	r3, r3, #5
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	8912      	ldrh	r2, [r2, #8]
 800a928:	4293      	cmp	r3, r2
 800a92a:	f0c0 808d 	bcc.w	800aa48 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	61da      	str	r2, [r3, #28]
 800a934:	2304      	movs	r3, #4
 800a936:	e09a      	b.n	800aa6e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	899b      	ldrh	r3, [r3, #12]
 800a93c:	461a      	mov	r2, r3
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	fbb3 f3f2 	udiv	r3, r3, r2
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	8952      	ldrh	r2, [r2, #10]
 800a948:	3a01      	subs	r2, #1
 800a94a:	4013      	ands	r3, r2
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d17b      	bne.n	800aa48 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	4619      	mov	r1, r3
 800a958:	4610      	mov	r0, r2
 800a95a:	f7ff fc0a 	bl	800a172 <get_fat>
 800a95e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d801      	bhi.n	800a96a <dir_next+0xa0>
 800a966:	2302      	movs	r3, #2
 800a968:	e081      	b.n	800aa6e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a970:	d101      	bne.n	800a976 <dir_next+0xac>
 800a972:	2301      	movs	r3, #1
 800a974:	e07b      	b.n	800aa6e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d359      	bcc.n	800aa34 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d104      	bne.n	800a990 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	61da      	str	r2, [r3, #28]
 800a98c:	2304      	movs	r3, #4
 800a98e:	e06e      	b.n	800aa6e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	4619      	mov	r1, r3
 800a998:	4610      	mov	r0, r2
 800a99a:	f7ff fe3d 	bl	800a618 <create_chain>
 800a99e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d101      	bne.n	800a9aa <dir_next+0xe0>
 800a9a6:	2307      	movs	r3, #7
 800a9a8:	e061      	b.n	800aa6e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d101      	bne.n	800a9b4 <dir_next+0xea>
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	e05c      	b.n	800aa6e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ba:	d101      	bne.n	800a9c0 <dir_next+0xf6>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e056      	b.n	800aa6e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f7ff fad5 	bl	8009f70 <sync_window>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <dir_next+0x106>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e04e      	b.n	800aa6e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	899b      	ldrh	r3, [r3, #12]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	2100      	movs	r1, #0
 800a9de:	f7ff f8cc 	bl	8009b7a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	613b      	str	r3, [r7, #16]
 800a9e6:	6979      	ldr	r1, [r7, #20]
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f7ff fba3 	bl	800a134 <clust2sect>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	639a      	str	r2, [r3, #56]	; 0x38
 800a9f4:	e012      	b.n	800aa1c <dir_next+0x152>
						fs->wflag = 1;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f7ff fab7 	bl	8009f70 <sync_window>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <dir_next+0x142>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e030      	b.n	800aa6e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	613b      	str	r3, [r7, #16]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	639a      	str	r2, [r3, #56]	; 0x38
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	895b      	ldrh	r3, [r3, #10]
 800aa20:	461a      	mov	r2, r3
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d3e6      	bcc.n	800a9f6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	1ad2      	subs	r2, r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aa3a:	6979      	ldr	r1, [r7, #20]
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f7ff fb79 	bl	800a134 <clust2sect>
 800aa42:	4602      	mov	r2, r0
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	899b      	ldrh	r3, [r3, #12]
 800aa58:	461a      	mov	r2, r3
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa60:	fb00 f202 	mul.w	r2, r0, r2
 800aa64:	1a9b      	subs	r3, r3, r2
 800aa66:	18ca      	adds	r2, r1, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3718      	adds	r7, #24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b086      	sub	sp, #24
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aa86:	2100      	movs	r1, #0
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7ff fe95 	bl	800a7b8 <dir_sdi>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d12b      	bne.n	800aaf0 <dir_alloc+0x7a>
		n = 0;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f7ff faa8 	bl	8009ff8 <move_window>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aaac:	7dfb      	ldrb	r3, [r7, #23]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d11d      	bne.n	800aaee <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a1b      	ldr	r3, [r3, #32]
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	2be5      	cmp	r3, #229	; 0xe5
 800aaba:	d004      	beq.n	800aac6 <dir_alloc+0x50>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d107      	bne.n	800aad6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	3301      	adds	r3, #1
 800aaca:	613b      	str	r3, [r7, #16]
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d102      	bne.n	800aada <dir_alloc+0x64>
 800aad4:	e00c      	b.n	800aaf0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aad6:	2300      	movs	r3, #0
 800aad8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aada:	2101      	movs	r1, #1
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7ff fef4 	bl	800a8ca <dir_next>
 800aae2:	4603      	mov	r3, r0
 800aae4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d0d7      	beq.n	800aa9c <dir_alloc+0x26>
 800aaec:	e000      	b.n	800aaf0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aaee:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
 800aaf2:	2b04      	cmp	r3, #4
 800aaf4:	d101      	bne.n	800aafa <dir_alloc+0x84>
 800aaf6:	2307      	movs	r3, #7
 800aaf8:	75fb      	strb	r3, [r7, #23]
	return res;
 800aafa:	7dfb      	ldrb	r3, [r7, #23]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3718      	adds	r7, #24
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	331a      	adds	r3, #26
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe ff8e 	bl	8009a34 <ld_word>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d109      	bne.n	800ab38 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	3314      	adds	r3, #20
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fe ff83 	bl	8009a34 <ld_word>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	041b      	lsls	r3, r3, #16
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ab38:	68fb      	ldr	r3, [r7, #12]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b084      	sub	sp, #16
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	60f8      	str	r0, [r7, #12]
 800ab4a:	60b9      	str	r1, [r7, #8]
 800ab4c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	331a      	adds	r3, #26
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	b292      	uxth	r2, r2
 800ab56:	4611      	mov	r1, r2
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7fe ffa6 	bl	8009aaa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	2b03      	cmp	r3, #3
 800ab64:	d109      	bne.n	800ab7a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	f103 0214 	add.w	r2, r3, #20
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	0c1b      	lsrs	r3, r3, #16
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	4619      	mov	r1, r3
 800ab74:	4610      	mov	r0, r2
 800ab76:	f7fe ff98 	bl	8009aaa <st_word>
	}
}
 800ab7a:	bf00      	nop
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
	...

0800ab84 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ab84:	b590      	push	{r4, r7, lr}
 800ab86:	b087      	sub	sp, #28
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	331a      	adds	r3, #26
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fe ff4e 	bl	8009a34 <ld_word>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <cmp_lfn+0x1e>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	e059      	b.n	800ac56 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abaa:	1e5a      	subs	r2, r3, #1
 800abac:	4613      	mov	r3, r2
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	4413      	add	r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800abb8:	2301      	movs	r3, #1
 800abba:	81fb      	strh	r3, [r7, #14]
 800abbc:	2300      	movs	r3, #0
 800abbe:	613b      	str	r3, [r7, #16]
 800abc0:	e033      	b.n	800ac2a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800abc2:	4a27      	ldr	r2, [pc, #156]	; (800ac60 <cmp_lfn+0xdc>)
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	4413      	add	r3, r2
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	461a      	mov	r2, r3
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	4413      	add	r3, r2
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7fe ff2f 	bl	8009a34 <ld_word>
 800abd6:	4603      	mov	r3, r0
 800abd8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800abda:	89fb      	ldrh	r3, [r7, #14]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01a      	beq.n	800ac16 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	2bfe      	cmp	r3, #254	; 0xfe
 800abe4:	d812      	bhi.n	800ac0c <cmp_lfn+0x88>
 800abe6:	89bb      	ldrh	r3, [r7, #12]
 800abe8:	4618      	mov	r0, r3
 800abea:	f001 ff85 	bl	800caf8 <ff_wtoupper>
 800abee:	4603      	mov	r3, r0
 800abf0:	461c      	mov	r4, r3
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	1c5a      	adds	r2, r3, #1
 800abf6:	617a      	str	r2, [r7, #20]
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	4413      	add	r3, r2
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f001 ff79 	bl	800caf8 <ff_wtoupper>
 800ac06:	4603      	mov	r3, r0
 800ac08:	429c      	cmp	r4, r3
 800ac0a:	d001      	beq.n	800ac10 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	e022      	b.n	800ac56 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ac10:	89bb      	ldrh	r3, [r7, #12]
 800ac12:	81fb      	strh	r3, [r7, #14]
 800ac14:	e006      	b.n	800ac24 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ac16:	89bb      	ldrh	r3, [r7, #12]
 800ac18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d001      	beq.n	800ac24 <cmp_lfn+0xa0>
 800ac20:	2300      	movs	r3, #0
 800ac22:	e018      	b.n	800ac56 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	3301      	adds	r3, #1
 800ac28:	613b      	str	r3, [r7, #16]
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	2b0c      	cmp	r3, #12
 800ac2e:	d9c8      	bls.n	800abc2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00b      	beq.n	800ac54 <cmp_lfn+0xd0>
 800ac3c:	89fb      	ldrh	r3, [r7, #14]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d008      	beq.n	800ac54 <cmp_lfn+0xd0>
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	005b      	lsls	r3, r3, #1
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	4413      	add	r3, r2
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d001      	beq.n	800ac54 <cmp_lfn+0xd0>
 800ac50:	2300      	movs	r3, #0
 800ac52:	e000      	b.n	800ac56 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ac54:	2301      	movs	r3, #1
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	371c      	adds	r7, #28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd90      	pop	{r4, r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	08014598 	.word	0x08014598

0800ac64 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	4611      	mov	r1, r2
 800ac70:	461a      	mov	r2, r3
 800ac72:	460b      	mov	r3, r1
 800ac74:	71fb      	strb	r3, [r7, #7]
 800ac76:	4613      	mov	r3, r2
 800ac78:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	330d      	adds	r3, #13
 800ac7e:	79ba      	ldrb	r2, [r7, #6]
 800ac80:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	330b      	adds	r3, #11
 800ac86:	220f      	movs	r2, #15
 800ac88:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	330c      	adds	r3, #12
 800ac8e:	2200      	movs	r2, #0
 800ac90:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	331a      	adds	r3, #26
 800ac96:	2100      	movs	r1, #0
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fe ff06 	bl	8009aaa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ac9e:	79fb      	ldrb	r3, [r7, #7]
 800aca0:	1e5a      	subs	r2, r3, #1
 800aca2:	4613      	mov	r3, r2
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	4413      	add	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	4413      	add	r3, r2
 800acac:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	82fb      	strh	r3, [r7, #22]
 800acb2:	2300      	movs	r3, #0
 800acb4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800acb6:	8afb      	ldrh	r3, [r7, #22]
 800acb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d007      	beq.n	800acd0 <put_lfn+0x6c>
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	1c5a      	adds	r2, r3, #1
 800acc4:	61fa      	str	r2, [r7, #28]
 800acc6:	005b      	lsls	r3, r3, #1
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	4413      	add	r3, r2
 800accc:	881b      	ldrh	r3, [r3, #0]
 800acce:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800acd0:	4a17      	ldr	r2, [pc, #92]	; (800ad30 <put_lfn+0xcc>)
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	4413      	add	r3, r2
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	461a      	mov	r2, r3
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	4413      	add	r3, r2
 800acde:	8afa      	ldrh	r2, [r7, #22]
 800ace0:	4611      	mov	r1, r2
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe fee1 	bl	8009aaa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ace8:	8afb      	ldrh	r3, [r7, #22]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d102      	bne.n	800acf4 <put_lfn+0x90>
 800acee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acf2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	3301      	adds	r3, #1
 800acf8:	61bb      	str	r3, [r7, #24]
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	2b0c      	cmp	r3, #12
 800acfe:	d9da      	bls.n	800acb6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ad00:	8afb      	ldrh	r3, [r7, #22]
 800ad02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d006      	beq.n	800ad18 <put_lfn+0xb4>
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	005b      	lsls	r3, r3, #1
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	4413      	add	r3, r2
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d103      	bne.n	800ad20 <put_lfn+0xbc>
 800ad18:	79fb      	ldrb	r3, [r7, #7]
 800ad1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad1e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	79fa      	ldrb	r2, [r7, #7]
 800ad24:	701a      	strb	r2, [r3, #0]
}
 800ad26:	bf00      	nop
 800ad28:	3720      	adds	r7, #32
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	08014598 	.word	0x08014598

0800ad34 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08c      	sub	sp, #48	; 0x30
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ad42:	220b      	movs	r2, #11
 800ad44:	68b9      	ldr	r1, [r7, #8]
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7fe fef6 	bl	8009b38 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2b05      	cmp	r3, #5
 800ad50:	d92b      	bls.n	800adaa <gen_numname+0x76>
		sr = seq;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ad56:	e022      	b.n	800ad9e <gen_numname+0x6a>
			wc = *lfn++;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	1c9a      	adds	r2, r3, #2
 800ad5c:	607a      	str	r2, [r7, #4]
 800ad5e:	881b      	ldrh	r3, [r3, #0]
 800ad60:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ad62:	2300      	movs	r3, #0
 800ad64:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad66:	e017      	b.n	800ad98 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	005a      	lsls	r2, r3, #1
 800ad6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	4413      	add	r3, r2
 800ad74:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ad76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad78:	085b      	lsrs	r3, r3, #1
 800ad7a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d005      	beq.n	800ad92 <gen_numname+0x5e>
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ad8c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ad90:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ad92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad94:	3301      	adds	r3, #1
 800ad96:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	2b0f      	cmp	r3, #15
 800ad9c:	d9e4      	bls.n	800ad68 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	881b      	ldrh	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1d8      	bne.n	800ad58 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800adaa:	2307      	movs	r3, #7
 800adac:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	f003 030f 	and.w	r3, r3, #15
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	3330      	adds	r3, #48	; 0x30
 800adba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800adbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adc2:	2b39      	cmp	r3, #57	; 0x39
 800adc4:	d904      	bls.n	800add0 <gen_numname+0x9c>
 800adc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adca:	3307      	adds	r3, #7
 800adcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800add0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add2:	1e5a      	subs	r2, r3, #1
 800add4:	62ba      	str	r2, [r7, #40]	; 0x28
 800add6:	3330      	adds	r3, #48	; 0x30
 800add8:	443b      	add	r3, r7
 800adda:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800adde:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	091b      	lsrs	r3, r3, #4
 800ade6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1df      	bne.n	800adae <gen_numname+0x7a>
	ns[i] = '~';
 800adee:	f107 0214 	add.w	r2, r7, #20
 800adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf4:	4413      	add	r3, r2
 800adf6:	227e      	movs	r2, #126	; 0x7e
 800adf8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800adfa:	2300      	movs	r3, #0
 800adfc:	627b      	str	r3, [r7, #36]	; 0x24
 800adfe:	e002      	b.n	800ae06 <gen_numname+0xd2>
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	3301      	adds	r3, #1
 800ae04:	627b      	str	r3, [r7, #36]	; 0x24
 800ae06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d205      	bcs.n	800ae1a <gen_numname+0xe6>
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae12:	4413      	add	r3, r2
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	2b20      	cmp	r3, #32
 800ae18:	d1f2      	bne.n	800ae00 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	2b07      	cmp	r3, #7
 800ae1e:	d807      	bhi.n	800ae30 <gen_numname+0xfc>
 800ae20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae22:	1c5a      	adds	r2, r3, #1
 800ae24:	62ba      	str	r2, [r7, #40]	; 0x28
 800ae26:	3330      	adds	r3, #48	; 0x30
 800ae28:	443b      	add	r3, r7
 800ae2a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ae2e:	e000      	b.n	800ae32 <gen_numname+0xfe>
 800ae30:	2120      	movs	r1, #32
 800ae32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae34:	1c5a      	adds	r2, r3, #1
 800ae36:	627a      	str	r2, [r7, #36]	; 0x24
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	460a      	mov	r2, r1
 800ae3e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	2b07      	cmp	r3, #7
 800ae44:	d9e9      	bls.n	800ae1a <gen_numname+0xe6>
}
 800ae46:	bf00      	nop
 800ae48:	bf00      	nop
 800ae4a:	3730      	adds	r7, #48	; 0x30
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ae5c:	230b      	movs	r3, #11
 800ae5e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	b2da      	uxtb	r2, r3
 800ae64:	0852      	lsrs	r2, r2, #1
 800ae66:	01db      	lsls	r3, r3, #7
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	1c59      	adds	r1, r3, #1
 800ae70:	6079      	str	r1, [r7, #4]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	4413      	add	r3, r2
 800ae76:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	60bb      	str	r3, [r7, #8]
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1ed      	bne.n	800ae60 <sum_sfn+0x10>
	return sum;
 800ae84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b086      	sub	sp, #24
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aea0:	2100      	movs	r1, #0
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7ff fc88 	bl	800a7b8 <dir_sdi>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aeac:	7dfb      	ldrb	r3, [r7, #23]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <dir_find+0x24>
 800aeb2:	7dfb      	ldrb	r3, [r7, #23]
 800aeb4:	e0a9      	b.n	800b00a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aeb6:	23ff      	movs	r3, #255	; 0xff
 800aeb8:	753b      	strb	r3, [r7, #20]
 800aeba:	7d3b      	ldrb	r3, [r7, #20]
 800aebc:	757b      	strb	r3, [r7, #21]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f04f 32ff 	mov.w	r2, #4294967295
 800aec4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	69db      	ldr	r3, [r3, #28]
 800aeca:	4619      	mov	r1, r3
 800aecc:	6938      	ldr	r0, [r7, #16]
 800aece:	f7ff f893 	bl	8009ff8 <move_window>
 800aed2:	4603      	mov	r3, r0
 800aed4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f040 8090 	bne.w	800affe <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a1b      	ldr	r3, [r3, #32]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aee6:	7dbb      	ldrb	r3, [r7, #22]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d102      	bne.n	800aef2 <dir_find+0x60>
 800aeec:	2304      	movs	r3, #4
 800aeee:	75fb      	strb	r3, [r7, #23]
 800aef0:	e08a      	b.n	800b008 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	330b      	adds	r3, #11
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aefe:	73fb      	strb	r3, [r7, #15]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	7bfa      	ldrb	r2, [r7, #15]
 800af04:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800af06:	7dbb      	ldrb	r3, [r7, #22]
 800af08:	2be5      	cmp	r3, #229	; 0xe5
 800af0a:	d007      	beq.n	800af1c <dir_find+0x8a>
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	f003 0308 	and.w	r3, r3, #8
 800af12:	2b00      	cmp	r3, #0
 800af14:	d009      	beq.n	800af2a <dir_find+0x98>
 800af16:	7bfb      	ldrb	r3, [r7, #15]
 800af18:	2b0f      	cmp	r3, #15
 800af1a:	d006      	beq.n	800af2a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800af1c:	23ff      	movs	r3, #255	; 0xff
 800af1e:	757b      	strb	r3, [r7, #21]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f04f 32ff 	mov.w	r2, #4294967295
 800af26:	631a      	str	r2, [r3, #48]	; 0x30
 800af28:	e05e      	b.n	800afe8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
 800af2c:	2b0f      	cmp	r3, #15
 800af2e:	d136      	bne.n	800af9e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800af36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d154      	bne.n	800afe8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800af3e:	7dbb      	ldrb	r3, [r7, #22]
 800af40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00d      	beq.n	800af64 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a1b      	ldr	r3, [r3, #32]
 800af4c:	7b5b      	ldrb	r3, [r3, #13]
 800af4e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800af50:	7dbb      	ldrb	r3, [r7, #22]
 800af52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af56:	75bb      	strb	r3, [r7, #22]
 800af58:	7dbb      	ldrb	r3, [r7, #22]
 800af5a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	695a      	ldr	r2, [r3, #20]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800af64:	7dba      	ldrb	r2, [r7, #22]
 800af66:	7d7b      	ldrb	r3, [r7, #21]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d115      	bne.n	800af98 <dir_find+0x106>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a1b      	ldr	r3, [r3, #32]
 800af70:	330d      	adds	r3, #13
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	7d3a      	ldrb	r2, [r7, #20]
 800af76:	429a      	cmp	r2, r3
 800af78:	d10e      	bne.n	800af98 <dir_find+0x106>
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	691a      	ldr	r2, [r3, #16]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a1b      	ldr	r3, [r3, #32]
 800af82:	4619      	mov	r1, r3
 800af84:	4610      	mov	r0, r2
 800af86:	f7ff fdfd 	bl	800ab84 <cmp_lfn>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d003      	beq.n	800af98 <dir_find+0x106>
 800af90:	7d7b      	ldrb	r3, [r7, #21]
 800af92:	3b01      	subs	r3, #1
 800af94:	b2db      	uxtb	r3, r3
 800af96:	e000      	b.n	800af9a <dir_find+0x108>
 800af98:	23ff      	movs	r3, #255	; 0xff
 800af9a:	757b      	strb	r3, [r7, #21]
 800af9c:	e024      	b.n	800afe8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800af9e:	7d7b      	ldrb	r3, [r7, #21]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d109      	bne.n	800afb8 <dir_find+0x126>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a1b      	ldr	r3, [r3, #32]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7ff ff51 	bl	800ae50 <sum_sfn>
 800afae:	4603      	mov	r3, r0
 800afb0:	461a      	mov	r2, r3
 800afb2:	7d3b      	ldrb	r3, [r7, #20]
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d024      	beq.n	800b002 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afbe:	f003 0301 	and.w	r3, r3, #1
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10a      	bne.n	800afdc <dir_find+0x14a>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a18      	ldr	r0, [r3, #32]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	3324      	adds	r3, #36	; 0x24
 800afce:	220b      	movs	r2, #11
 800afd0:	4619      	mov	r1, r3
 800afd2:	f7fe fded 	bl	8009bb0 <mem_cmp>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d014      	beq.n	800b006 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800afdc:	23ff      	movs	r3, #255	; 0xff
 800afde:	757b      	strb	r3, [r7, #21]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f04f 32ff 	mov.w	r2, #4294967295
 800afe6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800afe8:	2100      	movs	r1, #0
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7ff fc6d 	bl	800a8ca <dir_next>
 800aff0:	4603      	mov	r3, r0
 800aff2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f43f af65 	beq.w	800aec6 <dir_find+0x34>
 800affc:	e004      	b.n	800b008 <dir_find+0x176>
		if (res != FR_OK) break;
 800affe:	bf00      	nop
 800b000:	e002      	b.n	800b008 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b002:	bf00      	nop
 800b004:	e000      	b.n	800b008 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b006:	bf00      	nop

	return res;
 800b008:	7dfb      	ldrb	r3, [r7, #23]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3718      	adds	r7, #24
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
	...

0800b014 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b08c      	sub	sp, #48	; 0x30
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b028:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d001      	beq.n	800b034 <dir_register+0x20>
 800b030:	2306      	movs	r3, #6
 800b032:	e0e0      	b.n	800b1f6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b034:	2300      	movs	r3, #0
 800b036:	627b      	str	r3, [r7, #36]	; 0x24
 800b038:	e002      	b.n	800b040 <dir_register+0x2c>
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	3301      	adds	r3, #1
 800b03e:	627b      	str	r3, [r7, #36]	; 0x24
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	691a      	ldr	r2, [r3, #16]
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	005b      	lsls	r3, r3, #1
 800b048:	4413      	add	r3, r2
 800b04a:	881b      	ldrh	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1f4      	bne.n	800b03a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b056:	f107 030c 	add.w	r3, r7, #12
 800b05a:	220c      	movs	r2, #12
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fe fd6b 	bl	8009b38 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b062:	7dfb      	ldrb	r3, [r7, #23]
 800b064:	f003 0301 	and.w	r3, r3, #1
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d032      	beq.n	800b0d2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2240      	movs	r2, #64	; 0x40
 800b070:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b074:	2301      	movs	r3, #1
 800b076:	62bb      	str	r3, [r7, #40]	; 0x28
 800b078:	e016      	b.n	800b0a8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	691a      	ldr	r2, [r3, #16]
 800b084:	f107 010c 	add.w	r1, r7, #12
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	f7ff fe53 	bl	800ad34 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7ff feff 	bl	800ae92 <dir_find>
 800b094:	4603      	mov	r3, r0
 800b096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b09a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d106      	bne.n	800b0b0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0aa:	2b63      	cmp	r3, #99	; 0x63
 800b0ac:	d9e5      	bls.n	800b07a <dir_register+0x66>
 800b0ae:	e000      	b.n	800b0b2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b0b0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b4:	2b64      	cmp	r3, #100	; 0x64
 800b0b6:	d101      	bne.n	800b0bc <dir_register+0xa8>
 800b0b8:	2307      	movs	r3, #7
 800b0ba:	e09c      	b.n	800b1f6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b0bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0c0:	2b04      	cmp	r3, #4
 800b0c2:	d002      	beq.n	800b0ca <dir_register+0xb6>
 800b0c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0c8:	e095      	b.n	800b1f6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b0ca:	7dfa      	ldrb	r2, [r7, #23]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b0d2:	7dfb      	ldrb	r3, [r7, #23]
 800b0d4:	f003 0302 	and.w	r3, r3, #2
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d007      	beq.n	800b0ec <dir_register+0xd8>
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	330c      	adds	r3, #12
 800b0e0:	4a47      	ldr	r2, [pc, #284]	; (800b200 <dir_register+0x1ec>)
 800b0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e6:	089b      	lsrs	r3, r3, #2
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	e000      	b.n	800b0ee <dir_register+0xda>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b0f0:	6a39      	ldr	r1, [r7, #32]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7ff fcbf 	bl	800aa76 <dir_alloc>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b0fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b102:	2b00      	cmp	r3, #0
 800b104:	d148      	bne.n	800b198 <dir_register+0x184>
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	3b01      	subs	r3, #1
 800b10a:	623b      	str	r3, [r7, #32]
 800b10c:	6a3b      	ldr	r3, [r7, #32]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d042      	beq.n	800b198 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	695a      	ldr	r2, [r3, #20]
 800b116:	6a3b      	ldr	r3, [r7, #32]
 800b118:	015b      	lsls	r3, r3, #5
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	4619      	mov	r1, r3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7ff fb4a 	bl	800a7b8 <dir_sdi>
 800b124:	4603      	mov	r3, r0
 800b126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b12a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d132      	bne.n	800b198 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	3324      	adds	r3, #36	; 0x24
 800b136:	4618      	mov	r0, r3
 800b138:	f7ff fe8a 	bl	800ae50 <sum_sfn>
 800b13c:	4603      	mov	r3, r0
 800b13e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	69db      	ldr	r3, [r3, #28]
 800b144:	4619      	mov	r1, r3
 800b146:	69f8      	ldr	r0, [r7, #28]
 800b148:	f7fe ff56 	bl	8009ff8 <move_window>
 800b14c:	4603      	mov	r3, r0
 800b14e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b156:	2b00      	cmp	r3, #0
 800b158:	d11d      	bne.n	800b196 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	6918      	ldr	r0, [r3, #16]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a19      	ldr	r1, [r3, #32]
 800b162:	6a3b      	ldr	r3, [r7, #32]
 800b164:	b2da      	uxtb	r2, r3
 800b166:	7efb      	ldrb	r3, [r7, #27]
 800b168:	f7ff fd7c 	bl	800ac64 <put_lfn>
				fs->wflag = 1;
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	2201      	movs	r2, #1
 800b170:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b172:	2100      	movs	r1, #0
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f7ff fba8 	bl	800a8ca <dir_next>
 800b17a:	4603      	mov	r3, r0
 800b17c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b180:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b184:	2b00      	cmp	r3, #0
 800b186:	d107      	bne.n	800b198 <dir_register+0x184>
 800b188:	6a3b      	ldr	r3, [r7, #32]
 800b18a:	3b01      	subs	r3, #1
 800b18c:	623b      	str	r3, [r7, #32]
 800b18e:	6a3b      	ldr	r3, [r7, #32]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1d5      	bne.n	800b140 <dir_register+0x12c>
 800b194:	e000      	b.n	800b198 <dir_register+0x184>
				if (res != FR_OK) break;
 800b196:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b198:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d128      	bne.n	800b1f2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	69db      	ldr	r3, [r3, #28]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	69f8      	ldr	r0, [r7, #28]
 800b1a8:	f7fe ff26 	bl	8009ff8 <move_window>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b1b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d11b      	bne.n	800b1f2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a1b      	ldr	r3, [r3, #32]
 800b1be:	2220      	movs	r2, #32
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7fe fcd9 	bl	8009b7a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a18      	ldr	r0, [r3, #32]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	3324      	adds	r3, #36	; 0x24
 800b1d0:	220b      	movs	r2, #11
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	f7fe fcb0 	bl	8009b38 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a1b      	ldr	r3, [r3, #32]
 800b1e2:	330c      	adds	r3, #12
 800b1e4:	f002 0218 	and.w	r2, r2, #24
 800b1e8:	b2d2      	uxtb	r2, r2
 800b1ea:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b1f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3730      	adds	r7, #48	; 0x30
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	4ec4ec4f 	.word	0x4ec4ec4f

0800b204 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b08a      	sub	sp, #40	; 0x28
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	613b      	str	r3, [r7, #16]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	60fb      	str	r3, [r7, #12]
 800b21c:	2300      	movs	r3, #0
 800b21e:	617b      	str	r3, [r7, #20]
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	61ba      	str	r2, [r7, #24]
 800b22a:	693a      	ldr	r2, [r7, #16]
 800b22c:	4413      	add	r3, r2
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b234:	2b1f      	cmp	r3, #31
 800b236:	d940      	bls.n	800b2ba <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b23a:	2b2f      	cmp	r3, #47	; 0x2f
 800b23c:	d006      	beq.n	800b24c <create_name+0x48>
 800b23e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b240:	2b5c      	cmp	r3, #92	; 0x5c
 800b242:	d110      	bne.n	800b266 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b244:	e002      	b.n	800b24c <create_name+0x48>
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	3301      	adds	r3, #1
 800b24a:	61bb      	str	r3, [r7, #24]
 800b24c:	693a      	ldr	r2, [r7, #16]
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	4413      	add	r3, r2
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	2b2f      	cmp	r3, #47	; 0x2f
 800b256:	d0f6      	beq.n	800b246 <create_name+0x42>
 800b258:	693a      	ldr	r2, [r7, #16]
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	4413      	add	r3, r2
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	2b5c      	cmp	r3, #92	; 0x5c
 800b262:	d0f0      	beq.n	800b246 <create_name+0x42>
			break;
 800b264:	e02a      	b.n	800b2bc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	2bfe      	cmp	r3, #254	; 0xfe
 800b26a:	d901      	bls.n	800b270 <create_name+0x6c>
 800b26c:	2306      	movs	r3, #6
 800b26e:	e17d      	b.n	800b56c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b272:	b2db      	uxtb	r3, r3
 800b274:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b278:	2101      	movs	r1, #1
 800b27a:	4618      	mov	r0, r3
 800b27c:	f001 fc00 	bl	800ca80 <ff_convert>
 800b280:	4603      	mov	r3, r0
 800b282:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b286:	2b00      	cmp	r3, #0
 800b288:	d101      	bne.n	800b28e <create_name+0x8a>
 800b28a:	2306      	movs	r3, #6
 800b28c:	e16e      	b.n	800b56c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b28e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b290:	2b7f      	cmp	r3, #127	; 0x7f
 800b292:	d809      	bhi.n	800b2a8 <create_name+0xa4>
 800b294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b296:	4619      	mov	r1, r3
 800b298:	488d      	ldr	r0, [pc, #564]	; (800b4d0 <create_name+0x2cc>)
 800b29a:	f7fe fcb0 	bl	8009bfe <chk_chr>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d001      	beq.n	800b2a8 <create_name+0xa4>
 800b2a4:	2306      	movs	r3, #6
 800b2a6:	e161      	b.n	800b56c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	1c5a      	adds	r2, r3, #1
 800b2ac:	617a      	str	r2, [r7, #20]
 800b2ae:	005b      	lsls	r3, r3, #1
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b2b6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b2b8:	e7b4      	b.n	800b224 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b2ba:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	441a      	add	r2, r3
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b2c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2c8:	2b1f      	cmp	r3, #31
 800b2ca:	d801      	bhi.n	800b2d0 <create_name+0xcc>
 800b2cc:	2304      	movs	r3, #4
 800b2ce:	e000      	b.n	800b2d2 <create_name+0xce>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b2d6:	e011      	b.n	800b2fc <create_name+0xf8>
		w = lfn[di - 1];
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	005b      	lsls	r3, r3, #1
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	881b      	ldrh	r3, [r3, #0]
 800b2e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b2ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2ec:	2b20      	cmp	r3, #32
 800b2ee:	d002      	beq.n	800b2f6 <create_name+0xf2>
 800b2f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2f2:	2b2e      	cmp	r3, #46	; 0x2e
 800b2f4:	d106      	bne.n	800b304 <create_name+0x100>
		di--;
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1ea      	bne.n	800b2d8 <create_name+0xd4>
 800b302:	e000      	b.n	800b306 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b304:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	005b      	lsls	r3, r3, #1
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	4413      	add	r3, r2
 800b30e:	2200      	movs	r2, #0
 800b310:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d101      	bne.n	800b31c <create_name+0x118>
 800b318:	2306      	movs	r3, #6
 800b31a:	e127      	b.n	800b56c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3324      	adds	r3, #36	; 0x24
 800b320:	220b      	movs	r2, #11
 800b322:	2120      	movs	r1, #32
 800b324:	4618      	mov	r0, r3
 800b326:	f7fe fc28 	bl	8009b7a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b32a:	2300      	movs	r3, #0
 800b32c:	61bb      	str	r3, [r7, #24]
 800b32e:	e002      	b.n	800b336 <create_name+0x132>
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	3301      	adds	r3, #1
 800b334:	61bb      	str	r3, [r7, #24]
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	005b      	lsls	r3, r3, #1
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	4413      	add	r3, r2
 800b33e:	881b      	ldrh	r3, [r3, #0]
 800b340:	2b20      	cmp	r3, #32
 800b342:	d0f5      	beq.n	800b330 <create_name+0x12c>
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	4413      	add	r3, r2
 800b34c:	881b      	ldrh	r3, [r3, #0]
 800b34e:	2b2e      	cmp	r3, #46	; 0x2e
 800b350:	d0ee      	beq.n	800b330 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d009      	beq.n	800b36c <create_name+0x168>
 800b358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b35c:	f043 0303 	orr.w	r3, r3, #3
 800b360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b364:	e002      	b.n	800b36c <create_name+0x168>
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	3b01      	subs	r3, #1
 800b36a:	617b      	str	r3, [r7, #20]
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d009      	beq.n	800b386 <create_name+0x182>
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b378:	3b01      	subs	r3, #1
 800b37a:	005b      	lsls	r3, r3, #1
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	4413      	add	r3, r2
 800b380:	881b      	ldrh	r3, [r3, #0]
 800b382:	2b2e      	cmp	r3, #46	; 0x2e
 800b384:	d1ef      	bne.n	800b366 <create_name+0x162>

	i = b = 0; ni = 8;
 800b386:	2300      	movs	r3, #0
 800b388:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b38c:	2300      	movs	r3, #0
 800b38e:	623b      	str	r3, [r7, #32]
 800b390:	2308      	movs	r3, #8
 800b392:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	1c5a      	adds	r2, r3, #1
 800b398:	61ba      	str	r2, [r7, #24]
 800b39a:	005b      	lsls	r3, r3, #1
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	4413      	add	r3, r2
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b3a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f000 8090 	beq.w	800b4cc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b3ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ae:	2b20      	cmp	r3, #32
 800b3b0:	d006      	beq.n	800b3c0 <create_name+0x1bc>
 800b3b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3b4:	2b2e      	cmp	r3, #46	; 0x2e
 800b3b6:	d10a      	bne.n	800b3ce <create_name+0x1ca>
 800b3b8:	69ba      	ldr	r2, [r7, #24]
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d006      	beq.n	800b3ce <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3c4:	f043 0303 	orr.w	r3, r3, #3
 800b3c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3cc:	e07d      	b.n	800b4ca <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b3ce:	6a3a      	ldr	r2, [r7, #32]
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d203      	bcs.n	800b3de <create_name+0x1da>
 800b3d6:	69ba      	ldr	r2, [r7, #24]
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d123      	bne.n	800b426 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	2b0b      	cmp	r3, #11
 800b3e2:	d106      	bne.n	800b3f2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3e8:	f043 0303 	orr.w	r3, r3, #3
 800b3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3f0:	e075      	b.n	800b4de <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b3f2:	69ba      	ldr	r2, [r7, #24]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d005      	beq.n	800b406 <create_name+0x202>
 800b3fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3fe:	f043 0303 	orr.w	r3, r3, #3
 800b402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b406:	69ba      	ldr	r2, [r7, #24]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d866      	bhi.n	800b4dc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	61bb      	str	r3, [r7, #24]
 800b412:	2308      	movs	r3, #8
 800b414:	623b      	str	r3, [r7, #32]
 800b416:	230b      	movs	r3, #11
 800b418:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b41a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b424:	e051      	b.n	800b4ca <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b428:	2b7f      	cmp	r3, #127	; 0x7f
 800b42a:	d914      	bls.n	800b456 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b42c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b42e:	2100      	movs	r1, #0
 800b430:	4618      	mov	r0, r3
 800b432:	f001 fb25 	bl	800ca80 <ff_convert>
 800b436:	4603      	mov	r3, r0
 800b438:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b43a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d004      	beq.n	800b44a <create_name+0x246>
 800b440:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b442:	3b80      	subs	r3, #128	; 0x80
 800b444:	4a23      	ldr	r2, [pc, #140]	; (800b4d4 <create_name+0x2d0>)
 800b446:	5cd3      	ldrb	r3, [r2, r3]
 800b448:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b44a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b44e:	f043 0302 	orr.w	r3, r3, #2
 800b452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b456:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d007      	beq.n	800b46c <create_name+0x268>
 800b45c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b45e:	4619      	mov	r1, r3
 800b460:	481d      	ldr	r0, [pc, #116]	; (800b4d8 <create_name+0x2d4>)
 800b462:	f7fe fbcc 	bl	8009bfe <chk_chr>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d008      	beq.n	800b47e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b46c:	235f      	movs	r3, #95	; 0x5f
 800b46e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b474:	f043 0303 	orr.w	r3, r3, #3
 800b478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b47c:	e01b      	b.n	800b4b6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b47e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b480:	2b40      	cmp	r3, #64	; 0x40
 800b482:	d909      	bls.n	800b498 <create_name+0x294>
 800b484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b486:	2b5a      	cmp	r3, #90	; 0x5a
 800b488:	d806      	bhi.n	800b498 <create_name+0x294>
					b |= 2;
 800b48a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b48e:	f043 0302 	orr.w	r3, r3, #2
 800b492:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b496:	e00e      	b.n	800b4b6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b498:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b49a:	2b60      	cmp	r3, #96	; 0x60
 800b49c:	d90b      	bls.n	800b4b6 <create_name+0x2b2>
 800b49e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4a0:	2b7a      	cmp	r3, #122	; 0x7a
 800b4a2:	d808      	bhi.n	800b4b6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b4a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4a8:	f043 0301 	orr.w	r3, r3, #1
 800b4ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b4b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4b2:	3b20      	subs	r3, #32
 800b4b4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	1c5a      	adds	r2, r3, #1
 800b4ba:	623a      	str	r2, [r7, #32]
 800b4bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b4be:	b2d1      	uxtb	r1, r2
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	460a      	mov	r2, r1
 800b4c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b4ca:	e763      	b.n	800b394 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b4cc:	bf00      	nop
 800b4ce:	e006      	b.n	800b4de <create_name+0x2da>
 800b4d0:	0801444c 	.word	0x0801444c
 800b4d4:	08014518 	.word	0x08014518
 800b4d8:	08014458 	.word	0x08014458
			if (si > di) break;			/* No extension */
 800b4dc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b4e4:	2be5      	cmp	r3, #229	; 0xe5
 800b4e6:	d103      	bne.n	800b4f0 <create_name+0x2ec>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2205      	movs	r2, #5
 800b4ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	2b08      	cmp	r3, #8
 800b4f4:	d104      	bne.n	800b500 <create_name+0x2fc>
 800b4f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b500:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b504:	f003 030c 	and.w	r3, r3, #12
 800b508:	2b0c      	cmp	r3, #12
 800b50a:	d005      	beq.n	800b518 <create_name+0x314>
 800b50c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b510:	f003 0303 	and.w	r3, r3, #3
 800b514:	2b03      	cmp	r3, #3
 800b516:	d105      	bne.n	800b524 <create_name+0x320>
 800b518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b51c:	f043 0302 	orr.w	r3, r3, #2
 800b520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b528:	f003 0302 	and.w	r3, r3, #2
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d117      	bne.n	800b560 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b530:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b534:	f003 0303 	and.w	r3, r3, #3
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d105      	bne.n	800b548 <create_name+0x344>
 800b53c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b540:	f043 0310 	orr.w	r3, r3, #16
 800b544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b548:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b54c:	f003 030c 	and.w	r3, r3, #12
 800b550:	2b04      	cmp	r3, #4
 800b552:	d105      	bne.n	800b560 <create_name+0x35c>
 800b554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b558:	f043 0308 	orr.w	r3, r3, #8
 800b55c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b566:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b56a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3728      	adds	r7, #40	; 0x28
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b588:	e002      	b.n	800b590 <follow_path+0x1c>
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	3301      	adds	r3, #1
 800b58e:	603b      	str	r3, [r7, #0]
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	2b2f      	cmp	r3, #47	; 0x2f
 800b596:	d0f8      	beq.n	800b58a <follow_path+0x16>
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	2b5c      	cmp	r3, #92	; 0x5c
 800b59e:	d0f4      	beq.n	800b58a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	2b1f      	cmp	r3, #31
 800b5ac:	d80a      	bhi.n	800b5c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2280      	movs	r2, #128	; 0x80
 800b5b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff f8fd 	bl	800a7b8 <dir_sdi>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	75fb      	strb	r3, [r7, #23]
 800b5c2:	e048      	b.n	800b656 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b5c4:	463b      	mov	r3, r7
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f7ff fe1b 	bl	800b204 <create_name>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b5d2:	7dfb      	ldrb	r3, [r7, #23]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d139      	bne.n	800b64c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7ff fc5a 	bl	800ae92 <dir_find>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b5e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b5ea:	7dfb      	ldrb	r3, [r7, #23]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00a      	beq.n	800b606 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b5f0:	7dfb      	ldrb	r3, [r7, #23]
 800b5f2:	2b04      	cmp	r3, #4
 800b5f4:	d12c      	bne.n	800b650 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b5f6:	7afb      	ldrb	r3, [r7, #11]
 800b5f8:	f003 0304 	and.w	r3, r3, #4
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d127      	bne.n	800b650 <follow_path+0xdc>
 800b600:	2305      	movs	r3, #5
 800b602:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b604:	e024      	b.n	800b650 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b606:	7afb      	ldrb	r3, [r7, #11]
 800b608:	f003 0304 	and.w	r3, r3, #4
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d121      	bne.n	800b654 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	799b      	ldrb	r3, [r3, #6]
 800b614:	f003 0310 	and.w	r3, r3, #16
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d102      	bne.n	800b622 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b61c:	2305      	movs	r3, #5
 800b61e:	75fb      	strb	r3, [r7, #23]
 800b620:	e019      	b.n	800b656 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	8992      	ldrh	r2, [r2, #12]
 800b630:	fbb3 f0f2 	udiv	r0, r3, r2
 800b634:	fb00 f202 	mul.w	r2, r0, r2
 800b638:	1a9b      	subs	r3, r3, r2
 800b63a:	440b      	add	r3, r1
 800b63c:	4619      	mov	r1, r3
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f7ff fa60 	bl	800ab04 <ld_clust>
 800b644:	4602      	mov	r2, r0
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b64a:	e7bb      	b.n	800b5c4 <follow_path+0x50>
			if (res != FR_OK) break;
 800b64c:	bf00      	nop
 800b64e:	e002      	b.n	800b656 <follow_path+0xe2>
				break;
 800b650:	bf00      	nop
 800b652:	e000      	b.n	800b656 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b654:	bf00      	nop
			}
		}
	}

	return res;
 800b656:	7dfb      	ldrb	r3, [r7, #23]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3718      	adds	r7, #24
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b660:	b480      	push	{r7}
 800b662:	b087      	sub	sp, #28
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b668:	f04f 33ff 	mov.w	r3, #4294967295
 800b66c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d031      	beq.n	800b6da <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	617b      	str	r3, [r7, #20]
 800b67c:	e002      	b.n	800b684 <get_ldnumber+0x24>
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	3301      	adds	r3, #1
 800b682:	617b      	str	r3, [r7, #20]
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	2b1f      	cmp	r3, #31
 800b68a:	d903      	bls.n	800b694 <get_ldnumber+0x34>
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b3a      	cmp	r3, #58	; 0x3a
 800b692:	d1f4      	bne.n	800b67e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	2b3a      	cmp	r3, #58	; 0x3a
 800b69a:	d11c      	bne.n	800b6d6 <get_ldnumber+0x76>
			tp = *path;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	1c5a      	adds	r2, r3, #1
 800b6a6:	60fa      	str	r2, [r7, #12]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	3b30      	subs	r3, #48	; 0x30
 800b6ac:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	2b09      	cmp	r3, #9
 800b6b2:	d80e      	bhi.n	800b6d2 <get_ldnumber+0x72>
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d10a      	bne.n	800b6d2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d107      	bne.n	800b6d2 <get_ldnumber+0x72>
					vol = (int)i;
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	617b      	str	r3, [r7, #20]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	697a      	ldr	r2, [r7, #20]
 800b6d0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	e002      	b.n	800b6dc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b6da:	693b      	ldr	r3, [r7, #16]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	371c      	adds	r7, #28
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	70da      	strb	r2, [r3, #3]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fe:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b700:	6839      	ldr	r1, [r7, #0]
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f7fe fc78 	bl	8009ff8 <move_window>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d001      	beq.n	800b712 <check_fs+0x2a>
 800b70e:	2304      	movs	r3, #4
 800b710:	e038      	b.n	800b784 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	333c      	adds	r3, #60	; 0x3c
 800b716:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fe f98a 	bl	8009a34 <ld_word>
 800b720:	4603      	mov	r3, r0
 800b722:	461a      	mov	r2, r3
 800b724:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b728:	429a      	cmp	r2, r3
 800b72a:	d001      	beq.n	800b730 <check_fs+0x48>
 800b72c:	2303      	movs	r3, #3
 800b72e:	e029      	b.n	800b784 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b736:	2be9      	cmp	r3, #233	; 0xe9
 800b738:	d009      	beq.n	800b74e <check_fs+0x66>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b740:	2beb      	cmp	r3, #235	; 0xeb
 800b742:	d11e      	bne.n	800b782 <check_fs+0x9a>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b74a:	2b90      	cmp	r3, #144	; 0x90
 800b74c:	d119      	bne.n	800b782 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	333c      	adds	r3, #60	; 0x3c
 800b752:	3336      	adds	r3, #54	; 0x36
 800b754:	4618      	mov	r0, r3
 800b756:	f7fe f985 	bl	8009a64 <ld_dword>
 800b75a:	4603      	mov	r3, r0
 800b75c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b760:	4a0a      	ldr	r2, [pc, #40]	; (800b78c <check_fs+0xa4>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d101      	bne.n	800b76a <check_fs+0x82>
 800b766:	2300      	movs	r3, #0
 800b768:	e00c      	b.n	800b784 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	333c      	adds	r3, #60	; 0x3c
 800b76e:	3352      	adds	r3, #82	; 0x52
 800b770:	4618      	mov	r0, r3
 800b772:	f7fe f977 	bl	8009a64 <ld_dword>
 800b776:	4603      	mov	r3, r0
 800b778:	4a05      	ldr	r2, [pc, #20]	; (800b790 <check_fs+0xa8>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d101      	bne.n	800b782 <check_fs+0x9a>
 800b77e:	2300      	movs	r3, #0
 800b780:	e000      	b.n	800b784 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b782:	2302      	movs	r3, #2
}
 800b784:	4618      	mov	r0, r3
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	00544146 	.word	0x00544146
 800b790:	33544146 	.word	0x33544146

0800b794 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b096      	sub	sp, #88	; 0x58
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f7ff ff59 	bl	800b660 <get_ldnumber>
 800b7ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	da01      	bge.n	800b7ba <find_volume+0x26>
 800b7b6:	230b      	movs	r3, #11
 800b7b8:	e26a      	b.n	800bc90 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b7ba:	4aa3      	ldr	r2, [pc, #652]	; (800ba48 <find_volume+0x2b4>)
 800b7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d101      	bne.n	800b7ce <find_volume+0x3a>
 800b7ca:	230c      	movs	r3, #12
 800b7cc:	e260      	b.n	800bc90 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800b7ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7d0:	f7fe fa30 	bl	8009c34 <lock_fs>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d101      	bne.n	800b7de <find_volume+0x4a>
 800b7da:	230f      	movs	r3, #15
 800b7dc:	e258      	b.n	800bc90 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b7e4:	79fb      	ldrb	r3, [r7, #7]
 800b7e6:	f023 0301 	bic.w	r3, r3, #1
 800b7ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d01a      	beq.n	800b82a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f6:	785b      	ldrb	r3, [r3, #1]
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7fe f87d 	bl	80098f8 <disk_status>
 800b7fe:	4603      	mov	r3, r0
 800b800:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b804:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b808:	f003 0301 	and.w	r3, r3, #1
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10c      	bne.n	800b82a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b810:	79fb      	ldrb	r3, [r7, #7]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d007      	beq.n	800b826 <find_volume+0x92>
 800b816:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b81a:	f003 0304 	and.w	r3, r3, #4
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d001      	beq.n	800b826 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b822:	230a      	movs	r3, #10
 800b824:	e234      	b.n	800bc90 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800b826:	2300      	movs	r3, #0
 800b828:	e232      	b.n	800bc90 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82c:	2200      	movs	r2, #0
 800b82e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b832:	b2da      	uxtb	r2, r3
 800b834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b836:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83a:	785b      	ldrb	r3, [r3, #1]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fe f875 	bl	800992c <disk_initialize>
 800b842:	4603      	mov	r3, r0
 800b844:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b848:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b84c:	f003 0301 	and.w	r3, r3, #1
 800b850:	2b00      	cmp	r3, #0
 800b852:	d001      	beq.n	800b858 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b854:	2303      	movs	r3, #3
 800b856:	e21b      	b.n	800bc90 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b858:	79fb      	ldrb	r3, [r7, #7]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d007      	beq.n	800b86e <find_volume+0xda>
 800b85e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b862:	f003 0304 	and.w	r3, r3, #4
 800b866:	2b00      	cmp	r3, #0
 800b868:	d001      	beq.n	800b86e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b86a:	230a      	movs	r3, #10
 800b86c:	e210      	b.n	800bc90 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b870:	7858      	ldrb	r0, [r3, #1]
 800b872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b874:	330c      	adds	r3, #12
 800b876:	461a      	mov	r2, r3
 800b878:	2102      	movs	r1, #2
 800b87a:	f7fe f8bd 	bl	80099f8 <disk_ioctl>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <find_volume+0xf4>
 800b884:	2301      	movs	r3, #1
 800b886:	e203      	b.n	800bc90 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88a:	899b      	ldrh	r3, [r3, #12]
 800b88c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b890:	d80d      	bhi.n	800b8ae <find_volume+0x11a>
 800b892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b894:	899b      	ldrh	r3, [r3, #12]
 800b896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b89a:	d308      	bcc.n	800b8ae <find_volume+0x11a>
 800b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89e:	899b      	ldrh	r3, [r3, #12]
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a4:	899b      	ldrh	r3, [r3, #12]
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	4013      	ands	r3, r2
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <find_volume+0x11e>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e1ee      	b.n	800bc90 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b8b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8ba:	f7ff ff15 	bl	800b6e8 <check_fs>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b8c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	d149      	bne.n	800b960 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	643b      	str	r3, [r7, #64]	; 0x40
 800b8d0:	e01e      	b.n	800b910 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b8d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8da:	011b      	lsls	r3, r3, #4
 800b8dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b8e0:	4413      	add	r3, r2
 800b8e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d006      	beq.n	800b8fc <find_volume+0x168>
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f0:	3308      	adds	r3, #8
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe f8b6 	bl	8009a64 <ld_dword>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	e000      	b.n	800b8fe <find_volume+0x16a>
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	3358      	adds	r3, #88	; 0x58
 800b904:	443b      	add	r3, r7
 800b906:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b90a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b90c:	3301      	adds	r3, #1
 800b90e:	643b      	str	r3, [r7, #64]	; 0x40
 800b910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b912:	2b03      	cmp	r3, #3
 800b914:	d9dd      	bls.n	800b8d2 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b916:	2300      	movs	r3, #0
 800b918:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <find_volume+0x192>
 800b920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b922:	3b01      	subs	r3, #1
 800b924:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	3358      	adds	r3, #88	; 0x58
 800b92c:	443b      	add	r3, r7
 800b92e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b932:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b936:	2b00      	cmp	r3, #0
 800b938:	d005      	beq.n	800b946 <find_volume+0x1b2>
 800b93a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b93c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b93e:	f7ff fed3 	bl	800b6e8 <check_fs>
 800b942:	4603      	mov	r3, r0
 800b944:	e000      	b.n	800b948 <find_volume+0x1b4>
 800b946:	2303      	movs	r3, #3
 800b948:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b94c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b950:	2b01      	cmp	r3, #1
 800b952:	d905      	bls.n	800b960 <find_volume+0x1cc>
 800b954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b956:	3301      	adds	r3, #1
 800b958:	643b      	str	r3, [r7, #64]	; 0x40
 800b95a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b95c:	2b03      	cmp	r3, #3
 800b95e:	d9e2      	bls.n	800b926 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b960:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b964:	2b04      	cmp	r3, #4
 800b966:	d101      	bne.n	800b96c <find_volume+0x1d8>
 800b968:	2301      	movs	r3, #1
 800b96a:	e191      	b.n	800bc90 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b96c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b970:	2b01      	cmp	r3, #1
 800b972:	d901      	bls.n	800b978 <find_volume+0x1e4>
 800b974:	230d      	movs	r3, #13
 800b976:	e18b      	b.n	800bc90 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97a:	333c      	adds	r3, #60	; 0x3c
 800b97c:	330b      	adds	r3, #11
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fe f858 	bl	8009a34 <ld_word>
 800b984:	4603      	mov	r3, r0
 800b986:	461a      	mov	r2, r3
 800b988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98a:	899b      	ldrh	r3, [r3, #12]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d001      	beq.n	800b994 <find_volume+0x200>
 800b990:	230d      	movs	r3, #13
 800b992:	e17d      	b.n	800bc90 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b996:	333c      	adds	r3, #60	; 0x3c
 800b998:	3316      	adds	r3, #22
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fe f84a 	bl	8009a34 <ld_word>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b9a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d106      	bne.n	800b9b8 <find_volume+0x224>
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ac:	333c      	adds	r3, #60	; 0x3c
 800b9ae:	3324      	adds	r3, #36	; 0x24
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fe f857 	bl	8009a64 <ld_dword>
 800b9b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9bc:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c0:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ca:	789b      	ldrb	r3, [r3, #2]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d005      	beq.n	800b9dc <find_volume+0x248>
 800b9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d2:	789b      	ldrb	r3, [r3, #2]
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d001      	beq.n	800b9dc <find_volume+0x248>
 800b9d8:	230d      	movs	r3, #13
 800b9da:	e159      	b.n	800bc90 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9de:	789b      	ldrb	r3, [r3, #2]
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9e4:	fb02 f303 	mul.w	r3, r2, r3
 800b9e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ec:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f8:	895b      	ldrh	r3, [r3, #10]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d008      	beq.n	800ba10 <find_volume+0x27c>
 800b9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba00:	895b      	ldrh	r3, [r3, #10]
 800ba02:	461a      	mov	r2, r3
 800ba04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba06:	895b      	ldrh	r3, [r3, #10]
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	4013      	ands	r3, r2
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <find_volume+0x280>
 800ba10:	230d      	movs	r3, #13
 800ba12:	e13d      	b.n	800bc90 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ba14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba16:	333c      	adds	r3, #60	; 0x3c
 800ba18:	3311      	adds	r3, #17
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7fe f80a 	bl	8009a34 <ld_word>
 800ba20:	4603      	mov	r3, r0
 800ba22:	461a      	mov	r2, r3
 800ba24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba26:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ba28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2a:	891b      	ldrh	r3, [r3, #8]
 800ba2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba2e:	8992      	ldrh	r2, [r2, #12]
 800ba30:	0952      	lsrs	r2, r2, #5
 800ba32:	b292      	uxth	r2, r2
 800ba34:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba38:	fb01 f202 	mul.w	r2, r1, r2
 800ba3c:	1a9b      	subs	r3, r3, r2
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d003      	beq.n	800ba4c <find_volume+0x2b8>
 800ba44:	230d      	movs	r3, #13
 800ba46:	e123      	b.n	800bc90 <find_volume+0x4fc>
 800ba48:	200029ac 	.word	0x200029ac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4e:	333c      	adds	r3, #60	; 0x3c
 800ba50:	3313      	adds	r3, #19
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fd ffee 	bl	8009a34 <ld_word>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ba5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d106      	bne.n	800ba70 <find_volume+0x2dc>
 800ba62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba64:	333c      	adds	r3, #60	; 0x3c
 800ba66:	3320      	adds	r3, #32
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fd fffb 	bl	8009a64 <ld_dword>
 800ba6e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ba70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba72:	333c      	adds	r3, #60	; 0x3c
 800ba74:	330e      	adds	r3, #14
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fd ffdc 	bl	8009a34 <ld_word>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ba80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <find_volume+0x2f6>
 800ba86:	230d      	movs	r3, #13
 800ba88:	e102      	b.n	800bc90 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ba8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba8e:	4413      	add	r3, r2
 800ba90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba92:	8911      	ldrh	r1, [r2, #8]
 800ba94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba96:	8992      	ldrh	r2, [r2, #12]
 800ba98:	0952      	lsrs	r2, r2, #5
 800ba9a:	b292      	uxth	r2, r2
 800ba9c:	fbb1 f2f2 	udiv	r2, r1, r2
 800baa0:	b292      	uxth	r2, r2
 800baa2:	4413      	add	r3, r2
 800baa4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800baa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800baa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baaa:	429a      	cmp	r2, r3
 800baac:	d201      	bcs.n	800bab2 <find_volume+0x31e>
 800baae:	230d      	movs	r3, #13
 800bab0:	e0ee      	b.n	800bc90 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab6:	1ad3      	subs	r3, r2, r3
 800bab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baba:	8952      	ldrh	r2, [r2, #10]
 800babc:	fbb3 f3f2 	udiv	r3, r3, r2
 800bac0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d101      	bne.n	800bacc <find_volume+0x338>
 800bac8:	230d      	movs	r3, #13
 800baca:	e0e1      	b.n	800bc90 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800bacc:	2303      	movs	r3, #3
 800bace:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bad8:	4293      	cmp	r3, r2
 800bada:	d802      	bhi.n	800bae2 <find_volume+0x34e>
 800badc:	2302      	movs	r3, #2
 800bade:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bae8:	4293      	cmp	r3, r2
 800baea:	d802      	bhi.n	800baf2 <find_volume+0x35e>
 800baec:	2301      	movs	r3, #1
 800baee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	1c9a      	adds	r2, r3, #2
 800baf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf8:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800bafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bafe:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bb00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bb02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb04:	441a      	add	r2, r3
 800bb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb08:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800bb0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0e:	441a      	add	r2, r3
 800bb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb12:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800bb14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d11e      	bne.n	800bb5a <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1e:	333c      	adds	r3, #60	; 0x3c
 800bb20:	332a      	adds	r3, #42	; 0x2a
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fd ff86 	bl	8009a34 <ld_word>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d001      	beq.n	800bb32 <find_volume+0x39e>
 800bb2e:	230d      	movs	r3, #13
 800bb30:	e0ae      	b.n	800bc90 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb34:	891b      	ldrh	r3, [r3, #8]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <find_volume+0x3aa>
 800bb3a:	230d      	movs	r3, #13
 800bb3c:	e0a8      	b.n	800bc90 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb40:	333c      	adds	r3, #60	; 0x3c
 800bb42:	332c      	adds	r3, #44	; 0x2c
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fd ff8d 	bl	8009a64 <ld_dword>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4e:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb52:	6a1b      	ldr	r3, [r3, #32]
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	647b      	str	r3, [r7, #68]	; 0x44
 800bb58:	e01f      	b.n	800bb9a <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5c:	891b      	ldrh	r3, [r3, #8]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <find_volume+0x3d2>
 800bb62:	230d      	movs	r3, #13
 800bb64:	e094      	b.n	800bc90 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb6c:	441a      	add	r2, r3
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb70:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bb72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb76:	2b02      	cmp	r3, #2
 800bb78:	d103      	bne.n	800bb82 <find_volume+0x3ee>
 800bb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7c:	6a1b      	ldr	r3, [r3, #32]
 800bb7e:	005b      	lsls	r3, r3, #1
 800bb80:	e00a      	b.n	800bb98 <find_volume+0x404>
 800bb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb84:	6a1a      	ldr	r2, [r3, #32]
 800bb86:	4613      	mov	r3, r2
 800bb88:	005b      	lsls	r3, r3, #1
 800bb8a:	4413      	add	r3, r2
 800bb8c:	085a      	lsrs	r2, r3, #1
 800bb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb90:	6a1b      	ldr	r3, [r3, #32]
 800bb92:	f003 0301 	and.w	r3, r3, #1
 800bb96:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bb98:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba0:	899b      	ldrh	r3, [r3, #12]
 800bba2:	4619      	mov	r1, r3
 800bba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bba6:	440b      	add	r3, r1
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bbac:	8989      	ldrh	r1, [r1, #12]
 800bbae:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d201      	bcs.n	800bbba <find_volume+0x426>
 800bbb6:	230d      	movs	r3, #13
 800bbb8:	e06a      	b.n	800bc90 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc0:	61da      	str	r2, [r3, #28]
 800bbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc4:	69da      	ldr	r2, [r3, #28]
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800bbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbcc:	2280      	movs	r2, #128	; 0x80
 800bbce:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bbd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bbd4:	2b03      	cmp	r3, #3
 800bbd6:	d149      	bne.n	800bc6c <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbda:	333c      	adds	r3, #60	; 0x3c
 800bbdc:	3330      	adds	r3, #48	; 0x30
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fd ff28 	bl	8009a34 <ld_word>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d140      	bne.n	800bc6c <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bbea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbec:	3301      	adds	r3, #1
 800bbee:	4619      	mov	r1, r3
 800bbf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbf2:	f7fe fa01 	bl	8009ff8 <move_window>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d137      	bne.n	800bc6c <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfe:	2200      	movs	r2, #0
 800bc00:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	333c      	adds	r3, #60	; 0x3c
 800bc06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fd ff12 	bl	8009a34 <ld_word>
 800bc10:	4603      	mov	r3, r0
 800bc12:	461a      	mov	r2, r3
 800bc14:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d127      	bne.n	800bc6c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1e:	333c      	adds	r3, #60	; 0x3c
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7fd ff1f 	bl	8009a64 <ld_dword>
 800bc26:	4603      	mov	r3, r0
 800bc28:	4a1b      	ldr	r2, [pc, #108]	; (800bc98 <find_volume+0x504>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d11e      	bne.n	800bc6c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc30:	333c      	adds	r3, #60	; 0x3c
 800bc32:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fd ff14 	bl	8009a64 <ld_dword>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	4a17      	ldr	r2, [pc, #92]	; (800bc9c <find_volume+0x508>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d113      	bne.n	800bc6c <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc46:	333c      	adds	r3, #60	; 0x3c
 800bc48:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7fd ff09 	bl	8009a64 <ld_dword>
 800bc52:	4602      	mov	r2, r0
 800bc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc56:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5a:	333c      	adds	r3, #60	; 0x3c
 800bc5c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fd feff 	bl	8009a64 <ld_dword>
 800bc66:	4602      	mov	r2, r0
 800bc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6a:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bc72:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bc74:	4b0a      	ldr	r3, [pc, #40]	; (800bca0 <find_volume+0x50c>)
 800bc76:	881b      	ldrh	r3, [r3, #0]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	4b08      	ldr	r3, [pc, #32]	; (800bca0 <find_volume+0x50c>)
 800bc7e:	801a      	strh	r2, [r3, #0]
 800bc80:	4b07      	ldr	r3, [pc, #28]	; (800bca0 <find_volume+0x50c>)
 800bc82:	881a      	ldrh	r2, [r3, #0]
 800bc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc86:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bc88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc8a:	f7fe f94d 	bl	8009f28 <clear_lock>
#endif
	return FR_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3758      	adds	r7, #88	; 0x58
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	41615252 	.word	0x41615252
 800bc9c:	61417272 	.word	0x61417272
 800bca0:	200029b0 	.word	0x200029b0

0800bca4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bcae:	2309      	movs	r3, #9
 800bcb0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d02e      	beq.n	800bd16 <validate+0x72>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d02a      	beq.n	800bd16 <validate+0x72>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d025      	beq.n	800bd16 <validate+0x72>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	889a      	ldrh	r2, [r3, #4]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	88db      	ldrh	r3, [r3, #6]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d11e      	bne.n	800bd16 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7fd ffa9 	bl	8009c34 <lock_fs>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d014      	beq.n	800bd12 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	785b      	ldrb	r3, [r3, #1]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fd fe02 	bl	80098f8 <disk_status>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	f003 0301 	and.w	r3, r3, #1
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d102      	bne.n	800bd04 <validate+0x60>
				res = FR_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	73fb      	strb	r3, [r7, #15]
 800bd02:	e008      	b.n	800bd16 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2100      	movs	r1, #0
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fd ffa8 	bl	8009c60 <unlock_fs>
 800bd10:	e001      	b.n	800bd16 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800bd12:	230f      	movs	r3, #15
 800bd14:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bd16:	7bfb      	ldrb	r3, [r7, #15]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d102      	bne.n	800bd22 <validate+0x7e>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	e000      	b.n	800bd24 <validate+0x80>
 800bd22:	2300      	movs	r3, #0
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	6013      	str	r3, [r2, #0]
	return res;
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
	...

0800bd34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bd46:	f107 0310 	add.w	r3, r7, #16
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7ff fc88 	bl	800b660 <get_ldnumber>
 800bd50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	da01      	bge.n	800bd5c <f_mount+0x28>
 800bd58:	230b      	movs	r3, #11
 800bd5a:	e048      	b.n	800bdee <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bd5c:	4a26      	ldr	r2, [pc, #152]	; (800bdf8 <f_mount+0xc4>)
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00f      	beq.n	800bd8c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bd6c:	69b8      	ldr	r0, [r7, #24]
 800bd6e:	f7fe f8db 	bl	8009f28 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	695b      	ldr	r3, [r3, #20]
 800bd76:	4618      	mov	r0, r3
 800bd78:	f000 ff63 	bl	800cc42 <ff_del_syncobj>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <f_mount+0x52>
 800bd82:	2302      	movs	r3, #2
 800bd84:	e033      	b.n	800bdee <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00f      	beq.n	800bdb2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2200      	movs	r2, #0
 800bd96:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	3314      	adds	r3, #20
 800bda0:	4619      	mov	r1, r3
 800bda2:	4610      	mov	r0, r2
 800bda4:	f000 ff32 	bl	800cc0c <ff_cre_syncobj>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d101      	bne.n	800bdb2 <f_mount+0x7e>
 800bdae:	2302      	movs	r3, #2
 800bdb0:	e01d      	b.n	800bdee <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	4910      	ldr	r1, [pc, #64]	; (800bdf8 <f_mount+0xc4>)
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d002      	beq.n	800bdc8 <f_mount+0x94>
 800bdc2:	79fb      	ldrb	r3, [r7, #7]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d001      	beq.n	800bdcc <f_mount+0x98>
 800bdc8:	2300      	movs	r3, #0
 800bdca:	e010      	b.n	800bdee <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bdcc:	f107 010c 	add.w	r1, r7, #12
 800bdd0:	f107 0308 	add.w	r3, r7, #8
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7ff fcdc 	bl	800b794 <find_volume>
 800bddc:	4603      	mov	r3, r0
 800bdde:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	7dfa      	ldrb	r2, [r7, #23]
 800bde4:	4611      	mov	r1, r2
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fd ff3a 	bl	8009c60 <unlock_fs>
 800bdec:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3720      	adds	r7, #32
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	200029ac 	.word	0x200029ac

0800bdfc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800be02:	af00      	add	r7, sp, #0
 800be04:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800be08:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800be0c:	6018      	str	r0, [r3, #0]
 800be0e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800be12:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800be16:	6019      	str	r1, [r3, #0]
 800be18:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800be1c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800be20:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800be22:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800be26:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d101      	bne.n	800be34 <f_open+0x38>
 800be30:	2309      	movs	r3, #9
 800be32:	e2ae      	b.n	800c392 <f_open+0x596>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800be34:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800be38:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800be3c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800be40:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800be44:	7812      	ldrb	r2, [r2, #0]
 800be46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800be4a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800be4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800be50:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800be54:	781a      	ldrb	r2, [r3, #0]
 800be56:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800be5a:	f107 0308 	add.w	r3, r7, #8
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff fc98 	bl	800b794 <find_volume>
 800be64:	4603      	mov	r3, r0
 800be66:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800be6a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f040 827a 	bne.w	800c368 <f_open+0x56c>
		dj.obj.fs = fs;
 800be74:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800be78:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800be7c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800be80:	f107 0214 	add.w	r2, r7, #20
 800be84:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800be86:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800be8a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800be94:	4611      	mov	r1, r2
 800be96:	4618      	mov	r0, r3
 800be98:	f7ff fb6c 	bl	800b574 <follow_path>
 800be9c:	4603      	mov	r3, r0
 800be9e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bea2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d11e      	bne.n	800bee8 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800beaa:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800beae:	b25b      	sxtb	r3, r3
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	da03      	bge.n	800bebc <f_open+0xc0>
				res = FR_INVALID_NAME;
 800beb4:	2306      	movs	r3, #6
 800beb6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800beba:	e015      	b.n	800bee8 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bebc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bec0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	f023 0301 	bic.w	r3, r3, #1
 800beca:	2b00      	cmp	r3, #0
 800becc:	bf14      	ite	ne
 800bece:	2301      	movne	r3, #1
 800bed0:	2300      	moveq	r3, #0
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	461a      	mov	r2, r3
 800bed6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800beda:	4611      	mov	r1, r2
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fd fedb 	bl	8009c98 <chk_lock>
 800bee2:	4603      	mov	r3, r0
 800bee4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bee8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800beec:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	f003 031c 	and.w	r3, r3, #28
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f000 80a7 	beq.w	800c04a <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 800befc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d01f      	beq.n	800bf44 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bf04:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bf08:	2b04      	cmp	r3, #4
 800bf0a:	d10e      	bne.n	800bf2a <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bf0c:	f7fd ff20 	bl	8009d50 <enq_lock>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d006      	beq.n	800bf24 <f_open+0x128>
 800bf16:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7ff f87a 	bl	800b014 <dir_register>
 800bf20:	4603      	mov	r3, r0
 800bf22:	e000      	b.n	800bf26 <f_open+0x12a>
 800bf24:	2312      	movs	r3, #18
 800bf26:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bf2a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bf2e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800bf32:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800bf36:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800bf3a:	7812      	ldrb	r2, [r2, #0]
 800bf3c:	f042 0208 	orr.w	r2, r2, #8
 800bf40:	701a      	strb	r2, [r3, #0]
 800bf42:	e015      	b.n	800bf70 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bf44:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800bf48:	f003 0311 	and.w	r3, r3, #17
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d003      	beq.n	800bf58 <f_open+0x15c>
					res = FR_DENIED;
 800bf50:	2307      	movs	r3, #7
 800bf52:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800bf56:	e00b      	b.n	800bf70 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bf58:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bf5c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	f003 0304 	and.w	r3, r3, #4
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d002      	beq.n	800bf70 <f_open+0x174>
 800bf6a:	2308      	movs	r3, #8
 800bf6c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bf70:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f040 8088 	bne.w	800c08a <f_open+0x28e>
 800bf7a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800bf7e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	f003 0308 	and.w	r3, r3, #8
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d07e      	beq.n	800c08a <f_open+0x28e>
				dw = GET_FATTIME();
 800bf8c:	f7fd fc52 	bl	8009834 <get_fattime>
 800bf90:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bf94:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bf98:	330e      	adds	r3, #14
 800bf9a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fd fd9e 	bl	8009ae0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bfa4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bfa8:	3316      	adds	r3, #22
 800bfaa:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fd fd96 	bl	8009ae0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bfb4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bfb8:	330b      	adds	r3, #11
 800bfba:	2220      	movs	r2, #32
 800bfbc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bfbe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bfc2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7fe fd9b 	bl	800ab04 <ld_clust>
 800bfce:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bfd2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bfd6:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800bfda:	2200      	movs	r2, #0
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7fe fdb0 	bl	800ab42 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bfe2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bfe6:	331c      	adds	r3, #28
 800bfe8:	2100      	movs	r1, #0
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fd fd78 	bl	8009ae0 <st_dword>
					fs->wflag = 1;
 800bff0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bff4:	2201      	movs	r2, #1
 800bff6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bff8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d044      	beq.n	800c08a <f_open+0x28e>
						dw = fs->winsect;
 800c000:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c006:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800c00a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c00e:	2200      	movs	r2, #0
 800c010:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800c014:	4618      	mov	r0, r3
 800c016:	f7fe fa9a 	bl	800a54e <remove_chain>
 800c01a:	4603      	mov	r3, r0
 800c01c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800c020:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c024:	2b00      	cmp	r3, #0
 800c026:	d130      	bne.n	800c08a <f_open+0x28e>
							res = move_window(fs, dw);
 800c028:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c02c:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800c030:	4618      	mov	r0, r3
 800c032:	f7fd ffe1 	bl	8009ff8 <move_window>
 800c036:	4603      	mov	r3, r0
 800c038:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c03c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c040:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800c044:	3a01      	subs	r2, #1
 800c046:	619a      	str	r2, [r3, #24]
 800c048:	e01f      	b.n	800c08a <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c04a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d11b      	bne.n	800c08a <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c052:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800c056:	f003 0310 	and.w	r3, r3, #16
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <f_open+0x26a>
					res = FR_NO_FILE;
 800c05e:	2304      	movs	r3, #4
 800c060:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800c064:	e011      	b.n	800c08a <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c066:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c06a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	f003 0302 	and.w	r3, r3, #2
 800c074:	2b00      	cmp	r3, #0
 800c076:	d008      	beq.n	800c08a <f_open+0x28e>
 800c078:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800c07c:	f003 0301 	and.w	r3, r3, #1
 800c080:	2b00      	cmp	r3, #0
 800c082:	d002      	beq.n	800c08a <f_open+0x28e>
						res = FR_DENIED;
 800c084:	2307      	movs	r3, #7
 800c086:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800c08a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d14a      	bne.n	800c128 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c092:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c096:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	f003 0308 	and.w	r3, r3, #8
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00b      	beq.n	800c0bc <f_open+0x2c0>
				mode |= FA_MODIFIED;
 800c0a4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c0a8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800c0ac:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800c0b0:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800c0b4:	7812      	ldrb	r2, [r2, #0]
 800c0b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0ba:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c0bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c0c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c0c6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c0ce:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800c0d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c0d6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c0de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c0e2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	f023 0301 	bic.w	r3, r3, #1
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	bf14      	ite	ne
 800c0f0:	2301      	movne	r3, #1
 800c0f2:	2300      	moveq	r3, #0
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fd fe48 	bl	8009d94 <inc_lock>
 800c104:	4602      	mov	r2, r0
 800c106:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c10a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c112:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c116:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d102      	bne.n	800c128 <f_open+0x32c>
 800c122:	2302      	movs	r3, #2
 800c124:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c128:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f040 811b 	bne.w	800c368 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c132:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c136:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800c13a:	4611      	mov	r1, r2
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7fe fce1 	bl	800ab04 <ld_clust>
 800c142:	4602      	mov	r2, r0
 800c144:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c148:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c150:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800c154:	331c      	adds	r3, #28
 800c156:	4618      	mov	r0, r3
 800c158:	f7fd fc84 	bl	8009a64 <ld_dword>
 800c15c:	4602      	mov	r2, r0
 800c15e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c162:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c16a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c16e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2200      	movs	r2, #0
 800c176:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c178:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800c17c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c180:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c188:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c18c:	88da      	ldrh	r2, [r3, #6]
 800c18e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c192:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c19a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c19e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800c1a8:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800c1ac:	7812      	ldrb	r2, [r2, #0]
 800c1ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c1b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c1b4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c1be:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c1c2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c1cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c1d0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c1da:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c1de:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	3330      	adds	r3, #48	; 0x30
 800c1e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fd fcc4 	bl	8009b7a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c1f2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c1f6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	f003 0320 	and.w	r3, r3, #32
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 80b1 	beq.w	800c368 <f_open+0x56c>
 800c206:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c20a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	f000 80a8 	beq.w	800c368 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c218:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c21c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68da      	ldr	r2, [r3, #12]
 800c224:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c228:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c230:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c234:	895b      	ldrh	r3, [r3, #10]
 800c236:	461a      	mov	r2, r3
 800c238:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c23c:	899b      	ldrh	r3, [r3, #12]
 800c23e:	fb02 f303 	mul.w	r3, r2, r3
 800c242:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c246:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c24a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c256:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c25a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800c266:	e021      	b.n	800c2ac <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 800c268:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c26c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800c276:	4618      	mov	r0, r3
 800c278:	f7fd ff7b 	bl	800a172 <get_fat>
 800c27c:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800c280:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800c284:	2b01      	cmp	r3, #1
 800c286:	d802      	bhi.n	800c28e <f_open+0x492>
 800c288:	2302      	movs	r3, #2
 800c28a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c28e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800c292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c296:	d102      	bne.n	800c29e <f_open+0x4a2>
 800c298:	2301      	movs	r3, #1
 800c29a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c29e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800c2a2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c2a6:	1ad3      	subs	r3, r2, r3
 800c2a8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800c2ac:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d105      	bne.n	800c2c0 <f_open+0x4c4>
 800c2b4:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800c2b8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d8d3      	bhi.n	800c268 <f_open+0x46c>
				}
				fp->clust = clst;
 800c2c0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c2c4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800c2ce:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c2d0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d147      	bne.n	800c368 <f_open+0x56c>
 800c2d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c2dc:	899b      	ldrh	r3, [r3, #12]
 800c2de:	461a      	mov	r2, r3
 800c2e0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800c2e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2e8:	fb01 f202 	mul.w	r2, r1, r2
 800c2ec:	1a9b      	subs	r3, r3, r2
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d03a      	beq.n	800c368 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c2f2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c2f6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fd ff1a 	bl	800a134 <clust2sect>
 800c300:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800c304:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d103      	bne.n	800c314 <f_open+0x518>
						res = FR_INT_ERR;
 800c30c:	2302      	movs	r3, #2
 800c30e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800c312:	e029      	b.n	800c368 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c314:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c318:	899b      	ldrh	r3, [r3, #12]
 800c31a:	461a      	mov	r2, r3
 800c31c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800c320:	fbb3 f2f2 	udiv	r2, r3, r2
 800c324:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c328:	441a      	add	r2, r3
 800c32a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c32e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c336:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c33a:	7858      	ldrb	r0, [r3, #1]
 800c33c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c340:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c34a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c34e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	6a1a      	ldr	r2, [r3, #32]
 800c356:	2301      	movs	r3, #1
 800c358:	f7fd fb0e 	bl	8009978 <disk_read>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d002      	beq.n	800c368 <f_open+0x56c>
 800c362:	2301      	movs	r3, #1
 800c364:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c368:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d006      	beq.n	800c37e <f_open+0x582>
 800c370:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c374:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2200      	movs	r2, #0
 800c37c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c37e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c382:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800c386:	4611      	mov	r1, r2
 800c388:	4618      	mov	r0, r3
 800c38a:	f7fd fc69 	bl	8009c60 <unlock_fs>
 800c38e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800c392:	4618      	mov	r0, r3
 800c394:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b08c      	sub	sp, #48	; 0x30
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
 800c3a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f107 0210 	add.w	r2, r7, #16
 800c3ba:	4611      	mov	r1, r2
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7ff fc71 	bl	800bca4 <validate>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c3c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d107      	bne.n	800c3e0 <f_write+0x44>
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	7d5b      	ldrb	r3, [r3, #21]
 800c3d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c3d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d009      	beq.n	800c3f4 <f_write+0x58>
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c3e6:	4611      	mov	r1, r2
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fd fc39 	bl	8009c60 <unlock_fs>
 800c3ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3f2:	e192      	b.n	800c71a <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	7d1b      	ldrb	r3, [r3, #20]
 800c3f8:	f003 0302 	and.w	r3, r3, #2
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d106      	bne.n	800c40e <f_write+0x72>
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	2107      	movs	r1, #7
 800c404:	4618      	mov	r0, r3
 800c406:	f7fd fc2b 	bl	8009c60 <unlock_fs>
 800c40a:	2307      	movs	r3, #7
 800c40c:	e185      	b.n	800c71a <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	699a      	ldr	r2, [r3, #24]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	441a      	add	r2, r3
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	699b      	ldr	r3, [r3, #24]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	f080 816a 	bcs.w	800c6f4 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	699b      	ldr	r3, [r3, #24]
 800c424:	43db      	mvns	r3, r3
 800c426:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c428:	e164      	b.n	800c6f4 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	699b      	ldr	r3, [r3, #24]
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	8992      	ldrh	r2, [r2, #12]
 800c432:	fbb3 f1f2 	udiv	r1, r3, r2
 800c436:	fb01 f202 	mul.w	r2, r1, r2
 800c43a:	1a9b      	subs	r3, r3, r2
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f040 810f 	bne.w	800c660 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	699b      	ldr	r3, [r3, #24]
 800c446:	693a      	ldr	r2, [r7, #16]
 800c448:	8992      	ldrh	r2, [r2, #12]
 800c44a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c44e:	693a      	ldr	r2, [r7, #16]
 800c450:	8952      	ldrh	r2, [r2, #10]
 800c452:	3a01      	subs	r2, #1
 800c454:	4013      	ands	r3, r2
 800c456:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d14d      	bne.n	800c4fa <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	699b      	ldr	r3, [r3, #24]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10c      	bne.n	800c480 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d11a      	bne.n	800c4a8 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2100      	movs	r1, #0
 800c476:	4618      	mov	r0, r3
 800c478:	f7fe f8ce 	bl	800a618 <create_chain>
 800c47c:	62b8      	str	r0, [r7, #40]	; 0x28
 800c47e:	e013      	b.n	800c4a8 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c484:	2b00      	cmp	r3, #0
 800c486:	d007      	beq.n	800c498 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	699b      	ldr	r3, [r3, #24]
 800c48c:	4619      	mov	r1, r3
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f7fe f95a 	bl	800a748 <clmt_clust>
 800c494:	62b8      	str	r0, [r7, #40]	; 0x28
 800c496:	e007      	b.n	800c4a8 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	69db      	ldr	r3, [r3, #28]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	f7fe f8b9 	bl	800a618 <create_chain>
 800c4a6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f000 8127 	beq.w	800c6fe <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d109      	bne.n	800c4ca <f_write+0x12e>
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2202      	movs	r2, #2
 800c4ba:	755a      	strb	r2, [r3, #21]
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	2102      	movs	r1, #2
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fd fbcd 	bl	8009c60 <unlock_fs>
 800c4c6:	2302      	movs	r3, #2
 800c4c8:	e127      	b.n	800c71a <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d0:	d109      	bne.n	800c4e6 <f_write+0x14a>
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	755a      	strb	r2, [r3, #21]
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	2101      	movs	r1, #1
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fd fbbf 	bl	8009c60 <unlock_fs>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e119      	b.n	800c71a <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4ea:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d102      	bne.n	800c4fa <f_write+0x15e>
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4f8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	7d1b      	ldrb	r3, [r3, #20]
 800c4fe:	b25b      	sxtb	r3, r3
 800c500:	2b00      	cmp	r3, #0
 800c502:	da1d      	bge.n	800c540 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	7858      	ldrb	r0, [r3, #1]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6a1a      	ldr	r2, [r3, #32]
 800c512:	2301      	movs	r3, #1
 800c514:	f7fd fa50 	bl	80099b8 <disk_write>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d009      	beq.n	800c532 <f_write+0x196>
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2201      	movs	r2, #1
 800c522:	755a      	strb	r2, [r3, #21]
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	2101      	movs	r1, #1
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fd fb99 	bl	8009c60 <unlock_fs>
 800c52e:	2301      	movs	r3, #1
 800c530:	e0f3      	b.n	800c71a <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	7d1b      	ldrb	r3, [r3, #20]
 800c536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c53a:	b2da      	uxtb	r2, r3
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c540:	693a      	ldr	r2, [r7, #16]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	69db      	ldr	r3, [r3, #28]
 800c546:	4619      	mov	r1, r3
 800c548:	4610      	mov	r0, r2
 800c54a:	f7fd fdf3 	bl	800a134 <clust2sect>
 800c54e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d109      	bne.n	800c56a <f_write+0x1ce>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2202      	movs	r2, #2
 800c55a:	755a      	strb	r2, [r3, #21]
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	2102      	movs	r1, #2
 800c560:	4618      	mov	r0, r3
 800c562:	f7fd fb7d 	bl	8009c60 <unlock_fs>
 800c566:	2302      	movs	r3, #2
 800c568:	e0d7      	b.n	800c71a <f_write+0x37e>
			sect += csect;
 800c56a:	697a      	ldr	r2, [r7, #20]
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	4413      	add	r3, r2
 800c570:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	899b      	ldrh	r3, [r3, #12]
 800c576:	461a      	mov	r2, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c57e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c580:	6a3b      	ldr	r3, [r7, #32]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d048      	beq.n	800c618 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c586:	69ba      	ldr	r2, [r7, #24]
 800c588:	6a3b      	ldr	r3, [r7, #32]
 800c58a:	4413      	add	r3, r2
 800c58c:	693a      	ldr	r2, [r7, #16]
 800c58e:	8952      	ldrh	r2, [r2, #10]
 800c590:	4293      	cmp	r3, r2
 800c592:	d905      	bls.n	800c5a0 <f_write+0x204>
					cc = fs->csize - csect;
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	895b      	ldrh	r3, [r3, #10]
 800c598:	461a      	mov	r2, r3
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	7858      	ldrb	r0, [r3, #1]
 800c5a4:	6a3b      	ldr	r3, [r7, #32]
 800c5a6:	697a      	ldr	r2, [r7, #20]
 800c5a8:	69f9      	ldr	r1, [r7, #28]
 800c5aa:	f7fd fa05 	bl	80099b8 <disk_write>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d009      	beq.n	800c5c8 <f_write+0x22c>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	755a      	strb	r2, [r3, #21]
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	2101      	movs	r1, #1
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fd fb4e 	bl	8009c60 <unlock_fs>
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e0a8      	b.n	800c71a <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6a1a      	ldr	r2, [r3, #32]
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	6a3a      	ldr	r2, [r7, #32]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d918      	bls.n	800c608 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6a1a      	ldr	r2, [r3, #32]
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	1ad3      	subs	r3, r2, r3
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	8992      	ldrh	r2, [r2, #12]
 800c5e8:	fb02 f303 	mul.w	r3, r2, r3
 800c5ec:	69fa      	ldr	r2, [r7, #28]
 800c5ee:	18d1      	adds	r1, r2, r3
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	899b      	ldrh	r3, [r3, #12]
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	f7fd fa9f 	bl	8009b38 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	7d1b      	ldrb	r3, [r3, #20]
 800c5fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c602:	b2da      	uxtb	r2, r3
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	899b      	ldrh	r3, [r3, #12]
 800c60c:	461a      	mov	r2, r3
 800c60e:	6a3b      	ldr	r3, [r7, #32]
 800c610:	fb02 f303 	mul.w	r3, r2, r3
 800c614:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c616:	e050      	b.n	800c6ba <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6a1b      	ldr	r3, [r3, #32]
 800c61c:	697a      	ldr	r2, [r7, #20]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d01b      	beq.n	800c65a <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	699a      	ldr	r2, [r3, #24]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d215      	bcs.n	800c65a <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	7858      	ldrb	r0, [r3, #1]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c638:	2301      	movs	r3, #1
 800c63a:	697a      	ldr	r2, [r7, #20]
 800c63c:	f7fd f99c 	bl	8009978 <disk_read>
 800c640:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c642:	2b00      	cmp	r3, #0
 800c644:	d009      	beq.n	800c65a <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2201      	movs	r2, #1
 800c64a:	755a      	strb	r2, [r3, #21]
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	2101      	movs	r1, #1
 800c650:	4618      	mov	r0, r3
 800c652:	f7fd fb05 	bl	8009c60 <unlock_fs>
 800c656:	2301      	movs	r3, #1
 800c658:	e05f      	b.n	800c71a <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	697a      	ldr	r2, [r7, #20]
 800c65e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	899b      	ldrh	r3, [r3, #12]
 800c664:	4618      	mov	r0, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	699b      	ldr	r3, [r3, #24]
 800c66a:	693a      	ldr	r2, [r7, #16]
 800c66c:	8992      	ldrh	r2, [r2, #12]
 800c66e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c672:	fb01 f202 	mul.w	r2, r1, r2
 800c676:	1a9b      	subs	r3, r3, r2
 800c678:	1ac3      	subs	r3, r0, r3
 800c67a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c67c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	429a      	cmp	r2, r3
 800c682:	d901      	bls.n	800c688 <f_write+0x2ec>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	693a      	ldr	r2, [r7, #16]
 800c694:	8992      	ldrh	r2, [r2, #12]
 800c696:	fbb3 f0f2 	udiv	r0, r3, r2
 800c69a:	fb00 f202 	mul.w	r2, r0, r2
 800c69e:	1a9b      	subs	r3, r3, r2
 800c6a0:	440b      	add	r3, r1
 800c6a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6a4:	69f9      	ldr	r1, [r7, #28]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fd fa46 	bl	8009b38 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	7d1b      	ldrb	r3, [r3, #20]
 800c6b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c6ba:	69fa      	ldr	r2, [r7, #28]
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6be:	4413      	add	r3, r2
 800c6c0:	61fb      	str	r3, [r7, #28]
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	699a      	ldr	r2, [r3, #24]
 800c6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c8:	441a      	add	r2, r3
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	619a      	str	r2, [r3, #24]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	68da      	ldr	r2, [r3, #12]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	699b      	ldr	r3, [r3, #24]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	bf38      	it	cc
 800c6da:	461a      	movcc	r2, r3
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	60da      	str	r2, [r3, #12]
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	441a      	add	r2, r3
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	601a      	str	r2, [r3, #0]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f47f ae97 	bne.w	800c42a <f_write+0x8e>
 800c6fc:	e000      	b.n	800c700 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c6fe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	7d1b      	ldrb	r3, [r3, #20]
 800c704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c708:	b2da      	uxtb	r2, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	2100      	movs	r1, #0
 800c712:	4618      	mov	r0, r3
 800c714:	f7fd faa4 	bl	8009c60 <unlock_fs>
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3730      	adds	r7, #48	; 0x30
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b086      	sub	sp, #24
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f107 0208 	add.w	r2, r7, #8
 800c730:	4611      	mov	r1, r2
 800c732:	4618      	mov	r0, r3
 800c734:	f7ff fab6 	bl	800bca4 <validate>
 800c738:	4603      	mov	r3, r0
 800c73a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c73c:	7dfb      	ldrb	r3, [r7, #23]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d16d      	bne.n	800c81e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	7d1b      	ldrb	r3, [r3, #20]
 800c746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d067      	beq.n	800c81e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	7d1b      	ldrb	r3, [r3, #20]
 800c752:	b25b      	sxtb	r3, r3
 800c754:	2b00      	cmp	r3, #0
 800c756:	da1a      	bge.n	800c78e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	7858      	ldrb	r0, [r3, #1]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a1a      	ldr	r2, [r3, #32]
 800c766:	2301      	movs	r3, #1
 800c768:	f7fd f926 	bl	80099b8 <disk_write>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d006      	beq.n	800c780 <f_sync+0x5e>
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	2101      	movs	r1, #1
 800c776:	4618      	mov	r0, r3
 800c778:	f7fd fa72 	bl	8009c60 <unlock_fs>
 800c77c:	2301      	movs	r3, #1
 800c77e:	e055      	b.n	800c82c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	7d1b      	ldrb	r3, [r3, #20]
 800c784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c78e:	f7fd f851 	bl	8009834 <get_fattime>
 800c792:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c794:	68ba      	ldr	r2, [r7, #8]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c79a:	4619      	mov	r1, r3
 800c79c:	4610      	mov	r0, r2
 800c79e:	f7fd fc2b 	bl	8009ff8 <move_window>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c7a6:	7dfb      	ldrb	r3, [r7, #23]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d138      	bne.n	800c81e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	330b      	adds	r3, #11
 800c7b6:	781a      	ldrb	r2, [r3, #0]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	330b      	adds	r3, #11
 800c7bc:	f042 0220 	orr.w	r2, r2, #32
 800c7c0:	b2d2      	uxtb	r2, r2
 800c7c2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6818      	ldr	r0, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	68f9      	ldr	r1, [r7, #12]
 800c7d0:	f7fe f9b7 	bl	800ab42 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f103 021c 	add.w	r2, r3, #28
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	4619      	mov	r1, r3
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	f7fd f97d 	bl	8009ae0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	3316      	adds	r3, #22
 800c7ea:	6939      	ldr	r1, [r7, #16]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fd f977 	bl	8009ae0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	3312      	adds	r3, #18
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7fd f956 	bl	8009aaa <st_word>
					fs->wflag = 1;
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	2201      	movs	r2, #1
 800c802:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	4618      	mov	r0, r3
 800c808:	f7fd fc24 	bl	800a054 <sync_fs>
 800c80c:	4603      	mov	r3, r0
 800c80e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	7d1b      	ldrb	r3, [r3, #20]
 800c814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c818:	b2da      	uxtb	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	7dfa      	ldrb	r2, [r7, #23]
 800c822:	4611      	mov	r1, r2
 800c824:	4618      	mov	r0, r3
 800c826:	f7fd fa1b 	bl	8009c60 <unlock_fs>
 800c82a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3718      	adds	r7, #24
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7ff ff70 	bl	800c722 <f_sync>
 800c842:	4603      	mov	r3, r0
 800c844:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c846:	7bfb      	ldrb	r3, [r7, #15]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d11d      	bne.n	800c888 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f107 0208 	add.w	r2, r7, #8
 800c852:	4611      	mov	r1, r2
 800c854:	4618      	mov	r0, r3
 800c856:	f7ff fa25 	bl	800bca4 <validate>
 800c85a:	4603      	mov	r3, r0
 800c85c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c85e:	7bfb      	ldrb	r3, [r7, #15]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d111      	bne.n	800c888 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	691b      	ldr	r3, [r3, #16]
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fd fb21 	bl	8009eb0 <dec_lock>
 800c86e:	4603      	mov	r3, r0
 800c870:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c872:	7bfb      	ldrb	r3, [r7, #15]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d102      	bne.n	800c87e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	2100      	movs	r1, #0
 800c882:	4618      	mov	r0, r3
 800c884:	f7fd f9ec 	bl	8009c60 <unlock_fs>
#endif
		}
	}
	return res;
 800c888:	7bfb      	ldrb	r3, [r7, #15]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b084      	sub	sp, #16
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	460b      	mov	r3, r1
 800c89c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c89e:	78fb      	ldrb	r3, [r7, #3]
 800c8a0:	2b0a      	cmp	r3, #10
 800c8a2:	d103      	bne.n	800c8ac <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c8a4:	210d      	movs	r1, #13
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7ff fff3 	bl	800c892 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	db25      	blt.n	800c904 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	1c5a      	adds	r2, r3, #1
 800c8bc:	60fa      	str	r2, [r7, #12]
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	78fa      	ldrb	r2, [r7, #3]
 800c8c4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2b3c      	cmp	r3, #60	; 0x3c
 800c8ca:	dd12      	ble.n	800c8f2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6818      	ldr	r0, [r3, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f103 010c 	add.w	r1, r3, #12
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	f107 0308 	add.w	r3, r7, #8
 800c8dc:	f7ff fd5e 	bl	800c39c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d101      	bne.n	800c8ec <putc_bfd+0x5a>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	e001      	b.n	800c8f0 <putc_bfd+0x5e>
 800c8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c8f0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	1c5a      	adds	r2, r3, #1
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	609a      	str	r2, [r3, #8]
 800c902:	e000      	b.n	800c906 <putc_bfd+0x74>
	if (i < 0) return;
 800c904:	bf00      	nop
}
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	db16      	blt.n	800c94a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6818      	ldr	r0, [r3, #0]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f103 010c 	add.w	r1, r3, #12
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	461a      	mov	r2, r3
 800c92c:	f107 030c 	add.w	r3, r7, #12
 800c930:	f7ff fd34 	bl	800c39c <f_write>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d107      	bne.n	800c94a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	4293      	cmp	r3, r2
 800c942:	d102      	bne.n	800c94a <putc_flush+0x3e>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	e001      	b.n	800c94e <putc_flush+0x42>
	return EOF;
 800c94a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c956:	b480      	push	{r7}
 800c958:	b083      	sub	sp, #12
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
 800c95e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	683a      	ldr	r2, [r7, #0]
 800c964:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	605a      	str	r2, [r3, #4]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685a      	ldr	r2, [r3, #4]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	609a      	str	r2, [r3, #8]
}
 800c974:	bf00      	nop
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr

0800c980 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b096      	sub	sp, #88	; 0x58
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c98a:	f107 030c 	add.w	r3, r7, #12
 800c98e:	6839      	ldr	r1, [r7, #0]
 800c990:	4618      	mov	r0, r3
 800c992:	f7ff ffe0 	bl	800c956 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c996:	e009      	b.n	800c9ac <f_puts+0x2c>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	1c5a      	adds	r2, r3, #1
 800c99c:	607a      	str	r2, [r7, #4]
 800c99e:	781a      	ldrb	r2, [r3, #0]
 800c9a0:	f107 030c 	add.w	r3, r7, #12
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7ff ff73 	bl	800c892 <putc_bfd>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1f1      	bne.n	800c998 <f_puts+0x18>
	return putc_flush(&pb);
 800c9b4:	f107 030c 	add.w	r3, r7, #12
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7ff ffa7 	bl	800c90c <putc_flush>
 800c9be:	4603      	mov	r3, r0
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3758      	adds	r7, #88	; 0x58
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b087      	sub	sp, #28
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c9de:	4b1f      	ldr	r3, [pc, #124]	; (800ca5c <FATFS_LinkDriverEx+0x94>)
 800c9e0:	7a5b      	ldrb	r3, [r3, #9]
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d131      	bne.n	800ca4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c9e8:	4b1c      	ldr	r3, [pc, #112]	; (800ca5c <FATFS_LinkDriverEx+0x94>)
 800c9ea:	7a5b      	ldrb	r3, [r3, #9]
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	4b1a      	ldr	r3, [pc, #104]	; (800ca5c <FATFS_LinkDriverEx+0x94>)
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c9f6:	4b19      	ldr	r3, [pc, #100]	; (800ca5c <FATFS_LinkDriverEx+0x94>)
 800c9f8:	7a5b      	ldrb	r3, [r3, #9]
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	4a17      	ldr	r2, [pc, #92]	; (800ca5c <FATFS_LinkDriverEx+0x94>)
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	4413      	add	r3, r2
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ca06:	4b15      	ldr	r3, [pc, #84]	; (800ca5c <FATFS_LinkDriverEx+0x94>)
 800ca08:	7a5b      	ldrb	r3, [r3, #9]
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	4b13      	ldr	r3, [pc, #76]	; (800ca5c <FATFS_LinkDriverEx+0x94>)
 800ca10:	4413      	add	r3, r2
 800ca12:	79fa      	ldrb	r2, [r7, #7]
 800ca14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ca16:	4b11      	ldr	r3, [pc, #68]	; (800ca5c <FATFS_LinkDriverEx+0x94>)
 800ca18:	7a5b      	ldrb	r3, [r3, #9]
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	1c5a      	adds	r2, r3, #1
 800ca1e:	b2d1      	uxtb	r1, r2
 800ca20:	4a0e      	ldr	r2, [pc, #56]	; (800ca5c <FATFS_LinkDriverEx+0x94>)
 800ca22:	7251      	strb	r1, [r2, #9]
 800ca24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ca26:	7dbb      	ldrb	r3, [r7, #22]
 800ca28:	3330      	adds	r3, #48	; 0x30
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	3301      	adds	r3, #1
 800ca34:	223a      	movs	r2, #58	; 0x3a
 800ca36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	3302      	adds	r3, #2
 800ca3c:	222f      	movs	r2, #47	; 0x2f
 800ca3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	3303      	adds	r3, #3
 800ca44:	2200      	movs	r2, #0
 800ca46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ca4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	371c      	adds	r7, #28
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	200029d4 	.word	0x200029d4

0800ca60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7ff ffaa 	bl	800c9c8 <FATFS_LinkDriverEx>
 800ca74:	4603      	mov	r3, r0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3708      	adds	r7, #8
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
	...

0800ca80 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	4603      	mov	r3, r0
 800ca88:	6039      	str	r1, [r7, #0]
 800ca8a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ca8c:	88fb      	ldrh	r3, [r7, #6]
 800ca8e:	2b7f      	cmp	r3, #127	; 0x7f
 800ca90:	d802      	bhi.n	800ca98 <ff_convert+0x18>
		c = chr;
 800ca92:	88fb      	ldrh	r3, [r7, #6]
 800ca94:	81fb      	strh	r3, [r7, #14]
 800ca96:	e025      	b.n	800cae4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00b      	beq.n	800cab6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ca9e:	88fb      	ldrh	r3, [r7, #6]
 800caa0:	2bff      	cmp	r3, #255	; 0xff
 800caa2:	d805      	bhi.n	800cab0 <ff_convert+0x30>
 800caa4:	88fb      	ldrh	r3, [r7, #6]
 800caa6:	3b80      	subs	r3, #128	; 0x80
 800caa8:	4a12      	ldr	r2, [pc, #72]	; (800caf4 <ff_convert+0x74>)
 800caaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800caae:	e000      	b.n	800cab2 <ff_convert+0x32>
 800cab0:	2300      	movs	r3, #0
 800cab2:	81fb      	strh	r3, [r7, #14]
 800cab4:	e016      	b.n	800cae4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cab6:	2300      	movs	r3, #0
 800cab8:	81fb      	strh	r3, [r7, #14]
 800caba:	e009      	b.n	800cad0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cabc:	89fb      	ldrh	r3, [r7, #14]
 800cabe:	4a0d      	ldr	r2, [pc, #52]	; (800caf4 <ff_convert+0x74>)
 800cac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cac4:	88fa      	ldrh	r2, [r7, #6]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d006      	beq.n	800cad8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800caca:	89fb      	ldrh	r3, [r7, #14]
 800cacc:	3301      	adds	r3, #1
 800cace:	81fb      	strh	r3, [r7, #14]
 800cad0:	89fb      	ldrh	r3, [r7, #14]
 800cad2:	2b7f      	cmp	r3, #127	; 0x7f
 800cad4:	d9f2      	bls.n	800cabc <ff_convert+0x3c>
 800cad6:	e000      	b.n	800cada <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cad8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cada:	89fb      	ldrh	r3, [r7, #14]
 800cadc:	3380      	adds	r3, #128	; 0x80
 800cade:	b29b      	uxth	r3, r3
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cae4:	89fb      	ldrh	r3, [r7, #14]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3714      	adds	r7, #20
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr
 800caf2:	bf00      	nop
 800caf4:	080145a8 	.word	0x080145a8

0800caf8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b087      	sub	sp, #28
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	4603      	mov	r3, r0
 800cb00:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cb02:	88fb      	ldrh	r3, [r7, #6]
 800cb04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb08:	d201      	bcs.n	800cb0e <ff_wtoupper+0x16>
 800cb0a:	4b3e      	ldr	r3, [pc, #248]	; (800cc04 <ff_wtoupper+0x10c>)
 800cb0c:	e000      	b.n	800cb10 <ff_wtoupper+0x18>
 800cb0e:	4b3e      	ldr	r3, [pc, #248]	; (800cc08 <ff_wtoupper+0x110>)
 800cb10:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	1c9a      	adds	r2, r3, #2
 800cb16:	617a      	str	r2, [r7, #20]
 800cb18:	881b      	ldrh	r3, [r3, #0]
 800cb1a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cb1c:	8a7b      	ldrh	r3, [r7, #18]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d068      	beq.n	800cbf4 <ff_wtoupper+0xfc>
 800cb22:	88fa      	ldrh	r2, [r7, #6]
 800cb24:	8a7b      	ldrh	r3, [r7, #18]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d364      	bcc.n	800cbf4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	1c9a      	adds	r2, r3, #2
 800cb2e:	617a      	str	r2, [r7, #20]
 800cb30:	881b      	ldrh	r3, [r3, #0]
 800cb32:	823b      	strh	r3, [r7, #16]
 800cb34:	8a3b      	ldrh	r3, [r7, #16]
 800cb36:	0a1b      	lsrs	r3, r3, #8
 800cb38:	81fb      	strh	r3, [r7, #14]
 800cb3a:	8a3b      	ldrh	r3, [r7, #16]
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cb40:	88fa      	ldrh	r2, [r7, #6]
 800cb42:	8a79      	ldrh	r1, [r7, #18]
 800cb44:	8a3b      	ldrh	r3, [r7, #16]
 800cb46:	440b      	add	r3, r1
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	da49      	bge.n	800cbe0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cb4c:	89fb      	ldrh	r3, [r7, #14]
 800cb4e:	2b08      	cmp	r3, #8
 800cb50:	d84f      	bhi.n	800cbf2 <ff_wtoupper+0xfa>
 800cb52:	a201      	add	r2, pc, #4	; (adr r2, 800cb58 <ff_wtoupper+0x60>)
 800cb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb58:	0800cb7d 	.word	0x0800cb7d
 800cb5c:	0800cb8f 	.word	0x0800cb8f
 800cb60:	0800cba5 	.word	0x0800cba5
 800cb64:	0800cbad 	.word	0x0800cbad
 800cb68:	0800cbb5 	.word	0x0800cbb5
 800cb6c:	0800cbbd 	.word	0x0800cbbd
 800cb70:	0800cbc5 	.word	0x0800cbc5
 800cb74:	0800cbcd 	.word	0x0800cbcd
 800cb78:	0800cbd5 	.word	0x0800cbd5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cb7c:	88fa      	ldrh	r2, [r7, #6]
 800cb7e:	8a7b      	ldrh	r3, [r7, #18]
 800cb80:	1ad3      	subs	r3, r2, r3
 800cb82:	005b      	lsls	r3, r3, #1
 800cb84:	697a      	ldr	r2, [r7, #20]
 800cb86:	4413      	add	r3, r2
 800cb88:	881b      	ldrh	r3, [r3, #0]
 800cb8a:	80fb      	strh	r3, [r7, #6]
 800cb8c:	e027      	b.n	800cbde <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cb8e:	88fa      	ldrh	r2, [r7, #6]
 800cb90:	8a7b      	ldrh	r3, [r7, #18]
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	88fa      	ldrh	r2, [r7, #6]
 800cb9e:	1ad3      	subs	r3, r2, r3
 800cba0:	80fb      	strh	r3, [r7, #6]
 800cba2:	e01c      	b.n	800cbde <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cba4:	88fb      	ldrh	r3, [r7, #6]
 800cba6:	3b10      	subs	r3, #16
 800cba8:	80fb      	strh	r3, [r7, #6]
 800cbaa:	e018      	b.n	800cbde <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cbac:	88fb      	ldrh	r3, [r7, #6]
 800cbae:	3b20      	subs	r3, #32
 800cbb0:	80fb      	strh	r3, [r7, #6]
 800cbb2:	e014      	b.n	800cbde <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cbb4:	88fb      	ldrh	r3, [r7, #6]
 800cbb6:	3b30      	subs	r3, #48	; 0x30
 800cbb8:	80fb      	strh	r3, [r7, #6]
 800cbba:	e010      	b.n	800cbde <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cbbc:	88fb      	ldrh	r3, [r7, #6]
 800cbbe:	3b1a      	subs	r3, #26
 800cbc0:	80fb      	strh	r3, [r7, #6]
 800cbc2:	e00c      	b.n	800cbde <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cbc4:	88fb      	ldrh	r3, [r7, #6]
 800cbc6:	3308      	adds	r3, #8
 800cbc8:	80fb      	strh	r3, [r7, #6]
 800cbca:	e008      	b.n	800cbde <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cbcc:	88fb      	ldrh	r3, [r7, #6]
 800cbce:	3b50      	subs	r3, #80	; 0x50
 800cbd0:	80fb      	strh	r3, [r7, #6]
 800cbd2:	e004      	b.n	800cbde <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cbd4:	88fb      	ldrh	r3, [r7, #6]
 800cbd6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800cbda:	80fb      	strh	r3, [r7, #6]
 800cbdc:	bf00      	nop
			}
			break;
 800cbde:	e008      	b.n	800cbf2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800cbe0:	89fb      	ldrh	r3, [r7, #14]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d195      	bne.n	800cb12 <ff_wtoupper+0x1a>
 800cbe6:	8a3b      	ldrh	r3, [r7, #16]
 800cbe8:	005b      	lsls	r3, r3, #1
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	4413      	add	r3, r2
 800cbee:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800cbf0:	e78f      	b.n	800cb12 <ff_wtoupper+0x1a>
			break;
 800cbf2:	bf00      	nop
	}

	return chr;
 800cbf4:	88fb      	ldrh	r3, [r7, #6]
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	371c      	adds	r7, #28
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	080146a8 	.word	0x080146a8
 800cc08:	0801489c 	.word	0x0801489c

0800cc0c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	4603      	mov	r3, r0
 800cc14:	6039      	str	r1, [r7, #0]
 800cc16:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800cc18:	2200      	movs	r2, #0
 800cc1a:	2101      	movs	r1, #1
 800cc1c:	2001      	movs	r0, #1
 800cc1e:	f000 f978 	bl	800cf12 <osSemaphoreNew>
 800cc22:	4602      	mov	r2, r0
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	bf14      	ite	ne
 800cc30:	2301      	movne	r3, #1
 800cc32:	2300      	moveq	r3, #0
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	60fb      	str	r3, [r7, #12]

    return ret;
 800cc38:	68fb      	ldr	r3, [r7, #12]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}

0800cc42 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b082      	sub	sp, #8
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 fa80 	bl	800d150 <osSemaphoreDelete>
#endif
    return 1;
 800cc50:	2301      	movs	r3, #1
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b084      	sub	sp, #16
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800cc62:	2300      	movs	r3, #0
 800cc64:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800cc66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 f9da 	bl	800d024 <osSemaphoreAcquire>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d101      	bne.n	800cc7a <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800cc76:	2301      	movs	r3, #1
 800cc78:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 fa1b 	bl	800d0c8 <osSemaphoreRelease>
#endif
}
 800cc92:	bf00      	nop
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
	...

0800cc9c <__NVIC_SetPriority>:
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	4603      	mov	r3, r0
 800cca4:	6039      	str	r1, [r7, #0]
 800cca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	db0a      	blt.n	800ccc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	b2da      	uxtb	r2, r3
 800ccb4:	490c      	ldr	r1, [pc, #48]	; (800cce8 <__NVIC_SetPriority+0x4c>)
 800ccb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccba:	0112      	lsls	r2, r2, #4
 800ccbc:	b2d2      	uxtb	r2, r2
 800ccbe:	440b      	add	r3, r1
 800ccc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ccc4:	e00a      	b.n	800ccdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	b2da      	uxtb	r2, r3
 800ccca:	4908      	ldr	r1, [pc, #32]	; (800ccec <__NVIC_SetPriority+0x50>)
 800cccc:	79fb      	ldrb	r3, [r7, #7]
 800ccce:	f003 030f 	and.w	r3, r3, #15
 800ccd2:	3b04      	subs	r3, #4
 800ccd4:	0112      	lsls	r2, r2, #4
 800ccd6:	b2d2      	uxtb	r2, r2
 800ccd8:	440b      	add	r3, r1
 800ccda:	761a      	strb	r2, [r3, #24]
}
 800ccdc:	bf00      	nop
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr
 800cce8:	e000e100 	.word	0xe000e100
 800ccec:	e000ed00 	.word	0xe000ed00

0800ccf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ccf4:	4b05      	ldr	r3, [pc, #20]	; (800cd0c <SysTick_Handler+0x1c>)
 800ccf6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ccf8:	f002 fa44 	bl	800f184 <xTaskGetSchedulerState>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d001      	beq.n	800cd06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cd02:	f003 f989 	bl	8010018 <xPortSysTickHandler>
  }
}
 800cd06:	bf00      	nop
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	e000e010 	.word	0xe000e010

0800cd10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cd10:	b580      	push	{r7, lr}
 800cd12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cd14:	2100      	movs	r1, #0
 800cd16:	f06f 0004 	mvn.w	r0, #4
 800cd1a:	f7ff ffbf 	bl	800cc9c <__NVIC_SetPriority>
#endif
}
 800cd1e:	bf00      	nop
 800cd20:	bd80      	pop	{r7, pc}
	...

0800cd24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd2a:	f3ef 8305 	mrs	r3, IPSR
 800cd2e:	603b      	str	r3, [r7, #0]
  return(result);
 800cd30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d003      	beq.n	800cd3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cd36:	f06f 0305 	mvn.w	r3, #5
 800cd3a:	607b      	str	r3, [r7, #4]
 800cd3c:	e00c      	b.n	800cd58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cd3e:	4b0a      	ldr	r3, [pc, #40]	; (800cd68 <osKernelInitialize+0x44>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d105      	bne.n	800cd52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cd46:	4b08      	ldr	r3, [pc, #32]	; (800cd68 <osKernelInitialize+0x44>)
 800cd48:	2201      	movs	r2, #1
 800cd4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	607b      	str	r3, [r7, #4]
 800cd50:	e002      	b.n	800cd58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cd52:	f04f 33ff 	mov.w	r3, #4294967295
 800cd56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cd58:	687b      	ldr	r3, [r7, #4]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	370c      	adds	r7, #12
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	200029e0 	.word	0x200029e0

0800cd6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd72:	f3ef 8305 	mrs	r3, IPSR
 800cd76:	603b      	str	r3, [r7, #0]
  return(result);
 800cd78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d003      	beq.n	800cd86 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cd7e:	f06f 0305 	mvn.w	r3, #5
 800cd82:	607b      	str	r3, [r7, #4]
 800cd84:	e010      	b.n	800cda8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cd86:	4b0b      	ldr	r3, [pc, #44]	; (800cdb4 <osKernelStart+0x48>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d109      	bne.n	800cda2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cd8e:	f7ff ffbf 	bl	800cd10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cd92:	4b08      	ldr	r3, [pc, #32]	; (800cdb4 <osKernelStart+0x48>)
 800cd94:	2202      	movs	r2, #2
 800cd96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cd98:	f001 fd18 	bl	800e7cc <vTaskStartScheduler>
      stat = osOK;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	607b      	str	r3, [r7, #4]
 800cda0:	e002      	b.n	800cda8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cda2:	f04f 33ff 	mov.w	r3, #4294967295
 800cda6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cda8:	687b      	ldr	r3, [r7, #4]
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	200029e0 	.word	0x200029e0

0800cdb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b08e      	sub	sp, #56	; 0x38
 800cdbc:	af04      	add	r7, sp, #16
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdc8:	f3ef 8305 	mrs	r3, IPSR
 800cdcc:	617b      	str	r3, [r7, #20]
  return(result);
 800cdce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d17e      	bne.n	800ced2 <osThreadNew+0x11a>
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d07b      	beq.n	800ced2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cdda:	2380      	movs	r3, #128	; 0x80
 800cddc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cdde:	2318      	movs	r3, #24
 800cde0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cde6:	f04f 33ff 	mov.w	r3, #4294967295
 800cdea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d045      	beq.n	800ce7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d002      	beq.n	800ce00 <osThreadNew+0x48>
        name = attr->name;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	699b      	ldr	r3, [r3, #24]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d002      	beq.n	800ce0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	699b      	ldr	r3, [r3, #24]
 800ce0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d008      	beq.n	800ce26 <osThreadNew+0x6e>
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	2b38      	cmp	r3, #56	; 0x38
 800ce18:	d805      	bhi.n	800ce26 <osThreadNew+0x6e>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	f003 0301 	and.w	r3, r3, #1
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d001      	beq.n	800ce2a <osThreadNew+0x72>
        return (NULL);
 800ce26:	2300      	movs	r3, #0
 800ce28:	e054      	b.n	800ced4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	695b      	ldr	r3, [r3, #20]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d003      	beq.n	800ce3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	695b      	ldr	r3, [r3, #20]
 800ce36:	089b      	lsrs	r3, r3, #2
 800ce38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d00e      	beq.n	800ce60 <osThreadNew+0xa8>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	2baf      	cmp	r3, #175	; 0xaf
 800ce48:	d90a      	bls.n	800ce60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d006      	beq.n	800ce60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	695b      	ldr	r3, [r3, #20]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d002      	beq.n	800ce60 <osThreadNew+0xa8>
        mem = 1;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	61bb      	str	r3, [r7, #24]
 800ce5e:	e010      	b.n	800ce82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10c      	bne.n	800ce82 <osThreadNew+0xca>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d108      	bne.n	800ce82 <osThreadNew+0xca>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d104      	bne.n	800ce82 <osThreadNew+0xca>
          mem = 0;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	61bb      	str	r3, [r7, #24]
 800ce7c:	e001      	b.n	800ce82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d110      	bne.n	800ceaa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce90:	9202      	str	r2, [sp, #8]
 800ce92:	9301      	str	r3, [sp, #4]
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	6a3a      	ldr	r2, [r7, #32]
 800ce9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce9e:	68f8      	ldr	r0, [r7, #12]
 800cea0:	f001 faa2 	bl	800e3e8 <xTaskCreateStatic>
 800cea4:	4603      	mov	r3, r0
 800cea6:	613b      	str	r3, [r7, #16]
 800cea8:	e013      	b.n	800ced2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d110      	bne.n	800ced2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ceb0:	6a3b      	ldr	r3, [r7, #32]
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	f107 0310 	add.w	r3, r7, #16
 800ceb8:	9301      	str	r3, [sp, #4]
 800ceba:	69fb      	ldr	r3, [r7, #28]
 800cebc:	9300      	str	r3, [sp, #0]
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cec2:	68f8      	ldr	r0, [r7, #12]
 800cec4:	f001 faed 	bl	800e4a2 <xTaskCreate>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d001      	beq.n	800ced2 <osThreadNew+0x11a>
            hTask = NULL;
 800cece:	2300      	movs	r3, #0
 800ced0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ced2:	693b      	ldr	r3, [r7, #16]
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3728      	adds	r7, #40	; 0x28
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cee4:	f3ef 8305 	mrs	r3, IPSR
 800cee8:	60bb      	str	r3, [r7, #8]
  return(result);
 800ceea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d003      	beq.n	800cef8 <osDelay+0x1c>
    stat = osErrorISR;
 800cef0:	f06f 0305 	mvn.w	r3, #5
 800cef4:	60fb      	str	r3, [r7, #12]
 800cef6:	e007      	b.n	800cf08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cef8:	2300      	movs	r3, #0
 800cefa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d002      	beq.n	800cf08 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f001 fc2e 	bl	800e764 <vTaskDelay>
    }
  }

  return (stat);
 800cf08:	68fb      	ldr	r3, [r7, #12]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b08a      	sub	sp, #40	; 0x28
 800cf16:	af02      	add	r7, sp, #8
 800cf18:	60f8      	str	r0, [r7, #12]
 800cf1a:	60b9      	str	r1, [r7, #8]
 800cf1c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf22:	f3ef 8305 	mrs	r3, IPSR
 800cf26:	613b      	str	r3, [r7, #16]
  return(result);
 800cf28:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d175      	bne.n	800d01a <osSemaphoreNew+0x108>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d072      	beq.n	800d01a <osSemaphoreNew+0x108>
 800cf34:	68ba      	ldr	r2, [r7, #8]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d86e      	bhi.n	800d01a <osSemaphoreNew+0x108>
    mem = -1;
 800cf3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf40:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d015      	beq.n	800cf74 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d006      	beq.n	800cf5e <osSemaphoreNew+0x4c>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	2b4f      	cmp	r3, #79	; 0x4f
 800cf56:	d902      	bls.n	800cf5e <osSemaphoreNew+0x4c>
        mem = 1;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	61bb      	str	r3, [r7, #24]
 800cf5c:	e00c      	b.n	800cf78 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d108      	bne.n	800cf78 <osSemaphoreNew+0x66>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d104      	bne.n	800cf78 <osSemaphoreNew+0x66>
          mem = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	61bb      	str	r3, [r7, #24]
 800cf72:	e001      	b.n	800cf78 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800cf74:	2300      	movs	r3, #0
 800cf76:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7e:	d04c      	beq.n	800d01a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d128      	bne.n	800cfd8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d10a      	bne.n	800cfa2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	2203      	movs	r2, #3
 800cf92:	9200      	str	r2, [sp, #0]
 800cf94:	2200      	movs	r2, #0
 800cf96:	2100      	movs	r1, #0
 800cf98:	2001      	movs	r0, #1
 800cf9a:	f000 fa4d 	bl	800d438 <xQueueGenericCreateStatic>
 800cf9e:	61f8      	str	r0, [r7, #28]
 800cfa0:	e005      	b.n	800cfae <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800cfa2:	2203      	movs	r2, #3
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	2001      	movs	r0, #1
 800cfa8:	f000 fabe 	bl	800d528 <xQueueGenericCreate>
 800cfac:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d022      	beq.n	800cffa <osSemaphoreNew+0xe8>
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d01f      	beq.n	800cffa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cfba:	2300      	movs	r3, #0
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	69f8      	ldr	r0, [r7, #28]
 800cfc2:	f000 fbab 	bl	800d71c <xQueueGenericSend>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d016      	beq.n	800cffa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800cfcc:	69f8      	ldr	r0, [r7, #28]
 800cfce:	f001 f837 	bl	800e040 <vQueueDelete>
            hSemaphore = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	61fb      	str	r3, [r7, #28]
 800cfd6:	e010      	b.n	800cffa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d108      	bne.n	800cff0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	68b9      	ldr	r1, [r7, #8]
 800cfe6:	68f8      	ldr	r0, [r7, #12]
 800cfe8:	f000 fb2d 	bl	800d646 <xQueueCreateCountingSemaphoreStatic>
 800cfec:	61f8      	str	r0, [r7, #28]
 800cfee:	e004      	b.n	800cffa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cff0:	68b9      	ldr	r1, [r7, #8]
 800cff2:	68f8      	ldr	r0, [r7, #12]
 800cff4:	f000 fb5e 	bl	800d6b4 <xQueueCreateCountingSemaphore>
 800cff8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cffa:	69fb      	ldr	r3, [r7, #28]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00c      	beq.n	800d01a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d003      	beq.n	800d00e <osSemaphoreNew+0xfc>
          name = attr->name;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	617b      	str	r3, [r7, #20]
 800d00c:	e001      	b.n	800d012 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800d00e:	2300      	movs	r3, #0
 800d010:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d012:	6979      	ldr	r1, [r7, #20]
 800d014:	69f8      	ldr	r0, [r7, #28]
 800d016:	f001 f95f 	bl	800e2d8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d01a:	69fb      	ldr	r3, [r7, #28]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3720      	adds	r7, #32
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d024:	b580      	push	{r7, lr}
 800d026:	b086      	sub	sp, #24
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d032:	2300      	movs	r3, #0
 800d034:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d103      	bne.n	800d044 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d03c:	f06f 0303 	mvn.w	r3, #3
 800d040:	617b      	str	r3, [r7, #20]
 800d042:	e039      	b.n	800d0b8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d044:	f3ef 8305 	mrs	r3, IPSR
 800d048:	60fb      	str	r3, [r7, #12]
  return(result);
 800d04a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d022      	beq.n	800d096 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d003      	beq.n	800d05e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800d056:	f06f 0303 	mvn.w	r3, #3
 800d05a:	617b      	str	r3, [r7, #20]
 800d05c:	e02c      	b.n	800d0b8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800d05e:	2300      	movs	r3, #0
 800d060:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d062:	f107 0308 	add.w	r3, r7, #8
 800d066:	461a      	mov	r2, r3
 800d068:	2100      	movs	r1, #0
 800d06a:	6938      	ldr	r0, [r7, #16]
 800d06c:	f000 ff68 	bl	800df40 <xQueueReceiveFromISR>
 800d070:	4603      	mov	r3, r0
 800d072:	2b01      	cmp	r3, #1
 800d074:	d003      	beq.n	800d07e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800d076:	f06f 0302 	mvn.w	r3, #2
 800d07a:	617b      	str	r3, [r7, #20]
 800d07c:	e01c      	b.n	800d0b8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d019      	beq.n	800d0b8 <osSemaphoreAcquire+0x94>
 800d084:	4b0f      	ldr	r3, [pc, #60]	; (800d0c4 <osSemaphoreAcquire+0xa0>)
 800d086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d08a:	601a      	str	r2, [r3, #0]
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	f3bf 8f6f 	isb	sy
 800d094:	e010      	b.n	800d0b8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d096:	6839      	ldr	r1, [r7, #0]
 800d098:	6938      	ldr	r0, [r7, #16]
 800d09a:	f000 fe45 	bl	800dd28 <xQueueSemaphoreTake>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d009      	beq.n	800d0b8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d003      	beq.n	800d0b2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800d0aa:	f06f 0301 	mvn.w	r3, #1
 800d0ae:	617b      	str	r3, [r7, #20]
 800d0b0:	e002      	b.n	800d0b8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800d0b2:	f06f 0302 	mvn.w	r3, #2
 800d0b6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d0b8:	697b      	ldr	r3, [r7, #20]
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3718      	adds	r7, #24
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	e000ed04 	.word	0xe000ed04

0800d0c8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b086      	sub	sp, #24
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d103      	bne.n	800d0e6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d0de:	f06f 0303 	mvn.w	r3, #3
 800d0e2:	617b      	str	r3, [r7, #20]
 800d0e4:	e02c      	b.n	800d140 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0e6:	f3ef 8305 	mrs	r3, IPSR
 800d0ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d01a      	beq.n	800d128 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d0f6:	f107 0308 	add.w	r3, r7, #8
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6938      	ldr	r0, [r7, #16]
 800d0fe:	f000 fca6 	bl	800da4e <xQueueGiveFromISR>
 800d102:	4603      	mov	r3, r0
 800d104:	2b01      	cmp	r3, #1
 800d106:	d003      	beq.n	800d110 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d108:	f06f 0302 	mvn.w	r3, #2
 800d10c:	617b      	str	r3, [r7, #20]
 800d10e:	e017      	b.n	800d140 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d014      	beq.n	800d140 <osSemaphoreRelease+0x78>
 800d116:	4b0d      	ldr	r3, [pc, #52]	; (800d14c <osSemaphoreRelease+0x84>)
 800d118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d11c:	601a      	str	r2, [r3, #0]
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	e00b      	b.n	800d140 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d128:	2300      	movs	r3, #0
 800d12a:	2200      	movs	r2, #0
 800d12c:	2100      	movs	r1, #0
 800d12e:	6938      	ldr	r0, [r7, #16]
 800d130:	f000 faf4 	bl	800d71c <xQueueGenericSend>
 800d134:	4603      	mov	r3, r0
 800d136:	2b01      	cmp	r3, #1
 800d138:	d002      	beq.n	800d140 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800d13a:	f06f 0302 	mvn.w	r3, #2
 800d13e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d140:	697b      	ldr	r3, [r7, #20]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3718      	adds	r7, #24
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	e000ed04 	.word	0xe000ed04

0800d150 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d15c:	f3ef 8305 	mrs	r3, IPSR
 800d160:	60fb      	str	r3, [r7, #12]
  return(result);
 800d162:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d164:	2b00      	cmp	r3, #0
 800d166:	d003      	beq.n	800d170 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800d168:	f06f 0305 	mvn.w	r3, #5
 800d16c:	617b      	str	r3, [r7, #20]
 800d16e:	e00e      	b.n	800d18e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d103      	bne.n	800d17e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800d176:	f06f 0303 	mvn.w	r3, #3
 800d17a:	617b      	str	r3, [r7, #20]
 800d17c:	e007      	b.n	800d18e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d17e:	6938      	ldr	r0, [r7, #16]
 800d180:	f001 f8d4 	bl	800e32c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d184:	2300      	movs	r3, #0
 800d186:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800d188:	6938      	ldr	r0, [r7, #16]
 800d18a:	f000 ff59 	bl	800e040 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d18e:	697b      	ldr	r3, [r7, #20]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d198:	b480      	push	{r7}
 800d19a:	b085      	sub	sp, #20
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	4a07      	ldr	r2, [pc, #28]	; (800d1c4 <vApplicationGetIdleTaskMemory+0x2c>)
 800d1a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	4a06      	ldr	r2, [pc, #24]	; (800d1c8 <vApplicationGetIdleTaskMemory+0x30>)
 800d1ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2280      	movs	r2, #128	; 0x80
 800d1b4:	601a      	str	r2, [r3, #0]
}
 800d1b6:	bf00      	nop
 800d1b8:	3714      	adds	r7, #20
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	200029e4 	.word	0x200029e4
 800d1c8:	20002a94 	.word	0x20002a94

0800d1cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	60b9      	str	r1, [r7, #8]
 800d1d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	4a07      	ldr	r2, [pc, #28]	; (800d1f8 <vApplicationGetTimerTaskMemory+0x2c>)
 800d1dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	4a06      	ldr	r2, [pc, #24]	; (800d1fc <vApplicationGetTimerTaskMemory+0x30>)
 800d1e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1ea:	601a      	str	r2, [r3, #0]
}
 800d1ec:	bf00      	nop
 800d1ee:	3714      	adds	r7, #20
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr
 800d1f8:	20002c94 	.word	0x20002c94
 800d1fc:	20002d44 	.word	0x20002d44

0800d200 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f103 0208 	add.w	r2, r3, #8
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f04f 32ff 	mov.w	r2, #4294967295
 800d218:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f103 0208 	add.w	r2, r3, #8
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f103 0208 	add.w	r2, r3, #8
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d234:	bf00      	nop
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d240:	b480      	push	{r7}
 800d242:	b083      	sub	sp, #12
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d24e:	bf00      	nop
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr

0800d25a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d25a:	b480      	push	{r7}
 800d25c:	b085      	sub	sp, #20
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	689a      	ldr	r2, [r3, #8]
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	683a      	ldr	r2, [r7, #0]
 800d27e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	683a      	ldr	r2, [r7, #0]
 800d284:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	1c5a      	adds	r2, r3, #1
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	601a      	str	r2, [r3, #0]
}
 800d296:	bf00      	nop
 800d298:	3714      	adds	r7, #20
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2a2:	b480      	push	{r7}
 800d2a4:	b085      	sub	sp, #20
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b8:	d103      	bne.n	800d2c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	691b      	ldr	r3, [r3, #16]
 800d2be:	60fb      	str	r3, [r7, #12]
 800d2c0:	e00c      	b.n	800d2dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	3308      	adds	r3, #8
 800d2c6:	60fb      	str	r3, [r7, #12]
 800d2c8:	e002      	b.n	800d2d0 <vListInsert+0x2e>
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	60fb      	str	r3, [r7, #12]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	68ba      	ldr	r2, [r7, #8]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d2f6      	bcs.n	800d2ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	685a      	ldr	r2, [r3, #4]
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	683a      	ldr	r2, [r7, #0]
 800d2ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	683a      	ldr	r2, [r7, #0]
 800d2f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	1c5a      	adds	r2, r3, #1
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	601a      	str	r2, [r3, #0]
}
 800d308:	bf00      	nop
 800d30a:	3714      	adds	r7, #20
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d314:	b480      	push	{r7}
 800d316:	b085      	sub	sp, #20
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	691b      	ldr	r3, [r3, #16]
 800d320:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	6892      	ldr	r2, [r2, #8]
 800d32a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	6852      	ldr	r2, [r2, #4]
 800d334:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d103      	bne.n	800d348 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	689a      	ldr	r2, [r3, #8]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	1e5a      	subs	r2, r3, #1
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3714      	adds	r7, #20
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d10a      	bne.n	800d392 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d380:	f383 8811 	msr	BASEPRI, r3
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d38e:	bf00      	nop
 800d390:	e7fe      	b.n	800d390 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d392:	f002 fdaf 	bl	800fef4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d39e:	68f9      	ldr	r1, [r7, #12]
 800d3a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3a2:	fb01 f303 	mul.w	r3, r1, r3
 800d3a6:	441a      	add	r2, r3
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	68f9      	ldr	r1, [r7, #12]
 800d3c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3c8:	fb01 f303 	mul.w	r3, r1, r3
 800d3cc:	441a      	add	r2, r3
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	22ff      	movs	r2, #255	; 0xff
 800d3d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	22ff      	movs	r2, #255	; 0xff
 800d3de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d114      	bne.n	800d412 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d01a      	beq.n	800d426 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	3310      	adds	r3, #16
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f001 fcd9 	bl	800edac <xTaskRemoveFromEventList>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d012      	beq.n	800d426 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d400:	4b0c      	ldr	r3, [pc, #48]	; (800d434 <xQueueGenericReset+0xcc>)
 800d402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d406:	601a      	str	r2, [r3, #0]
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	f3bf 8f6f 	isb	sy
 800d410:	e009      	b.n	800d426 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	3310      	adds	r3, #16
 800d416:	4618      	mov	r0, r3
 800d418:	f7ff fef2 	bl	800d200 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	3324      	adds	r3, #36	; 0x24
 800d420:	4618      	mov	r0, r3
 800d422:	f7ff feed 	bl	800d200 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d426:	f002 fd95 	bl	800ff54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d42a:	2301      	movs	r3, #1
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	e000ed04 	.word	0xe000ed04

0800d438 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b08e      	sub	sp, #56	; 0x38
 800d43c:	af02      	add	r7, sp, #8
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
 800d444:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d10a      	bne.n	800d462 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d450:	f383 8811 	msr	BASEPRI, r3
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d45e:	bf00      	nop
 800d460:	e7fe      	b.n	800d460 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10a      	bne.n	800d47e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d47a:	bf00      	nop
 800d47c:	e7fe      	b.n	800d47c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d002      	beq.n	800d48a <xQueueGenericCreateStatic+0x52>
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d001      	beq.n	800d48e <xQueueGenericCreateStatic+0x56>
 800d48a:	2301      	movs	r3, #1
 800d48c:	e000      	b.n	800d490 <xQueueGenericCreateStatic+0x58>
 800d48e:	2300      	movs	r3, #0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d10a      	bne.n	800d4aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	623b      	str	r3, [r7, #32]
}
 800d4a6:	bf00      	nop
 800d4a8:	e7fe      	b.n	800d4a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d102      	bne.n	800d4b6 <xQueueGenericCreateStatic+0x7e>
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d101      	bne.n	800d4ba <xQueueGenericCreateStatic+0x82>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e000      	b.n	800d4bc <xQueueGenericCreateStatic+0x84>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10a      	bne.n	800d4d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c4:	f383 8811 	msr	BASEPRI, r3
 800d4c8:	f3bf 8f6f 	isb	sy
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	61fb      	str	r3, [r7, #28]
}
 800d4d2:	bf00      	nop
 800d4d4:	e7fe      	b.n	800d4d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d4d6:	2350      	movs	r3, #80	; 0x50
 800d4d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	2b50      	cmp	r3, #80	; 0x50
 800d4de:	d00a      	beq.n	800d4f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	61bb      	str	r3, [r7, #24]
}
 800d4f2:	bf00      	nop
 800d4f4:	e7fe      	b.n	800d4f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d4f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00d      	beq.n	800d51e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d504:	2201      	movs	r2, #1
 800d506:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d50a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d510:	9300      	str	r3, [sp, #0]
 800d512:	4613      	mov	r3, r2
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	68b9      	ldr	r1, [r7, #8]
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f000 f83f 	bl	800d59c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d520:	4618      	mov	r0, r3
 800d522:	3730      	adds	r7, #48	; 0x30
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b08a      	sub	sp, #40	; 0x28
 800d52c:	af02      	add	r7, sp, #8
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	4613      	mov	r3, r2
 800d534:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d10a      	bne.n	800d552 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d540:	f383 8811 	msr	BASEPRI, r3
 800d544:	f3bf 8f6f 	isb	sy
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	613b      	str	r3, [r7, #16]
}
 800d54e:	bf00      	nop
 800d550:	e7fe      	b.n	800d550 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	68ba      	ldr	r2, [r7, #8]
 800d556:	fb02 f303 	mul.w	r3, r2, r3
 800d55a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	3350      	adds	r3, #80	; 0x50
 800d560:	4618      	mov	r0, r3
 800d562:	f002 fde9 	bl	8010138 <pvPortMalloc>
 800d566:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d011      	beq.n	800d592 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	3350      	adds	r3, #80	; 0x50
 800d576:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d580:	79fa      	ldrb	r2, [r7, #7]
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	4613      	mov	r3, r2
 800d588:	697a      	ldr	r2, [r7, #20]
 800d58a:	68b9      	ldr	r1, [r7, #8]
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f000 f805 	bl	800d59c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d592:	69bb      	ldr	r3, [r7, #24]
	}
 800d594:	4618      	mov	r0, r3
 800d596:	3720      	adds	r7, #32
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	607a      	str	r2, [r7, #4]
 800d5a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d103      	bne.n	800d5b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	69ba      	ldr	r2, [r7, #24]
 800d5b4:	601a      	str	r2, [r3, #0]
 800d5b6:	e002      	b.n	800d5be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	68fa      	ldr	r2, [r7, #12]
 800d5c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d5ca:	2101      	movs	r1, #1
 800d5cc:	69b8      	ldr	r0, [r7, #24]
 800d5ce:	f7ff fecb 	bl	800d368 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	78fa      	ldrb	r2, [r7, #3]
 800d5d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d5da:	bf00      	nop
 800d5dc:	3710      	adds	r7, #16
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b082      	sub	sp, #8
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d00e      	beq.n	800d60e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d602:	2300      	movs	r3, #0
 800d604:	2200      	movs	r2, #0
 800d606:	2100      	movs	r1, #0
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f887 	bl	800d71c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d60e:	bf00      	nop
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d616:	b580      	push	{r7, lr}
 800d618:	b086      	sub	sp, #24
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	4603      	mov	r3, r0
 800d61e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d620:	2301      	movs	r3, #1
 800d622:	617b      	str	r3, [r7, #20]
 800d624:	2300      	movs	r3, #0
 800d626:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d628:	79fb      	ldrb	r3, [r7, #7]
 800d62a:	461a      	mov	r2, r3
 800d62c:	6939      	ldr	r1, [r7, #16]
 800d62e:	6978      	ldr	r0, [r7, #20]
 800d630:	f7ff ff7a 	bl	800d528 <xQueueGenericCreate>
 800d634:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d636:	68f8      	ldr	r0, [r7, #12]
 800d638:	f7ff ffd3 	bl	800d5e2 <prvInitialiseMutex>

		return xNewQueue;
 800d63c:	68fb      	ldr	r3, [r7, #12]
	}
 800d63e:	4618      	mov	r0, r3
 800d640:	3718      	adds	r7, #24
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d646:	b580      	push	{r7, lr}
 800d648:	b08a      	sub	sp, #40	; 0x28
 800d64a:	af02      	add	r7, sp, #8
 800d64c:	60f8      	str	r0, [r7, #12]
 800d64e:	60b9      	str	r1, [r7, #8]
 800d650:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d10a      	bne.n	800d66e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65c:	f383 8811 	msr	BASEPRI, r3
 800d660:	f3bf 8f6f 	isb	sy
 800d664:	f3bf 8f4f 	dsb	sy
 800d668:	61bb      	str	r3, [r7, #24]
}
 800d66a:	bf00      	nop
 800d66c:	e7fe      	b.n	800d66c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d66e:	68ba      	ldr	r2, [r7, #8]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	429a      	cmp	r2, r3
 800d674:	d90a      	bls.n	800d68c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67a:	f383 8811 	msr	BASEPRI, r3
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f3bf 8f4f 	dsb	sy
 800d686:	617b      	str	r3, [r7, #20]
}
 800d688:	bf00      	nop
 800d68a:	e7fe      	b.n	800d68a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d68c:	2302      	movs	r3, #2
 800d68e:	9300      	str	r3, [sp, #0]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2200      	movs	r2, #0
 800d694:	2100      	movs	r1, #0
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f7ff fece 	bl	800d438 <xQueueGenericCreateStatic>
 800d69c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d002      	beq.n	800d6aa <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	68ba      	ldr	r2, [r7, #8]
 800d6a8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d6aa:	69fb      	ldr	r3, [r7, #28]
	}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3720      	adds	r7, #32
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b086      	sub	sp, #24
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d10a      	bne.n	800d6da <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c8:	f383 8811 	msr	BASEPRI, r3
 800d6cc:	f3bf 8f6f 	isb	sy
 800d6d0:	f3bf 8f4f 	dsb	sy
 800d6d4:	613b      	str	r3, [r7, #16]
}
 800d6d6:	bf00      	nop
 800d6d8:	e7fe      	b.n	800d6d8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d6da:	683a      	ldr	r2, [r7, #0]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d90a      	bls.n	800d6f8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e6:	f383 8811 	msr	BASEPRI, r3
 800d6ea:	f3bf 8f6f 	isb	sy
 800d6ee:	f3bf 8f4f 	dsb	sy
 800d6f2:	60fb      	str	r3, [r7, #12]
}
 800d6f4:	bf00      	nop
 800d6f6:	e7fe      	b.n	800d6f6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d6f8:	2202      	movs	r2, #2
 800d6fa:	2100      	movs	r1, #0
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f7ff ff13 	bl	800d528 <xQueueGenericCreate>
 800d702:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d002      	beq.n	800d710 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	683a      	ldr	r2, [r7, #0]
 800d70e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d710:	697b      	ldr	r3, [r7, #20]
	}
 800d712:	4618      	mov	r0, r3
 800d714:	3718      	adds	r7, #24
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
	...

0800d71c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b08e      	sub	sp, #56	; 0x38
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
 800d728:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d72a:	2300      	movs	r3, #0
 800d72c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d734:	2b00      	cmp	r3, #0
 800d736:	d10a      	bne.n	800d74e <xQueueGenericSend+0x32>
	__asm volatile
 800d738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73c:	f383 8811 	msr	BASEPRI, r3
 800d740:	f3bf 8f6f 	isb	sy
 800d744:	f3bf 8f4f 	dsb	sy
 800d748:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d74a:	bf00      	nop
 800d74c:	e7fe      	b.n	800d74c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d103      	bne.n	800d75c <xQueueGenericSend+0x40>
 800d754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d101      	bne.n	800d760 <xQueueGenericSend+0x44>
 800d75c:	2301      	movs	r3, #1
 800d75e:	e000      	b.n	800d762 <xQueueGenericSend+0x46>
 800d760:	2300      	movs	r3, #0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d10a      	bne.n	800d77c <xQueueGenericSend+0x60>
	__asm volatile
 800d766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76a:	f383 8811 	msr	BASEPRI, r3
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f3bf 8f4f 	dsb	sy
 800d776:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d778:	bf00      	nop
 800d77a:	e7fe      	b.n	800d77a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	2b02      	cmp	r3, #2
 800d780:	d103      	bne.n	800d78a <xQueueGenericSend+0x6e>
 800d782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d786:	2b01      	cmp	r3, #1
 800d788:	d101      	bne.n	800d78e <xQueueGenericSend+0x72>
 800d78a:	2301      	movs	r3, #1
 800d78c:	e000      	b.n	800d790 <xQueueGenericSend+0x74>
 800d78e:	2300      	movs	r3, #0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d10a      	bne.n	800d7aa <xQueueGenericSend+0x8e>
	__asm volatile
 800d794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d798:	f383 8811 	msr	BASEPRI, r3
 800d79c:	f3bf 8f6f 	isb	sy
 800d7a0:	f3bf 8f4f 	dsb	sy
 800d7a4:	623b      	str	r3, [r7, #32]
}
 800d7a6:	bf00      	nop
 800d7a8:	e7fe      	b.n	800d7a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7aa:	f001 fceb 	bl	800f184 <xTaskGetSchedulerState>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d102      	bne.n	800d7ba <xQueueGenericSend+0x9e>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d101      	bne.n	800d7be <xQueueGenericSend+0xa2>
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	e000      	b.n	800d7c0 <xQueueGenericSend+0xa4>
 800d7be:	2300      	movs	r3, #0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d10a      	bne.n	800d7da <xQueueGenericSend+0xbe>
	__asm volatile
 800d7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c8:	f383 8811 	msr	BASEPRI, r3
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	61fb      	str	r3, [r7, #28]
}
 800d7d6:	bf00      	nop
 800d7d8:	e7fe      	b.n	800d7d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7da:	f002 fb8b 	bl	800fef4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d302      	bcc.n	800d7f0 <xQueueGenericSend+0xd4>
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d129      	bne.n	800d844 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7f0:	683a      	ldr	r2, [r7, #0]
 800d7f2:	68b9      	ldr	r1, [r7, #8]
 800d7f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7f6:	f000 fc5e 	bl	800e0b6 <prvCopyDataToQueue>
 800d7fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d800:	2b00      	cmp	r3, #0
 800d802:	d010      	beq.n	800d826 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d806:	3324      	adds	r3, #36	; 0x24
 800d808:	4618      	mov	r0, r3
 800d80a:	f001 facf 	bl	800edac <xTaskRemoveFromEventList>
 800d80e:	4603      	mov	r3, r0
 800d810:	2b00      	cmp	r3, #0
 800d812:	d013      	beq.n	800d83c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d814:	4b3f      	ldr	r3, [pc, #252]	; (800d914 <xQueueGenericSend+0x1f8>)
 800d816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d81a:	601a      	str	r2, [r3, #0]
 800d81c:	f3bf 8f4f 	dsb	sy
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	e00a      	b.n	800d83c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d007      	beq.n	800d83c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d82c:	4b39      	ldr	r3, [pc, #228]	; (800d914 <xQueueGenericSend+0x1f8>)
 800d82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d832:	601a      	str	r2, [r3, #0]
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d83c:	f002 fb8a 	bl	800ff54 <vPortExitCritical>
				return pdPASS;
 800d840:	2301      	movs	r3, #1
 800d842:	e063      	b.n	800d90c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d103      	bne.n	800d852 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d84a:	f002 fb83 	bl	800ff54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d84e:	2300      	movs	r3, #0
 800d850:	e05c      	b.n	800d90c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d854:	2b00      	cmp	r3, #0
 800d856:	d106      	bne.n	800d866 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d858:	f107 0314 	add.w	r3, r7, #20
 800d85c:	4618      	mov	r0, r3
 800d85e:	f001 fb0b 	bl	800ee78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d862:	2301      	movs	r3, #1
 800d864:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d866:	f002 fb75 	bl	800ff54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d86a:	f001 f821 	bl	800e8b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d86e:	f002 fb41 	bl	800fef4 <vPortEnterCritical>
 800d872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d878:	b25b      	sxtb	r3, r3
 800d87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d87e:	d103      	bne.n	800d888 <xQueueGenericSend+0x16c>
 800d880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d882:	2200      	movs	r2, #0
 800d884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d88e:	b25b      	sxtb	r3, r3
 800d890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d894:	d103      	bne.n	800d89e <xQueueGenericSend+0x182>
 800d896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d898:	2200      	movs	r2, #0
 800d89a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d89e:	f002 fb59 	bl	800ff54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8a2:	1d3a      	adds	r2, r7, #4
 800d8a4:	f107 0314 	add.w	r3, r7, #20
 800d8a8:	4611      	mov	r1, r2
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f001 fafa 	bl	800eea4 <xTaskCheckForTimeOut>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d124      	bne.n	800d900 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d8b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8b8:	f000 fcf5 	bl	800e2a6 <prvIsQueueFull>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d018      	beq.n	800d8f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c4:	3310      	adds	r3, #16
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	4611      	mov	r1, r2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f001 fa1e 	bl	800ed0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d8d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8d2:	f000 fc80 	bl	800e1d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d8d6:	f001 f831 	bl	800e93c <xTaskResumeAll>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f47f af7c 	bne.w	800d7da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d8e2:	4b0c      	ldr	r3, [pc, #48]	; (800d914 <xQueueGenericSend+0x1f8>)
 800d8e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8e8:	601a      	str	r2, [r3, #0]
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	e772      	b.n	800d7da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d8f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8f6:	f000 fc6e 	bl	800e1d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8fa:	f001 f81f 	bl	800e93c <xTaskResumeAll>
 800d8fe:	e76c      	b.n	800d7da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d902:	f000 fc68 	bl	800e1d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d906:	f001 f819 	bl	800e93c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d90a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3738      	adds	r7, #56	; 0x38
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	e000ed04 	.word	0xe000ed04

0800d918 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b090      	sub	sp, #64	; 0x40
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
 800d924:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d10a      	bne.n	800d946 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d934:	f383 8811 	msr	BASEPRI, r3
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d942:	bf00      	nop
 800d944:	e7fe      	b.n	800d944 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d103      	bne.n	800d954 <xQueueGenericSendFromISR+0x3c>
 800d94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d950:	2b00      	cmp	r3, #0
 800d952:	d101      	bne.n	800d958 <xQueueGenericSendFromISR+0x40>
 800d954:	2301      	movs	r3, #1
 800d956:	e000      	b.n	800d95a <xQueueGenericSendFromISR+0x42>
 800d958:	2300      	movs	r3, #0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d10a      	bne.n	800d974 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d962:	f383 8811 	msr	BASEPRI, r3
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	f3bf 8f4f 	dsb	sy
 800d96e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d970:	bf00      	nop
 800d972:	e7fe      	b.n	800d972 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	2b02      	cmp	r3, #2
 800d978:	d103      	bne.n	800d982 <xQueueGenericSendFromISR+0x6a>
 800d97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d101      	bne.n	800d986 <xQueueGenericSendFromISR+0x6e>
 800d982:	2301      	movs	r3, #1
 800d984:	e000      	b.n	800d988 <xQueueGenericSendFromISR+0x70>
 800d986:	2300      	movs	r3, #0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d10a      	bne.n	800d9a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d990:	f383 8811 	msr	BASEPRI, r3
 800d994:	f3bf 8f6f 	isb	sy
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	623b      	str	r3, [r7, #32]
}
 800d99e:	bf00      	nop
 800d9a0:	e7fe      	b.n	800d9a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9a2:	f002 fb89 	bl	80100b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d9a6:	f3ef 8211 	mrs	r2, BASEPRI
 800d9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ae:	f383 8811 	msr	BASEPRI, r3
 800d9b2:	f3bf 8f6f 	isb	sy
 800d9b6:	f3bf 8f4f 	dsb	sy
 800d9ba:	61fa      	str	r2, [r7, #28]
 800d9bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d9be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d9c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d302      	bcc.n	800d9d4 <xQueueGenericSendFromISR+0xbc>
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	2b02      	cmp	r3, #2
 800d9d2:	d12f      	bne.n	800da34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d9e4:	683a      	ldr	r2, [r7, #0]
 800d9e6:	68b9      	ldr	r1, [r7, #8]
 800d9e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9ea:	f000 fb64 	bl	800e0b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d9ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9f6:	d112      	bne.n	800da1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d016      	beq.n	800da2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da02:	3324      	adds	r3, #36	; 0x24
 800da04:	4618      	mov	r0, r3
 800da06:	f001 f9d1 	bl	800edac <xTaskRemoveFromEventList>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00e      	beq.n	800da2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d00b      	beq.n	800da2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2201      	movs	r2, #1
 800da1a:	601a      	str	r2, [r3, #0]
 800da1c:	e007      	b.n	800da2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800da1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800da22:	3301      	adds	r3, #1
 800da24:	b2db      	uxtb	r3, r3
 800da26:	b25a      	sxtb	r2, r3
 800da28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800da2e:	2301      	movs	r3, #1
 800da30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800da32:	e001      	b.n	800da38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800da34:	2300      	movs	r3, #0
 800da36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800da42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800da46:	4618      	mov	r0, r3
 800da48:	3740      	adds	r7, #64	; 0x40
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800da4e:	b580      	push	{r7, lr}
 800da50:	b08e      	sub	sp, #56	; 0x38
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
 800da56:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800da5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d10a      	bne.n	800da78 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800da62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da66:	f383 8811 	msr	BASEPRI, r3
 800da6a:	f3bf 8f6f 	isb	sy
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	623b      	str	r3, [r7, #32]
}
 800da74:	bf00      	nop
 800da76:	e7fe      	b.n	800da76 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00a      	beq.n	800da96 <xQueueGiveFromISR+0x48>
	__asm volatile
 800da80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	61fb      	str	r3, [r7, #28]
}
 800da92:	bf00      	nop
 800da94:	e7fe      	b.n	800da94 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800da96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d103      	bne.n	800daa6 <xQueueGiveFromISR+0x58>
 800da9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d101      	bne.n	800daaa <xQueueGiveFromISR+0x5c>
 800daa6:	2301      	movs	r3, #1
 800daa8:	e000      	b.n	800daac <xQueueGiveFromISR+0x5e>
 800daaa:	2300      	movs	r3, #0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d10a      	bne.n	800dac6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800dab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab4:	f383 8811 	msr	BASEPRI, r3
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	61bb      	str	r3, [r7, #24]
}
 800dac2:	bf00      	nop
 800dac4:	e7fe      	b.n	800dac4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dac6:	f002 faf7 	bl	80100b8 <vPortValidateInterruptPriority>
	__asm volatile
 800daca:	f3ef 8211 	mrs	r2, BASEPRI
 800dace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad2:	f383 8811 	msr	BASEPRI, r3
 800dad6:	f3bf 8f6f 	isb	sy
 800dada:	f3bf 8f4f 	dsb	sy
 800dade:	617a      	str	r2, [r7, #20]
 800dae0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800dae2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dae4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800daec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d22b      	bcs.n	800db4e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800daf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dafc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db02:	1c5a      	adds	r2, r3, #1
 800db04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db06:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db10:	d112      	bne.n	800db38 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db16:	2b00      	cmp	r3, #0
 800db18:	d016      	beq.n	800db48 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1c:	3324      	adds	r3, #36	; 0x24
 800db1e:	4618      	mov	r0, r3
 800db20:	f001 f944 	bl	800edac <xTaskRemoveFromEventList>
 800db24:	4603      	mov	r3, r0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00e      	beq.n	800db48 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00b      	beq.n	800db48 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	2201      	movs	r2, #1
 800db34:	601a      	str	r2, [r3, #0]
 800db36:	e007      	b.n	800db48 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800db38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db3c:	3301      	adds	r3, #1
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	b25a      	sxtb	r2, r3
 800db42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800db48:	2301      	movs	r3, #1
 800db4a:	637b      	str	r3, [r7, #52]	; 0x34
 800db4c:	e001      	b.n	800db52 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800db4e:	2300      	movs	r3, #0
 800db50:	637b      	str	r3, [r7, #52]	; 0x34
 800db52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db54:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f383 8811 	msr	BASEPRI, r3
}
 800db5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800db60:	4618      	mov	r0, r3
 800db62:	3738      	adds	r7, #56	; 0x38
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b08c      	sub	sp, #48	; 0x30
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800db74:	2300      	movs	r3, #0
 800db76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d10a      	bne.n	800db98 <xQueueReceive+0x30>
	__asm volatile
 800db82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db86:	f383 8811 	msr	BASEPRI, r3
 800db8a:	f3bf 8f6f 	isb	sy
 800db8e:	f3bf 8f4f 	dsb	sy
 800db92:	623b      	str	r3, [r7, #32]
}
 800db94:	bf00      	nop
 800db96:	e7fe      	b.n	800db96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d103      	bne.n	800dba6 <xQueueReceive+0x3e>
 800db9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d101      	bne.n	800dbaa <xQueueReceive+0x42>
 800dba6:	2301      	movs	r3, #1
 800dba8:	e000      	b.n	800dbac <xQueueReceive+0x44>
 800dbaa:	2300      	movs	r3, #0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10a      	bne.n	800dbc6 <xQueueReceive+0x5e>
	__asm volatile
 800dbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb4:	f383 8811 	msr	BASEPRI, r3
 800dbb8:	f3bf 8f6f 	isb	sy
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	61fb      	str	r3, [r7, #28]
}
 800dbc2:	bf00      	nop
 800dbc4:	e7fe      	b.n	800dbc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbc6:	f001 fadd 	bl	800f184 <xTaskGetSchedulerState>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d102      	bne.n	800dbd6 <xQueueReceive+0x6e>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d101      	bne.n	800dbda <xQueueReceive+0x72>
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e000      	b.n	800dbdc <xQueueReceive+0x74>
 800dbda:	2300      	movs	r3, #0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d10a      	bne.n	800dbf6 <xQueueReceive+0x8e>
	__asm volatile
 800dbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	61bb      	str	r3, [r7, #24]
}
 800dbf2:	bf00      	nop
 800dbf4:	e7fe      	b.n	800dbf4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dbf6:	f002 f97d 	bl	800fef4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbfe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d01f      	beq.n	800dc46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc06:	68b9      	ldr	r1, [r7, #8]
 800dc08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc0a:	f000 fabe 	bl	800e18a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc10:	1e5a      	subs	r2, r3, #1
 800dc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc18:	691b      	ldr	r3, [r3, #16]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00f      	beq.n	800dc3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc20:	3310      	adds	r3, #16
 800dc22:	4618      	mov	r0, r3
 800dc24:	f001 f8c2 	bl	800edac <xTaskRemoveFromEventList>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d007      	beq.n	800dc3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dc2e:	4b3d      	ldr	r3, [pc, #244]	; (800dd24 <xQueueReceive+0x1bc>)
 800dc30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc34:	601a      	str	r2, [r3, #0]
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc3e:	f002 f989 	bl	800ff54 <vPortExitCritical>
				return pdPASS;
 800dc42:	2301      	movs	r3, #1
 800dc44:	e069      	b.n	800dd1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d103      	bne.n	800dc54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc4c:	f002 f982 	bl	800ff54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc50:	2300      	movs	r3, #0
 800dc52:	e062      	b.n	800dd1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d106      	bne.n	800dc68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc5a:	f107 0310 	add.w	r3, r7, #16
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f001 f90a 	bl	800ee78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc64:	2301      	movs	r3, #1
 800dc66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc68:	f002 f974 	bl	800ff54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc6c:	f000 fe20 	bl	800e8b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc70:	f002 f940 	bl	800fef4 <vPortEnterCritical>
 800dc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc7a:	b25b      	sxtb	r3, r3
 800dc7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc80:	d103      	bne.n	800dc8a <xQueueReceive+0x122>
 800dc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc84:	2200      	movs	r2, #0
 800dc86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc90:	b25b      	sxtb	r3, r3
 800dc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc96:	d103      	bne.n	800dca0 <xQueueReceive+0x138>
 800dc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dca0:	f002 f958 	bl	800ff54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dca4:	1d3a      	adds	r2, r7, #4
 800dca6:	f107 0310 	add.w	r3, r7, #16
 800dcaa:	4611      	mov	r1, r2
 800dcac:	4618      	mov	r0, r3
 800dcae:	f001 f8f9 	bl	800eea4 <xTaskCheckForTimeOut>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d123      	bne.n	800dd00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcba:	f000 fade 	bl	800e27a <prvIsQueueEmpty>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d017      	beq.n	800dcf4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	3324      	adds	r3, #36	; 0x24
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	4611      	mov	r1, r2
 800dccc:	4618      	mov	r0, r3
 800dcce:	f001 f81d 	bl	800ed0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dcd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcd4:	f000 fa7f 	bl	800e1d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dcd8:	f000 fe30 	bl	800e93c <xTaskResumeAll>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d189      	bne.n	800dbf6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dce2:	4b10      	ldr	r3, [pc, #64]	; (800dd24 <xQueueReceive+0x1bc>)
 800dce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dce8:	601a      	str	r2, [r3, #0]
 800dcea:	f3bf 8f4f 	dsb	sy
 800dcee:	f3bf 8f6f 	isb	sy
 800dcf2:	e780      	b.n	800dbf6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dcf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcf6:	f000 fa6e 	bl	800e1d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcfa:	f000 fe1f 	bl	800e93c <xTaskResumeAll>
 800dcfe:	e77a      	b.n	800dbf6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dd00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd02:	f000 fa68 	bl	800e1d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd06:	f000 fe19 	bl	800e93c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd0c:	f000 fab5 	bl	800e27a <prvIsQueueEmpty>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	f43f af6f 	beq.w	800dbf6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3730      	adds	r7, #48	; 0x30
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	e000ed04 	.word	0xe000ed04

0800dd28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b08e      	sub	sp, #56	; 0x38
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd32:	2300      	movs	r3, #0
 800dd34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d10a      	bne.n	800dd5a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800dd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd48:	f383 8811 	msr	BASEPRI, r3
 800dd4c:	f3bf 8f6f 	isb	sy
 800dd50:	f3bf 8f4f 	dsb	sy
 800dd54:	623b      	str	r3, [r7, #32]
}
 800dd56:	bf00      	nop
 800dd58:	e7fe      	b.n	800dd58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00a      	beq.n	800dd78 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800dd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd66:	f383 8811 	msr	BASEPRI, r3
 800dd6a:	f3bf 8f6f 	isb	sy
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	61fb      	str	r3, [r7, #28]
}
 800dd74:	bf00      	nop
 800dd76:	e7fe      	b.n	800dd76 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd78:	f001 fa04 	bl	800f184 <xTaskGetSchedulerState>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d102      	bne.n	800dd88 <xQueueSemaphoreTake+0x60>
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d101      	bne.n	800dd8c <xQueueSemaphoreTake+0x64>
 800dd88:	2301      	movs	r3, #1
 800dd8a:	e000      	b.n	800dd8e <xQueueSemaphoreTake+0x66>
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d10a      	bne.n	800dda8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800dd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd96:	f383 8811 	msr	BASEPRI, r3
 800dd9a:	f3bf 8f6f 	isb	sy
 800dd9e:	f3bf 8f4f 	dsb	sy
 800dda2:	61bb      	str	r3, [r7, #24]
}
 800dda4:	bf00      	nop
 800dda6:	e7fe      	b.n	800dda6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dda8:	f002 f8a4 	bl	800fef4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ddac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ddb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d024      	beq.n	800de02 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ddb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddba:	1e5a      	subs	r2, r3, #1
 800ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ddc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d104      	bne.n	800ddd2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ddc8:	f001 fb52 	bl	800f470 <pvTaskIncrementMutexHeldCount>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd4:	691b      	ldr	r3, [r3, #16]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00f      	beq.n	800ddfa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dddc:	3310      	adds	r3, #16
 800ddde:	4618      	mov	r0, r3
 800dde0:	f000 ffe4 	bl	800edac <xTaskRemoveFromEventList>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d007      	beq.n	800ddfa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ddea:	4b54      	ldr	r3, [pc, #336]	; (800df3c <xQueueSemaphoreTake+0x214>)
 800ddec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddf0:	601a      	str	r2, [r3, #0]
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ddfa:	f002 f8ab 	bl	800ff54 <vPortExitCritical>
				return pdPASS;
 800ddfe:	2301      	movs	r3, #1
 800de00:	e097      	b.n	800df32 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d111      	bne.n	800de2c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800de08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00a      	beq.n	800de24 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800de0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de12:	f383 8811 	msr	BASEPRI, r3
 800de16:	f3bf 8f6f 	isb	sy
 800de1a:	f3bf 8f4f 	dsb	sy
 800de1e:	617b      	str	r3, [r7, #20]
}
 800de20:	bf00      	nop
 800de22:	e7fe      	b.n	800de22 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800de24:	f002 f896 	bl	800ff54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de28:	2300      	movs	r3, #0
 800de2a:	e082      	b.n	800df32 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d106      	bne.n	800de40 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de32:	f107 030c 	add.w	r3, r7, #12
 800de36:	4618      	mov	r0, r3
 800de38:	f001 f81e 	bl	800ee78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de3c:	2301      	movs	r3, #1
 800de3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de40:	f002 f888 	bl	800ff54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de44:	f000 fd34 	bl	800e8b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de48:	f002 f854 	bl	800fef4 <vPortEnterCritical>
 800de4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de52:	b25b      	sxtb	r3, r3
 800de54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de58:	d103      	bne.n	800de62 <xQueueSemaphoreTake+0x13a>
 800de5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5c:	2200      	movs	r2, #0
 800de5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de68:	b25b      	sxtb	r3, r3
 800de6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de6e:	d103      	bne.n	800de78 <xQueueSemaphoreTake+0x150>
 800de70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de72:	2200      	movs	r2, #0
 800de74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de78:	f002 f86c 	bl	800ff54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de7c:	463a      	mov	r2, r7
 800de7e:	f107 030c 	add.w	r3, r7, #12
 800de82:	4611      	mov	r1, r2
 800de84:	4618      	mov	r0, r3
 800de86:	f001 f80d 	bl	800eea4 <xTaskCheckForTimeOut>
 800de8a:	4603      	mov	r3, r0
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d132      	bne.n	800def6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de92:	f000 f9f2 	bl	800e27a <prvIsQueueEmpty>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d026      	beq.n	800deea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d109      	bne.n	800deb8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800dea4:	f002 f826 	bl	800fef4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	4618      	mov	r0, r3
 800deae:	f001 f987 	bl	800f1c0 <xTaskPriorityInherit>
 800deb2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800deb4:	f002 f84e 	bl	800ff54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800deb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deba:	3324      	adds	r3, #36	; 0x24
 800debc:	683a      	ldr	r2, [r7, #0]
 800debe:	4611      	mov	r1, r2
 800dec0:	4618      	mov	r0, r3
 800dec2:	f000 ff23 	bl	800ed0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dec8:	f000 f985 	bl	800e1d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800decc:	f000 fd36 	bl	800e93c <xTaskResumeAll>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	f47f af68 	bne.w	800dda8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ded8:	4b18      	ldr	r3, [pc, #96]	; (800df3c <xQueueSemaphoreTake+0x214>)
 800deda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dede:	601a      	str	r2, [r3, #0]
 800dee0:	f3bf 8f4f 	dsb	sy
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	e75e      	b.n	800dda8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800deea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800deec:	f000 f973 	bl	800e1d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800def0:	f000 fd24 	bl	800e93c <xTaskResumeAll>
 800def4:	e758      	b.n	800dda8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800def6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800def8:	f000 f96d 	bl	800e1d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800defc:	f000 fd1e 	bl	800e93c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df02:	f000 f9ba 	bl	800e27a <prvIsQueueEmpty>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f43f af4d 	beq.w	800dda8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800df0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00d      	beq.n	800df30 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800df14:	f001 ffee 	bl	800fef4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800df18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df1a:	f000 f8b4 	bl	800e086 <prvGetDisinheritPriorityAfterTimeout>
 800df1e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800df20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df22:	689b      	ldr	r3, [r3, #8]
 800df24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df26:	4618      	mov	r0, r3
 800df28:	f001 fa20 	bl	800f36c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800df2c:	f002 f812 	bl	800ff54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800df30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800df32:	4618      	mov	r0, r3
 800df34:	3738      	adds	r7, #56	; 0x38
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	e000ed04 	.word	0xe000ed04

0800df40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b08e      	sub	sp, #56	; 0x38
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800df50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10a      	bne.n	800df6c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800df56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df5a:	f383 8811 	msr	BASEPRI, r3
 800df5e:	f3bf 8f6f 	isb	sy
 800df62:	f3bf 8f4f 	dsb	sy
 800df66:	623b      	str	r3, [r7, #32]
}
 800df68:	bf00      	nop
 800df6a:	e7fe      	b.n	800df6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d103      	bne.n	800df7a <xQueueReceiveFromISR+0x3a>
 800df72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df76:	2b00      	cmp	r3, #0
 800df78:	d101      	bne.n	800df7e <xQueueReceiveFromISR+0x3e>
 800df7a:	2301      	movs	r3, #1
 800df7c:	e000      	b.n	800df80 <xQueueReceiveFromISR+0x40>
 800df7e:	2300      	movs	r3, #0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d10a      	bne.n	800df9a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800df84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df88:	f383 8811 	msr	BASEPRI, r3
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f3bf 8f4f 	dsb	sy
 800df94:	61fb      	str	r3, [r7, #28]
}
 800df96:	bf00      	nop
 800df98:	e7fe      	b.n	800df98 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df9a:	f002 f88d 	bl	80100b8 <vPortValidateInterruptPriority>
	__asm volatile
 800df9e:	f3ef 8211 	mrs	r2, BASEPRI
 800dfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa6:	f383 8811 	msr	BASEPRI, r3
 800dfaa:	f3bf 8f6f 	isb	sy
 800dfae:	f3bf 8f4f 	dsb	sy
 800dfb2:	61ba      	str	r2, [r7, #24]
 800dfb4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dfb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dfb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d02f      	beq.n	800e026 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dfd0:	68b9      	ldr	r1, [r7, #8]
 800dfd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfd4:	f000 f8d9 	bl	800e18a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfda:	1e5a      	subs	r2, r3, #1
 800dfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfde:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dfe0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dfe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe8:	d112      	bne.n	800e010 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfec:	691b      	ldr	r3, [r3, #16]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d016      	beq.n	800e020 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff4:	3310      	adds	r3, #16
 800dff6:	4618      	mov	r0, r3
 800dff8:	f000 fed8 	bl	800edac <xTaskRemoveFromEventList>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00e      	beq.n	800e020 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00b      	beq.n	800e020 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2201      	movs	r2, #1
 800e00c:	601a      	str	r2, [r3, #0]
 800e00e:	e007      	b.n	800e020 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e014:	3301      	adds	r3, #1
 800e016:	b2db      	uxtb	r3, r3
 800e018:	b25a      	sxtb	r2, r3
 800e01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e020:	2301      	movs	r3, #1
 800e022:	637b      	str	r3, [r7, #52]	; 0x34
 800e024:	e001      	b.n	800e02a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e026:	2300      	movs	r3, #0
 800e028:	637b      	str	r3, [r7, #52]	; 0x34
 800e02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	f383 8811 	msr	BASEPRI, r3
}
 800e034:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3738      	adds	r7, #56	; 0x38
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d10a      	bne.n	800e068 <vQueueDelete+0x28>
	__asm volatile
 800e052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e056:	f383 8811 	msr	BASEPRI, r3
 800e05a:	f3bf 8f6f 	isb	sy
 800e05e:	f3bf 8f4f 	dsb	sy
 800e062:	60bb      	str	r3, [r7, #8]
}
 800e064:	bf00      	nop
 800e066:	e7fe      	b.n	800e066 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e068:	68f8      	ldr	r0, [r7, #12]
 800e06a:	f000 f95f 	bl	800e32c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e074:	2b00      	cmp	r3, #0
 800e076:	d102      	bne.n	800e07e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f002 f929 	bl	80102d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e07e:	bf00      	nop
 800e080:	3710      	adds	r7, #16
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}

0800e086 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e086:	b480      	push	{r7}
 800e088:	b085      	sub	sp, #20
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e092:	2b00      	cmp	r3, #0
 800e094:	d006      	beq.n	800e0a4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e0a0:	60fb      	str	r3, [r7, #12]
 800e0a2:	e001      	b.n	800e0a8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
	}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3714      	adds	r7, #20
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr

0800e0b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b086      	sub	sp, #24
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	60f8      	str	r0, [r7, #12]
 800e0be:	60b9      	str	r1, [r7, #8]
 800e0c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d10d      	bne.n	800e0f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d14d      	bne.n	800e178 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	689b      	ldr	r3, [r3, #8]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f001 f8d5 	bl	800f290 <xTaskPriorityDisinherit>
 800e0e6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	609a      	str	r2, [r3, #8]
 800e0ee:	e043      	b.n	800e178 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d119      	bne.n	800e12a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6858      	ldr	r0, [r3, #4]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0fe:	461a      	mov	r2, r3
 800e100:	68b9      	ldr	r1, [r7, #8]
 800e102:	f004 f857 	bl	80121b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	685a      	ldr	r2, [r3, #4]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e10e:	441a      	add	r2, r3
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	685a      	ldr	r2, [r3, #4]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d32b      	bcc.n	800e178 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681a      	ldr	r2, [r3, #0]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	605a      	str	r2, [r3, #4]
 800e128:	e026      	b.n	800e178 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	68d8      	ldr	r0, [r3, #12]
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e132:	461a      	mov	r2, r3
 800e134:	68b9      	ldr	r1, [r7, #8]
 800e136:	f004 f83d 	bl	80121b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	68da      	ldr	r2, [r3, #12]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e142:	425b      	negs	r3, r3
 800e144:	441a      	add	r2, r3
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	68da      	ldr	r2, [r3, #12]
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	429a      	cmp	r2, r3
 800e154:	d207      	bcs.n	800e166 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	689a      	ldr	r2, [r3, #8]
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e15e:	425b      	negs	r3, r3
 800e160:	441a      	add	r2, r3
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2b02      	cmp	r3, #2
 800e16a:	d105      	bne.n	800e178 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d002      	beq.n	800e178 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	3b01      	subs	r3, #1
 800e176:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	1c5a      	adds	r2, r3, #1
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e180:	697b      	ldr	r3, [r7, #20]
}
 800e182:	4618      	mov	r0, r3
 800e184:	3718      	adds	r7, #24
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b082      	sub	sp, #8
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
 800e192:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d018      	beq.n	800e1ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	68da      	ldr	r2, [r3, #12]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1a4:	441a      	add	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	68da      	ldr	r2, [r3, #12]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d303      	bcc.n	800e1be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	68d9      	ldr	r1, [r3, #12]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	6838      	ldr	r0, [r7, #0]
 800e1ca:	f003 fff3 	bl	80121b4 <memcpy>
	}
}
 800e1ce:	bf00      	nop
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b084      	sub	sp, #16
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e1de:	f001 fe89 	bl	800fef4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e1e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e1ea:	e011      	b.n	800e210 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d012      	beq.n	800e21a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	3324      	adds	r3, #36	; 0x24
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f000 fdd7 	bl	800edac <xTaskRemoveFromEventList>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d001      	beq.n	800e208 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e204:	f000 feb0 	bl	800ef68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e208:	7bfb      	ldrb	r3, [r7, #15]
 800e20a:	3b01      	subs	r3, #1
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e214:	2b00      	cmp	r3, #0
 800e216:	dce9      	bgt.n	800e1ec <prvUnlockQueue+0x16>
 800e218:	e000      	b.n	800e21c <prvUnlockQueue+0x46>
					break;
 800e21a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	22ff      	movs	r2, #255	; 0xff
 800e220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e224:	f001 fe96 	bl	800ff54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e228:	f001 fe64 	bl	800fef4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e232:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e234:	e011      	b.n	800e25a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	691b      	ldr	r3, [r3, #16]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d012      	beq.n	800e264 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	3310      	adds	r3, #16
 800e242:	4618      	mov	r0, r3
 800e244:	f000 fdb2 	bl	800edac <xTaskRemoveFromEventList>
 800e248:	4603      	mov	r3, r0
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d001      	beq.n	800e252 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e24e:	f000 fe8b 	bl	800ef68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e252:	7bbb      	ldrb	r3, [r7, #14]
 800e254:	3b01      	subs	r3, #1
 800e256:	b2db      	uxtb	r3, r3
 800e258:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e25a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	dce9      	bgt.n	800e236 <prvUnlockQueue+0x60>
 800e262:	e000      	b.n	800e266 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e264:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	22ff      	movs	r2, #255	; 0xff
 800e26a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e26e:	f001 fe71 	bl	800ff54 <vPortExitCritical>
}
 800e272:	bf00      	nop
 800e274:	3710      	adds	r7, #16
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b084      	sub	sp, #16
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e282:	f001 fe37 	bl	800fef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d102      	bne.n	800e294 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e28e:	2301      	movs	r3, #1
 800e290:	60fb      	str	r3, [r7, #12]
 800e292:	e001      	b.n	800e298 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e294:	2300      	movs	r3, #0
 800e296:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e298:	f001 fe5c 	bl	800ff54 <vPortExitCritical>

	return xReturn;
 800e29c:	68fb      	ldr	r3, [r7, #12]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b084      	sub	sp, #16
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e2ae:	f001 fe21 	bl	800fef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d102      	bne.n	800e2c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	60fb      	str	r3, [r7, #12]
 800e2c2:	e001      	b.n	800e2c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e2c8:	f001 fe44 	bl	800ff54 <vPortExitCritical>

	return xReturn;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
	...

0800e2d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e2d8:	b480      	push	{r7}
 800e2da:	b085      	sub	sp, #20
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	60fb      	str	r3, [r7, #12]
 800e2e6:	e014      	b.n	800e312 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e2e8:	4a0f      	ldr	r2, [pc, #60]	; (800e328 <vQueueAddToRegistry+0x50>)
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d10b      	bne.n	800e30c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e2f4:	490c      	ldr	r1, [pc, #48]	; (800e328 <vQueueAddToRegistry+0x50>)
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	683a      	ldr	r2, [r7, #0]
 800e2fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e2fe:	4a0a      	ldr	r2, [pc, #40]	; (800e328 <vQueueAddToRegistry+0x50>)
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	00db      	lsls	r3, r3, #3
 800e304:	4413      	add	r3, r2
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e30a:	e006      	b.n	800e31a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	3301      	adds	r3, #1
 800e310:	60fb      	str	r3, [r7, #12]
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2b07      	cmp	r3, #7
 800e316:	d9e7      	bls.n	800e2e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e318:	bf00      	nop
 800e31a:	bf00      	nop
 800e31c:	3714      	adds	r7, #20
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr
 800e326:	bf00      	nop
 800e328:	20003144 	.word	0x20003144

0800e32c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e32c:	b480      	push	{r7}
 800e32e:	b085      	sub	sp, #20
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e334:	2300      	movs	r3, #0
 800e336:	60fb      	str	r3, [r7, #12]
 800e338:	e016      	b.n	800e368 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e33a:	4a10      	ldr	r2, [pc, #64]	; (800e37c <vQueueUnregisterQueue+0x50>)
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	00db      	lsls	r3, r3, #3
 800e340:	4413      	add	r3, r2
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	429a      	cmp	r2, r3
 800e348:	d10b      	bne.n	800e362 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e34a:	4a0c      	ldr	r2, [pc, #48]	; (800e37c <vQueueUnregisterQueue+0x50>)
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2100      	movs	r1, #0
 800e350:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e354:	4a09      	ldr	r2, [pc, #36]	; (800e37c <vQueueUnregisterQueue+0x50>)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	00db      	lsls	r3, r3, #3
 800e35a:	4413      	add	r3, r2
 800e35c:	2200      	movs	r2, #0
 800e35e:	605a      	str	r2, [r3, #4]
				break;
 800e360:	e006      	b.n	800e370 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	3301      	adds	r3, #1
 800e366:	60fb      	str	r3, [r7, #12]
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2b07      	cmp	r3, #7
 800e36c:	d9e5      	bls.n	800e33a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e36e:	bf00      	nop
 800e370:	bf00      	nop
 800e372:	3714      	adds	r7, #20
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr
 800e37c:	20003144 	.word	0x20003144

0800e380 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e380:	b580      	push	{r7, lr}
 800e382:	b086      	sub	sp, #24
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e390:	f001 fdb0 	bl	800fef4 <vPortEnterCritical>
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e39a:	b25b      	sxtb	r3, r3
 800e39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a0:	d103      	bne.n	800e3aa <vQueueWaitForMessageRestricted+0x2a>
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3b0:	b25b      	sxtb	r3, r3
 800e3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b6:	d103      	bne.n	800e3c0 <vQueueWaitForMessageRestricted+0x40>
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3c0:	f001 fdc8 	bl	800ff54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d106      	bne.n	800e3da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	3324      	adds	r3, #36	; 0x24
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	68b9      	ldr	r1, [r7, #8]
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f000 fcbd 	bl	800ed54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e3da:	6978      	ldr	r0, [r7, #20]
 800e3dc:	f7ff fefb 	bl	800e1d6 <prvUnlockQueue>
	}
 800e3e0:	bf00      	nop
 800e3e2:	3718      	adds	r7, #24
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b08e      	sub	sp, #56	; 0x38
 800e3ec:	af04      	add	r7, sp, #16
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	607a      	str	r2, [r7, #4]
 800e3f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d10a      	bne.n	800e412 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e400:	f383 8811 	msr	BASEPRI, r3
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	f3bf 8f4f 	dsb	sy
 800e40c:	623b      	str	r3, [r7, #32]
}
 800e40e:	bf00      	nop
 800e410:	e7fe      	b.n	800e410 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e414:	2b00      	cmp	r3, #0
 800e416:	d10a      	bne.n	800e42e <xTaskCreateStatic+0x46>
	__asm volatile
 800e418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41c:	f383 8811 	msr	BASEPRI, r3
 800e420:	f3bf 8f6f 	isb	sy
 800e424:	f3bf 8f4f 	dsb	sy
 800e428:	61fb      	str	r3, [r7, #28]
}
 800e42a:	bf00      	nop
 800e42c:	e7fe      	b.n	800e42c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e42e:	23b0      	movs	r3, #176	; 0xb0
 800e430:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	2bb0      	cmp	r3, #176	; 0xb0
 800e436:	d00a      	beq.n	800e44e <xTaskCreateStatic+0x66>
	__asm volatile
 800e438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43c:	f383 8811 	msr	BASEPRI, r3
 800e440:	f3bf 8f6f 	isb	sy
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	61bb      	str	r3, [r7, #24]
}
 800e44a:	bf00      	nop
 800e44c:	e7fe      	b.n	800e44c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e44e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e452:	2b00      	cmp	r3, #0
 800e454:	d01e      	beq.n	800e494 <xTaskCreateStatic+0xac>
 800e456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d01b      	beq.n	800e494 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e464:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e468:	2202      	movs	r2, #2
 800e46a:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e46e:	2300      	movs	r3, #0
 800e470:	9303      	str	r3, [sp, #12]
 800e472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e474:	9302      	str	r3, [sp, #8]
 800e476:	f107 0314 	add.w	r3, r7, #20
 800e47a:	9301      	str	r3, [sp, #4]
 800e47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	68b9      	ldr	r1, [r7, #8]
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f000 f850 	bl	800e52c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e48c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e48e:	f000 f8f9 	bl	800e684 <prvAddNewTaskToReadyList>
 800e492:	e001      	b.n	800e498 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e494:	2300      	movs	r3, #0
 800e496:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e498:	697b      	ldr	r3, [r7, #20]
	}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3728      	adds	r7, #40	; 0x28
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}

0800e4a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e4a2:	b580      	push	{r7, lr}
 800e4a4:	b08c      	sub	sp, #48	; 0x30
 800e4a6:	af04      	add	r7, sp, #16
 800e4a8:	60f8      	str	r0, [r7, #12]
 800e4aa:	60b9      	str	r1, [r7, #8]
 800e4ac:	603b      	str	r3, [r7, #0]
 800e4ae:	4613      	mov	r3, r2
 800e4b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e4b2:	88fb      	ldrh	r3, [r7, #6]
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f001 fe3e 	bl	8010138 <pvPortMalloc>
 800e4bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00e      	beq.n	800e4e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e4c4:	20b0      	movs	r0, #176	; 0xb0
 800e4c6:	f001 fe37 	bl	8010138 <pvPortMalloc>
 800e4ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d003      	beq.n	800e4da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e4d2:	69fb      	ldr	r3, [r7, #28]
 800e4d4:	697a      	ldr	r2, [r7, #20]
 800e4d6:	631a      	str	r2, [r3, #48]	; 0x30
 800e4d8:	e005      	b.n	800e4e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e4da:	6978      	ldr	r0, [r7, #20]
 800e4dc:	f001 fef8 	bl	80102d0 <vPortFree>
 800e4e0:	e001      	b.n	800e4e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e4e6:	69fb      	ldr	r3, [r7, #28]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d017      	beq.n	800e51c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e4f4:	88fa      	ldrh	r2, [r7, #6]
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	9303      	str	r3, [sp, #12]
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	9302      	str	r3, [sp, #8]
 800e4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e500:	9301      	str	r3, [sp, #4]
 800e502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e504:	9300      	str	r3, [sp, #0]
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	68b9      	ldr	r1, [r7, #8]
 800e50a:	68f8      	ldr	r0, [r7, #12]
 800e50c:	f000 f80e 	bl	800e52c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e510:	69f8      	ldr	r0, [r7, #28]
 800e512:	f000 f8b7 	bl	800e684 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e516:	2301      	movs	r3, #1
 800e518:	61bb      	str	r3, [r7, #24]
 800e51a:	e002      	b.n	800e522 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e51c:	f04f 33ff 	mov.w	r3, #4294967295
 800e520:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e522:	69bb      	ldr	r3, [r7, #24]
	}
 800e524:	4618      	mov	r0, r3
 800e526:	3720      	adds	r7, #32
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b088      	sub	sp, #32
 800e530:	af00      	add	r7, sp, #0
 800e532:	60f8      	str	r0, [r7, #12]
 800e534:	60b9      	str	r1, [r7, #8]
 800e536:	607a      	str	r2, [r7, #4]
 800e538:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	461a      	mov	r2, r3
 800e544:	21a5      	movs	r1, #165	; 0xa5
 800e546:	f003 fd60 	bl	801200a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e554:	3b01      	subs	r3, #1
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	4413      	add	r3, r2
 800e55a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e55c:	69bb      	ldr	r3, [r7, #24]
 800e55e:	f023 0307 	bic.w	r3, r3, #7
 800e562:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	f003 0307 	and.w	r3, r3, #7
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d00a      	beq.n	800e584 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e572:	f383 8811 	msr	BASEPRI, r3
 800e576:	f3bf 8f6f 	isb	sy
 800e57a:	f3bf 8f4f 	dsb	sy
 800e57e:	617b      	str	r3, [r7, #20]
}
 800e580:	bf00      	nop
 800e582:	e7fe      	b.n	800e582 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800e584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e586:	69ba      	ldr	r2, [r7, #24]
 800e588:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d01f      	beq.n	800e5d0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e590:	2300      	movs	r3, #0
 800e592:	61fb      	str	r3, [r7, #28]
 800e594:	e012      	b.n	800e5bc <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e596:	68ba      	ldr	r2, [r7, #8]
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	4413      	add	r3, r2
 800e59c:	7819      	ldrb	r1, [r3, #0]
 800e59e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	3334      	adds	r3, #52	; 0x34
 800e5a6:	460a      	mov	r2, r1
 800e5a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e5aa:	68ba      	ldr	r2, [r7, #8]
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	4413      	add	r3, r2
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d006      	beq.n	800e5c4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	61fb      	str	r3, [r7, #28]
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	2b0f      	cmp	r3, #15
 800e5c0:	d9e9      	bls.n	800e596 <prvInitialiseNewTask+0x6a>
 800e5c2:	e000      	b.n	800e5c6 <prvInitialiseNewTask+0x9a>
			{
				break;
 800e5c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e5ce:	e003      	b.n	800e5d8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5da:	2b37      	cmp	r3, #55	; 0x37
 800e5dc:	d901      	bls.n	800e5e2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e5de:	2337      	movs	r3, #55	; 0x37
 800e5e0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5ec:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800e5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f6:	3304      	adds	r3, #4
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7fe fe21 	bl	800d240 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e600:	3318      	adds	r3, #24
 800e602:	4618      	mov	r0, r3
 800e604:	f7fe fe1c 	bl	800d240 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e60c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e610:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e616:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e61c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e620:	2200      	movs	r2, #0
 800e622:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e626:	2200      	movs	r2, #0
 800e628:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62e:	2200      	movs	r2, #0
 800e630:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e636:	335c      	adds	r3, #92	; 0x5c
 800e638:	224c      	movs	r2, #76	; 0x4c
 800e63a:	2100      	movs	r1, #0
 800e63c:	4618      	mov	r0, r3
 800e63e:	f003 fce4 	bl	801200a <memset>
 800e642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e644:	4a0c      	ldr	r2, [pc, #48]	; (800e678 <prvInitialiseNewTask+0x14c>)
 800e646:	661a      	str	r2, [r3, #96]	; 0x60
 800e648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e64a:	4a0c      	ldr	r2, [pc, #48]	; (800e67c <prvInitialiseNewTask+0x150>)
 800e64c:	665a      	str	r2, [r3, #100]	; 0x64
 800e64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e650:	4a0b      	ldr	r2, [pc, #44]	; (800e680 <prvInitialiseNewTask+0x154>)
 800e652:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e654:	683a      	ldr	r2, [r7, #0]
 800e656:	68f9      	ldr	r1, [r7, #12]
 800e658:	69b8      	ldr	r0, [r7, #24]
 800e65a:	f001 fb1b 	bl	800fc94 <pxPortInitialiseStack>
 800e65e:	4602      	mov	r2, r0
 800e660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e662:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e666:	2b00      	cmp	r3, #0
 800e668:	d002      	beq.n	800e670 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e66e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e670:	bf00      	nop
 800e672:	3720      	adds	r7, #32
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	200077e8 	.word	0x200077e8
 800e67c:	20007850 	.word	0x20007850
 800e680:	200078b8 	.word	0x200078b8

0800e684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e68c:	f001 fc32 	bl	800fef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e690:	4b2d      	ldr	r3, [pc, #180]	; (800e748 <prvAddNewTaskToReadyList+0xc4>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	3301      	adds	r3, #1
 800e696:	4a2c      	ldr	r2, [pc, #176]	; (800e748 <prvAddNewTaskToReadyList+0xc4>)
 800e698:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e69a:	4b2c      	ldr	r3, [pc, #176]	; (800e74c <prvAddNewTaskToReadyList+0xc8>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d109      	bne.n	800e6b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e6a2:	4a2a      	ldr	r2, [pc, #168]	; (800e74c <prvAddNewTaskToReadyList+0xc8>)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e6a8:	4b27      	ldr	r3, [pc, #156]	; (800e748 <prvAddNewTaskToReadyList+0xc4>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d110      	bne.n	800e6d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e6b0:	f000 fca6 	bl	800f000 <prvInitialiseTaskLists>
 800e6b4:	e00d      	b.n	800e6d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e6b6:	4b26      	ldr	r3, [pc, #152]	; (800e750 <prvAddNewTaskToReadyList+0xcc>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d109      	bne.n	800e6d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e6be:	4b23      	ldr	r3, [pc, #140]	; (800e74c <prvAddNewTaskToReadyList+0xc8>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d802      	bhi.n	800e6d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e6cc:	4a1f      	ldr	r2, [pc, #124]	; (800e74c <prvAddNewTaskToReadyList+0xc8>)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e6d2:	4b20      	ldr	r3, [pc, #128]	; (800e754 <prvAddNewTaskToReadyList+0xd0>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	4a1e      	ldr	r2, [pc, #120]	; (800e754 <prvAddNewTaskToReadyList+0xd0>)
 800e6da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e6dc:	4b1d      	ldr	r3, [pc, #116]	; (800e754 <prvAddNewTaskToReadyList+0xd0>)
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e8:	4b1b      	ldr	r3, [pc, #108]	; (800e758 <prvAddNewTaskToReadyList+0xd4>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d903      	bls.n	800e6f8 <prvAddNewTaskToReadyList+0x74>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f4:	4a18      	ldr	r2, [pc, #96]	; (800e758 <prvAddNewTaskToReadyList+0xd4>)
 800e6f6:	6013      	str	r3, [r2, #0]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	4413      	add	r3, r2
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4a15      	ldr	r2, [pc, #84]	; (800e75c <prvAddNewTaskToReadyList+0xd8>)
 800e706:	441a      	add	r2, r3
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	3304      	adds	r3, #4
 800e70c:	4619      	mov	r1, r3
 800e70e:	4610      	mov	r0, r2
 800e710:	f7fe fda3 	bl	800d25a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e714:	f001 fc1e 	bl	800ff54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e718:	4b0d      	ldr	r3, [pc, #52]	; (800e750 <prvAddNewTaskToReadyList+0xcc>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00e      	beq.n	800e73e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e720:	4b0a      	ldr	r3, [pc, #40]	; (800e74c <prvAddNewTaskToReadyList+0xc8>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d207      	bcs.n	800e73e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e72e:	4b0c      	ldr	r3, [pc, #48]	; (800e760 <prvAddNewTaskToReadyList+0xdc>)
 800e730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e734:	601a      	str	r2, [r3, #0]
 800e736:	f3bf 8f4f 	dsb	sy
 800e73a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e73e:	bf00      	nop
 800e740:	3708      	adds	r7, #8
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	20003658 	.word	0x20003658
 800e74c:	20003184 	.word	0x20003184
 800e750:	20003664 	.word	0x20003664
 800e754:	20003674 	.word	0x20003674
 800e758:	20003660 	.word	0x20003660
 800e75c:	20003188 	.word	0x20003188
 800e760:	e000ed04 	.word	0xe000ed04

0800e764 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e76c:	2300      	movs	r3, #0
 800e76e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d017      	beq.n	800e7a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e776:	4b13      	ldr	r3, [pc, #76]	; (800e7c4 <vTaskDelay+0x60>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00a      	beq.n	800e794 <vTaskDelay+0x30>
	__asm volatile
 800e77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	60bb      	str	r3, [r7, #8]
}
 800e790:	bf00      	nop
 800e792:	e7fe      	b.n	800e792 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e794:	f000 f88c 	bl	800e8b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e798:	2100      	movs	r1, #0
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 fe7c 	bl	800f498 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e7a0:	f000 f8cc 	bl	800e93c <xTaskResumeAll>
 800e7a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d107      	bne.n	800e7bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e7ac:	4b06      	ldr	r3, [pc, #24]	; (800e7c8 <vTaskDelay+0x64>)
 800e7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7b2:	601a      	str	r2, [r3, #0]
 800e7b4:	f3bf 8f4f 	dsb	sy
 800e7b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7bc:	bf00      	nop
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	20003680 	.word	0x20003680
 800e7c8:	e000ed04 	.word	0xe000ed04

0800e7cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b08a      	sub	sp, #40	; 0x28
 800e7d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e7da:	463a      	mov	r2, r7
 800e7dc:	1d39      	adds	r1, r7, #4
 800e7de:	f107 0308 	add.w	r3, r7, #8
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fe fcd8 	bl	800d198 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e7e8:	6839      	ldr	r1, [r7, #0]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	68ba      	ldr	r2, [r7, #8]
 800e7ee:	9202      	str	r2, [sp, #8]
 800e7f0:	9301      	str	r3, [sp, #4]
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	9300      	str	r3, [sp, #0]
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	460a      	mov	r2, r1
 800e7fa:	4925      	ldr	r1, [pc, #148]	; (800e890 <vTaskStartScheduler+0xc4>)
 800e7fc:	4825      	ldr	r0, [pc, #148]	; (800e894 <vTaskStartScheduler+0xc8>)
 800e7fe:	f7ff fdf3 	bl	800e3e8 <xTaskCreateStatic>
 800e802:	4603      	mov	r3, r0
 800e804:	4a24      	ldr	r2, [pc, #144]	; (800e898 <vTaskStartScheduler+0xcc>)
 800e806:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e808:	4b23      	ldr	r3, [pc, #140]	; (800e898 <vTaskStartScheduler+0xcc>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d002      	beq.n	800e816 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e810:	2301      	movs	r3, #1
 800e812:	617b      	str	r3, [r7, #20]
 800e814:	e001      	b.n	800e81a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e816:	2300      	movs	r3, #0
 800e818:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	d102      	bne.n	800e826 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e820:	f000 fe8e 	bl	800f540 <xTimerCreateTimerTask>
 800e824:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	2b01      	cmp	r3, #1
 800e82a:	d11d      	bne.n	800e868 <vTaskStartScheduler+0x9c>
	__asm volatile
 800e82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e830:	f383 8811 	msr	BASEPRI, r3
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	613b      	str	r3, [r7, #16]
}
 800e83e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e840:	4b16      	ldr	r3, [pc, #88]	; (800e89c <vTaskStartScheduler+0xd0>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	335c      	adds	r3, #92	; 0x5c
 800e846:	4a16      	ldr	r2, [pc, #88]	; (800e8a0 <vTaskStartScheduler+0xd4>)
 800e848:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e84a:	4b16      	ldr	r3, [pc, #88]	; (800e8a4 <vTaskStartScheduler+0xd8>)
 800e84c:	f04f 32ff 	mov.w	r2, #4294967295
 800e850:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e852:	4b15      	ldr	r3, [pc, #84]	; (800e8a8 <vTaskStartScheduler+0xdc>)
 800e854:	2201      	movs	r2, #1
 800e856:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e858:	4b14      	ldr	r3, [pc, #80]	; (800e8ac <vTaskStartScheduler+0xe0>)
 800e85a:	2200      	movs	r2, #0
 800e85c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e85e:	f7f2 fb41 	bl	8000ee4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e862:	f001 faa5 	bl	800fdb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e866:	e00e      	b.n	800e886 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e86e:	d10a      	bne.n	800e886 <vTaskStartScheduler+0xba>
	__asm volatile
 800e870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e874:	f383 8811 	msr	BASEPRI, r3
 800e878:	f3bf 8f6f 	isb	sy
 800e87c:	f3bf 8f4f 	dsb	sy
 800e880:	60fb      	str	r3, [r7, #12]
}
 800e882:	bf00      	nop
 800e884:	e7fe      	b.n	800e884 <vTaskStartScheduler+0xb8>
}
 800e886:	bf00      	nop
 800e888:	3718      	adds	r7, #24
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	08014494 	.word	0x08014494
 800e894:	0800ef81 	.word	0x0800ef81
 800e898:	2000367c 	.word	0x2000367c
 800e89c:	20003184 	.word	0x20003184
 800e8a0:	20000094 	.word	0x20000094
 800e8a4:	20003678 	.word	0x20003678
 800e8a8:	20003664 	.word	0x20003664
 800e8ac:	2000365c 	.word	0x2000365c

0800e8b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e8b4:	4b04      	ldr	r3, [pc, #16]	; (800e8c8 <vTaskSuspendAll+0x18>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	4a03      	ldr	r2, [pc, #12]	; (800e8c8 <vTaskSuspendAll+0x18>)
 800e8bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e8be:	bf00      	nop
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr
 800e8c8:	20003680 	.word	0x20003680

0800e8cc <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800e8d6:	4b14      	ldr	r3, [pc, #80]	; (800e928 <prvGetExpectedIdleTime+0x5c>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d001      	beq.n	800e8e2 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800e8e2:	4b12      	ldr	r3, [pc, #72]	; (800e92c <prvGetExpectedIdleTime+0x60>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d002      	beq.n	800e8f2 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	607b      	str	r3, [r7, #4]
 800e8f0:	e012      	b.n	800e918 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800e8f2:	4b0f      	ldr	r3, [pc, #60]	; (800e930 <prvGetExpectedIdleTime+0x64>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2b01      	cmp	r3, #1
 800e8f8:	d902      	bls.n	800e900 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	607b      	str	r3, [r7, #4]
 800e8fe:	e00b      	b.n	800e918 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d002      	beq.n	800e90c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800e906:	2300      	movs	r3, #0
 800e908:	607b      	str	r3, [r7, #4]
 800e90a:	e005      	b.n	800e918 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800e90c:	4b09      	ldr	r3, [pc, #36]	; (800e934 <prvGetExpectedIdleTime+0x68>)
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	4b09      	ldr	r3, [pc, #36]	; (800e938 <prvGetExpectedIdleTime+0x6c>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	1ad3      	subs	r3, r2, r3
 800e916:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800e918:	687b      	ldr	r3, [r7, #4]
	}
 800e91a:	4618      	mov	r0, r3
 800e91c:	370c      	adds	r7, #12
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	20003660 	.word	0x20003660
 800e92c:	20003184 	.word	0x20003184
 800e930:	20003188 	.word	0x20003188
 800e934:	20003678 	.word	0x20003678
 800e938:	2000365c 	.word	0x2000365c

0800e93c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e942:	2300      	movs	r3, #0
 800e944:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e946:	2300      	movs	r3, #0
 800e948:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e94a:	4b42      	ldr	r3, [pc, #264]	; (800ea54 <xTaskResumeAll+0x118>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d10a      	bne.n	800e968 <xTaskResumeAll+0x2c>
	__asm volatile
 800e952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e956:	f383 8811 	msr	BASEPRI, r3
 800e95a:	f3bf 8f6f 	isb	sy
 800e95e:	f3bf 8f4f 	dsb	sy
 800e962:	603b      	str	r3, [r7, #0]
}
 800e964:	bf00      	nop
 800e966:	e7fe      	b.n	800e966 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e968:	f001 fac4 	bl	800fef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e96c:	4b39      	ldr	r3, [pc, #228]	; (800ea54 <xTaskResumeAll+0x118>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3b01      	subs	r3, #1
 800e972:	4a38      	ldr	r2, [pc, #224]	; (800ea54 <xTaskResumeAll+0x118>)
 800e974:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e976:	4b37      	ldr	r3, [pc, #220]	; (800ea54 <xTaskResumeAll+0x118>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d162      	bne.n	800ea44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e97e:	4b36      	ldr	r3, [pc, #216]	; (800ea58 <xTaskResumeAll+0x11c>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d05e      	beq.n	800ea44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e986:	e02f      	b.n	800e9e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e988:	4b34      	ldr	r3, [pc, #208]	; (800ea5c <xTaskResumeAll+0x120>)
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	3318      	adds	r3, #24
 800e994:	4618      	mov	r0, r3
 800e996:	f7fe fcbd 	bl	800d314 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	3304      	adds	r3, #4
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7fe fcb8 	bl	800d314 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9a8:	4b2d      	ldr	r3, [pc, #180]	; (800ea60 <xTaskResumeAll+0x124>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d903      	bls.n	800e9b8 <xTaskResumeAll+0x7c>
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b4:	4a2a      	ldr	r2, [pc, #168]	; (800ea60 <xTaskResumeAll+0x124>)
 800e9b6:	6013      	str	r3, [r2, #0]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9bc:	4613      	mov	r3, r2
 800e9be:	009b      	lsls	r3, r3, #2
 800e9c0:	4413      	add	r3, r2
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	4a27      	ldr	r2, [pc, #156]	; (800ea64 <xTaskResumeAll+0x128>)
 800e9c6:	441a      	add	r2, r3
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	3304      	adds	r3, #4
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	4610      	mov	r0, r2
 800e9d0:	f7fe fc43 	bl	800d25a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9d8:	4b23      	ldr	r3, [pc, #140]	; (800ea68 <xTaskResumeAll+0x12c>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d302      	bcc.n	800e9e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e9e2:	4b22      	ldr	r3, [pc, #136]	; (800ea6c <xTaskResumeAll+0x130>)
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e9e8:	4b1c      	ldr	r3, [pc, #112]	; (800ea5c <xTaskResumeAll+0x120>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d1cb      	bne.n	800e988 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d001      	beq.n	800e9fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e9f6:	f000 fba5 	bl	800f144 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e9fa:	4b1d      	ldr	r3, [pc, #116]	; (800ea70 <xTaskResumeAll+0x134>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d010      	beq.n	800ea28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ea06:	f000 f847 	bl	800ea98 <xTaskIncrementTick>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d002      	beq.n	800ea16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ea10:	4b16      	ldr	r3, [pc, #88]	; (800ea6c <xTaskResumeAll+0x130>)
 800ea12:	2201      	movs	r2, #1
 800ea14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	3b01      	subs	r3, #1
 800ea1a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d1f1      	bne.n	800ea06 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ea22:	4b13      	ldr	r3, [pc, #76]	; (800ea70 <xTaskResumeAll+0x134>)
 800ea24:	2200      	movs	r2, #0
 800ea26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ea28:	4b10      	ldr	r3, [pc, #64]	; (800ea6c <xTaskResumeAll+0x130>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d009      	beq.n	800ea44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ea30:	2301      	movs	r3, #1
 800ea32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ea34:	4b0f      	ldr	r3, [pc, #60]	; (800ea74 <xTaskResumeAll+0x138>)
 800ea36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea3a:	601a      	str	r2, [r3, #0]
 800ea3c:	f3bf 8f4f 	dsb	sy
 800ea40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea44:	f001 fa86 	bl	800ff54 <vPortExitCritical>

	return xAlreadyYielded;
 800ea48:	68bb      	ldr	r3, [r7, #8]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3710      	adds	r7, #16
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	20003680 	.word	0x20003680
 800ea58:	20003658 	.word	0x20003658
 800ea5c:	20003618 	.word	0x20003618
 800ea60:	20003660 	.word	0x20003660
 800ea64:	20003188 	.word	0x20003188
 800ea68:	20003184 	.word	0x20003184
 800ea6c:	2000366c 	.word	0x2000366c
 800ea70:	20003668 	.word	0x20003668
 800ea74:	e000ed04 	.word	0xe000ed04

0800ea78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ea7e:	4b05      	ldr	r3, [pc, #20]	; (800ea94 <xTaskGetTickCount+0x1c>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ea84:	687b      	ldr	r3, [r7, #4]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	370c      	adds	r7, #12
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	2000365c 	.word	0x2000365c

0800ea98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b086      	sub	sp, #24
 800ea9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eaa2:	4b4f      	ldr	r3, [pc, #316]	; (800ebe0 <xTaskIncrementTick+0x148>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	f040 808f 	bne.w	800ebca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800eaac:	4b4d      	ldr	r3, [pc, #308]	; (800ebe4 <xTaskIncrementTick+0x14c>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	3301      	adds	r3, #1
 800eab2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800eab4:	4a4b      	ldr	r2, [pc, #300]	; (800ebe4 <xTaskIncrementTick+0x14c>)
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d120      	bne.n	800eb02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800eac0:	4b49      	ldr	r3, [pc, #292]	; (800ebe8 <xTaskIncrementTick+0x150>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d00a      	beq.n	800eae0 <xTaskIncrementTick+0x48>
	__asm volatile
 800eaca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eace:	f383 8811 	msr	BASEPRI, r3
 800ead2:	f3bf 8f6f 	isb	sy
 800ead6:	f3bf 8f4f 	dsb	sy
 800eada:	603b      	str	r3, [r7, #0]
}
 800eadc:	bf00      	nop
 800eade:	e7fe      	b.n	800eade <xTaskIncrementTick+0x46>
 800eae0:	4b41      	ldr	r3, [pc, #260]	; (800ebe8 <xTaskIncrementTick+0x150>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	60fb      	str	r3, [r7, #12]
 800eae6:	4b41      	ldr	r3, [pc, #260]	; (800ebec <xTaskIncrementTick+0x154>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4a3f      	ldr	r2, [pc, #252]	; (800ebe8 <xTaskIncrementTick+0x150>)
 800eaec:	6013      	str	r3, [r2, #0]
 800eaee:	4a3f      	ldr	r2, [pc, #252]	; (800ebec <xTaskIncrementTick+0x154>)
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	6013      	str	r3, [r2, #0]
 800eaf4:	4b3e      	ldr	r3, [pc, #248]	; (800ebf0 <xTaskIncrementTick+0x158>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	4a3d      	ldr	r2, [pc, #244]	; (800ebf0 <xTaskIncrementTick+0x158>)
 800eafc:	6013      	str	r3, [r2, #0]
 800eafe:	f000 fb21 	bl	800f144 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800eb02:	4b3c      	ldr	r3, [pc, #240]	; (800ebf4 <xTaskIncrementTick+0x15c>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	693a      	ldr	r2, [r7, #16]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d349      	bcc.n	800eba0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb0c:	4b36      	ldr	r3, [pc, #216]	; (800ebe8 <xTaskIncrementTick+0x150>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d104      	bne.n	800eb20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb16:	4b37      	ldr	r3, [pc, #220]	; (800ebf4 <xTaskIncrementTick+0x15c>)
 800eb18:	f04f 32ff 	mov.w	r2, #4294967295
 800eb1c:	601a      	str	r2, [r3, #0]
					break;
 800eb1e:	e03f      	b.n	800eba0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb20:	4b31      	ldr	r3, [pc, #196]	; (800ebe8 <xTaskIncrementTick+0x150>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	68db      	ldr	r3, [r3, #12]
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800eb30:	693a      	ldr	r2, [r7, #16]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d203      	bcs.n	800eb40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eb38:	4a2e      	ldr	r2, [pc, #184]	; (800ebf4 <xTaskIncrementTick+0x15c>)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eb3e:	e02f      	b.n	800eba0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	3304      	adds	r3, #4
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fe fbe5 	bl	800d314 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d004      	beq.n	800eb5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	3318      	adds	r3, #24
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fe fbdc 	bl	800d314 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb60:	4b25      	ldr	r3, [pc, #148]	; (800ebf8 <xTaskIncrementTick+0x160>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d903      	bls.n	800eb70 <xTaskIncrementTick+0xd8>
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6c:	4a22      	ldr	r2, [pc, #136]	; (800ebf8 <xTaskIncrementTick+0x160>)
 800eb6e:	6013      	str	r3, [r2, #0]
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb74:	4613      	mov	r3, r2
 800eb76:	009b      	lsls	r3, r3, #2
 800eb78:	4413      	add	r3, r2
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	4a1f      	ldr	r2, [pc, #124]	; (800ebfc <xTaskIncrementTick+0x164>)
 800eb7e:	441a      	add	r2, r3
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	3304      	adds	r3, #4
 800eb84:	4619      	mov	r1, r3
 800eb86:	4610      	mov	r0, r2
 800eb88:	f7fe fb67 	bl	800d25a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb90:	4b1b      	ldr	r3, [pc, #108]	; (800ec00 <xTaskIncrementTick+0x168>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d3b8      	bcc.n	800eb0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb9e:	e7b5      	b.n	800eb0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eba0:	4b17      	ldr	r3, [pc, #92]	; (800ec00 <xTaskIncrementTick+0x168>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eba6:	4915      	ldr	r1, [pc, #84]	; (800ebfc <xTaskIncrementTick+0x164>)
 800eba8:	4613      	mov	r3, r2
 800ebaa:	009b      	lsls	r3, r3, #2
 800ebac:	4413      	add	r3, r2
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	440b      	add	r3, r1
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d901      	bls.n	800ebbc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ebbc:	4b11      	ldr	r3, [pc, #68]	; (800ec04 <xTaskIncrementTick+0x16c>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d007      	beq.n	800ebd4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	617b      	str	r3, [r7, #20]
 800ebc8:	e004      	b.n	800ebd4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ebca:	4b0f      	ldr	r3, [pc, #60]	; (800ec08 <xTaskIncrementTick+0x170>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	4a0d      	ldr	r2, [pc, #52]	; (800ec08 <xTaskIncrementTick+0x170>)
 800ebd2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ebd4:	697b      	ldr	r3, [r7, #20]
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3718      	adds	r7, #24
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	20003680 	.word	0x20003680
 800ebe4:	2000365c 	.word	0x2000365c
 800ebe8:	20003610 	.word	0x20003610
 800ebec:	20003614 	.word	0x20003614
 800ebf0:	20003670 	.word	0x20003670
 800ebf4:	20003678 	.word	0x20003678
 800ebf8:	20003660 	.word	0x20003660
 800ebfc:	20003188 	.word	0x20003188
 800ec00:	20003184 	.word	0x20003184
 800ec04:	2000366c 	.word	0x2000366c
 800ec08:	20003668 	.word	0x20003668

0800ec0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ec12:	4b36      	ldr	r3, [pc, #216]	; (800ecec <vTaskSwitchContext+0xe0>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d003      	beq.n	800ec22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ec1a:	4b35      	ldr	r3, [pc, #212]	; (800ecf0 <vTaskSwitchContext+0xe4>)
 800ec1c:	2201      	movs	r2, #1
 800ec1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ec20:	e05f      	b.n	800ece2 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800ec22:	4b33      	ldr	r3, [pc, #204]	; (800ecf0 <vTaskSwitchContext+0xe4>)
 800ec24:	2200      	movs	r2, #0
 800ec26:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ec28:	f7f2 f966 	bl	8000ef8 <getRunTimeCounterValue>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	4a31      	ldr	r2, [pc, #196]	; (800ecf4 <vTaskSwitchContext+0xe8>)
 800ec30:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ec32:	4b30      	ldr	r3, [pc, #192]	; (800ecf4 <vTaskSwitchContext+0xe8>)
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	4b30      	ldr	r3, [pc, #192]	; (800ecf8 <vTaskSwitchContext+0xec>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d909      	bls.n	800ec52 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ec3e:	4b2f      	ldr	r3, [pc, #188]	; (800ecfc <vTaskSwitchContext+0xf0>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800ec44:	4a2b      	ldr	r2, [pc, #172]	; (800ecf4 <vTaskSwitchContext+0xe8>)
 800ec46:	6810      	ldr	r0, [r2, #0]
 800ec48:	4a2b      	ldr	r2, [pc, #172]	; (800ecf8 <vTaskSwitchContext+0xec>)
 800ec4a:	6812      	ldr	r2, [r2, #0]
 800ec4c:	1a82      	subs	r2, r0, r2
 800ec4e:	440a      	add	r2, r1
 800ec50:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800ec52:	4b28      	ldr	r3, [pc, #160]	; (800ecf4 <vTaskSwitchContext+0xe8>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4a28      	ldr	r2, [pc, #160]	; (800ecf8 <vTaskSwitchContext+0xec>)
 800ec58:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec5a:	4b29      	ldr	r3, [pc, #164]	; (800ed00 <vTaskSwitchContext+0xf4>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	60fb      	str	r3, [r7, #12]
 800ec60:	e010      	b.n	800ec84 <vTaskSwitchContext+0x78>
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d10a      	bne.n	800ec7e <vTaskSwitchContext+0x72>
	__asm volatile
 800ec68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6c:	f383 8811 	msr	BASEPRI, r3
 800ec70:	f3bf 8f6f 	isb	sy
 800ec74:	f3bf 8f4f 	dsb	sy
 800ec78:	607b      	str	r3, [r7, #4]
}
 800ec7a:	bf00      	nop
 800ec7c:	e7fe      	b.n	800ec7c <vTaskSwitchContext+0x70>
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	3b01      	subs	r3, #1
 800ec82:	60fb      	str	r3, [r7, #12]
 800ec84:	491f      	ldr	r1, [pc, #124]	; (800ed04 <vTaskSwitchContext+0xf8>)
 800ec86:	68fa      	ldr	r2, [r7, #12]
 800ec88:	4613      	mov	r3, r2
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	4413      	add	r3, r2
 800ec8e:	009b      	lsls	r3, r3, #2
 800ec90:	440b      	add	r3, r1
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d0e4      	beq.n	800ec62 <vTaskSwitchContext+0x56>
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	009b      	lsls	r3, r3, #2
 800ec9e:	4413      	add	r3, r2
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	4a18      	ldr	r2, [pc, #96]	; (800ed04 <vTaskSwitchContext+0xf8>)
 800eca4:	4413      	add	r3, r2
 800eca6:	60bb      	str	r3, [r7, #8]
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	685a      	ldr	r2, [r3, #4]
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	605a      	str	r2, [r3, #4]
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	685a      	ldr	r2, [r3, #4]
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	3308      	adds	r3, #8
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d104      	bne.n	800ecc8 <vTaskSwitchContext+0xbc>
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	685a      	ldr	r2, [r3, #4]
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	605a      	str	r2, [r3, #4]
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	68db      	ldr	r3, [r3, #12]
 800ecce:	4a0b      	ldr	r2, [pc, #44]	; (800ecfc <vTaskSwitchContext+0xf0>)
 800ecd0:	6013      	str	r3, [r2, #0]
 800ecd2:	4a0b      	ldr	r2, [pc, #44]	; (800ed00 <vTaskSwitchContext+0xf4>)
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ecd8:	4b08      	ldr	r3, [pc, #32]	; (800ecfc <vTaskSwitchContext+0xf0>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	335c      	adds	r3, #92	; 0x5c
 800ecde:	4a0a      	ldr	r2, [pc, #40]	; (800ed08 <vTaskSwitchContext+0xfc>)
 800ece0:	6013      	str	r3, [r2, #0]
}
 800ece2:	bf00      	nop
 800ece4:	3710      	adds	r7, #16
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	20003680 	.word	0x20003680
 800ecf0:	2000366c 	.word	0x2000366c
 800ecf4:	20003688 	.word	0x20003688
 800ecf8:	20003684 	.word	0x20003684
 800ecfc:	20003184 	.word	0x20003184
 800ed00:	20003660 	.word	0x20003660
 800ed04:	20003188 	.word	0x20003188
 800ed08:	20000094 	.word	0x20000094

0800ed0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d10a      	bne.n	800ed32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ed1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	60fb      	str	r3, [r7, #12]
}
 800ed2e:	bf00      	nop
 800ed30:	e7fe      	b.n	800ed30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ed32:	4b07      	ldr	r3, [pc, #28]	; (800ed50 <vTaskPlaceOnEventList+0x44>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	3318      	adds	r3, #24
 800ed38:	4619      	mov	r1, r3
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f7fe fab1 	bl	800d2a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ed40:	2101      	movs	r1, #1
 800ed42:	6838      	ldr	r0, [r7, #0]
 800ed44:	f000 fba8 	bl	800f498 <prvAddCurrentTaskToDelayedList>
}
 800ed48:	bf00      	nop
 800ed4a:	3710      	adds	r7, #16
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}
 800ed50:	20003184 	.word	0x20003184

0800ed54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d10a      	bne.n	800ed7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ed66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6a:	f383 8811 	msr	BASEPRI, r3
 800ed6e:	f3bf 8f6f 	isb	sy
 800ed72:	f3bf 8f4f 	dsb	sy
 800ed76:	617b      	str	r3, [r7, #20]
}
 800ed78:	bf00      	nop
 800ed7a:	e7fe      	b.n	800ed7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ed7c:	4b0a      	ldr	r3, [pc, #40]	; (800eda8 <vTaskPlaceOnEventListRestricted+0x54>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	3318      	adds	r3, #24
 800ed82:	4619      	mov	r1, r3
 800ed84:	68f8      	ldr	r0, [r7, #12]
 800ed86:	f7fe fa68 	bl	800d25a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ed90:	f04f 33ff 	mov.w	r3, #4294967295
 800ed94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ed96:	6879      	ldr	r1, [r7, #4]
 800ed98:	68b8      	ldr	r0, [r7, #8]
 800ed9a:	f000 fb7d 	bl	800f498 <prvAddCurrentTaskToDelayedList>
	}
 800ed9e:	bf00      	nop
 800eda0:	3718      	adds	r7, #24
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	20003184 	.word	0x20003184

0800edac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b086      	sub	sp, #24
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	68db      	ldr	r3, [r3, #12]
 800edba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d10a      	bne.n	800edd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800edc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc6:	f383 8811 	msr	BASEPRI, r3
 800edca:	f3bf 8f6f 	isb	sy
 800edce:	f3bf 8f4f 	dsb	sy
 800edd2:	60fb      	str	r3, [r7, #12]
}
 800edd4:	bf00      	nop
 800edd6:	e7fe      	b.n	800edd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	3318      	adds	r3, #24
 800eddc:	4618      	mov	r0, r3
 800edde:	f7fe fa99 	bl	800d314 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ede2:	4b1f      	ldr	r3, [pc, #124]	; (800ee60 <xTaskRemoveFromEventList+0xb4>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d11f      	bne.n	800ee2a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	3304      	adds	r3, #4
 800edee:	4618      	mov	r0, r3
 800edf0:	f7fe fa90 	bl	800d314 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edf8:	4b1a      	ldr	r3, [pc, #104]	; (800ee64 <xTaskRemoveFromEventList+0xb8>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d903      	bls.n	800ee08 <xTaskRemoveFromEventList+0x5c>
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee04:	4a17      	ldr	r2, [pc, #92]	; (800ee64 <xTaskRemoveFromEventList+0xb8>)
 800ee06:	6013      	str	r3, [r2, #0]
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee0c:	4613      	mov	r3, r2
 800ee0e:	009b      	lsls	r3, r3, #2
 800ee10:	4413      	add	r3, r2
 800ee12:	009b      	lsls	r3, r3, #2
 800ee14:	4a14      	ldr	r2, [pc, #80]	; (800ee68 <xTaskRemoveFromEventList+0xbc>)
 800ee16:	441a      	add	r2, r3
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	3304      	adds	r3, #4
 800ee1c:	4619      	mov	r1, r3
 800ee1e:	4610      	mov	r0, r2
 800ee20:	f7fe fa1b 	bl	800d25a <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800ee24:	f000 f98e 	bl	800f144 <prvResetNextTaskUnblockTime>
 800ee28:	e005      	b.n	800ee36 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	3318      	adds	r3, #24
 800ee2e:	4619      	mov	r1, r3
 800ee30:	480e      	ldr	r0, [pc, #56]	; (800ee6c <xTaskRemoveFromEventList+0xc0>)
 800ee32:	f7fe fa12 	bl	800d25a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee3a:	4b0d      	ldr	r3, [pc, #52]	; (800ee70 <xTaskRemoveFromEventList+0xc4>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d905      	bls.n	800ee50 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ee44:	2301      	movs	r3, #1
 800ee46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ee48:	4b0a      	ldr	r3, [pc, #40]	; (800ee74 <xTaskRemoveFromEventList+0xc8>)
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	601a      	str	r2, [r3, #0]
 800ee4e:	e001      	b.n	800ee54 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ee50:	2300      	movs	r3, #0
 800ee52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ee54:	697b      	ldr	r3, [r7, #20]
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3718      	adds	r7, #24
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	20003680 	.word	0x20003680
 800ee64:	20003660 	.word	0x20003660
 800ee68:	20003188 	.word	0x20003188
 800ee6c:	20003618 	.word	0x20003618
 800ee70:	20003184 	.word	0x20003184
 800ee74:	2000366c 	.word	0x2000366c

0800ee78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ee80:	4b06      	ldr	r3, [pc, #24]	; (800ee9c <vTaskInternalSetTimeOutState+0x24>)
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ee88:	4b05      	ldr	r3, [pc, #20]	; (800eea0 <vTaskInternalSetTimeOutState+0x28>)
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	605a      	str	r2, [r3, #4]
}
 800ee90:	bf00      	nop
 800ee92:	370c      	adds	r7, #12
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr
 800ee9c:	20003670 	.word	0x20003670
 800eea0:	2000365c 	.word	0x2000365c

0800eea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b088      	sub	sp, #32
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10a      	bne.n	800eeca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800eeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb8:	f383 8811 	msr	BASEPRI, r3
 800eebc:	f3bf 8f6f 	isb	sy
 800eec0:	f3bf 8f4f 	dsb	sy
 800eec4:	613b      	str	r3, [r7, #16]
}
 800eec6:	bf00      	nop
 800eec8:	e7fe      	b.n	800eec8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d10a      	bne.n	800eee6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800eed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed4:	f383 8811 	msr	BASEPRI, r3
 800eed8:	f3bf 8f6f 	isb	sy
 800eedc:	f3bf 8f4f 	dsb	sy
 800eee0:	60fb      	str	r3, [r7, #12]
}
 800eee2:	bf00      	nop
 800eee4:	e7fe      	b.n	800eee4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800eee6:	f001 f805 	bl	800fef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eeea:	4b1d      	ldr	r3, [pc, #116]	; (800ef60 <xTaskCheckForTimeOut+0xbc>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	69ba      	ldr	r2, [r7, #24]
 800eef6:	1ad3      	subs	r3, r2, r3
 800eef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef02:	d102      	bne.n	800ef0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ef04:	2300      	movs	r3, #0
 800ef06:	61fb      	str	r3, [r7, #28]
 800ef08:	e023      	b.n	800ef52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681a      	ldr	r2, [r3, #0]
 800ef0e:	4b15      	ldr	r3, [pc, #84]	; (800ef64 <xTaskCheckForTimeOut+0xc0>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d007      	beq.n	800ef26 <xTaskCheckForTimeOut+0x82>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	69ba      	ldr	r2, [r7, #24]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d302      	bcc.n	800ef26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ef20:	2301      	movs	r3, #1
 800ef22:	61fb      	str	r3, [r7, #28]
 800ef24:	e015      	b.n	800ef52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	697a      	ldr	r2, [r7, #20]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d20b      	bcs.n	800ef48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	1ad2      	subs	r2, r2, r3
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7ff ff9b 	bl	800ee78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ef42:	2300      	movs	r3, #0
 800ef44:	61fb      	str	r3, [r7, #28]
 800ef46:	e004      	b.n	800ef52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ef52:	f000 ffff 	bl	800ff54 <vPortExitCritical>

	return xReturn;
 800ef56:	69fb      	ldr	r3, [r7, #28]
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3720      	adds	r7, #32
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	2000365c 	.word	0x2000365c
 800ef64:	20003670 	.word	0x20003670

0800ef68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ef68:	b480      	push	{r7}
 800ef6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ef6c:	4b03      	ldr	r3, [pc, #12]	; (800ef7c <vTaskMissedYield+0x14>)
 800ef6e:	2201      	movs	r2, #1
 800ef70:	601a      	str	r2, [r3, #0]
}
 800ef72:	bf00      	nop
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr
 800ef7c:	2000366c 	.word	0x2000366c

0800ef80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ef88:	f000 f87a 	bl	800f080 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ef8c:	4b18      	ldr	r3, [pc, #96]	; (800eff0 <prvIdleTask+0x70>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d907      	bls.n	800efa4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ef94:	4b17      	ldr	r3, [pc, #92]	; (800eff4 <prvIdleTask+0x74>)
 800ef96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef9a:	601a      	str	r2, [r3, #0]
 800ef9c:	f3bf 8f4f 	dsb	sy
 800efa0:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800efa4:	f7ff fc92 	bl	800e8cc <prvGetExpectedIdleTime>
 800efa8:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2b01      	cmp	r3, #1
 800efae:	d9eb      	bls.n	800ef88 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800efb0:	f7ff fc7e 	bl	800e8b0 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800efb4:	4b10      	ldr	r3, [pc, #64]	; (800eff8 <prvIdleTask+0x78>)
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	4b10      	ldr	r3, [pc, #64]	; (800effc <prvIdleTask+0x7c>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d20a      	bcs.n	800efd6 <prvIdleTask+0x56>
	__asm volatile
 800efc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc4:	f383 8811 	msr	BASEPRI, r3
 800efc8:	f3bf 8f6f 	isb	sy
 800efcc:	f3bf 8f4f 	dsb	sy
 800efd0:	60bb      	str	r3, [r7, #8]
}
 800efd2:	bf00      	nop
 800efd4:	e7fe      	b.n	800efd4 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800efd6:	f7ff fc79 	bl	800e8cc <prvGetExpectedIdleTime>
 800efda:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d902      	bls.n	800efe8 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800efe2:	68f8      	ldr	r0, [r7, #12]
 800efe4:	f7f1 ff94 	bl	8000f10 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800efe8:	f7ff fca8 	bl	800e93c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800efec:	e7cc      	b.n	800ef88 <prvIdleTask+0x8>
 800efee:	bf00      	nop
 800eff0:	20003188 	.word	0x20003188
 800eff4:	e000ed04 	.word	0xe000ed04
 800eff8:	20003678 	.word	0x20003678
 800effc:	2000365c 	.word	0x2000365c

0800f000 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f006:	2300      	movs	r3, #0
 800f008:	607b      	str	r3, [r7, #4]
 800f00a:	e00c      	b.n	800f026 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	4613      	mov	r3, r2
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	4413      	add	r3, r2
 800f014:	009b      	lsls	r3, r3, #2
 800f016:	4a12      	ldr	r2, [pc, #72]	; (800f060 <prvInitialiseTaskLists+0x60>)
 800f018:	4413      	add	r3, r2
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7fe f8f0 	bl	800d200 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	3301      	adds	r3, #1
 800f024:	607b      	str	r3, [r7, #4]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2b37      	cmp	r3, #55	; 0x37
 800f02a:	d9ef      	bls.n	800f00c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f02c:	480d      	ldr	r0, [pc, #52]	; (800f064 <prvInitialiseTaskLists+0x64>)
 800f02e:	f7fe f8e7 	bl	800d200 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f032:	480d      	ldr	r0, [pc, #52]	; (800f068 <prvInitialiseTaskLists+0x68>)
 800f034:	f7fe f8e4 	bl	800d200 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f038:	480c      	ldr	r0, [pc, #48]	; (800f06c <prvInitialiseTaskLists+0x6c>)
 800f03a:	f7fe f8e1 	bl	800d200 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f03e:	480c      	ldr	r0, [pc, #48]	; (800f070 <prvInitialiseTaskLists+0x70>)
 800f040:	f7fe f8de 	bl	800d200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f044:	480b      	ldr	r0, [pc, #44]	; (800f074 <prvInitialiseTaskLists+0x74>)
 800f046:	f7fe f8db 	bl	800d200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f04a:	4b0b      	ldr	r3, [pc, #44]	; (800f078 <prvInitialiseTaskLists+0x78>)
 800f04c:	4a05      	ldr	r2, [pc, #20]	; (800f064 <prvInitialiseTaskLists+0x64>)
 800f04e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f050:	4b0a      	ldr	r3, [pc, #40]	; (800f07c <prvInitialiseTaskLists+0x7c>)
 800f052:	4a05      	ldr	r2, [pc, #20]	; (800f068 <prvInitialiseTaskLists+0x68>)
 800f054:	601a      	str	r2, [r3, #0]
}
 800f056:	bf00      	nop
 800f058:	3708      	adds	r7, #8
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	20003188 	.word	0x20003188
 800f064:	200035e8 	.word	0x200035e8
 800f068:	200035fc 	.word	0x200035fc
 800f06c:	20003618 	.word	0x20003618
 800f070:	2000362c 	.word	0x2000362c
 800f074:	20003644 	.word	0x20003644
 800f078:	20003610 	.word	0x20003610
 800f07c:	20003614 	.word	0x20003614

0800f080 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f086:	e019      	b.n	800f0bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f088:	f000 ff34 	bl	800fef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f08c:	4b10      	ldr	r3, [pc, #64]	; (800f0d0 <prvCheckTasksWaitingTermination+0x50>)
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	3304      	adds	r3, #4
 800f098:	4618      	mov	r0, r3
 800f09a:	f7fe f93b 	bl	800d314 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f09e:	4b0d      	ldr	r3, [pc, #52]	; (800f0d4 <prvCheckTasksWaitingTermination+0x54>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	3b01      	subs	r3, #1
 800f0a4:	4a0b      	ldr	r2, [pc, #44]	; (800f0d4 <prvCheckTasksWaitingTermination+0x54>)
 800f0a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f0a8:	4b0b      	ldr	r3, [pc, #44]	; (800f0d8 <prvCheckTasksWaitingTermination+0x58>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	4a0a      	ldr	r2, [pc, #40]	; (800f0d8 <prvCheckTasksWaitingTermination+0x58>)
 800f0b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f0b2:	f000 ff4f 	bl	800ff54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f000 f810 	bl	800f0dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f0bc:	4b06      	ldr	r3, [pc, #24]	; (800f0d8 <prvCheckTasksWaitingTermination+0x58>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d1e1      	bne.n	800f088 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f0c4:	bf00      	nop
 800f0c6:	bf00      	nop
 800f0c8:	3708      	adds	r7, #8
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	2000362c 	.word	0x2000362c
 800f0d4:	20003658 	.word	0x20003658
 800f0d8:	20003640 	.word	0x20003640

0800f0dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	335c      	adds	r3, #92	; 0x5c
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f002 ffab 	bl	8012044 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d108      	bne.n	800f10a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f001 f8e7 	bl	80102d0 <vPortFree>
				vPortFree( pxTCB );
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f001 f8e4 	bl	80102d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f108:	e018      	b.n	800f13c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800f110:	2b01      	cmp	r3, #1
 800f112:	d103      	bne.n	800f11c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f001 f8db 	bl	80102d0 <vPortFree>
	}
 800f11a:	e00f      	b.n	800f13c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800f122:	2b02      	cmp	r3, #2
 800f124:	d00a      	beq.n	800f13c <prvDeleteTCB+0x60>
	__asm volatile
 800f126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f12a:	f383 8811 	msr	BASEPRI, r3
 800f12e:	f3bf 8f6f 	isb	sy
 800f132:	f3bf 8f4f 	dsb	sy
 800f136:	60fb      	str	r3, [r7, #12]
}
 800f138:	bf00      	nop
 800f13a:	e7fe      	b.n	800f13a <prvDeleteTCB+0x5e>
	}
 800f13c:	bf00      	nop
 800f13e:	3710      	adds	r7, #16
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f14a:	4b0c      	ldr	r3, [pc, #48]	; (800f17c <prvResetNextTaskUnblockTime+0x38>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d104      	bne.n	800f15e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f154:	4b0a      	ldr	r3, [pc, #40]	; (800f180 <prvResetNextTaskUnblockTime+0x3c>)
 800f156:	f04f 32ff 	mov.w	r2, #4294967295
 800f15a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f15c:	e008      	b.n	800f170 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f15e:	4b07      	ldr	r3, [pc, #28]	; (800f17c <prvResetNextTaskUnblockTime+0x38>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	4a04      	ldr	r2, [pc, #16]	; (800f180 <prvResetNextTaskUnblockTime+0x3c>)
 800f16e:	6013      	str	r3, [r2, #0]
}
 800f170:	bf00      	nop
 800f172:	370c      	adds	r7, #12
 800f174:	46bd      	mov	sp, r7
 800f176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17a:	4770      	bx	lr
 800f17c:	20003610 	.word	0x20003610
 800f180:	20003678 	.word	0x20003678

0800f184 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f18a:	4b0b      	ldr	r3, [pc, #44]	; (800f1b8 <xTaskGetSchedulerState+0x34>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d102      	bne.n	800f198 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f192:	2301      	movs	r3, #1
 800f194:	607b      	str	r3, [r7, #4]
 800f196:	e008      	b.n	800f1aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f198:	4b08      	ldr	r3, [pc, #32]	; (800f1bc <xTaskGetSchedulerState+0x38>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d102      	bne.n	800f1a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f1a0:	2302      	movs	r3, #2
 800f1a2:	607b      	str	r3, [r7, #4]
 800f1a4:	e001      	b.n	800f1aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f1aa:	687b      	ldr	r3, [r7, #4]
	}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	370c      	adds	r7, #12
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr
 800f1b8:	20003664 	.word	0x20003664
 800f1bc:	20003680 	.word	0x20003680

0800f1c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d051      	beq.n	800f27a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1da:	4b2a      	ldr	r3, [pc, #168]	; (800f284 <xTaskPriorityInherit+0xc4>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d241      	bcs.n	800f268 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	699b      	ldr	r3, [r3, #24]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	db06      	blt.n	800f1fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1ec:	4b25      	ldr	r3, [pc, #148]	; (800f284 <xTaskPriorityInherit+0xc4>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	6959      	ldr	r1, [r3, #20]
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f202:	4613      	mov	r3, r2
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	4413      	add	r3, r2
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	4a1f      	ldr	r2, [pc, #124]	; (800f288 <xTaskPriorityInherit+0xc8>)
 800f20c:	4413      	add	r3, r2
 800f20e:	4299      	cmp	r1, r3
 800f210:	d122      	bne.n	800f258 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	3304      	adds	r3, #4
 800f216:	4618      	mov	r0, r3
 800f218:	f7fe f87c 	bl	800d314 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f21c:	4b19      	ldr	r3, [pc, #100]	; (800f284 <xTaskPriorityInherit+0xc4>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f22a:	4b18      	ldr	r3, [pc, #96]	; (800f28c <xTaskPriorityInherit+0xcc>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d903      	bls.n	800f23a <xTaskPriorityInherit+0x7a>
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f236:	4a15      	ldr	r2, [pc, #84]	; (800f28c <xTaskPriorityInherit+0xcc>)
 800f238:	6013      	str	r3, [r2, #0]
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f23e:	4613      	mov	r3, r2
 800f240:	009b      	lsls	r3, r3, #2
 800f242:	4413      	add	r3, r2
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	4a10      	ldr	r2, [pc, #64]	; (800f288 <xTaskPriorityInherit+0xc8>)
 800f248:	441a      	add	r2, r3
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	3304      	adds	r3, #4
 800f24e:	4619      	mov	r1, r3
 800f250:	4610      	mov	r0, r2
 800f252:	f7fe f802 	bl	800d25a <vListInsertEnd>
 800f256:	e004      	b.n	800f262 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f258:	4b0a      	ldr	r3, [pc, #40]	; (800f284 <xTaskPriorityInherit+0xc4>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f262:	2301      	movs	r3, #1
 800f264:	60fb      	str	r3, [r7, #12]
 800f266:	e008      	b.n	800f27a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f26c:	4b05      	ldr	r3, [pc, #20]	; (800f284 <xTaskPriorityInherit+0xc4>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f272:	429a      	cmp	r2, r3
 800f274:	d201      	bcs.n	800f27a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f276:	2301      	movs	r3, #1
 800f278:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f27a:	68fb      	ldr	r3, [r7, #12]
	}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3710      	adds	r7, #16
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}
 800f284:	20003184 	.word	0x20003184
 800f288:	20003188 	.word	0x20003188
 800f28c:	20003660 	.word	0x20003660

0800f290 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f290:	b580      	push	{r7, lr}
 800f292:	b086      	sub	sp, #24
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f29c:	2300      	movs	r3, #0
 800f29e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d056      	beq.n	800f354 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f2a6:	4b2e      	ldr	r3, [pc, #184]	; (800f360 <xTaskPriorityDisinherit+0xd0>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	693a      	ldr	r2, [r7, #16]
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d00a      	beq.n	800f2c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b4:	f383 8811 	msr	BASEPRI, r3
 800f2b8:	f3bf 8f6f 	isb	sy
 800f2bc:	f3bf 8f4f 	dsb	sy
 800f2c0:	60fb      	str	r3, [r7, #12]
}
 800f2c2:	bf00      	nop
 800f2c4:	e7fe      	b.n	800f2c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d10a      	bne.n	800f2e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d2:	f383 8811 	msr	BASEPRI, r3
 800f2d6:	f3bf 8f6f 	isb	sy
 800f2da:	f3bf 8f4f 	dsb	sy
 800f2de:	60bb      	str	r3, [r7, #8]
}
 800f2e0:	bf00      	nop
 800f2e2:	e7fe      	b.n	800f2e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2e8:	1e5a      	subs	r2, r3, #1
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d02c      	beq.n	800f354 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d128      	bne.n	800f354 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	3304      	adds	r3, #4
 800f306:	4618      	mov	r0, r3
 800f308:	f7fe f804 	bl	800d314 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f318:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f31c:	693b      	ldr	r3, [r7, #16]
 800f31e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f324:	4b0f      	ldr	r3, [pc, #60]	; (800f364 <xTaskPriorityDisinherit+0xd4>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	429a      	cmp	r2, r3
 800f32a:	d903      	bls.n	800f334 <xTaskPriorityDisinherit+0xa4>
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f330:	4a0c      	ldr	r2, [pc, #48]	; (800f364 <xTaskPriorityDisinherit+0xd4>)
 800f332:	6013      	str	r3, [r2, #0]
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f338:	4613      	mov	r3, r2
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	4413      	add	r3, r2
 800f33e:	009b      	lsls	r3, r3, #2
 800f340:	4a09      	ldr	r2, [pc, #36]	; (800f368 <xTaskPriorityDisinherit+0xd8>)
 800f342:	441a      	add	r2, r3
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	3304      	adds	r3, #4
 800f348:	4619      	mov	r1, r3
 800f34a:	4610      	mov	r0, r2
 800f34c:	f7fd ff85 	bl	800d25a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f350:	2301      	movs	r3, #1
 800f352:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f354:	697b      	ldr	r3, [r7, #20]
	}
 800f356:	4618      	mov	r0, r3
 800f358:	3718      	adds	r7, #24
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	20003184 	.word	0x20003184
 800f364:	20003660 	.word	0x20003660
 800f368:	20003188 	.word	0x20003188

0800f36c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b088      	sub	sp, #32
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f37a:	2301      	movs	r3, #1
 800f37c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d06a      	beq.n	800f45a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f384:	69bb      	ldr	r3, [r7, #24]
 800f386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d10a      	bne.n	800f3a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f390:	f383 8811 	msr	BASEPRI, r3
 800f394:	f3bf 8f6f 	isb	sy
 800f398:	f3bf 8f4f 	dsb	sy
 800f39c:	60fb      	str	r3, [r7, #12]
}
 800f39e:	bf00      	nop
 800f3a0:	e7fe      	b.n	800f3a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f3a2:	69bb      	ldr	r3, [r7, #24]
 800f3a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3a6:	683a      	ldr	r2, [r7, #0]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d902      	bls.n	800f3b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	61fb      	str	r3, [r7, #28]
 800f3b0:	e002      	b.n	800f3b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f3b2:	69bb      	ldr	r3, [r7, #24]
 800f3b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f3b8:	69bb      	ldr	r3, [r7, #24]
 800f3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3bc:	69fa      	ldr	r2, [r7, #28]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d04b      	beq.n	800f45a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f3c2:	69bb      	ldr	r3, [r7, #24]
 800f3c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3c6:	697a      	ldr	r2, [r7, #20]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d146      	bne.n	800f45a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f3cc:	4b25      	ldr	r3, [pc, #148]	; (800f464 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	69ba      	ldr	r2, [r7, #24]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d10a      	bne.n	800f3ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3da:	f383 8811 	msr	BASEPRI, r3
 800f3de:	f3bf 8f6f 	isb	sy
 800f3e2:	f3bf 8f4f 	dsb	sy
 800f3e6:	60bb      	str	r3, [r7, #8]
}
 800f3e8:	bf00      	nop
 800f3ea:	e7fe      	b.n	800f3ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f3ec:	69bb      	ldr	r3, [r7, #24]
 800f3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	69fa      	ldr	r2, [r7, #28]
 800f3f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	699b      	ldr	r3, [r3, #24]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	db04      	blt.n	800f40a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	6959      	ldr	r1, [r3, #20]
 800f40e:	693a      	ldr	r2, [r7, #16]
 800f410:	4613      	mov	r3, r2
 800f412:	009b      	lsls	r3, r3, #2
 800f414:	4413      	add	r3, r2
 800f416:	009b      	lsls	r3, r3, #2
 800f418:	4a13      	ldr	r2, [pc, #76]	; (800f468 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f41a:	4413      	add	r3, r2
 800f41c:	4299      	cmp	r1, r3
 800f41e:	d11c      	bne.n	800f45a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f420:	69bb      	ldr	r3, [r7, #24]
 800f422:	3304      	adds	r3, #4
 800f424:	4618      	mov	r0, r3
 800f426:	f7fd ff75 	bl	800d314 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f42a:	69bb      	ldr	r3, [r7, #24]
 800f42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f42e:	4b0f      	ldr	r3, [pc, #60]	; (800f46c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	429a      	cmp	r2, r3
 800f434:	d903      	bls.n	800f43e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f436:	69bb      	ldr	r3, [r7, #24]
 800f438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f43a:	4a0c      	ldr	r2, [pc, #48]	; (800f46c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f43c:	6013      	str	r3, [r2, #0]
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f442:	4613      	mov	r3, r2
 800f444:	009b      	lsls	r3, r3, #2
 800f446:	4413      	add	r3, r2
 800f448:	009b      	lsls	r3, r3, #2
 800f44a:	4a07      	ldr	r2, [pc, #28]	; (800f468 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f44c:	441a      	add	r2, r3
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	3304      	adds	r3, #4
 800f452:	4619      	mov	r1, r3
 800f454:	4610      	mov	r0, r2
 800f456:	f7fd ff00 	bl	800d25a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f45a:	bf00      	nop
 800f45c:	3720      	adds	r7, #32
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	20003184 	.word	0x20003184
 800f468:	20003188 	.word	0x20003188
 800f46c:	20003660 	.word	0x20003660

0800f470 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f470:	b480      	push	{r7}
 800f472:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f474:	4b07      	ldr	r3, [pc, #28]	; (800f494 <pvTaskIncrementMutexHeldCount+0x24>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d004      	beq.n	800f486 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f47c:	4b05      	ldr	r3, [pc, #20]	; (800f494 <pvTaskIncrementMutexHeldCount+0x24>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f482:	3201      	adds	r2, #1
 800f484:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800f486:	4b03      	ldr	r3, [pc, #12]	; (800f494 <pvTaskIncrementMutexHeldCount+0x24>)
 800f488:	681b      	ldr	r3, [r3, #0]
	}
 800f48a:	4618      	mov	r0, r3
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr
 800f494:	20003184 	.word	0x20003184

0800f498 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f4a2:	4b21      	ldr	r3, [pc, #132]	; (800f528 <prvAddCurrentTaskToDelayedList+0x90>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4a8:	4b20      	ldr	r3, [pc, #128]	; (800f52c <prvAddCurrentTaskToDelayedList+0x94>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	3304      	adds	r3, #4
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fd ff30 	bl	800d314 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ba:	d10a      	bne.n	800f4d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d007      	beq.n	800f4d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4c2:	4b1a      	ldr	r3, [pc, #104]	; (800f52c <prvAddCurrentTaskToDelayedList+0x94>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	3304      	adds	r3, #4
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	4819      	ldr	r0, [pc, #100]	; (800f530 <prvAddCurrentTaskToDelayedList+0x98>)
 800f4cc:	f7fd fec5 	bl	800d25a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f4d0:	e026      	b.n	800f520 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f4d2:	68fa      	ldr	r2, [r7, #12]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	4413      	add	r3, r2
 800f4d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f4da:	4b14      	ldr	r3, [pc, #80]	; (800f52c <prvAddCurrentTaskToDelayedList+0x94>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f4e2:	68ba      	ldr	r2, [r7, #8]
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d209      	bcs.n	800f4fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4ea:	4b12      	ldr	r3, [pc, #72]	; (800f534 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	4b0f      	ldr	r3, [pc, #60]	; (800f52c <prvAddCurrentTaskToDelayedList+0x94>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	3304      	adds	r3, #4
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	4610      	mov	r0, r2
 800f4f8:	f7fd fed3 	bl	800d2a2 <vListInsert>
}
 800f4fc:	e010      	b.n	800f520 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4fe:	4b0e      	ldr	r3, [pc, #56]	; (800f538 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	4b0a      	ldr	r3, [pc, #40]	; (800f52c <prvAddCurrentTaskToDelayedList+0x94>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	3304      	adds	r3, #4
 800f508:	4619      	mov	r1, r3
 800f50a:	4610      	mov	r0, r2
 800f50c:	f7fd fec9 	bl	800d2a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f510:	4b0a      	ldr	r3, [pc, #40]	; (800f53c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	68ba      	ldr	r2, [r7, #8]
 800f516:	429a      	cmp	r2, r3
 800f518:	d202      	bcs.n	800f520 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f51a:	4a08      	ldr	r2, [pc, #32]	; (800f53c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	6013      	str	r3, [r2, #0]
}
 800f520:	bf00      	nop
 800f522:	3710      	adds	r7, #16
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	2000365c 	.word	0x2000365c
 800f52c:	20003184 	.word	0x20003184
 800f530:	20003644 	.word	0x20003644
 800f534:	20003614 	.word	0x20003614
 800f538:	20003610 	.word	0x20003610
 800f53c:	20003678 	.word	0x20003678

0800f540 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b08a      	sub	sp, #40	; 0x28
 800f544:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f546:	2300      	movs	r3, #0
 800f548:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f54a:	f000 fb63 	bl	800fc14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f54e:	4b1c      	ldr	r3, [pc, #112]	; (800f5c0 <xTimerCreateTimerTask+0x80>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d021      	beq.n	800f59a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f556:	2300      	movs	r3, #0
 800f558:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f55a:	2300      	movs	r3, #0
 800f55c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f55e:	1d3a      	adds	r2, r7, #4
 800f560:	f107 0108 	add.w	r1, r7, #8
 800f564:	f107 030c 	add.w	r3, r7, #12
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fd fe2f 	bl	800d1cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f56e:	6879      	ldr	r1, [r7, #4]
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	9202      	str	r2, [sp, #8]
 800f576:	9301      	str	r3, [sp, #4]
 800f578:	2302      	movs	r3, #2
 800f57a:	9300      	str	r3, [sp, #0]
 800f57c:	2300      	movs	r3, #0
 800f57e:	460a      	mov	r2, r1
 800f580:	4910      	ldr	r1, [pc, #64]	; (800f5c4 <xTimerCreateTimerTask+0x84>)
 800f582:	4811      	ldr	r0, [pc, #68]	; (800f5c8 <xTimerCreateTimerTask+0x88>)
 800f584:	f7fe ff30 	bl	800e3e8 <xTaskCreateStatic>
 800f588:	4603      	mov	r3, r0
 800f58a:	4a10      	ldr	r2, [pc, #64]	; (800f5cc <xTimerCreateTimerTask+0x8c>)
 800f58c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f58e:	4b0f      	ldr	r3, [pc, #60]	; (800f5cc <xTimerCreateTimerTask+0x8c>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d001      	beq.n	800f59a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f596:	2301      	movs	r3, #1
 800f598:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d10a      	bne.n	800f5b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a4:	f383 8811 	msr	BASEPRI, r3
 800f5a8:	f3bf 8f6f 	isb	sy
 800f5ac:	f3bf 8f4f 	dsb	sy
 800f5b0:	613b      	str	r3, [r7, #16]
}
 800f5b2:	bf00      	nop
 800f5b4:	e7fe      	b.n	800f5b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f5b6:	697b      	ldr	r3, [r7, #20]
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3718      	adds	r7, #24
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	200036bc 	.word	0x200036bc
 800f5c4:	080144c4 	.word	0x080144c4
 800f5c8:	0800f7bd 	.word	0x0800f7bd
 800f5cc:	200036c0 	.word	0x200036c0

0800f5d0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b088      	sub	sp, #32
 800f5d4:	af02      	add	r7, sp, #8
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	60b9      	str	r1, [r7, #8]
 800f5da:	607a      	str	r2, [r7, #4]
 800f5dc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f5de:	202c      	movs	r0, #44	; 0x2c
 800f5e0:	f000 fdaa 	bl	8010138 <pvPortMalloc>
 800f5e4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d00d      	beq.n	800f608 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	9301      	str	r3, [sp, #4]
 800f5f8:	6a3b      	ldr	r3, [r7, #32]
 800f5fa:	9300      	str	r3, [sp, #0]
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	68b9      	ldr	r1, [r7, #8]
 800f602:	68f8      	ldr	r0, [r7, #12]
 800f604:	f000 f805 	bl	800f612 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f608:	697b      	ldr	r3, [r7, #20]
	}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3718      	adds	r7, #24
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}

0800f612 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f612:	b580      	push	{r7, lr}
 800f614:	b086      	sub	sp, #24
 800f616:	af00      	add	r7, sp, #0
 800f618:	60f8      	str	r0, [r7, #12]
 800f61a:	60b9      	str	r1, [r7, #8]
 800f61c:	607a      	str	r2, [r7, #4]
 800f61e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d10a      	bne.n	800f63c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800f626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f62a:	f383 8811 	msr	BASEPRI, r3
 800f62e:	f3bf 8f6f 	isb	sy
 800f632:	f3bf 8f4f 	dsb	sy
 800f636:	617b      	str	r3, [r7, #20]
}
 800f638:	bf00      	nop
 800f63a:	e7fe      	b.n	800f63a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d01e      	beq.n	800f680 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f642:	f000 fae7 	bl	800fc14 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f648:	68fa      	ldr	r2, [r7, #12]
 800f64a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64e:	68ba      	ldr	r2, [r7, #8]
 800f650:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f654:	683a      	ldr	r2, [r7, #0]
 800f656:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65a:	6a3a      	ldr	r2, [r7, #32]
 800f65c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f660:	3304      	adds	r3, #4
 800f662:	4618      	mov	r0, r3
 800f664:	f7fd fdec 	bl	800d240 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d008      	beq.n	800f680 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f674:	f043 0304 	orr.w	r3, r3, #4
 800f678:	b2da      	uxtb	r2, r3
 800f67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f67c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f680:	bf00      	nop
 800f682:	3718      	adds	r7, #24
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b08a      	sub	sp, #40	; 0x28
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	607a      	str	r2, [r7, #4]
 800f694:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f696:	2300      	movs	r3, #0
 800f698:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d10a      	bne.n	800f6b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a4:	f383 8811 	msr	BASEPRI, r3
 800f6a8:	f3bf 8f6f 	isb	sy
 800f6ac:	f3bf 8f4f 	dsb	sy
 800f6b0:	623b      	str	r3, [r7, #32]
}
 800f6b2:	bf00      	nop
 800f6b4:	e7fe      	b.n	800f6b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f6b6:	4b1a      	ldr	r3, [pc, #104]	; (800f720 <xTimerGenericCommand+0x98>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d02a      	beq.n	800f714 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	2b05      	cmp	r3, #5
 800f6ce:	dc18      	bgt.n	800f702 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f6d0:	f7ff fd58 	bl	800f184 <xTaskGetSchedulerState>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	2b02      	cmp	r3, #2
 800f6d8:	d109      	bne.n	800f6ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f6da:	4b11      	ldr	r3, [pc, #68]	; (800f720 <xTimerGenericCommand+0x98>)
 800f6dc:	6818      	ldr	r0, [r3, #0]
 800f6de:	f107 0110 	add.w	r1, r7, #16
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6e6:	f7fe f819 	bl	800d71c <xQueueGenericSend>
 800f6ea:	6278      	str	r0, [r7, #36]	; 0x24
 800f6ec:	e012      	b.n	800f714 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f6ee:	4b0c      	ldr	r3, [pc, #48]	; (800f720 <xTimerGenericCommand+0x98>)
 800f6f0:	6818      	ldr	r0, [r3, #0]
 800f6f2:	f107 0110 	add.w	r1, r7, #16
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	f7fe f80f 	bl	800d71c <xQueueGenericSend>
 800f6fe:	6278      	str	r0, [r7, #36]	; 0x24
 800f700:	e008      	b.n	800f714 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f702:	4b07      	ldr	r3, [pc, #28]	; (800f720 <xTimerGenericCommand+0x98>)
 800f704:	6818      	ldr	r0, [r3, #0]
 800f706:	f107 0110 	add.w	r1, r7, #16
 800f70a:	2300      	movs	r3, #0
 800f70c:	683a      	ldr	r2, [r7, #0]
 800f70e:	f7fe f903 	bl	800d918 <xQueueGenericSendFromISR>
 800f712:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f716:	4618      	mov	r0, r3
 800f718:	3728      	adds	r7, #40	; 0x28
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
 800f71e:	bf00      	nop
 800f720:	200036bc 	.word	0x200036bc

0800f724 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b088      	sub	sp, #32
 800f728:	af02      	add	r7, sp, #8
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f72e:	4b22      	ldr	r3, [pc, #136]	; (800f7b8 <prvProcessExpiredTimer+0x94>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	68db      	ldr	r3, [r3, #12]
 800f734:	68db      	ldr	r3, [r3, #12]
 800f736:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	3304      	adds	r3, #4
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7fd fde9 	bl	800d314 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f748:	f003 0304 	and.w	r3, r3, #4
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d022      	beq.n	800f796 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	699a      	ldr	r2, [r3, #24]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	18d1      	adds	r1, r2, r3
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	683a      	ldr	r2, [r7, #0]
 800f75c:	6978      	ldr	r0, [r7, #20]
 800f75e:	f000 f8d1 	bl	800f904 <prvInsertTimerInActiveList>
 800f762:	4603      	mov	r3, r0
 800f764:	2b00      	cmp	r3, #0
 800f766:	d01f      	beq.n	800f7a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f768:	2300      	movs	r3, #0
 800f76a:	9300      	str	r3, [sp, #0]
 800f76c:	2300      	movs	r3, #0
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	2100      	movs	r1, #0
 800f772:	6978      	ldr	r0, [r7, #20]
 800f774:	f7ff ff88 	bl	800f688 <xTimerGenericCommand>
 800f778:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d113      	bne.n	800f7a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f784:	f383 8811 	msr	BASEPRI, r3
 800f788:	f3bf 8f6f 	isb	sy
 800f78c:	f3bf 8f4f 	dsb	sy
 800f790:	60fb      	str	r3, [r7, #12]
}
 800f792:	bf00      	nop
 800f794:	e7fe      	b.n	800f794 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f79c:	f023 0301 	bic.w	r3, r3, #1
 800f7a0:	b2da      	uxtb	r2, r3
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	6a1b      	ldr	r3, [r3, #32]
 800f7ac:	6978      	ldr	r0, [r7, #20]
 800f7ae:	4798      	blx	r3
}
 800f7b0:	bf00      	nop
 800f7b2:	3718      	adds	r7, #24
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	200036b4 	.word	0x200036b4

0800f7bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7c4:	f107 0308 	add.w	r3, r7, #8
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f000 f857 	bl	800f87c <prvGetNextExpireTime>
 800f7ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	4619      	mov	r1, r3
 800f7d4:	68f8      	ldr	r0, [r7, #12]
 800f7d6:	f000 f803 	bl	800f7e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f7da:	f000 f8d5 	bl	800f988 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7de:	e7f1      	b.n	800f7c4 <prvTimerTask+0x8>

0800f7e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b084      	sub	sp, #16
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f7ea:	f7ff f861 	bl	800e8b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7ee:	f107 0308 	add.w	r3, r7, #8
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f000 f866 	bl	800f8c4 <prvSampleTimeNow>
 800f7f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d130      	bne.n	800f862 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d10a      	bne.n	800f81c <prvProcessTimerOrBlockTask+0x3c>
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d806      	bhi.n	800f81c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f80e:	f7ff f895 	bl	800e93c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f812:	68f9      	ldr	r1, [r7, #12]
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f7ff ff85 	bl	800f724 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f81a:	e024      	b.n	800f866 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d008      	beq.n	800f834 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f822:	4b13      	ldr	r3, [pc, #76]	; (800f870 <prvProcessTimerOrBlockTask+0x90>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d101      	bne.n	800f830 <prvProcessTimerOrBlockTask+0x50>
 800f82c:	2301      	movs	r3, #1
 800f82e:	e000      	b.n	800f832 <prvProcessTimerOrBlockTask+0x52>
 800f830:	2300      	movs	r3, #0
 800f832:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f834:	4b0f      	ldr	r3, [pc, #60]	; (800f874 <prvProcessTimerOrBlockTask+0x94>)
 800f836:	6818      	ldr	r0, [r3, #0]
 800f838:	687a      	ldr	r2, [r7, #4]
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	1ad3      	subs	r3, r2, r3
 800f83e:	683a      	ldr	r2, [r7, #0]
 800f840:	4619      	mov	r1, r3
 800f842:	f7fe fd9d 	bl	800e380 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f846:	f7ff f879 	bl	800e93c <xTaskResumeAll>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d10a      	bne.n	800f866 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f850:	4b09      	ldr	r3, [pc, #36]	; (800f878 <prvProcessTimerOrBlockTask+0x98>)
 800f852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f856:	601a      	str	r2, [r3, #0]
 800f858:	f3bf 8f4f 	dsb	sy
 800f85c:	f3bf 8f6f 	isb	sy
}
 800f860:	e001      	b.n	800f866 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f862:	f7ff f86b 	bl	800e93c <xTaskResumeAll>
}
 800f866:	bf00      	nop
 800f868:	3710      	adds	r7, #16
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
 800f86e:	bf00      	nop
 800f870:	200036b8 	.word	0x200036b8
 800f874:	200036bc 	.word	0x200036bc
 800f878:	e000ed04 	.word	0xe000ed04

0800f87c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f87c:	b480      	push	{r7}
 800f87e:	b085      	sub	sp, #20
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f884:	4b0e      	ldr	r3, [pc, #56]	; (800f8c0 <prvGetNextExpireTime+0x44>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d101      	bne.n	800f892 <prvGetNextExpireTime+0x16>
 800f88e:	2201      	movs	r2, #1
 800f890:	e000      	b.n	800f894 <prvGetNextExpireTime+0x18>
 800f892:	2200      	movs	r2, #0
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d105      	bne.n	800f8ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f8a0:	4b07      	ldr	r3, [pc, #28]	; (800f8c0 <prvGetNextExpireTime+0x44>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	60fb      	str	r3, [r7, #12]
 800f8aa:	e001      	b.n	800f8b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3714      	adds	r7, #20
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	200036b4 	.word	0x200036b4

0800f8c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f8cc:	f7ff f8d4 	bl	800ea78 <xTaskGetTickCount>
 800f8d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f8d2:	4b0b      	ldr	r3, [pc, #44]	; (800f900 <prvSampleTimeNow+0x3c>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d205      	bcs.n	800f8e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f8dc:	f000 f936 	bl	800fb4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	601a      	str	r2, [r3, #0]
 800f8e6:	e002      	b.n	800f8ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f8ee:	4a04      	ldr	r2, [pc, #16]	; (800f900 <prvSampleTimeNow+0x3c>)
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3710      	adds	r7, #16
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	200036c4 	.word	0x200036c4

0800f904 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b086      	sub	sp, #24
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	607a      	str	r2, [r7, #4]
 800f910:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f912:	2300      	movs	r3, #0
 800f914:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	68ba      	ldr	r2, [r7, #8]
 800f91a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	68fa      	ldr	r2, [r7, #12]
 800f920:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f922:	68ba      	ldr	r2, [r7, #8]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	429a      	cmp	r2, r3
 800f928:	d812      	bhi.n	800f950 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	1ad2      	subs	r2, r2, r3
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	699b      	ldr	r3, [r3, #24]
 800f934:	429a      	cmp	r2, r3
 800f936:	d302      	bcc.n	800f93e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f938:	2301      	movs	r3, #1
 800f93a:	617b      	str	r3, [r7, #20]
 800f93c:	e01b      	b.n	800f976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f93e:	4b10      	ldr	r3, [pc, #64]	; (800f980 <prvInsertTimerInActiveList+0x7c>)
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	3304      	adds	r3, #4
 800f946:	4619      	mov	r1, r3
 800f948:	4610      	mov	r0, r2
 800f94a:	f7fd fcaa 	bl	800d2a2 <vListInsert>
 800f94e:	e012      	b.n	800f976 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	429a      	cmp	r2, r3
 800f956:	d206      	bcs.n	800f966 <prvInsertTimerInActiveList+0x62>
 800f958:	68ba      	ldr	r2, [r7, #8]
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d302      	bcc.n	800f966 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f960:	2301      	movs	r3, #1
 800f962:	617b      	str	r3, [r7, #20]
 800f964:	e007      	b.n	800f976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f966:	4b07      	ldr	r3, [pc, #28]	; (800f984 <prvInsertTimerInActiveList+0x80>)
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	3304      	adds	r3, #4
 800f96e:	4619      	mov	r1, r3
 800f970:	4610      	mov	r0, r2
 800f972:	f7fd fc96 	bl	800d2a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f976:	697b      	ldr	r3, [r7, #20]
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3718      	adds	r7, #24
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	200036b8 	.word	0x200036b8
 800f984:	200036b4 	.word	0x200036b4

0800f988 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b08e      	sub	sp, #56	; 0x38
 800f98c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f98e:	e0ca      	b.n	800fb26 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	da18      	bge.n	800f9c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f996:	1d3b      	adds	r3, r7, #4
 800f998:	3304      	adds	r3, #4
 800f99a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d10a      	bne.n	800f9b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a6:	f383 8811 	msr	BASEPRI, r3
 800f9aa:	f3bf 8f6f 	isb	sy
 800f9ae:	f3bf 8f4f 	dsb	sy
 800f9b2:	61fb      	str	r3, [r7, #28]
}
 800f9b4:	bf00      	nop
 800f9b6:	e7fe      	b.n	800f9b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9be:	6850      	ldr	r0, [r2, #4]
 800f9c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9c2:	6892      	ldr	r2, [r2, #8]
 800f9c4:	4611      	mov	r1, r2
 800f9c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	f2c0 80ab 	blt.w	800fb26 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d6:	695b      	ldr	r3, [r3, #20]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d004      	beq.n	800f9e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9de:	3304      	adds	r3, #4
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7fd fc97 	bl	800d314 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9e6:	463b      	mov	r3, r7
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7ff ff6b 	bl	800f8c4 <prvSampleTimeNow>
 800f9ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2b09      	cmp	r3, #9
 800f9f4:	f200 8096 	bhi.w	800fb24 <prvProcessReceivedCommands+0x19c>
 800f9f8:	a201      	add	r2, pc, #4	; (adr r2, 800fa00 <prvProcessReceivedCommands+0x78>)
 800f9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9fe:	bf00      	nop
 800fa00:	0800fa29 	.word	0x0800fa29
 800fa04:	0800fa29 	.word	0x0800fa29
 800fa08:	0800fa29 	.word	0x0800fa29
 800fa0c:	0800fa9d 	.word	0x0800fa9d
 800fa10:	0800fab1 	.word	0x0800fab1
 800fa14:	0800fafb 	.word	0x0800fafb
 800fa18:	0800fa29 	.word	0x0800fa29
 800fa1c:	0800fa29 	.word	0x0800fa29
 800fa20:	0800fa9d 	.word	0x0800fa9d
 800fa24:	0800fab1 	.word	0x0800fab1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa2e:	f043 0301 	orr.w	r3, r3, #1
 800fa32:	b2da      	uxtb	r2, r3
 800fa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fa3a:	68ba      	ldr	r2, [r7, #8]
 800fa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa3e:	699b      	ldr	r3, [r3, #24]
 800fa40:	18d1      	adds	r1, r2, r3
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa48:	f7ff ff5c 	bl	800f904 <prvInsertTimerInActiveList>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d069      	beq.n	800fb26 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa54:	6a1b      	ldr	r3, [r3, #32]
 800fa56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa60:	f003 0304 	and.w	r3, r3, #4
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d05e      	beq.n	800fb26 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fa68:	68ba      	ldr	r2, [r7, #8]
 800fa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6c:	699b      	ldr	r3, [r3, #24]
 800fa6e:	441a      	add	r2, r3
 800fa70:	2300      	movs	r3, #0
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	2300      	movs	r3, #0
 800fa76:	2100      	movs	r1, #0
 800fa78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa7a:	f7ff fe05 	bl	800f688 <xTimerGenericCommand>
 800fa7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fa80:	6a3b      	ldr	r3, [r7, #32]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d14f      	bne.n	800fb26 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8a:	f383 8811 	msr	BASEPRI, r3
 800fa8e:	f3bf 8f6f 	isb	sy
 800fa92:	f3bf 8f4f 	dsb	sy
 800fa96:	61bb      	str	r3, [r7, #24]
}
 800fa98:	bf00      	nop
 800fa9a:	e7fe      	b.n	800fa9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800faa2:	f023 0301 	bic.w	r3, r3, #1
 800faa6:	b2da      	uxtb	r2, r3
 800faa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800faae:	e03a      	b.n	800fb26 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fab6:	f043 0301 	orr.w	r3, r3, #1
 800faba:	b2da      	uxtb	r2, r3
 800fabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fabe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fac2:	68ba      	ldr	r2, [r7, #8]
 800fac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faca:	699b      	ldr	r3, [r3, #24]
 800facc:	2b00      	cmp	r3, #0
 800face:	d10a      	bne.n	800fae6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad4:	f383 8811 	msr	BASEPRI, r3
 800fad8:	f3bf 8f6f 	isb	sy
 800fadc:	f3bf 8f4f 	dsb	sy
 800fae0:	617b      	str	r3, [r7, #20]
}
 800fae2:	bf00      	nop
 800fae4:	e7fe      	b.n	800fae4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae8:	699a      	ldr	r2, [r3, #24]
 800faea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faec:	18d1      	adds	r1, r2, r3
 800faee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800faf4:	f7ff ff06 	bl	800f904 <prvInsertTimerInActiveList>
					break;
 800faf8:	e015      	b.n	800fb26 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb00:	f003 0302 	and.w	r3, r3, #2
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d103      	bne.n	800fb10 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fb08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb0a:	f000 fbe1 	bl	80102d0 <vPortFree>
 800fb0e:	e00a      	b.n	800fb26 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb16:	f023 0301 	bic.w	r3, r3, #1
 800fb1a:	b2da      	uxtb	r2, r3
 800fb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fb22:	e000      	b.n	800fb26 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800fb24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb26:	4b08      	ldr	r3, [pc, #32]	; (800fb48 <prvProcessReceivedCommands+0x1c0>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	1d39      	adds	r1, r7, #4
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7fe f81a 	bl	800db68 <xQueueReceive>
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	f47f af2a 	bne.w	800f990 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fb3c:	bf00      	nop
 800fb3e:	bf00      	nop
 800fb40:	3730      	adds	r7, #48	; 0x30
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	200036bc 	.word	0x200036bc

0800fb4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b088      	sub	sp, #32
 800fb50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb52:	e048      	b.n	800fbe6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb54:	4b2d      	ldr	r3, [pc, #180]	; (800fc0c <prvSwitchTimerLists+0xc0>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb5e:	4b2b      	ldr	r3, [pc, #172]	; (800fc0c <prvSwitchTimerLists+0xc0>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	68db      	ldr	r3, [r3, #12]
 800fb66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	3304      	adds	r3, #4
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7fd fbd1 	bl	800d314 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	6a1b      	ldr	r3, [r3, #32]
 800fb76:	68f8      	ldr	r0, [r7, #12]
 800fb78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb80:	f003 0304 	and.w	r3, r3, #4
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d02e      	beq.n	800fbe6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	699b      	ldr	r3, [r3, #24]
 800fb8c:	693a      	ldr	r2, [r7, #16]
 800fb8e:	4413      	add	r3, r2
 800fb90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fb92:	68ba      	ldr	r2, [r7, #8]
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d90e      	bls.n	800fbb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	68ba      	ldr	r2, [r7, #8]
 800fb9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	68fa      	ldr	r2, [r7, #12]
 800fba4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fba6:	4b19      	ldr	r3, [pc, #100]	; (800fc0c <prvSwitchTimerLists+0xc0>)
 800fba8:	681a      	ldr	r2, [r3, #0]
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	3304      	adds	r3, #4
 800fbae:	4619      	mov	r1, r3
 800fbb0:	4610      	mov	r0, r2
 800fbb2:	f7fd fb76 	bl	800d2a2 <vListInsert>
 800fbb6:	e016      	b.n	800fbe6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fbb8:	2300      	movs	r3, #0
 800fbba:	9300      	str	r3, [sp, #0]
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	693a      	ldr	r2, [r7, #16]
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	68f8      	ldr	r0, [r7, #12]
 800fbc4:	f7ff fd60 	bl	800f688 <xTimerGenericCommand>
 800fbc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d10a      	bne.n	800fbe6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd4:	f383 8811 	msr	BASEPRI, r3
 800fbd8:	f3bf 8f6f 	isb	sy
 800fbdc:	f3bf 8f4f 	dsb	sy
 800fbe0:	603b      	str	r3, [r7, #0]
}
 800fbe2:	bf00      	nop
 800fbe4:	e7fe      	b.n	800fbe4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fbe6:	4b09      	ldr	r3, [pc, #36]	; (800fc0c <prvSwitchTimerLists+0xc0>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d1b1      	bne.n	800fb54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fbf0:	4b06      	ldr	r3, [pc, #24]	; (800fc0c <prvSwitchTimerLists+0xc0>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fbf6:	4b06      	ldr	r3, [pc, #24]	; (800fc10 <prvSwitchTimerLists+0xc4>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	4a04      	ldr	r2, [pc, #16]	; (800fc0c <prvSwitchTimerLists+0xc0>)
 800fbfc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fbfe:	4a04      	ldr	r2, [pc, #16]	; (800fc10 <prvSwitchTimerLists+0xc4>)
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	6013      	str	r3, [r2, #0]
}
 800fc04:	bf00      	nop
 800fc06:	3718      	adds	r7, #24
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}
 800fc0c:	200036b4 	.word	0x200036b4
 800fc10:	200036b8 	.word	0x200036b8

0800fc14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fc1a:	f000 f96b 	bl	800fef4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fc1e:	4b15      	ldr	r3, [pc, #84]	; (800fc74 <prvCheckForValidListAndQueue+0x60>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d120      	bne.n	800fc68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fc26:	4814      	ldr	r0, [pc, #80]	; (800fc78 <prvCheckForValidListAndQueue+0x64>)
 800fc28:	f7fd faea 	bl	800d200 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fc2c:	4813      	ldr	r0, [pc, #76]	; (800fc7c <prvCheckForValidListAndQueue+0x68>)
 800fc2e:	f7fd fae7 	bl	800d200 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fc32:	4b13      	ldr	r3, [pc, #76]	; (800fc80 <prvCheckForValidListAndQueue+0x6c>)
 800fc34:	4a10      	ldr	r2, [pc, #64]	; (800fc78 <prvCheckForValidListAndQueue+0x64>)
 800fc36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fc38:	4b12      	ldr	r3, [pc, #72]	; (800fc84 <prvCheckForValidListAndQueue+0x70>)
 800fc3a:	4a10      	ldr	r2, [pc, #64]	; (800fc7c <prvCheckForValidListAndQueue+0x68>)
 800fc3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fc3e:	2300      	movs	r3, #0
 800fc40:	9300      	str	r3, [sp, #0]
 800fc42:	4b11      	ldr	r3, [pc, #68]	; (800fc88 <prvCheckForValidListAndQueue+0x74>)
 800fc44:	4a11      	ldr	r2, [pc, #68]	; (800fc8c <prvCheckForValidListAndQueue+0x78>)
 800fc46:	2110      	movs	r1, #16
 800fc48:	200a      	movs	r0, #10
 800fc4a:	f7fd fbf5 	bl	800d438 <xQueueGenericCreateStatic>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	4a08      	ldr	r2, [pc, #32]	; (800fc74 <prvCheckForValidListAndQueue+0x60>)
 800fc52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fc54:	4b07      	ldr	r3, [pc, #28]	; (800fc74 <prvCheckForValidListAndQueue+0x60>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d005      	beq.n	800fc68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fc5c:	4b05      	ldr	r3, [pc, #20]	; (800fc74 <prvCheckForValidListAndQueue+0x60>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	490b      	ldr	r1, [pc, #44]	; (800fc90 <prvCheckForValidListAndQueue+0x7c>)
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fe fb38 	bl	800e2d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc68:	f000 f974 	bl	800ff54 <vPortExitCritical>
}
 800fc6c:	bf00      	nop
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop
 800fc74:	200036bc 	.word	0x200036bc
 800fc78:	2000368c 	.word	0x2000368c
 800fc7c:	200036a0 	.word	0x200036a0
 800fc80:	200036b4 	.word	0x200036b4
 800fc84:	200036b8 	.word	0x200036b8
 800fc88:	20003768 	.word	0x20003768
 800fc8c:	200036c8 	.word	0x200036c8
 800fc90:	080144cc 	.word	0x080144cc

0800fc94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fc94:	b480      	push	{r7}
 800fc96:	b085      	sub	sp, #20
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	60b9      	str	r1, [r7, #8]
 800fc9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	3b04      	subs	r3, #4
 800fca4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fcac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	3b04      	subs	r3, #4
 800fcb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	f023 0201 	bic.w	r2, r3, #1
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	3b04      	subs	r3, #4
 800fcc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fcc4:	4a0c      	ldr	r2, [pc, #48]	; (800fcf8 <pxPortInitialiseStack+0x64>)
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	3b14      	subs	r3, #20
 800fcce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	3b04      	subs	r3, #4
 800fcda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f06f 0202 	mvn.w	r2, #2
 800fce2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	3b20      	subs	r3, #32
 800fce8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fcea:	68fb      	ldr	r3, [r7, #12]
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3714      	adds	r7, #20
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr
 800fcf8:	0800fcfd 	.word	0x0800fcfd

0800fcfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b085      	sub	sp, #20
 800fd00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fd02:	2300      	movs	r3, #0
 800fd04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fd06:	4b12      	ldr	r3, [pc, #72]	; (800fd50 <prvTaskExitError+0x54>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd0e:	d00a      	beq.n	800fd26 <prvTaskExitError+0x2a>
	__asm volatile
 800fd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd14:	f383 8811 	msr	BASEPRI, r3
 800fd18:	f3bf 8f6f 	isb	sy
 800fd1c:	f3bf 8f4f 	dsb	sy
 800fd20:	60fb      	str	r3, [r7, #12]
}
 800fd22:	bf00      	nop
 800fd24:	e7fe      	b.n	800fd24 <prvTaskExitError+0x28>
	__asm volatile
 800fd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd2a:	f383 8811 	msr	BASEPRI, r3
 800fd2e:	f3bf 8f6f 	isb	sy
 800fd32:	f3bf 8f4f 	dsb	sy
 800fd36:	60bb      	str	r3, [r7, #8]
}
 800fd38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fd3a:	bf00      	nop
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d0fc      	beq.n	800fd3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fd42:	bf00      	nop
 800fd44:	bf00      	nop
 800fd46:	3714      	adds	r7, #20
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr
 800fd50:	20000024 	.word	0x20000024
	...

0800fd60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fd60:	4b07      	ldr	r3, [pc, #28]	; (800fd80 <pxCurrentTCBConst2>)
 800fd62:	6819      	ldr	r1, [r3, #0]
 800fd64:	6808      	ldr	r0, [r1, #0]
 800fd66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd6a:	f380 8809 	msr	PSP, r0
 800fd6e:	f3bf 8f6f 	isb	sy
 800fd72:	f04f 0000 	mov.w	r0, #0
 800fd76:	f380 8811 	msr	BASEPRI, r0
 800fd7a:	4770      	bx	lr
 800fd7c:	f3af 8000 	nop.w

0800fd80 <pxCurrentTCBConst2>:
 800fd80:	20003184 	.word	0x20003184
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd84:	bf00      	nop
 800fd86:	bf00      	nop

0800fd88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd88:	4808      	ldr	r0, [pc, #32]	; (800fdac <prvPortStartFirstTask+0x24>)
 800fd8a:	6800      	ldr	r0, [r0, #0]
 800fd8c:	6800      	ldr	r0, [r0, #0]
 800fd8e:	f380 8808 	msr	MSP, r0
 800fd92:	f04f 0000 	mov.w	r0, #0
 800fd96:	f380 8814 	msr	CONTROL, r0
 800fd9a:	b662      	cpsie	i
 800fd9c:	b661      	cpsie	f
 800fd9e:	f3bf 8f4f 	dsb	sy
 800fda2:	f3bf 8f6f 	isb	sy
 800fda6:	df00      	svc	0
 800fda8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fdaa:	bf00      	nop
 800fdac:	e000ed08 	.word	0xe000ed08

0800fdb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fdb6:	4b46      	ldr	r3, [pc, #280]	; (800fed0 <xPortStartScheduler+0x120>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a46      	ldr	r2, [pc, #280]	; (800fed4 <xPortStartScheduler+0x124>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d10a      	bne.n	800fdd6 <xPortStartScheduler+0x26>
	__asm volatile
 800fdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc4:	f383 8811 	msr	BASEPRI, r3
 800fdc8:	f3bf 8f6f 	isb	sy
 800fdcc:	f3bf 8f4f 	dsb	sy
 800fdd0:	613b      	str	r3, [r7, #16]
}
 800fdd2:	bf00      	nop
 800fdd4:	e7fe      	b.n	800fdd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fdd6:	4b3e      	ldr	r3, [pc, #248]	; (800fed0 <xPortStartScheduler+0x120>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	4a3f      	ldr	r2, [pc, #252]	; (800fed8 <xPortStartScheduler+0x128>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d10a      	bne.n	800fdf6 <xPortStartScheduler+0x46>
	__asm volatile
 800fde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde4:	f383 8811 	msr	BASEPRI, r3
 800fde8:	f3bf 8f6f 	isb	sy
 800fdec:	f3bf 8f4f 	dsb	sy
 800fdf0:	60fb      	str	r3, [r7, #12]
}
 800fdf2:	bf00      	nop
 800fdf4:	e7fe      	b.n	800fdf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fdf6:	4b39      	ldr	r3, [pc, #228]	; (800fedc <xPortStartScheduler+0x12c>)
 800fdf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	b2db      	uxtb	r3, r3
 800fe00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	22ff      	movs	r2, #255	; 0xff
 800fe06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fe10:	78fb      	ldrb	r3, [r7, #3]
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fe18:	b2da      	uxtb	r2, r3
 800fe1a:	4b31      	ldr	r3, [pc, #196]	; (800fee0 <xPortStartScheduler+0x130>)
 800fe1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fe1e:	4b31      	ldr	r3, [pc, #196]	; (800fee4 <xPortStartScheduler+0x134>)
 800fe20:	2207      	movs	r2, #7
 800fe22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe24:	e009      	b.n	800fe3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fe26:	4b2f      	ldr	r3, [pc, #188]	; (800fee4 <xPortStartScheduler+0x134>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	3b01      	subs	r3, #1
 800fe2c:	4a2d      	ldr	r2, [pc, #180]	; (800fee4 <xPortStartScheduler+0x134>)
 800fe2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fe30:	78fb      	ldrb	r3, [r7, #3]
 800fe32:	b2db      	uxtb	r3, r3
 800fe34:	005b      	lsls	r3, r3, #1
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe3a:	78fb      	ldrb	r3, [r7, #3]
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe42:	2b80      	cmp	r3, #128	; 0x80
 800fe44:	d0ef      	beq.n	800fe26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fe46:	4b27      	ldr	r3, [pc, #156]	; (800fee4 <xPortStartScheduler+0x134>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	f1c3 0307 	rsb	r3, r3, #7
 800fe4e:	2b04      	cmp	r3, #4
 800fe50:	d00a      	beq.n	800fe68 <xPortStartScheduler+0xb8>
	__asm volatile
 800fe52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe56:	f383 8811 	msr	BASEPRI, r3
 800fe5a:	f3bf 8f6f 	isb	sy
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	60bb      	str	r3, [r7, #8]
}
 800fe64:	bf00      	nop
 800fe66:	e7fe      	b.n	800fe66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fe68:	4b1e      	ldr	r3, [pc, #120]	; (800fee4 <xPortStartScheduler+0x134>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	021b      	lsls	r3, r3, #8
 800fe6e:	4a1d      	ldr	r2, [pc, #116]	; (800fee4 <xPortStartScheduler+0x134>)
 800fe70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe72:	4b1c      	ldr	r3, [pc, #112]	; (800fee4 <xPortStartScheduler+0x134>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fe7a:	4a1a      	ldr	r2, [pc, #104]	; (800fee4 <xPortStartScheduler+0x134>)
 800fe7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	b2da      	uxtb	r2, r3
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe86:	4b18      	ldr	r3, [pc, #96]	; (800fee8 <xPortStartScheduler+0x138>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	4a17      	ldr	r2, [pc, #92]	; (800fee8 <xPortStartScheduler+0x138>)
 800fe8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fe90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe92:	4b15      	ldr	r3, [pc, #84]	; (800fee8 <xPortStartScheduler+0x138>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	4a14      	ldr	r2, [pc, #80]	; (800fee8 <xPortStartScheduler+0x138>)
 800fe98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fe9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fe9e:	f000 f8dd 	bl	801005c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fea2:	4b12      	ldr	r3, [pc, #72]	; (800feec <xPortStartScheduler+0x13c>)
 800fea4:	2200      	movs	r2, #0
 800fea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fea8:	f000 f8fc 	bl	80100a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800feac:	4b10      	ldr	r3, [pc, #64]	; (800fef0 <xPortStartScheduler+0x140>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4a0f      	ldr	r2, [pc, #60]	; (800fef0 <xPortStartScheduler+0x140>)
 800feb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800feb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800feb8:	f7ff ff66 	bl	800fd88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800febc:	f7fe fea6 	bl	800ec0c <vTaskSwitchContext>
	prvTaskExitError();
 800fec0:	f7ff ff1c 	bl	800fcfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fec4:	2300      	movs	r3, #0
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3718      	adds	r7, #24
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}
 800fece:	bf00      	nop
 800fed0:	e000ed00 	.word	0xe000ed00
 800fed4:	410fc271 	.word	0x410fc271
 800fed8:	410fc270 	.word	0x410fc270
 800fedc:	e000e400 	.word	0xe000e400
 800fee0:	200037b8 	.word	0x200037b8
 800fee4:	200037bc 	.word	0x200037bc
 800fee8:	e000ed20 	.word	0xe000ed20
 800feec:	20000024 	.word	0x20000024
 800fef0:	e000ef34 	.word	0xe000ef34

0800fef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
	__asm volatile
 800fefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fefe:	f383 8811 	msr	BASEPRI, r3
 800ff02:	f3bf 8f6f 	isb	sy
 800ff06:	f3bf 8f4f 	dsb	sy
 800ff0a:	607b      	str	r3, [r7, #4]
}
 800ff0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ff0e:	4b0f      	ldr	r3, [pc, #60]	; (800ff4c <vPortEnterCritical+0x58>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	3301      	adds	r3, #1
 800ff14:	4a0d      	ldr	r2, [pc, #52]	; (800ff4c <vPortEnterCritical+0x58>)
 800ff16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ff18:	4b0c      	ldr	r3, [pc, #48]	; (800ff4c <vPortEnterCritical+0x58>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	d10f      	bne.n	800ff40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ff20:	4b0b      	ldr	r3, [pc, #44]	; (800ff50 <vPortEnterCritical+0x5c>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d00a      	beq.n	800ff40 <vPortEnterCritical+0x4c>
	__asm volatile
 800ff2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff2e:	f383 8811 	msr	BASEPRI, r3
 800ff32:	f3bf 8f6f 	isb	sy
 800ff36:	f3bf 8f4f 	dsb	sy
 800ff3a:	603b      	str	r3, [r7, #0]
}
 800ff3c:	bf00      	nop
 800ff3e:	e7fe      	b.n	800ff3e <vPortEnterCritical+0x4a>
	}
}
 800ff40:	bf00      	nop
 800ff42:	370c      	adds	r7, #12
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr
 800ff4c:	20000024 	.word	0x20000024
 800ff50:	e000ed04 	.word	0xe000ed04

0800ff54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ff5a:	4b12      	ldr	r3, [pc, #72]	; (800ffa4 <vPortExitCritical+0x50>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d10a      	bne.n	800ff78 <vPortExitCritical+0x24>
	__asm volatile
 800ff62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff66:	f383 8811 	msr	BASEPRI, r3
 800ff6a:	f3bf 8f6f 	isb	sy
 800ff6e:	f3bf 8f4f 	dsb	sy
 800ff72:	607b      	str	r3, [r7, #4]
}
 800ff74:	bf00      	nop
 800ff76:	e7fe      	b.n	800ff76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ff78:	4b0a      	ldr	r3, [pc, #40]	; (800ffa4 <vPortExitCritical+0x50>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	4a09      	ldr	r2, [pc, #36]	; (800ffa4 <vPortExitCritical+0x50>)
 800ff80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ff82:	4b08      	ldr	r3, [pc, #32]	; (800ffa4 <vPortExitCritical+0x50>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d105      	bne.n	800ff96 <vPortExitCritical+0x42>
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	f383 8811 	msr	BASEPRI, r3
}
 800ff94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ff96:	bf00      	nop
 800ff98:	370c      	adds	r7, #12
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr
 800ffa2:	bf00      	nop
 800ffa4:	20000024 	.word	0x20000024
	...

0800ffb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ffb0:	f3ef 8009 	mrs	r0, PSP
 800ffb4:	f3bf 8f6f 	isb	sy
 800ffb8:	4b15      	ldr	r3, [pc, #84]	; (8010010 <pxCurrentTCBConst>)
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	f01e 0f10 	tst.w	lr, #16
 800ffc0:	bf08      	it	eq
 800ffc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ffc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffca:	6010      	str	r0, [r2, #0]
 800ffcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ffd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ffd4:	f380 8811 	msr	BASEPRI, r0
 800ffd8:	f3bf 8f4f 	dsb	sy
 800ffdc:	f3bf 8f6f 	isb	sy
 800ffe0:	f7fe fe14 	bl	800ec0c <vTaskSwitchContext>
 800ffe4:	f04f 0000 	mov.w	r0, #0
 800ffe8:	f380 8811 	msr	BASEPRI, r0
 800ffec:	bc09      	pop	{r0, r3}
 800ffee:	6819      	ldr	r1, [r3, #0]
 800fff0:	6808      	ldr	r0, [r1, #0]
 800fff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fff6:	f01e 0f10 	tst.w	lr, #16
 800fffa:	bf08      	it	eq
 800fffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010000:	f380 8809 	msr	PSP, r0
 8010004:	f3bf 8f6f 	isb	sy
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	f3af 8000 	nop.w

08010010 <pxCurrentTCBConst>:
 8010010:	20003184 	.word	0x20003184
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010014:	bf00      	nop
 8010016:	bf00      	nop

08010018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
	__asm volatile
 801001e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010022:	f383 8811 	msr	BASEPRI, r3
 8010026:	f3bf 8f6f 	isb	sy
 801002a:	f3bf 8f4f 	dsb	sy
 801002e:	607b      	str	r3, [r7, #4]
}
 8010030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010032:	f7fe fd31 	bl	800ea98 <xTaskIncrementTick>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d003      	beq.n	8010044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801003c:	4b06      	ldr	r3, [pc, #24]	; (8010058 <xPortSysTickHandler+0x40>)
 801003e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010042:	601a      	str	r2, [r3, #0]
 8010044:	2300      	movs	r3, #0
 8010046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	f383 8811 	msr	BASEPRI, r3
}
 801004e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010050:	bf00      	nop
 8010052:	3708      	adds	r7, #8
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}
 8010058:	e000ed04 	.word	0xe000ed04

0801005c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801005c:	b480      	push	{r7}
 801005e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010060:	4b0b      	ldr	r3, [pc, #44]	; (8010090 <vPortSetupTimerInterrupt+0x34>)
 8010062:	2200      	movs	r2, #0
 8010064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010066:	4b0b      	ldr	r3, [pc, #44]	; (8010094 <vPortSetupTimerInterrupt+0x38>)
 8010068:	2200      	movs	r2, #0
 801006a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801006c:	4b0a      	ldr	r3, [pc, #40]	; (8010098 <vPortSetupTimerInterrupt+0x3c>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	4a0a      	ldr	r2, [pc, #40]	; (801009c <vPortSetupTimerInterrupt+0x40>)
 8010072:	fba2 2303 	umull	r2, r3, r2, r3
 8010076:	099b      	lsrs	r3, r3, #6
 8010078:	4a09      	ldr	r2, [pc, #36]	; (80100a0 <vPortSetupTimerInterrupt+0x44>)
 801007a:	3b01      	subs	r3, #1
 801007c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801007e:	4b04      	ldr	r3, [pc, #16]	; (8010090 <vPortSetupTimerInterrupt+0x34>)
 8010080:	2207      	movs	r2, #7
 8010082:	601a      	str	r2, [r3, #0]
}
 8010084:	bf00      	nop
 8010086:	46bd      	mov	sp, r7
 8010088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008c:	4770      	bx	lr
 801008e:	bf00      	nop
 8010090:	e000e010 	.word	0xe000e010
 8010094:	e000e018 	.word	0xe000e018
 8010098:	20000004 	.word	0x20000004
 801009c:	10624dd3 	.word	0x10624dd3
 80100a0:	e000e014 	.word	0xe000e014

080100a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80100a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80100b4 <vPortEnableVFP+0x10>
 80100a8:	6801      	ldr	r1, [r0, #0]
 80100aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80100ae:	6001      	str	r1, [r0, #0]
 80100b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80100b2:	bf00      	nop
 80100b4:	e000ed88 	.word	0xe000ed88

080100b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80100b8:	b480      	push	{r7}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80100be:	f3ef 8305 	mrs	r3, IPSR
 80100c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2b0f      	cmp	r3, #15
 80100c8:	d914      	bls.n	80100f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80100ca:	4a17      	ldr	r2, [pc, #92]	; (8010128 <vPortValidateInterruptPriority+0x70>)
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	4413      	add	r3, r2
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80100d4:	4b15      	ldr	r3, [pc, #84]	; (801012c <vPortValidateInterruptPriority+0x74>)
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	7afa      	ldrb	r2, [r7, #11]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d20a      	bcs.n	80100f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80100de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e2:	f383 8811 	msr	BASEPRI, r3
 80100e6:	f3bf 8f6f 	isb	sy
 80100ea:	f3bf 8f4f 	dsb	sy
 80100ee:	607b      	str	r3, [r7, #4]
}
 80100f0:	bf00      	nop
 80100f2:	e7fe      	b.n	80100f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80100f4:	4b0e      	ldr	r3, [pc, #56]	; (8010130 <vPortValidateInterruptPriority+0x78>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80100fc:	4b0d      	ldr	r3, [pc, #52]	; (8010134 <vPortValidateInterruptPriority+0x7c>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	429a      	cmp	r2, r3
 8010102:	d90a      	bls.n	801011a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010108:	f383 8811 	msr	BASEPRI, r3
 801010c:	f3bf 8f6f 	isb	sy
 8010110:	f3bf 8f4f 	dsb	sy
 8010114:	603b      	str	r3, [r7, #0]
}
 8010116:	bf00      	nop
 8010118:	e7fe      	b.n	8010118 <vPortValidateInterruptPriority+0x60>
	}
 801011a:	bf00      	nop
 801011c:	3714      	adds	r7, #20
 801011e:	46bd      	mov	sp, r7
 8010120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010124:	4770      	bx	lr
 8010126:	bf00      	nop
 8010128:	e000e3f0 	.word	0xe000e3f0
 801012c:	200037b8 	.word	0x200037b8
 8010130:	e000ed0c 	.word	0xe000ed0c
 8010134:	200037bc 	.word	0x200037bc

08010138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b08a      	sub	sp, #40	; 0x28
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010140:	2300      	movs	r3, #0
 8010142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010144:	f7fe fbb4 	bl	800e8b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010148:	4b5b      	ldr	r3, [pc, #364]	; (80102b8 <pvPortMalloc+0x180>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d101      	bne.n	8010154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010150:	f000 f920 	bl	8010394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010154:	4b59      	ldr	r3, [pc, #356]	; (80102bc <pvPortMalloc+0x184>)
 8010156:	681a      	ldr	r2, [r3, #0]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	4013      	ands	r3, r2
 801015c:	2b00      	cmp	r3, #0
 801015e:	f040 8093 	bne.w	8010288 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d01d      	beq.n	80101a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010168:	2208      	movs	r2, #8
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	4413      	add	r3, r2
 801016e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f003 0307 	and.w	r3, r3, #7
 8010176:	2b00      	cmp	r3, #0
 8010178:	d014      	beq.n	80101a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f023 0307 	bic.w	r3, r3, #7
 8010180:	3308      	adds	r3, #8
 8010182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f003 0307 	and.w	r3, r3, #7
 801018a:	2b00      	cmp	r3, #0
 801018c:	d00a      	beq.n	80101a4 <pvPortMalloc+0x6c>
	__asm volatile
 801018e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010192:	f383 8811 	msr	BASEPRI, r3
 8010196:	f3bf 8f6f 	isb	sy
 801019a:	f3bf 8f4f 	dsb	sy
 801019e:	617b      	str	r3, [r7, #20]
}
 80101a0:	bf00      	nop
 80101a2:	e7fe      	b.n	80101a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d06e      	beq.n	8010288 <pvPortMalloc+0x150>
 80101aa:	4b45      	ldr	r3, [pc, #276]	; (80102c0 <pvPortMalloc+0x188>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	687a      	ldr	r2, [r7, #4]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d869      	bhi.n	8010288 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80101b4:	4b43      	ldr	r3, [pc, #268]	; (80102c4 <pvPortMalloc+0x18c>)
 80101b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80101b8:	4b42      	ldr	r3, [pc, #264]	; (80102c4 <pvPortMalloc+0x18c>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101be:	e004      	b.n	80101ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80101c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80101c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	687a      	ldr	r2, [r7, #4]
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d903      	bls.n	80101dc <pvPortMalloc+0xa4>
 80101d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d1f1      	bne.n	80101c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80101dc:	4b36      	ldr	r3, [pc, #216]	; (80102b8 <pvPortMalloc+0x180>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d050      	beq.n	8010288 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80101e6:	6a3b      	ldr	r3, [r7, #32]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	2208      	movs	r2, #8
 80101ec:	4413      	add	r3, r2
 80101ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80101f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f2:	681a      	ldr	r2, [r3, #0]
 80101f4:	6a3b      	ldr	r3, [r7, #32]
 80101f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80101f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101fa:	685a      	ldr	r2, [r3, #4]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	1ad2      	subs	r2, r2, r3
 8010200:	2308      	movs	r3, #8
 8010202:	005b      	lsls	r3, r3, #1
 8010204:	429a      	cmp	r2, r3
 8010206:	d91f      	bls.n	8010248 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	4413      	add	r3, r2
 801020e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	f003 0307 	and.w	r3, r3, #7
 8010216:	2b00      	cmp	r3, #0
 8010218:	d00a      	beq.n	8010230 <pvPortMalloc+0xf8>
	__asm volatile
 801021a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801021e:	f383 8811 	msr	BASEPRI, r3
 8010222:	f3bf 8f6f 	isb	sy
 8010226:	f3bf 8f4f 	dsb	sy
 801022a:	613b      	str	r3, [r7, #16]
}
 801022c:	bf00      	nop
 801022e:	e7fe      	b.n	801022e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010232:	685a      	ldr	r2, [r3, #4]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	1ad2      	subs	r2, r2, r3
 8010238:	69bb      	ldr	r3, [r7, #24]
 801023a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801023c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010242:	69b8      	ldr	r0, [r7, #24]
 8010244:	f000 f908 	bl	8010458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010248:	4b1d      	ldr	r3, [pc, #116]	; (80102c0 <pvPortMalloc+0x188>)
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	1ad3      	subs	r3, r2, r3
 8010252:	4a1b      	ldr	r2, [pc, #108]	; (80102c0 <pvPortMalloc+0x188>)
 8010254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010256:	4b1a      	ldr	r3, [pc, #104]	; (80102c0 <pvPortMalloc+0x188>)
 8010258:	681a      	ldr	r2, [r3, #0]
 801025a:	4b1b      	ldr	r3, [pc, #108]	; (80102c8 <pvPortMalloc+0x190>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	429a      	cmp	r2, r3
 8010260:	d203      	bcs.n	801026a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010262:	4b17      	ldr	r3, [pc, #92]	; (80102c0 <pvPortMalloc+0x188>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	4a18      	ldr	r2, [pc, #96]	; (80102c8 <pvPortMalloc+0x190>)
 8010268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801026a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026c:	685a      	ldr	r2, [r3, #4]
 801026e:	4b13      	ldr	r3, [pc, #76]	; (80102bc <pvPortMalloc+0x184>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	431a      	orrs	r2, r3
 8010274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027a:	2200      	movs	r2, #0
 801027c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801027e:	4b13      	ldr	r3, [pc, #76]	; (80102cc <pvPortMalloc+0x194>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	3301      	adds	r3, #1
 8010284:	4a11      	ldr	r2, [pc, #68]	; (80102cc <pvPortMalloc+0x194>)
 8010286:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010288:	f7fe fb58 	bl	800e93c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	f003 0307 	and.w	r3, r3, #7
 8010292:	2b00      	cmp	r3, #0
 8010294:	d00a      	beq.n	80102ac <pvPortMalloc+0x174>
	__asm volatile
 8010296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801029a:	f383 8811 	msr	BASEPRI, r3
 801029e:	f3bf 8f6f 	isb	sy
 80102a2:	f3bf 8f4f 	dsb	sy
 80102a6:	60fb      	str	r3, [r7, #12]
}
 80102a8:	bf00      	nop
 80102aa:	e7fe      	b.n	80102aa <pvPortMalloc+0x172>
	return pvReturn;
 80102ac:	69fb      	ldr	r3, [r7, #28]
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3728      	adds	r7, #40	; 0x28
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	200073c8 	.word	0x200073c8
 80102bc:	200073dc 	.word	0x200073dc
 80102c0:	200073cc 	.word	0x200073cc
 80102c4:	200073c0 	.word	0x200073c0
 80102c8:	200073d0 	.word	0x200073d0
 80102cc:	200073d4 	.word	0x200073d4

080102d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b086      	sub	sp, #24
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d04d      	beq.n	801037e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80102e2:	2308      	movs	r3, #8
 80102e4:	425b      	negs	r3, r3
 80102e6:	697a      	ldr	r2, [r7, #20]
 80102e8:	4413      	add	r3, r2
 80102ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	685a      	ldr	r2, [r3, #4]
 80102f4:	4b24      	ldr	r3, [pc, #144]	; (8010388 <vPortFree+0xb8>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	4013      	ands	r3, r2
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d10a      	bne.n	8010314 <vPortFree+0x44>
	__asm volatile
 80102fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010302:	f383 8811 	msr	BASEPRI, r3
 8010306:	f3bf 8f6f 	isb	sy
 801030a:	f3bf 8f4f 	dsb	sy
 801030e:	60fb      	str	r3, [r7, #12]
}
 8010310:	bf00      	nop
 8010312:	e7fe      	b.n	8010312 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00a      	beq.n	8010332 <vPortFree+0x62>
	__asm volatile
 801031c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010320:	f383 8811 	msr	BASEPRI, r3
 8010324:	f3bf 8f6f 	isb	sy
 8010328:	f3bf 8f4f 	dsb	sy
 801032c:	60bb      	str	r3, [r7, #8]
}
 801032e:	bf00      	nop
 8010330:	e7fe      	b.n	8010330 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	685a      	ldr	r2, [r3, #4]
 8010336:	4b14      	ldr	r3, [pc, #80]	; (8010388 <vPortFree+0xb8>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4013      	ands	r3, r2
 801033c:	2b00      	cmp	r3, #0
 801033e:	d01e      	beq.n	801037e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d11a      	bne.n	801037e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	685a      	ldr	r2, [r3, #4]
 801034c:	4b0e      	ldr	r3, [pc, #56]	; (8010388 <vPortFree+0xb8>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	43db      	mvns	r3, r3
 8010352:	401a      	ands	r2, r3
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010358:	f7fe faaa 	bl	800e8b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	685a      	ldr	r2, [r3, #4]
 8010360:	4b0a      	ldr	r3, [pc, #40]	; (801038c <vPortFree+0xbc>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	4413      	add	r3, r2
 8010366:	4a09      	ldr	r2, [pc, #36]	; (801038c <vPortFree+0xbc>)
 8010368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801036a:	6938      	ldr	r0, [r7, #16]
 801036c:	f000 f874 	bl	8010458 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010370:	4b07      	ldr	r3, [pc, #28]	; (8010390 <vPortFree+0xc0>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	3301      	adds	r3, #1
 8010376:	4a06      	ldr	r2, [pc, #24]	; (8010390 <vPortFree+0xc0>)
 8010378:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801037a:	f7fe fadf 	bl	800e93c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801037e:	bf00      	nop
 8010380:	3718      	adds	r7, #24
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	200073dc 	.word	0x200073dc
 801038c:	200073cc 	.word	0x200073cc
 8010390:	200073d8 	.word	0x200073d8

08010394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010394:	b480      	push	{r7}
 8010396:	b085      	sub	sp, #20
 8010398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801039a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801039e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80103a0:	4b27      	ldr	r3, [pc, #156]	; (8010440 <prvHeapInit+0xac>)
 80103a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	f003 0307 	and.w	r3, r3, #7
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d00c      	beq.n	80103c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	3307      	adds	r3, #7
 80103b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	f023 0307 	bic.w	r3, r3, #7
 80103ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80103bc:	68ba      	ldr	r2, [r7, #8]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	1ad3      	subs	r3, r2, r3
 80103c2:	4a1f      	ldr	r2, [pc, #124]	; (8010440 <prvHeapInit+0xac>)
 80103c4:	4413      	add	r3, r2
 80103c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80103cc:	4a1d      	ldr	r2, [pc, #116]	; (8010444 <prvHeapInit+0xb0>)
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80103d2:	4b1c      	ldr	r3, [pc, #112]	; (8010444 <prvHeapInit+0xb0>)
 80103d4:	2200      	movs	r2, #0
 80103d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	68ba      	ldr	r2, [r7, #8]
 80103dc:	4413      	add	r3, r2
 80103de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80103e0:	2208      	movs	r2, #8
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	1a9b      	subs	r3, r3, r2
 80103e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	f023 0307 	bic.w	r3, r3, #7
 80103ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	4a15      	ldr	r2, [pc, #84]	; (8010448 <prvHeapInit+0xb4>)
 80103f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80103f6:	4b14      	ldr	r3, [pc, #80]	; (8010448 <prvHeapInit+0xb4>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	2200      	movs	r2, #0
 80103fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80103fe:	4b12      	ldr	r3, [pc, #72]	; (8010448 <prvHeapInit+0xb4>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	2200      	movs	r2, #0
 8010404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	68fa      	ldr	r2, [r7, #12]
 801040e:	1ad2      	subs	r2, r2, r3
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010414:	4b0c      	ldr	r3, [pc, #48]	; (8010448 <prvHeapInit+0xb4>)
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	4a0a      	ldr	r2, [pc, #40]	; (801044c <prvHeapInit+0xb8>)
 8010422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	685b      	ldr	r3, [r3, #4]
 8010428:	4a09      	ldr	r2, [pc, #36]	; (8010450 <prvHeapInit+0xbc>)
 801042a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801042c:	4b09      	ldr	r3, [pc, #36]	; (8010454 <prvHeapInit+0xc0>)
 801042e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010432:	601a      	str	r2, [r3, #0]
}
 8010434:	bf00      	nop
 8010436:	3714      	adds	r7, #20
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr
 8010440:	200037c0 	.word	0x200037c0
 8010444:	200073c0 	.word	0x200073c0
 8010448:	200073c8 	.word	0x200073c8
 801044c:	200073d0 	.word	0x200073d0
 8010450:	200073cc 	.word	0x200073cc
 8010454:	200073dc 	.word	0x200073dc

08010458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010458:	b480      	push	{r7}
 801045a:	b085      	sub	sp, #20
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010460:	4b28      	ldr	r3, [pc, #160]	; (8010504 <prvInsertBlockIntoFreeList+0xac>)
 8010462:	60fb      	str	r3, [r7, #12]
 8010464:	e002      	b.n	801046c <prvInsertBlockIntoFreeList+0x14>
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	60fb      	str	r3, [r7, #12]
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	687a      	ldr	r2, [r7, #4]
 8010472:	429a      	cmp	r2, r3
 8010474:	d8f7      	bhi.n	8010466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	68ba      	ldr	r2, [r7, #8]
 8010480:	4413      	add	r3, r2
 8010482:	687a      	ldr	r2, [r7, #4]
 8010484:	429a      	cmp	r2, r3
 8010486:	d108      	bne.n	801049a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	685a      	ldr	r2, [r3, #4]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	441a      	add	r2, r3
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	68ba      	ldr	r2, [r7, #8]
 80104a4:	441a      	add	r2, r3
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d118      	bne.n	80104e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681a      	ldr	r2, [r3, #0]
 80104b2:	4b15      	ldr	r3, [pc, #84]	; (8010508 <prvInsertBlockIntoFreeList+0xb0>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d00d      	beq.n	80104d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	685a      	ldr	r2, [r3, #4]
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	441a      	add	r2, r3
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	601a      	str	r2, [r3, #0]
 80104d4:	e008      	b.n	80104e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80104d6:	4b0c      	ldr	r3, [pc, #48]	; (8010508 <prvInsertBlockIntoFreeList+0xb0>)
 80104d8:	681a      	ldr	r2, [r3, #0]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	601a      	str	r2, [r3, #0]
 80104de:	e003      	b.n	80104e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80104e8:	68fa      	ldr	r2, [r7, #12]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d002      	beq.n	80104f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	687a      	ldr	r2, [r7, #4]
 80104f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80104f6:	bf00      	nop
 80104f8:	3714      	adds	r7, #20
 80104fa:	46bd      	mov	sp, r7
 80104fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010500:	4770      	bx	lr
 8010502:	bf00      	nop
 8010504:	200073c0 	.word	0x200073c0
 8010508:	200073c8 	.word	0x200073c8

0801050c <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8010512:	f000 fa29 	bl	8010968 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8010516:	f644 6320 	movw	r3, #20000	; 0x4e20
 801051a:	2201      	movs	r2, #1
 801051c:	2178      	movs	r1, #120	; 0x78
 801051e:	485b      	ldr	r0, [pc, #364]	; (801068c <SSD1306_Init+0x180>)
 8010520:	f7f3 ffaa 	bl	8004478 <HAL_I2C_IsDeviceReady>
 8010524:	4603      	mov	r3, r0
 8010526:	2b00      	cmp	r3, #0
 8010528:	d001      	beq.n	801052e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 801052a:	2300      	movs	r3, #0
 801052c:	e0a9      	b.n	8010682 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 801052e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8010532:	607b      	str	r3, [r7, #4]
	while(p>0)
 8010534:	e002      	b.n	801053c <SSD1306_Init+0x30>
		p--;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	3b01      	subs	r3, #1
 801053a:	607b      	str	r3, [r7, #4]
	while(p>0)
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1f9      	bne.n	8010536 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8010542:	22ae      	movs	r2, #174	; 0xae
 8010544:	2100      	movs	r1, #0
 8010546:	2078      	movs	r0, #120	; 0x78
 8010548:	f000 fa8a 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 801054c:	2220      	movs	r2, #32
 801054e:	2100      	movs	r1, #0
 8010550:	2078      	movs	r0, #120	; 0x78
 8010552:	f000 fa85 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8010556:	2210      	movs	r2, #16
 8010558:	2100      	movs	r1, #0
 801055a:	2078      	movs	r0, #120	; 0x78
 801055c:	f000 fa80 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8010560:	22b0      	movs	r2, #176	; 0xb0
 8010562:	2100      	movs	r1, #0
 8010564:	2078      	movs	r0, #120	; 0x78
 8010566:	f000 fa7b 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 801056a:	22c8      	movs	r2, #200	; 0xc8
 801056c:	2100      	movs	r1, #0
 801056e:	2078      	movs	r0, #120	; 0x78
 8010570:	f000 fa76 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8010574:	2200      	movs	r2, #0
 8010576:	2100      	movs	r1, #0
 8010578:	2078      	movs	r0, #120	; 0x78
 801057a:	f000 fa71 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 801057e:	2210      	movs	r2, #16
 8010580:	2100      	movs	r1, #0
 8010582:	2078      	movs	r0, #120	; 0x78
 8010584:	f000 fa6c 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8010588:	2240      	movs	r2, #64	; 0x40
 801058a:	2100      	movs	r1, #0
 801058c:	2078      	movs	r0, #120	; 0x78
 801058e:	f000 fa67 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8010592:	2281      	movs	r2, #129	; 0x81
 8010594:	2100      	movs	r1, #0
 8010596:	2078      	movs	r0, #120	; 0x78
 8010598:	f000 fa62 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 801059c:	22ff      	movs	r2, #255	; 0xff
 801059e:	2100      	movs	r1, #0
 80105a0:	2078      	movs	r0, #120	; 0x78
 80105a2:	f000 fa5d 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80105a6:	22a1      	movs	r2, #161	; 0xa1
 80105a8:	2100      	movs	r1, #0
 80105aa:	2078      	movs	r0, #120	; 0x78
 80105ac:	f000 fa58 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80105b0:	22a6      	movs	r2, #166	; 0xa6
 80105b2:	2100      	movs	r1, #0
 80105b4:	2078      	movs	r0, #120	; 0x78
 80105b6:	f000 fa53 	bl	8010a60 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80105ba:	22a8      	movs	r2, #168	; 0xa8
 80105bc:	2100      	movs	r1, #0
 80105be:	2078      	movs	r0, #120	; 0x78
 80105c0:	f000 fa4e 	bl	8010a60 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80105c4:	223f      	movs	r2, #63	; 0x3f
 80105c6:	2100      	movs	r1, #0
 80105c8:	2078      	movs	r0, #120	; 0x78
 80105ca:	f000 fa49 	bl	8010a60 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80105ce:	22a4      	movs	r2, #164	; 0xa4
 80105d0:	2100      	movs	r1, #0
 80105d2:	2078      	movs	r0, #120	; 0x78
 80105d4:	f000 fa44 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80105d8:	22d3      	movs	r2, #211	; 0xd3
 80105da:	2100      	movs	r1, #0
 80105dc:	2078      	movs	r0, #120	; 0x78
 80105de:	f000 fa3f 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80105e2:	2200      	movs	r2, #0
 80105e4:	2100      	movs	r1, #0
 80105e6:	2078      	movs	r0, #120	; 0x78
 80105e8:	f000 fa3a 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80105ec:	22d5      	movs	r2, #213	; 0xd5
 80105ee:	2100      	movs	r1, #0
 80105f0:	2078      	movs	r0, #120	; 0x78
 80105f2:	f000 fa35 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80105f6:	22f0      	movs	r2, #240	; 0xf0
 80105f8:	2100      	movs	r1, #0
 80105fa:	2078      	movs	r0, #120	; 0x78
 80105fc:	f000 fa30 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8010600:	22d9      	movs	r2, #217	; 0xd9
 8010602:	2100      	movs	r1, #0
 8010604:	2078      	movs	r0, #120	; 0x78
 8010606:	f000 fa2b 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 801060a:	2222      	movs	r2, #34	; 0x22
 801060c:	2100      	movs	r1, #0
 801060e:	2078      	movs	r0, #120	; 0x78
 8010610:	f000 fa26 	bl	8010a60 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8010614:	22da      	movs	r2, #218	; 0xda
 8010616:	2100      	movs	r1, #0
 8010618:	2078      	movs	r0, #120	; 0x78
 801061a:	f000 fa21 	bl	8010a60 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 801061e:	2212      	movs	r2, #18
 8010620:	2100      	movs	r1, #0
 8010622:	2078      	movs	r0, #120	; 0x78
 8010624:	f000 fa1c 	bl	8010a60 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8010628:	22db      	movs	r2, #219	; 0xdb
 801062a:	2100      	movs	r1, #0
 801062c:	2078      	movs	r0, #120	; 0x78
 801062e:	f000 fa17 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8010632:	2220      	movs	r2, #32
 8010634:	2100      	movs	r1, #0
 8010636:	2078      	movs	r0, #120	; 0x78
 8010638:	f000 fa12 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 801063c:	228d      	movs	r2, #141	; 0x8d
 801063e:	2100      	movs	r1, #0
 8010640:	2078      	movs	r0, #120	; 0x78
 8010642:	f000 fa0d 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8010646:	2214      	movs	r2, #20
 8010648:	2100      	movs	r1, #0
 801064a:	2078      	movs	r0, #120	; 0x78
 801064c:	f000 fa08 	bl	8010a60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8010650:	22af      	movs	r2, #175	; 0xaf
 8010652:	2100      	movs	r1, #0
 8010654:	2078      	movs	r0, #120	; 0x78
 8010656:	f000 fa03 	bl	8010a60 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 801065a:	222e      	movs	r2, #46	; 0x2e
 801065c:	2100      	movs	r1, #0
 801065e:	2078      	movs	r0, #120	; 0x78
 8010660:	f000 f9fe 	bl	8010a60 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8010664:	2000      	movs	r0, #0
 8010666:	f000 f843 	bl	80106f0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 801066a:	f000 f813 	bl	8010694 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 801066e:	4b08      	ldr	r3, [pc, #32]	; (8010690 <SSD1306_Init+0x184>)
 8010670:	2200      	movs	r2, #0
 8010672:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8010674:	4b06      	ldr	r3, [pc, #24]	; (8010690 <SSD1306_Init+0x184>)
 8010676:	2200      	movs	r2, #0
 8010678:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 801067a:	4b05      	ldr	r3, [pc, #20]	; (8010690 <SSD1306_Init+0x184>)
 801067c:	2201      	movs	r2, #1
 801067e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8010680:	2301      	movs	r3, #1
}
 8010682:	4618      	mov	r0, r3
 8010684:	3708      	adds	r7, #8
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
 801068a:	bf00      	nop
 801068c:	20002784 	.word	0x20002784
 8010690:	200077e0 	.word	0x200077e0

08010694 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 801069a:	2300      	movs	r3, #0
 801069c:	71fb      	strb	r3, [r7, #7]
 801069e:	e01d      	b.n	80106dc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80106a0:	79fb      	ldrb	r3, [r7, #7]
 80106a2:	3b50      	subs	r3, #80	; 0x50
 80106a4:	b2db      	uxtb	r3, r3
 80106a6:	461a      	mov	r2, r3
 80106a8:	2100      	movs	r1, #0
 80106aa:	2078      	movs	r0, #120	; 0x78
 80106ac:	f000 f9d8 	bl	8010a60 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80106b0:	2200      	movs	r2, #0
 80106b2:	2100      	movs	r1, #0
 80106b4:	2078      	movs	r0, #120	; 0x78
 80106b6:	f000 f9d3 	bl	8010a60 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80106ba:	2210      	movs	r2, #16
 80106bc:	2100      	movs	r1, #0
 80106be:	2078      	movs	r0, #120	; 0x78
 80106c0:	f000 f9ce 	bl	8010a60 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80106c4:	79fb      	ldrb	r3, [r7, #7]
 80106c6:	01db      	lsls	r3, r3, #7
 80106c8:	4a08      	ldr	r2, [pc, #32]	; (80106ec <SSD1306_UpdateScreen+0x58>)
 80106ca:	441a      	add	r2, r3
 80106cc:	2380      	movs	r3, #128	; 0x80
 80106ce:	2140      	movs	r1, #64	; 0x40
 80106d0:	2078      	movs	r0, #120	; 0x78
 80106d2:	f000 f95f 	bl	8010994 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80106d6:	79fb      	ldrb	r3, [r7, #7]
 80106d8:	3301      	adds	r3, #1
 80106da:	71fb      	strb	r3, [r7, #7]
 80106dc:	79fb      	ldrb	r3, [r7, #7]
 80106de:	2b07      	cmp	r3, #7
 80106e0:	d9de      	bls.n	80106a0 <SSD1306_UpdateScreen+0xc>
	}
}
 80106e2:	bf00      	nop
 80106e4:	bf00      	nop
 80106e6:	3708      	adds	r7, #8
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	200073e0 	.word	0x200073e0

080106f0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	4603      	mov	r3, r0
 80106f8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80106fa:	79fb      	ldrb	r3, [r7, #7]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d101      	bne.n	8010704 <SSD1306_Fill+0x14>
 8010700:	2300      	movs	r3, #0
 8010702:	e000      	b.n	8010706 <SSD1306_Fill+0x16>
 8010704:	23ff      	movs	r3, #255	; 0xff
 8010706:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801070a:	4619      	mov	r1, r3
 801070c:	4803      	ldr	r0, [pc, #12]	; (801071c <SSD1306_Fill+0x2c>)
 801070e:	f001 fc7c 	bl	801200a <memset>
}
 8010712:	bf00      	nop
 8010714:	3708      	adds	r7, #8
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	200073e0 	.word	0x200073e0

08010720 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8010720:	b480      	push	{r7}
 8010722:	b083      	sub	sp, #12
 8010724:	af00      	add	r7, sp, #0
 8010726:	4603      	mov	r3, r0
 8010728:	80fb      	strh	r3, [r7, #6]
 801072a:	460b      	mov	r3, r1
 801072c:	80bb      	strh	r3, [r7, #4]
 801072e:	4613      	mov	r3, r2
 8010730:	70fb      	strb	r3, [r7, #3]
	if (
 8010732:	88fb      	ldrh	r3, [r7, #6]
 8010734:	2b7f      	cmp	r3, #127	; 0x7f
 8010736:	d848      	bhi.n	80107ca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8010738:	88bb      	ldrh	r3, [r7, #4]
 801073a:	2b3f      	cmp	r3, #63	; 0x3f
 801073c:	d845      	bhi.n	80107ca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 801073e:	4b26      	ldr	r3, [pc, #152]	; (80107d8 <SSD1306_DrawPixel+0xb8>)
 8010740:	791b      	ldrb	r3, [r3, #4]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d006      	beq.n	8010754 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8010746:	78fb      	ldrb	r3, [r7, #3]
 8010748:	2b00      	cmp	r3, #0
 801074a:	bf0c      	ite	eq
 801074c:	2301      	moveq	r3, #1
 801074e:	2300      	movne	r3, #0
 8010750:	b2db      	uxtb	r3, r3
 8010752:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8010754:	78fb      	ldrb	r3, [r7, #3]
 8010756:	2b01      	cmp	r3, #1
 8010758:	d11a      	bne.n	8010790 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 801075a:	88fa      	ldrh	r2, [r7, #6]
 801075c:	88bb      	ldrh	r3, [r7, #4]
 801075e:	08db      	lsrs	r3, r3, #3
 8010760:	b298      	uxth	r0, r3
 8010762:	4603      	mov	r3, r0
 8010764:	01db      	lsls	r3, r3, #7
 8010766:	4413      	add	r3, r2
 8010768:	4a1c      	ldr	r2, [pc, #112]	; (80107dc <SSD1306_DrawPixel+0xbc>)
 801076a:	5cd3      	ldrb	r3, [r2, r3]
 801076c:	b25a      	sxtb	r2, r3
 801076e:	88bb      	ldrh	r3, [r7, #4]
 8010770:	f003 0307 	and.w	r3, r3, #7
 8010774:	2101      	movs	r1, #1
 8010776:	fa01 f303 	lsl.w	r3, r1, r3
 801077a:	b25b      	sxtb	r3, r3
 801077c:	4313      	orrs	r3, r2
 801077e:	b259      	sxtb	r1, r3
 8010780:	88fa      	ldrh	r2, [r7, #6]
 8010782:	4603      	mov	r3, r0
 8010784:	01db      	lsls	r3, r3, #7
 8010786:	4413      	add	r3, r2
 8010788:	b2c9      	uxtb	r1, r1
 801078a:	4a14      	ldr	r2, [pc, #80]	; (80107dc <SSD1306_DrawPixel+0xbc>)
 801078c:	54d1      	strb	r1, [r2, r3]
 801078e:	e01d      	b.n	80107cc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8010790:	88fa      	ldrh	r2, [r7, #6]
 8010792:	88bb      	ldrh	r3, [r7, #4]
 8010794:	08db      	lsrs	r3, r3, #3
 8010796:	b298      	uxth	r0, r3
 8010798:	4603      	mov	r3, r0
 801079a:	01db      	lsls	r3, r3, #7
 801079c:	4413      	add	r3, r2
 801079e:	4a0f      	ldr	r2, [pc, #60]	; (80107dc <SSD1306_DrawPixel+0xbc>)
 80107a0:	5cd3      	ldrb	r3, [r2, r3]
 80107a2:	b25a      	sxtb	r2, r3
 80107a4:	88bb      	ldrh	r3, [r7, #4]
 80107a6:	f003 0307 	and.w	r3, r3, #7
 80107aa:	2101      	movs	r1, #1
 80107ac:	fa01 f303 	lsl.w	r3, r1, r3
 80107b0:	b25b      	sxtb	r3, r3
 80107b2:	43db      	mvns	r3, r3
 80107b4:	b25b      	sxtb	r3, r3
 80107b6:	4013      	ands	r3, r2
 80107b8:	b259      	sxtb	r1, r3
 80107ba:	88fa      	ldrh	r2, [r7, #6]
 80107bc:	4603      	mov	r3, r0
 80107be:	01db      	lsls	r3, r3, #7
 80107c0:	4413      	add	r3, r2
 80107c2:	b2c9      	uxtb	r1, r1
 80107c4:	4a05      	ldr	r2, [pc, #20]	; (80107dc <SSD1306_DrawPixel+0xbc>)
 80107c6:	54d1      	strb	r1, [r2, r3]
 80107c8:	e000      	b.n	80107cc <SSD1306_DrawPixel+0xac>
		return;
 80107ca:	bf00      	nop
	}
}
 80107cc:	370c      	adds	r7, #12
 80107ce:	46bd      	mov	sp, r7
 80107d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d4:	4770      	bx	lr
 80107d6:	bf00      	nop
 80107d8:	200077e0 	.word	0x200077e0
 80107dc:	200073e0 	.word	0x200073e0

080107e0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80107e0:	b480      	push	{r7}
 80107e2:	b083      	sub	sp, #12
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	4603      	mov	r3, r0
 80107e8:	460a      	mov	r2, r1
 80107ea:	80fb      	strh	r3, [r7, #6]
 80107ec:	4613      	mov	r3, r2
 80107ee:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80107f0:	4a05      	ldr	r2, [pc, #20]	; (8010808 <SSD1306_GotoXY+0x28>)
 80107f2:	88fb      	ldrh	r3, [r7, #6]
 80107f4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80107f6:	4a04      	ldr	r2, [pc, #16]	; (8010808 <SSD1306_GotoXY+0x28>)
 80107f8:	88bb      	ldrh	r3, [r7, #4]
 80107fa:	8053      	strh	r3, [r2, #2]
}
 80107fc:	bf00      	nop
 80107fe:	370c      	adds	r7, #12
 8010800:	46bd      	mov	sp, r7
 8010802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010806:	4770      	bx	lr
 8010808:	200077e0 	.word	0x200077e0

0801080c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 801080c:	b580      	push	{r7, lr}
 801080e:	b086      	sub	sp, #24
 8010810:	af00      	add	r7, sp, #0
 8010812:	4603      	mov	r3, r0
 8010814:	6039      	str	r1, [r7, #0]
 8010816:	71fb      	strb	r3, [r7, #7]
 8010818:	4613      	mov	r3, r2
 801081a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 801081c:	4b3a      	ldr	r3, [pc, #232]	; (8010908 <SSD1306_Putc+0xfc>)
 801081e:	881b      	ldrh	r3, [r3, #0]
 8010820:	461a      	mov	r2, r3
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	4413      	add	r3, r2
	if (
 8010828:	2b7f      	cmp	r3, #127	; 0x7f
 801082a:	dc07      	bgt.n	801083c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 801082c:	4b36      	ldr	r3, [pc, #216]	; (8010908 <SSD1306_Putc+0xfc>)
 801082e:	885b      	ldrh	r3, [r3, #2]
 8010830:	461a      	mov	r2, r3
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	785b      	ldrb	r3, [r3, #1]
 8010836:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8010838:	2b3f      	cmp	r3, #63	; 0x3f
 801083a:	dd01      	ble.n	8010840 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 801083c:	2300      	movs	r3, #0
 801083e:	e05e      	b.n	80108fe <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8010840:	2300      	movs	r3, #0
 8010842:	617b      	str	r3, [r7, #20]
 8010844:	e04b      	b.n	80108de <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	685a      	ldr	r2, [r3, #4]
 801084a:	79fb      	ldrb	r3, [r7, #7]
 801084c:	3b20      	subs	r3, #32
 801084e:	6839      	ldr	r1, [r7, #0]
 8010850:	7849      	ldrb	r1, [r1, #1]
 8010852:	fb01 f303 	mul.w	r3, r1, r3
 8010856:	4619      	mov	r1, r3
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	440b      	add	r3, r1
 801085c:	005b      	lsls	r3, r3, #1
 801085e:	4413      	add	r3, r2
 8010860:	881b      	ldrh	r3, [r3, #0]
 8010862:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8010864:	2300      	movs	r3, #0
 8010866:	613b      	str	r3, [r7, #16]
 8010868:	e030      	b.n	80108cc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 801086a:	68fa      	ldr	r2, [r7, #12]
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	fa02 f303 	lsl.w	r3, r2, r3
 8010872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010876:	2b00      	cmp	r3, #0
 8010878:	d010      	beq.n	801089c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 801087a:	4b23      	ldr	r3, [pc, #140]	; (8010908 <SSD1306_Putc+0xfc>)
 801087c:	881a      	ldrh	r2, [r3, #0]
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	b29b      	uxth	r3, r3
 8010882:	4413      	add	r3, r2
 8010884:	b298      	uxth	r0, r3
 8010886:	4b20      	ldr	r3, [pc, #128]	; (8010908 <SSD1306_Putc+0xfc>)
 8010888:	885a      	ldrh	r2, [r3, #2]
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	b29b      	uxth	r3, r3
 801088e:	4413      	add	r3, r2
 8010890:	b29b      	uxth	r3, r3
 8010892:	79ba      	ldrb	r2, [r7, #6]
 8010894:	4619      	mov	r1, r3
 8010896:	f7ff ff43 	bl	8010720 <SSD1306_DrawPixel>
 801089a:	e014      	b.n	80108c6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 801089c:	4b1a      	ldr	r3, [pc, #104]	; (8010908 <SSD1306_Putc+0xfc>)
 801089e:	881a      	ldrh	r2, [r3, #0]
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	b29b      	uxth	r3, r3
 80108a4:	4413      	add	r3, r2
 80108a6:	b298      	uxth	r0, r3
 80108a8:	4b17      	ldr	r3, [pc, #92]	; (8010908 <SSD1306_Putc+0xfc>)
 80108aa:	885a      	ldrh	r2, [r3, #2]
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	4413      	add	r3, r2
 80108b2:	b299      	uxth	r1, r3
 80108b4:	79bb      	ldrb	r3, [r7, #6]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	bf0c      	ite	eq
 80108ba:	2301      	moveq	r3, #1
 80108bc:	2300      	movne	r3, #0
 80108be:	b2db      	uxtb	r3, r3
 80108c0:	461a      	mov	r2, r3
 80108c2:	f7ff ff2d 	bl	8010720 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	3301      	adds	r3, #1
 80108ca:	613b      	str	r3, [r7, #16]
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	461a      	mov	r2, r3
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	4293      	cmp	r3, r2
 80108d6:	d3c8      	bcc.n	801086a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	3301      	adds	r3, #1
 80108dc:	617b      	str	r3, [r7, #20]
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	785b      	ldrb	r3, [r3, #1]
 80108e2:	461a      	mov	r2, r3
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d3ad      	bcc.n	8010846 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80108ea:	4b07      	ldr	r3, [pc, #28]	; (8010908 <SSD1306_Putc+0xfc>)
 80108ec:	881a      	ldrh	r2, [r3, #0]
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	4413      	add	r3, r2
 80108f6:	b29a      	uxth	r2, r3
 80108f8:	4b03      	ldr	r3, [pc, #12]	; (8010908 <SSD1306_Putc+0xfc>)
 80108fa:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80108fc:	79fb      	ldrb	r3, [r7, #7]
}
 80108fe:	4618      	mov	r0, r3
 8010900:	3718      	adds	r7, #24
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	200077e0 	.word	0x200077e0

0801090c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 801090c:	b580      	push	{r7, lr}
 801090e:	b084      	sub	sp, #16
 8010910:	af00      	add	r7, sp, #0
 8010912:	60f8      	str	r0, [r7, #12]
 8010914:	60b9      	str	r1, [r7, #8]
 8010916:	4613      	mov	r3, r2
 8010918:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 801091a:	e012      	b.n	8010942 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	781b      	ldrb	r3, [r3, #0]
 8010920:	79fa      	ldrb	r2, [r7, #7]
 8010922:	68b9      	ldr	r1, [r7, #8]
 8010924:	4618      	mov	r0, r3
 8010926:	f7ff ff71 	bl	801080c <SSD1306_Putc>
 801092a:	4603      	mov	r3, r0
 801092c:	461a      	mov	r2, r3
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	429a      	cmp	r2, r3
 8010934:	d002      	beq.n	801093c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	e008      	b.n	801094e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	3301      	adds	r3, #1
 8010940:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d1e8      	bne.n	801091c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	781b      	ldrb	r3, [r3, #0]
}
 801094e:	4618      	mov	r0, r3
 8010950:	3710      	adds	r7, #16
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}

08010956 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8010956:	b580      	push	{r7, lr}
 8010958:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 801095a:	2000      	movs	r0, #0
 801095c:	f7ff fec8 	bl	80106f0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8010960:	f7ff fe98 	bl	8010694 <SSD1306_UpdateScreen>
}
 8010964:	bf00      	nop
 8010966:	bd80      	pop	{r7, pc}

08010968 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8010968:	b480      	push	{r7}
 801096a:	b083      	sub	sp, #12
 801096c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 801096e:	4b08      	ldr	r3, [pc, #32]	; (8010990 <ssd1306_I2C_Init+0x28>)
 8010970:	607b      	str	r3, [r7, #4]
	while(p>0)
 8010972:	e002      	b.n	801097a <ssd1306_I2C_Init+0x12>
		p--;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	3b01      	subs	r3, #1
 8010978:	607b      	str	r3, [r7, #4]
	while(p>0)
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d1f9      	bne.n	8010974 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8010980:	bf00      	nop
 8010982:	bf00      	nop
 8010984:	370c      	adds	r7, #12
 8010986:	46bd      	mov	sp, r7
 8010988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098c:	4770      	bx	lr
 801098e:	bf00      	nop
 8010990:	0003d090 	.word	0x0003d090

08010994 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8010994:	b590      	push	{r4, r7, lr}
 8010996:	b0c7      	sub	sp, #284	; 0x11c
 8010998:	af02      	add	r7, sp, #8
 801099a:	4604      	mov	r4, r0
 801099c:	4608      	mov	r0, r1
 801099e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80109a2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80109a6:	600a      	str	r2, [r1, #0]
 80109a8:	4619      	mov	r1, r3
 80109aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109ae:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80109b2:	4622      	mov	r2, r4
 80109b4:	701a      	strb	r2, [r3, #0]
 80109b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109ba:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80109be:	4602      	mov	r2, r0
 80109c0:	701a      	strb	r2, [r3, #0]
 80109c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80109ca:	460a      	mov	r2, r1
 80109cc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80109ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80109d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80109da:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80109de:	7812      	ldrb	r2, [r2, #0]
 80109e0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80109e2:	2300      	movs	r3, #0
 80109e4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80109e8:	e015      	b.n	8010a16 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80109ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80109ee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80109f2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80109f6:	6812      	ldr	r2, [r2, #0]
 80109f8:	441a      	add	r2, r3
 80109fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80109fe:	3301      	adds	r3, #1
 8010a00:	7811      	ldrb	r1, [r2, #0]
 8010a02:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010a06:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8010a0a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8010a0c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8010a10:	3301      	adds	r3, #1
 8010a12:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8010a16:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8010a20:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8010a24:	8812      	ldrh	r2, [r2, #0]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d8df      	bhi.n	80109ea <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8010a2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a2e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8010a32:	781b      	ldrb	r3, [r3, #0]
 8010a34:	b299      	uxth	r1, r3
 8010a36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010a3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010a3e:	881b      	ldrh	r3, [r3, #0]
 8010a40:	3301      	adds	r3, #1
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	f107 020c 	add.w	r2, r7, #12
 8010a48:	200a      	movs	r0, #10
 8010a4a:	9000      	str	r0, [sp, #0]
 8010a4c:	4803      	ldr	r0, [pc, #12]	; (8010a5c <ssd1306_I2C_WriteMulti+0xc8>)
 8010a4e:	f7f3 fc15 	bl	800427c <HAL_I2C_Master_Transmit>
}
 8010a52:	bf00      	nop
 8010a54:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd90      	pop	{r4, r7, pc}
 8010a5c:	20002784 	.word	0x20002784

08010a60 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b086      	sub	sp, #24
 8010a64:	af02      	add	r7, sp, #8
 8010a66:	4603      	mov	r3, r0
 8010a68:	71fb      	strb	r3, [r7, #7]
 8010a6a:	460b      	mov	r3, r1
 8010a6c:	71bb      	strb	r3, [r7, #6]
 8010a6e:	4613      	mov	r3, r2
 8010a70:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8010a72:	79bb      	ldrb	r3, [r7, #6]
 8010a74:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8010a76:	797b      	ldrb	r3, [r7, #5]
 8010a78:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8010a7a:	79fb      	ldrb	r3, [r7, #7]
 8010a7c:	b299      	uxth	r1, r3
 8010a7e:	f107 020c 	add.w	r2, r7, #12
 8010a82:	230a      	movs	r3, #10
 8010a84:	9300      	str	r3, [sp, #0]
 8010a86:	2302      	movs	r3, #2
 8010a88:	4803      	ldr	r0, [pc, #12]	; (8010a98 <ssd1306_I2C_Write+0x38>)
 8010a8a:	f7f3 fbf7 	bl	800427c <HAL_I2C_Master_Transmit>
}
 8010a8e:	bf00      	nop
 8010a90:	3710      	adds	r7, #16
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop
 8010a98:	20002784 	.word	0x20002784

08010a9c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	2108      	movs	r1, #8
 8010aa4:	4803      	ldr	r0, [pc, #12]	; (8010ab4 <SELECT+0x18>)
 8010aa6:	f7f3 fa73 	bl	8003f90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8010aaa:	2001      	movs	r0, #1
 8010aac:	f7f1 fe72 	bl	8002794 <HAL_Delay>
}
 8010ab0:	bf00      	nop
 8010ab2:	bd80      	pop	{r7, pc}
 8010ab4:	40020800 	.word	0x40020800

08010ab8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8010abc:	2201      	movs	r2, #1
 8010abe:	2108      	movs	r1, #8
 8010ac0:	4803      	ldr	r0, [pc, #12]	; (8010ad0 <DESELECT+0x18>)
 8010ac2:	f7f3 fa65 	bl	8003f90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8010ac6:	2001      	movs	r0, #1
 8010ac8:	f7f1 fe64 	bl	8002794 <HAL_Delay>
}
 8010acc:	bf00      	nop
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	40020800 	.word	0x40020800

08010ad4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	4603      	mov	r3, r0
 8010adc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010ade:	bf00      	nop
 8010ae0:	4b08      	ldr	r3, [pc, #32]	; (8010b04 <SPI_TxByte+0x30>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	689b      	ldr	r3, [r3, #8]
 8010ae6:	f003 0302 	and.w	r3, r3, #2
 8010aea:	2b02      	cmp	r3, #2
 8010aec:	d1f8      	bne.n	8010ae0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8010aee:	1df9      	adds	r1, r7, #7
 8010af0:	2364      	movs	r3, #100	; 0x64
 8010af2:	2201      	movs	r2, #1
 8010af4:	4803      	ldr	r0, [pc, #12]	; (8010b04 <SPI_TxByte+0x30>)
 8010af6:	f7f7 fa9e 	bl	8008036 <HAL_SPI_Transmit>
}
 8010afa:	bf00      	nop
 8010afc:	3708      	adds	r7, #8
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	200027f8 	.word	0x200027f8

08010b08 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	460b      	mov	r3, r1
 8010b12:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010b14:	bf00      	nop
 8010b16:	4b08      	ldr	r3, [pc, #32]	; (8010b38 <SPI_TxBuffer+0x30>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	689b      	ldr	r3, [r3, #8]
 8010b1c:	f003 0302 	and.w	r3, r3, #2
 8010b20:	2b02      	cmp	r3, #2
 8010b22:	d1f8      	bne.n	8010b16 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8010b24:	887a      	ldrh	r2, [r7, #2]
 8010b26:	2364      	movs	r3, #100	; 0x64
 8010b28:	6879      	ldr	r1, [r7, #4]
 8010b2a:	4803      	ldr	r0, [pc, #12]	; (8010b38 <SPI_TxBuffer+0x30>)
 8010b2c:	f7f7 fa83 	bl	8008036 <HAL_SPI_Transmit>
}
 8010b30:	bf00      	nop
 8010b32:	3708      	adds	r7, #8
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	200027f8 	.word	0x200027f8

08010b3c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8010b42:	23ff      	movs	r3, #255	; 0xff
 8010b44:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010b46:	bf00      	nop
 8010b48:	4b09      	ldr	r3, [pc, #36]	; (8010b70 <SPI_RxByte+0x34>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	689b      	ldr	r3, [r3, #8]
 8010b4e:	f003 0302 	and.w	r3, r3, #2
 8010b52:	2b02      	cmp	r3, #2
 8010b54:	d1f8      	bne.n	8010b48 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8010b56:	1dba      	adds	r2, r7, #6
 8010b58:	1df9      	adds	r1, r7, #7
 8010b5a:	2364      	movs	r3, #100	; 0x64
 8010b5c:	9300      	str	r3, [sp, #0]
 8010b5e:	2301      	movs	r3, #1
 8010b60:	4803      	ldr	r0, [pc, #12]	; (8010b70 <SPI_RxByte+0x34>)
 8010b62:	f7f7 fba4 	bl	80082ae <HAL_SPI_TransmitReceive>

	return data;
 8010b66:	79bb      	ldrb	r3, [r7, #6]
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3708      	adds	r7, #8
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	200027f8 	.word	0x200027f8

08010b74 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b082      	sub	sp, #8
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8010b7c:	f7ff ffde 	bl	8010b3c <SPI_RxByte>
 8010b80:	4603      	mov	r3, r0
 8010b82:	461a      	mov	r2, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	701a      	strb	r2, [r3, #0]
}
 8010b88:	bf00      	nop
 8010b8a:	3708      	adds	r7, #8
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b082      	sub	sp, #8
 8010b94:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8010b96:	4b0a      	ldr	r3, [pc, #40]	; (8010bc0 <SD_ReadyWait+0x30>)
 8010b98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8010b9c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8010b9e:	f7ff ffcd 	bl	8010b3c <SPI_RxByte>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8010ba6:	79fb      	ldrb	r3, [r7, #7]
 8010ba8:	2bff      	cmp	r3, #255	; 0xff
 8010baa:	d003      	beq.n	8010bb4 <SD_ReadyWait+0x24>
 8010bac:	4b04      	ldr	r3, [pc, #16]	; (8010bc0 <SD_ReadyWait+0x30>)
 8010bae:	881b      	ldrh	r3, [r3, #0]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d1f4      	bne.n	8010b9e <SD_ReadyWait+0xe>

	return res;
 8010bb4:	79fb      	ldrb	r3, [r7, #7]
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3708      	adds	r7, #8
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	2000299a 	.word	0x2000299a

08010bc4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b084      	sub	sp, #16
 8010bc8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8010bca:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8010bce:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8010bd0:	f7ff ff72 	bl	8010ab8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	60bb      	str	r3, [r7, #8]
 8010bd8:	e005      	b.n	8010be6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8010bda:	20ff      	movs	r0, #255	; 0xff
 8010bdc:	f7ff ff7a 	bl	8010ad4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	3301      	adds	r3, #1
 8010be4:	60bb      	str	r3, [r7, #8]
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	2b09      	cmp	r3, #9
 8010bea:	ddf6      	ble.n	8010bda <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8010bec:	f7ff ff56 	bl	8010a9c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8010bf0:	2340      	movs	r3, #64	; 0x40
 8010bf2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8010c00:	2300      	movs	r3, #0
 8010c02:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8010c04:	2395      	movs	r3, #149	; 0x95
 8010c06:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8010c08:	463b      	mov	r3, r7
 8010c0a:	2106      	movs	r1, #6
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7ff ff7b 	bl	8010b08 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8010c12:	e002      	b.n	8010c1a <SD_PowerOn+0x56>
	{
		cnt--;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	3b01      	subs	r3, #1
 8010c18:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8010c1a:	f7ff ff8f 	bl	8010b3c <SPI_RxByte>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	d002      	beq.n	8010c2a <SD_PowerOn+0x66>
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d1f4      	bne.n	8010c14 <SD_PowerOn+0x50>
	}

	DESELECT();
 8010c2a:	f7ff ff45 	bl	8010ab8 <DESELECT>
	SPI_TxByte(0XFF);
 8010c2e:	20ff      	movs	r0, #255	; 0xff
 8010c30:	f7ff ff50 	bl	8010ad4 <SPI_TxByte>

	PowerFlag = 1;
 8010c34:	4b03      	ldr	r3, [pc, #12]	; (8010c44 <SD_PowerOn+0x80>)
 8010c36:	2201      	movs	r2, #1
 8010c38:	701a      	strb	r2, [r3, #0]
}
 8010c3a:	bf00      	nop
 8010c3c:	3710      	adds	r7, #16
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}
 8010c42:	bf00      	nop
 8010c44:	200077e7 	.word	0x200077e7

08010c48 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8010c48:	b480      	push	{r7}
 8010c4a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8010c4c:	4b03      	ldr	r3, [pc, #12]	; (8010c5c <SD_PowerOff+0x14>)
 8010c4e:	2200      	movs	r2, #0
 8010c50:	701a      	strb	r2, [r3, #0]
}
 8010c52:	bf00      	nop
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr
 8010c5c:	200077e7 	.word	0x200077e7

08010c60 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8010c60:	b480      	push	{r7}
 8010c62:	af00      	add	r7, sp, #0
	return PowerFlag;
 8010c64:	4b03      	ldr	r3, [pc, #12]	; (8010c74 <SD_CheckPower+0x14>)
 8010c66:	781b      	ldrb	r3, [r3, #0]
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	200077e7 	.word	0x200077e7

08010c78 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b084      	sub	sp, #16
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8010c82:	4b13      	ldr	r3, [pc, #76]	; (8010cd0 <SD_RxDataBlock+0x58>)
 8010c84:	22c8      	movs	r2, #200	; 0xc8
 8010c86:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8010c88:	f7ff ff58 	bl	8010b3c <SPI_RxByte>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8010c90:	7bfb      	ldrb	r3, [r7, #15]
 8010c92:	2bff      	cmp	r3, #255	; 0xff
 8010c94:	d103      	bne.n	8010c9e <SD_RxDataBlock+0x26>
 8010c96:	4b0e      	ldr	r3, [pc, #56]	; (8010cd0 <SD_RxDataBlock+0x58>)
 8010c98:	881b      	ldrh	r3, [r3, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d1f4      	bne.n	8010c88 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8010c9e:	7bfb      	ldrb	r3, [r7, #15]
 8010ca0:	2bfe      	cmp	r3, #254	; 0xfe
 8010ca2:	d001      	beq.n	8010ca8 <SD_RxDataBlock+0x30>
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	e00f      	b.n	8010cc8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	1c5a      	adds	r2, r3, #1
 8010cac:	607a      	str	r2, [r7, #4]
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7ff ff60 	bl	8010b74 <SPI_RxBytePtr>
	} while(len--);
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	1e5a      	subs	r2, r3, #1
 8010cb8:	603a      	str	r2, [r7, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d1f4      	bne.n	8010ca8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8010cbe:	f7ff ff3d 	bl	8010b3c <SPI_RxByte>
	SPI_RxByte();
 8010cc2:	f7ff ff3b 	bl	8010b3c <SPI_RxByte>

	return TRUE;
 8010cc6:	2301      	movs	r3, #1
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3710      	adds	r7, #16
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}
 8010cd0:	20002999 	.word	0x20002999

08010cd4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b084      	sub	sp, #16
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	460b      	mov	r3, r1
 8010cde:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8010ce4:	f7ff ff54 	bl	8010b90 <SD_ReadyWait>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	2bff      	cmp	r3, #255	; 0xff
 8010cec:	d001      	beq.n	8010cf2 <SD_TxDataBlock+0x1e>
 8010cee:	2300      	movs	r3, #0
 8010cf0:	e02f      	b.n	8010d52 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8010cf2:	78fb      	ldrb	r3, [r7, #3]
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f7ff feed 	bl	8010ad4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8010cfa:	78fb      	ldrb	r3, [r7, #3]
 8010cfc:	2bfd      	cmp	r3, #253	; 0xfd
 8010cfe:	d020      	beq.n	8010d42 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8010d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f7ff feff 	bl	8010b08 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8010d0a:	f7ff ff17 	bl	8010b3c <SPI_RxByte>
		SPI_RxByte();
 8010d0e:	f7ff ff15 	bl	8010b3c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8010d12:	e00b      	b.n	8010d2c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8010d14:	f7ff ff12 	bl	8010b3c <SPI_RxByte>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8010d1c:	7bfb      	ldrb	r3, [r7, #15]
 8010d1e:	f003 031f 	and.w	r3, r3, #31
 8010d22:	2b05      	cmp	r3, #5
 8010d24:	d006      	beq.n	8010d34 <SD_TxDataBlock+0x60>
			i++;
 8010d26:	7bbb      	ldrb	r3, [r7, #14]
 8010d28:	3301      	adds	r3, #1
 8010d2a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8010d2c:	7bbb      	ldrb	r3, [r7, #14]
 8010d2e:	2b40      	cmp	r3, #64	; 0x40
 8010d30:	d9f0      	bls.n	8010d14 <SD_TxDataBlock+0x40>
 8010d32:	e000      	b.n	8010d36 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8010d34:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8010d36:	bf00      	nop
 8010d38:	f7ff ff00 	bl	8010b3c <SPI_RxByte>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d0fa      	beq.n	8010d38 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8010d42:	7bfb      	ldrb	r3, [r7, #15]
 8010d44:	f003 031f 	and.w	r3, r3, #31
 8010d48:	2b05      	cmp	r3, #5
 8010d4a:	d101      	bne.n	8010d50 <SD_TxDataBlock+0x7c>
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e000      	b.n	8010d52 <SD_TxDataBlock+0x7e>

	return FALSE;
 8010d50:	2300      	movs	r3, #0
}
 8010d52:	4618      	mov	r0, r3
 8010d54:	3710      	adds	r7, #16
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}

08010d5a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8010d5a:	b580      	push	{r7, lr}
 8010d5c:	b084      	sub	sp, #16
 8010d5e:	af00      	add	r7, sp, #0
 8010d60:	4603      	mov	r3, r0
 8010d62:	6039      	str	r1, [r7, #0]
 8010d64:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8010d66:	f7ff ff13 	bl	8010b90 <SD_ReadyWait>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	2bff      	cmp	r3, #255	; 0xff
 8010d6e:	d001      	beq.n	8010d74 <SD_SendCmd+0x1a>
 8010d70:	23ff      	movs	r3, #255	; 0xff
 8010d72:	e042      	b.n	8010dfa <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8010d74:	79fb      	ldrb	r3, [r7, #7]
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7ff feac 	bl	8010ad4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	0e1b      	lsrs	r3, r3, #24
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7ff fea6 	bl	8010ad4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	0c1b      	lsrs	r3, r3, #16
 8010d8c:	b2db      	uxtb	r3, r3
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7ff fea0 	bl	8010ad4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	0a1b      	lsrs	r3, r3, #8
 8010d98:	b2db      	uxtb	r3, r3
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7ff fe9a 	bl	8010ad4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7ff fe95 	bl	8010ad4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8010daa:	79fb      	ldrb	r3, [r7, #7]
 8010dac:	2b40      	cmp	r3, #64	; 0x40
 8010dae:	d102      	bne.n	8010db6 <SD_SendCmd+0x5c>
 8010db0:	2395      	movs	r3, #149	; 0x95
 8010db2:	73fb      	strb	r3, [r7, #15]
 8010db4:	e007      	b.n	8010dc6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8010db6:	79fb      	ldrb	r3, [r7, #7]
 8010db8:	2b48      	cmp	r3, #72	; 0x48
 8010dba:	d102      	bne.n	8010dc2 <SD_SendCmd+0x68>
 8010dbc:	2387      	movs	r3, #135	; 0x87
 8010dbe:	73fb      	strb	r3, [r7, #15]
 8010dc0:	e001      	b.n	8010dc6 <SD_SendCmd+0x6c>
	else crc = 1;
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8010dc6:	7bfb      	ldrb	r3, [r7, #15]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7ff fe83 	bl	8010ad4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8010dce:	79fb      	ldrb	r3, [r7, #7]
 8010dd0:	2b4c      	cmp	r3, #76	; 0x4c
 8010dd2:	d101      	bne.n	8010dd8 <SD_SendCmd+0x7e>
 8010dd4:	f7ff feb2 	bl	8010b3c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8010dd8:	230a      	movs	r3, #10
 8010dda:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8010ddc:	f7ff feae 	bl	8010b3c <SPI_RxByte>
 8010de0:	4603      	mov	r3, r0
 8010de2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8010de4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	da05      	bge.n	8010df8 <SD_SendCmd+0x9e>
 8010dec:	7bbb      	ldrb	r3, [r7, #14]
 8010dee:	3b01      	subs	r3, #1
 8010df0:	73bb      	strb	r3, [r7, #14]
 8010df2:	7bbb      	ldrb	r3, [r7, #14]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d1f1      	bne.n	8010ddc <SD_SendCmd+0x82>

	return res;
 8010df8:	7b7b      	ldrb	r3, [r7, #13]
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3710      	adds	r7, #16
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}
	...

08010e04 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8010e04:	b590      	push	{r4, r7, lr}
 8010e06:	b085      	sub	sp, #20
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8010e0e:	79fb      	ldrb	r3, [r7, #7]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d001      	beq.n	8010e18 <SD_disk_initialize+0x14>
 8010e14:	2301      	movs	r3, #1
 8010e16:	e0d1      	b.n	8010fbc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8010e18:	4b6a      	ldr	r3, [pc, #424]	; (8010fc4 <SD_disk_initialize+0x1c0>)
 8010e1a:	781b      	ldrb	r3, [r3, #0]
 8010e1c:	b2db      	uxtb	r3, r3
 8010e1e:	f003 0302 	and.w	r3, r3, #2
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d003      	beq.n	8010e2e <SD_disk_initialize+0x2a>
 8010e26:	4b67      	ldr	r3, [pc, #412]	; (8010fc4 <SD_disk_initialize+0x1c0>)
 8010e28:	781b      	ldrb	r3, [r3, #0]
 8010e2a:	b2db      	uxtb	r3, r3
 8010e2c:	e0c6      	b.n	8010fbc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8010e2e:	f7ff fec9 	bl	8010bc4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8010e32:	f7ff fe33 	bl	8010a9c <SELECT>

	/* check disk type */
	type = 0;
 8010e36:	2300      	movs	r3, #0
 8010e38:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8010e3a:	2100      	movs	r1, #0
 8010e3c:	2040      	movs	r0, #64	; 0x40
 8010e3e:	f7ff ff8c 	bl	8010d5a <SD_SendCmd>
 8010e42:	4603      	mov	r3, r0
 8010e44:	2b01      	cmp	r3, #1
 8010e46:	f040 80a1 	bne.w	8010f8c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8010e4a:	4b5f      	ldr	r3, [pc, #380]	; (8010fc8 <SD_disk_initialize+0x1c4>)
 8010e4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010e50:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8010e52:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010e56:	2048      	movs	r0, #72	; 0x48
 8010e58:	f7ff ff7f 	bl	8010d5a <SD_SendCmd>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	d155      	bne.n	8010f0e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8010e62:	2300      	movs	r3, #0
 8010e64:	73fb      	strb	r3, [r7, #15]
 8010e66:	e00c      	b.n	8010e82 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8010e68:	7bfc      	ldrb	r4, [r7, #15]
 8010e6a:	f7ff fe67 	bl	8010b3c <SPI_RxByte>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	461a      	mov	r2, r3
 8010e72:	f104 0310 	add.w	r3, r4, #16
 8010e76:	443b      	add	r3, r7
 8010e78:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8010e7c:	7bfb      	ldrb	r3, [r7, #15]
 8010e7e:	3301      	adds	r3, #1
 8010e80:	73fb      	strb	r3, [r7, #15]
 8010e82:	7bfb      	ldrb	r3, [r7, #15]
 8010e84:	2b03      	cmp	r3, #3
 8010e86:	d9ef      	bls.n	8010e68 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8010e88:	7abb      	ldrb	r3, [r7, #10]
 8010e8a:	2b01      	cmp	r3, #1
 8010e8c:	d17e      	bne.n	8010f8c <SD_disk_initialize+0x188>
 8010e8e:	7afb      	ldrb	r3, [r7, #11]
 8010e90:	2baa      	cmp	r3, #170	; 0xaa
 8010e92:	d17b      	bne.n	8010f8c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8010e94:	2100      	movs	r1, #0
 8010e96:	2077      	movs	r0, #119	; 0x77
 8010e98:	f7ff ff5f 	bl	8010d5a <SD_SendCmd>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	2b01      	cmp	r3, #1
 8010ea0:	d807      	bhi.n	8010eb2 <SD_disk_initialize+0xae>
 8010ea2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010ea6:	2069      	movs	r0, #105	; 0x69
 8010ea8:	f7ff ff57 	bl	8010d5a <SD_SendCmd>
 8010eac:	4603      	mov	r3, r0
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d004      	beq.n	8010ebc <SD_disk_initialize+0xb8>
				} while (Timer1);
 8010eb2:	4b45      	ldr	r3, [pc, #276]	; (8010fc8 <SD_disk_initialize+0x1c4>)
 8010eb4:	881b      	ldrh	r3, [r3, #0]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d1ec      	bne.n	8010e94 <SD_disk_initialize+0x90>
 8010eba:	e000      	b.n	8010ebe <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8010ebc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8010ebe:	4b42      	ldr	r3, [pc, #264]	; (8010fc8 <SD_disk_initialize+0x1c4>)
 8010ec0:	881b      	ldrh	r3, [r3, #0]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d062      	beq.n	8010f8c <SD_disk_initialize+0x188>
 8010ec6:	2100      	movs	r1, #0
 8010ec8:	207a      	movs	r0, #122	; 0x7a
 8010eca:	f7ff ff46 	bl	8010d5a <SD_SendCmd>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d15b      	bne.n	8010f8c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	73fb      	strb	r3, [r7, #15]
 8010ed8:	e00c      	b.n	8010ef4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8010eda:	7bfc      	ldrb	r4, [r7, #15]
 8010edc:	f7ff fe2e 	bl	8010b3c <SPI_RxByte>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	461a      	mov	r2, r3
 8010ee4:	f104 0310 	add.w	r3, r4, #16
 8010ee8:	443b      	add	r3, r7
 8010eea:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8010eee:	7bfb      	ldrb	r3, [r7, #15]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	73fb      	strb	r3, [r7, #15]
 8010ef4:	7bfb      	ldrb	r3, [r7, #15]
 8010ef6:	2b03      	cmp	r3, #3
 8010ef8:	d9ef      	bls.n	8010eda <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8010efa:	7a3b      	ldrb	r3, [r7, #8]
 8010efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d001      	beq.n	8010f08 <SD_disk_initialize+0x104>
 8010f04:	230c      	movs	r3, #12
 8010f06:	e000      	b.n	8010f0a <SD_disk_initialize+0x106>
 8010f08:	2304      	movs	r3, #4
 8010f0a:	73bb      	strb	r3, [r7, #14]
 8010f0c:	e03e      	b.n	8010f8c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8010f0e:	2100      	movs	r1, #0
 8010f10:	2077      	movs	r0, #119	; 0x77
 8010f12:	f7ff ff22 	bl	8010d5a <SD_SendCmd>
 8010f16:	4603      	mov	r3, r0
 8010f18:	2b01      	cmp	r3, #1
 8010f1a:	d808      	bhi.n	8010f2e <SD_disk_initialize+0x12a>
 8010f1c:	2100      	movs	r1, #0
 8010f1e:	2069      	movs	r0, #105	; 0x69
 8010f20:	f7ff ff1b 	bl	8010d5a <SD_SendCmd>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d801      	bhi.n	8010f2e <SD_disk_initialize+0x12a>
 8010f2a:	2302      	movs	r3, #2
 8010f2c:	e000      	b.n	8010f30 <SD_disk_initialize+0x12c>
 8010f2e:	2301      	movs	r3, #1
 8010f30:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8010f32:	7bbb      	ldrb	r3, [r7, #14]
 8010f34:	2b02      	cmp	r3, #2
 8010f36:	d10e      	bne.n	8010f56 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8010f38:	2100      	movs	r1, #0
 8010f3a:	2077      	movs	r0, #119	; 0x77
 8010f3c:	f7ff ff0d 	bl	8010d5a <SD_SendCmd>
 8010f40:	4603      	mov	r3, r0
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d80e      	bhi.n	8010f64 <SD_disk_initialize+0x160>
 8010f46:	2100      	movs	r1, #0
 8010f48:	2069      	movs	r0, #105	; 0x69
 8010f4a:	f7ff ff06 	bl	8010d5a <SD_SendCmd>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d107      	bne.n	8010f64 <SD_disk_initialize+0x160>
 8010f54:	e00c      	b.n	8010f70 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8010f56:	2100      	movs	r1, #0
 8010f58:	2041      	movs	r0, #65	; 0x41
 8010f5a:	f7ff fefe 	bl	8010d5a <SD_SendCmd>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d004      	beq.n	8010f6e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8010f64:	4b18      	ldr	r3, [pc, #96]	; (8010fc8 <SD_disk_initialize+0x1c4>)
 8010f66:	881b      	ldrh	r3, [r3, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d1e2      	bne.n	8010f32 <SD_disk_initialize+0x12e>
 8010f6c:	e000      	b.n	8010f70 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8010f6e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8010f70:	4b15      	ldr	r3, [pc, #84]	; (8010fc8 <SD_disk_initialize+0x1c4>)
 8010f72:	881b      	ldrh	r3, [r3, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d007      	beq.n	8010f88 <SD_disk_initialize+0x184>
 8010f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010f7c:	2050      	movs	r0, #80	; 0x50
 8010f7e:	f7ff feec 	bl	8010d5a <SD_SendCmd>
 8010f82:	4603      	mov	r3, r0
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d001      	beq.n	8010f8c <SD_disk_initialize+0x188>
 8010f88:	2300      	movs	r3, #0
 8010f8a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8010f8c:	4a0f      	ldr	r2, [pc, #60]	; (8010fcc <SD_disk_initialize+0x1c8>)
 8010f8e:	7bbb      	ldrb	r3, [r7, #14]
 8010f90:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8010f92:	f7ff fd91 	bl	8010ab8 <DESELECT>
	SPI_RxByte();
 8010f96:	f7ff fdd1 	bl	8010b3c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8010f9a:	7bbb      	ldrb	r3, [r7, #14]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d008      	beq.n	8010fb2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8010fa0:	4b08      	ldr	r3, [pc, #32]	; (8010fc4 <SD_disk_initialize+0x1c0>)
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	f023 0301 	bic.w	r3, r3, #1
 8010faa:	b2da      	uxtb	r2, r3
 8010fac:	4b05      	ldr	r3, [pc, #20]	; (8010fc4 <SD_disk_initialize+0x1c0>)
 8010fae:	701a      	strb	r2, [r3, #0]
 8010fb0:	e001      	b.n	8010fb6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8010fb2:	f7ff fe49 	bl	8010c48 <SD_PowerOff>
	}

	return Stat;
 8010fb6:	4b03      	ldr	r3, [pc, #12]	; (8010fc4 <SD_disk_initialize+0x1c0>)
 8010fb8:	781b      	ldrb	r3, [r3, #0]
 8010fba:	b2db      	uxtb	r3, r3
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3714      	adds	r7, #20
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd90      	pop	{r4, r7, pc}
 8010fc4:	20000038 	.word	0x20000038
 8010fc8:	20002999 	.word	0x20002999
 8010fcc:	200077e6 	.word	0x200077e6

08010fd0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b083      	sub	sp, #12
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8010fda:	79fb      	ldrb	r3, [r7, #7]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d001      	beq.n	8010fe4 <SD_disk_status+0x14>
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	e002      	b.n	8010fea <SD_disk_status+0x1a>
	return Stat;
 8010fe4:	4b04      	ldr	r3, [pc, #16]	; (8010ff8 <SD_disk_status+0x28>)
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	b2db      	uxtb	r3, r3
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	370c      	adds	r7, #12
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff4:	4770      	bx	lr
 8010ff6:	bf00      	nop
 8010ff8:	20000038 	.word	0x20000038

08010ffc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b084      	sub	sp, #16
 8011000:	af00      	add	r7, sp, #0
 8011002:	60b9      	str	r1, [r7, #8]
 8011004:	607a      	str	r2, [r7, #4]
 8011006:	603b      	str	r3, [r7, #0]
 8011008:	4603      	mov	r3, r0
 801100a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 801100c:	7bfb      	ldrb	r3, [r7, #15]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d102      	bne.n	8011018 <SD_disk_read+0x1c>
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d101      	bne.n	801101c <SD_disk_read+0x20>
 8011018:	2304      	movs	r3, #4
 801101a:	e051      	b.n	80110c0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 801101c:	4b2a      	ldr	r3, [pc, #168]	; (80110c8 <SD_disk_read+0xcc>)
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	b2db      	uxtb	r3, r3
 8011022:	f003 0301 	and.w	r3, r3, #1
 8011026:	2b00      	cmp	r3, #0
 8011028:	d001      	beq.n	801102e <SD_disk_read+0x32>
 801102a:	2303      	movs	r3, #3
 801102c:	e048      	b.n	80110c0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 801102e:	4b27      	ldr	r3, [pc, #156]	; (80110cc <SD_disk_read+0xd0>)
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	f003 0304 	and.w	r3, r3, #4
 8011036:	2b00      	cmp	r3, #0
 8011038:	d102      	bne.n	8011040 <SD_disk_read+0x44>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	025b      	lsls	r3, r3, #9
 801103e:	607b      	str	r3, [r7, #4]

	SELECT();
 8011040:	f7ff fd2c 	bl	8010a9c <SELECT>

	if (count == 1)
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	2b01      	cmp	r3, #1
 8011048:	d111      	bne.n	801106e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 801104a:	6879      	ldr	r1, [r7, #4]
 801104c:	2051      	movs	r0, #81	; 0x51
 801104e:	f7ff fe84 	bl	8010d5a <SD_SendCmd>
 8011052:	4603      	mov	r3, r0
 8011054:	2b00      	cmp	r3, #0
 8011056:	d129      	bne.n	80110ac <SD_disk_read+0xb0>
 8011058:	f44f 7100 	mov.w	r1, #512	; 0x200
 801105c:	68b8      	ldr	r0, [r7, #8]
 801105e:	f7ff fe0b 	bl	8010c78 <SD_RxDataBlock>
 8011062:	4603      	mov	r3, r0
 8011064:	2b00      	cmp	r3, #0
 8011066:	d021      	beq.n	80110ac <SD_disk_read+0xb0>
 8011068:	2300      	movs	r3, #0
 801106a:	603b      	str	r3, [r7, #0]
 801106c:	e01e      	b.n	80110ac <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 801106e:	6879      	ldr	r1, [r7, #4]
 8011070:	2052      	movs	r0, #82	; 0x52
 8011072:	f7ff fe72 	bl	8010d5a <SD_SendCmd>
 8011076:	4603      	mov	r3, r0
 8011078:	2b00      	cmp	r3, #0
 801107a:	d117      	bne.n	80110ac <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 801107c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011080:	68b8      	ldr	r0, [r7, #8]
 8011082:	f7ff fdf9 	bl	8010c78 <SD_RxDataBlock>
 8011086:	4603      	mov	r3, r0
 8011088:	2b00      	cmp	r3, #0
 801108a:	d00a      	beq.n	80110a2 <SD_disk_read+0xa6>
				buff += 512;
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8011092:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	3b01      	subs	r3, #1
 8011098:	603b      	str	r3, [r7, #0]
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d1ed      	bne.n	801107c <SD_disk_read+0x80>
 80110a0:	e000      	b.n	80110a4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80110a2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80110a4:	2100      	movs	r1, #0
 80110a6:	204c      	movs	r0, #76	; 0x4c
 80110a8:	f7ff fe57 	bl	8010d5a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80110ac:	f7ff fd04 	bl	8010ab8 <DESELECT>
	SPI_RxByte();
 80110b0:	f7ff fd44 	bl	8010b3c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	bf14      	ite	ne
 80110ba:	2301      	movne	r3, #1
 80110bc:	2300      	moveq	r3, #0
 80110be:	b2db      	uxtb	r3, r3
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3710      	adds	r7, #16
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}
 80110c8:	20000038 	.word	0x20000038
 80110cc:	200077e6 	.word	0x200077e6

080110d0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b084      	sub	sp, #16
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	60b9      	str	r1, [r7, #8]
 80110d8:	607a      	str	r2, [r7, #4]
 80110da:	603b      	str	r3, [r7, #0]
 80110dc:	4603      	mov	r3, r0
 80110de:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80110e0:	7bfb      	ldrb	r3, [r7, #15]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d102      	bne.n	80110ec <SD_disk_write+0x1c>
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d101      	bne.n	80110f0 <SD_disk_write+0x20>
 80110ec:	2304      	movs	r3, #4
 80110ee:	e06b      	b.n	80111c8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80110f0:	4b37      	ldr	r3, [pc, #220]	; (80111d0 <SD_disk_write+0x100>)
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	b2db      	uxtb	r3, r3
 80110f6:	f003 0301 	and.w	r3, r3, #1
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d001      	beq.n	8011102 <SD_disk_write+0x32>
 80110fe:	2303      	movs	r3, #3
 8011100:	e062      	b.n	80111c8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8011102:	4b33      	ldr	r3, [pc, #204]	; (80111d0 <SD_disk_write+0x100>)
 8011104:	781b      	ldrb	r3, [r3, #0]
 8011106:	b2db      	uxtb	r3, r3
 8011108:	f003 0304 	and.w	r3, r3, #4
 801110c:	2b00      	cmp	r3, #0
 801110e:	d001      	beq.n	8011114 <SD_disk_write+0x44>
 8011110:	2302      	movs	r3, #2
 8011112:	e059      	b.n	80111c8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8011114:	4b2f      	ldr	r3, [pc, #188]	; (80111d4 <SD_disk_write+0x104>)
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	f003 0304 	and.w	r3, r3, #4
 801111c:	2b00      	cmp	r3, #0
 801111e:	d102      	bne.n	8011126 <SD_disk_write+0x56>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	025b      	lsls	r3, r3, #9
 8011124:	607b      	str	r3, [r7, #4]

	SELECT();
 8011126:	f7ff fcb9 	bl	8010a9c <SELECT>

	if (count == 1)
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	2b01      	cmp	r3, #1
 801112e:	d110      	bne.n	8011152 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8011130:	6879      	ldr	r1, [r7, #4]
 8011132:	2058      	movs	r0, #88	; 0x58
 8011134:	f7ff fe11 	bl	8010d5a <SD_SendCmd>
 8011138:	4603      	mov	r3, r0
 801113a:	2b00      	cmp	r3, #0
 801113c:	d13a      	bne.n	80111b4 <SD_disk_write+0xe4>
 801113e:	21fe      	movs	r1, #254	; 0xfe
 8011140:	68b8      	ldr	r0, [r7, #8]
 8011142:	f7ff fdc7 	bl	8010cd4 <SD_TxDataBlock>
 8011146:	4603      	mov	r3, r0
 8011148:	2b00      	cmp	r3, #0
 801114a:	d033      	beq.n	80111b4 <SD_disk_write+0xe4>
			count = 0;
 801114c:	2300      	movs	r3, #0
 801114e:	603b      	str	r3, [r7, #0]
 8011150:	e030      	b.n	80111b4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8011152:	4b20      	ldr	r3, [pc, #128]	; (80111d4 <SD_disk_write+0x104>)
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	f003 0302 	and.w	r3, r3, #2
 801115a:	2b00      	cmp	r3, #0
 801115c:	d007      	beq.n	801116e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 801115e:	2100      	movs	r1, #0
 8011160:	2077      	movs	r0, #119	; 0x77
 8011162:	f7ff fdfa 	bl	8010d5a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8011166:	6839      	ldr	r1, [r7, #0]
 8011168:	2057      	movs	r0, #87	; 0x57
 801116a:	f7ff fdf6 	bl	8010d5a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 801116e:	6879      	ldr	r1, [r7, #4]
 8011170:	2059      	movs	r0, #89	; 0x59
 8011172:	f7ff fdf2 	bl	8010d5a <SD_SendCmd>
 8011176:	4603      	mov	r3, r0
 8011178:	2b00      	cmp	r3, #0
 801117a:	d11b      	bne.n	80111b4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 801117c:	21fc      	movs	r1, #252	; 0xfc
 801117e:	68b8      	ldr	r0, [r7, #8]
 8011180:	f7ff fda8 	bl	8010cd4 <SD_TxDataBlock>
 8011184:	4603      	mov	r3, r0
 8011186:	2b00      	cmp	r3, #0
 8011188:	d00a      	beq.n	80111a0 <SD_disk_write+0xd0>
				buff += 512;
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8011190:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	3b01      	subs	r3, #1
 8011196:	603b      	str	r3, [r7, #0]
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d1ee      	bne.n	801117c <SD_disk_write+0xac>
 801119e:	e000      	b.n	80111a2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80111a0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80111a2:	21fd      	movs	r1, #253	; 0xfd
 80111a4:	2000      	movs	r0, #0
 80111a6:	f7ff fd95 	bl	8010cd4 <SD_TxDataBlock>
 80111aa:	4603      	mov	r3, r0
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d101      	bne.n	80111b4 <SD_disk_write+0xe4>
			{
				count = 1;
 80111b0:	2301      	movs	r3, #1
 80111b2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80111b4:	f7ff fc80 	bl	8010ab8 <DESELECT>
	SPI_RxByte();
 80111b8:	f7ff fcc0 	bl	8010b3c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	bf14      	ite	ne
 80111c2:	2301      	movne	r3, #1
 80111c4:	2300      	moveq	r3, #0
 80111c6:	b2db      	uxtb	r3, r3
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3710      	adds	r7, #16
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}
 80111d0:	20000038 	.word	0x20000038
 80111d4:	200077e6 	.word	0x200077e6

080111d8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80111d8:	b590      	push	{r4, r7, lr}
 80111da:	b08b      	sub	sp, #44	; 0x2c
 80111dc:	af00      	add	r7, sp, #0
 80111de:	4603      	mov	r3, r0
 80111e0:	603a      	str	r2, [r7, #0]
 80111e2:	71fb      	strb	r3, [r7, #7]
 80111e4:	460b      	mov	r3, r1
 80111e6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80111ec:	79fb      	ldrb	r3, [r7, #7]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d001      	beq.n	80111f6 <SD_disk_ioctl+0x1e>
 80111f2:	2304      	movs	r3, #4
 80111f4:	e115      	b.n	8011422 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80111f6:	2301      	movs	r3, #1
 80111f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80111fc:	79bb      	ldrb	r3, [r7, #6]
 80111fe:	2b05      	cmp	r3, #5
 8011200:	d124      	bne.n	801124c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8011202:	6a3b      	ldr	r3, [r7, #32]
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	2b02      	cmp	r3, #2
 8011208:	d012      	beq.n	8011230 <SD_disk_ioctl+0x58>
 801120a:	2b02      	cmp	r3, #2
 801120c:	dc1a      	bgt.n	8011244 <SD_disk_ioctl+0x6c>
 801120e:	2b00      	cmp	r3, #0
 8011210:	d002      	beq.n	8011218 <SD_disk_ioctl+0x40>
 8011212:	2b01      	cmp	r3, #1
 8011214:	d006      	beq.n	8011224 <SD_disk_ioctl+0x4c>
 8011216:	e015      	b.n	8011244 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8011218:	f7ff fd16 	bl	8010c48 <SD_PowerOff>
			res = RES_OK;
 801121c:	2300      	movs	r3, #0
 801121e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8011222:	e0fc      	b.n	801141e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8011224:	f7ff fcce 	bl	8010bc4 <SD_PowerOn>
			res = RES_OK;
 8011228:	2300      	movs	r3, #0
 801122a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 801122e:	e0f6      	b.n	801141e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8011230:	6a3b      	ldr	r3, [r7, #32]
 8011232:	1c5c      	adds	r4, r3, #1
 8011234:	f7ff fd14 	bl	8010c60 <SD_CheckPower>
 8011238:	4603      	mov	r3, r0
 801123a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 801123c:	2300      	movs	r3, #0
 801123e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8011242:	e0ec      	b.n	801141e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8011244:	2304      	movs	r3, #4
 8011246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801124a:	e0e8      	b.n	801141e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 801124c:	4b77      	ldr	r3, [pc, #476]	; (801142c <SD_disk_ioctl+0x254>)
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	b2db      	uxtb	r3, r3
 8011252:	f003 0301 	and.w	r3, r3, #1
 8011256:	2b00      	cmp	r3, #0
 8011258:	d001      	beq.n	801125e <SD_disk_ioctl+0x86>
 801125a:	2303      	movs	r3, #3
 801125c:	e0e1      	b.n	8011422 <SD_disk_ioctl+0x24a>

		SELECT();
 801125e:	f7ff fc1d 	bl	8010a9c <SELECT>

		switch (ctrl)
 8011262:	79bb      	ldrb	r3, [r7, #6]
 8011264:	2b0d      	cmp	r3, #13
 8011266:	f200 80cb 	bhi.w	8011400 <SD_disk_ioctl+0x228>
 801126a:	a201      	add	r2, pc, #4	; (adr r2, 8011270 <SD_disk_ioctl+0x98>)
 801126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011270:	0801136b 	.word	0x0801136b
 8011274:	080112a9 	.word	0x080112a9
 8011278:	0801135b 	.word	0x0801135b
 801127c:	08011401 	.word	0x08011401
 8011280:	08011401 	.word	0x08011401
 8011284:	08011401 	.word	0x08011401
 8011288:	08011401 	.word	0x08011401
 801128c:	08011401 	.word	0x08011401
 8011290:	08011401 	.word	0x08011401
 8011294:	08011401 	.word	0x08011401
 8011298:	08011401 	.word	0x08011401
 801129c:	0801137d 	.word	0x0801137d
 80112a0:	080113a1 	.word	0x080113a1
 80112a4:	080113c5 	.word	0x080113c5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80112a8:	2100      	movs	r1, #0
 80112aa:	2049      	movs	r0, #73	; 0x49
 80112ac:	f7ff fd55 	bl	8010d5a <SD_SendCmd>
 80112b0:	4603      	mov	r3, r0
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	f040 80a8 	bne.w	8011408 <SD_disk_ioctl+0x230>
 80112b8:	f107 030c 	add.w	r3, r7, #12
 80112bc:	2110      	movs	r1, #16
 80112be:	4618      	mov	r0, r3
 80112c0:	f7ff fcda 	bl	8010c78 <SD_RxDataBlock>
 80112c4:	4603      	mov	r3, r0
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	f000 809e 	beq.w	8011408 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80112cc:	7b3b      	ldrb	r3, [r7, #12]
 80112ce:	099b      	lsrs	r3, r3, #6
 80112d0:	b2db      	uxtb	r3, r3
 80112d2:	2b01      	cmp	r3, #1
 80112d4:	d10e      	bne.n	80112f4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80112d6:	7d7b      	ldrb	r3, [r7, #21]
 80112d8:	b29a      	uxth	r2, r3
 80112da:	7d3b      	ldrb	r3, [r7, #20]
 80112dc:	b29b      	uxth	r3, r3
 80112de:	021b      	lsls	r3, r3, #8
 80112e0:	b29b      	uxth	r3, r3
 80112e2:	4413      	add	r3, r2
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	3301      	adds	r3, #1
 80112e8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80112ea:	8bfb      	ldrh	r3, [r7, #30]
 80112ec:	029a      	lsls	r2, r3, #10
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	601a      	str	r2, [r3, #0]
 80112f2:	e02e      	b.n	8011352 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80112f4:	7c7b      	ldrb	r3, [r7, #17]
 80112f6:	f003 030f 	and.w	r3, r3, #15
 80112fa:	b2da      	uxtb	r2, r3
 80112fc:	7dbb      	ldrb	r3, [r7, #22]
 80112fe:	09db      	lsrs	r3, r3, #7
 8011300:	b2db      	uxtb	r3, r3
 8011302:	4413      	add	r3, r2
 8011304:	b2da      	uxtb	r2, r3
 8011306:	7d7b      	ldrb	r3, [r7, #21]
 8011308:	005b      	lsls	r3, r3, #1
 801130a:	b2db      	uxtb	r3, r3
 801130c:	f003 0306 	and.w	r3, r3, #6
 8011310:	b2db      	uxtb	r3, r3
 8011312:	4413      	add	r3, r2
 8011314:	b2db      	uxtb	r3, r3
 8011316:	3302      	adds	r3, #2
 8011318:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 801131c:	7d3b      	ldrb	r3, [r7, #20]
 801131e:	099b      	lsrs	r3, r3, #6
 8011320:	b2db      	uxtb	r3, r3
 8011322:	b29a      	uxth	r2, r3
 8011324:	7cfb      	ldrb	r3, [r7, #19]
 8011326:	b29b      	uxth	r3, r3
 8011328:	009b      	lsls	r3, r3, #2
 801132a:	b29b      	uxth	r3, r3
 801132c:	4413      	add	r3, r2
 801132e:	b29a      	uxth	r2, r3
 8011330:	7cbb      	ldrb	r3, [r7, #18]
 8011332:	029b      	lsls	r3, r3, #10
 8011334:	b29b      	uxth	r3, r3
 8011336:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801133a:	b29b      	uxth	r3, r3
 801133c:	4413      	add	r3, r2
 801133e:	b29b      	uxth	r3, r3
 8011340:	3301      	adds	r3, #1
 8011342:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8011344:	8bfa      	ldrh	r2, [r7, #30]
 8011346:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801134a:	3b09      	subs	r3, #9
 801134c:	409a      	lsls	r2, r3
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8011352:	2300      	movs	r3, #0
 8011354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8011358:	e056      	b.n	8011408 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011360:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8011362:	2300      	movs	r3, #0
 8011364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8011368:	e055      	b.n	8011416 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 801136a:	f7ff fc11 	bl	8010b90 <SD_ReadyWait>
 801136e:	4603      	mov	r3, r0
 8011370:	2bff      	cmp	r3, #255	; 0xff
 8011372:	d14b      	bne.n	801140c <SD_disk_ioctl+0x234>
 8011374:	2300      	movs	r3, #0
 8011376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 801137a:	e047      	b.n	801140c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 801137c:	2100      	movs	r1, #0
 801137e:	2049      	movs	r0, #73	; 0x49
 8011380:	f7ff fceb 	bl	8010d5a <SD_SendCmd>
 8011384:	4603      	mov	r3, r0
 8011386:	2b00      	cmp	r3, #0
 8011388:	d142      	bne.n	8011410 <SD_disk_ioctl+0x238>
 801138a:	2110      	movs	r1, #16
 801138c:	6a38      	ldr	r0, [r7, #32]
 801138e:	f7ff fc73 	bl	8010c78 <SD_RxDataBlock>
 8011392:	4603      	mov	r3, r0
 8011394:	2b00      	cmp	r3, #0
 8011396:	d03b      	beq.n	8011410 <SD_disk_ioctl+0x238>
 8011398:	2300      	movs	r3, #0
 801139a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 801139e:	e037      	b.n	8011410 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80113a0:	2100      	movs	r1, #0
 80113a2:	204a      	movs	r0, #74	; 0x4a
 80113a4:	f7ff fcd9 	bl	8010d5a <SD_SendCmd>
 80113a8:	4603      	mov	r3, r0
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d132      	bne.n	8011414 <SD_disk_ioctl+0x23c>
 80113ae:	2110      	movs	r1, #16
 80113b0:	6a38      	ldr	r0, [r7, #32]
 80113b2:	f7ff fc61 	bl	8010c78 <SD_RxDataBlock>
 80113b6:	4603      	mov	r3, r0
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d02b      	beq.n	8011414 <SD_disk_ioctl+0x23c>
 80113bc:	2300      	movs	r3, #0
 80113be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80113c2:	e027      	b.n	8011414 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80113c4:	2100      	movs	r1, #0
 80113c6:	207a      	movs	r0, #122	; 0x7a
 80113c8:	f7ff fcc7 	bl	8010d5a <SD_SendCmd>
 80113cc:	4603      	mov	r3, r0
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d116      	bne.n	8011400 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80113d2:	2300      	movs	r3, #0
 80113d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80113d8:	e00b      	b.n	80113f2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80113da:	6a3c      	ldr	r4, [r7, #32]
 80113dc:	1c63      	adds	r3, r4, #1
 80113de:	623b      	str	r3, [r7, #32]
 80113e0:	f7ff fbac 	bl	8010b3c <SPI_RxByte>
 80113e4:	4603      	mov	r3, r0
 80113e6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80113e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80113ec:	3301      	adds	r3, #1
 80113ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80113f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80113f6:	2b03      	cmp	r3, #3
 80113f8:	d9ef      	bls.n	80113da <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80113fa:	2300      	movs	r3, #0
 80113fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8011400:	2304      	movs	r3, #4
 8011402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011406:	e006      	b.n	8011416 <SD_disk_ioctl+0x23e>
			break;
 8011408:	bf00      	nop
 801140a:	e004      	b.n	8011416 <SD_disk_ioctl+0x23e>
			break;
 801140c:	bf00      	nop
 801140e:	e002      	b.n	8011416 <SD_disk_ioctl+0x23e>
			break;
 8011410:	bf00      	nop
 8011412:	e000      	b.n	8011416 <SD_disk_ioctl+0x23e>
			break;
 8011414:	bf00      	nop
		}

		DESELECT();
 8011416:	f7ff fb4f 	bl	8010ab8 <DESELECT>
		SPI_RxByte();
 801141a:	f7ff fb8f 	bl	8010b3c <SPI_RxByte>
	}

	return res;
 801141e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011422:	4618      	mov	r0, r3
 8011424:	372c      	adds	r7, #44	; 0x2c
 8011426:	46bd      	mov	sp, r7
 8011428:	bd90      	pop	{r4, r7, pc}
 801142a:	bf00      	nop
 801142c:	20000038 	.word	0x20000038

08011430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8011430:	b480      	push	{r7}
 8011432:	af00      	add	r7, sp, #0
	return 1;
 8011434:	2301      	movs	r3, #1
}
 8011436:	4618      	mov	r0, r3
 8011438:	46bd      	mov	sp, r7
 801143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143e:	4770      	bx	lr

08011440 <_kill>:

int _kill(int pid, int sig)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b082      	sub	sp, #8
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801144a:	f000 fe87 	bl	801215c <__errno>
 801144e:	4603      	mov	r3, r0
 8011450:	2216      	movs	r2, #22
 8011452:	601a      	str	r2, [r3, #0]
	return -1;
 8011454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011458:	4618      	mov	r0, r3
 801145a:	3708      	adds	r7, #8
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}

08011460 <_exit>:

void _exit (int status)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b082      	sub	sp, #8
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8011468:	f04f 31ff 	mov.w	r1, #4294967295
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f7ff ffe7 	bl	8011440 <_kill>
	while (1) {}		/* Make sure we hang here */
 8011472:	e7fe      	b.n	8011472 <_exit+0x12>

08011474 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b086      	sub	sp, #24
 8011478:	af00      	add	r7, sp, #0
 801147a:	60f8      	str	r0, [r7, #12]
 801147c:	60b9      	str	r1, [r7, #8]
 801147e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011480:	2300      	movs	r3, #0
 8011482:	617b      	str	r3, [r7, #20]
 8011484:	e00a      	b.n	801149c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8011486:	f3af 8000 	nop.w
 801148a:	4601      	mov	r1, r0
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	1c5a      	adds	r2, r3, #1
 8011490:	60ba      	str	r2, [r7, #8]
 8011492:	b2ca      	uxtb	r2, r1
 8011494:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	3301      	adds	r3, #1
 801149a:	617b      	str	r3, [r7, #20]
 801149c:	697a      	ldr	r2, [r7, #20]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	429a      	cmp	r2, r3
 80114a2:	dbf0      	blt.n	8011486 <_read+0x12>
	}

return len;
 80114a4:	687b      	ldr	r3, [r7, #4]
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3718      	adds	r7, #24
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}

080114ae <_close>:
	}
	return len;
}

int _close(int file)
{
 80114ae:	b480      	push	{r7}
 80114b0:	b083      	sub	sp, #12
 80114b2:	af00      	add	r7, sp, #0
 80114b4:	6078      	str	r0, [r7, #4]
	return -1;
 80114b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	370c      	adds	r7, #12
 80114be:	46bd      	mov	sp, r7
 80114c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c4:	4770      	bx	lr

080114c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80114c6:	b480      	push	{r7}
 80114c8:	b083      	sub	sp, #12
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]
 80114ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80114d6:	605a      	str	r2, [r3, #4]
	return 0;
 80114d8:	2300      	movs	r3, #0
}
 80114da:	4618      	mov	r0, r3
 80114dc:	370c      	adds	r7, #12
 80114de:	46bd      	mov	sp, r7
 80114e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e4:	4770      	bx	lr

080114e6 <_isatty>:

int _isatty(int file)
{
 80114e6:	b480      	push	{r7}
 80114e8:	b083      	sub	sp, #12
 80114ea:	af00      	add	r7, sp, #0
 80114ec:	6078      	str	r0, [r7, #4]
	return 1;
 80114ee:	2301      	movs	r3, #1
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	370c      	adds	r7, #12
 80114f4:	46bd      	mov	sp, r7
 80114f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fa:	4770      	bx	lr

080114fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80114fc:	b480      	push	{r7}
 80114fe:	b085      	sub	sp, #20
 8011500:	af00      	add	r7, sp, #0
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	60b9      	str	r1, [r7, #8]
 8011506:	607a      	str	r2, [r7, #4]
	return 0;
 8011508:	2300      	movs	r3, #0
}
 801150a:	4618      	mov	r0, r3
 801150c:	3714      	adds	r7, #20
 801150e:	46bd      	mov	sp, r7
 8011510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011514:	4770      	bx	lr

08011516 <__cvt>:
 8011516:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801151a:	ec55 4b10 	vmov	r4, r5, d0
 801151e:	2d00      	cmp	r5, #0
 8011520:	460e      	mov	r6, r1
 8011522:	4619      	mov	r1, r3
 8011524:	462b      	mov	r3, r5
 8011526:	bfbb      	ittet	lt
 8011528:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801152c:	461d      	movlt	r5, r3
 801152e:	2300      	movge	r3, #0
 8011530:	232d      	movlt	r3, #45	; 0x2d
 8011532:	700b      	strb	r3, [r1, #0]
 8011534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011536:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801153a:	4691      	mov	r9, r2
 801153c:	f023 0820 	bic.w	r8, r3, #32
 8011540:	bfbc      	itt	lt
 8011542:	4622      	movlt	r2, r4
 8011544:	4614      	movlt	r4, r2
 8011546:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801154a:	d005      	beq.n	8011558 <__cvt+0x42>
 801154c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011550:	d100      	bne.n	8011554 <__cvt+0x3e>
 8011552:	3601      	adds	r6, #1
 8011554:	2102      	movs	r1, #2
 8011556:	e000      	b.n	801155a <__cvt+0x44>
 8011558:	2103      	movs	r1, #3
 801155a:	ab03      	add	r3, sp, #12
 801155c:	9301      	str	r3, [sp, #4]
 801155e:	ab02      	add	r3, sp, #8
 8011560:	9300      	str	r3, [sp, #0]
 8011562:	ec45 4b10 	vmov	d0, r4, r5
 8011566:	4653      	mov	r3, sl
 8011568:	4632      	mov	r2, r6
 801156a:	f000 feb9 	bl	80122e0 <_dtoa_r>
 801156e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011572:	4607      	mov	r7, r0
 8011574:	d102      	bne.n	801157c <__cvt+0x66>
 8011576:	f019 0f01 	tst.w	r9, #1
 801157a:	d022      	beq.n	80115c2 <__cvt+0xac>
 801157c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011580:	eb07 0906 	add.w	r9, r7, r6
 8011584:	d110      	bne.n	80115a8 <__cvt+0x92>
 8011586:	783b      	ldrb	r3, [r7, #0]
 8011588:	2b30      	cmp	r3, #48	; 0x30
 801158a:	d10a      	bne.n	80115a2 <__cvt+0x8c>
 801158c:	2200      	movs	r2, #0
 801158e:	2300      	movs	r3, #0
 8011590:	4620      	mov	r0, r4
 8011592:	4629      	mov	r1, r5
 8011594:	f7ef fab8 	bl	8000b08 <__aeabi_dcmpeq>
 8011598:	b918      	cbnz	r0, 80115a2 <__cvt+0x8c>
 801159a:	f1c6 0601 	rsb	r6, r6, #1
 801159e:	f8ca 6000 	str.w	r6, [sl]
 80115a2:	f8da 3000 	ldr.w	r3, [sl]
 80115a6:	4499      	add	r9, r3
 80115a8:	2200      	movs	r2, #0
 80115aa:	2300      	movs	r3, #0
 80115ac:	4620      	mov	r0, r4
 80115ae:	4629      	mov	r1, r5
 80115b0:	f7ef faaa 	bl	8000b08 <__aeabi_dcmpeq>
 80115b4:	b108      	cbz	r0, 80115ba <__cvt+0xa4>
 80115b6:	f8cd 900c 	str.w	r9, [sp, #12]
 80115ba:	2230      	movs	r2, #48	; 0x30
 80115bc:	9b03      	ldr	r3, [sp, #12]
 80115be:	454b      	cmp	r3, r9
 80115c0:	d307      	bcc.n	80115d2 <__cvt+0xbc>
 80115c2:	9b03      	ldr	r3, [sp, #12]
 80115c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80115c6:	1bdb      	subs	r3, r3, r7
 80115c8:	4638      	mov	r0, r7
 80115ca:	6013      	str	r3, [r2, #0]
 80115cc:	b004      	add	sp, #16
 80115ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115d2:	1c59      	adds	r1, r3, #1
 80115d4:	9103      	str	r1, [sp, #12]
 80115d6:	701a      	strb	r2, [r3, #0]
 80115d8:	e7f0      	b.n	80115bc <__cvt+0xa6>

080115da <__exponent>:
 80115da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115dc:	4603      	mov	r3, r0
 80115de:	2900      	cmp	r1, #0
 80115e0:	bfb8      	it	lt
 80115e2:	4249      	neglt	r1, r1
 80115e4:	f803 2b02 	strb.w	r2, [r3], #2
 80115e8:	bfb4      	ite	lt
 80115ea:	222d      	movlt	r2, #45	; 0x2d
 80115ec:	222b      	movge	r2, #43	; 0x2b
 80115ee:	2909      	cmp	r1, #9
 80115f0:	7042      	strb	r2, [r0, #1]
 80115f2:	dd2a      	ble.n	801164a <__exponent+0x70>
 80115f4:	f10d 0207 	add.w	r2, sp, #7
 80115f8:	4617      	mov	r7, r2
 80115fa:	260a      	movs	r6, #10
 80115fc:	4694      	mov	ip, r2
 80115fe:	fb91 f5f6 	sdiv	r5, r1, r6
 8011602:	fb06 1415 	mls	r4, r6, r5, r1
 8011606:	3430      	adds	r4, #48	; 0x30
 8011608:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801160c:	460c      	mov	r4, r1
 801160e:	2c63      	cmp	r4, #99	; 0x63
 8011610:	f102 32ff 	add.w	r2, r2, #4294967295
 8011614:	4629      	mov	r1, r5
 8011616:	dcf1      	bgt.n	80115fc <__exponent+0x22>
 8011618:	3130      	adds	r1, #48	; 0x30
 801161a:	f1ac 0402 	sub.w	r4, ip, #2
 801161e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011622:	1c41      	adds	r1, r0, #1
 8011624:	4622      	mov	r2, r4
 8011626:	42ba      	cmp	r2, r7
 8011628:	d30a      	bcc.n	8011640 <__exponent+0x66>
 801162a:	f10d 0209 	add.w	r2, sp, #9
 801162e:	eba2 020c 	sub.w	r2, r2, ip
 8011632:	42bc      	cmp	r4, r7
 8011634:	bf88      	it	hi
 8011636:	2200      	movhi	r2, #0
 8011638:	4413      	add	r3, r2
 801163a:	1a18      	subs	r0, r3, r0
 801163c:	b003      	add	sp, #12
 801163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011640:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011644:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011648:	e7ed      	b.n	8011626 <__exponent+0x4c>
 801164a:	2330      	movs	r3, #48	; 0x30
 801164c:	3130      	adds	r1, #48	; 0x30
 801164e:	7083      	strb	r3, [r0, #2]
 8011650:	70c1      	strb	r1, [r0, #3]
 8011652:	1d03      	adds	r3, r0, #4
 8011654:	e7f1      	b.n	801163a <__exponent+0x60>
	...

08011658 <_printf_float>:
 8011658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801165c:	ed2d 8b02 	vpush	{d8}
 8011660:	b08d      	sub	sp, #52	; 0x34
 8011662:	460c      	mov	r4, r1
 8011664:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011668:	4616      	mov	r6, r2
 801166a:	461f      	mov	r7, r3
 801166c:	4605      	mov	r5, r0
 801166e:	f000 fcd5 	bl	801201c <_localeconv_r>
 8011672:	f8d0 a000 	ldr.w	sl, [r0]
 8011676:	4650      	mov	r0, sl
 8011678:	f7ee fe1a 	bl	80002b0 <strlen>
 801167c:	2300      	movs	r3, #0
 801167e:	930a      	str	r3, [sp, #40]	; 0x28
 8011680:	6823      	ldr	r3, [r4, #0]
 8011682:	9305      	str	r3, [sp, #20]
 8011684:	f8d8 3000 	ldr.w	r3, [r8]
 8011688:	f894 b018 	ldrb.w	fp, [r4, #24]
 801168c:	3307      	adds	r3, #7
 801168e:	f023 0307 	bic.w	r3, r3, #7
 8011692:	f103 0208 	add.w	r2, r3, #8
 8011696:	f8c8 2000 	str.w	r2, [r8]
 801169a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801169e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80116a2:	9307      	str	r3, [sp, #28]
 80116a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80116a8:	ee08 0a10 	vmov	s16, r0
 80116ac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80116b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80116b4:	4b9e      	ldr	r3, [pc, #632]	; (8011930 <_printf_float+0x2d8>)
 80116b6:	f04f 32ff 	mov.w	r2, #4294967295
 80116ba:	f7ef fa57 	bl	8000b6c <__aeabi_dcmpun>
 80116be:	bb88      	cbnz	r0, 8011724 <_printf_float+0xcc>
 80116c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80116c4:	4b9a      	ldr	r3, [pc, #616]	; (8011930 <_printf_float+0x2d8>)
 80116c6:	f04f 32ff 	mov.w	r2, #4294967295
 80116ca:	f7ef fa31 	bl	8000b30 <__aeabi_dcmple>
 80116ce:	bb48      	cbnz	r0, 8011724 <_printf_float+0xcc>
 80116d0:	2200      	movs	r2, #0
 80116d2:	2300      	movs	r3, #0
 80116d4:	4640      	mov	r0, r8
 80116d6:	4649      	mov	r1, r9
 80116d8:	f7ef fa20 	bl	8000b1c <__aeabi_dcmplt>
 80116dc:	b110      	cbz	r0, 80116e4 <_printf_float+0x8c>
 80116de:	232d      	movs	r3, #45	; 0x2d
 80116e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116e4:	4a93      	ldr	r2, [pc, #588]	; (8011934 <_printf_float+0x2dc>)
 80116e6:	4b94      	ldr	r3, [pc, #592]	; (8011938 <_printf_float+0x2e0>)
 80116e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80116ec:	bf94      	ite	ls
 80116ee:	4690      	movls	r8, r2
 80116f0:	4698      	movhi	r8, r3
 80116f2:	2303      	movs	r3, #3
 80116f4:	6123      	str	r3, [r4, #16]
 80116f6:	9b05      	ldr	r3, [sp, #20]
 80116f8:	f023 0304 	bic.w	r3, r3, #4
 80116fc:	6023      	str	r3, [r4, #0]
 80116fe:	f04f 0900 	mov.w	r9, #0
 8011702:	9700      	str	r7, [sp, #0]
 8011704:	4633      	mov	r3, r6
 8011706:	aa0b      	add	r2, sp, #44	; 0x2c
 8011708:	4621      	mov	r1, r4
 801170a:	4628      	mov	r0, r5
 801170c:	f000 f9da 	bl	8011ac4 <_printf_common>
 8011710:	3001      	adds	r0, #1
 8011712:	f040 8090 	bne.w	8011836 <_printf_float+0x1de>
 8011716:	f04f 30ff 	mov.w	r0, #4294967295
 801171a:	b00d      	add	sp, #52	; 0x34
 801171c:	ecbd 8b02 	vpop	{d8}
 8011720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011724:	4642      	mov	r2, r8
 8011726:	464b      	mov	r3, r9
 8011728:	4640      	mov	r0, r8
 801172a:	4649      	mov	r1, r9
 801172c:	f7ef fa1e 	bl	8000b6c <__aeabi_dcmpun>
 8011730:	b140      	cbz	r0, 8011744 <_printf_float+0xec>
 8011732:	464b      	mov	r3, r9
 8011734:	2b00      	cmp	r3, #0
 8011736:	bfbc      	itt	lt
 8011738:	232d      	movlt	r3, #45	; 0x2d
 801173a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801173e:	4a7f      	ldr	r2, [pc, #508]	; (801193c <_printf_float+0x2e4>)
 8011740:	4b7f      	ldr	r3, [pc, #508]	; (8011940 <_printf_float+0x2e8>)
 8011742:	e7d1      	b.n	80116e8 <_printf_float+0x90>
 8011744:	6863      	ldr	r3, [r4, #4]
 8011746:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801174a:	9206      	str	r2, [sp, #24]
 801174c:	1c5a      	adds	r2, r3, #1
 801174e:	d13f      	bne.n	80117d0 <_printf_float+0x178>
 8011750:	2306      	movs	r3, #6
 8011752:	6063      	str	r3, [r4, #4]
 8011754:	9b05      	ldr	r3, [sp, #20]
 8011756:	6861      	ldr	r1, [r4, #4]
 8011758:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801175c:	2300      	movs	r3, #0
 801175e:	9303      	str	r3, [sp, #12]
 8011760:	ab0a      	add	r3, sp, #40	; 0x28
 8011762:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011766:	ab09      	add	r3, sp, #36	; 0x24
 8011768:	ec49 8b10 	vmov	d0, r8, r9
 801176c:	9300      	str	r3, [sp, #0]
 801176e:	6022      	str	r2, [r4, #0]
 8011770:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011774:	4628      	mov	r0, r5
 8011776:	f7ff fece 	bl	8011516 <__cvt>
 801177a:	9b06      	ldr	r3, [sp, #24]
 801177c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801177e:	2b47      	cmp	r3, #71	; 0x47
 8011780:	4680      	mov	r8, r0
 8011782:	d108      	bne.n	8011796 <_printf_float+0x13e>
 8011784:	1cc8      	adds	r0, r1, #3
 8011786:	db02      	blt.n	801178e <_printf_float+0x136>
 8011788:	6863      	ldr	r3, [r4, #4]
 801178a:	4299      	cmp	r1, r3
 801178c:	dd41      	ble.n	8011812 <_printf_float+0x1ba>
 801178e:	f1ab 0302 	sub.w	r3, fp, #2
 8011792:	fa5f fb83 	uxtb.w	fp, r3
 8011796:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801179a:	d820      	bhi.n	80117de <_printf_float+0x186>
 801179c:	3901      	subs	r1, #1
 801179e:	465a      	mov	r2, fp
 80117a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80117a4:	9109      	str	r1, [sp, #36]	; 0x24
 80117a6:	f7ff ff18 	bl	80115da <__exponent>
 80117aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117ac:	1813      	adds	r3, r2, r0
 80117ae:	2a01      	cmp	r2, #1
 80117b0:	4681      	mov	r9, r0
 80117b2:	6123      	str	r3, [r4, #16]
 80117b4:	dc02      	bgt.n	80117bc <_printf_float+0x164>
 80117b6:	6822      	ldr	r2, [r4, #0]
 80117b8:	07d2      	lsls	r2, r2, #31
 80117ba:	d501      	bpl.n	80117c0 <_printf_float+0x168>
 80117bc:	3301      	adds	r3, #1
 80117be:	6123      	str	r3, [r4, #16]
 80117c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d09c      	beq.n	8011702 <_printf_float+0xaa>
 80117c8:	232d      	movs	r3, #45	; 0x2d
 80117ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117ce:	e798      	b.n	8011702 <_printf_float+0xaa>
 80117d0:	9a06      	ldr	r2, [sp, #24]
 80117d2:	2a47      	cmp	r2, #71	; 0x47
 80117d4:	d1be      	bne.n	8011754 <_printf_float+0xfc>
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d1bc      	bne.n	8011754 <_printf_float+0xfc>
 80117da:	2301      	movs	r3, #1
 80117dc:	e7b9      	b.n	8011752 <_printf_float+0xfa>
 80117de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80117e2:	d118      	bne.n	8011816 <_printf_float+0x1be>
 80117e4:	2900      	cmp	r1, #0
 80117e6:	6863      	ldr	r3, [r4, #4]
 80117e8:	dd0b      	ble.n	8011802 <_printf_float+0x1aa>
 80117ea:	6121      	str	r1, [r4, #16]
 80117ec:	b913      	cbnz	r3, 80117f4 <_printf_float+0x19c>
 80117ee:	6822      	ldr	r2, [r4, #0]
 80117f0:	07d0      	lsls	r0, r2, #31
 80117f2:	d502      	bpl.n	80117fa <_printf_float+0x1a2>
 80117f4:	3301      	adds	r3, #1
 80117f6:	440b      	add	r3, r1
 80117f8:	6123      	str	r3, [r4, #16]
 80117fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80117fc:	f04f 0900 	mov.w	r9, #0
 8011800:	e7de      	b.n	80117c0 <_printf_float+0x168>
 8011802:	b913      	cbnz	r3, 801180a <_printf_float+0x1b2>
 8011804:	6822      	ldr	r2, [r4, #0]
 8011806:	07d2      	lsls	r2, r2, #31
 8011808:	d501      	bpl.n	801180e <_printf_float+0x1b6>
 801180a:	3302      	adds	r3, #2
 801180c:	e7f4      	b.n	80117f8 <_printf_float+0x1a0>
 801180e:	2301      	movs	r3, #1
 8011810:	e7f2      	b.n	80117f8 <_printf_float+0x1a0>
 8011812:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011818:	4299      	cmp	r1, r3
 801181a:	db05      	blt.n	8011828 <_printf_float+0x1d0>
 801181c:	6823      	ldr	r3, [r4, #0]
 801181e:	6121      	str	r1, [r4, #16]
 8011820:	07d8      	lsls	r0, r3, #31
 8011822:	d5ea      	bpl.n	80117fa <_printf_float+0x1a2>
 8011824:	1c4b      	adds	r3, r1, #1
 8011826:	e7e7      	b.n	80117f8 <_printf_float+0x1a0>
 8011828:	2900      	cmp	r1, #0
 801182a:	bfd4      	ite	le
 801182c:	f1c1 0202 	rsble	r2, r1, #2
 8011830:	2201      	movgt	r2, #1
 8011832:	4413      	add	r3, r2
 8011834:	e7e0      	b.n	80117f8 <_printf_float+0x1a0>
 8011836:	6823      	ldr	r3, [r4, #0]
 8011838:	055a      	lsls	r2, r3, #21
 801183a:	d407      	bmi.n	801184c <_printf_float+0x1f4>
 801183c:	6923      	ldr	r3, [r4, #16]
 801183e:	4642      	mov	r2, r8
 8011840:	4631      	mov	r1, r6
 8011842:	4628      	mov	r0, r5
 8011844:	47b8      	blx	r7
 8011846:	3001      	adds	r0, #1
 8011848:	d12c      	bne.n	80118a4 <_printf_float+0x24c>
 801184a:	e764      	b.n	8011716 <_printf_float+0xbe>
 801184c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011850:	f240 80e0 	bls.w	8011a14 <_printf_float+0x3bc>
 8011854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011858:	2200      	movs	r2, #0
 801185a:	2300      	movs	r3, #0
 801185c:	f7ef f954 	bl	8000b08 <__aeabi_dcmpeq>
 8011860:	2800      	cmp	r0, #0
 8011862:	d034      	beq.n	80118ce <_printf_float+0x276>
 8011864:	4a37      	ldr	r2, [pc, #220]	; (8011944 <_printf_float+0x2ec>)
 8011866:	2301      	movs	r3, #1
 8011868:	4631      	mov	r1, r6
 801186a:	4628      	mov	r0, r5
 801186c:	47b8      	blx	r7
 801186e:	3001      	adds	r0, #1
 8011870:	f43f af51 	beq.w	8011716 <_printf_float+0xbe>
 8011874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011878:	429a      	cmp	r2, r3
 801187a:	db02      	blt.n	8011882 <_printf_float+0x22a>
 801187c:	6823      	ldr	r3, [r4, #0]
 801187e:	07d8      	lsls	r0, r3, #31
 8011880:	d510      	bpl.n	80118a4 <_printf_float+0x24c>
 8011882:	ee18 3a10 	vmov	r3, s16
 8011886:	4652      	mov	r2, sl
 8011888:	4631      	mov	r1, r6
 801188a:	4628      	mov	r0, r5
 801188c:	47b8      	blx	r7
 801188e:	3001      	adds	r0, #1
 8011890:	f43f af41 	beq.w	8011716 <_printf_float+0xbe>
 8011894:	f04f 0800 	mov.w	r8, #0
 8011898:	f104 091a 	add.w	r9, r4, #26
 801189c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801189e:	3b01      	subs	r3, #1
 80118a0:	4543      	cmp	r3, r8
 80118a2:	dc09      	bgt.n	80118b8 <_printf_float+0x260>
 80118a4:	6823      	ldr	r3, [r4, #0]
 80118a6:	079b      	lsls	r3, r3, #30
 80118a8:	f100 8107 	bmi.w	8011aba <_printf_float+0x462>
 80118ac:	68e0      	ldr	r0, [r4, #12]
 80118ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118b0:	4298      	cmp	r0, r3
 80118b2:	bfb8      	it	lt
 80118b4:	4618      	movlt	r0, r3
 80118b6:	e730      	b.n	801171a <_printf_float+0xc2>
 80118b8:	2301      	movs	r3, #1
 80118ba:	464a      	mov	r2, r9
 80118bc:	4631      	mov	r1, r6
 80118be:	4628      	mov	r0, r5
 80118c0:	47b8      	blx	r7
 80118c2:	3001      	adds	r0, #1
 80118c4:	f43f af27 	beq.w	8011716 <_printf_float+0xbe>
 80118c8:	f108 0801 	add.w	r8, r8, #1
 80118cc:	e7e6      	b.n	801189c <_printf_float+0x244>
 80118ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	dc39      	bgt.n	8011948 <_printf_float+0x2f0>
 80118d4:	4a1b      	ldr	r2, [pc, #108]	; (8011944 <_printf_float+0x2ec>)
 80118d6:	2301      	movs	r3, #1
 80118d8:	4631      	mov	r1, r6
 80118da:	4628      	mov	r0, r5
 80118dc:	47b8      	blx	r7
 80118de:	3001      	adds	r0, #1
 80118e0:	f43f af19 	beq.w	8011716 <_printf_float+0xbe>
 80118e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80118e8:	4313      	orrs	r3, r2
 80118ea:	d102      	bne.n	80118f2 <_printf_float+0x29a>
 80118ec:	6823      	ldr	r3, [r4, #0]
 80118ee:	07d9      	lsls	r1, r3, #31
 80118f0:	d5d8      	bpl.n	80118a4 <_printf_float+0x24c>
 80118f2:	ee18 3a10 	vmov	r3, s16
 80118f6:	4652      	mov	r2, sl
 80118f8:	4631      	mov	r1, r6
 80118fa:	4628      	mov	r0, r5
 80118fc:	47b8      	blx	r7
 80118fe:	3001      	adds	r0, #1
 8011900:	f43f af09 	beq.w	8011716 <_printf_float+0xbe>
 8011904:	f04f 0900 	mov.w	r9, #0
 8011908:	f104 0a1a 	add.w	sl, r4, #26
 801190c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801190e:	425b      	negs	r3, r3
 8011910:	454b      	cmp	r3, r9
 8011912:	dc01      	bgt.n	8011918 <_printf_float+0x2c0>
 8011914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011916:	e792      	b.n	801183e <_printf_float+0x1e6>
 8011918:	2301      	movs	r3, #1
 801191a:	4652      	mov	r2, sl
 801191c:	4631      	mov	r1, r6
 801191e:	4628      	mov	r0, r5
 8011920:	47b8      	blx	r7
 8011922:	3001      	adds	r0, #1
 8011924:	f43f aef7 	beq.w	8011716 <_printf_float+0xbe>
 8011928:	f109 0901 	add.w	r9, r9, #1
 801192c:	e7ee      	b.n	801190c <_printf_float+0x2b4>
 801192e:	bf00      	nop
 8011930:	7fefffff 	.word	0x7fefffff
 8011934:	08016410 	.word	0x08016410
 8011938:	08016414 	.word	0x08016414
 801193c:	08016418 	.word	0x08016418
 8011940:	0801641c 	.word	0x0801641c
 8011944:	08016420 	.word	0x08016420
 8011948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801194a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801194c:	429a      	cmp	r2, r3
 801194e:	bfa8      	it	ge
 8011950:	461a      	movge	r2, r3
 8011952:	2a00      	cmp	r2, #0
 8011954:	4691      	mov	r9, r2
 8011956:	dc37      	bgt.n	80119c8 <_printf_float+0x370>
 8011958:	f04f 0b00 	mov.w	fp, #0
 801195c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011960:	f104 021a 	add.w	r2, r4, #26
 8011964:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011966:	9305      	str	r3, [sp, #20]
 8011968:	eba3 0309 	sub.w	r3, r3, r9
 801196c:	455b      	cmp	r3, fp
 801196e:	dc33      	bgt.n	80119d8 <_printf_float+0x380>
 8011970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011974:	429a      	cmp	r2, r3
 8011976:	db3b      	blt.n	80119f0 <_printf_float+0x398>
 8011978:	6823      	ldr	r3, [r4, #0]
 801197a:	07da      	lsls	r2, r3, #31
 801197c:	d438      	bmi.n	80119f0 <_printf_float+0x398>
 801197e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011982:	eba2 0903 	sub.w	r9, r2, r3
 8011986:	9b05      	ldr	r3, [sp, #20]
 8011988:	1ad2      	subs	r2, r2, r3
 801198a:	4591      	cmp	r9, r2
 801198c:	bfa8      	it	ge
 801198e:	4691      	movge	r9, r2
 8011990:	f1b9 0f00 	cmp.w	r9, #0
 8011994:	dc35      	bgt.n	8011a02 <_printf_float+0x3aa>
 8011996:	f04f 0800 	mov.w	r8, #0
 801199a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801199e:	f104 0a1a 	add.w	sl, r4, #26
 80119a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119a6:	1a9b      	subs	r3, r3, r2
 80119a8:	eba3 0309 	sub.w	r3, r3, r9
 80119ac:	4543      	cmp	r3, r8
 80119ae:	f77f af79 	ble.w	80118a4 <_printf_float+0x24c>
 80119b2:	2301      	movs	r3, #1
 80119b4:	4652      	mov	r2, sl
 80119b6:	4631      	mov	r1, r6
 80119b8:	4628      	mov	r0, r5
 80119ba:	47b8      	blx	r7
 80119bc:	3001      	adds	r0, #1
 80119be:	f43f aeaa 	beq.w	8011716 <_printf_float+0xbe>
 80119c2:	f108 0801 	add.w	r8, r8, #1
 80119c6:	e7ec      	b.n	80119a2 <_printf_float+0x34a>
 80119c8:	4613      	mov	r3, r2
 80119ca:	4631      	mov	r1, r6
 80119cc:	4642      	mov	r2, r8
 80119ce:	4628      	mov	r0, r5
 80119d0:	47b8      	blx	r7
 80119d2:	3001      	adds	r0, #1
 80119d4:	d1c0      	bne.n	8011958 <_printf_float+0x300>
 80119d6:	e69e      	b.n	8011716 <_printf_float+0xbe>
 80119d8:	2301      	movs	r3, #1
 80119da:	4631      	mov	r1, r6
 80119dc:	4628      	mov	r0, r5
 80119de:	9205      	str	r2, [sp, #20]
 80119e0:	47b8      	blx	r7
 80119e2:	3001      	adds	r0, #1
 80119e4:	f43f ae97 	beq.w	8011716 <_printf_float+0xbe>
 80119e8:	9a05      	ldr	r2, [sp, #20]
 80119ea:	f10b 0b01 	add.w	fp, fp, #1
 80119ee:	e7b9      	b.n	8011964 <_printf_float+0x30c>
 80119f0:	ee18 3a10 	vmov	r3, s16
 80119f4:	4652      	mov	r2, sl
 80119f6:	4631      	mov	r1, r6
 80119f8:	4628      	mov	r0, r5
 80119fa:	47b8      	blx	r7
 80119fc:	3001      	adds	r0, #1
 80119fe:	d1be      	bne.n	801197e <_printf_float+0x326>
 8011a00:	e689      	b.n	8011716 <_printf_float+0xbe>
 8011a02:	9a05      	ldr	r2, [sp, #20]
 8011a04:	464b      	mov	r3, r9
 8011a06:	4442      	add	r2, r8
 8011a08:	4631      	mov	r1, r6
 8011a0a:	4628      	mov	r0, r5
 8011a0c:	47b8      	blx	r7
 8011a0e:	3001      	adds	r0, #1
 8011a10:	d1c1      	bne.n	8011996 <_printf_float+0x33e>
 8011a12:	e680      	b.n	8011716 <_printf_float+0xbe>
 8011a14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a16:	2a01      	cmp	r2, #1
 8011a18:	dc01      	bgt.n	8011a1e <_printf_float+0x3c6>
 8011a1a:	07db      	lsls	r3, r3, #31
 8011a1c:	d53a      	bpl.n	8011a94 <_printf_float+0x43c>
 8011a1e:	2301      	movs	r3, #1
 8011a20:	4642      	mov	r2, r8
 8011a22:	4631      	mov	r1, r6
 8011a24:	4628      	mov	r0, r5
 8011a26:	47b8      	blx	r7
 8011a28:	3001      	adds	r0, #1
 8011a2a:	f43f ae74 	beq.w	8011716 <_printf_float+0xbe>
 8011a2e:	ee18 3a10 	vmov	r3, s16
 8011a32:	4652      	mov	r2, sl
 8011a34:	4631      	mov	r1, r6
 8011a36:	4628      	mov	r0, r5
 8011a38:	47b8      	blx	r7
 8011a3a:	3001      	adds	r0, #1
 8011a3c:	f43f ae6b 	beq.w	8011716 <_printf_float+0xbe>
 8011a40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011a44:	2200      	movs	r2, #0
 8011a46:	2300      	movs	r3, #0
 8011a48:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011a4c:	f7ef f85c 	bl	8000b08 <__aeabi_dcmpeq>
 8011a50:	b9d8      	cbnz	r0, 8011a8a <_printf_float+0x432>
 8011a52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011a56:	f108 0201 	add.w	r2, r8, #1
 8011a5a:	4631      	mov	r1, r6
 8011a5c:	4628      	mov	r0, r5
 8011a5e:	47b8      	blx	r7
 8011a60:	3001      	adds	r0, #1
 8011a62:	d10e      	bne.n	8011a82 <_printf_float+0x42a>
 8011a64:	e657      	b.n	8011716 <_printf_float+0xbe>
 8011a66:	2301      	movs	r3, #1
 8011a68:	4652      	mov	r2, sl
 8011a6a:	4631      	mov	r1, r6
 8011a6c:	4628      	mov	r0, r5
 8011a6e:	47b8      	blx	r7
 8011a70:	3001      	adds	r0, #1
 8011a72:	f43f ae50 	beq.w	8011716 <_printf_float+0xbe>
 8011a76:	f108 0801 	add.w	r8, r8, #1
 8011a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a7c:	3b01      	subs	r3, #1
 8011a7e:	4543      	cmp	r3, r8
 8011a80:	dcf1      	bgt.n	8011a66 <_printf_float+0x40e>
 8011a82:	464b      	mov	r3, r9
 8011a84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011a88:	e6da      	b.n	8011840 <_printf_float+0x1e8>
 8011a8a:	f04f 0800 	mov.w	r8, #0
 8011a8e:	f104 0a1a 	add.w	sl, r4, #26
 8011a92:	e7f2      	b.n	8011a7a <_printf_float+0x422>
 8011a94:	2301      	movs	r3, #1
 8011a96:	4642      	mov	r2, r8
 8011a98:	e7df      	b.n	8011a5a <_printf_float+0x402>
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	464a      	mov	r2, r9
 8011a9e:	4631      	mov	r1, r6
 8011aa0:	4628      	mov	r0, r5
 8011aa2:	47b8      	blx	r7
 8011aa4:	3001      	adds	r0, #1
 8011aa6:	f43f ae36 	beq.w	8011716 <_printf_float+0xbe>
 8011aaa:	f108 0801 	add.w	r8, r8, #1
 8011aae:	68e3      	ldr	r3, [r4, #12]
 8011ab0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ab2:	1a5b      	subs	r3, r3, r1
 8011ab4:	4543      	cmp	r3, r8
 8011ab6:	dcf0      	bgt.n	8011a9a <_printf_float+0x442>
 8011ab8:	e6f8      	b.n	80118ac <_printf_float+0x254>
 8011aba:	f04f 0800 	mov.w	r8, #0
 8011abe:	f104 0919 	add.w	r9, r4, #25
 8011ac2:	e7f4      	b.n	8011aae <_printf_float+0x456>

08011ac4 <_printf_common>:
 8011ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ac8:	4616      	mov	r6, r2
 8011aca:	4699      	mov	r9, r3
 8011acc:	688a      	ldr	r2, [r1, #8]
 8011ace:	690b      	ldr	r3, [r1, #16]
 8011ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ad4:	4293      	cmp	r3, r2
 8011ad6:	bfb8      	it	lt
 8011ad8:	4613      	movlt	r3, r2
 8011ada:	6033      	str	r3, [r6, #0]
 8011adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ae0:	4607      	mov	r7, r0
 8011ae2:	460c      	mov	r4, r1
 8011ae4:	b10a      	cbz	r2, 8011aea <_printf_common+0x26>
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	6033      	str	r3, [r6, #0]
 8011aea:	6823      	ldr	r3, [r4, #0]
 8011aec:	0699      	lsls	r1, r3, #26
 8011aee:	bf42      	ittt	mi
 8011af0:	6833      	ldrmi	r3, [r6, #0]
 8011af2:	3302      	addmi	r3, #2
 8011af4:	6033      	strmi	r3, [r6, #0]
 8011af6:	6825      	ldr	r5, [r4, #0]
 8011af8:	f015 0506 	ands.w	r5, r5, #6
 8011afc:	d106      	bne.n	8011b0c <_printf_common+0x48>
 8011afe:	f104 0a19 	add.w	sl, r4, #25
 8011b02:	68e3      	ldr	r3, [r4, #12]
 8011b04:	6832      	ldr	r2, [r6, #0]
 8011b06:	1a9b      	subs	r3, r3, r2
 8011b08:	42ab      	cmp	r3, r5
 8011b0a:	dc26      	bgt.n	8011b5a <_printf_common+0x96>
 8011b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011b10:	1e13      	subs	r3, r2, #0
 8011b12:	6822      	ldr	r2, [r4, #0]
 8011b14:	bf18      	it	ne
 8011b16:	2301      	movne	r3, #1
 8011b18:	0692      	lsls	r2, r2, #26
 8011b1a:	d42b      	bmi.n	8011b74 <_printf_common+0xb0>
 8011b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011b20:	4649      	mov	r1, r9
 8011b22:	4638      	mov	r0, r7
 8011b24:	47c0      	blx	r8
 8011b26:	3001      	adds	r0, #1
 8011b28:	d01e      	beq.n	8011b68 <_printf_common+0xa4>
 8011b2a:	6823      	ldr	r3, [r4, #0]
 8011b2c:	6922      	ldr	r2, [r4, #16]
 8011b2e:	f003 0306 	and.w	r3, r3, #6
 8011b32:	2b04      	cmp	r3, #4
 8011b34:	bf02      	ittt	eq
 8011b36:	68e5      	ldreq	r5, [r4, #12]
 8011b38:	6833      	ldreq	r3, [r6, #0]
 8011b3a:	1aed      	subeq	r5, r5, r3
 8011b3c:	68a3      	ldr	r3, [r4, #8]
 8011b3e:	bf0c      	ite	eq
 8011b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b44:	2500      	movne	r5, #0
 8011b46:	4293      	cmp	r3, r2
 8011b48:	bfc4      	itt	gt
 8011b4a:	1a9b      	subgt	r3, r3, r2
 8011b4c:	18ed      	addgt	r5, r5, r3
 8011b4e:	2600      	movs	r6, #0
 8011b50:	341a      	adds	r4, #26
 8011b52:	42b5      	cmp	r5, r6
 8011b54:	d11a      	bne.n	8011b8c <_printf_common+0xc8>
 8011b56:	2000      	movs	r0, #0
 8011b58:	e008      	b.n	8011b6c <_printf_common+0xa8>
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	4652      	mov	r2, sl
 8011b5e:	4649      	mov	r1, r9
 8011b60:	4638      	mov	r0, r7
 8011b62:	47c0      	blx	r8
 8011b64:	3001      	adds	r0, #1
 8011b66:	d103      	bne.n	8011b70 <_printf_common+0xac>
 8011b68:	f04f 30ff 	mov.w	r0, #4294967295
 8011b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b70:	3501      	adds	r5, #1
 8011b72:	e7c6      	b.n	8011b02 <_printf_common+0x3e>
 8011b74:	18e1      	adds	r1, r4, r3
 8011b76:	1c5a      	adds	r2, r3, #1
 8011b78:	2030      	movs	r0, #48	; 0x30
 8011b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b7e:	4422      	add	r2, r4
 8011b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b88:	3302      	adds	r3, #2
 8011b8a:	e7c7      	b.n	8011b1c <_printf_common+0x58>
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	4622      	mov	r2, r4
 8011b90:	4649      	mov	r1, r9
 8011b92:	4638      	mov	r0, r7
 8011b94:	47c0      	blx	r8
 8011b96:	3001      	adds	r0, #1
 8011b98:	d0e6      	beq.n	8011b68 <_printf_common+0xa4>
 8011b9a:	3601      	adds	r6, #1
 8011b9c:	e7d9      	b.n	8011b52 <_printf_common+0x8e>
	...

08011ba0 <_printf_i>:
 8011ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ba4:	7e0f      	ldrb	r7, [r1, #24]
 8011ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011ba8:	2f78      	cmp	r7, #120	; 0x78
 8011baa:	4691      	mov	r9, r2
 8011bac:	4680      	mov	r8, r0
 8011bae:	460c      	mov	r4, r1
 8011bb0:	469a      	mov	sl, r3
 8011bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011bb6:	d807      	bhi.n	8011bc8 <_printf_i+0x28>
 8011bb8:	2f62      	cmp	r7, #98	; 0x62
 8011bba:	d80a      	bhi.n	8011bd2 <_printf_i+0x32>
 8011bbc:	2f00      	cmp	r7, #0
 8011bbe:	f000 80d4 	beq.w	8011d6a <_printf_i+0x1ca>
 8011bc2:	2f58      	cmp	r7, #88	; 0x58
 8011bc4:	f000 80c0 	beq.w	8011d48 <_printf_i+0x1a8>
 8011bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011bd0:	e03a      	b.n	8011c48 <_printf_i+0xa8>
 8011bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011bd6:	2b15      	cmp	r3, #21
 8011bd8:	d8f6      	bhi.n	8011bc8 <_printf_i+0x28>
 8011bda:	a101      	add	r1, pc, #4	; (adr r1, 8011be0 <_printf_i+0x40>)
 8011bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011be0:	08011c39 	.word	0x08011c39
 8011be4:	08011c4d 	.word	0x08011c4d
 8011be8:	08011bc9 	.word	0x08011bc9
 8011bec:	08011bc9 	.word	0x08011bc9
 8011bf0:	08011bc9 	.word	0x08011bc9
 8011bf4:	08011bc9 	.word	0x08011bc9
 8011bf8:	08011c4d 	.word	0x08011c4d
 8011bfc:	08011bc9 	.word	0x08011bc9
 8011c00:	08011bc9 	.word	0x08011bc9
 8011c04:	08011bc9 	.word	0x08011bc9
 8011c08:	08011bc9 	.word	0x08011bc9
 8011c0c:	08011d51 	.word	0x08011d51
 8011c10:	08011c79 	.word	0x08011c79
 8011c14:	08011d0b 	.word	0x08011d0b
 8011c18:	08011bc9 	.word	0x08011bc9
 8011c1c:	08011bc9 	.word	0x08011bc9
 8011c20:	08011d73 	.word	0x08011d73
 8011c24:	08011bc9 	.word	0x08011bc9
 8011c28:	08011c79 	.word	0x08011c79
 8011c2c:	08011bc9 	.word	0x08011bc9
 8011c30:	08011bc9 	.word	0x08011bc9
 8011c34:	08011d13 	.word	0x08011d13
 8011c38:	682b      	ldr	r3, [r5, #0]
 8011c3a:	1d1a      	adds	r2, r3, #4
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	602a      	str	r2, [r5, #0]
 8011c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c48:	2301      	movs	r3, #1
 8011c4a:	e09f      	b.n	8011d8c <_printf_i+0x1ec>
 8011c4c:	6820      	ldr	r0, [r4, #0]
 8011c4e:	682b      	ldr	r3, [r5, #0]
 8011c50:	0607      	lsls	r7, r0, #24
 8011c52:	f103 0104 	add.w	r1, r3, #4
 8011c56:	6029      	str	r1, [r5, #0]
 8011c58:	d501      	bpl.n	8011c5e <_printf_i+0xbe>
 8011c5a:	681e      	ldr	r6, [r3, #0]
 8011c5c:	e003      	b.n	8011c66 <_printf_i+0xc6>
 8011c5e:	0646      	lsls	r6, r0, #25
 8011c60:	d5fb      	bpl.n	8011c5a <_printf_i+0xba>
 8011c62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011c66:	2e00      	cmp	r6, #0
 8011c68:	da03      	bge.n	8011c72 <_printf_i+0xd2>
 8011c6a:	232d      	movs	r3, #45	; 0x2d
 8011c6c:	4276      	negs	r6, r6
 8011c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c72:	485a      	ldr	r0, [pc, #360]	; (8011ddc <_printf_i+0x23c>)
 8011c74:	230a      	movs	r3, #10
 8011c76:	e012      	b.n	8011c9e <_printf_i+0xfe>
 8011c78:	682b      	ldr	r3, [r5, #0]
 8011c7a:	6820      	ldr	r0, [r4, #0]
 8011c7c:	1d19      	adds	r1, r3, #4
 8011c7e:	6029      	str	r1, [r5, #0]
 8011c80:	0605      	lsls	r5, r0, #24
 8011c82:	d501      	bpl.n	8011c88 <_printf_i+0xe8>
 8011c84:	681e      	ldr	r6, [r3, #0]
 8011c86:	e002      	b.n	8011c8e <_printf_i+0xee>
 8011c88:	0641      	lsls	r1, r0, #25
 8011c8a:	d5fb      	bpl.n	8011c84 <_printf_i+0xe4>
 8011c8c:	881e      	ldrh	r6, [r3, #0]
 8011c8e:	4853      	ldr	r0, [pc, #332]	; (8011ddc <_printf_i+0x23c>)
 8011c90:	2f6f      	cmp	r7, #111	; 0x6f
 8011c92:	bf0c      	ite	eq
 8011c94:	2308      	moveq	r3, #8
 8011c96:	230a      	movne	r3, #10
 8011c98:	2100      	movs	r1, #0
 8011c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c9e:	6865      	ldr	r5, [r4, #4]
 8011ca0:	60a5      	str	r5, [r4, #8]
 8011ca2:	2d00      	cmp	r5, #0
 8011ca4:	bfa2      	ittt	ge
 8011ca6:	6821      	ldrge	r1, [r4, #0]
 8011ca8:	f021 0104 	bicge.w	r1, r1, #4
 8011cac:	6021      	strge	r1, [r4, #0]
 8011cae:	b90e      	cbnz	r6, 8011cb4 <_printf_i+0x114>
 8011cb0:	2d00      	cmp	r5, #0
 8011cb2:	d04b      	beq.n	8011d4c <_printf_i+0x1ac>
 8011cb4:	4615      	mov	r5, r2
 8011cb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8011cba:	fb03 6711 	mls	r7, r3, r1, r6
 8011cbe:	5dc7      	ldrb	r7, [r0, r7]
 8011cc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011cc4:	4637      	mov	r7, r6
 8011cc6:	42bb      	cmp	r3, r7
 8011cc8:	460e      	mov	r6, r1
 8011cca:	d9f4      	bls.n	8011cb6 <_printf_i+0x116>
 8011ccc:	2b08      	cmp	r3, #8
 8011cce:	d10b      	bne.n	8011ce8 <_printf_i+0x148>
 8011cd0:	6823      	ldr	r3, [r4, #0]
 8011cd2:	07de      	lsls	r6, r3, #31
 8011cd4:	d508      	bpl.n	8011ce8 <_printf_i+0x148>
 8011cd6:	6923      	ldr	r3, [r4, #16]
 8011cd8:	6861      	ldr	r1, [r4, #4]
 8011cda:	4299      	cmp	r1, r3
 8011cdc:	bfde      	ittt	le
 8011cde:	2330      	movle	r3, #48	; 0x30
 8011ce0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011ce4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011ce8:	1b52      	subs	r2, r2, r5
 8011cea:	6122      	str	r2, [r4, #16]
 8011cec:	f8cd a000 	str.w	sl, [sp]
 8011cf0:	464b      	mov	r3, r9
 8011cf2:	aa03      	add	r2, sp, #12
 8011cf4:	4621      	mov	r1, r4
 8011cf6:	4640      	mov	r0, r8
 8011cf8:	f7ff fee4 	bl	8011ac4 <_printf_common>
 8011cfc:	3001      	adds	r0, #1
 8011cfe:	d14a      	bne.n	8011d96 <_printf_i+0x1f6>
 8011d00:	f04f 30ff 	mov.w	r0, #4294967295
 8011d04:	b004      	add	sp, #16
 8011d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d0a:	6823      	ldr	r3, [r4, #0]
 8011d0c:	f043 0320 	orr.w	r3, r3, #32
 8011d10:	6023      	str	r3, [r4, #0]
 8011d12:	4833      	ldr	r0, [pc, #204]	; (8011de0 <_printf_i+0x240>)
 8011d14:	2778      	movs	r7, #120	; 0x78
 8011d16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011d1a:	6823      	ldr	r3, [r4, #0]
 8011d1c:	6829      	ldr	r1, [r5, #0]
 8011d1e:	061f      	lsls	r7, r3, #24
 8011d20:	f851 6b04 	ldr.w	r6, [r1], #4
 8011d24:	d402      	bmi.n	8011d2c <_printf_i+0x18c>
 8011d26:	065f      	lsls	r7, r3, #25
 8011d28:	bf48      	it	mi
 8011d2a:	b2b6      	uxthmi	r6, r6
 8011d2c:	07df      	lsls	r7, r3, #31
 8011d2e:	bf48      	it	mi
 8011d30:	f043 0320 	orrmi.w	r3, r3, #32
 8011d34:	6029      	str	r1, [r5, #0]
 8011d36:	bf48      	it	mi
 8011d38:	6023      	strmi	r3, [r4, #0]
 8011d3a:	b91e      	cbnz	r6, 8011d44 <_printf_i+0x1a4>
 8011d3c:	6823      	ldr	r3, [r4, #0]
 8011d3e:	f023 0320 	bic.w	r3, r3, #32
 8011d42:	6023      	str	r3, [r4, #0]
 8011d44:	2310      	movs	r3, #16
 8011d46:	e7a7      	b.n	8011c98 <_printf_i+0xf8>
 8011d48:	4824      	ldr	r0, [pc, #144]	; (8011ddc <_printf_i+0x23c>)
 8011d4a:	e7e4      	b.n	8011d16 <_printf_i+0x176>
 8011d4c:	4615      	mov	r5, r2
 8011d4e:	e7bd      	b.n	8011ccc <_printf_i+0x12c>
 8011d50:	682b      	ldr	r3, [r5, #0]
 8011d52:	6826      	ldr	r6, [r4, #0]
 8011d54:	6961      	ldr	r1, [r4, #20]
 8011d56:	1d18      	adds	r0, r3, #4
 8011d58:	6028      	str	r0, [r5, #0]
 8011d5a:	0635      	lsls	r5, r6, #24
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	d501      	bpl.n	8011d64 <_printf_i+0x1c4>
 8011d60:	6019      	str	r1, [r3, #0]
 8011d62:	e002      	b.n	8011d6a <_printf_i+0x1ca>
 8011d64:	0670      	lsls	r0, r6, #25
 8011d66:	d5fb      	bpl.n	8011d60 <_printf_i+0x1c0>
 8011d68:	8019      	strh	r1, [r3, #0]
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	6123      	str	r3, [r4, #16]
 8011d6e:	4615      	mov	r5, r2
 8011d70:	e7bc      	b.n	8011cec <_printf_i+0x14c>
 8011d72:	682b      	ldr	r3, [r5, #0]
 8011d74:	1d1a      	adds	r2, r3, #4
 8011d76:	602a      	str	r2, [r5, #0]
 8011d78:	681d      	ldr	r5, [r3, #0]
 8011d7a:	6862      	ldr	r2, [r4, #4]
 8011d7c:	2100      	movs	r1, #0
 8011d7e:	4628      	mov	r0, r5
 8011d80:	f7ee fa46 	bl	8000210 <memchr>
 8011d84:	b108      	cbz	r0, 8011d8a <_printf_i+0x1ea>
 8011d86:	1b40      	subs	r0, r0, r5
 8011d88:	6060      	str	r0, [r4, #4]
 8011d8a:	6863      	ldr	r3, [r4, #4]
 8011d8c:	6123      	str	r3, [r4, #16]
 8011d8e:	2300      	movs	r3, #0
 8011d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d94:	e7aa      	b.n	8011cec <_printf_i+0x14c>
 8011d96:	6923      	ldr	r3, [r4, #16]
 8011d98:	462a      	mov	r2, r5
 8011d9a:	4649      	mov	r1, r9
 8011d9c:	4640      	mov	r0, r8
 8011d9e:	47d0      	blx	sl
 8011da0:	3001      	adds	r0, #1
 8011da2:	d0ad      	beq.n	8011d00 <_printf_i+0x160>
 8011da4:	6823      	ldr	r3, [r4, #0]
 8011da6:	079b      	lsls	r3, r3, #30
 8011da8:	d413      	bmi.n	8011dd2 <_printf_i+0x232>
 8011daa:	68e0      	ldr	r0, [r4, #12]
 8011dac:	9b03      	ldr	r3, [sp, #12]
 8011dae:	4298      	cmp	r0, r3
 8011db0:	bfb8      	it	lt
 8011db2:	4618      	movlt	r0, r3
 8011db4:	e7a6      	b.n	8011d04 <_printf_i+0x164>
 8011db6:	2301      	movs	r3, #1
 8011db8:	4632      	mov	r2, r6
 8011dba:	4649      	mov	r1, r9
 8011dbc:	4640      	mov	r0, r8
 8011dbe:	47d0      	blx	sl
 8011dc0:	3001      	adds	r0, #1
 8011dc2:	d09d      	beq.n	8011d00 <_printf_i+0x160>
 8011dc4:	3501      	adds	r5, #1
 8011dc6:	68e3      	ldr	r3, [r4, #12]
 8011dc8:	9903      	ldr	r1, [sp, #12]
 8011dca:	1a5b      	subs	r3, r3, r1
 8011dcc:	42ab      	cmp	r3, r5
 8011dce:	dcf2      	bgt.n	8011db6 <_printf_i+0x216>
 8011dd0:	e7eb      	b.n	8011daa <_printf_i+0x20a>
 8011dd2:	2500      	movs	r5, #0
 8011dd4:	f104 0619 	add.w	r6, r4, #25
 8011dd8:	e7f5      	b.n	8011dc6 <_printf_i+0x226>
 8011dda:	bf00      	nop
 8011ddc:	08016422 	.word	0x08016422
 8011de0:	08016433 	.word	0x08016433

08011de4 <std>:
 8011de4:	2300      	movs	r3, #0
 8011de6:	b510      	push	{r4, lr}
 8011de8:	4604      	mov	r4, r0
 8011dea:	e9c0 3300 	strd	r3, r3, [r0]
 8011dee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011df2:	6083      	str	r3, [r0, #8]
 8011df4:	8181      	strh	r1, [r0, #12]
 8011df6:	6643      	str	r3, [r0, #100]	; 0x64
 8011df8:	81c2      	strh	r2, [r0, #14]
 8011dfa:	6183      	str	r3, [r0, #24]
 8011dfc:	4619      	mov	r1, r3
 8011dfe:	2208      	movs	r2, #8
 8011e00:	305c      	adds	r0, #92	; 0x5c
 8011e02:	f000 f902 	bl	801200a <memset>
 8011e06:	4b05      	ldr	r3, [pc, #20]	; (8011e1c <std+0x38>)
 8011e08:	6263      	str	r3, [r4, #36]	; 0x24
 8011e0a:	4b05      	ldr	r3, [pc, #20]	; (8011e20 <std+0x3c>)
 8011e0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011e0e:	4b05      	ldr	r3, [pc, #20]	; (8011e24 <std+0x40>)
 8011e10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011e12:	4b05      	ldr	r3, [pc, #20]	; (8011e28 <std+0x44>)
 8011e14:	6224      	str	r4, [r4, #32]
 8011e16:	6323      	str	r3, [r4, #48]	; 0x30
 8011e18:	bd10      	pop	{r4, pc}
 8011e1a:	bf00      	nop
 8011e1c:	08011f85 	.word	0x08011f85
 8011e20:	08011fa7 	.word	0x08011fa7
 8011e24:	08011fdf 	.word	0x08011fdf
 8011e28:	08012003 	.word	0x08012003

08011e2c <stdio_exit_handler>:
 8011e2c:	4a02      	ldr	r2, [pc, #8]	; (8011e38 <stdio_exit_handler+0xc>)
 8011e2e:	4903      	ldr	r1, [pc, #12]	; (8011e3c <stdio_exit_handler+0x10>)
 8011e30:	4803      	ldr	r0, [pc, #12]	; (8011e40 <stdio_exit_handler+0x14>)
 8011e32:	f000 b869 	b.w	8011f08 <_fwalk_sglue>
 8011e36:	bf00      	nop
 8011e38:	2000003c 	.word	0x2000003c
 8011e3c:	08013b79 	.word	0x08013b79
 8011e40:	20000048 	.word	0x20000048

08011e44 <cleanup_stdio>:
 8011e44:	6841      	ldr	r1, [r0, #4]
 8011e46:	4b0c      	ldr	r3, [pc, #48]	; (8011e78 <cleanup_stdio+0x34>)
 8011e48:	4299      	cmp	r1, r3
 8011e4a:	b510      	push	{r4, lr}
 8011e4c:	4604      	mov	r4, r0
 8011e4e:	d001      	beq.n	8011e54 <cleanup_stdio+0x10>
 8011e50:	f001 fe92 	bl	8013b78 <_fflush_r>
 8011e54:	68a1      	ldr	r1, [r4, #8]
 8011e56:	4b09      	ldr	r3, [pc, #36]	; (8011e7c <cleanup_stdio+0x38>)
 8011e58:	4299      	cmp	r1, r3
 8011e5a:	d002      	beq.n	8011e62 <cleanup_stdio+0x1e>
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	f001 fe8b 	bl	8013b78 <_fflush_r>
 8011e62:	68e1      	ldr	r1, [r4, #12]
 8011e64:	4b06      	ldr	r3, [pc, #24]	; (8011e80 <cleanup_stdio+0x3c>)
 8011e66:	4299      	cmp	r1, r3
 8011e68:	d004      	beq.n	8011e74 <cleanup_stdio+0x30>
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e70:	f001 be82 	b.w	8013b78 <_fflush_r>
 8011e74:	bd10      	pop	{r4, pc}
 8011e76:	bf00      	nop
 8011e78:	200077e8 	.word	0x200077e8
 8011e7c:	20007850 	.word	0x20007850
 8011e80:	200078b8 	.word	0x200078b8

08011e84 <global_stdio_init.part.0>:
 8011e84:	b510      	push	{r4, lr}
 8011e86:	4b0b      	ldr	r3, [pc, #44]	; (8011eb4 <global_stdio_init.part.0+0x30>)
 8011e88:	4c0b      	ldr	r4, [pc, #44]	; (8011eb8 <global_stdio_init.part.0+0x34>)
 8011e8a:	4a0c      	ldr	r2, [pc, #48]	; (8011ebc <global_stdio_init.part.0+0x38>)
 8011e8c:	601a      	str	r2, [r3, #0]
 8011e8e:	4620      	mov	r0, r4
 8011e90:	2200      	movs	r2, #0
 8011e92:	2104      	movs	r1, #4
 8011e94:	f7ff ffa6 	bl	8011de4 <std>
 8011e98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011e9c:	2201      	movs	r2, #1
 8011e9e:	2109      	movs	r1, #9
 8011ea0:	f7ff ffa0 	bl	8011de4 <std>
 8011ea4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011ea8:	2202      	movs	r2, #2
 8011eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011eae:	2112      	movs	r1, #18
 8011eb0:	f7ff bf98 	b.w	8011de4 <std>
 8011eb4:	20007920 	.word	0x20007920
 8011eb8:	200077e8 	.word	0x200077e8
 8011ebc:	08011e2d 	.word	0x08011e2d

08011ec0 <__sfp_lock_acquire>:
 8011ec0:	4801      	ldr	r0, [pc, #4]	; (8011ec8 <__sfp_lock_acquire+0x8>)
 8011ec2:	f000 b975 	b.w	80121b0 <__retarget_lock_acquire_recursive>
 8011ec6:	bf00      	nop
 8011ec8:	20007929 	.word	0x20007929

08011ecc <__sfp_lock_release>:
 8011ecc:	4801      	ldr	r0, [pc, #4]	; (8011ed4 <__sfp_lock_release+0x8>)
 8011ece:	f000 b970 	b.w	80121b2 <__retarget_lock_release_recursive>
 8011ed2:	bf00      	nop
 8011ed4:	20007929 	.word	0x20007929

08011ed8 <__sinit>:
 8011ed8:	b510      	push	{r4, lr}
 8011eda:	4604      	mov	r4, r0
 8011edc:	f7ff fff0 	bl	8011ec0 <__sfp_lock_acquire>
 8011ee0:	6a23      	ldr	r3, [r4, #32]
 8011ee2:	b11b      	cbz	r3, 8011eec <__sinit+0x14>
 8011ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ee8:	f7ff bff0 	b.w	8011ecc <__sfp_lock_release>
 8011eec:	4b04      	ldr	r3, [pc, #16]	; (8011f00 <__sinit+0x28>)
 8011eee:	6223      	str	r3, [r4, #32]
 8011ef0:	4b04      	ldr	r3, [pc, #16]	; (8011f04 <__sinit+0x2c>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d1f5      	bne.n	8011ee4 <__sinit+0xc>
 8011ef8:	f7ff ffc4 	bl	8011e84 <global_stdio_init.part.0>
 8011efc:	e7f2      	b.n	8011ee4 <__sinit+0xc>
 8011efe:	bf00      	nop
 8011f00:	08011e45 	.word	0x08011e45
 8011f04:	20007920 	.word	0x20007920

08011f08 <_fwalk_sglue>:
 8011f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f0c:	4607      	mov	r7, r0
 8011f0e:	4688      	mov	r8, r1
 8011f10:	4614      	mov	r4, r2
 8011f12:	2600      	movs	r6, #0
 8011f14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011f18:	f1b9 0901 	subs.w	r9, r9, #1
 8011f1c:	d505      	bpl.n	8011f2a <_fwalk_sglue+0x22>
 8011f1e:	6824      	ldr	r4, [r4, #0]
 8011f20:	2c00      	cmp	r4, #0
 8011f22:	d1f7      	bne.n	8011f14 <_fwalk_sglue+0xc>
 8011f24:	4630      	mov	r0, r6
 8011f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f2a:	89ab      	ldrh	r3, [r5, #12]
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d907      	bls.n	8011f40 <_fwalk_sglue+0x38>
 8011f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f34:	3301      	adds	r3, #1
 8011f36:	d003      	beq.n	8011f40 <_fwalk_sglue+0x38>
 8011f38:	4629      	mov	r1, r5
 8011f3a:	4638      	mov	r0, r7
 8011f3c:	47c0      	blx	r8
 8011f3e:	4306      	orrs	r6, r0
 8011f40:	3568      	adds	r5, #104	; 0x68
 8011f42:	e7e9      	b.n	8011f18 <_fwalk_sglue+0x10>

08011f44 <siprintf>:
 8011f44:	b40e      	push	{r1, r2, r3}
 8011f46:	b500      	push	{lr}
 8011f48:	b09c      	sub	sp, #112	; 0x70
 8011f4a:	ab1d      	add	r3, sp, #116	; 0x74
 8011f4c:	9002      	str	r0, [sp, #8]
 8011f4e:	9006      	str	r0, [sp, #24]
 8011f50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011f54:	4809      	ldr	r0, [pc, #36]	; (8011f7c <siprintf+0x38>)
 8011f56:	9107      	str	r1, [sp, #28]
 8011f58:	9104      	str	r1, [sp, #16]
 8011f5a:	4909      	ldr	r1, [pc, #36]	; (8011f80 <siprintf+0x3c>)
 8011f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f60:	9105      	str	r1, [sp, #20]
 8011f62:	6800      	ldr	r0, [r0, #0]
 8011f64:	9301      	str	r3, [sp, #4]
 8011f66:	a902      	add	r1, sp, #8
 8011f68:	f001 fc82 	bl	8013870 <_svfiprintf_r>
 8011f6c:	9b02      	ldr	r3, [sp, #8]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	701a      	strb	r2, [r3, #0]
 8011f72:	b01c      	add	sp, #112	; 0x70
 8011f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f78:	b003      	add	sp, #12
 8011f7a:	4770      	bx	lr
 8011f7c:	20000094 	.word	0x20000094
 8011f80:	ffff0208 	.word	0xffff0208

08011f84 <__sread>:
 8011f84:	b510      	push	{r4, lr}
 8011f86:	460c      	mov	r4, r1
 8011f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f8c:	f000 f8c2 	bl	8012114 <_read_r>
 8011f90:	2800      	cmp	r0, #0
 8011f92:	bfab      	itete	ge
 8011f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011f96:	89a3      	ldrhlt	r3, [r4, #12]
 8011f98:	181b      	addge	r3, r3, r0
 8011f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011f9e:	bfac      	ite	ge
 8011fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8011fa2:	81a3      	strhlt	r3, [r4, #12]
 8011fa4:	bd10      	pop	{r4, pc}

08011fa6 <__swrite>:
 8011fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011faa:	461f      	mov	r7, r3
 8011fac:	898b      	ldrh	r3, [r1, #12]
 8011fae:	05db      	lsls	r3, r3, #23
 8011fb0:	4605      	mov	r5, r0
 8011fb2:	460c      	mov	r4, r1
 8011fb4:	4616      	mov	r6, r2
 8011fb6:	d505      	bpl.n	8011fc4 <__swrite+0x1e>
 8011fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fbc:	2302      	movs	r3, #2
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	f000 f896 	bl	80120f0 <_lseek_r>
 8011fc4:	89a3      	ldrh	r3, [r4, #12]
 8011fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011fce:	81a3      	strh	r3, [r4, #12]
 8011fd0:	4632      	mov	r2, r6
 8011fd2:	463b      	mov	r3, r7
 8011fd4:	4628      	mov	r0, r5
 8011fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fda:	f000 b8ad 	b.w	8012138 <_write_r>

08011fde <__sseek>:
 8011fde:	b510      	push	{r4, lr}
 8011fe0:	460c      	mov	r4, r1
 8011fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fe6:	f000 f883 	bl	80120f0 <_lseek_r>
 8011fea:	1c43      	adds	r3, r0, #1
 8011fec:	89a3      	ldrh	r3, [r4, #12]
 8011fee:	bf15      	itete	ne
 8011ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8011ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011ffa:	81a3      	strheq	r3, [r4, #12]
 8011ffc:	bf18      	it	ne
 8011ffe:	81a3      	strhne	r3, [r4, #12]
 8012000:	bd10      	pop	{r4, pc}

08012002 <__sclose>:
 8012002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012006:	f000 b80d 	b.w	8012024 <_close_r>

0801200a <memset>:
 801200a:	4402      	add	r2, r0
 801200c:	4603      	mov	r3, r0
 801200e:	4293      	cmp	r3, r2
 8012010:	d100      	bne.n	8012014 <memset+0xa>
 8012012:	4770      	bx	lr
 8012014:	f803 1b01 	strb.w	r1, [r3], #1
 8012018:	e7f9      	b.n	801200e <memset+0x4>
	...

0801201c <_localeconv_r>:
 801201c:	4800      	ldr	r0, [pc, #0]	; (8012020 <_localeconv_r+0x4>)
 801201e:	4770      	bx	lr
 8012020:	20000188 	.word	0x20000188

08012024 <_close_r>:
 8012024:	b538      	push	{r3, r4, r5, lr}
 8012026:	4d06      	ldr	r5, [pc, #24]	; (8012040 <_close_r+0x1c>)
 8012028:	2300      	movs	r3, #0
 801202a:	4604      	mov	r4, r0
 801202c:	4608      	mov	r0, r1
 801202e:	602b      	str	r3, [r5, #0]
 8012030:	f7ff fa3d 	bl	80114ae <_close>
 8012034:	1c43      	adds	r3, r0, #1
 8012036:	d102      	bne.n	801203e <_close_r+0x1a>
 8012038:	682b      	ldr	r3, [r5, #0]
 801203a:	b103      	cbz	r3, 801203e <_close_r+0x1a>
 801203c:	6023      	str	r3, [r4, #0]
 801203e:	bd38      	pop	{r3, r4, r5, pc}
 8012040:	20007924 	.word	0x20007924

08012044 <_reclaim_reent>:
 8012044:	4b29      	ldr	r3, [pc, #164]	; (80120ec <_reclaim_reent+0xa8>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	4283      	cmp	r3, r0
 801204a:	b570      	push	{r4, r5, r6, lr}
 801204c:	4604      	mov	r4, r0
 801204e:	d04b      	beq.n	80120e8 <_reclaim_reent+0xa4>
 8012050:	69c3      	ldr	r3, [r0, #28]
 8012052:	b143      	cbz	r3, 8012066 <_reclaim_reent+0x22>
 8012054:	68db      	ldr	r3, [r3, #12]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d144      	bne.n	80120e4 <_reclaim_reent+0xa0>
 801205a:	69e3      	ldr	r3, [r4, #28]
 801205c:	6819      	ldr	r1, [r3, #0]
 801205e:	b111      	cbz	r1, 8012066 <_reclaim_reent+0x22>
 8012060:	4620      	mov	r0, r4
 8012062:	f000 ff2f 	bl	8012ec4 <_free_r>
 8012066:	6961      	ldr	r1, [r4, #20]
 8012068:	b111      	cbz	r1, 8012070 <_reclaim_reent+0x2c>
 801206a:	4620      	mov	r0, r4
 801206c:	f000 ff2a 	bl	8012ec4 <_free_r>
 8012070:	69e1      	ldr	r1, [r4, #28]
 8012072:	b111      	cbz	r1, 801207a <_reclaim_reent+0x36>
 8012074:	4620      	mov	r0, r4
 8012076:	f000 ff25 	bl	8012ec4 <_free_r>
 801207a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801207c:	b111      	cbz	r1, 8012084 <_reclaim_reent+0x40>
 801207e:	4620      	mov	r0, r4
 8012080:	f000 ff20 	bl	8012ec4 <_free_r>
 8012084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012086:	b111      	cbz	r1, 801208e <_reclaim_reent+0x4a>
 8012088:	4620      	mov	r0, r4
 801208a:	f000 ff1b 	bl	8012ec4 <_free_r>
 801208e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012090:	b111      	cbz	r1, 8012098 <_reclaim_reent+0x54>
 8012092:	4620      	mov	r0, r4
 8012094:	f000 ff16 	bl	8012ec4 <_free_r>
 8012098:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801209a:	b111      	cbz	r1, 80120a2 <_reclaim_reent+0x5e>
 801209c:	4620      	mov	r0, r4
 801209e:	f000 ff11 	bl	8012ec4 <_free_r>
 80120a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80120a4:	b111      	cbz	r1, 80120ac <_reclaim_reent+0x68>
 80120a6:	4620      	mov	r0, r4
 80120a8:	f000 ff0c 	bl	8012ec4 <_free_r>
 80120ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80120ae:	b111      	cbz	r1, 80120b6 <_reclaim_reent+0x72>
 80120b0:	4620      	mov	r0, r4
 80120b2:	f000 ff07 	bl	8012ec4 <_free_r>
 80120b6:	6a23      	ldr	r3, [r4, #32]
 80120b8:	b1b3      	cbz	r3, 80120e8 <_reclaim_reent+0xa4>
 80120ba:	4620      	mov	r0, r4
 80120bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120c0:	4718      	bx	r3
 80120c2:	5949      	ldr	r1, [r1, r5]
 80120c4:	b941      	cbnz	r1, 80120d8 <_reclaim_reent+0x94>
 80120c6:	3504      	adds	r5, #4
 80120c8:	69e3      	ldr	r3, [r4, #28]
 80120ca:	2d80      	cmp	r5, #128	; 0x80
 80120cc:	68d9      	ldr	r1, [r3, #12]
 80120ce:	d1f8      	bne.n	80120c2 <_reclaim_reent+0x7e>
 80120d0:	4620      	mov	r0, r4
 80120d2:	f000 fef7 	bl	8012ec4 <_free_r>
 80120d6:	e7c0      	b.n	801205a <_reclaim_reent+0x16>
 80120d8:	680e      	ldr	r6, [r1, #0]
 80120da:	4620      	mov	r0, r4
 80120dc:	f000 fef2 	bl	8012ec4 <_free_r>
 80120e0:	4631      	mov	r1, r6
 80120e2:	e7ef      	b.n	80120c4 <_reclaim_reent+0x80>
 80120e4:	2500      	movs	r5, #0
 80120e6:	e7ef      	b.n	80120c8 <_reclaim_reent+0x84>
 80120e8:	bd70      	pop	{r4, r5, r6, pc}
 80120ea:	bf00      	nop
 80120ec:	20000094 	.word	0x20000094

080120f0 <_lseek_r>:
 80120f0:	b538      	push	{r3, r4, r5, lr}
 80120f2:	4d07      	ldr	r5, [pc, #28]	; (8012110 <_lseek_r+0x20>)
 80120f4:	4604      	mov	r4, r0
 80120f6:	4608      	mov	r0, r1
 80120f8:	4611      	mov	r1, r2
 80120fa:	2200      	movs	r2, #0
 80120fc:	602a      	str	r2, [r5, #0]
 80120fe:	461a      	mov	r2, r3
 8012100:	f7ff f9fc 	bl	80114fc <_lseek>
 8012104:	1c43      	adds	r3, r0, #1
 8012106:	d102      	bne.n	801210e <_lseek_r+0x1e>
 8012108:	682b      	ldr	r3, [r5, #0]
 801210a:	b103      	cbz	r3, 801210e <_lseek_r+0x1e>
 801210c:	6023      	str	r3, [r4, #0]
 801210e:	bd38      	pop	{r3, r4, r5, pc}
 8012110:	20007924 	.word	0x20007924

08012114 <_read_r>:
 8012114:	b538      	push	{r3, r4, r5, lr}
 8012116:	4d07      	ldr	r5, [pc, #28]	; (8012134 <_read_r+0x20>)
 8012118:	4604      	mov	r4, r0
 801211a:	4608      	mov	r0, r1
 801211c:	4611      	mov	r1, r2
 801211e:	2200      	movs	r2, #0
 8012120:	602a      	str	r2, [r5, #0]
 8012122:	461a      	mov	r2, r3
 8012124:	f7ff f9a6 	bl	8011474 <_read>
 8012128:	1c43      	adds	r3, r0, #1
 801212a:	d102      	bne.n	8012132 <_read_r+0x1e>
 801212c:	682b      	ldr	r3, [r5, #0]
 801212e:	b103      	cbz	r3, 8012132 <_read_r+0x1e>
 8012130:	6023      	str	r3, [r4, #0]
 8012132:	bd38      	pop	{r3, r4, r5, pc}
 8012134:	20007924 	.word	0x20007924

08012138 <_write_r>:
 8012138:	b538      	push	{r3, r4, r5, lr}
 801213a:	4d07      	ldr	r5, [pc, #28]	; (8012158 <_write_r+0x20>)
 801213c:	4604      	mov	r4, r0
 801213e:	4608      	mov	r0, r1
 8012140:	4611      	mov	r1, r2
 8012142:	2200      	movs	r2, #0
 8012144:	602a      	str	r2, [r5, #0]
 8012146:	461a      	mov	r2, r3
 8012148:	f7ee feec 	bl	8000f24 <_write>
 801214c:	1c43      	adds	r3, r0, #1
 801214e:	d102      	bne.n	8012156 <_write_r+0x1e>
 8012150:	682b      	ldr	r3, [r5, #0]
 8012152:	b103      	cbz	r3, 8012156 <_write_r+0x1e>
 8012154:	6023      	str	r3, [r4, #0]
 8012156:	bd38      	pop	{r3, r4, r5, pc}
 8012158:	20007924 	.word	0x20007924

0801215c <__errno>:
 801215c:	4b01      	ldr	r3, [pc, #4]	; (8012164 <__errno+0x8>)
 801215e:	6818      	ldr	r0, [r3, #0]
 8012160:	4770      	bx	lr
 8012162:	bf00      	nop
 8012164:	20000094 	.word	0x20000094

08012168 <__libc_init_array>:
 8012168:	b570      	push	{r4, r5, r6, lr}
 801216a:	4d0d      	ldr	r5, [pc, #52]	; (80121a0 <__libc_init_array+0x38>)
 801216c:	4c0d      	ldr	r4, [pc, #52]	; (80121a4 <__libc_init_array+0x3c>)
 801216e:	1b64      	subs	r4, r4, r5
 8012170:	10a4      	asrs	r4, r4, #2
 8012172:	2600      	movs	r6, #0
 8012174:	42a6      	cmp	r6, r4
 8012176:	d109      	bne.n	801218c <__libc_init_array+0x24>
 8012178:	4d0b      	ldr	r5, [pc, #44]	; (80121a8 <__libc_init_array+0x40>)
 801217a:	4c0c      	ldr	r4, [pc, #48]	; (80121ac <__libc_init_array+0x44>)
 801217c:	f002 f892 	bl	80142a4 <_init>
 8012180:	1b64      	subs	r4, r4, r5
 8012182:	10a4      	asrs	r4, r4, #2
 8012184:	2600      	movs	r6, #0
 8012186:	42a6      	cmp	r6, r4
 8012188:	d105      	bne.n	8012196 <__libc_init_array+0x2e>
 801218a:	bd70      	pop	{r4, r5, r6, pc}
 801218c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012190:	4798      	blx	r3
 8012192:	3601      	adds	r6, #1
 8012194:	e7ee      	b.n	8012174 <__libc_init_array+0xc>
 8012196:	f855 3b04 	ldr.w	r3, [r5], #4
 801219a:	4798      	blx	r3
 801219c:	3601      	adds	r6, #1
 801219e:	e7f2      	b.n	8012186 <__libc_init_array+0x1e>
 80121a0:	0801678c 	.word	0x0801678c
 80121a4:	0801678c 	.word	0x0801678c
 80121a8:	0801678c 	.word	0x0801678c
 80121ac:	08016790 	.word	0x08016790

080121b0 <__retarget_lock_acquire_recursive>:
 80121b0:	4770      	bx	lr

080121b2 <__retarget_lock_release_recursive>:
 80121b2:	4770      	bx	lr

080121b4 <memcpy>:
 80121b4:	440a      	add	r2, r1
 80121b6:	4291      	cmp	r1, r2
 80121b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80121bc:	d100      	bne.n	80121c0 <memcpy+0xc>
 80121be:	4770      	bx	lr
 80121c0:	b510      	push	{r4, lr}
 80121c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80121ca:	4291      	cmp	r1, r2
 80121cc:	d1f9      	bne.n	80121c2 <memcpy+0xe>
 80121ce:	bd10      	pop	{r4, pc}

080121d0 <quorem>:
 80121d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121d4:	6903      	ldr	r3, [r0, #16]
 80121d6:	690c      	ldr	r4, [r1, #16]
 80121d8:	42a3      	cmp	r3, r4
 80121da:	4607      	mov	r7, r0
 80121dc:	db7e      	blt.n	80122dc <quorem+0x10c>
 80121de:	3c01      	subs	r4, #1
 80121e0:	f101 0814 	add.w	r8, r1, #20
 80121e4:	f100 0514 	add.w	r5, r0, #20
 80121e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80121ec:	9301      	str	r3, [sp, #4]
 80121ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80121f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80121f6:	3301      	adds	r3, #1
 80121f8:	429a      	cmp	r2, r3
 80121fa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80121fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012202:	fbb2 f6f3 	udiv	r6, r2, r3
 8012206:	d331      	bcc.n	801226c <quorem+0x9c>
 8012208:	f04f 0e00 	mov.w	lr, #0
 801220c:	4640      	mov	r0, r8
 801220e:	46ac      	mov	ip, r5
 8012210:	46f2      	mov	sl, lr
 8012212:	f850 2b04 	ldr.w	r2, [r0], #4
 8012216:	b293      	uxth	r3, r2
 8012218:	fb06 e303 	mla	r3, r6, r3, lr
 801221c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012220:	0c1a      	lsrs	r2, r3, #16
 8012222:	b29b      	uxth	r3, r3
 8012224:	ebaa 0303 	sub.w	r3, sl, r3
 8012228:	f8dc a000 	ldr.w	sl, [ip]
 801222c:	fa13 f38a 	uxtah	r3, r3, sl
 8012230:	fb06 220e 	mla	r2, r6, lr, r2
 8012234:	9300      	str	r3, [sp, #0]
 8012236:	9b00      	ldr	r3, [sp, #0]
 8012238:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801223c:	b292      	uxth	r2, r2
 801223e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012242:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012246:	f8bd 3000 	ldrh.w	r3, [sp]
 801224a:	4581      	cmp	r9, r0
 801224c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012250:	f84c 3b04 	str.w	r3, [ip], #4
 8012254:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012258:	d2db      	bcs.n	8012212 <quorem+0x42>
 801225a:	f855 300b 	ldr.w	r3, [r5, fp]
 801225e:	b92b      	cbnz	r3, 801226c <quorem+0x9c>
 8012260:	9b01      	ldr	r3, [sp, #4]
 8012262:	3b04      	subs	r3, #4
 8012264:	429d      	cmp	r5, r3
 8012266:	461a      	mov	r2, r3
 8012268:	d32c      	bcc.n	80122c4 <quorem+0xf4>
 801226a:	613c      	str	r4, [r7, #16]
 801226c:	4638      	mov	r0, r7
 801226e:	f001 f9a5 	bl	80135bc <__mcmp>
 8012272:	2800      	cmp	r0, #0
 8012274:	db22      	blt.n	80122bc <quorem+0xec>
 8012276:	3601      	adds	r6, #1
 8012278:	4629      	mov	r1, r5
 801227a:	2000      	movs	r0, #0
 801227c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012280:	f8d1 c000 	ldr.w	ip, [r1]
 8012284:	b293      	uxth	r3, r2
 8012286:	1ac3      	subs	r3, r0, r3
 8012288:	0c12      	lsrs	r2, r2, #16
 801228a:	fa13 f38c 	uxtah	r3, r3, ip
 801228e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012292:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012296:	b29b      	uxth	r3, r3
 8012298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801229c:	45c1      	cmp	r9, r8
 801229e:	f841 3b04 	str.w	r3, [r1], #4
 80122a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80122a6:	d2e9      	bcs.n	801227c <quorem+0xac>
 80122a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80122ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80122b0:	b922      	cbnz	r2, 80122bc <quorem+0xec>
 80122b2:	3b04      	subs	r3, #4
 80122b4:	429d      	cmp	r5, r3
 80122b6:	461a      	mov	r2, r3
 80122b8:	d30a      	bcc.n	80122d0 <quorem+0x100>
 80122ba:	613c      	str	r4, [r7, #16]
 80122bc:	4630      	mov	r0, r6
 80122be:	b003      	add	sp, #12
 80122c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122c4:	6812      	ldr	r2, [r2, #0]
 80122c6:	3b04      	subs	r3, #4
 80122c8:	2a00      	cmp	r2, #0
 80122ca:	d1ce      	bne.n	801226a <quorem+0x9a>
 80122cc:	3c01      	subs	r4, #1
 80122ce:	e7c9      	b.n	8012264 <quorem+0x94>
 80122d0:	6812      	ldr	r2, [r2, #0]
 80122d2:	3b04      	subs	r3, #4
 80122d4:	2a00      	cmp	r2, #0
 80122d6:	d1f0      	bne.n	80122ba <quorem+0xea>
 80122d8:	3c01      	subs	r4, #1
 80122da:	e7eb      	b.n	80122b4 <quorem+0xe4>
 80122dc:	2000      	movs	r0, #0
 80122de:	e7ee      	b.n	80122be <quorem+0xee>

080122e0 <_dtoa_r>:
 80122e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e4:	ed2d 8b04 	vpush	{d8-d9}
 80122e8:	69c5      	ldr	r5, [r0, #28]
 80122ea:	b093      	sub	sp, #76	; 0x4c
 80122ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80122f0:	ec57 6b10 	vmov	r6, r7, d0
 80122f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80122f8:	9107      	str	r1, [sp, #28]
 80122fa:	4604      	mov	r4, r0
 80122fc:	920a      	str	r2, [sp, #40]	; 0x28
 80122fe:	930d      	str	r3, [sp, #52]	; 0x34
 8012300:	b975      	cbnz	r5, 8012320 <_dtoa_r+0x40>
 8012302:	2010      	movs	r0, #16
 8012304:	f000 fe2a 	bl	8012f5c <malloc>
 8012308:	4602      	mov	r2, r0
 801230a:	61e0      	str	r0, [r4, #28]
 801230c:	b920      	cbnz	r0, 8012318 <_dtoa_r+0x38>
 801230e:	4bae      	ldr	r3, [pc, #696]	; (80125c8 <_dtoa_r+0x2e8>)
 8012310:	21ef      	movs	r1, #239	; 0xef
 8012312:	48ae      	ldr	r0, [pc, #696]	; (80125cc <_dtoa_r+0x2ec>)
 8012314:	f001 fc82 	bl	8013c1c <__assert_func>
 8012318:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801231c:	6005      	str	r5, [r0, #0]
 801231e:	60c5      	str	r5, [r0, #12]
 8012320:	69e3      	ldr	r3, [r4, #28]
 8012322:	6819      	ldr	r1, [r3, #0]
 8012324:	b151      	cbz	r1, 801233c <_dtoa_r+0x5c>
 8012326:	685a      	ldr	r2, [r3, #4]
 8012328:	604a      	str	r2, [r1, #4]
 801232a:	2301      	movs	r3, #1
 801232c:	4093      	lsls	r3, r2
 801232e:	608b      	str	r3, [r1, #8]
 8012330:	4620      	mov	r0, r4
 8012332:	f000 ff07 	bl	8013144 <_Bfree>
 8012336:	69e3      	ldr	r3, [r4, #28]
 8012338:	2200      	movs	r2, #0
 801233a:	601a      	str	r2, [r3, #0]
 801233c:	1e3b      	subs	r3, r7, #0
 801233e:	bfbb      	ittet	lt
 8012340:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012344:	9303      	strlt	r3, [sp, #12]
 8012346:	2300      	movge	r3, #0
 8012348:	2201      	movlt	r2, #1
 801234a:	bfac      	ite	ge
 801234c:	f8c8 3000 	strge.w	r3, [r8]
 8012350:	f8c8 2000 	strlt.w	r2, [r8]
 8012354:	4b9e      	ldr	r3, [pc, #632]	; (80125d0 <_dtoa_r+0x2f0>)
 8012356:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801235a:	ea33 0308 	bics.w	r3, r3, r8
 801235e:	d11b      	bne.n	8012398 <_dtoa_r+0xb8>
 8012360:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012362:	f242 730f 	movw	r3, #9999	; 0x270f
 8012366:	6013      	str	r3, [r2, #0]
 8012368:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801236c:	4333      	orrs	r3, r6
 801236e:	f000 8593 	beq.w	8012e98 <_dtoa_r+0xbb8>
 8012372:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012374:	b963      	cbnz	r3, 8012390 <_dtoa_r+0xb0>
 8012376:	4b97      	ldr	r3, [pc, #604]	; (80125d4 <_dtoa_r+0x2f4>)
 8012378:	e027      	b.n	80123ca <_dtoa_r+0xea>
 801237a:	4b97      	ldr	r3, [pc, #604]	; (80125d8 <_dtoa_r+0x2f8>)
 801237c:	9300      	str	r3, [sp, #0]
 801237e:	3308      	adds	r3, #8
 8012380:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012382:	6013      	str	r3, [r2, #0]
 8012384:	9800      	ldr	r0, [sp, #0]
 8012386:	b013      	add	sp, #76	; 0x4c
 8012388:	ecbd 8b04 	vpop	{d8-d9}
 801238c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012390:	4b90      	ldr	r3, [pc, #576]	; (80125d4 <_dtoa_r+0x2f4>)
 8012392:	9300      	str	r3, [sp, #0]
 8012394:	3303      	adds	r3, #3
 8012396:	e7f3      	b.n	8012380 <_dtoa_r+0xa0>
 8012398:	ed9d 7b02 	vldr	d7, [sp, #8]
 801239c:	2200      	movs	r2, #0
 801239e:	ec51 0b17 	vmov	r0, r1, d7
 80123a2:	eeb0 8a47 	vmov.f32	s16, s14
 80123a6:	eef0 8a67 	vmov.f32	s17, s15
 80123aa:	2300      	movs	r3, #0
 80123ac:	f7ee fbac 	bl	8000b08 <__aeabi_dcmpeq>
 80123b0:	4681      	mov	r9, r0
 80123b2:	b160      	cbz	r0, 80123ce <_dtoa_r+0xee>
 80123b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80123b6:	2301      	movs	r3, #1
 80123b8:	6013      	str	r3, [r2, #0]
 80123ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80123bc:	2b00      	cmp	r3, #0
 80123be:	f000 8568 	beq.w	8012e92 <_dtoa_r+0xbb2>
 80123c2:	4b86      	ldr	r3, [pc, #536]	; (80125dc <_dtoa_r+0x2fc>)
 80123c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80123c6:	6013      	str	r3, [r2, #0]
 80123c8:	3b01      	subs	r3, #1
 80123ca:	9300      	str	r3, [sp, #0]
 80123cc:	e7da      	b.n	8012384 <_dtoa_r+0xa4>
 80123ce:	aa10      	add	r2, sp, #64	; 0x40
 80123d0:	a911      	add	r1, sp, #68	; 0x44
 80123d2:	4620      	mov	r0, r4
 80123d4:	eeb0 0a48 	vmov.f32	s0, s16
 80123d8:	eef0 0a68 	vmov.f32	s1, s17
 80123dc:	f001 f994 	bl	8013708 <__d2b>
 80123e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80123e4:	4682      	mov	sl, r0
 80123e6:	2d00      	cmp	r5, #0
 80123e8:	d07f      	beq.n	80124ea <_dtoa_r+0x20a>
 80123ea:	ee18 3a90 	vmov	r3, s17
 80123ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80123f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80123f6:	ec51 0b18 	vmov	r0, r1, d8
 80123fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80123fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012402:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012406:	4619      	mov	r1, r3
 8012408:	2200      	movs	r2, #0
 801240a:	4b75      	ldr	r3, [pc, #468]	; (80125e0 <_dtoa_r+0x300>)
 801240c:	f7ed ff5c 	bl	80002c8 <__aeabi_dsub>
 8012410:	a367      	add	r3, pc, #412	; (adr r3, 80125b0 <_dtoa_r+0x2d0>)
 8012412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012416:	f7ee f90f 	bl	8000638 <__aeabi_dmul>
 801241a:	a367      	add	r3, pc, #412	; (adr r3, 80125b8 <_dtoa_r+0x2d8>)
 801241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012420:	f7ed ff54 	bl	80002cc <__adddf3>
 8012424:	4606      	mov	r6, r0
 8012426:	4628      	mov	r0, r5
 8012428:	460f      	mov	r7, r1
 801242a:	f7ee f89b 	bl	8000564 <__aeabi_i2d>
 801242e:	a364      	add	r3, pc, #400	; (adr r3, 80125c0 <_dtoa_r+0x2e0>)
 8012430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012434:	f7ee f900 	bl	8000638 <__aeabi_dmul>
 8012438:	4602      	mov	r2, r0
 801243a:	460b      	mov	r3, r1
 801243c:	4630      	mov	r0, r6
 801243e:	4639      	mov	r1, r7
 8012440:	f7ed ff44 	bl	80002cc <__adddf3>
 8012444:	4606      	mov	r6, r0
 8012446:	460f      	mov	r7, r1
 8012448:	f7ee fba6 	bl	8000b98 <__aeabi_d2iz>
 801244c:	2200      	movs	r2, #0
 801244e:	4683      	mov	fp, r0
 8012450:	2300      	movs	r3, #0
 8012452:	4630      	mov	r0, r6
 8012454:	4639      	mov	r1, r7
 8012456:	f7ee fb61 	bl	8000b1c <__aeabi_dcmplt>
 801245a:	b148      	cbz	r0, 8012470 <_dtoa_r+0x190>
 801245c:	4658      	mov	r0, fp
 801245e:	f7ee f881 	bl	8000564 <__aeabi_i2d>
 8012462:	4632      	mov	r2, r6
 8012464:	463b      	mov	r3, r7
 8012466:	f7ee fb4f 	bl	8000b08 <__aeabi_dcmpeq>
 801246a:	b908      	cbnz	r0, 8012470 <_dtoa_r+0x190>
 801246c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012470:	f1bb 0f16 	cmp.w	fp, #22
 8012474:	d857      	bhi.n	8012526 <_dtoa_r+0x246>
 8012476:	4b5b      	ldr	r3, [pc, #364]	; (80125e4 <_dtoa_r+0x304>)
 8012478:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012480:	ec51 0b18 	vmov	r0, r1, d8
 8012484:	f7ee fb4a 	bl	8000b1c <__aeabi_dcmplt>
 8012488:	2800      	cmp	r0, #0
 801248a:	d04e      	beq.n	801252a <_dtoa_r+0x24a>
 801248c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012490:	2300      	movs	r3, #0
 8012492:	930c      	str	r3, [sp, #48]	; 0x30
 8012494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012496:	1b5b      	subs	r3, r3, r5
 8012498:	1e5a      	subs	r2, r3, #1
 801249a:	bf45      	ittet	mi
 801249c:	f1c3 0301 	rsbmi	r3, r3, #1
 80124a0:	9305      	strmi	r3, [sp, #20]
 80124a2:	2300      	movpl	r3, #0
 80124a4:	2300      	movmi	r3, #0
 80124a6:	9206      	str	r2, [sp, #24]
 80124a8:	bf54      	ite	pl
 80124aa:	9305      	strpl	r3, [sp, #20]
 80124ac:	9306      	strmi	r3, [sp, #24]
 80124ae:	f1bb 0f00 	cmp.w	fp, #0
 80124b2:	db3c      	blt.n	801252e <_dtoa_r+0x24e>
 80124b4:	9b06      	ldr	r3, [sp, #24]
 80124b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80124ba:	445b      	add	r3, fp
 80124bc:	9306      	str	r3, [sp, #24]
 80124be:	2300      	movs	r3, #0
 80124c0:	9308      	str	r3, [sp, #32]
 80124c2:	9b07      	ldr	r3, [sp, #28]
 80124c4:	2b09      	cmp	r3, #9
 80124c6:	d868      	bhi.n	801259a <_dtoa_r+0x2ba>
 80124c8:	2b05      	cmp	r3, #5
 80124ca:	bfc4      	itt	gt
 80124cc:	3b04      	subgt	r3, #4
 80124ce:	9307      	strgt	r3, [sp, #28]
 80124d0:	9b07      	ldr	r3, [sp, #28]
 80124d2:	f1a3 0302 	sub.w	r3, r3, #2
 80124d6:	bfcc      	ite	gt
 80124d8:	2500      	movgt	r5, #0
 80124da:	2501      	movle	r5, #1
 80124dc:	2b03      	cmp	r3, #3
 80124de:	f200 8085 	bhi.w	80125ec <_dtoa_r+0x30c>
 80124e2:	e8df f003 	tbb	[pc, r3]
 80124e6:	3b2e      	.short	0x3b2e
 80124e8:	5839      	.short	0x5839
 80124ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80124ee:	441d      	add	r5, r3
 80124f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80124f4:	2b20      	cmp	r3, #32
 80124f6:	bfc1      	itttt	gt
 80124f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80124fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8012500:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8012504:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012508:	bfd6      	itet	le
 801250a:	f1c3 0320 	rsble	r3, r3, #32
 801250e:	ea48 0003 	orrgt.w	r0, r8, r3
 8012512:	fa06 f003 	lslle.w	r0, r6, r3
 8012516:	f7ee f815 	bl	8000544 <__aeabi_ui2d>
 801251a:	2201      	movs	r2, #1
 801251c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012520:	3d01      	subs	r5, #1
 8012522:	920e      	str	r2, [sp, #56]	; 0x38
 8012524:	e76f      	b.n	8012406 <_dtoa_r+0x126>
 8012526:	2301      	movs	r3, #1
 8012528:	e7b3      	b.n	8012492 <_dtoa_r+0x1b2>
 801252a:	900c      	str	r0, [sp, #48]	; 0x30
 801252c:	e7b2      	b.n	8012494 <_dtoa_r+0x1b4>
 801252e:	9b05      	ldr	r3, [sp, #20]
 8012530:	eba3 030b 	sub.w	r3, r3, fp
 8012534:	9305      	str	r3, [sp, #20]
 8012536:	f1cb 0300 	rsb	r3, fp, #0
 801253a:	9308      	str	r3, [sp, #32]
 801253c:	2300      	movs	r3, #0
 801253e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012540:	e7bf      	b.n	80124c2 <_dtoa_r+0x1e2>
 8012542:	2300      	movs	r3, #0
 8012544:	9309      	str	r3, [sp, #36]	; 0x24
 8012546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012548:	2b00      	cmp	r3, #0
 801254a:	dc52      	bgt.n	80125f2 <_dtoa_r+0x312>
 801254c:	2301      	movs	r3, #1
 801254e:	9301      	str	r3, [sp, #4]
 8012550:	9304      	str	r3, [sp, #16]
 8012552:	461a      	mov	r2, r3
 8012554:	920a      	str	r2, [sp, #40]	; 0x28
 8012556:	e00b      	b.n	8012570 <_dtoa_r+0x290>
 8012558:	2301      	movs	r3, #1
 801255a:	e7f3      	b.n	8012544 <_dtoa_r+0x264>
 801255c:	2300      	movs	r3, #0
 801255e:	9309      	str	r3, [sp, #36]	; 0x24
 8012560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012562:	445b      	add	r3, fp
 8012564:	9301      	str	r3, [sp, #4]
 8012566:	3301      	adds	r3, #1
 8012568:	2b01      	cmp	r3, #1
 801256a:	9304      	str	r3, [sp, #16]
 801256c:	bfb8      	it	lt
 801256e:	2301      	movlt	r3, #1
 8012570:	69e0      	ldr	r0, [r4, #28]
 8012572:	2100      	movs	r1, #0
 8012574:	2204      	movs	r2, #4
 8012576:	f102 0614 	add.w	r6, r2, #20
 801257a:	429e      	cmp	r6, r3
 801257c:	d93d      	bls.n	80125fa <_dtoa_r+0x31a>
 801257e:	6041      	str	r1, [r0, #4]
 8012580:	4620      	mov	r0, r4
 8012582:	f000 fd9f 	bl	80130c4 <_Balloc>
 8012586:	9000      	str	r0, [sp, #0]
 8012588:	2800      	cmp	r0, #0
 801258a:	d139      	bne.n	8012600 <_dtoa_r+0x320>
 801258c:	4b16      	ldr	r3, [pc, #88]	; (80125e8 <_dtoa_r+0x308>)
 801258e:	4602      	mov	r2, r0
 8012590:	f240 11af 	movw	r1, #431	; 0x1af
 8012594:	e6bd      	b.n	8012312 <_dtoa_r+0x32>
 8012596:	2301      	movs	r3, #1
 8012598:	e7e1      	b.n	801255e <_dtoa_r+0x27e>
 801259a:	2501      	movs	r5, #1
 801259c:	2300      	movs	r3, #0
 801259e:	9307      	str	r3, [sp, #28]
 80125a0:	9509      	str	r5, [sp, #36]	; 0x24
 80125a2:	f04f 33ff 	mov.w	r3, #4294967295
 80125a6:	9301      	str	r3, [sp, #4]
 80125a8:	9304      	str	r3, [sp, #16]
 80125aa:	2200      	movs	r2, #0
 80125ac:	2312      	movs	r3, #18
 80125ae:	e7d1      	b.n	8012554 <_dtoa_r+0x274>
 80125b0:	636f4361 	.word	0x636f4361
 80125b4:	3fd287a7 	.word	0x3fd287a7
 80125b8:	8b60c8b3 	.word	0x8b60c8b3
 80125bc:	3fc68a28 	.word	0x3fc68a28
 80125c0:	509f79fb 	.word	0x509f79fb
 80125c4:	3fd34413 	.word	0x3fd34413
 80125c8:	08016451 	.word	0x08016451
 80125cc:	08016468 	.word	0x08016468
 80125d0:	7ff00000 	.word	0x7ff00000
 80125d4:	0801644d 	.word	0x0801644d
 80125d8:	08016444 	.word	0x08016444
 80125dc:	08016421 	.word	0x08016421
 80125e0:	3ff80000 	.word	0x3ff80000
 80125e4:	08016558 	.word	0x08016558
 80125e8:	080164c0 	.word	0x080164c0
 80125ec:	2301      	movs	r3, #1
 80125ee:	9309      	str	r3, [sp, #36]	; 0x24
 80125f0:	e7d7      	b.n	80125a2 <_dtoa_r+0x2c2>
 80125f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125f4:	9301      	str	r3, [sp, #4]
 80125f6:	9304      	str	r3, [sp, #16]
 80125f8:	e7ba      	b.n	8012570 <_dtoa_r+0x290>
 80125fa:	3101      	adds	r1, #1
 80125fc:	0052      	lsls	r2, r2, #1
 80125fe:	e7ba      	b.n	8012576 <_dtoa_r+0x296>
 8012600:	69e3      	ldr	r3, [r4, #28]
 8012602:	9a00      	ldr	r2, [sp, #0]
 8012604:	601a      	str	r2, [r3, #0]
 8012606:	9b04      	ldr	r3, [sp, #16]
 8012608:	2b0e      	cmp	r3, #14
 801260a:	f200 80a8 	bhi.w	801275e <_dtoa_r+0x47e>
 801260e:	2d00      	cmp	r5, #0
 8012610:	f000 80a5 	beq.w	801275e <_dtoa_r+0x47e>
 8012614:	f1bb 0f00 	cmp.w	fp, #0
 8012618:	dd38      	ble.n	801268c <_dtoa_r+0x3ac>
 801261a:	4bc0      	ldr	r3, [pc, #768]	; (801291c <_dtoa_r+0x63c>)
 801261c:	f00b 020f 	and.w	r2, fp, #15
 8012620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012624:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012628:	e9d3 6700 	ldrd	r6, r7, [r3]
 801262c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012630:	d019      	beq.n	8012666 <_dtoa_r+0x386>
 8012632:	4bbb      	ldr	r3, [pc, #748]	; (8012920 <_dtoa_r+0x640>)
 8012634:	ec51 0b18 	vmov	r0, r1, d8
 8012638:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801263c:	f7ee f926 	bl	800088c <__aeabi_ddiv>
 8012640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012644:	f008 080f 	and.w	r8, r8, #15
 8012648:	2503      	movs	r5, #3
 801264a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012920 <_dtoa_r+0x640>
 801264e:	f1b8 0f00 	cmp.w	r8, #0
 8012652:	d10a      	bne.n	801266a <_dtoa_r+0x38a>
 8012654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012658:	4632      	mov	r2, r6
 801265a:	463b      	mov	r3, r7
 801265c:	f7ee f916 	bl	800088c <__aeabi_ddiv>
 8012660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012664:	e02b      	b.n	80126be <_dtoa_r+0x3de>
 8012666:	2502      	movs	r5, #2
 8012668:	e7ef      	b.n	801264a <_dtoa_r+0x36a>
 801266a:	f018 0f01 	tst.w	r8, #1
 801266e:	d008      	beq.n	8012682 <_dtoa_r+0x3a2>
 8012670:	4630      	mov	r0, r6
 8012672:	4639      	mov	r1, r7
 8012674:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012678:	f7ed ffde 	bl	8000638 <__aeabi_dmul>
 801267c:	3501      	adds	r5, #1
 801267e:	4606      	mov	r6, r0
 8012680:	460f      	mov	r7, r1
 8012682:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012686:	f109 0908 	add.w	r9, r9, #8
 801268a:	e7e0      	b.n	801264e <_dtoa_r+0x36e>
 801268c:	f000 809f 	beq.w	80127ce <_dtoa_r+0x4ee>
 8012690:	f1cb 0600 	rsb	r6, fp, #0
 8012694:	4ba1      	ldr	r3, [pc, #644]	; (801291c <_dtoa_r+0x63c>)
 8012696:	4fa2      	ldr	r7, [pc, #648]	; (8012920 <_dtoa_r+0x640>)
 8012698:	f006 020f 	and.w	r2, r6, #15
 801269c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a4:	ec51 0b18 	vmov	r0, r1, d8
 80126a8:	f7ed ffc6 	bl	8000638 <__aeabi_dmul>
 80126ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126b0:	1136      	asrs	r6, r6, #4
 80126b2:	2300      	movs	r3, #0
 80126b4:	2502      	movs	r5, #2
 80126b6:	2e00      	cmp	r6, #0
 80126b8:	d17e      	bne.n	80127b8 <_dtoa_r+0x4d8>
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d1d0      	bne.n	8012660 <_dtoa_r+0x380>
 80126be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	f000 8084 	beq.w	80127d2 <_dtoa_r+0x4f2>
 80126ca:	4b96      	ldr	r3, [pc, #600]	; (8012924 <_dtoa_r+0x644>)
 80126cc:	2200      	movs	r2, #0
 80126ce:	4640      	mov	r0, r8
 80126d0:	4649      	mov	r1, r9
 80126d2:	f7ee fa23 	bl	8000b1c <__aeabi_dcmplt>
 80126d6:	2800      	cmp	r0, #0
 80126d8:	d07b      	beq.n	80127d2 <_dtoa_r+0x4f2>
 80126da:	9b04      	ldr	r3, [sp, #16]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d078      	beq.n	80127d2 <_dtoa_r+0x4f2>
 80126e0:	9b01      	ldr	r3, [sp, #4]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	dd39      	ble.n	801275a <_dtoa_r+0x47a>
 80126e6:	4b90      	ldr	r3, [pc, #576]	; (8012928 <_dtoa_r+0x648>)
 80126e8:	2200      	movs	r2, #0
 80126ea:	4640      	mov	r0, r8
 80126ec:	4649      	mov	r1, r9
 80126ee:	f7ed ffa3 	bl	8000638 <__aeabi_dmul>
 80126f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126f6:	9e01      	ldr	r6, [sp, #4]
 80126f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80126fc:	3501      	adds	r5, #1
 80126fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012702:	4628      	mov	r0, r5
 8012704:	f7ed ff2e 	bl	8000564 <__aeabi_i2d>
 8012708:	4642      	mov	r2, r8
 801270a:	464b      	mov	r3, r9
 801270c:	f7ed ff94 	bl	8000638 <__aeabi_dmul>
 8012710:	4b86      	ldr	r3, [pc, #536]	; (801292c <_dtoa_r+0x64c>)
 8012712:	2200      	movs	r2, #0
 8012714:	f7ed fdda 	bl	80002cc <__adddf3>
 8012718:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801271c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012720:	9303      	str	r3, [sp, #12]
 8012722:	2e00      	cmp	r6, #0
 8012724:	d158      	bne.n	80127d8 <_dtoa_r+0x4f8>
 8012726:	4b82      	ldr	r3, [pc, #520]	; (8012930 <_dtoa_r+0x650>)
 8012728:	2200      	movs	r2, #0
 801272a:	4640      	mov	r0, r8
 801272c:	4649      	mov	r1, r9
 801272e:	f7ed fdcb 	bl	80002c8 <__aeabi_dsub>
 8012732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012736:	4680      	mov	r8, r0
 8012738:	4689      	mov	r9, r1
 801273a:	f7ee fa0d 	bl	8000b58 <__aeabi_dcmpgt>
 801273e:	2800      	cmp	r0, #0
 8012740:	f040 8296 	bne.w	8012c70 <_dtoa_r+0x990>
 8012744:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012748:	4640      	mov	r0, r8
 801274a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801274e:	4649      	mov	r1, r9
 8012750:	f7ee f9e4 	bl	8000b1c <__aeabi_dcmplt>
 8012754:	2800      	cmp	r0, #0
 8012756:	f040 8289 	bne.w	8012c6c <_dtoa_r+0x98c>
 801275a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801275e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012760:	2b00      	cmp	r3, #0
 8012762:	f2c0 814e 	blt.w	8012a02 <_dtoa_r+0x722>
 8012766:	f1bb 0f0e 	cmp.w	fp, #14
 801276a:	f300 814a 	bgt.w	8012a02 <_dtoa_r+0x722>
 801276e:	4b6b      	ldr	r3, [pc, #428]	; (801291c <_dtoa_r+0x63c>)
 8012770:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012774:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801277a:	2b00      	cmp	r3, #0
 801277c:	f280 80dc 	bge.w	8012938 <_dtoa_r+0x658>
 8012780:	9b04      	ldr	r3, [sp, #16]
 8012782:	2b00      	cmp	r3, #0
 8012784:	f300 80d8 	bgt.w	8012938 <_dtoa_r+0x658>
 8012788:	f040 826f 	bne.w	8012c6a <_dtoa_r+0x98a>
 801278c:	4b68      	ldr	r3, [pc, #416]	; (8012930 <_dtoa_r+0x650>)
 801278e:	2200      	movs	r2, #0
 8012790:	4640      	mov	r0, r8
 8012792:	4649      	mov	r1, r9
 8012794:	f7ed ff50 	bl	8000638 <__aeabi_dmul>
 8012798:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801279c:	f7ee f9d2 	bl	8000b44 <__aeabi_dcmpge>
 80127a0:	9e04      	ldr	r6, [sp, #16]
 80127a2:	4637      	mov	r7, r6
 80127a4:	2800      	cmp	r0, #0
 80127a6:	f040 8245 	bne.w	8012c34 <_dtoa_r+0x954>
 80127aa:	9d00      	ldr	r5, [sp, #0]
 80127ac:	2331      	movs	r3, #49	; 0x31
 80127ae:	f805 3b01 	strb.w	r3, [r5], #1
 80127b2:	f10b 0b01 	add.w	fp, fp, #1
 80127b6:	e241      	b.n	8012c3c <_dtoa_r+0x95c>
 80127b8:	07f2      	lsls	r2, r6, #31
 80127ba:	d505      	bpl.n	80127c8 <_dtoa_r+0x4e8>
 80127bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80127c0:	f7ed ff3a 	bl	8000638 <__aeabi_dmul>
 80127c4:	3501      	adds	r5, #1
 80127c6:	2301      	movs	r3, #1
 80127c8:	1076      	asrs	r6, r6, #1
 80127ca:	3708      	adds	r7, #8
 80127cc:	e773      	b.n	80126b6 <_dtoa_r+0x3d6>
 80127ce:	2502      	movs	r5, #2
 80127d0:	e775      	b.n	80126be <_dtoa_r+0x3de>
 80127d2:	9e04      	ldr	r6, [sp, #16]
 80127d4:	465f      	mov	r7, fp
 80127d6:	e792      	b.n	80126fe <_dtoa_r+0x41e>
 80127d8:	9900      	ldr	r1, [sp, #0]
 80127da:	4b50      	ldr	r3, [pc, #320]	; (801291c <_dtoa_r+0x63c>)
 80127dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80127e0:	4431      	add	r1, r6
 80127e2:	9102      	str	r1, [sp, #8]
 80127e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80127e6:	eeb0 9a47 	vmov.f32	s18, s14
 80127ea:	eef0 9a67 	vmov.f32	s19, s15
 80127ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80127f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80127f6:	2900      	cmp	r1, #0
 80127f8:	d044      	beq.n	8012884 <_dtoa_r+0x5a4>
 80127fa:	494e      	ldr	r1, [pc, #312]	; (8012934 <_dtoa_r+0x654>)
 80127fc:	2000      	movs	r0, #0
 80127fe:	f7ee f845 	bl	800088c <__aeabi_ddiv>
 8012802:	ec53 2b19 	vmov	r2, r3, d9
 8012806:	f7ed fd5f 	bl	80002c8 <__aeabi_dsub>
 801280a:	9d00      	ldr	r5, [sp, #0]
 801280c:	ec41 0b19 	vmov	d9, r0, r1
 8012810:	4649      	mov	r1, r9
 8012812:	4640      	mov	r0, r8
 8012814:	f7ee f9c0 	bl	8000b98 <__aeabi_d2iz>
 8012818:	4606      	mov	r6, r0
 801281a:	f7ed fea3 	bl	8000564 <__aeabi_i2d>
 801281e:	4602      	mov	r2, r0
 8012820:	460b      	mov	r3, r1
 8012822:	4640      	mov	r0, r8
 8012824:	4649      	mov	r1, r9
 8012826:	f7ed fd4f 	bl	80002c8 <__aeabi_dsub>
 801282a:	3630      	adds	r6, #48	; 0x30
 801282c:	f805 6b01 	strb.w	r6, [r5], #1
 8012830:	ec53 2b19 	vmov	r2, r3, d9
 8012834:	4680      	mov	r8, r0
 8012836:	4689      	mov	r9, r1
 8012838:	f7ee f970 	bl	8000b1c <__aeabi_dcmplt>
 801283c:	2800      	cmp	r0, #0
 801283e:	d164      	bne.n	801290a <_dtoa_r+0x62a>
 8012840:	4642      	mov	r2, r8
 8012842:	464b      	mov	r3, r9
 8012844:	4937      	ldr	r1, [pc, #220]	; (8012924 <_dtoa_r+0x644>)
 8012846:	2000      	movs	r0, #0
 8012848:	f7ed fd3e 	bl	80002c8 <__aeabi_dsub>
 801284c:	ec53 2b19 	vmov	r2, r3, d9
 8012850:	f7ee f964 	bl	8000b1c <__aeabi_dcmplt>
 8012854:	2800      	cmp	r0, #0
 8012856:	f040 80b6 	bne.w	80129c6 <_dtoa_r+0x6e6>
 801285a:	9b02      	ldr	r3, [sp, #8]
 801285c:	429d      	cmp	r5, r3
 801285e:	f43f af7c 	beq.w	801275a <_dtoa_r+0x47a>
 8012862:	4b31      	ldr	r3, [pc, #196]	; (8012928 <_dtoa_r+0x648>)
 8012864:	ec51 0b19 	vmov	r0, r1, d9
 8012868:	2200      	movs	r2, #0
 801286a:	f7ed fee5 	bl	8000638 <__aeabi_dmul>
 801286e:	4b2e      	ldr	r3, [pc, #184]	; (8012928 <_dtoa_r+0x648>)
 8012870:	ec41 0b19 	vmov	d9, r0, r1
 8012874:	2200      	movs	r2, #0
 8012876:	4640      	mov	r0, r8
 8012878:	4649      	mov	r1, r9
 801287a:	f7ed fedd 	bl	8000638 <__aeabi_dmul>
 801287e:	4680      	mov	r8, r0
 8012880:	4689      	mov	r9, r1
 8012882:	e7c5      	b.n	8012810 <_dtoa_r+0x530>
 8012884:	ec51 0b17 	vmov	r0, r1, d7
 8012888:	f7ed fed6 	bl	8000638 <__aeabi_dmul>
 801288c:	9b02      	ldr	r3, [sp, #8]
 801288e:	9d00      	ldr	r5, [sp, #0]
 8012890:	930f      	str	r3, [sp, #60]	; 0x3c
 8012892:	ec41 0b19 	vmov	d9, r0, r1
 8012896:	4649      	mov	r1, r9
 8012898:	4640      	mov	r0, r8
 801289a:	f7ee f97d 	bl	8000b98 <__aeabi_d2iz>
 801289e:	4606      	mov	r6, r0
 80128a0:	f7ed fe60 	bl	8000564 <__aeabi_i2d>
 80128a4:	3630      	adds	r6, #48	; 0x30
 80128a6:	4602      	mov	r2, r0
 80128a8:	460b      	mov	r3, r1
 80128aa:	4640      	mov	r0, r8
 80128ac:	4649      	mov	r1, r9
 80128ae:	f7ed fd0b 	bl	80002c8 <__aeabi_dsub>
 80128b2:	f805 6b01 	strb.w	r6, [r5], #1
 80128b6:	9b02      	ldr	r3, [sp, #8]
 80128b8:	429d      	cmp	r5, r3
 80128ba:	4680      	mov	r8, r0
 80128bc:	4689      	mov	r9, r1
 80128be:	f04f 0200 	mov.w	r2, #0
 80128c2:	d124      	bne.n	801290e <_dtoa_r+0x62e>
 80128c4:	4b1b      	ldr	r3, [pc, #108]	; (8012934 <_dtoa_r+0x654>)
 80128c6:	ec51 0b19 	vmov	r0, r1, d9
 80128ca:	f7ed fcff 	bl	80002cc <__adddf3>
 80128ce:	4602      	mov	r2, r0
 80128d0:	460b      	mov	r3, r1
 80128d2:	4640      	mov	r0, r8
 80128d4:	4649      	mov	r1, r9
 80128d6:	f7ee f93f 	bl	8000b58 <__aeabi_dcmpgt>
 80128da:	2800      	cmp	r0, #0
 80128dc:	d173      	bne.n	80129c6 <_dtoa_r+0x6e6>
 80128de:	ec53 2b19 	vmov	r2, r3, d9
 80128e2:	4914      	ldr	r1, [pc, #80]	; (8012934 <_dtoa_r+0x654>)
 80128e4:	2000      	movs	r0, #0
 80128e6:	f7ed fcef 	bl	80002c8 <__aeabi_dsub>
 80128ea:	4602      	mov	r2, r0
 80128ec:	460b      	mov	r3, r1
 80128ee:	4640      	mov	r0, r8
 80128f0:	4649      	mov	r1, r9
 80128f2:	f7ee f913 	bl	8000b1c <__aeabi_dcmplt>
 80128f6:	2800      	cmp	r0, #0
 80128f8:	f43f af2f 	beq.w	801275a <_dtoa_r+0x47a>
 80128fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80128fe:	1e6b      	subs	r3, r5, #1
 8012900:	930f      	str	r3, [sp, #60]	; 0x3c
 8012902:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012906:	2b30      	cmp	r3, #48	; 0x30
 8012908:	d0f8      	beq.n	80128fc <_dtoa_r+0x61c>
 801290a:	46bb      	mov	fp, r7
 801290c:	e04a      	b.n	80129a4 <_dtoa_r+0x6c4>
 801290e:	4b06      	ldr	r3, [pc, #24]	; (8012928 <_dtoa_r+0x648>)
 8012910:	f7ed fe92 	bl	8000638 <__aeabi_dmul>
 8012914:	4680      	mov	r8, r0
 8012916:	4689      	mov	r9, r1
 8012918:	e7bd      	b.n	8012896 <_dtoa_r+0x5b6>
 801291a:	bf00      	nop
 801291c:	08016558 	.word	0x08016558
 8012920:	08016530 	.word	0x08016530
 8012924:	3ff00000 	.word	0x3ff00000
 8012928:	40240000 	.word	0x40240000
 801292c:	401c0000 	.word	0x401c0000
 8012930:	40140000 	.word	0x40140000
 8012934:	3fe00000 	.word	0x3fe00000
 8012938:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801293c:	9d00      	ldr	r5, [sp, #0]
 801293e:	4642      	mov	r2, r8
 8012940:	464b      	mov	r3, r9
 8012942:	4630      	mov	r0, r6
 8012944:	4639      	mov	r1, r7
 8012946:	f7ed ffa1 	bl	800088c <__aeabi_ddiv>
 801294a:	f7ee f925 	bl	8000b98 <__aeabi_d2iz>
 801294e:	9001      	str	r0, [sp, #4]
 8012950:	f7ed fe08 	bl	8000564 <__aeabi_i2d>
 8012954:	4642      	mov	r2, r8
 8012956:	464b      	mov	r3, r9
 8012958:	f7ed fe6e 	bl	8000638 <__aeabi_dmul>
 801295c:	4602      	mov	r2, r0
 801295e:	460b      	mov	r3, r1
 8012960:	4630      	mov	r0, r6
 8012962:	4639      	mov	r1, r7
 8012964:	f7ed fcb0 	bl	80002c8 <__aeabi_dsub>
 8012968:	9e01      	ldr	r6, [sp, #4]
 801296a:	9f04      	ldr	r7, [sp, #16]
 801296c:	3630      	adds	r6, #48	; 0x30
 801296e:	f805 6b01 	strb.w	r6, [r5], #1
 8012972:	9e00      	ldr	r6, [sp, #0]
 8012974:	1bae      	subs	r6, r5, r6
 8012976:	42b7      	cmp	r7, r6
 8012978:	4602      	mov	r2, r0
 801297a:	460b      	mov	r3, r1
 801297c:	d134      	bne.n	80129e8 <_dtoa_r+0x708>
 801297e:	f7ed fca5 	bl	80002cc <__adddf3>
 8012982:	4642      	mov	r2, r8
 8012984:	464b      	mov	r3, r9
 8012986:	4606      	mov	r6, r0
 8012988:	460f      	mov	r7, r1
 801298a:	f7ee f8e5 	bl	8000b58 <__aeabi_dcmpgt>
 801298e:	b9c8      	cbnz	r0, 80129c4 <_dtoa_r+0x6e4>
 8012990:	4642      	mov	r2, r8
 8012992:	464b      	mov	r3, r9
 8012994:	4630      	mov	r0, r6
 8012996:	4639      	mov	r1, r7
 8012998:	f7ee f8b6 	bl	8000b08 <__aeabi_dcmpeq>
 801299c:	b110      	cbz	r0, 80129a4 <_dtoa_r+0x6c4>
 801299e:	9b01      	ldr	r3, [sp, #4]
 80129a0:	07db      	lsls	r3, r3, #31
 80129a2:	d40f      	bmi.n	80129c4 <_dtoa_r+0x6e4>
 80129a4:	4651      	mov	r1, sl
 80129a6:	4620      	mov	r0, r4
 80129a8:	f000 fbcc 	bl	8013144 <_Bfree>
 80129ac:	2300      	movs	r3, #0
 80129ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80129b0:	702b      	strb	r3, [r5, #0]
 80129b2:	f10b 0301 	add.w	r3, fp, #1
 80129b6:	6013      	str	r3, [r2, #0]
 80129b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	f43f ace2 	beq.w	8012384 <_dtoa_r+0xa4>
 80129c0:	601d      	str	r5, [r3, #0]
 80129c2:	e4df      	b.n	8012384 <_dtoa_r+0xa4>
 80129c4:	465f      	mov	r7, fp
 80129c6:	462b      	mov	r3, r5
 80129c8:	461d      	mov	r5, r3
 80129ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80129ce:	2a39      	cmp	r2, #57	; 0x39
 80129d0:	d106      	bne.n	80129e0 <_dtoa_r+0x700>
 80129d2:	9a00      	ldr	r2, [sp, #0]
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d1f7      	bne.n	80129c8 <_dtoa_r+0x6e8>
 80129d8:	9900      	ldr	r1, [sp, #0]
 80129da:	2230      	movs	r2, #48	; 0x30
 80129dc:	3701      	adds	r7, #1
 80129de:	700a      	strb	r2, [r1, #0]
 80129e0:	781a      	ldrb	r2, [r3, #0]
 80129e2:	3201      	adds	r2, #1
 80129e4:	701a      	strb	r2, [r3, #0]
 80129e6:	e790      	b.n	801290a <_dtoa_r+0x62a>
 80129e8:	4ba3      	ldr	r3, [pc, #652]	; (8012c78 <_dtoa_r+0x998>)
 80129ea:	2200      	movs	r2, #0
 80129ec:	f7ed fe24 	bl	8000638 <__aeabi_dmul>
 80129f0:	2200      	movs	r2, #0
 80129f2:	2300      	movs	r3, #0
 80129f4:	4606      	mov	r6, r0
 80129f6:	460f      	mov	r7, r1
 80129f8:	f7ee f886 	bl	8000b08 <__aeabi_dcmpeq>
 80129fc:	2800      	cmp	r0, #0
 80129fe:	d09e      	beq.n	801293e <_dtoa_r+0x65e>
 8012a00:	e7d0      	b.n	80129a4 <_dtoa_r+0x6c4>
 8012a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a04:	2a00      	cmp	r2, #0
 8012a06:	f000 80ca 	beq.w	8012b9e <_dtoa_r+0x8be>
 8012a0a:	9a07      	ldr	r2, [sp, #28]
 8012a0c:	2a01      	cmp	r2, #1
 8012a0e:	f300 80ad 	bgt.w	8012b6c <_dtoa_r+0x88c>
 8012a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a14:	2a00      	cmp	r2, #0
 8012a16:	f000 80a5 	beq.w	8012b64 <_dtoa_r+0x884>
 8012a1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012a1e:	9e08      	ldr	r6, [sp, #32]
 8012a20:	9d05      	ldr	r5, [sp, #20]
 8012a22:	9a05      	ldr	r2, [sp, #20]
 8012a24:	441a      	add	r2, r3
 8012a26:	9205      	str	r2, [sp, #20]
 8012a28:	9a06      	ldr	r2, [sp, #24]
 8012a2a:	2101      	movs	r1, #1
 8012a2c:	441a      	add	r2, r3
 8012a2e:	4620      	mov	r0, r4
 8012a30:	9206      	str	r2, [sp, #24]
 8012a32:	f000 fc3d 	bl	80132b0 <__i2b>
 8012a36:	4607      	mov	r7, r0
 8012a38:	b165      	cbz	r5, 8012a54 <_dtoa_r+0x774>
 8012a3a:	9b06      	ldr	r3, [sp, #24]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	dd09      	ble.n	8012a54 <_dtoa_r+0x774>
 8012a40:	42ab      	cmp	r3, r5
 8012a42:	9a05      	ldr	r2, [sp, #20]
 8012a44:	bfa8      	it	ge
 8012a46:	462b      	movge	r3, r5
 8012a48:	1ad2      	subs	r2, r2, r3
 8012a4a:	9205      	str	r2, [sp, #20]
 8012a4c:	9a06      	ldr	r2, [sp, #24]
 8012a4e:	1aed      	subs	r5, r5, r3
 8012a50:	1ad3      	subs	r3, r2, r3
 8012a52:	9306      	str	r3, [sp, #24]
 8012a54:	9b08      	ldr	r3, [sp, #32]
 8012a56:	b1f3      	cbz	r3, 8012a96 <_dtoa_r+0x7b6>
 8012a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	f000 80a3 	beq.w	8012ba6 <_dtoa_r+0x8c6>
 8012a60:	2e00      	cmp	r6, #0
 8012a62:	dd10      	ble.n	8012a86 <_dtoa_r+0x7a6>
 8012a64:	4639      	mov	r1, r7
 8012a66:	4632      	mov	r2, r6
 8012a68:	4620      	mov	r0, r4
 8012a6a:	f000 fce1 	bl	8013430 <__pow5mult>
 8012a6e:	4652      	mov	r2, sl
 8012a70:	4601      	mov	r1, r0
 8012a72:	4607      	mov	r7, r0
 8012a74:	4620      	mov	r0, r4
 8012a76:	f000 fc31 	bl	80132dc <__multiply>
 8012a7a:	4651      	mov	r1, sl
 8012a7c:	4680      	mov	r8, r0
 8012a7e:	4620      	mov	r0, r4
 8012a80:	f000 fb60 	bl	8013144 <_Bfree>
 8012a84:	46c2      	mov	sl, r8
 8012a86:	9b08      	ldr	r3, [sp, #32]
 8012a88:	1b9a      	subs	r2, r3, r6
 8012a8a:	d004      	beq.n	8012a96 <_dtoa_r+0x7b6>
 8012a8c:	4651      	mov	r1, sl
 8012a8e:	4620      	mov	r0, r4
 8012a90:	f000 fcce 	bl	8013430 <__pow5mult>
 8012a94:	4682      	mov	sl, r0
 8012a96:	2101      	movs	r1, #1
 8012a98:	4620      	mov	r0, r4
 8012a9a:	f000 fc09 	bl	80132b0 <__i2b>
 8012a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	4606      	mov	r6, r0
 8012aa4:	f340 8081 	ble.w	8012baa <_dtoa_r+0x8ca>
 8012aa8:	461a      	mov	r2, r3
 8012aaa:	4601      	mov	r1, r0
 8012aac:	4620      	mov	r0, r4
 8012aae:	f000 fcbf 	bl	8013430 <__pow5mult>
 8012ab2:	9b07      	ldr	r3, [sp, #28]
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	4606      	mov	r6, r0
 8012ab8:	dd7a      	ble.n	8012bb0 <_dtoa_r+0x8d0>
 8012aba:	f04f 0800 	mov.w	r8, #0
 8012abe:	6933      	ldr	r3, [r6, #16]
 8012ac0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012ac4:	6918      	ldr	r0, [r3, #16]
 8012ac6:	f000 fba5 	bl	8013214 <__hi0bits>
 8012aca:	f1c0 0020 	rsb	r0, r0, #32
 8012ace:	9b06      	ldr	r3, [sp, #24]
 8012ad0:	4418      	add	r0, r3
 8012ad2:	f010 001f 	ands.w	r0, r0, #31
 8012ad6:	f000 8094 	beq.w	8012c02 <_dtoa_r+0x922>
 8012ada:	f1c0 0320 	rsb	r3, r0, #32
 8012ade:	2b04      	cmp	r3, #4
 8012ae0:	f340 8085 	ble.w	8012bee <_dtoa_r+0x90e>
 8012ae4:	9b05      	ldr	r3, [sp, #20]
 8012ae6:	f1c0 001c 	rsb	r0, r0, #28
 8012aea:	4403      	add	r3, r0
 8012aec:	9305      	str	r3, [sp, #20]
 8012aee:	9b06      	ldr	r3, [sp, #24]
 8012af0:	4403      	add	r3, r0
 8012af2:	4405      	add	r5, r0
 8012af4:	9306      	str	r3, [sp, #24]
 8012af6:	9b05      	ldr	r3, [sp, #20]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	dd05      	ble.n	8012b08 <_dtoa_r+0x828>
 8012afc:	4651      	mov	r1, sl
 8012afe:	461a      	mov	r2, r3
 8012b00:	4620      	mov	r0, r4
 8012b02:	f000 fcef 	bl	80134e4 <__lshift>
 8012b06:	4682      	mov	sl, r0
 8012b08:	9b06      	ldr	r3, [sp, #24]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	dd05      	ble.n	8012b1a <_dtoa_r+0x83a>
 8012b0e:	4631      	mov	r1, r6
 8012b10:	461a      	mov	r2, r3
 8012b12:	4620      	mov	r0, r4
 8012b14:	f000 fce6 	bl	80134e4 <__lshift>
 8012b18:	4606      	mov	r6, r0
 8012b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d072      	beq.n	8012c06 <_dtoa_r+0x926>
 8012b20:	4631      	mov	r1, r6
 8012b22:	4650      	mov	r0, sl
 8012b24:	f000 fd4a 	bl	80135bc <__mcmp>
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	da6c      	bge.n	8012c06 <_dtoa_r+0x926>
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	4651      	mov	r1, sl
 8012b30:	220a      	movs	r2, #10
 8012b32:	4620      	mov	r0, r4
 8012b34:	f000 fb28 	bl	8013188 <__multadd>
 8012b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012b3e:	4682      	mov	sl, r0
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	f000 81b0 	beq.w	8012ea6 <_dtoa_r+0xbc6>
 8012b46:	2300      	movs	r3, #0
 8012b48:	4639      	mov	r1, r7
 8012b4a:	220a      	movs	r2, #10
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	f000 fb1b 	bl	8013188 <__multadd>
 8012b52:	9b01      	ldr	r3, [sp, #4]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	4607      	mov	r7, r0
 8012b58:	f300 8096 	bgt.w	8012c88 <_dtoa_r+0x9a8>
 8012b5c:	9b07      	ldr	r3, [sp, #28]
 8012b5e:	2b02      	cmp	r3, #2
 8012b60:	dc59      	bgt.n	8012c16 <_dtoa_r+0x936>
 8012b62:	e091      	b.n	8012c88 <_dtoa_r+0x9a8>
 8012b64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012b6a:	e758      	b.n	8012a1e <_dtoa_r+0x73e>
 8012b6c:	9b04      	ldr	r3, [sp, #16]
 8012b6e:	1e5e      	subs	r6, r3, #1
 8012b70:	9b08      	ldr	r3, [sp, #32]
 8012b72:	42b3      	cmp	r3, r6
 8012b74:	bfbf      	itttt	lt
 8012b76:	9b08      	ldrlt	r3, [sp, #32]
 8012b78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012b7a:	9608      	strlt	r6, [sp, #32]
 8012b7c:	1af3      	sublt	r3, r6, r3
 8012b7e:	bfb4      	ite	lt
 8012b80:	18d2      	addlt	r2, r2, r3
 8012b82:	1b9e      	subge	r6, r3, r6
 8012b84:	9b04      	ldr	r3, [sp, #16]
 8012b86:	bfbc      	itt	lt
 8012b88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012b8a:	2600      	movlt	r6, #0
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	bfb7      	itett	lt
 8012b90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012b94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012b98:	1a9d      	sublt	r5, r3, r2
 8012b9a:	2300      	movlt	r3, #0
 8012b9c:	e741      	b.n	8012a22 <_dtoa_r+0x742>
 8012b9e:	9e08      	ldr	r6, [sp, #32]
 8012ba0:	9d05      	ldr	r5, [sp, #20]
 8012ba2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012ba4:	e748      	b.n	8012a38 <_dtoa_r+0x758>
 8012ba6:	9a08      	ldr	r2, [sp, #32]
 8012ba8:	e770      	b.n	8012a8c <_dtoa_r+0x7ac>
 8012baa:	9b07      	ldr	r3, [sp, #28]
 8012bac:	2b01      	cmp	r3, #1
 8012bae:	dc19      	bgt.n	8012be4 <_dtoa_r+0x904>
 8012bb0:	9b02      	ldr	r3, [sp, #8]
 8012bb2:	b9bb      	cbnz	r3, 8012be4 <_dtoa_r+0x904>
 8012bb4:	9b03      	ldr	r3, [sp, #12]
 8012bb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012bba:	b99b      	cbnz	r3, 8012be4 <_dtoa_r+0x904>
 8012bbc:	9b03      	ldr	r3, [sp, #12]
 8012bbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012bc2:	0d1b      	lsrs	r3, r3, #20
 8012bc4:	051b      	lsls	r3, r3, #20
 8012bc6:	b183      	cbz	r3, 8012bea <_dtoa_r+0x90a>
 8012bc8:	9b05      	ldr	r3, [sp, #20]
 8012bca:	3301      	adds	r3, #1
 8012bcc:	9305      	str	r3, [sp, #20]
 8012bce:	9b06      	ldr	r3, [sp, #24]
 8012bd0:	3301      	adds	r3, #1
 8012bd2:	9306      	str	r3, [sp, #24]
 8012bd4:	f04f 0801 	mov.w	r8, #1
 8012bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	f47f af6f 	bne.w	8012abe <_dtoa_r+0x7de>
 8012be0:	2001      	movs	r0, #1
 8012be2:	e774      	b.n	8012ace <_dtoa_r+0x7ee>
 8012be4:	f04f 0800 	mov.w	r8, #0
 8012be8:	e7f6      	b.n	8012bd8 <_dtoa_r+0x8f8>
 8012bea:	4698      	mov	r8, r3
 8012bec:	e7f4      	b.n	8012bd8 <_dtoa_r+0x8f8>
 8012bee:	d082      	beq.n	8012af6 <_dtoa_r+0x816>
 8012bf0:	9a05      	ldr	r2, [sp, #20]
 8012bf2:	331c      	adds	r3, #28
 8012bf4:	441a      	add	r2, r3
 8012bf6:	9205      	str	r2, [sp, #20]
 8012bf8:	9a06      	ldr	r2, [sp, #24]
 8012bfa:	441a      	add	r2, r3
 8012bfc:	441d      	add	r5, r3
 8012bfe:	9206      	str	r2, [sp, #24]
 8012c00:	e779      	b.n	8012af6 <_dtoa_r+0x816>
 8012c02:	4603      	mov	r3, r0
 8012c04:	e7f4      	b.n	8012bf0 <_dtoa_r+0x910>
 8012c06:	9b04      	ldr	r3, [sp, #16]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	dc37      	bgt.n	8012c7c <_dtoa_r+0x99c>
 8012c0c:	9b07      	ldr	r3, [sp, #28]
 8012c0e:	2b02      	cmp	r3, #2
 8012c10:	dd34      	ble.n	8012c7c <_dtoa_r+0x99c>
 8012c12:	9b04      	ldr	r3, [sp, #16]
 8012c14:	9301      	str	r3, [sp, #4]
 8012c16:	9b01      	ldr	r3, [sp, #4]
 8012c18:	b963      	cbnz	r3, 8012c34 <_dtoa_r+0x954>
 8012c1a:	4631      	mov	r1, r6
 8012c1c:	2205      	movs	r2, #5
 8012c1e:	4620      	mov	r0, r4
 8012c20:	f000 fab2 	bl	8013188 <__multadd>
 8012c24:	4601      	mov	r1, r0
 8012c26:	4606      	mov	r6, r0
 8012c28:	4650      	mov	r0, sl
 8012c2a:	f000 fcc7 	bl	80135bc <__mcmp>
 8012c2e:	2800      	cmp	r0, #0
 8012c30:	f73f adbb 	bgt.w	80127aa <_dtoa_r+0x4ca>
 8012c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c36:	9d00      	ldr	r5, [sp, #0]
 8012c38:	ea6f 0b03 	mvn.w	fp, r3
 8012c3c:	f04f 0800 	mov.w	r8, #0
 8012c40:	4631      	mov	r1, r6
 8012c42:	4620      	mov	r0, r4
 8012c44:	f000 fa7e 	bl	8013144 <_Bfree>
 8012c48:	2f00      	cmp	r7, #0
 8012c4a:	f43f aeab 	beq.w	80129a4 <_dtoa_r+0x6c4>
 8012c4e:	f1b8 0f00 	cmp.w	r8, #0
 8012c52:	d005      	beq.n	8012c60 <_dtoa_r+0x980>
 8012c54:	45b8      	cmp	r8, r7
 8012c56:	d003      	beq.n	8012c60 <_dtoa_r+0x980>
 8012c58:	4641      	mov	r1, r8
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	f000 fa72 	bl	8013144 <_Bfree>
 8012c60:	4639      	mov	r1, r7
 8012c62:	4620      	mov	r0, r4
 8012c64:	f000 fa6e 	bl	8013144 <_Bfree>
 8012c68:	e69c      	b.n	80129a4 <_dtoa_r+0x6c4>
 8012c6a:	2600      	movs	r6, #0
 8012c6c:	4637      	mov	r7, r6
 8012c6e:	e7e1      	b.n	8012c34 <_dtoa_r+0x954>
 8012c70:	46bb      	mov	fp, r7
 8012c72:	4637      	mov	r7, r6
 8012c74:	e599      	b.n	80127aa <_dtoa_r+0x4ca>
 8012c76:	bf00      	nop
 8012c78:	40240000 	.word	0x40240000
 8012c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	f000 80c8 	beq.w	8012e14 <_dtoa_r+0xb34>
 8012c84:	9b04      	ldr	r3, [sp, #16]
 8012c86:	9301      	str	r3, [sp, #4]
 8012c88:	2d00      	cmp	r5, #0
 8012c8a:	dd05      	ble.n	8012c98 <_dtoa_r+0x9b8>
 8012c8c:	4639      	mov	r1, r7
 8012c8e:	462a      	mov	r2, r5
 8012c90:	4620      	mov	r0, r4
 8012c92:	f000 fc27 	bl	80134e4 <__lshift>
 8012c96:	4607      	mov	r7, r0
 8012c98:	f1b8 0f00 	cmp.w	r8, #0
 8012c9c:	d05b      	beq.n	8012d56 <_dtoa_r+0xa76>
 8012c9e:	6879      	ldr	r1, [r7, #4]
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	f000 fa0f 	bl	80130c4 <_Balloc>
 8012ca6:	4605      	mov	r5, r0
 8012ca8:	b928      	cbnz	r0, 8012cb6 <_dtoa_r+0x9d6>
 8012caa:	4b83      	ldr	r3, [pc, #524]	; (8012eb8 <_dtoa_r+0xbd8>)
 8012cac:	4602      	mov	r2, r0
 8012cae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012cb2:	f7ff bb2e 	b.w	8012312 <_dtoa_r+0x32>
 8012cb6:	693a      	ldr	r2, [r7, #16]
 8012cb8:	3202      	adds	r2, #2
 8012cba:	0092      	lsls	r2, r2, #2
 8012cbc:	f107 010c 	add.w	r1, r7, #12
 8012cc0:	300c      	adds	r0, #12
 8012cc2:	f7ff fa77 	bl	80121b4 <memcpy>
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	4629      	mov	r1, r5
 8012cca:	4620      	mov	r0, r4
 8012ccc:	f000 fc0a 	bl	80134e4 <__lshift>
 8012cd0:	9b00      	ldr	r3, [sp, #0]
 8012cd2:	3301      	adds	r3, #1
 8012cd4:	9304      	str	r3, [sp, #16]
 8012cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cda:	4413      	add	r3, r2
 8012cdc:	9308      	str	r3, [sp, #32]
 8012cde:	9b02      	ldr	r3, [sp, #8]
 8012ce0:	f003 0301 	and.w	r3, r3, #1
 8012ce4:	46b8      	mov	r8, r7
 8012ce6:	9306      	str	r3, [sp, #24]
 8012ce8:	4607      	mov	r7, r0
 8012cea:	9b04      	ldr	r3, [sp, #16]
 8012cec:	4631      	mov	r1, r6
 8012cee:	3b01      	subs	r3, #1
 8012cf0:	4650      	mov	r0, sl
 8012cf2:	9301      	str	r3, [sp, #4]
 8012cf4:	f7ff fa6c 	bl	80121d0 <quorem>
 8012cf8:	4641      	mov	r1, r8
 8012cfa:	9002      	str	r0, [sp, #8]
 8012cfc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012d00:	4650      	mov	r0, sl
 8012d02:	f000 fc5b 	bl	80135bc <__mcmp>
 8012d06:	463a      	mov	r2, r7
 8012d08:	9005      	str	r0, [sp, #20]
 8012d0a:	4631      	mov	r1, r6
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	f000 fc71 	bl	80135f4 <__mdiff>
 8012d12:	68c2      	ldr	r2, [r0, #12]
 8012d14:	4605      	mov	r5, r0
 8012d16:	bb02      	cbnz	r2, 8012d5a <_dtoa_r+0xa7a>
 8012d18:	4601      	mov	r1, r0
 8012d1a:	4650      	mov	r0, sl
 8012d1c:	f000 fc4e 	bl	80135bc <__mcmp>
 8012d20:	4602      	mov	r2, r0
 8012d22:	4629      	mov	r1, r5
 8012d24:	4620      	mov	r0, r4
 8012d26:	9209      	str	r2, [sp, #36]	; 0x24
 8012d28:	f000 fa0c 	bl	8013144 <_Bfree>
 8012d2c:	9b07      	ldr	r3, [sp, #28]
 8012d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d30:	9d04      	ldr	r5, [sp, #16]
 8012d32:	ea43 0102 	orr.w	r1, r3, r2
 8012d36:	9b06      	ldr	r3, [sp, #24]
 8012d38:	4319      	orrs	r1, r3
 8012d3a:	d110      	bne.n	8012d5e <_dtoa_r+0xa7e>
 8012d3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012d40:	d029      	beq.n	8012d96 <_dtoa_r+0xab6>
 8012d42:	9b05      	ldr	r3, [sp, #20]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	dd02      	ble.n	8012d4e <_dtoa_r+0xa6e>
 8012d48:	9b02      	ldr	r3, [sp, #8]
 8012d4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012d4e:	9b01      	ldr	r3, [sp, #4]
 8012d50:	f883 9000 	strb.w	r9, [r3]
 8012d54:	e774      	b.n	8012c40 <_dtoa_r+0x960>
 8012d56:	4638      	mov	r0, r7
 8012d58:	e7ba      	b.n	8012cd0 <_dtoa_r+0x9f0>
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	e7e1      	b.n	8012d22 <_dtoa_r+0xa42>
 8012d5e:	9b05      	ldr	r3, [sp, #20]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	db04      	blt.n	8012d6e <_dtoa_r+0xa8e>
 8012d64:	9907      	ldr	r1, [sp, #28]
 8012d66:	430b      	orrs	r3, r1
 8012d68:	9906      	ldr	r1, [sp, #24]
 8012d6a:	430b      	orrs	r3, r1
 8012d6c:	d120      	bne.n	8012db0 <_dtoa_r+0xad0>
 8012d6e:	2a00      	cmp	r2, #0
 8012d70:	dded      	ble.n	8012d4e <_dtoa_r+0xa6e>
 8012d72:	4651      	mov	r1, sl
 8012d74:	2201      	movs	r2, #1
 8012d76:	4620      	mov	r0, r4
 8012d78:	f000 fbb4 	bl	80134e4 <__lshift>
 8012d7c:	4631      	mov	r1, r6
 8012d7e:	4682      	mov	sl, r0
 8012d80:	f000 fc1c 	bl	80135bc <__mcmp>
 8012d84:	2800      	cmp	r0, #0
 8012d86:	dc03      	bgt.n	8012d90 <_dtoa_r+0xab0>
 8012d88:	d1e1      	bne.n	8012d4e <_dtoa_r+0xa6e>
 8012d8a:	f019 0f01 	tst.w	r9, #1
 8012d8e:	d0de      	beq.n	8012d4e <_dtoa_r+0xa6e>
 8012d90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012d94:	d1d8      	bne.n	8012d48 <_dtoa_r+0xa68>
 8012d96:	9a01      	ldr	r2, [sp, #4]
 8012d98:	2339      	movs	r3, #57	; 0x39
 8012d9a:	7013      	strb	r3, [r2, #0]
 8012d9c:	462b      	mov	r3, r5
 8012d9e:	461d      	mov	r5, r3
 8012da0:	3b01      	subs	r3, #1
 8012da2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012da6:	2a39      	cmp	r2, #57	; 0x39
 8012da8:	d06c      	beq.n	8012e84 <_dtoa_r+0xba4>
 8012daa:	3201      	adds	r2, #1
 8012dac:	701a      	strb	r2, [r3, #0]
 8012dae:	e747      	b.n	8012c40 <_dtoa_r+0x960>
 8012db0:	2a00      	cmp	r2, #0
 8012db2:	dd07      	ble.n	8012dc4 <_dtoa_r+0xae4>
 8012db4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012db8:	d0ed      	beq.n	8012d96 <_dtoa_r+0xab6>
 8012dba:	9a01      	ldr	r2, [sp, #4]
 8012dbc:	f109 0301 	add.w	r3, r9, #1
 8012dc0:	7013      	strb	r3, [r2, #0]
 8012dc2:	e73d      	b.n	8012c40 <_dtoa_r+0x960>
 8012dc4:	9b04      	ldr	r3, [sp, #16]
 8012dc6:	9a08      	ldr	r2, [sp, #32]
 8012dc8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	d043      	beq.n	8012e58 <_dtoa_r+0xb78>
 8012dd0:	4651      	mov	r1, sl
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	220a      	movs	r2, #10
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	f000 f9d6 	bl	8013188 <__multadd>
 8012ddc:	45b8      	cmp	r8, r7
 8012dde:	4682      	mov	sl, r0
 8012de0:	f04f 0300 	mov.w	r3, #0
 8012de4:	f04f 020a 	mov.w	r2, #10
 8012de8:	4641      	mov	r1, r8
 8012dea:	4620      	mov	r0, r4
 8012dec:	d107      	bne.n	8012dfe <_dtoa_r+0xb1e>
 8012dee:	f000 f9cb 	bl	8013188 <__multadd>
 8012df2:	4680      	mov	r8, r0
 8012df4:	4607      	mov	r7, r0
 8012df6:	9b04      	ldr	r3, [sp, #16]
 8012df8:	3301      	adds	r3, #1
 8012dfa:	9304      	str	r3, [sp, #16]
 8012dfc:	e775      	b.n	8012cea <_dtoa_r+0xa0a>
 8012dfe:	f000 f9c3 	bl	8013188 <__multadd>
 8012e02:	4639      	mov	r1, r7
 8012e04:	4680      	mov	r8, r0
 8012e06:	2300      	movs	r3, #0
 8012e08:	220a      	movs	r2, #10
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f000 f9bc 	bl	8013188 <__multadd>
 8012e10:	4607      	mov	r7, r0
 8012e12:	e7f0      	b.n	8012df6 <_dtoa_r+0xb16>
 8012e14:	9b04      	ldr	r3, [sp, #16]
 8012e16:	9301      	str	r3, [sp, #4]
 8012e18:	9d00      	ldr	r5, [sp, #0]
 8012e1a:	4631      	mov	r1, r6
 8012e1c:	4650      	mov	r0, sl
 8012e1e:	f7ff f9d7 	bl	80121d0 <quorem>
 8012e22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012e26:	9b00      	ldr	r3, [sp, #0]
 8012e28:	f805 9b01 	strb.w	r9, [r5], #1
 8012e2c:	1aea      	subs	r2, r5, r3
 8012e2e:	9b01      	ldr	r3, [sp, #4]
 8012e30:	4293      	cmp	r3, r2
 8012e32:	dd07      	ble.n	8012e44 <_dtoa_r+0xb64>
 8012e34:	4651      	mov	r1, sl
 8012e36:	2300      	movs	r3, #0
 8012e38:	220a      	movs	r2, #10
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	f000 f9a4 	bl	8013188 <__multadd>
 8012e40:	4682      	mov	sl, r0
 8012e42:	e7ea      	b.n	8012e1a <_dtoa_r+0xb3a>
 8012e44:	9b01      	ldr	r3, [sp, #4]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	bfc8      	it	gt
 8012e4a:	461d      	movgt	r5, r3
 8012e4c:	9b00      	ldr	r3, [sp, #0]
 8012e4e:	bfd8      	it	le
 8012e50:	2501      	movle	r5, #1
 8012e52:	441d      	add	r5, r3
 8012e54:	f04f 0800 	mov.w	r8, #0
 8012e58:	4651      	mov	r1, sl
 8012e5a:	2201      	movs	r2, #1
 8012e5c:	4620      	mov	r0, r4
 8012e5e:	f000 fb41 	bl	80134e4 <__lshift>
 8012e62:	4631      	mov	r1, r6
 8012e64:	4682      	mov	sl, r0
 8012e66:	f000 fba9 	bl	80135bc <__mcmp>
 8012e6a:	2800      	cmp	r0, #0
 8012e6c:	dc96      	bgt.n	8012d9c <_dtoa_r+0xabc>
 8012e6e:	d102      	bne.n	8012e76 <_dtoa_r+0xb96>
 8012e70:	f019 0f01 	tst.w	r9, #1
 8012e74:	d192      	bne.n	8012d9c <_dtoa_r+0xabc>
 8012e76:	462b      	mov	r3, r5
 8012e78:	461d      	mov	r5, r3
 8012e7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e7e:	2a30      	cmp	r2, #48	; 0x30
 8012e80:	d0fa      	beq.n	8012e78 <_dtoa_r+0xb98>
 8012e82:	e6dd      	b.n	8012c40 <_dtoa_r+0x960>
 8012e84:	9a00      	ldr	r2, [sp, #0]
 8012e86:	429a      	cmp	r2, r3
 8012e88:	d189      	bne.n	8012d9e <_dtoa_r+0xabe>
 8012e8a:	f10b 0b01 	add.w	fp, fp, #1
 8012e8e:	2331      	movs	r3, #49	; 0x31
 8012e90:	e796      	b.n	8012dc0 <_dtoa_r+0xae0>
 8012e92:	4b0a      	ldr	r3, [pc, #40]	; (8012ebc <_dtoa_r+0xbdc>)
 8012e94:	f7ff ba99 	b.w	80123ca <_dtoa_r+0xea>
 8012e98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	f47f aa6d 	bne.w	801237a <_dtoa_r+0x9a>
 8012ea0:	4b07      	ldr	r3, [pc, #28]	; (8012ec0 <_dtoa_r+0xbe0>)
 8012ea2:	f7ff ba92 	b.w	80123ca <_dtoa_r+0xea>
 8012ea6:	9b01      	ldr	r3, [sp, #4]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	dcb5      	bgt.n	8012e18 <_dtoa_r+0xb38>
 8012eac:	9b07      	ldr	r3, [sp, #28]
 8012eae:	2b02      	cmp	r3, #2
 8012eb0:	f73f aeb1 	bgt.w	8012c16 <_dtoa_r+0x936>
 8012eb4:	e7b0      	b.n	8012e18 <_dtoa_r+0xb38>
 8012eb6:	bf00      	nop
 8012eb8:	080164c0 	.word	0x080164c0
 8012ebc:	08016420 	.word	0x08016420
 8012ec0:	08016444 	.word	0x08016444

08012ec4 <_free_r>:
 8012ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ec6:	2900      	cmp	r1, #0
 8012ec8:	d044      	beq.n	8012f54 <_free_r+0x90>
 8012eca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ece:	9001      	str	r0, [sp, #4]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	f1a1 0404 	sub.w	r4, r1, #4
 8012ed6:	bfb8      	it	lt
 8012ed8:	18e4      	addlt	r4, r4, r3
 8012eda:	f000 f8e7 	bl	80130ac <__malloc_lock>
 8012ede:	4a1e      	ldr	r2, [pc, #120]	; (8012f58 <_free_r+0x94>)
 8012ee0:	9801      	ldr	r0, [sp, #4]
 8012ee2:	6813      	ldr	r3, [r2, #0]
 8012ee4:	b933      	cbnz	r3, 8012ef4 <_free_r+0x30>
 8012ee6:	6063      	str	r3, [r4, #4]
 8012ee8:	6014      	str	r4, [r2, #0]
 8012eea:	b003      	add	sp, #12
 8012eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ef0:	f000 b8e2 	b.w	80130b8 <__malloc_unlock>
 8012ef4:	42a3      	cmp	r3, r4
 8012ef6:	d908      	bls.n	8012f0a <_free_r+0x46>
 8012ef8:	6825      	ldr	r5, [r4, #0]
 8012efa:	1961      	adds	r1, r4, r5
 8012efc:	428b      	cmp	r3, r1
 8012efe:	bf01      	itttt	eq
 8012f00:	6819      	ldreq	r1, [r3, #0]
 8012f02:	685b      	ldreq	r3, [r3, #4]
 8012f04:	1949      	addeq	r1, r1, r5
 8012f06:	6021      	streq	r1, [r4, #0]
 8012f08:	e7ed      	b.n	8012ee6 <_free_r+0x22>
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	685b      	ldr	r3, [r3, #4]
 8012f0e:	b10b      	cbz	r3, 8012f14 <_free_r+0x50>
 8012f10:	42a3      	cmp	r3, r4
 8012f12:	d9fa      	bls.n	8012f0a <_free_r+0x46>
 8012f14:	6811      	ldr	r1, [r2, #0]
 8012f16:	1855      	adds	r5, r2, r1
 8012f18:	42a5      	cmp	r5, r4
 8012f1a:	d10b      	bne.n	8012f34 <_free_r+0x70>
 8012f1c:	6824      	ldr	r4, [r4, #0]
 8012f1e:	4421      	add	r1, r4
 8012f20:	1854      	adds	r4, r2, r1
 8012f22:	42a3      	cmp	r3, r4
 8012f24:	6011      	str	r1, [r2, #0]
 8012f26:	d1e0      	bne.n	8012eea <_free_r+0x26>
 8012f28:	681c      	ldr	r4, [r3, #0]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	6053      	str	r3, [r2, #4]
 8012f2e:	440c      	add	r4, r1
 8012f30:	6014      	str	r4, [r2, #0]
 8012f32:	e7da      	b.n	8012eea <_free_r+0x26>
 8012f34:	d902      	bls.n	8012f3c <_free_r+0x78>
 8012f36:	230c      	movs	r3, #12
 8012f38:	6003      	str	r3, [r0, #0]
 8012f3a:	e7d6      	b.n	8012eea <_free_r+0x26>
 8012f3c:	6825      	ldr	r5, [r4, #0]
 8012f3e:	1961      	adds	r1, r4, r5
 8012f40:	428b      	cmp	r3, r1
 8012f42:	bf04      	itt	eq
 8012f44:	6819      	ldreq	r1, [r3, #0]
 8012f46:	685b      	ldreq	r3, [r3, #4]
 8012f48:	6063      	str	r3, [r4, #4]
 8012f4a:	bf04      	itt	eq
 8012f4c:	1949      	addeq	r1, r1, r5
 8012f4e:	6021      	streq	r1, [r4, #0]
 8012f50:	6054      	str	r4, [r2, #4]
 8012f52:	e7ca      	b.n	8012eea <_free_r+0x26>
 8012f54:	b003      	add	sp, #12
 8012f56:	bd30      	pop	{r4, r5, pc}
 8012f58:	2000792c 	.word	0x2000792c

08012f5c <malloc>:
 8012f5c:	4b02      	ldr	r3, [pc, #8]	; (8012f68 <malloc+0xc>)
 8012f5e:	4601      	mov	r1, r0
 8012f60:	6818      	ldr	r0, [r3, #0]
 8012f62:	f000 b823 	b.w	8012fac <_malloc_r>
 8012f66:	bf00      	nop
 8012f68:	20000094 	.word	0x20000094

08012f6c <sbrk_aligned>:
 8012f6c:	b570      	push	{r4, r5, r6, lr}
 8012f6e:	4e0e      	ldr	r6, [pc, #56]	; (8012fa8 <sbrk_aligned+0x3c>)
 8012f70:	460c      	mov	r4, r1
 8012f72:	6831      	ldr	r1, [r6, #0]
 8012f74:	4605      	mov	r5, r0
 8012f76:	b911      	cbnz	r1, 8012f7e <sbrk_aligned+0x12>
 8012f78:	f000 fe40 	bl	8013bfc <_sbrk_r>
 8012f7c:	6030      	str	r0, [r6, #0]
 8012f7e:	4621      	mov	r1, r4
 8012f80:	4628      	mov	r0, r5
 8012f82:	f000 fe3b 	bl	8013bfc <_sbrk_r>
 8012f86:	1c43      	adds	r3, r0, #1
 8012f88:	d00a      	beq.n	8012fa0 <sbrk_aligned+0x34>
 8012f8a:	1cc4      	adds	r4, r0, #3
 8012f8c:	f024 0403 	bic.w	r4, r4, #3
 8012f90:	42a0      	cmp	r0, r4
 8012f92:	d007      	beq.n	8012fa4 <sbrk_aligned+0x38>
 8012f94:	1a21      	subs	r1, r4, r0
 8012f96:	4628      	mov	r0, r5
 8012f98:	f000 fe30 	bl	8013bfc <_sbrk_r>
 8012f9c:	3001      	adds	r0, #1
 8012f9e:	d101      	bne.n	8012fa4 <sbrk_aligned+0x38>
 8012fa0:	f04f 34ff 	mov.w	r4, #4294967295
 8012fa4:	4620      	mov	r0, r4
 8012fa6:	bd70      	pop	{r4, r5, r6, pc}
 8012fa8:	20007930 	.word	0x20007930

08012fac <_malloc_r>:
 8012fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fb0:	1ccd      	adds	r5, r1, #3
 8012fb2:	f025 0503 	bic.w	r5, r5, #3
 8012fb6:	3508      	adds	r5, #8
 8012fb8:	2d0c      	cmp	r5, #12
 8012fba:	bf38      	it	cc
 8012fbc:	250c      	movcc	r5, #12
 8012fbe:	2d00      	cmp	r5, #0
 8012fc0:	4607      	mov	r7, r0
 8012fc2:	db01      	blt.n	8012fc8 <_malloc_r+0x1c>
 8012fc4:	42a9      	cmp	r1, r5
 8012fc6:	d905      	bls.n	8012fd4 <_malloc_r+0x28>
 8012fc8:	230c      	movs	r3, #12
 8012fca:	603b      	str	r3, [r7, #0]
 8012fcc:	2600      	movs	r6, #0
 8012fce:	4630      	mov	r0, r6
 8012fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80130a8 <_malloc_r+0xfc>
 8012fd8:	f000 f868 	bl	80130ac <__malloc_lock>
 8012fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8012fe0:	461c      	mov	r4, r3
 8012fe2:	bb5c      	cbnz	r4, 801303c <_malloc_r+0x90>
 8012fe4:	4629      	mov	r1, r5
 8012fe6:	4638      	mov	r0, r7
 8012fe8:	f7ff ffc0 	bl	8012f6c <sbrk_aligned>
 8012fec:	1c43      	adds	r3, r0, #1
 8012fee:	4604      	mov	r4, r0
 8012ff0:	d155      	bne.n	801309e <_malloc_r+0xf2>
 8012ff2:	f8d8 4000 	ldr.w	r4, [r8]
 8012ff6:	4626      	mov	r6, r4
 8012ff8:	2e00      	cmp	r6, #0
 8012ffa:	d145      	bne.n	8013088 <_malloc_r+0xdc>
 8012ffc:	2c00      	cmp	r4, #0
 8012ffe:	d048      	beq.n	8013092 <_malloc_r+0xe6>
 8013000:	6823      	ldr	r3, [r4, #0]
 8013002:	4631      	mov	r1, r6
 8013004:	4638      	mov	r0, r7
 8013006:	eb04 0903 	add.w	r9, r4, r3
 801300a:	f000 fdf7 	bl	8013bfc <_sbrk_r>
 801300e:	4581      	cmp	r9, r0
 8013010:	d13f      	bne.n	8013092 <_malloc_r+0xe6>
 8013012:	6821      	ldr	r1, [r4, #0]
 8013014:	1a6d      	subs	r5, r5, r1
 8013016:	4629      	mov	r1, r5
 8013018:	4638      	mov	r0, r7
 801301a:	f7ff ffa7 	bl	8012f6c <sbrk_aligned>
 801301e:	3001      	adds	r0, #1
 8013020:	d037      	beq.n	8013092 <_malloc_r+0xe6>
 8013022:	6823      	ldr	r3, [r4, #0]
 8013024:	442b      	add	r3, r5
 8013026:	6023      	str	r3, [r4, #0]
 8013028:	f8d8 3000 	ldr.w	r3, [r8]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d038      	beq.n	80130a2 <_malloc_r+0xf6>
 8013030:	685a      	ldr	r2, [r3, #4]
 8013032:	42a2      	cmp	r2, r4
 8013034:	d12b      	bne.n	801308e <_malloc_r+0xe2>
 8013036:	2200      	movs	r2, #0
 8013038:	605a      	str	r2, [r3, #4]
 801303a:	e00f      	b.n	801305c <_malloc_r+0xb0>
 801303c:	6822      	ldr	r2, [r4, #0]
 801303e:	1b52      	subs	r2, r2, r5
 8013040:	d41f      	bmi.n	8013082 <_malloc_r+0xd6>
 8013042:	2a0b      	cmp	r2, #11
 8013044:	d917      	bls.n	8013076 <_malloc_r+0xca>
 8013046:	1961      	adds	r1, r4, r5
 8013048:	42a3      	cmp	r3, r4
 801304a:	6025      	str	r5, [r4, #0]
 801304c:	bf18      	it	ne
 801304e:	6059      	strne	r1, [r3, #4]
 8013050:	6863      	ldr	r3, [r4, #4]
 8013052:	bf08      	it	eq
 8013054:	f8c8 1000 	streq.w	r1, [r8]
 8013058:	5162      	str	r2, [r4, r5]
 801305a:	604b      	str	r3, [r1, #4]
 801305c:	4638      	mov	r0, r7
 801305e:	f104 060b 	add.w	r6, r4, #11
 8013062:	f000 f829 	bl	80130b8 <__malloc_unlock>
 8013066:	f026 0607 	bic.w	r6, r6, #7
 801306a:	1d23      	adds	r3, r4, #4
 801306c:	1af2      	subs	r2, r6, r3
 801306e:	d0ae      	beq.n	8012fce <_malloc_r+0x22>
 8013070:	1b9b      	subs	r3, r3, r6
 8013072:	50a3      	str	r3, [r4, r2]
 8013074:	e7ab      	b.n	8012fce <_malloc_r+0x22>
 8013076:	42a3      	cmp	r3, r4
 8013078:	6862      	ldr	r2, [r4, #4]
 801307a:	d1dd      	bne.n	8013038 <_malloc_r+0x8c>
 801307c:	f8c8 2000 	str.w	r2, [r8]
 8013080:	e7ec      	b.n	801305c <_malloc_r+0xb0>
 8013082:	4623      	mov	r3, r4
 8013084:	6864      	ldr	r4, [r4, #4]
 8013086:	e7ac      	b.n	8012fe2 <_malloc_r+0x36>
 8013088:	4634      	mov	r4, r6
 801308a:	6876      	ldr	r6, [r6, #4]
 801308c:	e7b4      	b.n	8012ff8 <_malloc_r+0x4c>
 801308e:	4613      	mov	r3, r2
 8013090:	e7cc      	b.n	801302c <_malloc_r+0x80>
 8013092:	230c      	movs	r3, #12
 8013094:	603b      	str	r3, [r7, #0]
 8013096:	4638      	mov	r0, r7
 8013098:	f000 f80e 	bl	80130b8 <__malloc_unlock>
 801309c:	e797      	b.n	8012fce <_malloc_r+0x22>
 801309e:	6025      	str	r5, [r4, #0]
 80130a0:	e7dc      	b.n	801305c <_malloc_r+0xb0>
 80130a2:	605b      	str	r3, [r3, #4]
 80130a4:	deff      	udf	#255	; 0xff
 80130a6:	bf00      	nop
 80130a8:	2000792c 	.word	0x2000792c

080130ac <__malloc_lock>:
 80130ac:	4801      	ldr	r0, [pc, #4]	; (80130b4 <__malloc_lock+0x8>)
 80130ae:	f7ff b87f 	b.w	80121b0 <__retarget_lock_acquire_recursive>
 80130b2:	bf00      	nop
 80130b4:	20007928 	.word	0x20007928

080130b8 <__malloc_unlock>:
 80130b8:	4801      	ldr	r0, [pc, #4]	; (80130c0 <__malloc_unlock+0x8>)
 80130ba:	f7ff b87a 	b.w	80121b2 <__retarget_lock_release_recursive>
 80130be:	bf00      	nop
 80130c0:	20007928 	.word	0x20007928

080130c4 <_Balloc>:
 80130c4:	b570      	push	{r4, r5, r6, lr}
 80130c6:	69c6      	ldr	r6, [r0, #28]
 80130c8:	4604      	mov	r4, r0
 80130ca:	460d      	mov	r5, r1
 80130cc:	b976      	cbnz	r6, 80130ec <_Balloc+0x28>
 80130ce:	2010      	movs	r0, #16
 80130d0:	f7ff ff44 	bl	8012f5c <malloc>
 80130d4:	4602      	mov	r2, r0
 80130d6:	61e0      	str	r0, [r4, #28]
 80130d8:	b920      	cbnz	r0, 80130e4 <_Balloc+0x20>
 80130da:	4b18      	ldr	r3, [pc, #96]	; (801313c <_Balloc+0x78>)
 80130dc:	4818      	ldr	r0, [pc, #96]	; (8013140 <_Balloc+0x7c>)
 80130de:	216b      	movs	r1, #107	; 0x6b
 80130e0:	f000 fd9c 	bl	8013c1c <__assert_func>
 80130e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80130e8:	6006      	str	r6, [r0, #0]
 80130ea:	60c6      	str	r6, [r0, #12]
 80130ec:	69e6      	ldr	r6, [r4, #28]
 80130ee:	68f3      	ldr	r3, [r6, #12]
 80130f0:	b183      	cbz	r3, 8013114 <_Balloc+0x50>
 80130f2:	69e3      	ldr	r3, [r4, #28]
 80130f4:	68db      	ldr	r3, [r3, #12]
 80130f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80130fa:	b9b8      	cbnz	r0, 801312c <_Balloc+0x68>
 80130fc:	2101      	movs	r1, #1
 80130fe:	fa01 f605 	lsl.w	r6, r1, r5
 8013102:	1d72      	adds	r2, r6, #5
 8013104:	0092      	lsls	r2, r2, #2
 8013106:	4620      	mov	r0, r4
 8013108:	f000 fda6 	bl	8013c58 <_calloc_r>
 801310c:	b160      	cbz	r0, 8013128 <_Balloc+0x64>
 801310e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013112:	e00e      	b.n	8013132 <_Balloc+0x6e>
 8013114:	2221      	movs	r2, #33	; 0x21
 8013116:	2104      	movs	r1, #4
 8013118:	4620      	mov	r0, r4
 801311a:	f000 fd9d 	bl	8013c58 <_calloc_r>
 801311e:	69e3      	ldr	r3, [r4, #28]
 8013120:	60f0      	str	r0, [r6, #12]
 8013122:	68db      	ldr	r3, [r3, #12]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d1e4      	bne.n	80130f2 <_Balloc+0x2e>
 8013128:	2000      	movs	r0, #0
 801312a:	bd70      	pop	{r4, r5, r6, pc}
 801312c:	6802      	ldr	r2, [r0, #0]
 801312e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013132:	2300      	movs	r3, #0
 8013134:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013138:	e7f7      	b.n	801312a <_Balloc+0x66>
 801313a:	bf00      	nop
 801313c:	08016451 	.word	0x08016451
 8013140:	080164d1 	.word	0x080164d1

08013144 <_Bfree>:
 8013144:	b570      	push	{r4, r5, r6, lr}
 8013146:	69c6      	ldr	r6, [r0, #28]
 8013148:	4605      	mov	r5, r0
 801314a:	460c      	mov	r4, r1
 801314c:	b976      	cbnz	r6, 801316c <_Bfree+0x28>
 801314e:	2010      	movs	r0, #16
 8013150:	f7ff ff04 	bl	8012f5c <malloc>
 8013154:	4602      	mov	r2, r0
 8013156:	61e8      	str	r0, [r5, #28]
 8013158:	b920      	cbnz	r0, 8013164 <_Bfree+0x20>
 801315a:	4b09      	ldr	r3, [pc, #36]	; (8013180 <_Bfree+0x3c>)
 801315c:	4809      	ldr	r0, [pc, #36]	; (8013184 <_Bfree+0x40>)
 801315e:	218f      	movs	r1, #143	; 0x8f
 8013160:	f000 fd5c 	bl	8013c1c <__assert_func>
 8013164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013168:	6006      	str	r6, [r0, #0]
 801316a:	60c6      	str	r6, [r0, #12]
 801316c:	b13c      	cbz	r4, 801317e <_Bfree+0x3a>
 801316e:	69eb      	ldr	r3, [r5, #28]
 8013170:	6862      	ldr	r2, [r4, #4]
 8013172:	68db      	ldr	r3, [r3, #12]
 8013174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013178:	6021      	str	r1, [r4, #0]
 801317a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801317e:	bd70      	pop	{r4, r5, r6, pc}
 8013180:	08016451 	.word	0x08016451
 8013184:	080164d1 	.word	0x080164d1

08013188 <__multadd>:
 8013188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801318c:	690d      	ldr	r5, [r1, #16]
 801318e:	4607      	mov	r7, r0
 8013190:	460c      	mov	r4, r1
 8013192:	461e      	mov	r6, r3
 8013194:	f101 0c14 	add.w	ip, r1, #20
 8013198:	2000      	movs	r0, #0
 801319a:	f8dc 3000 	ldr.w	r3, [ip]
 801319e:	b299      	uxth	r1, r3
 80131a0:	fb02 6101 	mla	r1, r2, r1, r6
 80131a4:	0c1e      	lsrs	r6, r3, #16
 80131a6:	0c0b      	lsrs	r3, r1, #16
 80131a8:	fb02 3306 	mla	r3, r2, r6, r3
 80131ac:	b289      	uxth	r1, r1
 80131ae:	3001      	adds	r0, #1
 80131b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80131b4:	4285      	cmp	r5, r0
 80131b6:	f84c 1b04 	str.w	r1, [ip], #4
 80131ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80131be:	dcec      	bgt.n	801319a <__multadd+0x12>
 80131c0:	b30e      	cbz	r6, 8013206 <__multadd+0x7e>
 80131c2:	68a3      	ldr	r3, [r4, #8]
 80131c4:	42ab      	cmp	r3, r5
 80131c6:	dc19      	bgt.n	80131fc <__multadd+0x74>
 80131c8:	6861      	ldr	r1, [r4, #4]
 80131ca:	4638      	mov	r0, r7
 80131cc:	3101      	adds	r1, #1
 80131ce:	f7ff ff79 	bl	80130c4 <_Balloc>
 80131d2:	4680      	mov	r8, r0
 80131d4:	b928      	cbnz	r0, 80131e2 <__multadd+0x5a>
 80131d6:	4602      	mov	r2, r0
 80131d8:	4b0c      	ldr	r3, [pc, #48]	; (801320c <__multadd+0x84>)
 80131da:	480d      	ldr	r0, [pc, #52]	; (8013210 <__multadd+0x88>)
 80131dc:	21ba      	movs	r1, #186	; 0xba
 80131de:	f000 fd1d 	bl	8013c1c <__assert_func>
 80131e2:	6922      	ldr	r2, [r4, #16]
 80131e4:	3202      	adds	r2, #2
 80131e6:	f104 010c 	add.w	r1, r4, #12
 80131ea:	0092      	lsls	r2, r2, #2
 80131ec:	300c      	adds	r0, #12
 80131ee:	f7fe ffe1 	bl	80121b4 <memcpy>
 80131f2:	4621      	mov	r1, r4
 80131f4:	4638      	mov	r0, r7
 80131f6:	f7ff ffa5 	bl	8013144 <_Bfree>
 80131fa:	4644      	mov	r4, r8
 80131fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013200:	3501      	adds	r5, #1
 8013202:	615e      	str	r6, [r3, #20]
 8013204:	6125      	str	r5, [r4, #16]
 8013206:	4620      	mov	r0, r4
 8013208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801320c:	080164c0 	.word	0x080164c0
 8013210:	080164d1 	.word	0x080164d1

08013214 <__hi0bits>:
 8013214:	0c03      	lsrs	r3, r0, #16
 8013216:	041b      	lsls	r3, r3, #16
 8013218:	b9d3      	cbnz	r3, 8013250 <__hi0bits+0x3c>
 801321a:	0400      	lsls	r0, r0, #16
 801321c:	2310      	movs	r3, #16
 801321e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013222:	bf04      	itt	eq
 8013224:	0200      	lsleq	r0, r0, #8
 8013226:	3308      	addeq	r3, #8
 8013228:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801322c:	bf04      	itt	eq
 801322e:	0100      	lsleq	r0, r0, #4
 8013230:	3304      	addeq	r3, #4
 8013232:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013236:	bf04      	itt	eq
 8013238:	0080      	lsleq	r0, r0, #2
 801323a:	3302      	addeq	r3, #2
 801323c:	2800      	cmp	r0, #0
 801323e:	db05      	blt.n	801324c <__hi0bits+0x38>
 8013240:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013244:	f103 0301 	add.w	r3, r3, #1
 8013248:	bf08      	it	eq
 801324a:	2320      	moveq	r3, #32
 801324c:	4618      	mov	r0, r3
 801324e:	4770      	bx	lr
 8013250:	2300      	movs	r3, #0
 8013252:	e7e4      	b.n	801321e <__hi0bits+0xa>

08013254 <__lo0bits>:
 8013254:	6803      	ldr	r3, [r0, #0]
 8013256:	f013 0207 	ands.w	r2, r3, #7
 801325a:	d00c      	beq.n	8013276 <__lo0bits+0x22>
 801325c:	07d9      	lsls	r1, r3, #31
 801325e:	d422      	bmi.n	80132a6 <__lo0bits+0x52>
 8013260:	079a      	lsls	r2, r3, #30
 8013262:	bf49      	itett	mi
 8013264:	085b      	lsrmi	r3, r3, #1
 8013266:	089b      	lsrpl	r3, r3, #2
 8013268:	6003      	strmi	r3, [r0, #0]
 801326a:	2201      	movmi	r2, #1
 801326c:	bf5c      	itt	pl
 801326e:	6003      	strpl	r3, [r0, #0]
 8013270:	2202      	movpl	r2, #2
 8013272:	4610      	mov	r0, r2
 8013274:	4770      	bx	lr
 8013276:	b299      	uxth	r1, r3
 8013278:	b909      	cbnz	r1, 801327e <__lo0bits+0x2a>
 801327a:	0c1b      	lsrs	r3, r3, #16
 801327c:	2210      	movs	r2, #16
 801327e:	b2d9      	uxtb	r1, r3
 8013280:	b909      	cbnz	r1, 8013286 <__lo0bits+0x32>
 8013282:	3208      	adds	r2, #8
 8013284:	0a1b      	lsrs	r3, r3, #8
 8013286:	0719      	lsls	r1, r3, #28
 8013288:	bf04      	itt	eq
 801328a:	091b      	lsreq	r3, r3, #4
 801328c:	3204      	addeq	r2, #4
 801328e:	0799      	lsls	r1, r3, #30
 8013290:	bf04      	itt	eq
 8013292:	089b      	lsreq	r3, r3, #2
 8013294:	3202      	addeq	r2, #2
 8013296:	07d9      	lsls	r1, r3, #31
 8013298:	d403      	bmi.n	80132a2 <__lo0bits+0x4e>
 801329a:	085b      	lsrs	r3, r3, #1
 801329c:	f102 0201 	add.w	r2, r2, #1
 80132a0:	d003      	beq.n	80132aa <__lo0bits+0x56>
 80132a2:	6003      	str	r3, [r0, #0]
 80132a4:	e7e5      	b.n	8013272 <__lo0bits+0x1e>
 80132a6:	2200      	movs	r2, #0
 80132a8:	e7e3      	b.n	8013272 <__lo0bits+0x1e>
 80132aa:	2220      	movs	r2, #32
 80132ac:	e7e1      	b.n	8013272 <__lo0bits+0x1e>
	...

080132b0 <__i2b>:
 80132b0:	b510      	push	{r4, lr}
 80132b2:	460c      	mov	r4, r1
 80132b4:	2101      	movs	r1, #1
 80132b6:	f7ff ff05 	bl	80130c4 <_Balloc>
 80132ba:	4602      	mov	r2, r0
 80132bc:	b928      	cbnz	r0, 80132ca <__i2b+0x1a>
 80132be:	4b05      	ldr	r3, [pc, #20]	; (80132d4 <__i2b+0x24>)
 80132c0:	4805      	ldr	r0, [pc, #20]	; (80132d8 <__i2b+0x28>)
 80132c2:	f240 1145 	movw	r1, #325	; 0x145
 80132c6:	f000 fca9 	bl	8013c1c <__assert_func>
 80132ca:	2301      	movs	r3, #1
 80132cc:	6144      	str	r4, [r0, #20]
 80132ce:	6103      	str	r3, [r0, #16]
 80132d0:	bd10      	pop	{r4, pc}
 80132d2:	bf00      	nop
 80132d4:	080164c0 	.word	0x080164c0
 80132d8:	080164d1 	.word	0x080164d1

080132dc <__multiply>:
 80132dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132e0:	4691      	mov	r9, r2
 80132e2:	690a      	ldr	r2, [r1, #16]
 80132e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80132e8:	429a      	cmp	r2, r3
 80132ea:	bfb8      	it	lt
 80132ec:	460b      	movlt	r3, r1
 80132ee:	460c      	mov	r4, r1
 80132f0:	bfbc      	itt	lt
 80132f2:	464c      	movlt	r4, r9
 80132f4:	4699      	movlt	r9, r3
 80132f6:	6927      	ldr	r7, [r4, #16]
 80132f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80132fc:	68a3      	ldr	r3, [r4, #8]
 80132fe:	6861      	ldr	r1, [r4, #4]
 8013300:	eb07 060a 	add.w	r6, r7, sl
 8013304:	42b3      	cmp	r3, r6
 8013306:	b085      	sub	sp, #20
 8013308:	bfb8      	it	lt
 801330a:	3101      	addlt	r1, #1
 801330c:	f7ff feda 	bl	80130c4 <_Balloc>
 8013310:	b930      	cbnz	r0, 8013320 <__multiply+0x44>
 8013312:	4602      	mov	r2, r0
 8013314:	4b44      	ldr	r3, [pc, #272]	; (8013428 <__multiply+0x14c>)
 8013316:	4845      	ldr	r0, [pc, #276]	; (801342c <__multiply+0x150>)
 8013318:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801331c:	f000 fc7e 	bl	8013c1c <__assert_func>
 8013320:	f100 0514 	add.w	r5, r0, #20
 8013324:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013328:	462b      	mov	r3, r5
 801332a:	2200      	movs	r2, #0
 801332c:	4543      	cmp	r3, r8
 801332e:	d321      	bcc.n	8013374 <__multiply+0x98>
 8013330:	f104 0314 	add.w	r3, r4, #20
 8013334:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013338:	f109 0314 	add.w	r3, r9, #20
 801333c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013340:	9202      	str	r2, [sp, #8]
 8013342:	1b3a      	subs	r2, r7, r4
 8013344:	3a15      	subs	r2, #21
 8013346:	f022 0203 	bic.w	r2, r2, #3
 801334a:	3204      	adds	r2, #4
 801334c:	f104 0115 	add.w	r1, r4, #21
 8013350:	428f      	cmp	r7, r1
 8013352:	bf38      	it	cc
 8013354:	2204      	movcc	r2, #4
 8013356:	9201      	str	r2, [sp, #4]
 8013358:	9a02      	ldr	r2, [sp, #8]
 801335a:	9303      	str	r3, [sp, #12]
 801335c:	429a      	cmp	r2, r3
 801335e:	d80c      	bhi.n	801337a <__multiply+0x9e>
 8013360:	2e00      	cmp	r6, #0
 8013362:	dd03      	ble.n	801336c <__multiply+0x90>
 8013364:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013368:	2b00      	cmp	r3, #0
 801336a:	d05b      	beq.n	8013424 <__multiply+0x148>
 801336c:	6106      	str	r6, [r0, #16]
 801336e:	b005      	add	sp, #20
 8013370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013374:	f843 2b04 	str.w	r2, [r3], #4
 8013378:	e7d8      	b.n	801332c <__multiply+0x50>
 801337a:	f8b3 a000 	ldrh.w	sl, [r3]
 801337e:	f1ba 0f00 	cmp.w	sl, #0
 8013382:	d024      	beq.n	80133ce <__multiply+0xf2>
 8013384:	f104 0e14 	add.w	lr, r4, #20
 8013388:	46a9      	mov	r9, r5
 801338a:	f04f 0c00 	mov.w	ip, #0
 801338e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013392:	f8d9 1000 	ldr.w	r1, [r9]
 8013396:	fa1f fb82 	uxth.w	fp, r2
 801339a:	b289      	uxth	r1, r1
 801339c:	fb0a 110b 	mla	r1, sl, fp, r1
 80133a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80133a4:	f8d9 2000 	ldr.w	r2, [r9]
 80133a8:	4461      	add	r1, ip
 80133aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80133ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80133b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80133b6:	b289      	uxth	r1, r1
 80133b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80133bc:	4577      	cmp	r7, lr
 80133be:	f849 1b04 	str.w	r1, [r9], #4
 80133c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80133c6:	d8e2      	bhi.n	801338e <__multiply+0xb2>
 80133c8:	9a01      	ldr	r2, [sp, #4]
 80133ca:	f845 c002 	str.w	ip, [r5, r2]
 80133ce:	9a03      	ldr	r2, [sp, #12]
 80133d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80133d4:	3304      	adds	r3, #4
 80133d6:	f1b9 0f00 	cmp.w	r9, #0
 80133da:	d021      	beq.n	8013420 <__multiply+0x144>
 80133dc:	6829      	ldr	r1, [r5, #0]
 80133de:	f104 0c14 	add.w	ip, r4, #20
 80133e2:	46ae      	mov	lr, r5
 80133e4:	f04f 0a00 	mov.w	sl, #0
 80133e8:	f8bc b000 	ldrh.w	fp, [ip]
 80133ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80133f0:	fb09 220b 	mla	r2, r9, fp, r2
 80133f4:	4452      	add	r2, sl
 80133f6:	b289      	uxth	r1, r1
 80133f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80133fc:	f84e 1b04 	str.w	r1, [lr], #4
 8013400:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013404:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013408:	f8be 1000 	ldrh.w	r1, [lr]
 801340c:	fb09 110a 	mla	r1, r9, sl, r1
 8013410:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013414:	4567      	cmp	r7, ip
 8013416:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801341a:	d8e5      	bhi.n	80133e8 <__multiply+0x10c>
 801341c:	9a01      	ldr	r2, [sp, #4]
 801341e:	50a9      	str	r1, [r5, r2]
 8013420:	3504      	adds	r5, #4
 8013422:	e799      	b.n	8013358 <__multiply+0x7c>
 8013424:	3e01      	subs	r6, #1
 8013426:	e79b      	b.n	8013360 <__multiply+0x84>
 8013428:	080164c0 	.word	0x080164c0
 801342c:	080164d1 	.word	0x080164d1

08013430 <__pow5mult>:
 8013430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013434:	4615      	mov	r5, r2
 8013436:	f012 0203 	ands.w	r2, r2, #3
 801343a:	4606      	mov	r6, r0
 801343c:	460f      	mov	r7, r1
 801343e:	d007      	beq.n	8013450 <__pow5mult+0x20>
 8013440:	4c25      	ldr	r4, [pc, #148]	; (80134d8 <__pow5mult+0xa8>)
 8013442:	3a01      	subs	r2, #1
 8013444:	2300      	movs	r3, #0
 8013446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801344a:	f7ff fe9d 	bl	8013188 <__multadd>
 801344e:	4607      	mov	r7, r0
 8013450:	10ad      	asrs	r5, r5, #2
 8013452:	d03d      	beq.n	80134d0 <__pow5mult+0xa0>
 8013454:	69f4      	ldr	r4, [r6, #28]
 8013456:	b97c      	cbnz	r4, 8013478 <__pow5mult+0x48>
 8013458:	2010      	movs	r0, #16
 801345a:	f7ff fd7f 	bl	8012f5c <malloc>
 801345e:	4602      	mov	r2, r0
 8013460:	61f0      	str	r0, [r6, #28]
 8013462:	b928      	cbnz	r0, 8013470 <__pow5mult+0x40>
 8013464:	4b1d      	ldr	r3, [pc, #116]	; (80134dc <__pow5mult+0xac>)
 8013466:	481e      	ldr	r0, [pc, #120]	; (80134e0 <__pow5mult+0xb0>)
 8013468:	f240 11b3 	movw	r1, #435	; 0x1b3
 801346c:	f000 fbd6 	bl	8013c1c <__assert_func>
 8013470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013474:	6004      	str	r4, [r0, #0]
 8013476:	60c4      	str	r4, [r0, #12]
 8013478:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801347c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013480:	b94c      	cbnz	r4, 8013496 <__pow5mult+0x66>
 8013482:	f240 2171 	movw	r1, #625	; 0x271
 8013486:	4630      	mov	r0, r6
 8013488:	f7ff ff12 	bl	80132b0 <__i2b>
 801348c:	2300      	movs	r3, #0
 801348e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013492:	4604      	mov	r4, r0
 8013494:	6003      	str	r3, [r0, #0]
 8013496:	f04f 0900 	mov.w	r9, #0
 801349a:	07eb      	lsls	r3, r5, #31
 801349c:	d50a      	bpl.n	80134b4 <__pow5mult+0x84>
 801349e:	4639      	mov	r1, r7
 80134a0:	4622      	mov	r2, r4
 80134a2:	4630      	mov	r0, r6
 80134a4:	f7ff ff1a 	bl	80132dc <__multiply>
 80134a8:	4639      	mov	r1, r7
 80134aa:	4680      	mov	r8, r0
 80134ac:	4630      	mov	r0, r6
 80134ae:	f7ff fe49 	bl	8013144 <_Bfree>
 80134b2:	4647      	mov	r7, r8
 80134b4:	106d      	asrs	r5, r5, #1
 80134b6:	d00b      	beq.n	80134d0 <__pow5mult+0xa0>
 80134b8:	6820      	ldr	r0, [r4, #0]
 80134ba:	b938      	cbnz	r0, 80134cc <__pow5mult+0x9c>
 80134bc:	4622      	mov	r2, r4
 80134be:	4621      	mov	r1, r4
 80134c0:	4630      	mov	r0, r6
 80134c2:	f7ff ff0b 	bl	80132dc <__multiply>
 80134c6:	6020      	str	r0, [r4, #0]
 80134c8:	f8c0 9000 	str.w	r9, [r0]
 80134cc:	4604      	mov	r4, r0
 80134ce:	e7e4      	b.n	801349a <__pow5mult+0x6a>
 80134d0:	4638      	mov	r0, r7
 80134d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134d6:	bf00      	nop
 80134d8:	08016620 	.word	0x08016620
 80134dc:	08016451 	.word	0x08016451
 80134e0:	080164d1 	.word	0x080164d1

080134e4 <__lshift>:
 80134e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134e8:	460c      	mov	r4, r1
 80134ea:	6849      	ldr	r1, [r1, #4]
 80134ec:	6923      	ldr	r3, [r4, #16]
 80134ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80134f2:	68a3      	ldr	r3, [r4, #8]
 80134f4:	4607      	mov	r7, r0
 80134f6:	4691      	mov	r9, r2
 80134f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80134fc:	f108 0601 	add.w	r6, r8, #1
 8013500:	42b3      	cmp	r3, r6
 8013502:	db0b      	blt.n	801351c <__lshift+0x38>
 8013504:	4638      	mov	r0, r7
 8013506:	f7ff fddd 	bl	80130c4 <_Balloc>
 801350a:	4605      	mov	r5, r0
 801350c:	b948      	cbnz	r0, 8013522 <__lshift+0x3e>
 801350e:	4602      	mov	r2, r0
 8013510:	4b28      	ldr	r3, [pc, #160]	; (80135b4 <__lshift+0xd0>)
 8013512:	4829      	ldr	r0, [pc, #164]	; (80135b8 <__lshift+0xd4>)
 8013514:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013518:	f000 fb80 	bl	8013c1c <__assert_func>
 801351c:	3101      	adds	r1, #1
 801351e:	005b      	lsls	r3, r3, #1
 8013520:	e7ee      	b.n	8013500 <__lshift+0x1c>
 8013522:	2300      	movs	r3, #0
 8013524:	f100 0114 	add.w	r1, r0, #20
 8013528:	f100 0210 	add.w	r2, r0, #16
 801352c:	4618      	mov	r0, r3
 801352e:	4553      	cmp	r3, sl
 8013530:	db33      	blt.n	801359a <__lshift+0xb6>
 8013532:	6920      	ldr	r0, [r4, #16]
 8013534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013538:	f104 0314 	add.w	r3, r4, #20
 801353c:	f019 091f 	ands.w	r9, r9, #31
 8013540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013544:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013548:	d02b      	beq.n	80135a2 <__lshift+0xbe>
 801354a:	f1c9 0e20 	rsb	lr, r9, #32
 801354e:	468a      	mov	sl, r1
 8013550:	2200      	movs	r2, #0
 8013552:	6818      	ldr	r0, [r3, #0]
 8013554:	fa00 f009 	lsl.w	r0, r0, r9
 8013558:	4310      	orrs	r0, r2
 801355a:	f84a 0b04 	str.w	r0, [sl], #4
 801355e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013562:	459c      	cmp	ip, r3
 8013564:	fa22 f20e 	lsr.w	r2, r2, lr
 8013568:	d8f3      	bhi.n	8013552 <__lshift+0x6e>
 801356a:	ebac 0304 	sub.w	r3, ip, r4
 801356e:	3b15      	subs	r3, #21
 8013570:	f023 0303 	bic.w	r3, r3, #3
 8013574:	3304      	adds	r3, #4
 8013576:	f104 0015 	add.w	r0, r4, #21
 801357a:	4584      	cmp	ip, r0
 801357c:	bf38      	it	cc
 801357e:	2304      	movcc	r3, #4
 8013580:	50ca      	str	r2, [r1, r3]
 8013582:	b10a      	cbz	r2, 8013588 <__lshift+0xa4>
 8013584:	f108 0602 	add.w	r6, r8, #2
 8013588:	3e01      	subs	r6, #1
 801358a:	4638      	mov	r0, r7
 801358c:	612e      	str	r6, [r5, #16]
 801358e:	4621      	mov	r1, r4
 8013590:	f7ff fdd8 	bl	8013144 <_Bfree>
 8013594:	4628      	mov	r0, r5
 8013596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801359a:	f842 0f04 	str.w	r0, [r2, #4]!
 801359e:	3301      	adds	r3, #1
 80135a0:	e7c5      	b.n	801352e <__lshift+0x4a>
 80135a2:	3904      	subs	r1, #4
 80135a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80135a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80135ac:	459c      	cmp	ip, r3
 80135ae:	d8f9      	bhi.n	80135a4 <__lshift+0xc0>
 80135b0:	e7ea      	b.n	8013588 <__lshift+0xa4>
 80135b2:	bf00      	nop
 80135b4:	080164c0 	.word	0x080164c0
 80135b8:	080164d1 	.word	0x080164d1

080135bc <__mcmp>:
 80135bc:	b530      	push	{r4, r5, lr}
 80135be:	6902      	ldr	r2, [r0, #16]
 80135c0:	690c      	ldr	r4, [r1, #16]
 80135c2:	1b12      	subs	r2, r2, r4
 80135c4:	d10e      	bne.n	80135e4 <__mcmp+0x28>
 80135c6:	f100 0314 	add.w	r3, r0, #20
 80135ca:	3114      	adds	r1, #20
 80135cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80135d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80135d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80135d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80135dc:	42a5      	cmp	r5, r4
 80135de:	d003      	beq.n	80135e8 <__mcmp+0x2c>
 80135e0:	d305      	bcc.n	80135ee <__mcmp+0x32>
 80135e2:	2201      	movs	r2, #1
 80135e4:	4610      	mov	r0, r2
 80135e6:	bd30      	pop	{r4, r5, pc}
 80135e8:	4283      	cmp	r3, r0
 80135ea:	d3f3      	bcc.n	80135d4 <__mcmp+0x18>
 80135ec:	e7fa      	b.n	80135e4 <__mcmp+0x28>
 80135ee:	f04f 32ff 	mov.w	r2, #4294967295
 80135f2:	e7f7      	b.n	80135e4 <__mcmp+0x28>

080135f4 <__mdiff>:
 80135f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f8:	460c      	mov	r4, r1
 80135fa:	4606      	mov	r6, r0
 80135fc:	4611      	mov	r1, r2
 80135fe:	4620      	mov	r0, r4
 8013600:	4690      	mov	r8, r2
 8013602:	f7ff ffdb 	bl	80135bc <__mcmp>
 8013606:	1e05      	subs	r5, r0, #0
 8013608:	d110      	bne.n	801362c <__mdiff+0x38>
 801360a:	4629      	mov	r1, r5
 801360c:	4630      	mov	r0, r6
 801360e:	f7ff fd59 	bl	80130c4 <_Balloc>
 8013612:	b930      	cbnz	r0, 8013622 <__mdiff+0x2e>
 8013614:	4b3a      	ldr	r3, [pc, #232]	; (8013700 <__mdiff+0x10c>)
 8013616:	4602      	mov	r2, r0
 8013618:	f240 2137 	movw	r1, #567	; 0x237
 801361c:	4839      	ldr	r0, [pc, #228]	; (8013704 <__mdiff+0x110>)
 801361e:	f000 fafd 	bl	8013c1c <__assert_func>
 8013622:	2301      	movs	r3, #1
 8013624:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801362c:	bfa4      	itt	ge
 801362e:	4643      	movge	r3, r8
 8013630:	46a0      	movge	r8, r4
 8013632:	4630      	mov	r0, r6
 8013634:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013638:	bfa6      	itte	ge
 801363a:	461c      	movge	r4, r3
 801363c:	2500      	movge	r5, #0
 801363e:	2501      	movlt	r5, #1
 8013640:	f7ff fd40 	bl	80130c4 <_Balloc>
 8013644:	b920      	cbnz	r0, 8013650 <__mdiff+0x5c>
 8013646:	4b2e      	ldr	r3, [pc, #184]	; (8013700 <__mdiff+0x10c>)
 8013648:	4602      	mov	r2, r0
 801364a:	f240 2145 	movw	r1, #581	; 0x245
 801364e:	e7e5      	b.n	801361c <__mdiff+0x28>
 8013650:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013654:	6926      	ldr	r6, [r4, #16]
 8013656:	60c5      	str	r5, [r0, #12]
 8013658:	f104 0914 	add.w	r9, r4, #20
 801365c:	f108 0514 	add.w	r5, r8, #20
 8013660:	f100 0e14 	add.w	lr, r0, #20
 8013664:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013668:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801366c:	f108 0210 	add.w	r2, r8, #16
 8013670:	46f2      	mov	sl, lr
 8013672:	2100      	movs	r1, #0
 8013674:	f859 3b04 	ldr.w	r3, [r9], #4
 8013678:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801367c:	fa11 f88b 	uxtah	r8, r1, fp
 8013680:	b299      	uxth	r1, r3
 8013682:	0c1b      	lsrs	r3, r3, #16
 8013684:	eba8 0801 	sub.w	r8, r8, r1
 8013688:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801368c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013690:	fa1f f888 	uxth.w	r8, r8
 8013694:	1419      	asrs	r1, r3, #16
 8013696:	454e      	cmp	r6, r9
 8013698:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801369c:	f84a 3b04 	str.w	r3, [sl], #4
 80136a0:	d8e8      	bhi.n	8013674 <__mdiff+0x80>
 80136a2:	1b33      	subs	r3, r6, r4
 80136a4:	3b15      	subs	r3, #21
 80136a6:	f023 0303 	bic.w	r3, r3, #3
 80136aa:	3304      	adds	r3, #4
 80136ac:	3415      	adds	r4, #21
 80136ae:	42a6      	cmp	r6, r4
 80136b0:	bf38      	it	cc
 80136b2:	2304      	movcc	r3, #4
 80136b4:	441d      	add	r5, r3
 80136b6:	4473      	add	r3, lr
 80136b8:	469e      	mov	lr, r3
 80136ba:	462e      	mov	r6, r5
 80136bc:	4566      	cmp	r6, ip
 80136be:	d30e      	bcc.n	80136de <__mdiff+0xea>
 80136c0:	f10c 0203 	add.w	r2, ip, #3
 80136c4:	1b52      	subs	r2, r2, r5
 80136c6:	f022 0203 	bic.w	r2, r2, #3
 80136ca:	3d03      	subs	r5, #3
 80136cc:	45ac      	cmp	ip, r5
 80136ce:	bf38      	it	cc
 80136d0:	2200      	movcc	r2, #0
 80136d2:	4413      	add	r3, r2
 80136d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80136d8:	b17a      	cbz	r2, 80136fa <__mdiff+0x106>
 80136da:	6107      	str	r7, [r0, #16]
 80136dc:	e7a4      	b.n	8013628 <__mdiff+0x34>
 80136de:	f856 8b04 	ldr.w	r8, [r6], #4
 80136e2:	fa11 f288 	uxtah	r2, r1, r8
 80136e6:	1414      	asrs	r4, r2, #16
 80136e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80136ec:	b292      	uxth	r2, r2
 80136ee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80136f2:	f84e 2b04 	str.w	r2, [lr], #4
 80136f6:	1421      	asrs	r1, r4, #16
 80136f8:	e7e0      	b.n	80136bc <__mdiff+0xc8>
 80136fa:	3f01      	subs	r7, #1
 80136fc:	e7ea      	b.n	80136d4 <__mdiff+0xe0>
 80136fe:	bf00      	nop
 8013700:	080164c0 	.word	0x080164c0
 8013704:	080164d1 	.word	0x080164d1

08013708 <__d2b>:
 8013708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801370c:	460f      	mov	r7, r1
 801370e:	2101      	movs	r1, #1
 8013710:	ec59 8b10 	vmov	r8, r9, d0
 8013714:	4616      	mov	r6, r2
 8013716:	f7ff fcd5 	bl	80130c4 <_Balloc>
 801371a:	4604      	mov	r4, r0
 801371c:	b930      	cbnz	r0, 801372c <__d2b+0x24>
 801371e:	4602      	mov	r2, r0
 8013720:	4b24      	ldr	r3, [pc, #144]	; (80137b4 <__d2b+0xac>)
 8013722:	4825      	ldr	r0, [pc, #148]	; (80137b8 <__d2b+0xb0>)
 8013724:	f240 310f 	movw	r1, #783	; 0x30f
 8013728:	f000 fa78 	bl	8013c1c <__assert_func>
 801372c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013730:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013734:	bb2d      	cbnz	r5, 8013782 <__d2b+0x7a>
 8013736:	9301      	str	r3, [sp, #4]
 8013738:	f1b8 0300 	subs.w	r3, r8, #0
 801373c:	d026      	beq.n	801378c <__d2b+0x84>
 801373e:	4668      	mov	r0, sp
 8013740:	9300      	str	r3, [sp, #0]
 8013742:	f7ff fd87 	bl	8013254 <__lo0bits>
 8013746:	e9dd 1200 	ldrd	r1, r2, [sp]
 801374a:	b1e8      	cbz	r0, 8013788 <__d2b+0x80>
 801374c:	f1c0 0320 	rsb	r3, r0, #32
 8013750:	fa02 f303 	lsl.w	r3, r2, r3
 8013754:	430b      	orrs	r3, r1
 8013756:	40c2      	lsrs	r2, r0
 8013758:	6163      	str	r3, [r4, #20]
 801375a:	9201      	str	r2, [sp, #4]
 801375c:	9b01      	ldr	r3, [sp, #4]
 801375e:	61a3      	str	r3, [r4, #24]
 8013760:	2b00      	cmp	r3, #0
 8013762:	bf14      	ite	ne
 8013764:	2202      	movne	r2, #2
 8013766:	2201      	moveq	r2, #1
 8013768:	6122      	str	r2, [r4, #16]
 801376a:	b1bd      	cbz	r5, 801379c <__d2b+0x94>
 801376c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013770:	4405      	add	r5, r0
 8013772:	603d      	str	r5, [r7, #0]
 8013774:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013778:	6030      	str	r0, [r6, #0]
 801377a:	4620      	mov	r0, r4
 801377c:	b003      	add	sp, #12
 801377e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013786:	e7d6      	b.n	8013736 <__d2b+0x2e>
 8013788:	6161      	str	r1, [r4, #20]
 801378a:	e7e7      	b.n	801375c <__d2b+0x54>
 801378c:	a801      	add	r0, sp, #4
 801378e:	f7ff fd61 	bl	8013254 <__lo0bits>
 8013792:	9b01      	ldr	r3, [sp, #4]
 8013794:	6163      	str	r3, [r4, #20]
 8013796:	3020      	adds	r0, #32
 8013798:	2201      	movs	r2, #1
 801379a:	e7e5      	b.n	8013768 <__d2b+0x60>
 801379c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80137a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80137a4:	6038      	str	r0, [r7, #0]
 80137a6:	6918      	ldr	r0, [r3, #16]
 80137a8:	f7ff fd34 	bl	8013214 <__hi0bits>
 80137ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80137b0:	e7e2      	b.n	8013778 <__d2b+0x70>
 80137b2:	bf00      	nop
 80137b4:	080164c0 	.word	0x080164c0
 80137b8:	080164d1 	.word	0x080164d1

080137bc <__ssputs_r>:
 80137bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137c0:	688e      	ldr	r6, [r1, #8]
 80137c2:	461f      	mov	r7, r3
 80137c4:	42be      	cmp	r6, r7
 80137c6:	680b      	ldr	r3, [r1, #0]
 80137c8:	4682      	mov	sl, r0
 80137ca:	460c      	mov	r4, r1
 80137cc:	4690      	mov	r8, r2
 80137ce:	d82c      	bhi.n	801382a <__ssputs_r+0x6e>
 80137d0:	898a      	ldrh	r2, [r1, #12]
 80137d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80137d6:	d026      	beq.n	8013826 <__ssputs_r+0x6a>
 80137d8:	6965      	ldr	r5, [r4, #20]
 80137da:	6909      	ldr	r1, [r1, #16]
 80137dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80137e0:	eba3 0901 	sub.w	r9, r3, r1
 80137e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80137e8:	1c7b      	adds	r3, r7, #1
 80137ea:	444b      	add	r3, r9
 80137ec:	106d      	asrs	r5, r5, #1
 80137ee:	429d      	cmp	r5, r3
 80137f0:	bf38      	it	cc
 80137f2:	461d      	movcc	r5, r3
 80137f4:	0553      	lsls	r3, r2, #21
 80137f6:	d527      	bpl.n	8013848 <__ssputs_r+0x8c>
 80137f8:	4629      	mov	r1, r5
 80137fa:	f7ff fbd7 	bl	8012fac <_malloc_r>
 80137fe:	4606      	mov	r6, r0
 8013800:	b360      	cbz	r0, 801385c <__ssputs_r+0xa0>
 8013802:	6921      	ldr	r1, [r4, #16]
 8013804:	464a      	mov	r2, r9
 8013806:	f7fe fcd5 	bl	80121b4 <memcpy>
 801380a:	89a3      	ldrh	r3, [r4, #12]
 801380c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013814:	81a3      	strh	r3, [r4, #12]
 8013816:	6126      	str	r6, [r4, #16]
 8013818:	6165      	str	r5, [r4, #20]
 801381a:	444e      	add	r6, r9
 801381c:	eba5 0509 	sub.w	r5, r5, r9
 8013820:	6026      	str	r6, [r4, #0]
 8013822:	60a5      	str	r5, [r4, #8]
 8013824:	463e      	mov	r6, r7
 8013826:	42be      	cmp	r6, r7
 8013828:	d900      	bls.n	801382c <__ssputs_r+0x70>
 801382a:	463e      	mov	r6, r7
 801382c:	6820      	ldr	r0, [r4, #0]
 801382e:	4632      	mov	r2, r6
 8013830:	4641      	mov	r1, r8
 8013832:	f000 f9c9 	bl	8013bc8 <memmove>
 8013836:	68a3      	ldr	r3, [r4, #8]
 8013838:	1b9b      	subs	r3, r3, r6
 801383a:	60a3      	str	r3, [r4, #8]
 801383c:	6823      	ldr	r3, [r4, #0]
 801383e:	4433      	add	r3, r6
 8013840:	6023      	str	r3, [r4, #0]
 8013842:	2000      	movs	r0, #0
 8013844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013848:	462a      	mov	r2, r5
 801384a:	f000 fa2d 	bl	8013ca8 <_realloc_r>
 801384e:	4606      	mov	r6, r0
 8013850:	2800      	cmp	r0, #0
 8013852:	d1e0      	bne.n	8013816 <__ssputs_r+0x5a>
 8013854:	6921      	ldr	r1, [r4, #16]
 8013856:	4650      	mov	r0, sl
 8013858:	f7ff fb34 	bl	8012ec4 <_free_r>
 801385c:	230c      	movs	r3, #12
 801385e:	f8ca 3000 	str.w	r3, [sl]
 8013862:	89a3      	ldrh	r3, [r4, #12]
 8013864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013868:	81a3      	strh	r3, [r4, #12]
 801386a:	f04f 30ff 	mov.w	r0, #4294967295
 801386e:	e7e9      	b.n	8013844 <__ssputs_r+0x88>

08013870 <_svfiprintf_r>:
 8013870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013874:	4698      	mov	r8, r3
 8013876:	898b      	ldrh	r3, [r1, #12]
 8013878:	061b      	lsls	r3, r3, #24
 801387a:	b09d      	sub	sp, #116	; 0x74
 801387c:	4607      	mov	r7, r0
 801387e:	460d      	mov	r5, r1
 8013880:	4614      	mov	r4, r2
 8013882:	d50e      	bpl.n	80138a2 <_svfiprintf_r+0x32>
 8013884:	690b      	ldr	r3, [r1, #16]
 8013886:	b963      	cbnz	r3, 80138a2 <_svfiprintf_r+0x32>
 8013888:	2140      	movs	r1, #64	; 0x40
 801388a:	f7ff fb8f 	bl	8012fac <_malloc_r>
 801388e:	6028      	str	r0, [r5, #0]
 8013890:	6128      	str	r0, [r5, #16]
 8013892:	b920      	cbnz	r0, 801389e <_svfiprintf_r+0x2e>
 8013894:	230c      	movs	r3, #12
 8013896:	603b      	str	r3, [r7, #0]
 8013898:	f04f 30ff 	mov.w	r0, #4294967295
 801389c:	e0d0      	b.n	8013a40 <_svfiprintf_r+0x1d0>
 801389e:	2340      	movs	r3, #64	; 0x40
 80138a0:	616b      	str	r3, [r5, #20]
 80138a2:	2300      	movs	r3, #0
 80138a4:	9309      	str	r3, [sp, #36]	; 0x24
 80138a6:	2320      	movs	r3, #32
 80138a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80138ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80138b0:	2330      	movs	r3, #48	; 0x30
 80138b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013a58 <_svfiprintf_r+0x1e8>
 80138b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80138ba:	f04f 0901 	mov.w	r9, #1
 80138be:	4623      	mov	r3, r4
 80138c0:	469a      	mov	sl, r3
 80138c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138c6:	b10a      	cbz	r2, 80138cc <_svfiprintf_r+0x5c>
 80138c8:	2a25      	cmp	r2, #37	; 0x25
 80138ca:	d1f9      	bne.n	80138c0 <_svfiprintf_r+0x50>
 80138cc:	ebba 0b04 	subs.w	fp, sl, r4
 80138d0:	d00b      	beq.n	80138ea <_svfiprintf_r+0x7a>
 80138d2:	465b      	mov	r3, fp
 80138d4:	4622      	mov	r2, r4
 80138d6:	4629      	mov	r1, r5
 80138d8:	4638      	mov	r0, r7
 80138da:	f7ff ff6f 	bl	80137bc <__ssputs_r>
 80138de:	3001      	adds	r0, #1
 80138e0:	f000 80a9 	beq.w	8013a36 <_svfiprintf_r+0x1c6>
 80138e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138e6:	445a      	add	r2, fp
 80138e8:	9209      	str	r2, [sp, #36]	; 0x24
 80138ea:	f89a 3000 	ldrb.w	r3, [sl]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	f000 80a1 	beq.w	8013a36 <_svfiprintf_r+0x1c6>
 80138f4:	2300      	movs	r3, #0
 80138f6:	f04f 32ff 	mov.w	r2, #4294967295
 80138fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80138fe:	f10a 0a01 	add.w	sl, sl, #1
 8013902:	9304      	str	r3, [sp, #16]
 8013904:	9307      	str	r3, [sp, #28]
 8013906:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801390a:	931a      	str	r3, [sp, #104]	; 0x68
 801390c:	4654      	mov	r4, sl
 801390e:	2205      	movs	r2, #5
 8013910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013914:	4850      	ldr	r0, [pc, #320]	; (8013a58 <_svfiprintf_r+0x1e8>)
 8013916:	f7ec fc7b 	bl	8000210 <memchr>
 801391a:	9a04      	ldr	r2, [sp, #16]
 801391c:	b9d8      	cbnz	r0, 8013956 <_svfiprintf_r+0xe6>
 801391e:	06d0      	lsls	r0, r2, #27
 8013920:	bf44      	itt	mi
 8013922:	2320      	movmi	r3, #32
 8013924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013928:	0711      	lsls	r1, r2, #28
 801392a:	bf44      	itt	mi
 801392c:	232b      	movmi	r3, #43	; 0x2b
 801392e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013932:	f89a 3000 	ldrb.w	r3, [sl]
 8013936:	2b2a      	cmp	r3, #42	; 0x2a
 8013938:	d015      	beq.n	8013966 <_svfiprintf_r+0xf6>
 801393a:	9a07      	ldr	r2, [sp, #28]
 801393c:	4654      	mov	r4, sl
 801393e:	2000      	movs	r0, #0
 8013940:	f04f 0c0a 	mov.w	ip, #10
 8013944:	4621      	mov	r1, r4
 8013946:	f811 3b01 	ldrb.w	r3, [r1], #1
 801394a:	3b30      	subs	r3, #48	; 0x30
 801394c:	2b09      	cmp	r3, #9
 801394e:	d94d      	bls.n	80139ec <_svfiprintf_r+0x17c>
 8013950:	b1b0      	cbz	r0, 8013980 <_svfiprintf_r+0x110>
 8013952:	9207      	str	r2, [sp, #28]
 8013954:	e014      	b.n	8013980 <_svfiprintf_r+0x110>
 8013956:	eba0 0308 	sub.w	r3, r0, r8
 801395a:	fa09 f303 	lsl.w	r3, r9, r3
 801395e:	4313      	orrs	r3, r2
 8013960:	9304      	str	r3, [sp, #16]
 8013962:	46a2      	mov	sl, r4
 8013964:	e7d2      	b.n	801390c <_svfiprintf_r+0x9c>
 8013966:	9b03      	ldr	r3, [sp, #12]
 8013968:	1d19      	adds	r1, r3, #4
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	9103      	str	r1, [sp, #12]
 801396e:	2b00      	cmp	r3, #0
 8013970:	bfbb      	ittet	lt
 8013972:	425b      	neglt	r3, r3
 8013974:	f042 0202 	orrlt.w	r2, r2, #2
 8013978:	9307      	strge	r3, [sp, #28]
 801397a:	9307      	strlt	r3, [sp, #28]
 801397c:	bfb8      	it	lt
 801397e:	9204      	strlt	r2, [sp, #16]
 8013980:	7823      	ldrb	r3, [r4, #0]
 8013982:	2b2e      	cmp	r3, #46	; 0x2e
 8013984:	d10c      	bne.n	80139a0 <_svfiprintf_r+0x130>
 8013986:	7863      	ldrb	r3, [r4, #1]
 8013988:	2b2a      	cmp	r3, #42	; 0x2a
 801398a:	d134      	bne.n	80139f6 <_svfiprintf_r+0x186>
 801398c:	9b03      	ldr	r3, [sp, #12]
 801398e:	1d1a      	adds	r2, r3, #4
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	9203      	str	r2, [sp, #12]
 8013994:	2b00      	cmp	r3, #0
 8013996:	bfb8      	it	lt
 8013998:	f04f 33ff 	movlt.w	r3, #4294967295
 801399c:	3402      	adds	r4, #2
 801399e:	9305      	str	r3, [sp, #20]
 80139a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013a68 <_svfiprintf_r+0x1f8>
 80139a4:	7821      	ldrb	r1, [r4, #0]
 80139a6:	2203      	movs	r2, #3
 80139a8:	4650      	mov	r0, sl
 80139aa:	f7ec fc31 	bl	8000210 <memchr>
 80139ae:	b138      	cbz	r0, 80139c0 <_svfiprintf_r+0x150>
 80139b0:	9b04      	ldr	r3, [sp, #16]
 80139b2:	eba0 000a 	sub.w	r0, r0, sl
 80139b6:	2240      	movs	r2, #64	; 0x40
 80139b8:	4082      	lsls	r2, r0
 80139ba:	4313      	orrs	r3, r2
 80139bc:	3401      	adds	r4, #1
 80139be:	9304      	str	r3, [sp, #16]
 80139c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139c4:	4825      	ldr	r0, [pc, #148]	; (8013a5c <_svfiprintf_r+0x1ec>)
 80139c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80139ca:	2206      	movs	r2, #6
 80139cc:	f7ec fc20 	bl	8000210 <memchr>
 80139d0:	2800      	cmp	r0, #0
 80139d2:	d038      	beq.n	8013a46 <_svfiprintf_r+0x1d6>
 80139d4:	4b22      	ldr	r3, [pc, #136]	; (8013a60 <_svfiprintf_r+0x1f0>)
 80139d6:	bb1b      	cbnz	r3, 8013a20 <_svfiprintf_r+0x1b0>
 80139d8:	9b03      	ldr	r3, [sp, #12]
 80139da:	3307      	adds	r3, #7
 80139dc:	f023 0307 	bic.w	r3, r3, #7
 80139e0:	3308      	adds	r3, #8
 80139e2:	9303      	str	r3, [sp, #12]
 80139e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139e6:	4433      	add	r3, r6
 80139e8:	9309      	str	r3, [sp, #36]	; 0x24
 80139ea:	e768      	b.n	80138be <_svfiprintf_r+0x4e>
 80139ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80139f0:	460c      	mov	r4, r1
 80139f2:	2001      	movs	r0, #1
 80139f4:	e7a6      	b.n	8013944 <_svfiprintf_r+0xd4>
 80139f6:	2300      	movs	r3, #0
 80139f8:	3401      	adds	r4, #1
 80139fa:	9305      	str	r3, [sp, #20]
 80139fc:	4619      	mov	r1, r3
 80139fe:	f04f 0c0a 	mov.w	ip, #10
 8013a02:	4620      	mov	r0, r4
 8013a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a08:	3a30      	subs	r2, #48	; 0x30
 8013a0a:	2a09      	cmp	r2, #9
 8013a0c:	d903      	bls.n	8013a16 <_svfiprintf_r+0x1a6>
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d0c6      	beq.n	80139a0 <_svfiprintf_r+0x130>
 8013a12:	9105      	str	r1, [sp, #20]
 8013a14:	e7c4      	b.n	80139a0 <_svfiprintf_r+0x130>
 8013a16:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a1a:	4604      	mov	r4, r0
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	e7f0      	b.n	8013a02 <_svfiprintf_r+0x192>
 8013a20:	ab03      	add	r3, sp, #12
 8013a22:	9300      	str	r3, [sp, #0]
 8013a24:	462a      	mov	r2, r5
 8013a26:	4b0f      	ldr	r3, [pc, #60]	; (8013a64 <_svfiprintf_r+0x1f4>)
 8013a28:	a904      	add	r1, sp, #16
 8013a2a:	4638      	mov	r0, r7
 8013a2c:	f7fd fe14 	bl	8011658 <_printf_float>
 8013a30:	1c42      	adds	r2, r0, #1
 8013a32:	4606      	mov	r6, r0
 8013a34:	d1d6      	bne.n	80139e4 <_svfiprintf_r+0x174>
 8013a36:	89ab      	ldrh	r3, [r5, #12]
 8013a38:	065b      	lsls	r3, r3, #25
 8013a3a:	f53f af2d 	bmi.w	8013898 <_svfiprintf_r+0x28>
 8013a3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a40:	b01d      	add	sp, #116	; 0x74
 8013a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a46:	ab03      	add	r3, sp, #12
 8013a48:	9300      	str	r3, [sp, #0]
 8013a4a:	462a      	mov	r2, r5
 8013a4c:	4b05      	ldr	r3, [pc, #20]	; (8013a64 <_svfiprintf_r+0x1f4>)
 8013a4e:	a904      	add	r1, sp, #16
 8013a50:	4638      	mov	r0, r7
 8013a52:	f7fe f8a5 	bl	8011ba0 <_printf_i>
 8013a56:	e7eb      	b.n	8013a30 <_svfiprintf_r+0x1c0>
 8013a58:	0801662c 	.word	0x0801662c
 8013a5c:	08016636 	.word	0x08016636
 8013a60:	08011659 	.word	0x08011659
 8013a64:	080137bd 	.word	0x080137bd
 8013a68:	08016632 	.word	0x08016632

08013a6c <__sflush_r>:
 8013a6c:	898a      	ldrh	r2, [r1, #12]
 8013a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a72:	4605      	mov	r5, r0
 8013a74:	0710      	lsls	r0, r2, #28
 8013a76:	460c      	mov	r4, r1
 8013a78:	d458      	bmi.n	8013b2c <__sflush_r+0xc0>
 8013a7a:	684b      	ldr	r3, [r1, #4]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	dc05      	bgt.n	8013a8c <__sflush_r+0x20>
 8013a80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	dc02      	bgt.n	8013a8c <__sflush_r+0x20>
 8013a86:	2000      	movs	r0, #0
 8013a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a8e:	2e00      	cmp	r6, #0
 8013a90:	d0f9      	beq.n	8013a86 <__sflush_r+0x1a>
 8013a92:	2300      	movs	r3, #0
 8013a94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013a98:	682f      	ldr	r7, [r5, #0]
 8013a9a:	6a21      	ldr	r1, [r4, #32]
 8013a9c:	602b      	str	r3, [r5, #0]
 8013a9e:	d032      	beq.n	8013b06 <__sflush_r+0x9a>
 8013aa0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013aa2:	89a3      	ldrh	r3, [r4, #12]
 8013aa4:	075a      	lsls	r2, r3, #29
 8013aa6:	d505      	bpl.n	8013ab4 <__sflush_r+0x48>
 8013aa8:	6863      	ldr	r3, [r4, #4]
 8013aaa:	1ac0      	subs	r0, r0, r3
 8013aac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013aae:	b10b      	cbz	r3, 8013ab4 <__sflush_r+0x48>
 8013ab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013ab2:	1ac0      	subs	r0, r0, r3
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	4602      	mov	r2, r0
 8013ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013aba:	6a21      	ldr	r1, [r4, #32]
 8013abc:	4628      	mov	r0, r5
 8013abe:	47b0      	blx	r6
 8013ac0:	1c43      	adds	r3, r0, #1
 8013ac2:	89a3      	ldrh	r3, [r4, #12]
 8013ac4:	d106      	bne.n	8013ad4 <__sflush_r+0x68>
 8013ac6:	6829      	ldr	r1, [r5, #0]
 8013ac8:	291d      	cmp	r1, #29
 8013aca:	d82b      	bhi.n	8013b24 <__sflush_r+0xb8>
 8013acc:	4a29      	ldr	r2, [pc, #164]	; (8013b74 <__sflush_r+0x108>)
 8013ace:	410a      	asrs	r2, r1
 8013ad0:	07d6      	lsls	r6, r2, #31
 8013ad2:	d427      	bmi.n	8013b24 <__sflush_r+0xb8>
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	6062      	str	r2, [r4, #4]
 8013ad8:	04d9      	lsls	r1, r3, #19
 8013ada:	6922      	ldr	r2, [r4, #16]
 8013adc:	6022      	str	r2, [r4, #0]
 8013ade:	d504      	bpl.n	8013aea <__sflush_r+0x7e>
 8013ae0:	1c42      	adds	r2, r0, #1
 8013ae2:	d101      	bne.n	8013ae8 <__sflush_r+0x7c>
 8013ae4:	682b      	ldr	r3, [r5, #0]
 8013ae6:	b903      	cbnz	r3, 8013aea <__sflush_r+0x7e>
 8013ae8:	6560      	str	r0, [r4, #84]	; 0x54
 8013aea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013aec:	602f      	str	r7, [r5, #0]
 8013aee:	2900      	cmp	r1, #0
 8013af0:	d0c9      	beq.n	8013a86 <__sflush_r+0x1a>
 8013af2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013af6:	4299      	cmp	r1, r3
 8013af8:	d002      	beq.n	8013b00 <__sflush_r+0x94>
 8013afa:	4628      	mov	r0, r5
 8013afc:	f7ff f9e2 	bl	8012ec4 <_free_r>
 8013b00:	2000      	movs	r0, #0
 8013b02:	6360      	str	r0, [r4, #52]	; 0x34
 8013b04:	e7c0      	b.n	8013a88 <__sflush_r+0x1c>
 8013b06:	2301      	movs	r3, #1
 8013b08:	4628      	mov	r0, r5
 8013b0a:	47b0      	blx	r6
 8013b0c:	1c41      	adds	r1, r0, #1
 8013b0e:	d1c8      	bne.n	8013aa2 <__sflush_r+0x36>
 8013b10:	682b      	ldr	r3, [r5, #0]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d0c5      	beq.n	8013aa2 <__sflush_r+0x36>
 8013b16:	2b1d      	cmp	r3, #29
 8013b18:	d001      	beq.n	8013b1e <__sflush_r+0xb2>
 8013b1a:	2b16      	cmp	r3, #22
 8013b1c:	d101      	bne.n	8013b22 <__sflush_r+0xb6>
 8013b1e:	602f      	str	r7, [r5, #0]
 8013b20:	e7b1      	b.n	8013a86 <__sflush_r+0x1a>
 8013b22:	89a3      	ldrh	r3, [r4, #12]
 8013b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b28:	81a3      	strh	r3, [r4, #12]
 8013b2a:	e7ad      	b.n	8013a88 <__sflush_r+0x1c>
 8013b2c:	690f      	ldr	r7, [r1, #16]
 8013b2e:	2f00      	cmp	r7, #0
 8013b30:	d0a9      	beq.n	8013a86 <__sflush_r+0x1a>
 8013b32:	0793      	lsls	r3, r2, #30
 8013b34:	680e      	ldr	r6, [r1, #0]
 8013b36:	bf08      	it	eq
 8013b38:	694b      	ldreq	r3, [r1, #20]
 8013b3a:	600f      	str	r7, [r1, #0]
 8013b3c:	bf18      	it	ne
 8013b3e:	2300      	movne	r3, #0
 8013b40:	eba6 0807 	sub.w	r8, r6, r7
 8013b44:	608b      	str	r3, [r1, #8]
 8013b46:	f1b8 0f00 	cmp.w	r8, #0
 8013b4a:	dd9c      	ble.n	8013a86 <__sflush_r+0x1a>
 8013b4c:	6a21      	ldr	r1, [r4, #32]
 8013b4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013b50:	4643      	mov	r3, r8
 8013b52:	463a      	mov	r2, r7
 8013b54:	4628      	mov	r0, r5
 8013b56:	47b0      	blx	r6
 8013b58:	2800      	cmp	r0, #0
 8013b5a:	dc06      	bgt.n	8013b6a <__sflush_r+0xfe>
 8013b5c:	89a3      	ldrh	r3, [r4, #12]
 8013b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b62:	81a3      	strh	r3, [r4, #12]
 8013b64:	f04f 30ff 	mov.w	r0, #4294967295
 8013b68:	e78e      	b.n	8013a88 <__sflush_r+0x1c>
 8013b6a:	4407      	add	r7, r0
 8013b6c:	eba8 0800 	sub.w	r8, r8, r0
 8013b70:	e7e9      	b.n	8013b46 <__sflush_r+0xda>
 8013b72:	bf00      	nop
 8013b74:	dfbffffe 	.word	0xdfbffffe

08013b78 <_fflush_r>:
 8013b78:	b538      	push	{r3, r4, r5, lr}
 8013b7a:	690b      	ldr	r3, [r1, #16]
 8013b7c:	4605      	mov	r5, r0
 8013b7e:	460c      	mov	r4, r1
 8013b80:	b913      	cbnz	r3, 8013b88 <_fflush_r+0x10>
 8013b82:	2500      	movs	r5, #0
 8013b84:	4628      	mov	r0, r5
 8013b86:	bd38      	pop	{r3, r4, r5, pc}
 8013b88:	b118      	cbz	r0, 8013b92 <_fflush_r+0x1a>
 8013b8a:	6a03      	ldr	r3, [r0, #32]
 8013b8c:	b90b      	cbnz	r3, 8013b92 <_fflush_r+0x1a>
 8013b8e:	f7fe f9a3 	bl	8011ed8 <__sinit>
 8013b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d0f3      	beq.n	8013b82 <_fflush_r+0xa>
 8013b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013b9c:	07d0      	lsls	r0, r2, #31
 8013b9e:	d404      	bmi.n	8013baa <_fflush_r+0x32>
 8013ba0:	0599      	lsls	r1, r3, #22
 8013ba2:	d402      	bmi.n	8013baa <_fflush_r+0x32>
 8013ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ba6:	f7fe fb03 	bl	80121b0 <__retarget_lock_acquire_recursive>
 8013baa:	4628      	mov	r0, r5
 8013bac:	4621      	mov	r1, r4
 8013bae:	f7ff ff5d 	bl	8013a6c <__sflush_r>
 8013bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013bb4:	07da      	lsls	r2, r3, #31
 8013bb6:	4605      	mov	r5, r0
 8013bb8:	d4e4      	bmi.n	8013b84 <_fflush_r+0xc>
 8013bba:	89a3      	ldrh	r3, [r4, #12]
 8013bbc:	059b      	lsls	r3, r3, #22
 8013bbe:	d4e1      	bmi.n	8013b84 <_fflush_r+0xc>
 8013bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013bc2:	f7fe faf6 	bl	80121b2 <__retarget_lock_release_recursive>
 8013bc6:	e7dd      	b.n	8013b84 <_fflush_r+0xc>

08013bc8 <memmove>:
 8013bc8:	4288      	cmp	r0, r1
 8013bca:	b510      	push	{r4, lr}
 8013bcc:	eb01 0402 	add.w	r4, r1, r2
 8013bd0:	d902      	bls.n	8013bd8 <memmove+0x10>
 8013bd2:	4284      	cmp	r4, r0
 8013bd4:	4623      	mov	r3, r4
 8013bd6:	d807      	bhi.n	8013be8 <memmove+0x20>
 8013bd8:	1e43      	subs	r3, r0, #1
 8013bda:	42a1      	cmp	r1, r4
 8013bdc:	d008      	beq.n	8013bf0 <memmove+0x28>
 8013bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013be2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013be6:	e7f8      	b.n	8013bda <memmove+0x12>
 8013be8:	4402      	add	r2, r0
 8013bea:	4601      	mov	r1, r0
 8013bec:	428a      	cmp	r2, r1
 8013bee:	d100      	bne.n	8013bf2 <memmove+0x2a>
 8013bf0:	bd10      	pop	{r4, pc}
 8013bf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013bf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013bfa:	e7f7      	b.n	8013bec <memmove+0x24>

08013bfc <_sbrk_r>:
 8013bfc:	b538      	push	{r3, r4, r5, lr}
 8013bfe:	4d06      	ldr	r5, [pc, #24]	; (8013c18 <_sbrk_r+0x1c>)
 8013c00:	2300      	movs	r3, #0
 8013c02:	4604      	mov	r4, r0
 8013c04:	4608      	mov	r0, r1
 8013c06:	602b      	str	r3, [r5, #0]
 8013c08:	f7ee fd10 	bl	800262c <_sbrk>
 8013c0c:	1c43      	adds	r3, r0, #1
 8013c0e:	d102      	bne.n	8013c16 <_sbrk_r+0x1a>
 8013c10:	682b      	ldr	r3, [r5, #0]
 8013c12:	b103      	cbz	r3, 8013c16 <_sbrk_r+0x1a>
 8013c14:	6023      	str	r3, [r4, #0]
 8013c16:	bd38      	pop	{r3, r4, r5, pc}
 8013c18:	20007924 	.word	0x20007924

08013c1c <__assert_func>:
 8013c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c1e:	4614      	mov	r4, r2
 8013c20:	461a      	mov	r2, r3
 8013c22:	4b09      	ldr	r3, [pc, #36]	; (8013c48 <__assert_func+0x2c>)
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	4605      	mov	r5, r0
 8013c28:	68d8      	ldr	r0, [r3, #12]
 8013c2a:	b14c      	cbz	r4, 8013c40 <__assert_func+0x24>
 8013c2c:	4b07      	ldr	r3, [pc, #28]	; (8013c4c <__assert_func+0x30>)
 8013c2e:	9100      	str	r1, [sp, #0]
 8013c30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013c34:	4906      	ldr	r1, [pc, #24]	; (8013c50 <__assert_func+0x34>)
 8013c36:	462b      	mov	r3, r5
 8013c38:	f000 f872 	bl	8013d20 <fiprintf>
 8013c3c:	f000 f882 	bl	8013d44 <abort>
 8013c40:	4b04      	ldr	r3, [pc, #16]	; (8013c54 <__assert_func+0x38>)
 8013c42:	461c      	mov	r4, r3
 8013c44:	e7f3      	b.n	8013c2e <__assert_func+0x12>
 8013c46:	bf00      	nop
 8013c48:	20000094 	.word	0x20000094
 8013c4c:	08016647 	.word	0x08016647
 8013c50:	08016654 	.word	0x08016654
 8013c54:	08016682 	.word	0x08016682

08013c58 <_calloc_r>:
 8013c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c5a:	fba1 2402 	umull	r2, r4, r1, r2
 8013c5e:	b94c      	cbnz	r4, 8013c74 <_calloc_r+0x1c>
 8013c60:	4611      	mov	r1, r2
 8013c62:	9201      	str	r2, [sp, #4]
 8013c64:	f7ff f9a2 	bl	8012fac <_malloc_r>
 8013c68:	9a01      	ldr	r2, [sp, #4]
 8013c6a:	4605      	mov	r5, r0
 8013c6c:	b930      	cbnz	r0, 8013c7c <_calloc_r+0x24>
 8013c6e:	4628      	mov	r0, r5
 8013c70:	b003      	add	sp, #12
 8013c72:	bd30      	pop	{r4, r5, pc}
 8013c74:	220c      	movs	r2, #12
 8013c76:	6002      	str	r2, [r0, #0]
 8013c78:	2500      	movs	r5, #0
 8013c7a:	e7f8      	b.n	8013c6e <_calloc_r+0x16>
 8013c7c:	4621      	mov	r1, r4
 8013c7e:	f7fe f9c4 	bl	801200a <memset>
 8013c82:	e7f4      	b.n	8013c6e <_calloc_r+0x16>

08013c84 <__ascii_mbtowc>:
 8013c84:	b082      	sub	sp, #8
 8013c86:	b901      	cbnz	r1, 8013c8a <__ascii_mbtowc+0x6>
 8013c88:	a901      	add	r1, sp, #4
 8013c8a:	b142      	cbz	r2, 8013c9e <__ascii_mbtowc+0x1a>
 8013c8c:	b14b      	cbz	r3, 8013ca2 <__ascii_mbtowc+0x1e>
 8013c8e:	7813      	ldrb	r3, [r2, #0]
 8013c90:	600b      	str	r3, [r1, #0]
 8013c92:	7812      	ldrb	r2, [r2, #0]
 8013c94:	1e10      	subs	r0, r2, #0
 8013c96:	bf18      	it	ne
 8013c98:	2001      	movne	r0, #1
 8013c9a:	b002      	add	sp, #8
 8013c9c:	4770      	bx	lr
 8013c9e:	4610      	mov	r0, r2
 8013ca0:	e7fb      	b.n	8013c9a <__ascii_mbtowc+0x16>
 8013ca2:	f06f 0001 	mvn.w	r0, #1
 8013ca6:	e7f8      	b.n	8013c9a <__ascii_mbtowc+0x16>

08013ca8 <_realloc_r>:
 8013ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cac:	4680      	mov	r8, r0
 8013cae:	4614      	mov	r4, r2
 8013cb0:	460e      	mov	r6, r1
 8013cb2:	b921      	cbnz	r1, 8013cbe <_realloc_r+0x16>
 8013cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cb8:	4611      	mov	r1, r2
 8013cba:	f7ff b977 	b.w	8012fac <_malloc_r>
 8013cbe:	b92a      	cbnz	r2, 8013ccc <_realloc_r+0x24>
 8013cc0:	f7ff f900 	bl	8012ec4 <_free_r>
 8013cc4:	4625      	mov	r5, r4
 8013cc6:	4628      	mov	r0, r5
 8013cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ccc:	f000 f841 	bl	8013d52 <_malloc_usable_size_r>
 8013cd0:	4284      	cmp	r4, r0
 8013cd2:	4607      	mov	r7, r0
 8013cd4:	d802      	bhi.n	8013cdc <_realloc_r+0x34>
 8013cd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013cda:	d812      	bhi.n	8013d02 <_realloc_r+0x5a>
 8013cdc:	4621      	mov	r1, r4
 8013cde:	4640      	mov	r0, r8
 8013ce0:	f7ff f964 	bl	8012fac <_malloc_r>
 8013ce4:	4605      	mov	r5, r0
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	d0ed      	beq.n	8013cc6 <_realloc_r+0x1e>
 8013cea:	42bc      	cmp	r4, r7
 8013cec:	4622      	mov	r2, r4
 8013cee:	4631      	mov	r1, r6
 8013cf0:	bf28      	it	cs
 8013cf2:	463a      	movcs	r2, r7
 8013cf4:	f7fe fa5e 	bl	80121b4 <memcpy>
 8013cf8:	4631      	mov	r1, r6
 8013cfa:	4640      	mov	r0, r8
 8013cfc:	f7ff f8e2 	bl	8012ec4 <_free_r>
 8013d00:	e7e1      	b.n	8013cc6 <_realloc_r+0x1e>
 8013d02:	4635      	mov	r5, r6
 8013d04:	e7df      	b.n	8013cc6 <_realloc_r+0x1e>

08013d06 <__ascii_wctomb>:
 8013d06:	b149      	cbz	r1, 8013d1c <__ascii_wctomb+0x16>
 8013d08:	2aff      	cmp	r2, #255	; 0xff
 8013d0a:	bf85      	ittet	hi
 8013d0c:	238a      	movhi	r3, #138	; 0x8a
 8013d0e:	6003      	strhi	r3, [r0, #0]
 8013d10:	700a      	strbls	r2, [r1, #0]
 8013d12:	f04f 30ff 	movhi.w	r0, #4294967295
 8013d16:	bf98      	it	ls
 8013d18:	2001      	movls	r0, #1
 8013d1a:	4770      	bx	lr
 8013d1c:	4608      	mov	r0, r1
 8013d1e:	4770      	bx	lr

08013d20 <fiprintf>:
 8013d20:	b40e      	push	{r1, r2, r3}
 8013d22:	b503      	push	{r0, r1, lr}
 8013d24:	4601      	mov	r1, r0
 8013d26:	ab03      	add	r3, sp, #12
 8013d28:	4805      	ldr	r0, [pc, #20]	; (8013d40 <fiprintf+0x20>)
 8013d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d2e:	6800      	ldr	r0, [r0, #0]
 8013d30:	9301      	str	r3, [sp, #4]
 8013d32:	f000 f83f 	bl	8013db4 <_vfiprintf_r>
 8013d36:	b002      	add	sp, #8
 8013d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d3c:	b003      	add	sp, #12
 8013d3e:	4770      	bx	lr
 8013d40:	20000094 	.word	0x20000094

08013d44 <abort>:
 8013d44:	b508      	push	{r3, lr}
 8013d46:	2006      	movs	r0, #6
 8013d48:	f000 fa0c 	bl	8014164 <raise>
 8013d4c:	2001      	movs	r0, #1
 8013d4e:	f7fd fb87 	bl	8011460 <_exit>

08013d52 <_malloc_usable_size_r>:
 8013d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d56:	1f18      	subs	r0, r3, #4
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	bfbc      	itt	lt
 8013d5c:	580b      	ldrlt	r3, [r1, r0]
 8013d5e:	18c0      	addlt	r0, r0, r3
 8013d60:	4770      	bx	lr

08013d62 <__sfputc_r>:
 8013d62:	6893      	ldr	r3, [r2, #8]
 8013d64:	3b01      	subs	r3, #1
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	b410      	push	{r4}
 8013d6a:	6093      	str	r3, [r2, #8]
 8013d6c:	da08      	bge.n	8013d80 <__sfputc_r+0x1e>
 8013d6e:	6994      	ldr	r4, [r2, #24]
 8013d70:	42a3      	cmp	r3, r4
 8013d72:	db01      	blt.n	8013d78 <__sfputc_r+0x16>
 8013d74:	290a      	cmp	r1, #10
 8013d76:	d103      	bne.n	8013d80 <__sfputc_r+0x1e>
 8013d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d7c:	f000 b934 	b.w	8013fe8 <__swbuf_r>
 8013d80:	6813      	ldr	r3, [r2, #0]
 8013d82:	1c58      	adds	r0, r3, #1
 8013d84:	6010      	str	r0, [r2, #0]
 8013d86:	7019      	strb	r1, [r3, #0]
 8013d88:	4608      	mov	r0, r1
 8013d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d8e:	4770      	bx	lr

08013d90 <__sfputs_r>:
 8013d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d92:	4606      	mov	r6, r0
 8013d94:	460f      	mov	r7, r1
 8013d96:	4614      	mov	r4, r2
 8013d98:	18d5      	adds	r5, r2, r3
 8013d9a:	42ac      	cmp	r4, r5
 8013d9c:	d101      	bne.n	8013da2 <__sfputs_r+0x12>
 8013d9e:	2000      	movs	r0, #0
 8013da0:	e007      	b.n	8013db2 <__sfputs_r+0x22>
 8013da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013da6:	463a      	mov	r2, r7
 8013da8:	4630      	mov	r0, r6
 8013daa:	f7ff ffda 	bl	8013d62 <__sfputc_r>
 8013dae:	1c43      	adds	r3, r0, #1
 8013db0:	d1f3      	bne.n	8013d9a <__sfputs_r+0xa>
 8013db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013db4 <_vfiprintf_r>:
 8013db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db8:	460d      	mov	r5, r1
 8013dba:	b09d      	sub	sp, #116	; 0x74
 8013dbc:	4614      	mov	r4, r2
 8013dbe:	4698      	mov	r8, r3
 8013dc0:	4606      	mov	r6, r0
 8013dc2:	b118      	cbz	r0, 8013dcc <_vfiprintf_r+0x18>
 8013dc4:	6a03      	ldr	r3, [r0, #32]
 8013dc6:	b90b      	cbnz	r3, 8013dcc <_vfiprintf_r+0x18>
 8013dc8:	f7fe f886 	bl	8011ed8 <__sinit>
 8013dcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013dce:	07d9      	lsls	r1, r3, #31
 8013dd0:	d405      	bmi.n	8013dde <_vfiprintf_r+0x2a>
 8013dd2:	89ab      	ldrh	r3, [r5, #12]
 8013dd4:	059a      	lsls	r2, r3, #22
 8013dd6:	d402      	bmi.n	8013dde <_vfiprintf_r+0x2a>
 8013dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013dda:	f7fe f9e9 	bl	80121b0 <__retarget_lock_acquire_recursive>
 8013dde:	89ab      	ldrh	r3, [r5, #12]
 8013de0:	071b      	lsls	r3, r3, #28
 8013de2:	d501      	bpl.n	8013de8 <_vfiprintf_r+0x34>
 8013de4:	692b      	ldr	r3, [r5, #16]
 8013de6:	b99b      	cbnz	r3, 8013e10 <_vfiprintf_r+0x5c>
 8013de8:	4629      	mov	r1, r5
 8013dea:	4630      	mov	r0, r6
 8013dec:	f000 f93a 	bl	8014064 <__swsetup_r>
 8013df0:	b170      	cbz	r0, 8013e10 <_vfiprintf_r+0x5c>
 8013df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013df4:	07dc      	lsls	r4, r3, #31
 8013df6:	d504      	bpl.n	8013e02 <_vfiprintf_r+0x4e>
 8013df8:	f04f 30ff 	mov.w	r0, #4294967295
 8013dfc:	b01d      	add	sp, #116	; 0x74
 8013dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e02:	89ab      	ldrh	r3, [r5, #12]
 8013e04:	0598      	lsls	r0, r3, #22
 8013e06:	d4f7      	bmi.n	8013df8 <_vfiprintf_r+0x44>
 8013e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e0a:	f7fe f9d2 	bl	80121b2 <__retarget_lock_release_recursive>
 8013e0e:	e7f3      	b.n	8013df8 <_vfiprintf_r+0x44>
 8013e10:	2300      	movs	r3, #0
 8013e12:	9309      	str	r3, [sp, #36]	; 0x24
 8013e14:	2320      	movs	r3, #32
 8013e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e1e:	2330      	movs	r3, #48	; 0x30
 8013e20:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013fd4 <_vfiprintf_r+0x220>
 8013e24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e28:	f04f 0901 	mov.w	r9, #1
 8013e2c:	4623      	mov	r3, r4
 8013e2e:	469a      	mov	sl, r3
 8013e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e34:	b10a      	cbz	r2, 8013e3a <_vfiprintf_r+0x86>
 8013e36:	2a25      	cmp	r2, #37	; 0x25
 8013e38:	d1f9      	bne.n	8013e2e <_vfiprintf_r+0x7a>
 8013e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8013e3e:	d00b      	beq.n	8013e58 <_vfiprintf_r+0xa4>
 8013e40:	465b      	mov	r3, fp
 8013e42:	4622      	mov	r2, r4
 8013e44:	4629      	mov	r1, r5
 8013e46:	4630      	mov	r0, r6
 8013e48:	f7ff ffa2 	bl	8013d90 <__sfputs_r>
 8013e4c:	3001      	adds	r0, #1
 8013e4e:	f000 80a9 	beq.w	8013fa4 <_vfiprintf_r+0x1f0>
 8013e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e54:	445a      	add	r2, fp
 8013e56:	9209      	str	r2, [sp, #36]	; 0x24
 8013e58:	f89a 3000 	ldrb.w	r3, [sl]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	f000 80a1 	beq.w	8013fa4 <_vfiprintf_r+0x1f0>
 8013e62:	2300      	movs	r3, #0
 8013e64:	f04f 32ff 	mov.w	r2, #4294967295
 8013e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e6c:	f10a 0a01 	add.w	sl, sl, #1
 8013e70:	9304      	str	r3, [sp, #16]
 8013e72:	9307      	str	r3, [sp, #28]
 8013e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e78:	931a      	str	r3, [sp, #104]	; 0x68
 8013e7a:	4654      	mov	r4, sl
 8013e7c:	2205      	movs	r2, #5
 8013e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e82:	4854      	ldr	r0, [pc, #336]	; (8013fd4 <_vfiprintf_r+0x220>)
 8013e84:	f7ec f9c4 	bl	8000210 <memchr>
 8013e88:	9a04      	ldr	r2, [sp, #16]
 8013e8a:	b9d8      	cbnz	r0, 8013ec4 <_vfiprintf_r+0x110>
 8013e8c:	06d1      	lsls	r1, r2, #27
 8013e8e:	bf44      	itt	mi
 8013e90:	2320      	movmi	r3, #32
 8013e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e96:	0713      	lsls	r3, r2, #28
 8013e98:	bf44      	itt	mi
 8013e9a:	232b      	movmi	r3, #43	; 0x2b
 8013e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8013ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8013ea6:	d015      	beq.n	8013ed4 <_vfiprintf_r+0x120>
 8013ea8:	9a07      	ldr	r2, [sp, #28]
 8013eaa:	4654      	mov	r4, sl
 8013eac:	2000      	movs	r0, #0
 8013eae:	f04f 0c0a 	mov.w	ip, #10
 8013eb2:	4621      	mov	r1, r4
 8013eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013eb8:	3b30      	subs	r3, #48	; 0x30
 8013eba:	2b09      	cmp	r3, #9
 8013ebc:	d94d      	bls.n	8013f5a <_vfiprintf_r+0x1a6>
 8013ebe:	b1b0      	cbz	r0, 8013eee <_vfiprintf_r+0x13a>
 8013ec0:	9207      	str	r2, [sp, #28]
 8013ec2:	e014      	b.n	8013eee <_vfiprintf_r+0x13a>
 8013ec4:	eba0 0308 	sub.w	r3, r0, r8
 8013ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8013ecc:	4313      	orrs	r3, r2
 8013ece:	9304      	str	r3, [sp, #16]
 8013ed0:	46a2      	mov	sl, r4
 8013ed2:	e7d2      	b.n	8013e7a <_vfiprintf_r+0xc6>
 8013ed4:	9b03      	ldr	r3, [sp, #12]
 8013ed6:	1d19      	adds	r1, r3, #4
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	9103      	str	r1, [sp, #12]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	bfbb      	ittet	lt
 8013ee0:	425b      	neglt	r3, r3
 8013ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8013ee6:	9307      	strge	r3, [sp, #28]
 8013ee8:	9307      	strlt	r3, [sp, #28]
 8013eea:	bfb8      	it	lt
 8013eec:	9204      	strlt	r2, [sp, #16]
 8013eee:	7823      	ldrb	r3, [r4, #0]
 8013ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8013ef2:	d10c      	bne.n	8013f0e <_vfiprintf_r+0x15a>
 8013ef4:	7863      	ldrb	r3, [r4, #1]
 8013ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8013ef8:	d134      	bne.n	8013f64 <_vfiprintf_r+0x1b0>
 8013efa:	9b03      	ldr	r3, [sp, #12]
 8013efc:	1d1a      	adds	r2, r3, #4
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	9203      	str	r2, [sp, #12]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	bfb8      	it	lt
 8013f06:	f04f 33ff 	movlt.w	r3, #4294967295
 8013f0a:	3402      	adds	r4, #2
 8013f0c:	9305      	str	r3, [sp, #20]
 8013f0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013fe4 <_vfiprintf_r+0x230>
 8013f12:	7821      	ldrb	r1, [r4, #0]
 8013f14:	2203      	movs	r2, #3
 8013f16:	4650      	mov	r0, sl
 8013f18:	f7ec f97a 	bl	8000210 <memchr>
 8013f1c:	b138      	cbz	r0, 8013f2e <_vfiprintf_r+0x17a>
 8013f1e:	9b04      	ldr	r3, [sp, #16]
 8013f20:	eba0 000a 	sub.w	r0, r0, sl
 8013f24:	2240      	movs	r2, #64	; 0x40
 8013f26:	4082      	lsls	r2, r0
 8013f28:	4313      	orrs	r3, r2
 8013f2a:	3401      	adds	r4, #1
 8013f2c:	9304      	str	r3, [sp, #16]
 8013f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f32:	4829      	ldr	r0, [pc, #164]	; (8013fd8 <_vfiprintf_r+0x224>)
 8013f34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f38:	2206      	movs	r2, #6
 8013f3a:	f7ec f969 	bl	8000210 <memchr>
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	d03f      	beq.n	8013fc2 <_vfiprintf_r+0x20e>
 8013f42:	4b26      	ldr	r3, [pc, #152]	; (8013fdc <_vfiprintf_r+0x228>)
 8013f44:	bb1b      	cbnz	r3, 8013f8e <_vfiprintf_r+0x1da>
 8013f46:	9b03      	ldr	r3, [sp, #12]
 8013f48:	3307      	adds	r3, #7
 8013f4a:	f023 0307 	bic.w	r3, r3, #7
 8013f4e:	3308      	adds	r3, #8
 8013f50:	9303      	str	r3, [sp, #12]
 8013f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f54:	443b      	add	r3, r7
 8013f56:	9309      	str	r3, [sp, #36]	; 0x24
 8013f58:	e768      	b.n	8013e2c <_vfiprintf_r+0x78>
 8013f5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f5e:	460c      	mov	r4, r1
 8013f60:	2001      	movs	r0, #1
 8013f62:	e7a6      	b.n	8013eb2 <_vfiprintf_r+0xfe>
 8013f64:	2300      	movs	r3, #0
 8013f66:	3401      	adds	r4, #1
 8013f68:	9305      	str	r3, [sp, #20]
 8013f6a:	4619      	mov	r1, r3
 8013f6c:	f04f 0c0a 	mov.w	ip, #10
 8013f70:	4620      	mov	r0, r4
 8013f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f76:	3a30      	subs	r2, #48	; 0x30
 8013f78:	2a09      	cmp	r2, #9
 8013f7a:	d903      	bls.n	8013f84 <_vfiprintf_r+0x1d0>
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d0c6      	beq.n	8013f0e <_vfiprintf_r+0x15a>
 8013f80:	9105      	str	r1, [sp, #20]
 8013f82:	e7c4      	b.n	8013f0e <_vfiprintf_r+0x15a>
 8013f84:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f88:	4604      	mov	r4, r0
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	e7f0      	b.n	8013f70 <_vfiprintf_r+0x1bc>
 8013f8e:	ab03      	add	r3, sp, #12
 8013f90:	9300      	str	r3, [sp, #0]
 8013f92:	462a      	mov	r2, r5
 8013f94:	4b12      	ldr	r3, [pc, #72]	; (8013fe0 <_vfiprintf_r+0x22c>)
 8013f96:	a904      	add	r1, sp, #16
 8013f98:	4630      	mov	r0, r6
 8013f9a:	f7fd fb5d 	bl	8011658 <_printf_float>
 8013f9e:	4607      	mov	r7, r0
 8013fa0:	1c78      	adds	r0, r7, #1
 8013fa2:	d1d6      	bne.n	8013f52 <_vfiprintf_r+0x19e>
 8013fa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013fa6:	07d9      	lsls	r1, r3, #31
 8013fa8:	d405      	bmi.n	8013fb6 <_vfiprintf_r+0x202>
 8013faa:	89ab      	ldrh	r3, [r5, #12]
 8013fac:	059a      	lsls	r2, r3, #22
 8013fae:	d402      	bmi.n	8013fb6 <_vfiprintf_r+0x202>
 8013fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013fb2:	f7fe f8fe 	bl	80121b2 <__retarget_lock_release_recursive>
 8013fb6:	89ab      	ldrh	r3, [r5, #12]
 8013fb8:	065b      	lsls	r3, r3, #25
 8013fba:	f53f af1d 	bmi.w	8013df8 <_vfiprintf_r+0x44>
 8013fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013fc0:	e71c      	b.n	8013dfc <_vfiprintf_r+0x48>
 8013fc2:	ab03      	add	r3, sp, #12
 8013fc4:	9300      	str	r3, [sp, #0]
 8013fc6:	462a      	mov	r2, r5
 8013fc8:	4b05      	ldr	r3, [pc, #20]	; (8013fe0 <_vfiprintf_r+0x22c>)
 8013fca:	a904      	add	r1, sp, #16
 8013fcc:	4630      	mov	r0, r6
 8013fce:	f7fd fde7 	bl	8011ba0 <_printf_i>
 8013fd2:	e7e4      	b.n	8013f9e <_vfiprintf_r+0x1ea>
 8013fd4:	0801662c 	.word	0x0801662c
 8013fd8:	08016636 	.word	0x08016636
 8013fdc:	08011659 	.word	0x08011659
 8013fe0:	08013d91 	.word	0x08013d91
 8013fe4:	08016632 	.word	0x08016632

08013fe8 <__swbuf_r>:
 8013fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fea:	460e      	mov	r6, r1
 8013fec:	4614      	mov	r4, r2
 8013fee:	4605      	mov	r5, r0
 8013ff0:	b118      	cbz	r0, 8013ffa <__swbuf_r+0x12>
 8013ff2:	6a03      	ldr	r3, [r0, #32]
 8013ff4:	b90b      	cbnz	r3, 8013ffa <__swbuf_r+0x12>
 8013ff6:	f7fd ff6f 	bl	8011ed8 <__sinit>
 8013ffa:	69a3      	ldr	r3, [r4, #24]
 8013ffc:	60a3      	str	r3, [r4, #8]
 8013ffe:	89a3      	ldrh	r3, [r4, #12]
 8014000:	071a      	lsls	r2, r3, #28
 8014002:	d525      	bpl.n	8014050 <__swbuf_r+0x68>
 8014004:	6923      	ldr	r3, [r4, #16]
 8014006:	b31b      	cbz	r3, 8014050 <__swbuf_r+0x68>
 8014008:	6823      	ldr	r3, [r4, #0]
 801400a:	6922      	ldr	r2, [r4, #16]
 801400c:	1a98      	subs	r0, r3, r2
 801400e:	6963      	ldr	r3, [r4, #20]
 8014010:	b2f6      	uxtb	r6, r6
 8014012:	4283      	cmp	r3, r0
 8014014:	4637      	mov	r7, r6
 8014016:	dc04      	bgt.n	8014022 <__swbuf_r+0x3a>
 8014018:	4621      	mov	r1, r4
 801401a:	4628      	mov	r0, r5
 801401c:	f7ff fdac 	bl	8013b78 <_fflush_r>
 8014020:	b9e0      	cbnz	r0, 801405c <__swbuf_r+0x74>
 8014022:	68a3      	ldr	r3, [r4, #8]
 8014024:	3b01      	subs	r3, #1
 8014026:	60a3      	str	r3, [r4, #8]
 8014028:	6823      	ldr	r3, [r4, #0]
 801402a:	1c5a      	adds	r2, r3, #1
 801402c:	6022      	str	r2, [r4, #0]
 801402e:	701e      	strb	r6, [r3, #0]
 8014030:	6962      	ldr	r2, [r4, #20]
 8014032:	1c43      	adds	r3, r0, #1
 8014034:	429a      	cmp	r2, r3
 8014036:	d004      	beq.n	8014042 <__swbuf_r+0x5a>
 8014038:	89a3      	ldrh	r3, [r4, #12]
 801403a:	07db      	lsls	r3, r3, #31
 801403c:	d506      	bpl.n	801404c <__swbuf_r+0x64>
 801403e:	2e0a      	cmp	r6, #10
 8014040:	d104      	bne.n	801404c <__swbuf_r+0x64>
 8014042:	4621      	mov	r1, r4
 8014044:	4628      	mov	r0, r5
 8014046:	f7ff fd97 	bl	8013b78 <_fflush_r>
 801404a:	b938      	cbnz	r0, 801405c <__swbuf_r+0x74>
 801404c:	4638      	mov	r0, r7
 801404e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014050:	4621      	mov	r1, r4
 8014052:	4628      	mov	r0, r5
 8014054:	f000 f806 	bl	8014064 <__swsetup_r>
 8014058:	2800      	cmp	r0, #0
 801405a:	d0d5      	beq.n	8014008 <__swbuf_r+0x20>
 801405c:	f04f 37ff 	mov.w	r7, #4294967295
 8014060:	e7f4      	b.n	801404c <__swbuf_r+0x64>
	...

08014064 <__swsetup_r>:
 8014064:	b538      	push	{r3, r4, r5, lr}
 8014066:	4b2a      	ldr	r3, [pc, #168]	; (8014110 <__swsetup_r+0xac>)
 8014068:	4605      	mov	r5, r0
 801406a:	6818      	ldr	r0, [r3, #0]
 801406c:	460c      	mov	r4, r1
 801406e:	b118      	cbz	r0, 8014078 <__swsetup_r+0x14>
 8014070:	6a03      	ldr	r3, [r0, #32]
 8014072:	b90b      	cbnz	r3, 8014078 <__swsetup_r+0x14>
 8014074:	f7fd ff30 	bl	8011ed8 <__sinit>
 8014078:	89a3      	ldrh	r3, [r4, #12]
 801407a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801407e:	0718      	lsls	r0, r3, #28
 8014080:	d422      	bmi.n	80140c8 <__swsetup_r+0x64>
 8014082:	06d9      	lsls	r1, r3, #27
 8014084:	d407      	bmi.n	8014096 <__swsetup_r+0x32>
 8014086:	2309      	movs	r3, #9
 8014088:	602b      	str	r3, [r5, #0]
 801408a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801408e:	81a3      	strh	r3, [r4, #12]
 8014090:	f04f 30ff 	mov.w	r0, #4294967295
 8014094:	e034      	b.n	8014100 <__swsetup_r+0x9c>
 8014096:	0758      	lsls	r0, r3, #29
 8014098:	d512      	bpl.n	80140c0 <__swsetup_r+0x5c>
 801409a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801409c:	b141      	cbz	r1, 80140b0 <__swsetup_r+0x4c>
 801409e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80140a2:	4299      	cmp	r1, r3
 80140a4:	d002      	beq.n	80140ac <__swsetup_r+0x48>
 80140a6:	4628      	mov	r0, r5
 80140a8:	f7fe ff0c 	bl	8012ec4 <_free_r>
 80140ac:	2300      	movs	r3, #0
 80140ae:	6363      	str	r3, [r4, #52]	; 0x34
 80140b0:	89a3      	ldrh	r3, [r4, #12]
 80140b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80140b6:	81a3      	strh	r3, [r4, #12]
 80140b8:	2300      	movs	r3, #0
 80140ba:	6063      	str	r3, [r4, #4]
 80140bc:	6923      	ldr	r3, [r4, #16]
 80140be:	6023      	str	r3, [r4, #0]
 80140c0:	89a3      	ldrh	r3, [r4, #12]
 80140c2:	f043 0308 	orr.w	r3, r3, #8
 80140c6:	81a3      	strh	r3, [r4, #12]
 80140c8:	6923      	ldr	r3, [r4, #16]
 80140ca:	b94b      	cbnz	r3, 80140e0 <__swsetup_r+0x7c>
 80140cc:	89a3      	ldrh	r3, [r4, #12]
 80140ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80140d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80140d6:	d003      	beq.n	80140e0 <__swsetup_r+0x7c>
 80140d8:	4621      	mov	r1, r4
 80140da:	4628      	mov	r0, r5
 80140dc:	f000 f884 	bl	80141e8 <__smakebuf_r>
 80140e0:	89a0      	ldrh	r0, [r4, #12]
 80140e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80140e6:	f010 0301 	ands.w	r3, r0, #1
 80140ea:	d00a      	beq.n	8014102 <__swsetup_r+0x9e>
 80140ec:	2300      	movs	r3, #0
 80140ee:	60a3      	str	r3, [r4, #8]
 80140f0:	6963      	ldr	r3, [r4, #20]
 80140f2:	425b      	negs	r3, r3
 80140f4:	61a3      	str	r3, [r4, #24]
 80140f6:	6923      	ldr	r3, [r4, #16]
 80140f8:	b943      	cbnz	r3, 801410c <__swsetup_r+0xa8>
 80140fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80140fe:	d1c4      	bne.n	801408a <__swsetup_r+0x26>
 8014100:	bd38      	pop	{r3, r4, r5, pc}
 8014102:	0781      	lsls	r1, r0, #30
 8014104:	bf58      	it	pl
 8014106:	6963      	ldrpl	r3, [r4, #20]
 8014108:	60a3      	str	r3, [r4, #8]
 801410a:	e7f4      	b.n	80140f6 <__swsetup_r+0x92>
 801410c:	2000      	movs	r0, #0
 801410e:	e7f7      	b.n	8014100 <__swsetup_r+0x9c>
 8014110:	20000094 	.word	0x20000094

08014114 <_raise_r>:
 8014114:	291f      	cmp	r1, #31
 8014116:	b538      	push	{r3, r4, r5, lr}
 8014118:	4604      	mov	r4, r0
 801411a:	460d      	mov	r5, r1
 801411c:	d904      	bls.n	8014128 <_raise_r+0x14>
 801411e:	2316      	movs	r3, #22
 8014120:	6003      	str	r3, [r0, #0]
 8014122:	f04f 30ff 	mov.w	r0, #4294967295
 8014126:	bd38      	pop	{r3, r4, r5, pc}
 8014128:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801412a:	b112      	cbz	r2, 8014132 <_raise_r+0x1e>
 801412c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014130:	b94b      	cbnz	r3, 8014146 <_raise_r+0x32>
 8014132:	4620      	mov	r0, r4
 8014134:	f000 f830 	bl	8014198 <_getpid_r>
 8014138:	462a      	mov	r2, r5
 801413a:	4601      	mov	r1, r0
 801413c:	4620      	mov	r0, r4
 801413e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014142:	f000 b817 	b.w	8014174 <_kill_r>
 8014146:	2b01      	cmp	r3, #1
 8014148:	d00a      	beq.n	8014160 <_raise_r+0x4c>
 801414a:	1c59      	adds	r1, r3, #1
 801414c:	d103      	bne.n	8014156 <_raise_r+0x42>
 801414e:	2316      	movs	r3, #22
 8014150:	6003      	str	r3, [r0, #0]
 8014152:	2001      	movs	r0, #1
 8014154:	e7e7      	b.n	8014126 <_raise_r+0x12>
 8014156:	2400      	movs	r4, #0
 8014158:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801415c:	4628      	mov	r0, r5
 801415e:	4798      	blx	r3
 8014160:	2000      	movs	r0, #0
 8014162:	e7e0      	b.n	8014126 <_raise_r+0x12>

08014164 <raise>:
 8014164:	4b02      	ldr	r3, [pc, #8]	; (8014170 <raise+0xc>)
 8014166:	4601      	mov	r1, r0
 8014168:	6818      	ldr	r0, [r3, #0]
 801416a:	f7ff bfd3 	b.w	8014114 <_raise_r>
 801416e:	bf00      	nop
 8014170:	20000094 	.word	0x20000094

08014174 <_kill_r>:
 8014174:	b538      	push	{r3, r4, r5, lr}
 8014176:	4d07      	ldr	r5, [pc, #28]	; (8014194 <_kill_r+0x20>)
 8014178:	2300      	movs	r3, #0
 801417a:	4604      	mov	r4, r0
 801417c:	4608      	mov	r0, r1
 801417e:	4611      	mov	r1, r2
 8014180:	602b      	str	r3, [r5, #0]
 8014182:	f7fd f95d 	bl	8011440 <_kill>
 8014186:	1c43      	adds	r3, r0, #1
 8014188:	d102      	bne.n	8014190 <_kill_r+0x1c>
 801418a:	682b      	ldr	r3, [r5, #0]
 801418c:	b103      	cbz	r3, 8014190 <_kill_r+0x1c>
 801418e:	6023      	str	r3, [r4, #0]
 8014190:	bd38      	pop	{r3, r4, r5, pc}
 8014192:	bf00      	nop
 8014194:	20007924 	.word	0x20007924

08014198 <_getpid_r>:
 8014198:	f7fd b94a 	b.w	8011430 <_getpid>

0801419c <__swhatbuf_r>:
 801419c:	b570      	push	{r4, r5, r6, lr}
 801419e:	460c      	mov	r4, r1
 80141a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141a4:	2900      	cmp	r1, #0
 80141a6:	b096      	sub	sp, #88	; 0x58
 80141a8:	4615      	mov	r5, r2
 80141aa:	461e      	mov	r6, r3
 80141ac:	da0d      	bge.n	80141ca <__swhatbuf_r+0x2e>
 80141ae:	89a3      	ldrh	r3, [r4, #12]
 80141b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80141b4:	f04f 0100 	mov.w	r1, #0
 80141b8:	bf0c      	ite	eq
 80141ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80141be:	2340      	movne	r3, #64	; 0x40
 80141c0:	2000      	movs	r0, #0
 80141c2:	6031      	str	r1, [r6, #0]
 80141c4:	602b      	str	r3, [r5, #0]
 80141c6:	b016      	add	sp, #88	; 0x58
 80141c8:	bd70      	pop	{r4, r5, r6, pc}
 80141ca:	466a      	mov	r2, sp
 80141cc:	f000 f848 	bl	8014260 <_fstat_r>
 80141d0:	2800      	cmp	r0, #0
 80141d2:	dbec      	blt.n	80141ae <__swhatbuf_r+0x12>
 80141d4:	9901      	ldr	r1, [sp, #4]
 80141d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80141da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80141de:	4259      	negs	r1, r3
 80141e0:	4159      	adcs	r1, r3
 80141e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80141e6:	e7eb      	b.n	80141c0 <__swhatbuf_r+0x24>

080141e8 <__smakebuf_r>:
 80141e8:	898b      	ldrh	r3, [r1, #12]
 80141ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80141ec:	079d      	lsls	r5, r3, #30
 80141ee:	4606      	mov	r6, r0
 80141f0:	460c      	mov	r4, r1
 80141f2:	d507      	bpl.n	8014204 <__smakebuf_r+0x1c>
 80141f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80141f8:	6023      	str	r3, [r4, #0]
 80141fa:	6123      	str	r3, [r4, #16]
 80141fc:	2301      	movs	r3, #1
 80141fe:	6163      	str	r3, [r4, #20]
 8014200:	b002      	add	sp, #8
 8014202:	bd70      	pop	{r4, r5, r6, pc}
 8014204:	ab01      	add	r3, sp, #4
 8014206:	466a      	mov	r2, sp
 8014208:	f7ff ffc8 	bl	801419c <__swhatbuf_r>
 801420c:	9900      	ldr	r1, [sp, #0]
 801420e:	4605      	mov	r5, r0
 8014210:	4630      	mov	r0, r6
 8014212:	f7fe fecb 	bl	8012fac <_malloc_r>
 8014216:	b948      	cbnz	r0, 801422c <__smakebuf_r+0x44>
 8014218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801421c:	059a      	lsls	r2, r3, #22
 801421e:	d4ef      	bmi.n	8014200 <__smakebuf_r+0x18>
 8014220:	f023 0303 	bic.w	r3, r3, #3
 8014224:	f043 0302 	orr.w	r3, r3, #2
 8014228:	81a3      	strh	r3, [r4, #12]
 801422a:	e7e3      	b.n	80141f4 <__smakebuf_r+0xc>
 801422c:	89a3      	ldrh	r3, [r4, #12]
 801422e:	6020      	str	r0, [r4, #0]
 8014230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014234:	81a3      	strh	r3, [r4, #12]
 8014236:	9b00      	ldr	r3, [sp, #0]
 8014238:	6163      	str	r3, [r4, #20]
 801423a:	9b01      	ldr	r3, [sp, #4]
 801423c:	6120      	str	r0, [r4, #16]
 801423e:	b15b      	cbz	r3, 8014258 <__smakebuf_r+0x70>
 8014240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014244:	4630      	mov	r0, r6
 8014246:	f000 f81d 	bl	8014284 <_isatty_r>
 801424a:	b128      	cbz	r0, 8014258 <__smakebuf_r+0x70>
 801424c:	89a3      	ldrh	r3, [r4, #12]
 801424e:	f023 0303 	bic.w	r3, r3, #3
 8014252:	f043 0301 	orr.w	r3, r3, #1
 8014256:	81a3      	strh	r3, [r4, #12]
 8014258:	89a3      	ldrh	r3, [r4, #12]
 801425a:	431d      	orrs	r5, r3
 801425c:	81a5      	strh	r5, [r4, #12]
 801425e:	e7cf      	b.n	8014200 <__smakebuf_r+0x18>

08014260 <_fstat_r>:
 8014260:	b538      	push	{r3, r4, r5, lr}
 8014262:	4d07      	ldr	r5, [pc, #28]	; (8014280 <_fstat_r+0x20>)
 8014264:	2300      	movs	r3, #0
 8014266:	4604      	mov	r4, r0
 8014268:	4608      	mov	r0, r1
 801426a:	4611      	mov	r1, r2
 801426c:	602b      	str	r3, [r5, #0]
 801426e:	f7fd f92a 	bl	80114c6 <_fstat>
 8014272:	1c43      	adds	r3, r0, #1
 8014274:	d102      	bne.n	801427c <_fstat_r+0x1c>
 8014276:	682b      	ldr	r3, [r5, #0]
 8014278:	b103      	cbz	r3, 801427c <_fstat_r+0x1c>
 801427a:	6023      	str	r3, [r4, #0]
 801427c:	bd38      	pop	{r3, r4, r5, pc}
 801427e:	bf00      	nop
 8014280:	20007924 	.word	0x20007924

08014284 <_isatty_r>:
 8014284:	b538      	push	{r3, r4, r5, lr}
 8014286:	4d06      	ldr	r5, [pc, #24]	; (80142a0 <_isatty_r+0x1c>)
 8014288:	2300      	movs	r3, #0
 801428a:	4604      	mov	r4, r0
 801428c:	4608      	mov	r0, r1
 801428e:	602b      	str	r3, [r5, #0]
 8014290:	f7fd f929 	bl	80114e6 <_isatty>
 8014294:	1c43      	adds	r3, r0, #1
 8014296:	d102      	bne.n	801429e <_isatty_r+0x1a>
 8014298:	682b      	ldr	r3, [r5, #0]
 801429a:	b103      	cbz	r3, 801429e <_isatty_r+0x1a>
 801429c:	6023      	str	r3, [r4, #0]
 801429e:	bd38      	pop	{r3, r4, r5, pc}
 80142a0:	20007924 	.word	0x20007924

080142a4 <_init>:
 80142a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142a6:	bf00      	nop
 80142a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142aa:	bc08      	pop	{r3}
 80142ac:	469e      	mov	lr, r3
 80142ae:	4770      	bx	lr

080142b0 <_fini>:
 80142b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142b2:	bf00      	nop
 80142b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142b6:	bc08      	pop	{r3}
 80142b8:	469e      	mov	lr, r3
 80142ba:	4770      	bx	lr
